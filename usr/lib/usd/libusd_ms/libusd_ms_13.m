__n128 sub_216D5E6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  atomic_uint *v3;
  __n128 result;

  v3 = *(atomic_uint **)a3;
  *(void *)a2 = *(void *)a3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a3 + 16);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  result = *(__n128 *)(a3 + 144);
  *(__n128 *)(a2 + 144) = result;
  *(void *)(a2 + 160) = *(void *)(a3 + 160);
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  return result;
}

uint64_t sub_216D5E7E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D5E8AC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216D5E860(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187) {
    sub_21677CA1C();
  }
  return operator new(168 * a2);
}

uint64_t sub_216D5E8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 168;
      sub_216D5E978(a1, (void *)(v7 - 168), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 168;
      *((void *)&v16 + 1) -= 168;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216D5EA10((uint64_t)v13);
  return v11;
}

void sub_216D5E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D5E978(uint64_t a1, void *a2, uint64_t a3)
{
  v3 = *(atomic_uint **)a3;
  *a2 = *(void *)a3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = *(void *)(a3 + 8);
  a2[1] = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a2[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return sub_216980D74((uint64_t)(a2 + 2), a3 + 16);
}

void sub_216D5E9E4(_Unwind_Exception *a1)
{
  unint64_t add_explicit = *((void *)v1 + 1);
  if ((add_explicit & 7) != 0) {
    unint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(add_explicit & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)add_explicit, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D5EA10(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D5EA48((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216D5EA48(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216D59ECC(v3, v1);
      v1 += 168;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216D5EA9C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_216D5EAD0(void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = v3[4];
      v3[2] = v1 - 168;
      uint64_t result = sub_216D59ECC(v4, v1 - 168);
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

__n128 sub_216D5EB20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C768C40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216D5EB6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C768C40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *sub_216D5EB9C@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(*(void *)(*(void *)(a1 + 8) + 8) - 16));
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v7, v8);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v9, a2, &v12);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12)
    && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16)))
  {
    sub_216981010((_DWORD *)a3, &v12);
    sub_21698105C((_DWORD *)(a3 + 4), &v13);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 8) = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216D5EC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 4));
  sub_21697C414((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D5EC80(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768CA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D5ECC0()
{
  return &unk_26C768CA0;
}

uint64_t *sub_216D5ECCC()
{
  sub_216D5F658();
  sub_216D5F784();
  sub_216D5F8B0();
  sub_216D5F9DC();

  return sub_216D5FB08();
}

void *pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *__n128 result = &unk_26C768CC0;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *__n128 result = &unk_26C768CC0;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice *this)
{
  *(void *)this = &unk_26C768CC0;
  uint64_t v2 = (atomic_uint *)*((void *)this + 2);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *this)
{
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged::~StageEditTargetChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged *this)
{
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::LayerMutingChanged::~LayerMutingChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::LayerMutingChanged *this)
{
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);

  operator delete(v1);
}

void *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::GetChangedFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(uint64_t **)(*(void *)this + 40);
  uint64_t v4 = *(uint64_t **)(*(void *)this + 48);
  if (v3 == v4)
  {
    char v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    do
    {
      uint64_t v5 = *v3;
      sub_216973388((char **)a2, *(unsigned int *)(*v3 + 120) + ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      uint64_t v6 = (uint64_t *)v5;
      if (*(_DWORD *)(v5 + 124) >= 4u) {
        uint64_t v6 = *(uint64_t **)v5;
      }
      uint64_t v7 = *(unsigned int *)(v5 + 120);
      v15[0] = (char **)a2;
      if (v7)
      {
        uint64_t v8 = 40 * v7;
        do
        {
          sub_216D5FCD8(v15, v6);
          v6 += 5;
          v8 -= 40;
        }
        while (v8);
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v9 = *(char **)a2;
    char v10 = *(uint64_t **)(a2 + 8);
  }
  unint64_t v11 = 126 - 2 * __clz(((char *)v10 - v9) >> 3);
  if (v10 == (uint64_t *)v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_2169E0EAC((uint64_t)v9, v10, (uint64_t)v15, v12, 1);
  int v13 = sub_216D5FD4C(*(uint64_t **)a2, *(uint64_t **)(a2 + 8));
  return sub_216AD0DE4(a2, v13, *(void **)(a2 + 8));
}

void sub_216D5EFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 40);
  uint64_t v1 = *(void *)(*(void *)this + 48);
  if (v2 == v1) {
    return 0;
  }
  uint64_t v3 = v2 + 8;
  do
  {
    int v4 = *(_DWORD *)(*(void *)(v3 - 8) + 120);
    BOOL result = v4 != 0;
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == v1;
    }
    v3 += 8;
  }
  while (!v6);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91AC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91AC8))
  {
    qword_267B91AC0 = 0;
    qword_267B91AB8 = 0;
    qword_267B91AB0 = (uint64_t)&qword_267B91AB8;
    __cxa_atexit((void (*)(void *))sub_216D5F0AC, &qword_267B91AB0, &dword_216758000);
    __cxa_guard_release(&qword_267B91AC8);
  }
  return &qword_267B91AB0;
}

uint64_t sub_216D5F0AC(uint64_t a1)
{
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ObjectsChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t *a2, uint64_t a3)
{
  EmptyChangesMap = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap(a1);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)EmptyChangesMap);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  *(void *)a1 = &unk_26C768CC0;
  *((void *)a1 + 1) = v8;
  *((void *)a1 + 2) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C768D30;
  *((void *)a1 + 3) = a3;
  *((void *)a1 + 4) = &qword_267B91AB0;
  *((void *)a1 + 5) = &qword_267B91AB0;
  return a1;
}

{
  uint64_t *EmptyChangesMap;
  uint64_t v7;
  uint64_t v8;

  EmptyChangesMap = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap(a1);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::_GetEmptyChangesMap((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)EmptyChangesMap);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  *(void *)a1 = &unk_26C768CC0;
  *((void *)a1 + 1) = v8;
  *((void *)a1 + 2) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C768D30;
  *((void *)a1 + 3) = a3;
  *((void *)a1 + 4) = &qword_267B91AB0;
  *((void *)a1 + 5) = &qword_267B91AB0;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::~StageNotice(this);

  operator delete(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ResyncedObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 24);
  sub_216D0162C(a2, &v7);
  int v4 = sub_216D5FEB4(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, 0, (uint64_t)&v9);
  uint64_t v5 = *(void *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  return v5 + 8 != (void)v4;
}

void sub_216D5F2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ChangedInfoOnly(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_216D0162C(a2, &v7);
  int v4 = sub_216CF7EAC(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  uint64_t v5 = *(void *)(a1 + 32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  return v5 + 8 != (void)v4;
}

void sub_216D5F354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ResolvedAssetPathsResynced(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  sub_216D0162C(a2, &v7);
  int v4 = sub_216D5FEB4(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, 0, (uint64_t)&v9);
  uint64_t v5 = *(void *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  return v5 + 8 != (void)v4;
}

void sub_216D5F3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return *((void *)this + 3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return *((void *)this + 4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResolvedAssetPathsResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return *((void *)this + 5);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_216D0162C(a2, &v6);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216D5F480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 3);
  char v9 = sub_216CF7EAC(v6, a2);
  if ((void *)(v6 + 8) != v9) {
    return pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::GetChangedFields((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *)&v9, (uint64_t)a3);
  }
  uint64_t v7 = *((void *)this + 4);
  BOOL result = sub_216CF7EAC(v7, a2);
  char v9 = result;
  if ((void *)(v7 + 8) != result) {
    return pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator::GetChangedFields((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator *)&v9, (uint64_t)a3);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t a2)
{
  sub_216D0162C(a2, &v5);
  BOOL HasChangedFields = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  return HasChangedFields;
}

void sub_216D5F580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = *((void *)this + 3);
  int v5 = sub_216CF7EAC(v4, a2);
  if ((void *)(v4 + 8) != v5)
  {
    uint64_t v7 = v5[5];
    uint64_t v6 = v5[6];
    if (v7 != v6)
    {
      uint64_t v8 = v7 + 8;
      do
      {
        int v9 = *(_DWORD *)(*(void *)(v8 - 8) + 120);
        BOOL result = v9 != 0;
        if (v9) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v8 == v6;
        }
        v8 += 8;
      }
      while (!v11);
      return result;
    }
    return 0;
  }
  uint64_t v12 = *((void *)this + 4);
  int v13 = sub_216CF7EAC(v12, a2);
  if ((void *)(v12 + 8) == v13) {
    return 0;
  }
  uint64_t v15 = v13[5];
  uint64_t v14 = v13[6];
  if (v15 == v14) {
    return 0;
  }
  uint64_t v16 = v15 + 8;
  do
  {
    int v17 = *(_DWORD *)(*(void *)(v16 - 8) + 120);
    BOOL result = v17 != 0;
    if (v17) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = v16 == v14;
    }
    v16 += 8;
  }
  while (!v18);
  return result;
}

uint64_t *sub_216D5F658()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D5F738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216D5F784()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D5FC38((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D5F864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216D5F8B0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D5FC38((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D5F990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216D5F9DC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D5FC38((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D5FABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216D5FB08()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D5FC38((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D5FBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216D5FC38(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D5FCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_216D5FCD8(char ***a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  char v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v6 = sub_216973984(*a1, a2);
  }
  else
  {
    uint64_t v5 = *a2;
    *(void *)char v4 = *a2;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = v4 + 8;
  }
  v3[1] = v6;
  return a1;
}

uint64_t *sub_216D5FD4C(uint64_t *a1, uint64_t *a2)
{
  BOOL result = a2;
  if (a1 != a2)
  {
    char v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      unint64_t v5 = *(v4 - 1) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v6 = *v4++ & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5 != v6);
    int v7 = v4 - 2;
    if (v4 == a2)
    {
      int v9 = v4 - 2;
    }
    else
    {
      do
      {
        uint64_t v8 = *v4;
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*v4 & 0xFFFFFFFFFFFFFFF8))
        {
          int v9 = v7;
        }
        else
        {
          int v9 = v7 + 1;
          if (v4 - 1 != v7)
          {
            if ((*v9 & 7) != 0)
            {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              uint64_t v8 = *v4;
            }
            *int v9 = v8;
            *char v4 = 0;
          }
        }
        ++v4;
        int v7 = v9;
      }
      while (v4 != a2);
    }
    return v9 + 1;
  }
  return result;
}

void sub_216D5FE08(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216D5FE08(a1, *a2);
    sub_216D5FE08(a1, a2[1]);
    sub_216D5FE64((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_216D5FE64(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void *sub_216D5FEB4(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char a3, uint64_t a4)
{
  char v4 = a1 + 1;
  if (!a1[2]) {
    return a1 + 1;
  }
  uint64_t v8 = (void *)*v4;
  int v9 = a1 + 1;
  if (!*v4) {
    goto LABEL_10;
  }
  int v9 = a1 + 1;
  do
  {
    int v11 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 4), a2);
    uint64_t v12 = v8 + 1;
    if (!v11)
    {
      uint64_t v12 = v8;
      int v9 = v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if ((a3 & 1) != 0 || v9 == v4 || (int v13 = v9, v9[4] != *(void *)a2))
  {
LABEL_10:
    int v13 = v4;
    if (v9 != (void *)*a1)
    {
      uint64_t v14 = (void *)*v9;
      if (*v9)
      {
        do
        {
          int v13 = v14;
          uint64_t v14 = (void *)v14[1];
        }
        while (v14);
      }
      else
      {
        do
        {
          int v13 = (void *)v9[2];
          BOOL v15 = *v13 == (void)v9;
          int v9 = v13;
        }
        while (v15);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 4)))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 4), &v17);
        int v13 = (void *)sub_216D5FEB4(a1, &v17, 0, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_21697C414(&v17);
      }
    }
  }
  return v13;
}

void sub_216D5FFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdObject::GetStage@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v5 = *(void *)v4;

  return sub_216D61884(a3, v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v4 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, a2, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8 = *((void *)this + 1);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  int v9 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v8;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetMetadata(v9, this, a2, a4, 1, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, a2, a4, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(this, a2, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v3);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8 = *((void *)this + 1);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v9 = *(void *)v8;

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadata(v9, (uint64_t)this, (uint64_t)a2, (uint64_t)a4, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v4;
  uint64_t v7 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(v5, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6 = *((void *)this + 1);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v6;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(v7, this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v4;
  uint64_t v7 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(v5, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, 1);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v4;
  uint64_t v7 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(v5, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, 0);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6 = *((void *)this + 1);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v6;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(v7, this, a2, a3, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6 = *((void *)this + 1);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v6;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(v7, this, a2, a3, 0);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v5 = *((void *)this + 1);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetAllMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, this, 1, (uint64_t **)a3, 0);
}

void sub_216D605A8(_Unwind_Exception *a1)
{
  sub_216D61968(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v5 = *((void *)this + 1);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetAllMetadata(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, this, 0, (uint64_t **)a3, 0);
}

void sub_216D60628(_Unwind_Exception *a1)
{
  sub_216D61968(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D241E4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 72));
}

void sub_216D606C0(_Unwind_Exception *a1)
{
  sub_2168EBBB8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  *((void *)a3 + 1) = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 72), a3, a2);
}

void sub_216D60760(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D24260((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 72));
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 72), a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 72));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 72));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 72));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredCustomDataKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 72), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D241E4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 16));
}

void sub_216D60B24(_Unwind_Exception *a1)
{
  sub_2168EBBB8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  *((void *)a3 + 1) = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 16), a3, a2);
}

void sub_216D60BC4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D24260((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 16));
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 16), a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearAssetInfoByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAssetInfoKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredAssetInfo(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredAssetInfoKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::IsHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unsigned __int8 v4 = 0;
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = 0;
  sub_216D249A4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176), (uint64_t)&v4, &v5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v4;
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D2483C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredHidden(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdObject::GetDocumentation@<W0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned __int8 v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unsigned __int8 v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  BOOL result = sub_216D24BF8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D61170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation(uint64_t a1)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D24A4C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 136));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearDocumentation(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 136));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredDocumentation(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 136));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdObject::GetDisplayName@<W0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned __int8 v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unsigned __int8 v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  BOOL result = sub_216D24BF8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 120), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D61378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName(uint64_t a1)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D24A4C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 120));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearDisplayName(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 120));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredDisplayName(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 120));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3
    || (a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)this + 1),
        (*(unsigned char *)(v3 + 57) & 8) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)this + 1);
  }
  unsigned __int8 v4 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(v4, a2, (atomic_uint **)this + 3);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_GetObjectDescription(unsigned int *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  switch(*a1)
  {
    case 0u:
    case 1u:
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 2);
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), a4);
      return;
    case 2u:
      if (a2[23] >= 0) {
        uint64_t v7 = (uint64_t *)a2;
      }
      else {
        uint64_t v7 = *(uint64_t **)a2;
      }
      unint64_t v8 = *((void *)a1 + 3) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        uint64_t v9 = (const char *)(v8 + 16);
        if (*(char *)(v8 + 39) < 0) {
          uint64_t v9 = *(const char **)v9;
        }
      }
      else
      {
        uint64_t v9 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%sproperty '%s' on ", a2, a3, v7, v9);
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription((pxrInternal__aapl__pxrReserved__ **)a1 + 1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      goto LABEL_45;
    case 3u:
      if (a2[23] >= 0) {
        uint64_t v10 = (uint64_t *)a2;
      }
      else {
        uint64_t v10 = *(uint64_t **)a2;
      }
      unint64_t v11 = *((void *)a1 + 3) & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        uint64_t v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          uint64_t v12 = *(const char **)v12;
        }
      }
      else
      {
        uint64_t v12 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%sattribute '%s' on ", a2, a3, v10, v12);
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription((pxrInternal__aapl__pxrReserved__ **)a1 + 1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      goto LABEL_45;
    case 4u:
      if (a2[23] >= 0) {
        int v13 = (uint64_t *)a2;
      }
      else {
        int v13 = *(uint64_t **)a2;
      }
      unint64_t v14 = *((void *)a1 + 3) & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        BOOL v15 = (const char *)(v14 + 16);
        if (*(char *)(v14 + 39) < 0) {
          BOOL v15 = *(const char **)v15;
        }
      }
      else
      {
        BOOL v15 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%srelationship '%s' on ", a2, a3, v13, v15);
      pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription((pxrInternal__aapl__pxrReserved__ **)a1 + 1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
LABEL_45:
      int v18 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      break;
    default:
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unknown object type %d", a2, a3, *a1);
      break;
  }
}

void sub_216D617B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X0>, std::string *a2@<X8>)
{
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetObjectDescription((unsigned int *)this, (const char *)__p, v4, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D61864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D61884(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_216D61950(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217323F90(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D61968(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216D61968(a1, *a2);
    sub_216D61968(a1, a2[1]);
    sub_2168EE084((uint64_t)(a2 + 5));
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  uint64_t v1 = (atomic_uint **)sub_216A663FC(a1);

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v1);
}

BOOL sub_216D61A18(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, int a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v24 = *(void *)(a2 + 16);
    }
    sub_216981010(&v25, (_DWORD *)(a2 + 24));
    sub_21698105C((_DWORD *)&v25 + 1, (_DWORD *)(a2 + 28));
    long long v26 = *(_OWORD *)(a2 + 32);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v7, &v21);
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v21);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v8);
    char v10 = sub_216D628A0((uint64_t)__p, EditTarget);
    unint64_t v11 = v22;
    if (v22
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v22->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v11->~__shared_weak_count_0)(v11);
    }
    if (v10)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_216D6298C(a1, v12, &v21);
      if (v21
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v21 + 8)) & 1) == 0)
      {
        uint64_t v17 = v21;
        int v18 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_216D62ABC(&v17, (unsigned __int8 *)__p, a3);
        if (v18) {
          sub_216784EC4(v18);
        }
        unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v14) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v15 = v19;
        unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
        BOOL v6 = v15 >= v16
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19, (atomic_ullong *)v14);
      }
      else
      {
        BOOL v6 = 0;
      }
      if (v22) {
        sub_216784EC4(v22);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    }
    else
    {
      BOOL v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_21697C414(&v25);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Add";
    uint64_t v24 = 117;
    v25 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Add(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditorType = pxrInternal__aa"
          "pl__pxrReserved__::UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInte"
          "rnal__aapl__pxrReserved__::SdfPayloadTypePolicy>]";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v6;
}

void sub_216D61C60(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, std::__shared_weak_count *);
  if (a3) {
    sub_216784EC4(a3);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_2169D8488((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPayloads::AddPayload(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, a2, a3, a4);
  BOOL v7 = sub_216D61A18(a1, (uint64_t)__p, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_216D61D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPayloads::AddPayload(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v10 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, a2, &v10, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  BOOL v8 = sub_216D61A18(a1, (uint64_t)__p, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v14);
  sub_21697C414(&v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_216D61E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPayloads::AddInternalPayload(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(v10, __p, a2, a3);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  BOOL v6 = sub_216D61A18(a1, (uint64_t)v10, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(&v12);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  return v6;
}

void sub_216D61F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

BOOL sub_216D61F6C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v23 = *(void *)(a2 + 16);
    }
    sub_216981010(&v24, (_DWORD *)(a2 + 24));
    sub_21698105C((_DWORD *)&v24 + 1, (_DWORD *)(a2 + 28));
    long long v25 = *(_OWORD *)(a2 + 32);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v20);
    BOOL v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v20);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v6);
    char v8 = sub_216D628A0((uint64_t)__p, EditTarget);
    uint64_t v9 = v21;
    if (v21
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v21->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v9->~__shared_weak_count_0)(v9);
    }
    if (v8)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_216D6298C(a1, v10, &v20);
      if (v20
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v20 + 8)) & 1) == 0)
      {
        sub_216D6321C(&v20, (unsigned __int8 *)__p);
        unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v15) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v16 = v18;
        unint64_t v17 = atomic_load((unint64_t *)(v15 + 144));
        BOOL v4 = v16 >= v17
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (atomic_ullong *)v15);
      }
      else
      {
        BOOL v4 = 0;
      }
      if (v21) {
        sub_216784EC4(v21);
      }
      char v11 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v11) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      int v12 = sub_216862604(&v18, 0);
      LOBYTE(v20) = 0;
      int v13 = (void *)sub_2168520EC(v11 + 19, &v20);
      if (v13 != v12) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
    }
    else
    {
      BOOL v4 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_21697C414(&v24);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Remove";
    uint64_t v23 = 148;
    uint64_t v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Remove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditorType = pxrInternal__aapl__pxrReserve"
          "d__::UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__px"
          "rReserved__::SdfPayloadTypePolicy>]";
    LOBYTE(v25) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v4;
}

void sub_216D621D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
}

BOOL sub_216D62278(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_216D6298C(a1, v3, &v14);
    if (v14
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v14 + 1) & 1) == 0
      && sub_216ABE404((uint64_t)&v14)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v14 + 6))(v14))
    {
      unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v5 = v12;
      unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
      BOOL v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (atomic_ullong *)v4);
    }
    else
    {
      BOOL v7 = 0;
    }
    if (v15) {
      sub_216784EC4(v15);
    }
    char v8 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    uint64_t v9 = sub_216862604(&v12, 0);
    LOBYTE(v14) = 0;
    uint64_t v10 = (void *)sub_2168520EC(v8 + 19, &v14);
    if (v10 != v9) {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v8, v9, v10);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
  else
  {
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    unint64_t v15 = (std::__shared_weak_count *)"Clear";
    uint64_t v16 = 174;
    unint64_t v17 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Clear(const UsdListEditorType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::UsdPayloads, ListOpPr"
          "oxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_216D6241C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_216D6245C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, __p);
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)__p);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    BOOL v7 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v35);
    v32 = 0;
    v33 = 0;
    unint64_t v34 = 0;
    sub_216D63600((uint64_t *)&v32, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4));
    char v8 = *(long long **)a2;
    uint64_t v9 = (long long *)*((void *)a2 + 1);
    if (*(long long **)a2 != v9)
    {
      do
      {
        if (*((char *)v8 + 23) < 0)
        {
          sub_216778F24(__p, *(void **)v8, *((void *)v8 + 1));
        }
        else
        {
          long long v10 = *v8;
          uint64_t v29 = *((void *)v8 + 2);
          *(_OWORD *)std::string __p = v10;
        }
        sub_216981010(&v30, (_DWORD *)v8 + 6);
        sub_21698105C((_DWORD *)&v30 + 1, (_DWORD *)v8 + 7);
        long long v31 = v8[2];
        if (sub_216D628A0((uint64_t)__p, EditTarget))
        {
          char v11 = v33;
          if ((unint64_t)v33 >= v34)
          {
            unint64_t v12 = (__n128 *)sub_216AE9558((uint64_t *)&v32, (uint64_t)__p);
          }
          else
          {
            sub_2169D8390((int)&v34, v33, (uint64_t)__p);
            unint64_t v12 = v11 + 3;
          }
          v33 = v12;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
        sub_21697C414(&v30);
        if (SHIBYTE(v29) < 0) {
          operator delete(__p[0]);
        }
        v8 += 3;
      }
      while (v8 != v9);
    }
    unint64_t v13 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v14 = v35;
    unint64_t v15 = atomic_load((unint64_t *)(v13 + 144));
    if (v14 >= v15
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v35, (atomic_ullong *)v13))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v27);
      sub_216D6298C(a1, v16, &v25);
      if (v25 && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v25 + 1) & 1) == 0)
      {
        if (v32 == v33)
        {
          if (sub_216ABE404((uint64_t)&v25)) {
            (*((void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v25 + 7))(v25);
          }
        }
        else
        {
          __p[0] = v25;
          __p[1] = v26;
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          LODWORD(v29) = 0;
          sub_216D636B4((unsigned int *)__p, &v32);
          if (__p[1]) {
            sub_216784EC4((std::__shared_weak_count *)__p[1]);
          }
        }
      }
      if (v26) {
        sub_216784EC4(v26);
      }
      unint64_t v18 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v18) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v19 = v35;
      unint64_t v20 = atomic_load((unint64_t *)(v18 + 144));
      BOOL v17 = v19 >= v20
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v35, (atomic_ullong *)v18);
      uint64_t v21 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v21) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      v22 = sub_216862604(&v35, 0);
      LOBYTE(v25) = 0;
      uint64_t v23 = (void *)sub_2168520EC(v21 + 19, &v25);
      if (v23 != v22) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v21, v22, v23);
      }
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v27);
    }
    else
    {
      BOOL v17 = 0;
    }
    __p[0] = &v32;
    sub_2169CC78C((void ***)__p);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v35);
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Set";
    uint64_t v29 = 195;
    v30 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdPayloads, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>>:"
          ":Set(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditorType = pxrInternal__aapl__pxrReserved"
          "__::UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxr"
          "Reserved__::SdfPayloadTypePolicy>]";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v17;
}

void sub_216D62804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, void **a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a11) {
    sub_216784EC4(a11);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a12);
  a13 = (void **)&a19;
  sub_2169CC78C(&a13);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v19 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_216D628A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      return 1;
    }
LABEL_5:
    unint64_t v5 = (int *)(a1 + 24);
    sub_216981010(&v8, (_DWORD *)(a1 + 24));
    unint64_t v6 = (int *)(a1 + 28);
    sub_21698105C(&v9, v6);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
    {
      if ((sub_216D54248(&v8, a2) & 1) == 0)
      {
        uint64_t v4 = 0;
        goto LABEL_10;
      }
      sub_2169C487C(v5, &v8);
      sub_2169C48D4(v6, &v9);
    }
    uint64_t v4 = 1;
LABEL_10:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    return v4;
  }
  if (!*(unsigned char *)(a1 + 23)) {
    goto LABEL_5;
  }
  return 1;
}

void sub_216D62970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D6298C@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (unint64_t v12 = "usd/listEditImpl.h",
        unint64_t v13 = "_GetListEditor",
        uint64_t v14 = 238,
        unint64_t v15 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdPayloads, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfP"
              "ayloadTypePolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__:"
              ":UsdPayloads, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__px"
              "rReserved__::SdfPayloadTypePolicy>]",
        char v16 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v12);
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v12);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v11);
    BOOL v7 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11))
    {
      int v9 = (atomic_uint **)sub_216A663FC(&v11);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v9);
    }
    *a3 = 0;
    a3[1] = 0;
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_216D62A94(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_216D62ABC(void *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v16 = 0;
  BOOL v17 = 0;
  int v18 = 0;
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v5;
      int v7 = 1;
      goto LABEL_9;
    case 1:
      uint64_t v8 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 0;
      uint64_t v16 = v8;
LABEL_9:
      int v9 = 4;
      goto LABEL_17;
    case 2:
      uint64_t v10 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v10;
      int v7 = 1;
      goto LABEL_16;
    case 3:
      uint64_t v11 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 0;
      uint64_t v16 = v11;
LABEL_16:
      int v9 = 5;
LABEL_17:
      BOOL v17 = v6;
      int v18 = v9;
      break;
    default:
      unint64_t v6 = 0;
      int v7 = 0;
      break;
  }
  if (!sub_216ABAAE4((uint64_t)a1) || (*(unsigned int (**)(void))(*(void *)*a1 + 16))())
  {
    uint64_t v13 = *a1;
    unint64_t v12 = (std::__shared_weak_count *)a1[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = v13;
    BOOL v17 = v12;
    if (v6) {
      sub_216784EC4(v6);
    }
    int v18 = 0;
  }
  if (!sub_216D62E00((uint64_t)&v16))
  {
    sub_216D62CCC((unsigned int *)&v16, -1, (uint64_t)a2);
    goto LABEL_34;
  }
  unint64_t v14 = sub_216D62DA8((uint64_t)&v16, a2);
  if (v14 == -1) {
    goto LABEL_33;
  }
  if (v7) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = sub_216D62E00((uint64_t)&v16) - 1;
  }
  if (v14 != v15)
  {
    sub_216D62E78((unsigned int *)&v16, v14);
LABEL_33:
    sub_216D62CCC((unsigned int *)&v16, v7 - 1, (uint64_t)a2);
  }
LABEL_34:
  if (v17) {
    sub_216784EC4(v17);
  }
}

void sub_216D62C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D62CCC(unsigned int *a1, int a2, uint64_t a3)
{
  if (a2 == -1)
  {
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 112))(v5, a1[4]);
      a2 = -1431655765 * ((v6[1] - *v6) >> 4);
    }
    else
    {
      a2 = 0;
    }
  }
  uint64_t v7 = a2;
  sub_216C638DC(v8, 1uLL, a3);
  sub_216D62EDC(a1, v7, 0, v8);
  int v9 = (void **)v8;
  sub_2169CC78C(&v9);
}

void sub_216D62D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216D62DA8(uint64_t a1, unsigned __int8 *a2)
{
  if (!sub_216D630F0(a1)) {
    return -1;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);

  return sub_216D63168(v4, v5, a2);
}

unint64_t sub_216D62E00(uint64_t a1)
{
  if (!sub_216D630F0(a1)) {
    return 0;
  }
  unint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(unint64_t, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 4);
  }
  return result;
}

void sub_216D62E78(unsigned int *a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  sub_216D62EDC(a1, a2, 1, v2);
  uint64_t v3 = (void **)v2;
  sub_2169CC78C(&v3);
}

void sub_216D62EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_2169CC78C(&a12);
  _Unwind_Resume(a1);
}

void sub_216D62EDC(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sub_216D63078((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 32))(__p);
      if (v17)
      {
        uint64_t v10 = "sdf/listProxy.h";
        uint64_t v11 = "_Edit";
        uint64_t v12 = 750;
        uint64_t v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy"
              ">::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPa"
              "yloadTypePolicy]";
        char v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0) {
          int v9 = (const char *)WhyNot;
        }
        else {
          int v9 = (const char *)*WhyNot;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, void *))(**(void **)a1 + 80))(*(void *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = "sdf/listProxy.h";
      uint64_t v11 = "_Edit";
      uint64_t v12 = 758;
      uint64_t v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>:"
            ":_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_216D63054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D63078(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>:"
            ":_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_216D630F0(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy>:"
            ":_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

unint64_t sub_216D63168(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = (void *)v4;
  unint64_t v6 = *(unsigned __int8 **)v4;
  uint64_t v7 = *(unsigned __int8 **)(v4 + 8);
  if (*(unsigned __int8 **)v4 == v7)
  {
    uint64_t v8 = *(unsigned __int8 **)v4;
  }
  else
  {
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v6, a3))
    {
      v6 += 48;
      if (v6 == v7)
      {
        unint64_t v6 = v7;
        break;
      }
    }
    uint64_t v8 = v6;
    unint64_t v6 = (unsigned __int8 *)v5[1];
  }
  if (v8 == v6) {
    return -1;
  }
  else {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*v5] >> 4);
  }
}

void sub_216D6321C(uint64_t *a1, unsigned __int8 *a2)
{
  if (sub_216ABE404((uint64_t)a1))
  {
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))())
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 0;
      sub_216D633BC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
    }
    else if (((*(uint64_t (**)(void))(*(void *)*a1 + 24))() & 1) == 0)
    {
      uint64_t v5 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 1;
      sub_216D633BC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 4;
      sub_216D633BC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 5;
      sub_216D633BC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      sub_216D634A8(a1, 2, a2);
    }
  }
}

void sub_216D63398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D633BC(unsigned int *a1, unsigned __int8 *a2)
{
  unint64_t v3 = sub_216D62DA8((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(void *)a1)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void, void))(**(void **)a1 + 112))(*(void *)a1, a1[4]);
      uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 4);
    }
    else
    {
      uint64_t v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_216D62EDC(a1, v5, 0, v6);
    uint64_t v7 = (void **)v6;
    sub_2169CC78C(&v7);
  }
  else
  {
    sub_216D62E78(a1, v3);
  }
}

void sub_216D63490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216D634A8(uint64_t *a1, int a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = a2;
  if (sub_216D62DA8((uint64_t)&v5, a3) == -1) {
    sub_216D63530((unsigned int *)&v5, (uint64_t)a3);
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216D63518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D63530(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 4);
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216C638DC(v7, 1uLL, a2);
  sub_216D62EDC(a1, v6, 0, v7);
  uint64_t v8 = (void **)v7;
  sub_2169CC78C(&v8);
}

void sub_216D635E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_216D63600(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2168073F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 48 * v6;
    sub_216AE9668(a1, v7);
    return sub_216AE9440(v7);
  }
  return result;
}

void sub_216D636A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE9440((void **)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_216D636B4(unsigned int *a1, void *a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 4);
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216D62EDC(a1, 0, v6, a2);
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::UsdPrim::_ProtoToInstancePathMap::MapProtoToInstance@<X0>(char **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  sub_216981010(a3, a2);
  uint64_t v6 = a3 + 1;
  unint64_t result = (char *)sub_21698105C(a3 + 1, (_DWORD *)a2 + 1);
  int v9 = *this;
  uint64_t v8 = this[1];
  if (*this != v8)
  {
    unint64_t result = sub_216D6C364(*this, this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    int v10 = result;
    if (v8 == result
      || (sub_216981010(&v26, result),
          uint64_t v11 = sub_21698105C((_DWORD *)&v26 + 1, (_DWORD *)v10 + 1),
          uint64_t v12 = v26,
          uint64_t v13 = *(void *)a3,
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v11),
          unint64_t result = (char *)sub_21697C414(&v26),
          char v14 = v10,
          v12 != v13))
    {
      if (v9 == v10)
      {
        char v14 = v8;
      }
      else
      {
        char v14 = v10 - 16;
        sub_216981010(&v26, (_DWORD *)v10 - 4);
        unint64_t v15 = v10 - 12;
        sub_21698105C((_DWORD *)&v26 + 1, v15);
        BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
        unint64_t result = (char *)sub_21697C414(&v26);
        if (!HasPrefix)
        {
          sub_216981010(&v25, v14);
          sub_21698105C((_DWORD *)&v25 + 1, v15);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (int *)&v26);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
          sub_21697C414(&v25);
          while (1)
          {
            char v17 = sub_216D6C364(v9, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
            if (v14 != v17)
            {
              sub_216981010(&v25, v17);
              int v18 = sub_21698105C((_DWORD *)&v25 + 1, (_DWORD *)v17 + 1);
              uint64_t v19 = v25;
              uint64_t v20 = v26;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
              sub_21697C414(&v25);
              if (v19 == v20) {
                break;
              }
            }
            if (v9 == v17)
            {
              char v14 = v8;
              goto LABEL_15;
            }
            char v14 = v17 - 16;
            sub_216981010(&v25, (_DWORD *)v17 - 4);
            uint64_t v21 = v17 - 12;
            sub_21698105C((_DWORD *)&v25 + 1, v21);
            BOOL v22 = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_21697C414(&v25);
            if (v22) {
              goto LABEL_15;
            }
            sub_216981010(&v23, v14);
            sub_21698105C(&v24, v21);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (int *)&v25);
            sub_21697DE94((int *)&v26, (int *)&v25);
            sub_21697DEEC((int *)&v26 + 1, (int *)&v25 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_21697C414(&v25);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
            sub_21697C414(&v23);
          }
          char v14 = v17;
LABEL_15:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
          uint64_t v6 = a3 + 1;
          unint64_t result = (char *)sub_21697C414(&v26);
        }
      }
    }
    if (v14 != this[1])
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v14 + 8), 1);
      sub_21697DE94(a3, (int *)&v26);
      sub_21697DEEC(v6, (int *)&v26 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
      return (char *)sub_21697C414(&v26);
    }
  }
  return result;
}

void sub_216D63A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
  sub_21697C414((int *)va);
  sub_21697B754(v5);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, a2, &v12);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v12);
  sub_216D0162C((uint64_t)this, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2, &v10);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  uint64_t result = v13;
  if (v13)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216D63BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  sub_21697B754(&a11);
  sub_21697B754(&a9);
  uint64_t v14 = a13;
  if (a13)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, char *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v5 = (char *)(*(void *)(v4 + 24) + 40);
  uint64_t v6 = *((void *)a2 + 1);

  return pxrInternal__aapl__pxrReserved__::TfType::IsA(v5, v6, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)this, SchemaInfo, v5);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_216D63D8C((uint64_t)this, a2) != 0;
}

uint64_t sub_216D63D8C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v4 = *(void *)(v3 + 24);
  SchemaInfosInFamily = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a2);
  uint64_t v7 = *SchemaInfosInFamily;
  uint64_t v8 = SchemaInfosInFamily[1];
  if (*SchemaInfosInFamily == v8) {
    return 0;
  }
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v4 + 40), *(void *)(*(void *)v7 + 8), v6) & 1) == 0)
  {
    v7 += 8;
    if (v7 == v8) {
      return 0;
    }
  }
  return *(void *)v7;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unsigned int a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7 || (*(unsigned char *)(v7 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v8 = *(void *)(v7 + 24);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a3, a4, &v14);
  int v10 = v14;
  int v11 = v15;
  if (v14 == v15)
  {
    uint64_t v12 = 0;
    if (!v14) {
      return v12 != 0;
    }
    goto LABEL_12;
  }
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v8 + 40), *(void *)(*(void *)v10 + 8), v9) & 1) == 0)
  {
    v10 += 8;
    if (v10 == v11)
    {
      uint64_t v12 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v12 = *(void *)v10;
LABEL_11:
  int v10 = v14;
  if (v14)
  {
LABEL_12:
    unint64_t v15 = v10;
    operator delete(v10);
  }
  return v12 != 0;
}

void sub_216D63EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v6 = *(void *)(v5 + 24);
  sub_216D6C444(a2, a3, &v12);
  uint64_t v8 = v12;
  int v9 = v13;
  if (v12 == v13)
  {
    uint64_t v10 = 0;
    if (!v12) {
      return v10 != 0;
    }
    goto LABEL_12;
  }
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v6 + 40), *(void *)(*(void *)v8 + 8), v7) & 1) == 0)
  {
    v8 += 8;
    if (v8 == v9)
    {
      uint64_t v10 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v10 = *(void *)v8;
LABEL_11:
  uint64_t v8 = v12;
  if (v12)
  {
LABEL_12:
    uint64_t v13 = v8;
    operator delete(v8);
  }
  return v10 != 0;
}

void sub_216D63FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v6 = *(void *)(v5 + 24);
  sub_216D6C4A8(a2, a3, &v12);
  uint64_t v8 = v12;
  int v9 = v13;
  if (v12 == v13)
  {
    uint64_t v10 = 0;
    if (!v12) {
      return v10 != 0;
    }
    goto LABEL_12;
  }
  while ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(v6 + 40), *(void *)(*(void *)v8 + 8), v7) & 1) == 0)
  {
    v8 += 8;
    if (v8 == v9)
    {
      uint64_t v10 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v10 = *(void *)v8;
LABEL_11:
  uint64_t v8 = v12;
  if (v12)
  {
LABEL_12:
    uint64_t v13 = v8;
    operator delete(v8);
  }
  return v10 != 0;
}

void sub_216D640A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetVersionIfIsInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unsigned int *a3)
{
  uint64_t v4 = sub_216D63D8C((uint64_t)this, a2);
  if (v4) {
    *a3 = *(_DWORD *)(v4 + 24);
  }
  return v4 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = (uint64_t)a2;
  if (a2)
  {
    uint64_t v3 = sub_216D5A03C(a1, a2);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    sub_21698FA28(&v5, *(uint64_t **)(v3 + 56), *(uint64_t **)(v3 + 64), (uint64_t)(*(void *)(v3 + 64) - *(void *)(v3 + 56)) >> 3);
    if (v5 == v6) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = sub_216D641E8((size_t)&v5, v2);
    }
    uint64_t v8 = (void **)&v5;
    sub_216889A04(&v8);
  }
  return v2;
}

void sub_216D64184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = sub_216D5A03C((uint64_t)this, a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v5 = *(uint64_t **)(v4 + 56);
  uint64_t v6 = *(uint64_t **)(v4 + 64);

  return sub_21698FA28(a3, v5, v6, v6 - v5);
}

uint64_t sub_216D641E8(size_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 28);
  if (v3 == 5)
  {
    BOOL v22 = *(void **)a1;
    uint64_t v21 = *(void **)(a1 + 8);
    if (*(void **)a1 != v21)
    {
      while ((*v22 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v22 == v21)
        {
          BOOL v22 = *(void **)(a1 + 8);
          return v22 != v21;
        }
      }
    }
    return v22 != v21;
  }
  else
  {
    if (v3 != 6) {
      return 0;
    }
    uint64_t v4 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    if (*(void **)a1 == v5)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91AD8, memory_order_acquire) & 1) == 0)
        {
          a1 = __cxa_guard_acquire(&qword_267B91AD8);
          if (a1)
          {
            byte_267B91AD0 = sub_216D33724();
            __cxa_guard_release(&qword_267B91AD8);
          }
        }
        unint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          unint64_t v7 = *(char *)(v6 + 39) < 0 ? *(void *)(v6 + 24) : *(unsigned __int8 *)(v6 + 39);
        }
        else {
          unint64_t v7 = 0;
        }
        unint64_t v8 = *v4 & 0xFFFFFFFFFFFFFFF8;
        if (v8)
        {
          int v9 = *(char *)(v8 + 39);
          uint64_t v10 = *(unsigned __int8 *)(v8 + 39);
          unint64_t v11 = v9 < 0 ? *(void *)(v8 + 24) : *(unsigned __int8 *)(v8 + 39);
          if (v11 > v7)
          {
            uint64_t v12 = (unint64_t *)(v8 + 16);
            unint64_t v13 = v8 + 16;
            if (v9 < 0) {
              unint64_t v13 = *v12;
            }
            if (*(unsigned __int8 *)(v13 + v7) == byte_267B91AD0)
            {
              if (v6)
              {
                EmptyString = (uint64_t *)(v6 + 16);
              }
              else
              {
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
                uint64_t v10 = *(unsigned __int8 *)(v8 + 39);
              }
              unint64_t v15 = *((char *)EmptyString + 23) >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
              int v16 = (char)v10;
              size_t v17 = (v10 & 0x80u) == 0 ? v10 : *(void *)(v8 + 24);
              a1 = strlen(v15);
              if (v17 >= a1)
              {
                size_t v18 = a1;
                uint64_t v19 = v16 >= 0 ? (const char *)v12 : (const char *)*v12;
                a1 = strncmp(v19, v15, v18);
                if (!a1) {
                  break;
                }
              }
            }
          }
        }
        if (++v4 == v5) {
          return 0;
        }
      }
      return 1;
    }
  }
}

void sub_216D643AC(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!*(void *)a3)
  {
    unint64_t v8 = "usd/prim.cpp";
    int v9 = "_HasAPIInstance";
    uint64_t v10 = 329;
    unint64_t v11 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance(const UsdSchemaRegistry::SchemaInfo *, const TfToken &) const";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v5 = sub_216D5A03C(a1, a2);
  int v9 = 0;
  uint64_t v10 = 0;
  unint64_t v8 = 0;
  sub_21698FA28(&v8, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(void *)(v5 + 64) - *(void *)(v5 + 56)) >> 3);
  BOOL v6 = v8 != v9 && sub_216D644C0((uint64_t)&v8, a2, a3);
  unint64_t v13 = &v8;
  sub_216889A04((void ***)&v13);
  return v6;
}

void sub_216D644A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_216D644C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (*((_DWORD *)this + 7) != 6) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  uint64_t v5 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  if (*(void **)a1 != v4)
  {
    while ((*v5 & 0xFFFFFFFFFFFFFFF8) != (v9 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v5 == v4)
      {
        uint64_t v5 = *(void **)(a1 + 8);
        break;
      }
    }
  }
  BOOL result = v5 != v4;
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D64578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)this, SchemaInfo, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)this, SchemaInfo, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)this, SchemaInfo, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_216D64754((uint64_t)this, a2) != 0;
}

uint64_t sub_216D64754(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = sub_216D5A03C(a1, a2);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  sub_21698FA28(&v10, *(uint64_t **)(v3 + 56), *(uint64_t **)(v3 + 64), (uint64_t)(*(void *)(v3 + 64) - *(void *)(v3 + 56)) >> 3);
  if (v10 != v11)
  {
    SchemaInfosInFamily = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, v4);
    BOOL v6 = (uint64_t *)*SchemaInfosInFamily;
    unint64_t v7 = (uint64_t *)SchemaInfosInFamily[1];
    while (v6 != v7)
    {
      if (sub_216D641E8((size_t)&v10, *v6))
      {
        uint64_t v8 = *v6;
        goto LABEL_7;
      }
      ++v6;
    }
  }
  uint64_t v8 = 0;
LABEL_7:
  unint64_t v13 = (void **)&v10;
  sub_216889A04(&v13);
  return v8;
}

void sub_216D647FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return sub_216D64848((uint64_t)this, a3, a2) != 0;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216D64848(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a3)
{
  if (*(void *)a2)
  {
    uint64_t v5 = sub_216D5A03C(a1, a2);
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    sub_21698FA28(&v12, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(void *)(v5 + 64) - *(void *)(v5 + 56)) >> 3);
    if (v12 != v13)
    {
      SchemaInfosInFamily = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a3, v6);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)*SchemaInfosInFamily;
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)SchemaInfosInFamily[1];
      while (v8 != v9)
      {
        if (sub_216D644C0((uint64_t)&v12, *v8, a2))
        {
          uint64_t v10 = *v8;
          goto LABEL_8;
        }
        ++v8;
      }
    }
    uint64_t v10 = 0;
LABEL_8:
    size_t v17 = &v12;
    sub_216889A04((void ***)&v17);
  }
  else
  {
    uint64_t v12 = "usd/prim.cpp";
    unint64_t v13 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
    uint64_t v14 = 428;
    unint64_t v15 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstan"
          "ce(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrR"
          "eserved__::TfToken>]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
    return 0;
  }
  return v10;
}

void sub_216D64944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  sub_216889A04(&a14);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unsigned int a3, int a4)
{
  uint64_t v7 = sub_216D5A03C(a1, a2);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  sub_21698FA28(&v14, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 3);
  if (v14 == v15)
  {
    uint64_t v10 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a3, a4, &v12);
    uint64_t v8 = (uint64_t *)v12;
    uint64_t v9 = (uint64_t *)v13;
    if (v12 == v13)
    {
      uint64_t v10 = 0;
      if (!v12) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    while ((sub_216D641E8((size_t)&v14, *v8) & 1) == 0)
    {
      if (++v8 == v9)
      {
        uint64_t v10 = 0;
        goto LABEL_10;
      }
    }
    uint64_t v10 = *v8;
LABEL_10:
    uint64_t v8 = (uint64_t *)v12;
    if (v12)
    {
LABEL_11:
      unint64_t v13 = (void **)v8;
      operator delete(v8);
    }
  }
LABEL_12:
  uint64_t v12 = (void **)&v14;
  sub_216889A04(&v12);
  return v10 != 0;
}

void sub_216D64A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  sub_216889A04((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, unsigned int a3, int a4, pxrInternal__aapl__pxrReserved__::TfToken *a5)
{
  if (*(void *)a5)
  {
    uint64_t v9 = sub_216D5A03C(a1, a2);
    size_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    sub_21698FA28(&v16, *(uint64_t **)(v9 + 56), *(uint64_t **)(v9 + 64), (uint64_t)(*(void *)(v9 + 64) - *(void *)(v9 + 56)) >> 3);
    if (v16 == v17)
    {
      uint64_t v12 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(a2, a3, a4, &v14);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v14;
      uint64_t v11 = v15;
      if (v14 == v15)
      {
        uint64_t v12 = 0;
        if (!v14) {
          goto LABEL_14;
        }
      }
      else
      {
        while (!sub_216D644C0((uint64_t)&v16, *v10, a5))
        {
          if (++v10 == (pxrInternal__aapl__pxrReserved__::SdfPath **)v11)
          {
            uint64_t v12 = 0;
            goto LABEL_12;
          }
        }
        uint64_t v12 = *v10;
LABEL_12:
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v14;
        if (!v14) {
          goto LABEL_14;
        }
      }
      uint64_t v15 = (void **)v10;
      operator delete(v10);
    }
LABEL_14:
    uint64_t v14 = (void **)&v16;
    sub_216889A04(&v14);
    return v12 != 0;
  }
  uint64_t v16 = "usd/prim.cpp";
  size_t v17 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
  uint64_t v18 = 428;
  uint64_t v19 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstance"
        "(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrReser"
        "ved__::TfToken, unsigned int, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::VersionPolicy>]";
  char v20 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
  uint64_t v12 = 0;
  return v12 != 0;
}

void sub_216D64BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 56) = &a13;
  sub_216889A04((void ***)(v13 - 56));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  uint64_t v5 = sub_216D5A03C(a1, a2);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  sub_21698FA28(&v12, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(void *)(v5 + 64) - *(void *)(v5 + 56)) >> 3);
  if (v12 == v13)
  {
    uint64_t v8 = 0;
  }
  else
  {
    sub_216D6C444(a2, a3, &v10);
    BOOL v6 = (uint64_t *)v10;
    uint64_t v7 = (uint64_t *)v11;
    if (v10 == v11)
    {
      uint64_t v8 = 0;
      if (!v10) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    while ((sub_216D641E8((size_t)&v12, *v6) & 1) == 0)
    {
      if (++v6 == v7)
      {
        uint64_t v8 = 0;
        goto LABEL_10;
      }
    }
    uint64_t v8 = *v6;
LABEL_10:
    BOOL v6 = (uint64_t *)v10;
    if (v10)
    {
LABEL_11:
      uint64_t v11 = (void **)v6;
      operator delete(v6);
    }
  }
LABEL_12:
  uint64_t v10 = (void **)&v12;
  sub_216889A04(&v10);
  return v8 != 0;
}

void sub_216D64CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  sub_216889A04((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  if (*(void *)a4)
  {
    uint64_t v7 = sub_216D5A03C(a1, a2);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    sub_21698FA28(&v14, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 3);
    if (v14 == v15)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_216D6C444(a2, a3, &v12);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
      uint64_t v9 = v13;
      if (v12 == v13)
      {
        uint64_t v10 = 0;
        if (!v12) {
          goto LABEL_14;
        }
      }
      else
      {
        while (!sub_216D644C0((uint64_t)&v14, *v8, a4))
        {
          if (++v8 == (pxrInternal__aapl__pxrReserved__::SdfPath **)v9)
          {
            uint64_t v10 = 0;
            goto LABEL_12;
          }
        }
        uint64_t v10 = *v8;
LABEL_12:
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
        if (!v12) {
          goto LABEL_14;
        }
      }
      uint64_t v13 = (void **)v8;
      operator delete(v8);
    }
LABEL_14:
    uint64_t v12 = (void **)&v14;
    sub_216889A04(&v12);
    return v10 != 0;
  }
  uint64_t v14 = "usd/prim.cpp";
  uint64_t v15 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
  uint64_t v16 = 428;
  size_t v17 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstance"
        "(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrReser"
        "ved__::TfType, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::VersionPolicy>]";
  char v18 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
  uint64_t v10 = 0;
  return v10 != 0;
}

void sub_216D64E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  sub_216889A04((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5 = sub_216D5A03C(a1, a2);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  sub_21698FA28(&v12, *(uint64_t **)(v5 + 56), *(uint64_t **)(v5 + 64), (uint64_t)(*(void *)(v5 + 64) - *(void *)(v5 + 56)) >> 3);
  if (v12 == v13)
  {
    uint64_t v8 = 0;
  }
  else
  {
    sub_216D6C4A8(a2, a3, &v10);
    BOOL v6 = (uint64_t *)v10;
    uint64_t v7 = (uint64_t *)v11;
    if (v10 == v11)
    {
      uint64_t v8 = 0;
      if (!v10) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    while ((sub_216D641E8((size_t)&v12, *v6) & 1) == 0)
    {
      if (++v6 == v7)
      {
        uint64_t v8 = 0;
        goto LABEL_10;
      }
    }
    uint64_t v8 = *v6;
LABEL_10:
    BOOL v6 = (uint64_t *)v10;
    if (v10)
    {
LABEL_11:
      uint64_t v11 = (void **)v6;
      operator delete(v6);
    }
  }
LABEL_12:
  uint64_t v10 = (void **)&v12;
  sub_216889A04(&v10);
  return v8 != 0;
}

void sub_216D64F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  sub_216889A04((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPIInFamily(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  if (*(void *)a4)
  {
    uint64_t v7 = sub_216D5A03C(a1, a2);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    sub_21698FA28(&v14, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 3);
    if (v14 == v15)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_216D6C4A8(a2, a3, &v12);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
      uint64_t v9 = v13;
      if (v12 == v13)
      {
        uint64_t v10 = 0;
        if (!v12) {
          goto LABEL_14;
        }
      }
      else
      {
        while (!sub_216D644C0((uint64_t)&v14, *v8, a4))
        {
          if (++v8 == (pxrInternal__aapl__pxrReserved__::SdfPath **)v9)
          {
            uint64_t v10 = 0;
            goto LABEL_12;
          }
        }
        uint64_t v10 = *v8;
LABEL_12:
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v12;
        if (!v12) {
          goto LABEL_14;
        }
      }
      uint64_t v13 = (void **)v8;
      operator delete(v8);
    }
LABEL_14:
    uint64_t v12 = (void **)&v14;
    sub_216889A04(&v12);
    return v10 != 0;
  }
  uint64_t v14 = "usd/prim.cpp";
  uint64_t v15 = "_GetFirstSchemaInFamilyPrimHasAPIInstance";
  uint64_t v16 = 428;
  size_t v17 = "const UsdSchemaRegistry::SchemaInfo *pxrInternal__aapl__pxrReserved__::_GetFirstSchemaInFamilyPrimHasAPIInstance"
        "(const UsdPrim &, const TfToken &, const FindInFamilyArgs &...) [FindInFamilyArgs = <pxrInternal__aapl__pxrReser"
        "ved__::TfToken, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::VersionPolicy>]";
  char v18 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance name must be non-empty");
  uint64_t v10 = 0;
  return v10 != 0;
}

void sub_216D650D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a13;
  sub_216889A04((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetVersionIfHasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unsigned int *a3)
{
  uint64_t v4 = sub_216D64754((uint64_t)this, a2);
  if (v4) {
    *a3 = *(_DWORD *)(v4 + 24);
  }
  return v4 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetVersionIfHasAPIInFamily(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, unsigned int *a4)
{
  uint64_t v5 = sub_216D64848((uint64_t)this, a3, a2);
  if (v5) {
    *a4 = *((_DWORD *)v5 + 6);
  }
  return v5 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, uint64_t a3)
{
  uint64_t result = sub_216D6525C("CanApplyAPI", (uint64_t)a2, a3);
  if (result)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, v7))
    {
      uint64_t v9 = *((void *)a1 + 1);
      if (!v9 || (*(unsigned char *)(v9 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v9, v8);
      }
      uint64_t v10 = (char *)(*(void *)(v9 + 24) + 40);
      uint64_t v11 = 0;
      uint64_t result = sub_216D65378(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a3);
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (a3) {
        MEMORY[0x21D4477E0](a3, "Prim is not valid.");
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_216D6525C(const char *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 28);
  if (v3 != 5)
  {
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a2 + 8));
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = TypeName;
    }
    else {
      uint64_t v9 = *(void *)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Provided schema type %s is not a single-apply API schema.", v7, v8, v9);
    v12[0] = "usd/prim.cpp";
    v12[1] = "_ValidateIsSingleApplyAPI";
    v12[2] = 609;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateIsSingleApplyAPI(const char *, const UsdSchemaRegistry::Sch"
             "emaInfo &, std::string *)";
    char v13 = 0;
    if (v15 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v10);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(void *)(a3 + 16) = v15;
    }
    else if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
    }
  }
  return v3 == 5;
}

void sub_216D6535C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D65378(char *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  APISchemaCanOnlyApplyToTypeNames = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaCanOnlyApplyToTypeNames(a2, a3, a3);
  if (*APISchemaCanOnlyApplyToTypeNames == APISchemaCanOnlyApplyToTypeNames[1]) {
    return 1;
  }
  uint64_t v9 = (std::string **)APISchemaCanOnlyApplyToTypeNames;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
  if (*(void *)a1 != (void)v25)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = v9[1];
    while (v11 != v12)
    {
      TypeFromSchemauint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v11, v10);
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, TypeFromSchemaTypeName, v14)) {
        return 1;
      }
      uint64_t v11 = (std::string *)((char *)v11 + 8);
    }
  }
  if (a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, a3, (uint64_t)v23);
    int v15 = v24;
    uint64_t v16 = (void **)v23[0];
    sub_216D6B948(", ", *v9, v9[1], &__p);
    if (v15 >= 0) {
      uint64_t v19 = v23;
    }
    else {
      uint64_t v19 = v16;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"API schema '%s' can only be applied to prims of the following types: %s.", v17, v18, v19, p_p);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v25;
    *(void *)(a4 + 16) = v26;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
  return 0;
}

void sub_216D654DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  if (!sub_216D656E4("CanApplyAPI", (uint64_t)a2, a4)) {
    return 0;
  }
  if (!*(void *)a3)
  {
    *(void *)&long long v21 = "usd/prim.cpp";
    *((void *)&v21 + 1) = "_CanApplyMultipleApplyAPI";
    uint64_t v22 = 724;
    int v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo "
          "&, const TfToken &, std::string *) const";
    char v24 = 0;
    unint64_t v15 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      uint64_t v16 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0) {
        uint64_t v16 = *(const char **)v16;
      }
    }
    else
    {
      uint64_t v16 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"CanApplyAPI: for multiple apply API schema %s, a non-empty instance name must be provided.", v16);
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, v8) & 1) == 0)
  {
    if (a4) {
      MEMORY[0x21D4477E0](a4, "Prim is not valid.");
    }
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedAPISchemaInstanceName(a2, a3, v9))
  {
    if (a4)
    {
      unint64_t v17 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        char v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0) {
          char v18 = *(const char **)v18;
        }
      }
      else
      {
        char v18 = "";
      }
      unint64_t v19 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        char v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          char v20 = *(const char **)v20;
        }
      }
      else
      {
        char v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not an allowed instance name for multiple apply API schema '%s'.", v10, v11, v18, v20);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(_OWORD *)a4 = v21;
      *(void *)(a4 + 16) = v22;
    }
    return 0;
  }
  uint64_t v12 = *((void *)a1 + 1);
  if (!v12 || (*(unsigned char *)(v12 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v12, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10);
  }
  char v13 = (char *)(*(void *)(v12 + 24) + 40);

  return sub_216D65378(v13, a2, a3, a4);
}

BOOL sub_216D656E4(const char *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 28);
  if (v3 != 6)
  {
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a2 + 8));
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = TypeName;
    }
    else {
      uint64_t v9 = *(void *)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Provided schema type %s is not a multiple-apply API schema.", v7, v8, v9);
    v12[0] = "usd/prim.cpp";
    v12[1] = "_ValidateIsMultipleApplyAPI";
    v12[2] = 628;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateIsMultipleApplyAPI(const char *, const UsdSchemaRegistry::S"
             "chemaInfo &, std::string *)";
    char v13 = 0;
    if (v15 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v10);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(void *)(a3 + 16) = v15;
    }
    else if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
    }
  }
  return v3 == 6;
}

void sub_216D657E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, uint64_t a3)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a3);
  }
  else
  {
    sub_216D65880("CanApplyAPI", a2, a3);
    return 0;
  }
}

{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  uint64_t vars8;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a3);
  }
  else
  {
    sub_216D65A90("CanApplyAPI", (const char *)a2, a3);
    return 0;
  }
}

void sub_216D65880(const char *a1, pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a3)
{
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
  if (*(char *)(TypeName + 23) >= 0) {
    uint64_t v8 = TypeName;
  }
  else {
    uint64_t v8 = *(void *)TypeName;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find a valid schema for the provided schema type '%s'", v6, v7, v8);
  v10[0] = "usd/prim.cpp";
  v10[1] = "_ReportInvalidSchemaError";
  v10[2] = 560;
  v10[3] = "void pxrInternal__aapl__pxrReserved__::_ReportInvalidSchemaError(const char *, const TfType &, std::string *)";
  char v11 = 0;
  if (v13 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v9);
  if (a3)
  {
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v13;
  }
  else if (SHIBYTE(v13) < 0)
  {
    operator delete(__p[0]);
  }
}

void sub_216D6596C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a3, a4);
  }
  else
  {
    sub_216D65880("CanApplyAPI", a2, a4);
    return 0;
  }
}

{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  uint64_t vars8;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a3, a4);
  }
  else
  {
    sub_216D65A90("CanApplyAPI", (const char *)a2, a4);
    return 0;
  }
}

{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  uint64_t vars8;

  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a4);
  }
  else
  {
    sub_216D65CBC("CanApplyAPI", (const char *)a2, (char *)a3, a4);
    return 0;
  }
}

void sub_216D65A90(const char *a1, const char *a2, uint64_t a3)
{
  unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    BOOL v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      BOOL v6 = *(const char **)v6;
    }
  }
  else
  {
    BOOL v6 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find a valid schema for the provided schema identifier '%s'", a2, (char *)a3, v6);
  v8[0] = "usd/prim.cpp";
  v8[1] = "_ReportInvalidSchemaError";
  v8[2] = 575;
  void v8[3] = "void pxrInternal__aapl__pxrReserved__::_ReportInvalidSchemaError(const char *, const TfToken &, std::string *)";
  char v9 = 0;
  if (v11 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v7);
  if (a3)
  {
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v11;
  }
  else if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
  }
}

void sub_216D65B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D65CBC(const char *a1, const char *a2, char *a3, uint64_t a4)
{
  unint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    uint64_t v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
  }
  else
  {
    uint64_t v7 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find a valid schema for the provided schema family '%s' and version '%u", a2, a3, v7, a3);
  v9[0] = "usd/prim.cpp";
  v9[1] = "_ReportInvalidSchemaError";
  v9[2] = 591;
  v9[3] = "void pxrInternal__aapl__pxrReserved__::_ReportInvalidSchemaError(const char *, const TfToken &, UsdSchemaVersi"
          "on, std::string *)";
  char v10 = 0;
  if (v12 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"%s: %s", a1, (const char *)v8);
  if (a4)
  {
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(void *)(a4 + 16) = v12;
  }
  else if (SHIBYTE(v12) < 0)
  {
    operator delete(__p[0]);
  }
}

void sub_216D65DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a4, a5);
  }
  else
  {
    sub_216D65CBC("CanApplyAPI", (const char *)a2, (char *)a3, a5);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (!sub_216D6525C("ApplyAPI", (uint64_t)a2, 0)) {
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, v4) & 1) == 0)
  {
    v8[0] = "usd/prim.cpp";
    v8[1] = "_ApplySingleApplyAPI";
    v8[2] = 859;
    void v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(const UsdSchemaRegistry::SchemaInfo &) const";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim '%s'", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(a1, a2);
}

void sub_216D65F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 1);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v4, this, &v36);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v36))
  {
    long long v25 = "usd/prim.cpp";
    uint64_t v26 = "AddAppliedSchema";
    uint64_t v27 = 1104;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(const TfToken &) const";
    char v29 = 0;
    sub_216D0162C((uint64_t)this, (int *)&v39);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)*((void *)this + 1);
    if (!v7 || (*((unsigned char *)v7 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v7, v5);
    }
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v7);
    char v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(EditTarget);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v12 = Identifier;
    }
    else {
      uint64_t v12 = *(void *)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"Unable to create primSpec at path <%s> in edit target '%s'. Failed to add applied API schema.", v11, Text, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
    sub_21697C414(&v39);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = sub_216A663FC(&v36);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v16) {
      uint64_t v16 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v15, v16, &v39);
    sub_216D673D4((pxrInternal__aapl__pxrReserved__::VtValue *)&v39, (uint64_t)&v25);
    sub_2168EE084((uint64_t)&v39);
    if ((_BYTE)v25)
    {
      if (v26 == (const char *)v27)
      {
        unint64_t v17 = v26;
      }
      else
      {
        unint64_t v17 = v26;
        while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v17 == (void *)v27)
          {
            unint64_t v17 = (void *)v27;
            break;
          }
        }
      }
      if (v17 == (void *)v27)
      {
        unint64_t v19 = *(void *)a2;
        if ((*(void *)a2 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v19 &= 0xFFFFFFFFFFFFFFF8;
        }
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v37 = (void ***)&v39;
        char v38 = 0;
        char v20 = (void **)operator new(8uLL);
        v39 = (const char **)v20;
        v40 = v20;
        *char v20 = (void *)v19;
        v41 = v20 + 1;
        if ((v19 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *char v20 = (void *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF8);
        }
        v40 = v20 + 1;
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations();
      }
    }
    else
    {
      if (v30 == v31)
      {
        char v18 = v30;
      }
      else
      {
        char v18 = v30;
        while ((*v18 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v18 == v31)
          {
            char v18 = v31;
            break;
          }
        }
      }
      if (v18 == v31)
      {
        long long v21 = v32;
        if (v32 != v33)
        {
          while ((*v21 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v21 == v33)
            {
              long long v21 = v33;
              break;
            }
          }
        }
        if (v21 == v33)
        {
          unint64_t v23 = *(void *)a2;
          if ((*(void *)a2 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v23 &= 0xFFFFFFFFFFFFFFF8;
          }
          v39 = 0;
          v40 = 0;
          v41 = 0;
          v37 = (void ***)&v39;
          char v38 = 0;
          char v24 = (void **)operator new(8uLL);
          v39 = (const char **)v24;
          v40 = v24;
          *char v24 = (void *)v23;
          v41 = v24 + 1;
          if ((v23 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *char v24 = (void *)((unint64_t)*v24 & 0xFFFFFFFFFFFFFFF8);
          }
          v40 = v24 + 1;
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ReplaceOperations();
        }
      }
    }
    uint64_t v14 = 1;
    v39 = (const char **)&v35;
    sub_216889A04((void ***)&v39);
    v39 = (const char **)&v34;
    sub_216889A04((void ***)&v39);
    v39 = (const char **)&v32;
    sub_216889A04((void ***)&v39);
    v39 = (const char **)&v30;
    sub_216889A04((void ***)&v39);
    v39 = (const char **)&v29;
    sub_216889A04((void ***)&v39);
    v39 = &v26;
    sub_216889A04((void ***)&v39);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v36);
  return v14;
}

void sub_216D6641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v6 - 96) = v5;
  sub_216889A04((void ***)(v6 - 96));
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169E0B70((void **)va);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v6 - 104));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t result = sub_216D656E4("ApplyAPI", (uint64_t)a2, 0);
  if (!result) {
    return result;
  }
  if (!*(void *)a3)
  {
    std::string __p = "usd/prim.cpp";
    uint64_t v13 = "_ApplyMultipleApplyAPI";
    uint64_t v14 = 880;
    uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo &, "
          "const TfToken &) const";
    char v16 = 0;
    unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      char v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        char v9 = *(const char **)v9;
      }
    }
    else
    {
      char v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"ApplyAPI: for mutiple apply API schema %s, a non-empty instance name must be provided.", v9);
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, v7) & 1) == 0)
  {
    std::string __p = "usd/prim.cpp";
    uint64_t v13 = "_ApplyMultipleApplyAPI";
    uint64_t v14 = 894;
    uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo &, "
          "const TfToken &) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(a1, &v11);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v10 = &v11;
    }
    else {
      char v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim '%s'", (const char *)v10);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11);
  if ((v11.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D66668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t __p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(this, SchemaInfo);
  }
  else
  {
    sub_216D65880("ApplyAPI", a2, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(this, SchemaInfo, a3);
  }
  else
  {
    sub_216D65880("ApplyAPI", a2, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(this, SchemaInfo);
  }
  else
  {
    sub_216D65A90("ApplyAPI", (const char *)a2, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(this, SchemaInfo, a3);
  }
  else
  {
    sub_216D65A90("ApplyAPI", (const char *)a2, 0);
    return 0;
  }
}

{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  uint64_t vars8;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(this, SchemaInfo);
  }
  else
  {
    sub_216D65CBC("ApplyAPI", (const char *)a2, (char *)a3, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(this, SchemaInfo, a4);
  }
  else
  {
    sub_216D65CBC("ApplyAPI", (const char *)a2, (char *)a3, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = sub_216D6525C("RemoveAPI", (uint64_t)a2, 0);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(a1, a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v3, this, &v18);
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v18))
  {
    uint64_t v12 = sub_216A663FC(&v18);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v13) {
      uint64_t v13 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v12, v13, v19);
    sub_216D673D4((pxrInternal__aapl__pxrReserved__::VtValue *)v19, (uint64_t)&v16);
    sub_2168EE084((uint64_t)v19);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  v19[0] = "usd/prim.cpp";
  v19[1] = "RemoveAppliedSchema";
  v19[2] = 1163;
  v19[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(const TfToken &) const";
  char v20 = 0;
  sub_216D0162C((uint64_t)this, &v16);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)*((void *)this + 1);
  if (!v6 || (*((unsigned char *)v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v6, v4);
  }
  EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v6);
  unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(EditTarget);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v8);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v11 = Identifier;
  }
  else {
    uint64_t v11 = *(void *)Identifier;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v19, (pxrInternal__aapl__pxrReserved__ *)"Unable to create primSpec at path <%s> in edit target '%s'. Failed to remove applied API schema.", v10, Text, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v17);
  sub_21697C414(&v16);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
  return 0;
}

void sub_216D66E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t result = sub_216D656E4("RemoveAPI", (uint64_t)a2, 0);
  if (result)
  {
    if (*(void *)a3)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, a3, (uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9);
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      __p[0] = "usd/prim.cpp";
      __p[1] = "_RemoveMultipleApplyAPI";
      uint64_t v11 = 1005;
      uint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(const UsdSchemaRegistry::SchemaInfo "
            "&, const TfToken &) const";
      char v13 = 0;
      unint64_t v7 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v7)
      {
        unint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          unint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        unint64_t v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"RemoveAPI: for mutiple apply API schema %s, a non-empty instance name must be provided.", v8);
      return 0;
    }
  }
  return result;
}

void sub_216D670B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(this, SchemaInfo);
  }
  else
  {
    sub_216D65880("RemoveAPI", a2, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(this, SchemaInfo, a3);
  }
  else
  {
    sub_216D65880("RemoveAPI", a2, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(this, SchemaInfo);
  }
  else
  {
    sub_216D65A90("RemoveAPI", (const char *)a2, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(this, SchemaInfo, a3);
  }
  else
  {
    sub_216D65A90("RemoveAPI", (const char *)a2, 0);
    return 0;
  }
}

{
  const pxrInternal__aapl__pxrReserved__::TfToken *SchemaInfo;
  uint64_t vars8;

  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveSingleApplyAPI(this, SchemaInfo);
  }
  else
  {
    sub_216D65CBC("RemoveAPI", (const char *)a2, (char *)a3, 0);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a2, a3);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_RemoveMultipleApplyAPI(this, SchemaInfo, a4);
  }
  else
  {
    sub_216D65CBC("RemoveAPI", (const char *)a2, (char *)a3, 0);
    return 0;
  }
}

uint64_t sub_216D673D4@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_21698F7B0(a1))
  {
    sub_216D6C578();
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216D6C574, (uint64_t)&stru_26C7551D0);

  return sub_2169E21E0(a2, v4);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7 || (*(unsigned char *)(v7 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  unint64_t v8 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v7;
  sub_216D6766C(a3, (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  uint64_t v9 = *(atomic_uint ***)a2;
  char v10 = (atomic_uint **)*((void *)a2 + 1);
  if (*(atomic_uint ***)a2 != v10)
  {
    uint64_t v11 = (_DWORD *)(a1 + 16);
    do
    {
      int DefiningSpecType = pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(v8, *v6, v9);
      if (DefiningSpecType == 1)
      {
        sub_216D3B5F8((uint64_t)&v13, 3, (uint64_t *)v6, v11, (uint64_t *)v9);
        sub_216D67700(a3, (uint64_t)&v13);
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (DefiningSpecType != 8)
        {
          char v13 = "usd/prim.cpp";
          uint64_t v14 = (atomic_ullong *)"_MakeProperties";
          uint64_t v15 = 1199;
          unint64_t v16 = (unint64_t)"std::vector<UsdProperty> pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(co"
                                  "nst TfTokenVector &) const";
          char v17 = 0;
          if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "specType == SdfSpecTypeRelationship", 0) & 1) == 0)goto LABEL_15; {
        }
          }
        sub_216D3B5F8((uint64_t)&v13, 4, (uint64_t *)v6, v11, (uint64_t *)v9);
        sub_216D67700(a3, (uint64_t)&v13);
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
LABEL_15:
      ++v9;
    }
    while (v9 != v10);
  }
}

void sub_216D6761C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3BBE0((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_216D6766C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 32 * v6;
    sub_216D6C730(a1, v7);
    return sub_216D6C948(v7);
  }
  return result;
}

void sub_216D676EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6C948((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216D67700(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    char v18 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v12);
    }
    else {
      char v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[32 * v9];
    char v17 = &v13[32 * v12];
    sub_216D6C860(v5, (uint64_t)v15, a2);
    unint64_t v16 = v15 + 32;
    sub_216D6C730(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_216D6C948(&v14);
  }
  else
  {
    uint64_t result = sub_216D6C860((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_216D67800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6C948((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216D3B5F8(a3, 3, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216D3B5F8(a3, 4, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D0162C((uint64_t)this, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2, &v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)*((void *)this + 1);
  if (!v5 || (*((unsigned char *)v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v5, v4);
  }
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdStage::_RemoveProperty(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  return v6;
}

void sub_216D678EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, atomic_uint **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v6 = (uint64_t *)((char *)this + 8);
  uint64_t v7 = *((void *)this + 1);
  if (!v7 || (a2 = (atomic_uint **)*((void *)this + 1), (*(unsigned char *)(v7 + 57) & 8) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    a2 = (atomic_uint **)*v6;
  }
  int DefiningSpecType = pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, v3);
  int v9 = (_DWORD *)((char *)this + 16);
  if (DefiningSpecType == 8)
  {
    sub_216D3B5F8((uint64_t)&v10, 4, v6, v9, (uint64_t *)v3);
    *(_DWORD *)a3 = v10;
    *(void *)(a3 + 8) = v11;
    int v11 = 0;
    sub_21697D878((_DWORD *)(a3 + 16), &v12);
    sub_21697D8B4((_DWORD *)(a3 + 20), &v13);
    *(void *)(a3 + 24) = v14;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
LABEL_8:
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
    return;
  }
  if (DefiningSpecType == 1)
  {
    sub_216D3B5F8((uint64_t)&v10, 3, v6, v9, (uint64_t *)v3);
    *(_DWORD *)a3 = v10;
    *(void *)(a3 + 8) = v11;
    int v11 = 0;
    sub_21697D878((_DWORD *)(a3 + 16), &v12);
    sub_21697D8B4((_DWORD *)(a3 + 20), &v13);
    *(void *)(a3 + 24) = v14;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    goto LABEL_8;
  }

  sub_216D3B5F8(a3, 2, v6, v9, (uint64_t *)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, atomic_uint **a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(this, a2, (uint64_t)&v5);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v5, v2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return IsDefined;
}

void sub_216D67B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetKind(pxrInternal__aapl__pxrReserved__::UsdPrim *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(this)) {
    return 0;
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5) {
    uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  BOOL result = sub_216D1D1CC((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 208), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  sub_216D0162C((uint64_t)this, (int *)&v6);
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v1);
  uint64_t v3 = v6;
  uint64_t v4 = *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
  sub_21697C414(&v6);
  return v3 == v4;
}

void sub_216D67C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetKind(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(this))
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216D1CF30((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208));
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder@<W0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  BOOL result = sub_216D6C9C4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 272), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D67D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  sub_216BDFC40((uint64_t)&v50, 0, 0.0, 0.5);
  *a5 = 0;
  a5[1] = 0;
  uint64_t v47 = (uint64_t)a5;
  a5[2] = 0;
  uint64_t v11 = *(void *)(a1 + 8);
  if (!v11 || (*(unsigned char *)(v11 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v10);
  }
  int v12 = *(atomic_ullong **)(v11 + 24);
  uint64_t explicit = atomic_load_explicit(v12 + 7, memory_order_acquire);
  if (!explicit) {
    uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v12);
  }
  if ((a2 & 1) == 0)
  {
    v43 = *(uint64_t **)(explicit + 80);
    uint64_t v42 = *(uint64_t **)(explicit + 88);
    while (v43 != v42)
    {
      uint64_t v44 = *(void *)(a4 + 24);
      if (!v44 || (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v44 + 48))(v44, v43)) {
        sub_216BF146C(&v50, v43, v43);
      }
      ++v43;
    }
  }
  uint64_t v14 = (uint64_t *)sub_216D240F8(a1, v10);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v14, 6u, (uint64_t *)&v58);
  int v45 = a3;
  v46 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)a1;
  uint64_t v15 = *(void *)(a4 + 24);
  char v17 = v58;
  unint64_t v16 = v59;
  v48 = v61;
  v49 = v60;
  if (v58 != v60 || v59 != v61)
  {
    do
    {
      v57[0] = v17;
      v57[1] = v16;
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v57) & 1) == 0
        && pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v57))
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v57);
        unint64_t v19 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
        uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v19);
        uint64_t v22 = *(uint64_t **)Layers;
        uint64_t v21 = *(uint64_t **)(Layers + 8);
        while (v22 != v21)
        {
          uint64_t v64 = 0;
          unint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v22);
          Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v57);
          long long v25 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v25) {
            long long v25 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v23, Path, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v25 + 40), (pxrInternal__aapl__pxrReserved__::VtValue *)v63)&& sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)v63))
          {
            sub_216ABF350((uint64_t)v63, &v55);
            uint64_t v26 = v55;
            if (v15)
            {
              uint64_t v27 = v56;
              while (v26 != v27)
              {
                uint64_t v28 = sub_216C303C8(&v50, v26, bswap64(0x9E3779B97F4A7C55 * (*v26 & 0xFFFFFFFFFFFFFFF8)));
                if (v52 + 16 * v53 == v28)
                {
                  uint64_t v29 = *(void *)(a4 + 24);
                  if (!v29) {
                    sub_21683A7CC();
                  }
                  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v29 + 48))(v29, v26)) {
                    sub_216D6BB0C(&v50, v26, v26);
                  }
                }
                ++v26;
              }
            }
            else
            {
              sub_216D6BC78((uint64_t)&v50, v55, v56);
            }
            v62 = (void **)&v55;
            sub_216889A04(&v62);
          }
          sub_2168EE084((uint64_t)v63);
          ++v22;
        }
      }
      unint64_t v16 = (void **)((char *)v16 + 1);
    }
    while (v17 != v49 || v16 != v48);
  }
  if (v54)
  {
    sub_216A9C5B8(v47, v54);
    uint64_t v30 = 0;
    if (v53)
    {
      long long v31 = (__int16 *)(v52 + 4);
      while (1)
      {
        int v32 = *v31;
        v31 += 8;
        if (v32 != -1) {
          break;
        }
        if (v53 == ++v30)
        {
          uint64_t v30 = v53;
          break;
        }
      }
    }
    sub_216D6CA6C((uint64_t)&v58, v52 + 16 * v30, v52 + 16 * v53, *(void **)v47);
    v33 = *(char **)(v47 + 8);
    unint64_t v34 = 126 - 2 * __clz((uint64_t)&v33[-*(void *)v47] >> 3);
    if (v33 == *(char **)v47) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = v34;
    }
    sub_21698BD44(*(pxrInternal__aapl__pxrReserved__::TfToken **)v47, v33, (uint64_t)&v58, v35, 1);
    if (v45)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder(v46, &v58);
      v36 = v58;
      v37 = v59;
      if (v58 != v59)
      {
        char v38 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v47;
        v39 = *(uint64_t **)(v47 + 8);
        if (*(uint64_t **)v47 != v39)
        {
          do
          {
            v40 = v39;
            if (v38 != (pxrInternal__aapl__pxrReserved__::TfToken *)v39)
            {
              v40 = (uint64_t *)v38;
              while ((*v40 & 0xFFFFFFFFFFFFFFF8) != ((unint64_t)*v36 & 0xFFFFFFFFFFFFFFF8))
              {
                if (++v40 == v39)
                {
                  v40 = v39;
                  break;
                }
              }
            }
            if (v40 == v39)
            {
              v41 = v38;
            }
            else
            {
              v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v38 + 8);
              if (v40 != (uint64_t *)v38) {
                sub_216D6BD18((uint64_t *)v38, v40, v40 + 1);
              }
            }
            ++v36;
            char v38 = v41;
          }
          while (v36 != v37);
        }
      }
      v55 = (uint64_t *)&v58;
      sub_216889A04((void ***)&v55);
    }
  }
  v58 = (void **)&v51;
  sub_216BDFE6C(&v58);
}

void sub_216D6820C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = a12;
  sub_216889A04(&a25);
  a25 = (void **)&a16;
  sub_216BDFE6C(&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, 0, 1, a2, v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5, a3);
  uint64_t v6 = (void **)v5;
  sub_216889A04(&v6);
}

void sub_216D68324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, 1, 1, a2, v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5, a3);
  uint64_t v6 = (void **)v5;
  sub_216889A04(&v6);
}

void sub_216D683A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  char v4 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = a2[1];
  }
  if (v7)
  {
    unsigned __int8 v9 = sub_216D33724();
    unsigned __int8 v10 = v9;
    uint64_t v11 = *((unsigned __int8 *)a2 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = a2[1];
    }
    if (v12 >= 0) {
      int v13 = a2;
    }
    else {
      int v13 = (uint64_t *)*a2;
    }
    uint64_t v14 = v11 - (*((unsigned __int8 *)v13 + v11 - 1) == v9);
    uint64_t v15 = operator new(0x20uLL);
    *uint64_t v15 = &unk_26C768DD8;
    v15[1] = a2;
    v15[2] = v14;
    *((unsigned char *)v15 + 24) = v10;
    char v18 = v15;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames(a1, v4, 1, (uint64_t)v17, v16);
    sub_216D3BB5C(v17);
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeProperties(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v16, a4);
    sub_216D68574((pxrInternal__aapl__pxrReserved__ *)v16);
    v17[0] = (void **)v16;
    sub_216889A04(v17);
  }
  else
  {
    char v18 = 0;
    if (a3) {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredProperties(a1, (uint64_t)v17, a4);
    }
    else {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties(a1, (uint64_t)v17, a4);
    }
    sub_216D3BB5C(v17);
  }
}

void sub_216D6852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D3BB5C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216D68574(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v1 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0) {
    sub_216D6CCA8((pxrInternal__aapl__pxrReserved__ *)&v1);
  }
  uint64_t v3 = (void **)&v1;
  sub_216889A04(&v3);
}

void sub_216D685D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(a1, (uint64_t *)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216D68658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertiesInNamespace(a1, (uint64_t *)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216D686D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v10 = a5;
  sub_216D3B5F8(a6, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), a2);
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Create(a6, a3, a4, &v10);
}

void sub_216D68758(_Unwind_Exception *a1)
{
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(a1, a2, a3, 1, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(uint64_t a1@<X0>, std::string **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(a1, &v12, a3, a4, a5, a6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216D6881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(uint64_t a1@<X0>, std::string **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, char a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames((uint64_t)this, a2, a3, (uint64_t)&v15, &v13);
  sub_216D3BB5C(&v15);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_216D68A48(a4, v14 - v13);
  uint64_t v6 = v13;
  uint64_t v7 = v14;
  if (v13 != v14)
  {
    int v8 = (uint64_t *)((char *)this + 8);
    unsigned __int8 v9 = (_DWORD *)((char *)this + 16);
    do
    {
      sub_216D3B5F8((uint64_t)&v15, 3, v8, v9, v6);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v15, v10))
      {
        unint64_t v11 = a4[1];
        if (v11 >= a4[2])
        {
          uint64_t v12 = sub_216D6D338(a4, (uint64_t)&v15);
        }
        else
        {
          sub_216D3B3EC((uint64_t)(a4 + 2), a4[1], (uint64_t)&v15);
          uint64_t v12 = v11 + 32;
          a4[1] = v11 + 32;
        }
        a4[1] = v12;
      }
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
      sub_21697C414(&v17);
      if (v16) {
        sub_216D16E0C(v16);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v15 = (void **)&v13;
  sub_216889A04(&v15);
}

void sub_216D689E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

void **sub_216D68A48(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  BOOL result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 32 * v6;
    sub_216D6D100(a1, v7);
    return sub_216D6D2BC(v7);
  }
  return result;
}

void sub_216D68AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6D2BC((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D3B5F8((uint64_t)&v5, 3, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v5, v2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return IsDefined;
}

void sub_216D68B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a4@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdRelationship::_Create(a4, a3);
}

void sub_216D68BD8(_Unwind_Exception *a1)
{
  sub_216D33F64(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, std::string **a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v8);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8, a3, a4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216D68C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, char a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetPropertyNames((uint64_t)this, a2, a3, (uint64_t)&v15, &v13);
  sub_216D3BB5C(&v15);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_216D68E98(a4, v14 - v13);
  uint64_t v6 = v13;
  int v7 = v14;
  if (v13 != v14)
  {
    uint64_t v8 = (uint64_t *)((char *)this + 8);
    uint64_t v9 = (_DWORD *)((char *)this + 16);
    do
    {
      sub_216D3B5F8((uint64_t)&v15, 4, v8, v9, v6);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v15, v10))
      {
        unint64_t v11 = a4[1];
        if (v11 >= a4[2])
        {
          uint64_t v12 = sub_216D6D768(a4, (uint64_t)&v15);
        }
        else
        {
          sub_216D3B3EC((uint64_t)(a4 + 2), a4[1], (uint64_t)&v15);
          uint64_t v12 = v11 + 32;
          a4[1] = v11 + 32;
        }
        a4[1] = v12;
      }
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
      sub_21697C414(&v17);
      if (v16) {
        sub_216D16E0C(v16);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v15 = (void **)&v13;
  sub_216889A04(&v15);
}

void sub_216D68E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

void **sub_216D68E98(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  BOOL result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 32 * v6;
    sub_216D6D530(a1, v7);
    return sub_216D6D6EC(v7);
  }
  return result;
}

void sub_216D68F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6D6EC((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D3B5F8((uint64_t)&v5, 4, (uint64_t *)this + 1, (_DWORD *)this + 4, (uint64_t *)a2);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v5, v2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return IsDefined;
}

void sub_216D68FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D68FE4@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_216D6D8D8((uint64_t)v7, a1, a2, a3, a4);
  sub_216D6D858((uint64_t)v7);
  *(_OWORD *)a5 = v8;
  *(void *)(a5 + 16) = v9;
  uint64_t v9 = 0;
  long long v8 = 0u;
  return sub_216D73A8C((uint64_t)v7);
}

void sub_216D69084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D73A8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::FindAllAttributeConnectionPaths@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  UsdPrimDefaultPredicate = (long long *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);

  return sub_216D68FE4((uint64_t)a1, UsdPrimDefaultPredicate, a2, a3, a4);
}

uint64_t sub_216D69100@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_216D73BD4((uint64_t)v7, a1, a2, a3, a4);
  sub_216D73B54((uint64_t)v7);
  *(_OWORD *)a5 = v8;
  *(void *)(a5 + 16) = v9;
  uint64_t v9 = 0;
  long long v8 = 0u;
  return sub_216D76760((uint64_t)v7);
}

void sub_216D691A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D76760((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::FindAllRelationshipTargetPaths@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  UsdPrimDefaultPredicate = (long long *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);

  return sub_216D69100((uint64_t)a1, UsdPrimDefaultPredicate, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasVariantSets(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 472));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_216D3C05C(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216D6BDA0(a3, a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetInherits@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_216D3C05C(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredInherits(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 192));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_216D3C05C(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredSpecializes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 304));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_216D3C05C(a2, (uint64_t)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 280));
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredPayloads(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || (unint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    unint64_t v3 = *(void *)(v2 + 56);
  }
  return (v3 >> 9) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(uint64_t a1, uint64_t a2)
{
  v20[1] = *MEMORY[0x263EF8340];
  sub_216D3C05C((uint64_t)v8, a1);
  pxrInternal__aapl__pxrReserved__::UsdPayloads::ClearPayloads((pxrInternal__aapl__pxrReserved__::UsdPayloads *)v8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
  }
  sub_216981010(&v17, (_DWORD *)(a2 + 24));
  sub_21698105C(&v18, (_DWORD *)(a2 + 28));
  long long v19 = *(_OWORD *)(a2 + 32);
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v5 = 0;
  int v13 = &v5;
  char v14 = 0;
  uint64_t v5 = (__n128 *)operator new(0x30uLL);
  uint64_t v6 = v5;
  int v7 = v5 + 3;
  uint64_t v6 = sub_216AE98D4((uint64_t)&v7, (uint64_t)__p, (uint64_t)v20, v5);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdPayloads::SetPayloads(v8, &v5);
  int v13 = &v5;
  sub_2169CC78C((void ***)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  return v3;
}

void sub_216D69584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D695F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D695E0()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPayloads@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  return sub_216D3C05C(a2, (uint64_t)this);
}

uint64_t sub_216D695F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v8, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, a2, a3, v8);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(a1, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_216D696EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v9, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, Identifier, a3, v9);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetPayload(a1, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(&v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_216D697A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ClearPayload(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  sub_216D3C05C((uint64_t)&v3, (uint64_t)this);
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::UsdPayloads::ClearPayloads((pxrInternal__aapl__pxrReserved__::UsdPayloads *)&v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return v1;
}

void sub_216D69838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::Load(uint64_t a1, int a2)
{
  if (sub_216D59FC8(a1))
  {
    v17[0] = "usd/prim.cpp";
    v17[1] = "Load";
    v17[2] = 1896;
    v17[3] = "void pxrInternal__aapl__pxrReserved__::UsdPrim::Load(UsdLoadPolicy) const";
    char v18 = 0;
    sub_216D0162C(a1, &v15);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to load a prim in a prototype <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    int v6 = &v15;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (!v7 || (*(unsigned char *)(v7 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v4);
    }
    long long v8 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v7;
    sub_216D0162C(a1, (int *)v17);
    pxrInternal__aapl__pxrReserved__::UsdStage::Load(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)v17, a2, (uint64_t)v10);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v17 + 1);
    int v6 = (int *)v17;
  }
  return sub_21697C414(v6);
}

void sub_216D69980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::Unload(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  if (sub_216D59FC8((uint64_t)this))
  {
    v10[0] = "usd/prim.cpp";
    v10[1] = "Unload";
    v10[2] = 1907;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::UsdPrim::Unload() const";
    char v11 = 0;
    sub_216D0162C((uint64_t)this, &v8);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to unload a prim in a prototype <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    uint64_t v4 = &v8;
  }
  else
  {
    uint64_t v5 = *((void *)this + 1);
    if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
    }
    int v6 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v5;
    sub_216D0162C((uint64_t)this, (int *)v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::Unload(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    uint64_t v4 = (int *)v10;
  }
  return sub_21697C414(v4);
}

void sub_216D69A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(this);
  uint64_t v6 = *UsdPrimDefaultPredicate;
  uint64_t v5 = UsdPrimDefaultPredicate[1];
  uint64_t v7 = UsdPrimDefaultPredicate[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 4)
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  uint64_t v22 = v6;
  uint64_t v23 = v5;
  *(void *)&long long v24 = v7;
  sub_216D6BF84((uint64_t)this, &v22, (uint64_t)&v26);
  uint64_t v22 = v26;
  sub_216981010(&v23, &v27);
  sub_21698105C((_DWORD *)&v23 + 1, &v28);
  long long v24 = v29;
  uint64_t v25 = v30;
  uint64_t v18 = v31;
  sub_216981010(&v19, &v32);
  sub_21698105C((_DWORD *)&v19 + 1, &v33);
  long long v20 = v34;
  uint64_t v21 = v35;
  while (v22 != v18 || v23 != v19 || !sub_216D5D158((uint64_t)&v24, (uint64_t)&v20))
  {
    sub_216D6BE74((uint64_t)&v22, (uint64_t)&v13);
    int v8 = (uint64_t *)sub_216D563F8(&v13);
    int v9 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v9 >= *(void *)(a2 + 16))
    {
      char v11 = sub_216973984((char **)a2, v8);
    }
    else
    {
      uint64_t v10 = *v8;
      *int v9 = *v8;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      char v11 = (char *)(v9 + 1);
    }
    *(void *)(a2 + 8) = v11;
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
    sub_216D6BEE8((uint64_t)&v22);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_21697C414(&v32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  return sub_21697C414(&v27);
}

void sub_216D69D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D69D60(uint64_t a1)
{
  return a1;
}

_DWORD *sub_216D69D98(_DWORD *a1)
{
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(this);
  uint64_t v6 = *UsdPrimAllPrimsPredicate;
  uint64_t v5 = UsdPrimAllPrimsPredicate[1];
  uint64_t v7 = UsdPrimAllPrimsPredicate[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 4)
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  uint64_t v22 = v6;
  uint64_t v23 = v5;
  *(void *)&long long v24 = v7;
  sub_216D6BF84((uint64_t)this, &v22, (uint64_t)&v26);
  uint64_t v22 = v26;
  sub_216981010(&v23, &v27);
  sub_21698105C((_DWORD *)&v23 + 1, &v28);
  long long v24 = v29;
  uint64_t v25 = v30;
  uint64_t v18 = v31;
  sub_216981010(&v19, &v32);
  sub_21698105C((_DWORD *)&v19 + 1, &v33);
  long long v20 = v34;
  uint64_t v21 = v35;
  while (v22 != v18 || v23 != v19 || !sub_216D5D158((uint64_t)&v24, (uint64_t)&v20))
  {
    sub_216D6BE74((uint64_t)&v22, (uint64_t)&v13);
    int v8 = (uint64_t *)sub_216D563F8(&v13);
    int v9 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v9 >= *(void *)(a2 + 16))
    {
      char v11 = sub_216973984((char **)a2, v8);
    }
    else
    {
      uint64_t v10 = *v8;
      *int v9 = *v8;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      char v11 = (char *)(v9 + 1);
    }
    *(void *)(a2 + 8) = v11;
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
    sub_216D6BEE8((uint64_t)&v22);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_21697C414(&v32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  return sub_21697C414(&v27);
}

void sub_216D6A040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetFilteredChildrenNames@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16))
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  uint64_t v22 = v6;
  uint64_t v23 = v5;
  *(void *)&long long v24 = v7;
  sub_216D6BF84(a1, &v22, (uint64_t)&v26);
  uint64_t v22 = v26;
  sub_216981010(&v23, &v27);
  sub_21698105C((_DWORD *)&v23 + 1, &v28);
  long long v24 = v29;
  uint64_t v25 = v30;
  uint64_t v18 = v31;
  sub_216981010(&v19, &v32);
  sub_21698105C((_DWORD *)&v19 + 1, &v33);
  long long v20 = v34;
  uint64_t v21 = v35;
  while (v22 != v18 || v23 != v19 || !sub_216D5D158((uint64_t)&v24, (uint64_t)&v20))
  {
    sub_216D6BE74((uint64_t)&v22, (uint64_t)&v13);
    int v8 = (uint64_t *)sub_216D563F8(&v13);
    int v9 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v9 >= *(void *)(a3 + 16))
    {
      char v11 = sub_216973984((char **)a3, v8);
    }
    else
    {
      uint64_t v10 = *v8;
      *int v9 = *v8;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      char v11 = (char *)(v9 + 1);
    }
    *(void *)(a3 + 8) = v11;
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
    sub_216D6BEE8((uint64_t)&v22);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_21697C414(&v32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  return sub_21697C414(&v27);
}

void sub_216D6A2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenReorder@<W0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  BOOL result = sub_216D6C9C4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 216), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D6A3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetNextSibling@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(this);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::GetFilteredNextSibling((uint64_t)this, UsdPrimDefaultPredicate, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetFilteredNextSibling@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(a1 + 8);
  sub_216981010(&v12, (_DWORD *)(a1 + 16));
  sub_21698105C(&v13, (_DWORD *)(a1 + 20));
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12)
    && ((v7 & 0x2000) != 0 || (v6 & 0x2000) == 0))
  {
    v7 |= 0x2000uLL;
    v6 &= ~0x2000uLL;
  }
  v11[0] = v7;
  v11[1] = v6;
  v11[2] = v8;
  if (sub_216D5BD54(&v14, &v12, 0, v11))
  {
    *(_DWORD *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
  }
  else
  {
    uint64_t v10 = (atomic_ullong *)v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 6, 1uLL, memory_order_relaxed);
    }
    sub_216D16CFC(a3, (uint64_t *)&v10, &v12);
    if (v10) {
      sub_216D16E0C(v10);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216D6A550(_Unwind_Exception *a1, atomic_ullong *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a2) {
    sub_216D16E0C(a2);
  }
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 1);
  if (!v5
    || (a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)this + 1),
        (*(unsigned char *)(v5 + 57) & 8) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    a2 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)this + 1);
  }
  PrototypeForInstance = (atomic_ullong *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrototypeForInstance(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v5, a2);
  uint64_t v8 = PrototypeForInstance;
  if (PrototypeForInstance) {
    atomic_fetch_add_explicit(PrototypeForInstance + 6, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
  sub_216D16CFC(a3, (uint64_t *)&v8, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_21697C414(&v7);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216D6A64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, atomic_ullong *a10)
{
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetInstances(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *((void *)this + 1);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v5;

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetInstancesForPrototype(v6, this, a3);
}

double pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex@<D0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)this + 1);
  if (!v6 || (*((unsigned char *)v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  SourcePrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(v6, (uint64_t)a2, a3);
  if (*(void *)SourcePrimIndex)
  {
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(SourcePrimIndex);
    uint64_t v10 = (unsigned char *)*((void *)this + 1);
    if (!v10 || (v10[57] & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v8);
    }
    char v11 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*(void *)v10 + 128);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v23);
    uint64_t v29 = 0;
    memset(v27, 0, sizeof(v27));
    int v28 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v30);
    memset(v31, 0, sizeof(v31));
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v11, &v21);
    pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(v11, (uint64_t)v32);
    char v36 = 0;
    pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex((pxrInternal__aapl__pxrReserved__::SdfPath *)Path, &v21, (uint64_t)v32, (uint64_t *)&v23, 0);
    if (v35 < 0) {
      operator delete(v34[5]);
    }
    sub_216ABC260(v34);
    uint64_t v13 = v22;
    if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = *((void *)this + 1);
    if (!v14 || (*(unsigned char *)(v14 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v12);
    }
    uint64_t v15 = *(void *)v14;
    sub_216D0162C((uint64_t)this, (int *)&v21);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"computing expanded prim index for <%s>", v17, v18, Text);
    pxrInternal__aapl__pxrReserved__::UsdStage::_ReportPcpErrors(v15, v27, (uint64_t *)v32);
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_21697C414(&v21);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(a4, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v23);
    v32[0] = v31;
    sub_216BC1290((void ***)v32);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v30);
    uint64_t v19 = v29;
    uint64_t v29 = 0;
    if (v19) {
      sub_216BBECE0((uint64_t)&v29, v19);
    }
    v32[0] = v27;
    sub_216787968((void ***)v32);
    sub_2168BBAAC(&v26, 0);
    if (v24)
    {
      uint64_t v25 = v24;
      operator delete(v24);
    }
    sub_216BDCEE8(&v23);
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(a4);
  }
  return result;
}

void sub_216D6A98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeResolveTargetFromEditTarget@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = (int)a3;
  pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex(this, a2, a3, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)__p);
  if (!__p[0]) {
    goto LABEL_17;
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)__p);
  char v35 = (char *)v7;
  char v36 = v8;
  Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v35);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(a2, Path, &v27);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27)
    || (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)__p, 6u, (uint64_t *)&v35),
        uint64_t v11 = (uint64_t)v35,
        uint64_t v10 = v36,
        int v12 = v37,
        v35 == v37)
    && v36 == v38)
  {
LABEL_10:
    uint64_t v18 = 0;
    uint64_t v19 = -1;
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)((char *)v38 - 1);
    while (1)
    {
      uint64_t v14 = v10;
      char v33 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v11;
      long long v34 = v10;
      uint64_t v15 = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v33);
      if (*v15 == v27)
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v33);
        uint64_t v17 = sub_216BBBFA8(LayerStack);
        if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v17, (uint64_t *)a2)) {
          break;
        }
      }
      uint64_t v10 = (std::__shared_weak_count *)((char *)&v14->__vftable + 1);
      if ((char *)v11 == v12 && v13 == v14) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = v33;
    uint64_t v19 = (uint64_t)v34;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_21697C414(&v27);
  v29[0] = v18;
  v29[1] = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v19;
  if (v18 && v19 != -1)
  {
    long long v20 = (char *)operator new(0x40uLL);
    long long v21 = v31;
    *(_OWORD *)(v20 + 24) = *(_OWORD *)__p;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
    *(void *)long long v20 = &unk_26C7695F0;
    __p[0] = 0;
    __p[1] = 0;
    *(_OWORD *)(v20 + 40) = v21;
    long long v31 = 0uLL;
    uint64_t v22 = v32;
    int v32 = 0;
    *((void *)v20 + 7) = v22;
    char v35 = v20 + 24;
    char v36 = (std::__shared_weak_count *)v20;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(v29);
      char v33 = v23;
      long long v34 = v24;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a4, &v35, &v33, &v27, v29, a2);
      uint64_t v25 = v28;
      if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a4, &v35, v29, a2);
    }
    if (v36) {
      sub_216784EC4(v36);
    }
  }
  else
  {
LABEL_17:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(_OWORD *)(a4 + 24) = xmmword_217455290;
    *(void *)(a4 + 40) = -1;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 56) = -1;
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 72) = 0;
    *(void *)(a4 + 80) = -1;
    *(void *)(a4 + 88) = 0;
  }
  sub_2168BBAAC(&v32, 0);
  if (__p[1])
  {
    *(void **)&long long v31 = __p[1];
    operator delete(__p[1]);
  }
  return sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
}

void sub_216D6ACD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_216784EC4(a22);
  }
  sub_216BDB478((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::_GetProtoToInstancePathMap(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *((void *)this + 1);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 56), (v5 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    uint64_t v5 = *(void *)(v4 + 56);
  }
  if ((v5 & 0x1000) != 0)
  {
    int v41 = *(_DWORD *)this;
    uint64_t v6 = (atomic_ullong *)*((void *)this + 1);
    uint64_t v42 = (pxrInternal__aapl__pxrReserved__ *)v6;
    if (v6) {
      atomic_fetch_add_explicit(v6 + 6, 1uLL, memory_order_relaxed);
    }
    sub_216981010(&v43, (_DWORD *)this + 4);
    sub_21698105C(&v44, (_DWORD *)this + 5);
    uint64_t v8 = *((void *)this + 3);
    uint64_t v45 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (!v42 || (uint64_t v9 = *((void *)v42 + 7), (v9 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v42, v7);
      uint64_t v9 = *((void *)v42 + 7);
    }
    if ((v9 & 0x100) != 0)
    {
      sub_216D6B1F8((uint64_t)&v41, (uint64_t)&v36);
      int v41 = v36;
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__ *)v37;
      uint64_t v37 = 0;
      uint64_t v11 = (atomic_ullong *)v42;
      uint64_t v42 = v10;
      if (v11) {
        sub_216D16E0C(v11);
      }
      sub_21697DE94(&v43, &v38);
      sub_21697DEEC(&v44, &v39);
      if ((v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v45 = v40;
      uint64_t v40 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_21697C414(&v38);
      if (v37) {
        sub_216D16E0C(v37);
      }
    }
    while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v41, v7))
    {
      int v36 = 1;
      uint64_t v37 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v38);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v39);
      uint64_t v40 = 0;
      uint64_t v13 = v42;
      if (!v42 || (uint64_t v14 = *((void *)v42 + 7), (v14 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v42, v12);
        uint64_t v14 = *((void *)v13 + 7);
      }
      if ((v14 & 0x100) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v41, v12, (uint64_t)&v30);
        int v36 = v30;
        uint64_t v18 = v32;
        int v32 = 0;
        uint64_t v19 = v37;
        uint64_t v37 = v18;
        if (v19) {
          sub_216D16E0C(v19);
        }
        sub_21697DE94(&v38, &v33);
        sub_21697DEEC(&v39, &v34);
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v40 = v35;
        uint64_t v35 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
        sub_21697C414(&v33);
        if (v32) {
          sub_216D16E0C(v32);
        }
      }
      else if (sub_216D6B2D0((uint64_t)&v41, v12))
      {
        int v36 = v41;
        int v16 = (atomic_ullong *)v42;
        if (v42) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v42 + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = v37;
        uint64_t v37 = v16;
        if (v17) {
          sub_216D16E0C(v17);
        }
        sub_2169C487C(&v38, &v43);
        sub_2169C48D4(&v39, &v44);
        sub_2168D2318(&v40, &v45);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v36, v15))
      {
        uint64_t v22 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D6B334((uint64_t)&v36, v20, v21);
        Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(v22);
        sub_216D0162C((uint64_t)&v41, &v30);
        sub_216CF4248(a3, Path, &v30);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
        sub_21697C414(&v30);
      }
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_21697C414(&v38);
      if (v37) {
        sub_216D16E0C(v37);
      }
      sub_216D6B1F8((uint64_t)&v41, (uint64_t)&v36);
      int v41 = v36;
      long long v24 = (pxrInternal__aapl__pxrReserved__ *)v37;
      uint64_t v37 = 0;
      uint64_t v25 = (atomic_ullong *)v42;
      uint64_t v42 = v24;
      if (v25) {
        sub_216D16E0C(v25);
      }
      sub_21697DE94(&v43, &v38);
      sub_21697DEEC(&v44, &v39);
      if ((v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v45 = v40;
      uint64_t v40 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_21697C414(&v38);
      if (v37) {
        sub_216D16E0C(v37);
      }
    }
    uint64_t v26 = (int *)a3[1];
    unint64_t v27 = 126 - 2 * __clz(((uint64_t)v26 - *a3) >> 4);
    if (v26 == (int *)*a3) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v27;
    }
    sub_216D768D4(*a3, v26, (uint64_t)&v36, v28, 1);
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_21697C414(&v43);
    if (v42) {
      sub_216D16E0C((atomic_ullong *)v42);
    }
  }
}

void sub_216D6B184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = a12;
  sub_216BECE18(&a21);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D6B1F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = *(atomic_ullong **)(a1 + 8);
  sub_216981010(&v6, (_DWORD *)(a1 + 16));
  sub_21698105C(&v7, (_DWORD *)(a1 + 20));
  sub_216D6C1E0((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v8, &v6);
  uint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216D16CFC(a2, (uint64_t *)&v5, &v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216D6B2A8(_Unwind_Exception *a1, uint64_t a2, atomic_ullong *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_216D16E0C(a3);
  }
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D6B2D0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
    if ((*(void *)(v2 + 56) & 0x1000) == 0) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) == 0)
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 16));
}

uint64_t sub_216D6B334(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, char *a3)
{
  uint64_t v3 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v3 || (*((unsigned char *)v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  return pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(v3, (uint64_t)a2, a3);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdPrim::MakeResolveTargetUpToEditTarget@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, uint64_t a3@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeResolveTargetFromEditTarget(this, a2, 0, a3);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdPrim::MakeResolveTargetStrongerThanEditTarget@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, uint64_t a3@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeResolveTargetFromEditTarget(this, a2, (char *)1, a3);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D0162C((uint64_t)this, (int *)&v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, v6, &v10);
  int v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v10);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, a3);
  uint64_t v8 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216D6B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D0162C((uint64_t)this, (int *)&v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, v6, &v10);
  int v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v10);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, a3);
  uint64_t v8 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216D6B5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath(this, a2, (uint64_t)&v4);
  sub_216D6B6A8((uint64_t)&v4, a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D6B694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_216D6B6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)a1;
  if (*(int *)a1 < 2)
  {
    *(_DWORD *)a2 = 2;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    double result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    return (_DWORD *)sub_216D3B5F8(a2, v3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath(this, a2, (uint64_t)&v4);
  sub_216D6B7B4((uint64_t)&v4, a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D6B7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_216D6B7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 3)
  {
    return (_DWORD *)sub_216D3B5F8(a2, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    double result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetObjectAtPath(this, a2, (uint64_t)&v4);
  sub_216D6B8C4((uint64_t)&v4, a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D6B8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_216D6B8C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 4)
  {
    return (_DWORD *)sub_216D3B5F8(a2, 4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  else
  {
    *(_DWORD *)a2 = 4;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    double result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

std::string *sub_216D6B948@<X0>(char *__s@<X2>, std::string *result@<X0>, std::string *a3@<X1>, std::string *a4@<X8>)
{
  if (result == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    int v6 = result;
    if ((char *)a3 - (char *)result == 8)
    {
      if ((result->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
        double result = (std::string *)((result->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        double result = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
      {
        int v16 = (void *)result->__r_.__value_.__r.__words[0];
        unint64_t size = result->__r_.__value_.__l.__size_;
        return (std::string *)sub_216778F24(a4, v16, size);
      }
      else
      {
        long long v15 = *(_OWORD *)&result->__r_.__value_.__l.__data_;
        a4->__r_.__value_.__r.__words[2] = result->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v15;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = ((char *)a3 - (char *)result) >> 3;
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      uint64_t v10 = result;
      a4->__r_.__value_.__r.__words[2] = 0;
      do
      {
        unint64_t v11 = v10->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
        if (v11)
        {
          if (*(char *)(v11 + 39) < 0) {
            unint64_t v11 = *(void *)(v11 + 24);
          }
          else {
            unint64_t v11 = *(unsigned __int8 *)(v11 + 39);
          }
        }
        v8 += v11;
        uint64_t v10 = (std::string *)((char *)v10 + 8);
      }
      while (v10 != a3);
      size_t v12 = strlen(__s);
      std::string::reserve(a4, v8 + v12 * (v9 - 1));
      if ((v6->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((v6->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      }
      int v18 = *((char *)EmptyString + 23);
      if (v18 >= 0) {
        uint64_t v19 = (const std::string::value_type *)EmptyString;
      }
      else {
        uint64_t v19 = (const std::string::value_type *)*EmptyString;
      }
      if (v18 >= 0) {
        std::string::size_type v20 = *((unsigned __int8 *)EmptyString + 23);
      }
      else {
        std::string::size_type v20 = EmptyString[1];
      }
      double result = std::string::append(a4, v19, v20);
      for (i = &v6->__r_.__value_.__l.__size_; i != (std::string::size_type *)a3; ++i)
      {
        uint64_t v22 = std::string::append(a4, __s);
        if ((*i & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v23 = (uint64_t *)((*i & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v23 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v22);
        }
        int v24 = *((char *)v23 + 23);
        if (v24 >= 0) {
          uint64_t v25 = (const std::string::value_type *)v23;
        }
        else {
          uint64_t v25 = (const std::string::value_type *)*v23;
        }
        if (v24 >= 0) {
          std::string::size_type v26 = *((unsigned __int8 *)v23 + 23);
        }
        else {
          std::string::size_type v26 = v23[1];
        }
        double result = std::string::append(a4, v25, v26);
      }
    }
  }
  return result;
}

void sub_216D6BAEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D6BB0C(uint64_t *a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[4];
  uint64_t v9 = v6 & *a1;
  if (*(__int16 *)(v8 + 16 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    char v12 = sub_216BF1600((uint64_t)a1);
    uint64_t v13 = a1[4];
    if (v12)
    {
      uint64_t v9 = v6 & *a1;
      int v14 = *(__int16 *)(v13 + 16 * v9 + 4);
      if (v14 < 0)
      {
        LOWORD(v10) = 0;
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          int v10 = (__int16)(v10 + 1);
          uint64_t v9 = (v9 + 1) & *a1;
          int v14 = *(__int16 *)(v13 + 16 * v9 + 4);
        }
        while (v10 <= v14);
      }
      int v15 = (unsigned __int16)v14;
    }
    else
    {
      int v15 = *(unsigned __int16 *)(v13 + 16 * v9 + 4);
    }
    if (v15 == 0xFFFF)
    {
      uint64_t v16 = v13 + 16 * v9;
      *(void *)(v16 + 8) = *a3;
      *a3 = 0;
      *(_DWORD *)uint64_t v16 = v6;
      *(_WORD *)(v16 + 4) = v10;
    }
    else
    {
      sub_216BF18CC(a1, v9, v10, v6, a3);
    }
    ++a1[6];
    return a1[4] + 16 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      uint64_t result = v8 + 16 * v9;
      if ((*(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8) == v5) {
        break;
      }
      int v10 = (__int16)(v10 + 1);
      uint64_t v9 = (v9 + 1) & v7;
      if (v10 > *(__int16 *)(v8 + 16 * v9 + 4)) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

void sub_216D6BC78(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  if ((char *)a3 - (char *)a2 >= 1)
  {
    unint64_t v6 = a3 - a2;
    unint64_t v7 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 56) - v7 < v6)
    {
      float v8 = *(float *)(a1 + 68);
      unint64_t v9 = vcvtps_u32_f32((float)(v7 + v6) / v8);
      unint64_t v10 = vcvtps_u32_f32((float)v7 / v8);
      if (v10 <= v9) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = v10;
      }
      sub_216BF1744(a1, v11);
    }
  }
  while (v4 != a3)
  {
    sub_216D6BB0C((uint64_t *)a1, v4, v4);
    ++v4;
  }
}

uint64_t *sub_216D6BD18(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  uint64_t result = a1 + 1;
  for (i = a2; ; *result++ = *i)
  {
    *i++ = v3;
    if (i == a3) {
      break;
    }
    if (result == a2) {
      a2 = i;
    }
    uint64_t v3 = *result;
  }
  if (result != a2)
  {
    unint64_t v6 = result;
    unint64_t v7 = a2;
    while (1)
    {
      float v8 = v6;
      while (1)
      {
        uint64_t v9 = *v6;
        *v8++ = *v7;
        *v7++ = v9;
        if (v7 != a3) {
          break;
        }
        unint64_t v6 = v8;
        unint64_t v7 = a2;
        if (v8 == a2) {
          return result;
        }
      }
      if (v8 == a2) {
        a2 = v7;
      }
      ++v6;
    }
  }
  return result;
}

uint64_t sub_216D6BDA0(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  float v8 = (unsigned char *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v8, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)float v8 = v9;
  }
  return a1;
}

void sub_216D6BE60(_Unwind_Exception *a1)
{
  sub_216D16AD8(v1);
  _Unwind_Resume(a1);
}

void sub_216D6BE74(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(atomic_ullong **)a1;
  unint64_t v5 = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216D16CFC(a2, (uint64_t *)&v5, (_DWORD *)(a1 + 8));
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D6BED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *a10)
{
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216D6BEE8(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 8);
  uint64_t result = (_DWORD *)sub_216D5BD54((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, (int *)(a1 + 8), 0, (uint64_t *)(a1 + 16));
  if (result)
  {
    *(void *)a1 = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
    sub_21697DE94(v2, (int *)&v4);
    sub_21697DEEC((int *)(a1 + 12), (int *)&v4 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
    return sub_21697C414(&v4);
  }
  return result;
}

_DWORD *sub_216D6BF84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *(pxrInternal__aapl__pxrReserved__::UsdStage ***)(a1 + 8);
  sub_216981010(&v15, (_DWORD *)(a1 + 16));
  sub_21698105C(&v16, (_DWORD *)(a1 + 20));
  if (!sub_216D5BC28(&v17, &v15, 0, a2))
  {
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v14 + 1);
    sub_21697DE94(&v15, (int *)&v14);
    sub_21697DEEC(&v16, (int *)&v14 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
    sub_21697C414(&v14);
  }
  sub_216D6C140((uint64_t)v11, &v17, &v15, (long long *)a2);
  uint64_t v14 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
  sub_216D6C140((uint64_t)v8, &v14, &v7, (long long *)a2);
  sub_216D5C184(a3, (uint64_t)v11, (uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10);
  sub_21697C414(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_21697C414(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_21697C414(&v15);
}

void sub_216D6C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_21697B754(&a9);
  sub_216D69D60((uint64_t)&a15);
  sub_21697B754((_DWORD *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_216D6C140(uint64_t a1, void *a2, _DWORD *a3, long long *a4)
{
  *(void *)a1 = *a2;
  uint64_t v7 = (_DWORD *)(a1 + 8);
  sub_216981010((_DWORD *)(a1 + 8), a3);
  sub_21698105C((_DWORD *)(a1 + 12), a3 + 1);
  long long v8 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v8;
  if (*(void *)a1 && !sub_216D3B924((uint64_t *)(a1 + 16), a1, v7)) {
    sub_216D6BEE8(a1);
  }
  return a1;
}

void sub_216D6C1CC(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D6C1E0(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, int *a2)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v10);
    sub_21697DE94(a2, (int *)v10);
    sub_21697DEEC(a2 + 1, (int *)v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    uint64_t result = (uint64_t)sub_21697C414(v10);
    unint64_t v5 = *a1;
    if (*a1)
    {
      if ((*((unsigned char *)v5 + 57) & 0x10) != 0)
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if (result)
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
          *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)result;
          if (!result)
          {
            v10[0] = "usd/primData.h";
            v10[1] = "Usd_MoveToParent";
            v10[2] = 527;
            v10[3] = "void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimDataPtr = co"
                     "nst pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            char v11 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
            int v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, v8, Text);
            uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "p", v9);
            if (!result) {
              return result;
            }
            uint64_t result = (uint64_t)*a1;
          }
          if (*(void *)(result + 16) == *(void *)a2)
          {
            v10[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v10);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v10 + 1);
            sub_21697DE94(a2, (int *)v10);
            sub_21697DEEC(a2 + 1, (int *)v10 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
            return (uint64_t)sub_21697C414(v10);
          }
        }
      }
    }
  }
  return result;
}

char *sub_216D6C364(char *a1, char *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (a2 != a1)
  {
    uint64_t v4 = a1;
    unint64_t v5 = (a2 - a1) >> 4;
    do
    {
      uint64_t v6 = &v4[16 * (v5 >> 1)];
      sub_216981010(&v9, v6);
      sub_21698105C(&v10, (_DWORD *)v6 + 1);
      int v7 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_21697C414(&v9);
      if (v7) {
        v5 += ~(v5 >> 1);
      }
      else {
        v5 >>= 1;
      }
      if (v7) {
        uint64_t v4 = v6 + 16;
      }
    }
    while (v5);
    return v4;
  }
  return a2;
}

void sub_216D6C424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((int *)va);
  _Unwind_Resume(a1);
}

void *sub_216D6C444@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfType *a2@<X1>, void *a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a1, a2);
  if (result)
  {
    unsigned int v6 = *((_DWORD *)result + 6);
    int v7 = result + 2;
    return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(v7, v6, v3, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void *sub_216D6C4A8@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  int v3 = (int)a2;
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(a1, a2);
  if (SchemaInfo)
  {
    unsigned int v7 = *((_DWORD *)SchemaInfo + 6);
    long long v8 = SchemaInfo + 2;
    return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(v8, v7, v3, a3);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier(a1, (uint64_t)&v10);
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(&v10, v11, v3, a3);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_216D6C578()
{
}

void sub_216D6C5DC(_Unwind_Exception *a1)
{
  sub_2169E0B70(v1);
  _Unwind_Resume(a1);
}

void sub_216D6C5F0()
{
}

void sub_216D6C644()
{
}

void sub_216D6C684(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D6C698(void **a1)
{
  if (a1)
  {
    uint64_t v2 = a1 + 16;
    sub_216889A04(&v2);
    uint64_t v2 = a1 + 13;
    sub_216889A04(&v2);
    uint64_t v2 = a1 + 10;
    sub_216889A04(&v2);
    uint64_t v2 = a1 + 7;
    sub_216889A04(&v2);
    uint64_t v2 = a1 + 4;
    sub_216889A04(&v2);
    uint64_t v2 = a1 + 1;
    sub_216889A04(&v2);
    operator delete(a1);
  }
}

uint64_t sub_216D6C730(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D6C7A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D6C7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216D6C860(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216D6C8BC((uint64_t)v13);
  return v11;
}

_DWORD *sub_216D6C860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  sub_21697D878((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  uint64_t result = sub_21697D8B4((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_216D6C8BC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D6C8F4((uint64_t *)a1);
  }
  return a1;
}

void sub_216D6C8F4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216D3BC78(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_216D6C948(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216D6C97C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_216D3BC78(v4, i - 32);
  }
}

BOOL sub_216D6C9C4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  v11[2] = &stru_26C74C2D0;
  __int16 v12 = 0;
  v11[0] = &unk_26C759208;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_216D6CA6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_2168D2318(a4, (void *)(v5 + 8));
      uint64_t v7 = v5 + 16;
      do
      {
        uint64_t v5 = v7;
        if (*(unsigned char *)(v7 - 10)) {
          break;
        }
        v7 += 16;
      }
      while (*(__int16 *)(v5 + 4) == -1);
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

__n128 sub_216D6CAF0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C768DD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216D6CB44(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C768DD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_216D6CB7C(uint64_t a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  char v4 = *((unsigned char *)EmptyString + 23);
  if (v4 < 0) {
    unint64_t v5 = EmptyString[1];
  }
  else {
    unint64_t v5 = *((unsigned __int8 *)EmptyString + 23);
  }
  unint64_t v6 = *(void *)(a1 + 16);
  if (v5 <= v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(char *)(v7 + 23) >= 0 ? *(const char **)(a1 + 8) : *(const char **)v7;
  size_t v9 = v4 >= 0 ? *((unsigned __int8 *)EmptyString + 23) : EmptyString[1];
  size_t v10 = strlen(v8);
  if (v9 < v10) {
    return 0;
  }
  if (v4 < 0) {
    EmptyString = (uint64_t *)*EmptyString;
  }
  return !strncmp((const char *)EmptyString, v8, v10)
      && *((unsigned __int8 *)EmptyString + v6) == *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_216D6CC5C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768E48)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D6CC9C()
{
  return &unk_26C768E48;
}

void sub_216D6CCA8(pxrInternal__aapl__pxrReserved__ *a1)
{
  long long v5 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v6 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v3 = sub_216D6CE04(DetachedDispatcher, &v5);
    char v4 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void, void *, uint64_t))*(v3 - 5))(*(v3 - 5), v3, (uint64_t)(v3 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v4);
  }
  else
  {
    sub_216D6CD64();
  }
  uint64_t v7 = (void **)&v5;
  sub_216889A04(&v7);
}

void sub_216D6CD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

void sub_216D6CD64()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  uint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216D6CDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216D6CE04(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v8[0] = 0;
  v8[1] = v4;
  __n128 result = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x28uLL);
  *((unsigned char *)result - 11) = 1;
  *__n128 result = &unk_26C768E68;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[1] = *a2;
  *a2 = 0;
  uint64_t v6 = result[2];
  result[2] = a2[1];
  a2[1] = v6;
  uint64_t v7 = result[3];
  result[3] = a2[2];
  a2[2] = v7;
  result[4] = a1 + 264;
  return result;
}

uint64_t sub_216D6CEA0(uint64_t a1)
{
  *(void *)a1 = &unk_26C768E68;
  unint64_t v3 = (void **)(a1 + 8);
  sub_216889A04(&v3);
  return a1;
}

void sub_216D6CEF8(char *a1)
{
  *(void *)a1 = &unk_26C768E68;
  uint64_t v2 = (void **)(a1 + 8);
  sub_216889A04(&v2);
  operator delete(a1);
}

uint64_t sub_216D6CF54(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216D6CD64();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216D6CFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216D6CFF8(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216D6D090((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216D6D090(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

uint64_t sub_216D6D100(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D6D178((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D6D178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216D6C860(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216D6D230((uint64_t)v13);
  return v11;
}

uint64_t sub_216D6D230(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D6D268((uint64_t *)a1);
  }
  return a1;
}

void sub_216D6D268(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216D6D090(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_216D6D2BC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216D6D2F0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_216D6D090(v4, i - 32);
  }
}

uint64_t sub_216D6D338(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  __int16 v12 = &v8[32 * v3];
  char v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  sub_216D6D100(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216D6D2BC(&v11);
  return v9;
}

void sub_216D6D414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6D2BC((void **)va);
  _Unwind_Resume(a1);
}

void sub_216D6D428(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216D6D4C0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216D6D4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

uint64_t sub_216D6D530(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D6D5A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D6D5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216D6C860(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216D6D660((uint64_t)v13);
  return v11;
}

uint64_t sub_216D6D660(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D6D698((uint64_t *)a1);
  }
  return a1;
}

void sub_216D6D698(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216D6D4C0(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_216D6D6EC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216D6D720(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_216D6D4C0(v4, i - 32);
  }
}

uint64_t sub_216D6D768(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  __int16 v12 = &v8[32 * v3];
  char v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  sub_216D6D530(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216D6D6EC(&v11);
  return v9;
}

void sub_216D6D844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6D6EC((void **)va);
  _Unwind_Resume(a1);
}

int *sub_216D6D858(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = (uint64_t (**)(void))&unk_26C769028;
  v5[1] = (uint64_t (**)(void))&v4;
  tbb::interface7::internal::isolate_within_arena(v5, 0);
  uint64_t v2 = sub_216C63148(*(int **)(a1 + 1024), *(int **)(a1 + 1032));
  return sub_216AD6870(a1 + 1024, v2, *(int **)(a1 + 1032));
}

uint64_t sub_216D6D8D8(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, char a5)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v11 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v12 = *a3;
  *(void *)(a1 + 48) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v12;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  *(void *)(a1 + 416) = 0;
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = &unk_26C768EB0;
  v13[1] = a1 + 56;
  v13[2] = a1;
  *(void *)(a1 + 416) = v13;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = a4;
  *(void *)(a1 + 440) = &unk_26C768FE8;
  long long v15 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v14);
  *(void *)(a1 + 448) = v15;
  bzero(v15, 0x2C0uLL);
  *(_OWORD *)(*(void *)(a1 + 448) + 256) = xmmword_21749C150;
  *(void *)(a1 + 440) = &unk_26C768F78;
  sub_216D6E158(a1 + 464, 8uLL, &v17);
  *(void *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(unsigned char *)(a1 + 1048) = a5;
  return a1;
}

void sub_216D6DA64(_Unwind_Exception *a1)
{
  sub_216D6E3E8(v3);
  sub_216C7894C((void *)(v1 + 392));
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v2);
  sub_216D16AD8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216D6DAB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C768EB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216D6DB08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C768EB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216D6DB40(uint64_t a1, uint64_t a2)
{
  return sub_216D6DB94((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216D6DB48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768F58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D6DB88()
{
  return &unk_26C768F58;
}

uint64_t sub_216D6DB94(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 256);
  v8[0] = 0;
  v8[1] = v5;
  uint64_t v6 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((unsigned char *)v6 - 11) = 1;
  *uint64_t v6 = &unk_26C768F20;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = v4 + 264;
  return (**(uint64_t (***)(void))*(v6 - 5))();
}

uint64_t sub_216D6DC58(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = atomic_load(*(unint64_t **)(a1 + 16));
  sub_216D6DD44(*(uint64_t **)(v2 + 8));
  unint64_t v4 = v3;
  atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(a1 + 16), &v4, 0);
  if (v4 != v3)
  {
    do
    {
      sub_216D6DD44(*(uint64_t **)(v2 + 8));
      unint64_t v5 = v4;
      atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(a1 + 16), &v5, 0);
      BOOL v6 = v5 == v4;
      unint64_t v4 = v5;
    }
    while (!v6);
  }
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v8 = v11;
  unint64_t v9 = atomic_load((unint64_t *)(v7 + 144));
  if (v8 < v9
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11, (atomic_ullong *)v7))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v11, *(void *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  return 0;
}

void sub_216D6DD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D6DD44(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  while (sub_216D6DE20((uint64_t)(a1 + 55), &v5))
  {
    unint64_t v2 = a1[129];
    if (v2 >= a1[130])
    {
      uint64_t v3 = sub_216981B30(a1 + 128, &v5);
    }
    else
    {
      sub_216981010((_DWORD *)a1[129], &v5);
      sub_21698105C((_DWORD *)(v2 + 4), &v6);
      uint64_t v3 = v2 + 8;
    }
    a1[129] = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_216D6DE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216D6DE20(uint64_t a1, int *a2)
{
  unint64_t v4 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    unint64_t v5 = *v4;
    __dmb(0xBu);
    atomic_ullong v6 = v4[16];
    __dmb(0xBu);
    uint64_t v7 = v6 - v5;
    BOOL v8 = v7 > 0;
LABEL_3:
    if (v7 < 1) {
      return 0;
    }
    while (1)
    {
      unint64_t v9 = v5;
      atomic_compare_exchange_strong(v4, &v9, v5 + 1);
      if (v9 == v5) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v4, 0, memory_order_relaxed);
      if (add_explicit != v5)
      {
        atomic_ullong v11 = v4[16];
        __dmb(0xBu);
        uint64_t v7 = v11 - add_explicit;
        unint64_t v5 = add_explicit;
        goto LABEL_3;
      }
    }
    if (sub_216D6DEE0(&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1)) {
      return v8;
    }
  }
}

BOOL sub_216D6DEE0(uint64_t *a1, int *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      uint64_t v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      uint64_t v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v13 = *a1;
  __dmb(0xBu);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(v14 + 256) - 1;
  uint64_t v16 = v15 & (a3 >> 3);
  if (v16 == v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  v20[0] = v8 + 8;
  v20[1] = (uint64_t)a1;
  void v20[2] = v17;
  v20[3] = a4;
  uint64_t v18 = *(void *)(v13 + 8) & (1 << v16);
  if (v18) {
    sub_216D6DFFC((uint64_t)a1, a2, v13, v16);
  }
  else {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  sub_2168DAB04(v20);
  return v18 != 0;
}

void sub_216D6DFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D6DFFC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3 + 8 * a4;
  uint64_t v7 = v5 + 16;
  sub_21697DE94(a2, (int *)(v5 + 16));
  sub_21697DEEC(a2 + 1, (int *)(v5 + 20));
  return sub_216D6E04C((uint64_t)&v7);
}

uint64_t sub_216D6E04C(uint64_t a1)
{
  unint64_t v2 = *(_DWORD **)a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(void *)a1 + 4));
  sub_21697C414(v2);
  return a1;
}

void sub_216D6E088(void *a1)
{
  uint64_t v1 = (void *)sub_216D6E3E8(a1);

  operator delete(v1);
}

uint64_t sub_216D6E0B0(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 8 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216D6E0E0(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 8 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216D6E110(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_216D6E150(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_216D6E158(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  v5[5] = 0;
  *uint64_t v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_216D6E29C(_Unwind_Exception *a1)
{
  sub_216D6E2B0(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_216D6E2B0(uint64_t a1)
{
  sub_216D6E2EC(a1);
  unint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_216D6E334(a1, v2);
  return a1;
}

uint64_t sub_216D6E2EC(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  *unint64_t v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      __n128 result = sub_216D6E334(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_216D6E334(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 40)) {
    sub_216D6E378(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

void sub_216D6E378(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
  sub_21697C414((_DWORD *)(a2 + 24));
  uint64_t v4 = *(atomic_ullong **)(a2 + 16);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

uint64_t sub_216D6E3E8(void *a1)
{
  *a1 = &unk_26C768F78;
  sub_216D6E448((uint64_t)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_216D6E500((uint64_t)a1, v2);
}

_DWORD *sub_216D6E448(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v9);
  while (1)
  {
    unint64_t v2 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = v2[16];
    __dmb(0xBu);
    uint64_t v4 = *v2;
    __dmb(0xBu);
    uint64_t v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
    sub_216D6DE20(a1, &v8);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_216D6E4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D6E500(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26C768FE8;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

void sub_216D6E550(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 8);
  sub_216D6E5A4((void *)v1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v1);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 56));
  sub_216D6E744(*(void *)(v1 + 1024), *(int **)(v1 + 1032), (uint64_t)&v3, v2);
}

_DWORD *sub_216D6E5A4(void *a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_216D6E7AC((uint64_t)a1, a2);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = a1[6];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4)
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v29[0] = v5;
  v29[1] = v4;
  v29[2] = v6;
  sub_216D5BAA4((uint64_t)a2, v29, (uint64_t)&v19);
  uint64_t v14 = v19;
  sub_216981010(&v15, &v20);
  sub_21698105C(&v16, &v21);
  long long v17 = v22;
  uint64_t v18 = v23;
  uint64_t v9 = v24;
  sub_216981010(&v10, &v25);
  sub_21698105C(&v11, &v26);
  long long v12 = v27;
  uint64_t v13 = v28;
  v29[0] = (uint64_t)a1;
  sub_216D6E99C(&v14, (uint64_t)&v9, (uint64_t)v29, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_21697C414(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  return sub_21697C414(&v20);
}

void sub_216D6E71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_216D5BA6C((uint64_t)va);
  sub_216D5BA6C((uint64_t)va1);
  sub_216D6EB24((int *)va2);
  _Unwind_Resume(a1);
}

void sub_216D6E744(unint64_t a1, int *a2, uint64_t a3, void *a4)
{
  if (a1 < (unint64_t)a2)
  {
    if ((uint64_t)((uint64_t)a2 - a1) > 3999)
    {
      sub_216D7144C(a1, (uint64_t)a2, a3, a4);
    }
    else
    {
      *(void *)&v8[1] = v4;
      uint64_t v9 = v5;
      unint64_t v6 = 126 - 2 * __clz((uint64_t)((uint64_t)a2 - a1) >> 3);
      if (a2 == (int *)a1) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v6;
      }
      sub_216D7157C(a1, a2, (uint64_t)v8, v7, 1);
    }
  }
}

void sub_216D6E7AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_216D6EBCC(a1 + 464, (uint64_t)a2, 0, (uint64_t)&v10);
  if ((_BYTE)v12)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::_GetAttributes(a2, 1, 0, &v16);
    uint64_t v4 = v16;
    for (uint64_t i = v17; v4 != i; v4 += 32)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 432) + 24);
      if (!v6 || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v4))
      {
        int v10 = (void **)a1;
        int v11 = *(_DWORD *)v4;
        uint64_t v7 = *(atomic_ullong **)(v4 + 8);
        uint64_t v12 = v7;
        if (v7) {
          atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed);
        }
        sub_216981010(&v13, (_DWORD *)(v4 + 16));
        sub_21698105C(&v14, (_DWORD *)(v4 + 20));
        uint64_t v8 = *(void *)(v4 + 24);
        uint64_t v15 = v8;
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v15 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v9 = sub_216D6F1E8(a1 + 56, (uint64_t *)&v10);
        (***(void (****)(void, uint64_t, uint64_t))(v9 - 40))(*(void *)(v9 - 40), v9, v9 - 8);
        if ((v15 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
        sub_21697C414(&v13);
        if (v12) {
          sub_216D16E0C(v12);
        }
      }
    }
    int v10 = (void **)&v16;
    sub_216D6CFF8(&v10);
  }
}

void sub_216D6E970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  sub_216D6CFF8(&a9);
  _Unwind_Resume(a1);
}

void sub_216D6E99C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v17[0] = 0;
  uint64_t v18 = 65539;
  int v19 = 55;
  tbb::task_group_context::init((uint64_t)v17, a2, a3, a4);
  uint64_t v12 = *a1;
  sub_216981010(&v13, (_DWORD *)a1 + 2);
  sub_21698105C(&v14, (_DWORD *)a1 + 3);
  long long v15 = *((_OWORD *)a1 + 1);
  uint64_t v16 = a1[4];
  uint64_t v7 = *(void *)a2;
  sub_216981010(&v8, (_DWORD *)(a2 + 8));
  sub_21698105C(&v9, (_DWORD *)(a2 + 12));
  long long v10 = *(_OWORD *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 32);
  sub_216D70104((uint64_t)&v12, &v7, a3, (tbb::task_group_context *)v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v17);
}

void sub_216D6EAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216D6EB24(_DWORD *a1)
{
  return a1;
}

uint64_t sub_216D6EB70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_216D6EBCC(uint64_t a1@<X0>, uint64_t a2@<X1>, tbb::internal *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v24 = 0;
  char v25 = 0;
  sub_216D6EF4C((uint64_t)&v24, (unsigned int *)a2, (void *)(a2 + 8), (unsigned int *)(a2 + 16), (void *)(a2 + 24));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * v24);
  unint64_t v24 = v8;
  uint64_t v26 = 0;
  int v9 = &v24;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (unint64_t *)((char *)v9 + 1);
    *((unsigned char *)&v26 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v26 | 1;
  sub_216D6EE0C(a1, v8, &v24);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    *((void *)a3 + 5) = v12;
    *(void *)a3 = 0;
  }
  int v14 = (void *)a2;
  while (1)
  {
    long long v15 = (atomic_ullong *)v24;
    unint64_t v16 = *(void *)v24;
    if (*(void *)v24)
    {
      unint64_t v17 = *(void *)(v16 + 40);
      while (1)
      {
        uint64_t v18 = (atomic_ullong *)v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12
          && *(_DWORD *)(v16 + 8) == *(_DWORD *)v14
          && *(void *)(v16 + 16) == v14[1]
          && *(void *)(v16 + 24) == v14[2]
          && (*(void *)(v16 + 32) & 0xFFFFFFFFFFFFFFF8) == (v14[3] & 0xFFFFFFFFFFFFFFF8))
        {
          if (a3) {
            sub_216D6E334(a1 + 16, a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        unint64_t v24 = v16;
        unint64_t v16 = *(void *)v16;
        if (!*v18)
        {
          long long v15 = v18;
          break;
        }
        unint64_t v17 = *(void *)(v16 + 40);
        long long v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (tbb::internal *)sub_216D6EEA4(a1 + 16, v12, a2);
      int v14 = (void *)((char *)a3 + 8);
      long long v15 = (atomic_ullong *)v24;
    }
    *(void *)a3 = v16;
    while (1)
    {
      unint64_t v19 = v16;
      atomic_compare_exchange_strong(v15, &v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if (add_explicit != v16) {
        goto LABEL_24;
      }
    }
    unint64_t add_explicit = v16;
LABEL_24:
    if (v16 == add_explicit || a3 == (tbb::internal *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

void sub_216D6EE0C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  long long v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_216D6F030(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

uint64_t sub_216D6EEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  uint64_t v6 = v5;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(v5 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(v5 + 24), (_DWORD *)(a3 + 16));
  sub_21698105C((_DWORD *)(v6 + 28), (_DWORD *)(a3 + 20));
  uint64_t v8 = *(void *)(a3 + 24);
  *(void *)(v6 + 32) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(v6 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 40) = a2;
  *(void *)uint64_t v6 = 0;
  return v6;
}

uint64_t sub_216D6EF4C(uint64_t a1, unsigned int *a2, void *a3, unsigned int *a4, void *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_216D6EF88(a1, a3, a4, a5);
}

uint64_t sub_216D6EF88(uint64_t a1, void *a2, unsigned int *a3, void *a4)
{
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * *a2);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_216D6EFD8(a1, a3, a4);
}

uint64_t sub_216D6EFD8(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t result = sub_2169827F8(a1, a2);
  unint64_t v6 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(a1 + 8)) {
    v6 += (*(void *)a1 + v6 + (*(void *)a1 + v6) * (*(void *)a1 + v6)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return result;
}

void sub_216D6F030(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_216D6F030(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  uint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    uint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_216D6F114(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  long long v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_216D6F114@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  *((void *)result + 5) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[5];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_216D6E334(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

uint64_t sub_216D6F1E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  sub_216D6F260(v5, a2, a1 + 264);
  return v5;
}

void sub_216D6F244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D6F260(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v6 = *a2;
  *(void *)a1 = &unk_26C769068;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  *(void *)(a1 + 24) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 32), (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)(a1 + 36), (_DWORD *)a2 + 7);
  uint64_t v8 = a2[4];
  *(void *)(a1 + 40) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 48) = a3;
  return a1;
}

uint64_t sub_216D6F324(uint64_t a1)
{
  *(void *)a1 = &unk_26C769068;
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  uint64_t v3 = *(atomic_ullong **)(a1 + 24);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_216D6F39C(void *a1)
{
  *(void *)a1 = &unk_26C769068;
  uint64_t v2 = *((void *)a1 + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
  sub_21697C414((_DWORD *)a1 + 8);
  uint64_t v3 = (atomic_ullong *)*((void *)a1 + 3);
  if (v3) {
    sub_216D16E0C(v3);
  }

  operator delete(a1);
}

uint64_t sub_216D6F424(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216D6F4CC(*(void *)(a1 + 8), a1 + 16);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216D6F4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216D6F4CC(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections(a2, v5);
  sub_216D6F54C(a1, v5, v3, v4);
  unint64_t v6 = (void **)v5;
  sub_216981168(&v6);
}

void sub_216D6F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216D6F54C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = (int8x16_t *)a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      uint64_t v8 = *(void *)(a1 + 448);
      unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v8 + 128), 1uLL);
      sub_216D6F71C((void *)(v8 + 40 * ((3 * (_BYTE)add) & 7) + 384), v6, add, (uint64_t *)(a1 + 440), (uint64_t (*)(void *, uint64_t))sub_216D6F6E0);
      v6 += 8;
    }
    while (v6 != v7);
    a2 = (uint64_t *)(a1 + 424);
    if (!atomic_fetch_add((atomic_ullong *volatile)(a1 + 424), 1uLL))
    {
      uint64_t v10 = *(void *)(a1 + 416);
      if (!v10) {
        sub_21683A7CC();
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
    }
  }
  if (*(unsigned char *)(a1 + 1048))
  {
    uint64_t v12 = a1;
    v17[0] = 0;
    uint64_t v18 = 65539;
    int v19 = 55;
    int8x16_t v11 = *v4;
    tbb::task_group_context::init((uint64_t)v17, (uint64_t)a2, a3, a4);
    long long v15 = &v12;
    int8x16_t v13 = vextq_s8(v11, v11, 8uLL);
    uint64_t v14 = 1;
    sub_216D6F8CC(&v13, &v15, (uint64_t)&v16, (tbb::task_group_context *)v17);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v17);
  }
}

void sub_216D6F6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D6F6E0(_DWORD *a1, _DWORD *a2)
{
  uint64_t v3 = sub_216981010(a1, a2) + 1;

  return sub_21698105C(v3, a2 + 1);
}

uint64_t sub_216D6F71C(void *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(void *, uint64_t))
{
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (*(void *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    int8x16_t v11 = 0;
  }
  else
  {
    int8x16_t v11 = (void *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    *int8x16_t v11 = 0;
    v11[1] = 0;
  }
  uint64_t v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9) {
    sub_2168DAE14((uint64_t)a1, a1 + 3, v9, a4[1]);
  }
  if (v11)
  {
    sub_21685036C((uint64_t)&v16, (uint64_t)(a1 + 4));
    int8x16_t v13 = (void *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v13 < 2)
    {
      __dmb(0xBu);
      *a1 = v11;
    }
    else
    {
      *int8x16_t v13 = v11;
    }
    __dmb(0xBu);
    a1[2] = v11;
    uint64_t v14 = v16;
    if (v16)
    {
      __dmb(0xBu);
      *uint64_t v14 = 0;
    }
  }
  else
  {
    int8x16_t v11 = (void *)a1[2];
    __dmb(0xBu);
  }
  uint64_t result = a5(&v11[v10 + 2], a2);
  v11[1] |= 1 << v10;
  atomic_fetch_add(a1 + 3, 8uLL);
  return result;
}

void sub_216D6F860(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v1 + 8) + 272), 1uLL);
  sub_2168DAD98(v2, v3);
}

void sub_216D6F880()
{
}

void sub_216D6F888(_Unwind_Exception *a1)
{
}

void *sub_216D6F8CC(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    uint64_t v5 = result;
    unint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C7690B0;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_216D6F9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D6F9CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216D6FA3C(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

void sub_216D6FA3C(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) < (unint64_t)((uint64_t)(*(void *)a3 - *(void *)(a3 + 8)) >> 3))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_216D6FAF0(a2);
          if (*(void *)(a3 + 16) >= (unint64_t)((uint64_t)(*(void *)a3 - *(void *)(a3 + 8)) >> 3)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_216D6FBC4(a1, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfPath **)a3);
}

uint64_t sub_216D6FAF0(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  uint64_t v4 = ***(uint64_t (****)(void))(sub_216D6FD90(v3, (uint64_t)a1) - 40);

  return v4();
}

void sub_216D6FBC4(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = a3[1];
  unsigned int v5 = *a3;
  if ((unint64_t)a3[2] < (*a3 - v4) >> 3 && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)uint64_t v14 = 0x10000;
    long long v15 = *(_OWORD *)a3;
    char v16 = a3[2];
    while (1)
    {
      sub_21692CF40(v14, *(unsigned __int8 *)(a1 + 12));
      char v7 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0) {
        break;
      }
      unsigned __int8 v13 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v13;
      unsigned __int8 v12 = v14[2];
      if (v14[2] < 2u)
      {
        unsigned int v8 = v14[0];
        if (v14[v14[0] + 3] >= v13
          || *((void *)&v15 + 3 * v14[0] + 2) >= (unint64_t)((uint64_t)(*((void *)&v15 + 3 * v14[0])
                                                                              - *((void *)&v15 + 3 * v14[0] + 1)) >> 3))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_216D6FE10(a2, (uint64_t)&v15 + 24 * v14[1], v14[v14[1] + 3]);
        unsigned __int8 v12 = --v14[2];
        v14[1] = (v14[1] + 1) & 7;
      }
LABEL_14:
      if (!v12 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v8 = v14[0];
LABEL_6:
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&v15 + 3 * v8;
    int8x16_t v11 = *v9;
    uint64_t v10 = v9[1];
    if (v10 != *v9)
    {
      do
      {
        sub_216D6FF38(*(uint64_t **)(a2 + 32), v10);
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      }
      while (v10 != v11);
      LOBYTE(v8) = v14[0];
    }
    unsigned __int8 v12 = --v14[2];
    v14[0] = (v8 - 1) & 7;
    goto LABEL_14;
  }
  while (v4 != v5)
  {
    sub_216D6FF38(*(uint64_t **)(a2 + 32), v4);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
  }
}

uint64_t sub_216D6FD90(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_26C7690B0;
  *(void *)(result + 8) = v2;
  unint64_t v3 = *(void *)(a2 + 16)
     + 8
     * ((((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3 < 0)) >> 1);
  *(void *)(a2 + 8) = v3;
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v4;
  *(void *)(result + 40) = v4;
  *(_DWORD *)(result + 48) = 2;
  *(unsigned char *)(result + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_216D6FE10(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C7690B0;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 32) = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v9;
  *(void *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v10 = ***(uint64_t (****)(void))(v7 - 40);

  return v10();
}

void sub_216D6FF38(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*a1;
  sub_216D0162C(*a1, &v13);
  BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (!HasPrefix)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, v5, &v11);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v9);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    uint64_t v8 = v12;
    if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v13, v7))sub_216D6E5A4(v3, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13); {
    if ((v18 & 7) != 0)
    }
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
  }
}

void sub_216D70080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_216D70104(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v14 = *(void *)a1;
  sub_216981010(&v15, (_DWORD *)(a1 + 8));
  sub_21698105C(&v16, (_DWORD *)(a1 + 12));
  long long v17 = *(_OWORD *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v9 = *a2;
  sub_216981010(&v10, (_DWORD *)a2 + 2);
  sub_21698105C(&v11, (_DWORD *)a2 + 3);
  long long v12 = *((_OWORD *)a2 + 1);
  uint64_t v13 = a2[4];
  sub_216D70220(&v14, (uint64_t)&v9, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_21697C414(&v15);
}

void sub_216D70204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

_DWORD *sub_216D70220(uint64_t *a1, uint64_t a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v18 = a3;
  uint64_t v13 = *a1;
  sub_216981010(&v14, (_DWORD *)a1 + 2);
  sub_21698105C(&v15, (_DWORD *)a1 + 3);
  long long v16 = *((_OWORD *)a1 + 1);
  uint64_t v17 = a1[4];
  uint64_t v8 = *(void *)a2;
  sub_216981010(&v9, (_DWORD *)(a2 + 8));
  sub_21698105C(&v10, (_DWORD *)(a2 + 12));
  long long v11 = *(_OWORD *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 32);
  sub_216D70334((uint64_t)&v13, &v8, (uint64_t)&v18, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  return sub_21697C414(&v14);
}

void sub_216D70318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216D5BA6C((uint64_t)va);
  sub_216D5BA6C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D70334(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v8 = *(void *)a1;
  if (*(void *)a1 == *a2 && *(void *)(a1 + 8) == a2[1])
  {
    uint64_t result = sub_216D5D158(a1 + 16, (uint64_t)(a2 + 2));
    if (result) {
      return result;
    }
    uint64_t v8 = *(void *)a1;
  }
  uint64_t v15 = v8;
  sub_216981010(&v16, (_DWORD *)(a1 + 8));
  sub_21698105C(&v17, (_DWORD *)(a1 + 12));
  long long v18 = *(_OWORD *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v10 = *a2;
  sub_216981010(&v11, (_DWORD *)a2 + 2);
  sub_21698105C(&v12, (_DWORD *)a2 + 3);
  long long v13 = *((_OWORD *)a2 + 1);
  uint64_t v14 = a2[4];
  sub_216D70498(&v15, (uint64_t)&v10, a3, (uint64_t)sub_216D705B4, 0, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  return (uint64_t)sub_21697C414(&v16);
}

void sub_216D7047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

_DWORD *sub_216D70498(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, tbb::task_group_context *a6)
{
  uint64_t v16 = *a1;
  sub_216981010(&v17, (_DWORD *)a1 + 2);
  sub_21698105C(&v18, (_DWORD *)a1 + 3);
  long long v19 = *((_OWORD *)a1 + 1);
  uint64_t v20 = a1[4];
  uint64_t v11 = *(void *)a2;
  sub_216981010(&v12, (_DWORD *)(a2 + 8));
  sub_21698105C(&v13, (_DWORD *)(a2 + 12));
  long long v14 = *(_OWORD *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 32);
  sub_216D705C0((uint64_t)&v16, &v11, a3, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_21697C414(&v17);
}

void sub_216D70598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_216D705B4(uint64_t **a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
}

uint64_t sub_216D705C0(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  v22[0] = &unk_26C7690F8;
  unint64_t v24 = a4;
  uint64_t v7 = (tbb::internal::allocate_child_proxy *)tbb::internal::allocate_root_with_context_proxy::allocate(&v24, 8uLL);
  *((unsigned char *)v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C746C48;
  v22[1] = a3;
  unint64_t v23 = v7;
  uint64_t v8 = tbb::internal::allocate_child_proxy::allocate(v7, 0x60uLL);
  uint64_t v17 = *(void *)a1;
  sub_216981010(&v18, (_DWORD *)(a1 + 8));
  sub_21698105C(&v19, (_DWORD *)(a1 + 12));
  long long v20 = *(_OWORD *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v12 = *a2;
  sub_216981010(&v13, (_DWORD *)a2 + 2);
  sub_21698105C(&v14, (_DWORD *)a2 + 3);
  long long v15 = *((_OWORD *)a2 + 1);
  uint64_t v16 = a2[4];
  sub_216D70C50(v8, &v17, (uint64_t)&v12, (uint64_t)v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_21697C414(&v18);
  int v9 = v23;
  *((void *)v23 - 3) = 2;
  (*(void (**)(void, tbb::internal::allocate_child_proxy *, uint64_t))(**((void **)v9 - 5) + 8))(*((void *)v9 - 5), v9, v8);
  return sub_216D71400((uint64_t)v22, v10);
}

void sub_216D70758(_Unwind_Exception *a1, tbb::task *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_216D71400((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_216D70770(uint64_t a1, tbb::task *a2)
{
  uint64_t v2 = (void *)sub_216D71400(a1, a2);

  operator delete(v2);
}

uint64_t sub_216D7079C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v8[0] = 0;
  v8[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x30uLL);
  uint64_t v6 = **(uint64_t (****)(void))(sub_216D70BBC(v5, a2, a1) - 40);
  return (*v6)();
}

uint64_t sub_216D70838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x30uLL);
  sub_216D708DC(v5, a2, a1);
  return (***(uint64_t (****)(void, uint64_t, uint64_t))(v5 - 40))(*(void *)(v5 - 40), v5, v5 - 8);
}

void sub_216D708C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D708DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C769140;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_216D7099C(uint64_t a1)
{
  *(void *)a1 = &unk_26C769140;
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_216D70A14(void *a1)
{
  *(void *)a1 = &unk_26C769140;
  uint64_t v2 = *((void *)a1 + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_21697C414((_DWORD *)a1 + 6);
  uint64_t v3 = (atomic_ullong *)*((void *)a1 + 2);
  if (v3) {
    sub_216D16E0C(v3);
  }

  operator delete(a1);
}

uint64_t sub_216D70A9C(uint64_t a1)
{
  return 0;
}

void sub_216D70AE0(uint64_t **a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (atomic_ullong *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  int v6 = a2[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2 + 4);
  int v7 = a2[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 5);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  sub_216D6E7AC(**a1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D70BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D70BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C769140;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 32) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_216D70C50(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v8 = *a2;
  *(void *)a1 = &unk_26C769188;
  *(void *)(a1 + 8) = v8;
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)a2 + 2);
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)a2 + 3);
  long long v9 = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 40) = a2[4];
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 48) = *(void *)a3;
  sub_216981010((_DWORD *)(a1 + 56), (_DWORD *)(a3 + 8));
  sub_21698105C((_DWORD *)(a1 + 60), (_DWORD *)(a3 + 12));
  uint64_t v10 = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = a4;
  return a1;
}

uint64_t sub_216D70D00(uint64_t a1)
{
  *(void *)a1 = &unk_26C769188;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void sub_216D70D64(_DWORD *a1)
{
  *(void *)a1 = &unk_26C769188;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_21697C414(a1 + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);

  operator delete(a1);
}

uint64_t sub_216D70DDC(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v13 = *(void *)(a1 + 8);
  sub_216981010(&v14, (_DWORD *)(a1 + 16));
  sub_21698105C(&v15, (_DWORD *)(v2 + 12));
  uint64_t v3 = 0;
  long long v16 = *(_OWORD *)(v2 + 16);
  uint64_t v17 = *(void *)(v2 + 32);
  while (*(void *)(a1 + 8) != *(void *)(a1 + 48)
       || *(void *)(a1 + 16) != *(void *)(a1 + 56)
       || (sub_216D5D158(v2 + 16, v2 + 56) & 1) == 0)
  {
    sub_216D5D974(v2);
    if (++v3 == 4)
    {
      if (*(void *)(a1 + 8) != *(void *)(a1 + 48)
        || *(void *)(a1 + 16) != *(void *)(a1 + 56)
        || (sub_216D5D158(v2 + 16, v2 + 56) & 1) == 0)
      {
        *(unsigned char *)(a1 - 12) = 1;
      }
      uint64_t v3 = 4;
      goto LABEL_11;
    }
  }
  if (v3)
  {
LABEL_11:
    uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 16);
    v12[0] = 0;
    v12[1] = v4;
    uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v12, 0x40uLL);
    uint64_t v7 = v13;
    sub_216981010(&v8, &v14);
    sub_21698105C(&v9, &v15);
    long long v10 = v16;
    uint64_t v11 = v17;
    sub_216D70FA8(v5, (uint64_t)&v7, v3, *(void *)(a1 + 88));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    goto LABEL_12;
  }
  uint64_t v5 = 0;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  return v5;
}

void sub_216D70F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216D5BA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D70FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C7691D0;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = *(void *)a2;
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 8));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 12));
  uint64_t v7 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = a3;
  return a1;
}

uint64_t sub_216D7102C(uint64_t a1)
{
  *(void *)a1 = &unk_26C7691D0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  return a1;
}

void sub_216D7107C(_DWORD *a1)
{
  *(void *)a1 = &unk_26C7691D0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_21697C414(a1 + 6);

  operator delete(a1);
}

uint64_t sub_216D710DC(uint64_t *a1)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v2 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)a1, 0x38uLL);
  sub_216D7121C(v2, a1 + 2, a1[1]);
  sub_216D5D974((uint64_t)(a1 + 2));
  if (a1[7] == 1)
  {
    int v3 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      *(void *)(v2 - 8) = 0;
      *int v8 = v2;
      int v8 = (uint64_t *)(v2 - 8);
      uint64_t v2 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)a1, 0x38uLL);
      sub_216D7121C(v2, a1 + 2, a1[1]);
      sub_216D5D974((uint64_t)(a1 + 2));
      int v3 = v4 + 1;
      uint64_t v5 = v4 + 2;
      ++v4;
    }
    while (v5 != a1[7]);
  }
  *(a1 - 3) = v3 + 2;
  if (v7)
  {
    (***(void (****)(void, uint64_t, uint64_t *))(v7 - 40))(*(void *)(v7 - 40), v7, v8);
    uint64_t v7 = 0;
    int v8 = &v7;
  }
  (*(void (**)(void, uint64_t *, uint64_t))(*(void *)*(a1 - 5) + 8))(*(a1 - 5), a1, v2);
  return 0;
}

uint64_t sub_216D7121C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v6 = *a2;
  *(void *)a1 = &unk_26C769218;
  *(void *)(a1 + 8) = v6;
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)a2 + 2);
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)a2 + 3);
  uint64_t v7 = a2[4];
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = a3;
  return a1;
}

uint64_t sub_216D71298(uint64_t a1)
{
  *(void *)a1 = &unk_26C769218;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void sub_216D712E8(_DWORD *a1)
{
  *(void *)a1 = &unk_26C769218;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);

  operator delete(a1);
}

uint64_t sub_216D71348(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(*(void *)(a1 + 48) + 8);
  sub_216D5DD48(a1 + 8, (uint64_t)&v3);
  sub_216D70AE0(v1, &v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return 0;
}

void sub_216D713EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D71400(uint64_t a1, tbb::task *a2)
{
  *(void *)a1 = &unk_26C7690F8;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

void sub_216D7144C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v15[0] = 1;
  uint64_t v16 = 65539;
  int v17 = 54;
  tbb::task_group_context::init((uint64_t)v15, a2, a3, a4);
  uint64_t v8 = 0;
  while (v8 != 72)
  {
    unint64_t v9 = *(void *)(a1 + v8);
    unint64_t v10 = *(void *)(a1 + v8 + 8);
    v8 += 8;
    if (v10 < v9) {
      goto LABEL_6;
    }
  }
  *(void *)&long long v13 = a2;
  *((void *)&v13 + 1) = a1 + 80;
  uint64_t v14 = 1;
  uint64_t v12 = a3;
  sub_216D7296C(&v13, &v12, (uint64_t)&v11, (tbb::task_group_context *)v15);
  if (!tbb::task_group_context::is_group_execution_cancelled((tbb::task_group_context *)v15)) {
    goto LABEL_7;
  }
LABEL_6:
  *(void *)&long long v13 = a3;
  *((void *)&v13 + 1) = (a2 - a1) >> 3;
  uint64_t v14 = a1;
  sub_216D73088(&v13, (uint64_t)&v12, (uint64_t)&v11, v7);
LABEL_7:
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
}

void sub_216D71558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D7157C(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (int *)result;
LABEL_2:
  char v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*((void *)a2 - 1) < *(void *)v11)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, a2 - 2);
            uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, a2 - 1);
          }
          break;
        case 3uLL:
          uint64_t result = sub_216D71BA8(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = (uint64_t)sub_216D721C8(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = (uint64_t)sub_216D722AC(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_216D723C0((uint64_t)v11, (uint64_t)a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_216D71BA8(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      sub_216D71BA8(v11 + 2, v17 - 2, a2 - 4);
      sub_216D71BA8(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      sub_216D71BA8(v17 - 2, v17, &v11[2 * v16 + 2]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, &v11[2 * v16 + 1]);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_216D71BA8(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*((void *)v11 - 1) >= *(void *)v11)
    {
      uint64_t result = (uint64_t)sub_216D71CC4(v11, a2);
      char v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v18 = sub_216D71E20(v11, a2);
    if ((v19 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v20 = sub_216D71F90(v11, v18);
    char v11 = v18 + 2;
    uint64_t result = sub_216D71F90(v18 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_17:
      uint64_t result = sub_216D7157C(v10, v18, a3, -v13, a5 & 1);
      char v11 = v18 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_216D71970(v11, a2);
  }
  else
  {
    return (uint64_t)sub_216D71A9C(v11, a2);
  }
}

int *sub_216D71970(int *result, int *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v5 = 0;
      char v6 = result;
      do
      {
        uint64_t v7 = v4;
        if (*((void *)v6 + 1) < *(void *)v6)
        {
          LODWORD(v11) = *((void *)v6 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v4);
          HIDWORD(v11) = v6[3];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v6 + 3);
          uint64_t v8 = v5;
          while (1)
          {
            unint64_t v9 = (int *)((char *)v3 + v8);
            sub_21697DE94((int *)((char *)v3 + v8 + 8), (int *)((char *)v3 + v8));
            sub_21697DEEC(v9 + 3, v9 + 1);
            if (!v8) {
              break;
            }
            v8 -= 8;
            if (v11 >= *((void *)v9 - 1))
            {
              unint64_t v10 = (int *)((char *)v3 + v8 + 8);
              goto LABEL_10;
            }
          }
          unint64_t v10 = v3;
LABEL_10:
          sub_21697DE94(v10, (int *)&v11);
          sub_21697DEEC(v9 + 1, (int *)&v11 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
          uint64_t result = sub_21697C414(&v11);
        }
        uint64_t v4 = v7 + 2;
        v5 += 8;
        char v6 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

_DWORD *sub_216D71A9C(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v5 = result + 3;
      do
      {
        char v6 = v4;
        if (*((void *)v3 + 1) < *(void *)v3)
        {
          LODWORD(v9) = *((void *)v3 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v4);
          HIDWORD(v9) = v3[3];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v3 + 3);
          uint64_t v7 = v5;
          do
          {
            uint64_t v8 = v7;
            sub_21697DE94(v7 - 1, v7 - 3);
            v7 -= 2;
            sub_21697DEEC(v8, v7);
          }
          while (v9 < *(void *)(v8 - 5));
          sub_21697DE94(v7 - 1, (int *)&v9);
          sub_21697DEEC(v7, (int *)&v9 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
          uint64_t result = sub_21697C414(&v9);
        }
        uint64_t v4 = v6 + 2;
        v5 += 2;
        int v3 = v6;
      }
      while (v6 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_216D71BA8(int *a1, int *a2, int *a3)
{
  unint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)a3;
  if (*(void *)a2 >= *(void *)a1)
  {
    if (v7 >= v6) {
      return 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
    unint64_t v9 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
    if (*(void *)a2 < *(void *)a1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
      uint64_t v8 = a1 + 1;
      uint64_t v10 = 2;
      goto LABEL_9;
    }
    return 1;
  }
  uint64_t v8 = a1 + 1;
  if (v7 >= v6)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
    unint64_t v11 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8, a2 + 1);
    if (*(void *)a3 < *(void *)a2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      unint64_t v9 = a3 + 1;
      uint64_t v10 = 2;
      uint64_t v8 = v11;
      goto LABEL_9;
    }
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a3);
  unint64_t v9 = a3 + 1;
  uint64_t v10 = 1;
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8, v9);
  return v10;
}

int *sub_216D71CC4(int *a1, int *a2)
{
  LODWORD(v11) = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  HIDWORD(v11) = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  if (v11 >= *((void *)a2 - 1))
  {
    unint64_t v6 = a1 + 2;
    do
    {
      uint64_t v4 = v6;
      if (v6 >= a2) {
        break;
      }
      v6 += 2;
    }
    while (v11 >= *(void *)v4);
  }
  else
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = *((void *)v4 + 1);
      v4 += 2;
    }
    while (v11 >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      unint64_t v7 = *((void *)a2 - 1);
      a2 -= 2;
    }
    while (v11 < v7);
  }
  while (v4 < a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v4, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v4 + 1, a2 + 1);
    do
    {
      unint64_t v8 = *((void *)v4 + 1);
      v4 += 2;
    }
    while (v11 >= v8);
    do
    {
      unint64_t v9 = *((void *)a2 - 1);
      a2 -= 2;
    }
    while (v11 < v9);
  }
  if (v4 - 2 != a1)
  {
    sub_21697DE94(a1, v4 - 2);
    sub_21697DEEC(a1 + 1, v4 - 1);
  }
  sub_21697DE94(v4 - 2, (int *)&v11);
  sub_21697DEEC(v4 - 1, (int *)&v11 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  return v4;
}

int *sub_216D71E20(int *a1, int *a2)
{
  LODWORD(v14) = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  HIDWORD(v14) = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  uint64_t v4 = 0;
  do
  {
    unint64_t v5 = *(void *)&a1[v4 + 2];
    v4 += 2;
  }
  while (v5 < v14);
  unint64_t v6 = &a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      unint64_t v8 = *((void *)a2 - 1);
      a2 -= 2;
    }
    while (v8 >= v14);
  }
  else
  {
    do
    {
      unint64_t v7 = *((void *)a2 - 1);
      a2 -= 2;
    }
    while (v7 >= v14);
  }
  unint64_t v9 = &a1[v4];
  if (v6 < a2)
  {
    uint64_t v10 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, v10 + 1);
      do
      {
        unint64_t v11 = *((void *)v9 + 1);
        v9 += 2;
      }
      while (v11 < v14);
      do
      {
        unint64_t v12 = *((void *)v10 - 1);
        v10 -= 2;
      }
      while (v12 >= v14);
    }
    while (v9 < v10);
  }
  if (v9 - 2 != a1)
  {
    sub_21697DE94(a1, v9 - 2);
    sub_21697DEEC(a1 + 1, v9 - 1);
  }
  sub_21697DE94(v9 - 2, (int *)&v14);
  sub_21697DEEC(v9 - 1, (int *)&v14 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_21697C414(&v14);
  return v9 - 2;
}

BOOL sub_216D71F90(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 2;
      if (*((void *)a2 - 1) < *(void *)a1)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 - 1);
        return 1;
      }
      return result;
    case 3:
      sub_216D71BA8(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_216D721C8(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_216D722AC(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v7 = a1 + 4;
      sub_216D71BA8(a1, a1 + 2, a1 + 4);
      unint64_t v8 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (*(void *)v8 < *(void *)v7)
    {
      LODWORD(v14) = *(void *)v8;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v8);
      HIDWORD(v14) = v8[1];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v8 + 1);
      uint64_t v11 = v9;
      while (1)
      {
        unint64_t v12 = (int *)((char *)a1 + v11);
        sub_21697DE94((int *)((char *)a1 + v11 + 24), (int *)((char *)a1 + v11 + 16));
        sub_21697DEEC(v12 + 7, v12 + 5);
        if (v11 == -16) {
          break;
        }
        v11 -= 8;
        if (v14 >= *((void *)v12 + 1))
        {
          uint64_t v13 = (int *)((char *)a1 + v11 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v13 = a1;
LABEL_12:
      sub_21697DE94(v13, (int *)&v14);
      sub_21697DEEC(v12 + 5, (int *)&v14 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
      ++v10;
      sub_21697C414(&v14);
      if (v10 == 8) {
        return v8 + 2 == a2;
      }
    }
    unint64_t v7 = v8;
    v9 += 8;
    v8 += 2;
    if (v8 == a2) {
      return 1;
    }
  }
}

int *sub_216D721C8(int *a1, int *a2, int *a3, int *a4)
{
  BOOL result = (int *)sub_216D71BA8(a1, a2, a3);
  if (*(void *)a4 < *(void *)a3)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
    BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
    if (*(void *)a3 < *(void *)a2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
      if (*(void *)a2 < *(void *)a1)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      }
    }
  }
  return result;
}

int *sub_216D722AC(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  BOOL result = sub_216D721C8(a1, a2, a3, a4);
  if (*(void *)a5 < *(void *)a4)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a4, a5);
    BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a4 + 1, a5 + 1);
    if (*(void *)a4 < *(void *)a3)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
      BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
      if (*(void *)a3 < *(void *)a2)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
        BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
        if (*(void *)a2 < *(void *)a1)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
        }
      }
    }
  }
  return result;
}

int *sub_216D723C0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = (int *)(a1 + 8 * v10);
      do
      {
        sub_216D724E8((char *)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((int *)v6 != a3)
    {
      unint64_t v14 = (int *)v6;
      do
      {
        if (*(void *)v14 < *(void *)a1)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v14, (int *)a1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v14 + 1, (int *)(a1 + 4));
          sub_216D724E8((char *)a1, a4, v9, (int *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 9)
    {
      unint64_t v15 = (unint64_t)v8 >> 3;
      do
      {
        sub_216D72674((int *)a1, v6, a4, v15);
        v6 -= 8;
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

char *sub_216D724E8(char *result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((char *)a4 - result) >> 3)
    {
      uint64_t v9 = ((char *)a4 - result) >> 2;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = &result[8 * v9 + 8];
      uint64_t v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        unint64_t v13 = *(void *)v11;
      }
      else
      {
        unint64_t v13 = *(void *)v11;
        unint64_t v14 = *((void *)v11 + 1);
        if (*(void *)v11 <= v14) {
          unint64_t v13 = *((void *)v11 + 1);
        }
        if (*(void *)v11 < v14)
        {
          v11 += 8;
          uint64_t v10 = v12;
        }
      }
      if (v13 >= *(void *)a4)
      {
        LODWORD(v19) = *(void *)a4;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a4);
        HIDWORD(v19) = v5[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v5 + 1);
        do
        {
          unint64_t v15 = (int *)v11;
          sub_21697DE94(v5, (int *)v11);
          unint64_t v16 = (int *)(v11 + 4);
          sub_21697DEEC(v5 + 1, (int *)v11 + 1);
          if (v7 < v10) {
            break;
          }
          unint64_t v11 = &v6[8 * ((2 * v10) | 1)];
          if (2 * v10 + 2 >= a3)
          {
            unint64_t v17 = *(void *)v11;
            uint64_t v10 = (2 * v10) | 1;
          }
          else
          {
            unint64_t v17 = *(void *)v11;
            unint64_t v18 = *((void *)v11 + 1);
            if (*(void *)v11 <= v18) {
              unint64_t v17 = *((void *)v11 + 1);
            }
            if (*(void *)v11 >= v18)
            {
              uint64_t v10 = (2 * v10) | 1;
            }
            else
            {
              v11 += 8;
              uint64_t v10 = 2 * v10 + 2;
            }
          }
          unint64_t v5 = v15;
        }
        while (v17 >= v19);
        sub_21697DE94(v15, (int *)&v19);
        sub_21697DEEC(v16, (int *)&v19 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
        return (char *)sub_21697C414(&v19);
      }
    }
  }
  return result;
}

int *sub_216D72674(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    int v13 = *result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(result);
    int v14 = v7[1];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 1);
    uint64_t v8 = (int *)sub_216D727B4(v7, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = (int *)(a2 - 8);
    unint64_t v11 = v8 + 1;
    if (v8 == (int *)(a2 - 8))
    {
      sub_21697DE94(v8, &v13);
      sub_21697DEEC(v11, &v14);
    }
    else
    {
      sub_21697DE94(v8, (int *)(a2 - 8));
      uint64_t v12 = (int *)(a2 - 4);
      sub_21697DEEC(v11, v12);
      sub_21697DE94(v10, &v13);
      sub_21697DEEC(v12, &v14);
      sub_216D72860(v7, (uint64_t)(v9 + 2), a3, ((char *)(v9 + 2) - (char *)v7) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return sub_21697C414(&v13);
  }
  return result;
}

void sub_216D727A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D727B4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = (uint64_t)&a1[2 * v5 + 2];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3 && *(void *)v8 < *(void *)(v8 + 8))
    {
      v8 += 8;
      uint64_t v9 = v10;
    }
    sub_21697DE94(a1, (int *)v8);
    sub_21697DEEC(a1 + 1, (int *)(v8 + 4));
    a1 = (int *)v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

_DWORD *sub_216D72860(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = &result[2 * (v4 >> 1)];
    uint64_t v9 = (int *)(a2 - 8);
    if (*(void *)v8 < *(void *)(a2 - 8))
    {
      LODWORD(v12) = *(void *)(a2 - 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 8));
      HIDWORD(v12) = *(_DWORD *)(a2 - 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 4));
      do
      {
        uint64_t v10 = v8;
        sub_21697DE94(v9, v8);
        unint64_t v11 = v8 + 1;
        sub_21697DEEC(v9 + 1, v8 + 1);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = &v6[2 * v7];
        uint64_t v9 = v10;
      }
      while (*(void *)v8 < v12);
      sub_21697DE94(v10, (int *)&v12);
      sub_21697DEEC(v11, (int *)&v12 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
      return sub_21697C414(&v12);
    }
  }
  return result;
}

void *sub_216D7296C(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    uint64_t v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C769260;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_216D72A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D72A6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216D72ADC(v2, (tbb::internal::allocate_continuation_proxy *)a1, (void *)(a1 + 8));
  return 0;
}

uint64_t sub_216D72ADC(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, void *a3)
{
  if (a3[2] < (unint64_t)((uint64_t)(*a3 - a3[1]) >> 3))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_216D72B90(a2);
          if (a3[2] >= (unint64_t)((uint64_t)(*a3 - a3[1]) >> 3)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            return sub_216D72C64(a1, (uint64_t)a2, a3);
          }
        }
      }
    }
  }
  return sub_216D72C64(a1, (uint64_t)a2, a3);
}

uint64_t sub_216D72B90(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  uint64_t v4 = ***(uint64_t (****)(void))(sub_216D72E48(v3, (uint64_t)a1) - 40);

  return v4();
}

uint64_t sub_216D72C64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3[2] < (unint64_t)((uint64_t)(*a3 - a3[1]) >> 3) && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)uint64_t v10 = 0x10000;
    long long v11 = *(_OWORD *)a3;
    uint64_t v12 = a3[2];
    while (1)
    {
      uint64_t result = (uint64_t)sub_21692CF40(v10, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v9 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v9;
      unsigned __int8 v8 = v10[2];
      if (v10[2] < 2u)
      {
        unsigned int v7 = v10[0];
        if (v10[v10[0] + 3] < v9
          && *((void *)&v11 + 3 * v10[0] + 2) < (unint64_t)((uint64_t)(*((void *)&v11 + 3 * v10[0])
                                                                             - *((void *)&v11 + 3 * v10[0] + 1)) >> 3))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      uint64_t result = sub_216D72EC8(a2, (uint64_t)&v11 + 24 * v10[1], v10[v10[1] + 3]);
      unsigned __int8 v8 = --v10[2];
      v10[1] = (v10[1] + 1) & 7;
LABEL_11:
      if (v8)
      {
        uint64_t result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!result) {
          continue;
        }
      }
      return result;
    }
    unsigned int v7 = v10[0];
LABEL_6:
    uint64_t result = sub_216D72FF0((tbb::task *)(a2 + 32), (void *)&v11 + 3 * v7);
    unsigned __int8 v8 = --v10[2];
    v10[0] = (v10[0] - 1) & 7;
    goto LABEL_11;
  }

  return sub_216D72FF0((tbb::task *)(a2 + 32), a3);
}

uint64_t sub_216D72E48(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_26C769260;
  *(void *)(result + 8) = v2;
  unint64_t v3 = *(void *)(a2 + 16)
     + 8
     * ((((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3 < 0)) >> 1);
  *(void *)(a2 + 8) = v3;
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v4;
  *(void *)(result + 40) = v4;
  *(_DWORD *)(result + 48) = 2;
  *(unsigned char *)(result + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_216D72EC8(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)char v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C769260;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 32) = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v9;
  *(void *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v10 = ***(uint64_t (****)(void))(v7 - 40);

  return v10();
}

uint64_t sub_216D72FF0(tbb::task *a1, void *a2)
{
  uint64_t result = tbb::task::self(a1);
  unsigned int v5 = (void *)*a2;
  uint64_t v4 = (void *)a2[1];
  if (v4 != v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    do
    {
      if ((v7 & 0x3F) == 0)
      {
        uint64_t result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(v6 - 56));
        if (result) {
          break;
        }
      }
      uint64_t v8 = &v4[v7];
      if (*v8 < *(v8 - 1))
      {
        uint64_t v9 = *(tbb::task_group_context **)(v6 - 56);
        return tbb::task_group_context::cancel_group_execution(v9);
      }
      ++v7;
    }
    while (v8 + 1 != v5);
  }
  return result;
}

void sub_216D73088(long long *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 1))
  {
    v9[0] = 1;
    uint64_t v10 = 65539;
    int v11 = 49;
    tbb::task_group_context::init((uint64_t)v9, a2, a3, a4);
    uint64_t v8 = (tbb::task_group_context *)v9;
    uint64_t v5 = tbb::internal::allocate_root_with_context_proxy::allocate(&v8, 0x38uLL);
    *(unsigned char *)(v5 - 11) = 1;
    *(void *)uint64_t v5 = &unk_26C7692A8;
    long long v6 = *a1;
    *(void *)(v5 + 24) = *((void *)a1 + 2);
    *(_OWORD *)(v5 + 8) = v6;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v5);
    *(_DWORD *)(v5 + 48) = 0;
    *(unsigned char *)(v5 + 52) = 5;
    *(void *)(v5 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v5 - 40) + 16))(*(void *)(v5 - 40), v5, v5 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v9);
  }
}

void sub_216D731B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D731FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216D7326C(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

uint64_t sub_216D7326C(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) >= 0x1F4uLL)
  {
    if (*(void *)a1 <= 1uLL)
    {
      if (!*(void *)a1 || !*(unsigned char *)(a1 + 12)) {
        return sub_216D73414(a1, (uint64_t)a2, (long long *)a3);
      }
      --*(unsigned char *)(a1 + 12);
      *(void *)a1 = 0;
    }
    sub_216D73340(a2);
    if (*(void *)(a3 + 8) >= 0x1F4uLL)
    {
      do
      {
        if (*(void *)a1 <= 1uLL)
        {
          if (!*(void *)a1 || !*(unsigned char *)(a1 + 12)) {
            return sub_216D73414(a1, (uint64_t)a2, (long long *)a3);
          }
          --*(unsigned char *)(a1 + 12);
          *(void *)a1 = 0;
        }
        sub_216D73340(a2);
      }
      while (*(void *)(a3 + 8) > 0x1F3uLL);
    }
  }
  return sub_216D73414(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t sub_216D73340(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  uint64_t v4 = ***(uint64_t (****)(void))(sub_216D735E4(v3, (uint64_t)a1) - 40);

  return v4();
}

uint64_t sub_216D73414(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a3 + 1);
  if (v3 >= 0x1F4 && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)unint64_t v18 = 0x10000;
    long long v19 = *a3;
    uint64_t v20 = *((void *)a3 + 2);
    while (1)
    {
      uint64_t result = (uint64_t)sub_216D73870(v18, *(unsigned __int8 *)(a1 + 12));
      char v7 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0) {
        break;
      }
      unsigned __int8 v9 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v9;
      unsigned __int8 v10 = v18[2];
      if (v18[2] < 2u)
      {
        unsigned int v8 = v18[0];
        if (v18[v18[0] + 3] >= v9 || *((void *)&v19 + 3 * v18[0] + 1) <= 0x1F3uLL) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_216D7396C(a2, (long long *)((char *)&v19 + 24 * v18[1]), v18[v18[1] + 3]);
        unsigned __int8 v10 = --v18[2];
        v18[1] = (v18[1] + 1) & 7;
      }
LABEL_14:
      if (v10)
      {
        uint64_t result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!result) {
          continue;
        }
      }
      return result;
    }
    unsigned int v8 = v18[0];
LABEL_10:
    unint64_t v12 = *((void *)&v19 + 3 * v8 + 1);
    uint64_t v11 = *((void *)&v19 + 3 * v8 + 2);
    unint64_t v13 = 126 - 2 * __clz(v12);
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t result = sub_216D7157C(v11, (int *)(v11 + 8 * v12), (uint64_t)&v17, v14, 1);
    unsigned __int8 v10 = --v18[2];
    v18[0] = (v18[0] - 1) & 7;
    goto LABEL_14;
  }
  unint64_t v15 = 126 - 2 * __clz(v3);
  if (v3) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  return sub_216D7157C(*((void *)a3 + 2), (int *)(*((void *)a3 + 2) + 8 * v3), (uint64_t)v18, v16, 1);
}

uint64_t sub_216D735E4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C7692A8;
  uint64_t v3 = a2 + 8;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = sub_216D73674(a1 + 8, a2 + 8);
  *(void *)(a1 + 24) = *(void *)(v3 + 16) + 8 * *(void *)(v3 + 8) + 8;
  uint64_t v4 = *(void *)(v3 + 32) >> 1;
  *(void *)(v3 + 32) = v4;
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(v3 + 44);
  return a1;
}

uint64_t sub_216D73674(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v3 = *(int **)(a2 + 16);
  unint64_t v5 = v4 >> 3;
  uint64_t v6 = 2 * (v4 >> 3);
  unint64_t v7 = *(void *)v3;
  unint64_t v8 = *(void *)&v3[2 * (v4 >> 3)];
  unint64_t v9 = *(void *)&v3[4 * (v4 >> 3)];
  if (v9 >= *(void *)v3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 2 * (v4 >> 3);
  }
  if (v9 < v8) {
    uint64_t v10 = v4 >> 3;
  }
  if (v7 >= v9) {
    uint64_t v6 = 0;
  }
  if (v8 < v9) {
    uint64_t v6 = v4 >> 3;
  }
  if (v7 >= v8) {
    uint64_t v6 = v10;
  }
  uint64_t v11 = 3 * v5;
  uint64_t v12 = 4 * v5;
  uint64_t v13 = 5 * v5;
  unint64_t v14 = *(void *)&v3[6 * v5];
  unint64_t v15 = *(void *)&v3[8 * v5];
  unint64_t v16 = *(void *)&v3[10 * v5];
  if (v16 >= v14) {
    uint64_t v17 = 3 * v5;
  }
  else {
    uint64_t v17 = 5 * v5;
  }
  if (v16 < v15) {
    uint64_t v17 = 4 * v5;
  }
  if (v14 >= v16) {
    uint64_t v13 = 3 * v5;
  }
  if (v15 >= v16) {
    uint64_t v12 = v13;
  }
  if (v14 >= v15) {
    uint64_t v12 = v17;
  }
  uint64_t v18 = 7 * v5;
  unint64_t v19 = *(void *)&v3[4 * v11];
  unint64_t v20 = *(void *)&v3[2 * v18];
  unint64_t v21 = *(void *)&v3[2 * v4 - 2];
  if (v19 >= v20)
  {
    if (v21 < v20) {
      goto LABEL_31;
    }
    BOOL v22 = v21 >= v19;
  }
  else
  {
    if (v20 < v21) {
      goto LABEL_31;
    }
    BOOL v22 = v19 >= v21;
  }
  if (v22) {
    uint64_t v18 = 2 * v11;
  }
  else {
    uint64_t v18 = v4 - 1;
  }
LABEL_31:
  unint64_t v23 = *(void *)&v3[2 * v6];
  unint64_t v24 = *(void *)&v3[2 * v12];
  unint64_t v25 = *(void *)&v3[2 * v18];
  if (v25 >= v23) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = v18;
  }
  if (v25 < v24) {
    uint64_t v26 = v12;
  }
  if (v23 < v25) {
    uint64_t v6 = v18;
  }
  if (v24 < v25) {
    uint64_t v6 = v12;
  }
  if (v23 >= v24) {
    uint64_t v6 = v26;
  }
  if (v6)
  {
    long long v27 = &v3[2 * v6];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(*(int **)(a2 + 16), v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v3 + 1, v27 + 1);
    unint64_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v28 = 0;
LABEL_45:
  unint64_t v29 = *(void *)v3;
  uint64_t v30 = -8 * v4;
  do
  {
    uint64_t v31 = v4--;
    v30 += 8;
  }
  while (v29 < *(void *)&v3[2 * v31 - 2]);
  int v32 = &v3[v30 / 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v33 = v28 + 1;
  uint64_t v34 = -8 * v28;
  while (v31 != v33)
  {
    unint64_t v35 = *(void *)&v3[2 * v33++];
    v34 -= 8;
    if (v35 >= v29)
    {
      if (v31 == v33) {
        break;
      }
      int v36 = &v3[v34 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v28 = v33 - 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v3[v34 / 0xFFFFFFFFFFFFFFFCLL], v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v36 + 1, v32 + 1);
      goto LABEL_45;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v32, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v32 + 1, v3 + 1);
  uint64_t result = ~v4 + *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4;
  return result;
}

unsigned __int8 *sub_216D73870(unsigned __int8 *result, unsigned int a2)
{
  if (result[2] <= 7u)
  {
    uint64_t v3 = result;
    unint64_t v4 = result + 16;
    uint64_t v5 = *result;
    unsigned __int8 v6 = result[v5 + 3];
    do
    {
      if (a2 <= v6) {
        break;
      }
      unint64_t v7 = &v4[24 * v5];
      unint64_t v9 = *((void *)v7 + 1);
      unint64_t v8 = v7 + 8;
      if (v9 < 0x1F4) {
        break;
      }
      uint64_t v10 = &v3[v5 + 3];
      unsigned __int8 *v3 = (v5 + 1) & 7;
      uint64_t v11 = (uint64_t)&v4[24 * (((_BYTE)v5 + 1) & 7)];
      uint64_t v12 = (uint64_t)&v4[24 * v5];
      uint64_t v13 = *(void *)(v12 + 16);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(void *)(v11 + 16) = v13;
      *(void *)uint64_t v12 = *(void *)v11;
      uint64_t result = (unsigned __int8 *)sub_216D73674(v12, v11);
      *unint64_t v8 = result;
      *(void *)(v12 + 16) = *(void *)(v11 + 16) + 8 * *(void *)(v11 + 8) + 8;
      unsigned __int8 v6 = *v10 + 1;
      *uint64_t v10 = v6;
      uint64_t v5 = *v3;
      v3[v5 + 3] = v6;
      unsigned int v14 = ++v3[2];
    }
    while (v14 < 8);
  }
  return result;
}

uint64_t sub_216D7396C(uint64_t a1, long long *a2, char a3)
{
  unsigned __int8 v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)unsigned __int8 v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C7692A8;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v9;
  *(void *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v10 = ***(uint64_t (****)(void))(v7 - 40);

  return v10();
}

uint64_t sub_216D73A8C(uint64_t a1)
{
  unsigned __int8 v6 = (void **)(a1 + 1024);
  sub_216981168(&v6);
  sub_216D73B20(a1 + 464, v2);
  sub_216D6E3E8((void *)(a1 + 440));
  sub_216C7894C((void *)(a1 + 392));
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unint64_t v4 = *(atomic_ullong **)(a1 + 8);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return a1;
}

uint64_t sub_216D73B20(uint64_t a1, void *a2)
{
  return a1;
}

int *sub_216D73B54(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = (uint64_t (**)(void))&unk_26C7693B8;
  v5[1] = (uint64_t (**)(void))&v4;
  tbb::interface7::internal::isolate_within_arena(v5, 0);
  uint64_t v2 = sub_216C63148(*(int **)(a1 + 1024), *(int **)(a1 + 1032));
  return sub_216AD6870(a1 + 1024, v2, *(int **)(a1 + 1032));
}

uint64_t sub_216D73BD4(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, char a5)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v11 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v12 = *a3;
  *(void *)(a1 + 48) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v12;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  *(void *)(a1 + 416) = 0;
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = &unk_26C7692F0;
  v13[1] = a1 + 56;
  v13[2] = a1;
  *(void *)(a1 + 416) = v13;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = a4;
  *(void *)(a1 + 440) = &unk_26C768FE8;
  unint64_t v15 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v14);
  *(void *)(a1 + 448) = v15;
  bzero(v15, 0x2C0uLL);
  *(_OWORD *)(*(void *)(a1 + 448) + 256) = xmmword_21749C150;
  *(void *)(a1 + 440) = &unk_26C768F78;
  sub_216D6E158(a1 + 464, 8uLL, &v17);
  *(void *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(unsigned char *)(a1 + 1048) = a5;
  return a1;
}

void sub_216D73D60(_Unwind_Exception *a1)
{
  sub_216D6E3E8(v3);
  sub_216C7894C((void *)(v1 + 392));
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v2);
  sub_216D16AD8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216D73DAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7692F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216D73E00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7692F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216D73E38(uint64_t a1, uint64_t a2)
{
  return sub_216D73E8C((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216D73E40(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C769398)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D73E80()
{
  return &unk_26C769398;
}

uint64_t sub_216D73E8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 256);
  v8[0] = 0;
  v8[1] = v5;
  unsigned __int8 v6 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((unsigned char *)v6 - 11) = 1;
  *unsigned __int8 v6 = &unk_26C769360;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = v4 + 264;
  return (**(uint64_t (***)(void))*(v6 - 5))();
}

uint64_t sub_216D73F50(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = atomic_load(*(unint64_t **)(a1 + 16));
  sub_216D7403C(*(uint64_t **)(v2 + 8));
  unint64_t v4 = v3;
  atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(a1 + 16), &v4, 0);
  if (v4 != v3)
  {
    do
    {
      sub_216D7403C(*(uint64_t **)(v2 + 8));
      unint64_t v5 = v4;
      atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(a1 + 16), &v5, 0);
      BOOL v6 = v5 == v4;
      unint64_t v4 = v5;
    }
    while (!v6);
  }
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v8 = v11;
  unint64_t v9 = atomic_load((unint64_t *)(v7 + 144));
  if (v8 < v9
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11, (atomic_ullong *)v7))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v11, *(void *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  return 0;
}

void sub_216D74024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D7403C(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  while (sub_216D6DE20((uint64_t)(a1 + 55), &v5))
  {
    unint64_t v2 = a1[129];
    if (v2 >= a1[130])
    {
      uint64_t v3 = sub_216981B30(a1 + 128, &v5);
    }
    else
    {
      sub_216981010((_DWORD *)a1[129], &v5);
      sub_21698105C((_DWORD *)(v2 + 4), &v6);
      uint64_t v3 = v2 + 8;
    }
    a1[129] = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_216D74104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216D7411C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 8);
  sub_216D74170((void *)v1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v1);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 56));
  sub_216D6E744(*(void *)(v1 + 1024), *(int **)(v1 + 1032), (uint64_t)&v3, v2);
}

_DWORD *sub_216D74170(void *a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_216D74310((uint64_t)a1, a2);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = a1[6];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4)
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v29[0] = v5;
  v29[1] = v4;
  v29[2] = v6;
  sub_216D5BAA4((uint64_t)a2, v29, (uint64_t)&v19);
  uint64_t v14 = v19;
  sub_216981010(&v15, &v20);
  sub_21698105C(&v16, &v21);
  long long v17 = v22;
  uint64_t v18 = v23;
  uint64_t v9 = v24;
  sub_216981010(&v10, &v25);
  sub_21698105C(&v11, &v26);
  long long v12 = v27;
  uint64_t v13 = v28;
  v29[0] = (uint64_t)a1;
  sub_216D74500(&v14, (uint64_t)&v9, (uint64_t)v29, v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_21697C414(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  return sub_21697C414(&v20);
}

void sub_216D742E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_216D5BA6C((uint64_t)va);
  sub_216D5BA6C((uint64_t)va1);
  sub_216D6EB24((int *)va2);
  _Unwind_Resume(a1);
}

void sub_216D74310(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_216D6EBCC(a1 + 464, (uint64_t)a2, 0, (uint64_t)&v10);
  if ((_BYTE)v12)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::_GetRelationships(a2, 1, 0, &v16);
    uint64_t v4 = v16;
    for (uint64_t i = v17; v4 != i; v4 += 32)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 432) + 24);
      if (!v6 || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v4))
      {
        int v10 = (void **)a1;
        int v11 = *(_DWORD *)v4;
        uint64_t v7 = *(atomic_ullong **)(v4 + 8);
        uint64_t v12 = v7;
        if (v7) {
          atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed);
        }
        sub_216981010(&v13, (_DWORD *)(v4 + 16));
        sub_21698105C(&v14, (_DWORD *)(v4 + 20));
        uint64_t v8 = *(void *)(v4 + 24);
        uint64_t v15 = v8;
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v15 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v9 = sub_216D746E4(a1 + 56, (uint64_t *)&v10);
        (***(void (****)(void, uint64_t, uint64_t))(v9 - 40))(*(void *)(v9 - 40), v9, v9 - 8);
        if ((v15 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
        sub_21697C414(&v13);
        if (v12) {
          sub_216D16E0C(v12);
        }
      }
    }
    int v10 = (void **)&v16;
    sub_216D6D428(&v10);
  }
}

void sub_216D744D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  sub_216D6D428(&a9);
  _Unwind_Resume(a1);
}

void sub_216D74500(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v17[0] = 0;
  uint64_t v18 = 65539;
  int v19 = 55;
  tbb::task_group_context::init((uint64_t)v17, a2, a3, a4);
  uint64_t v12 = *a1;
  sub_216981010(&v13, (_DWORD *)a1 + 2);
  sub_21698105C(&v14, (_DWORD *)a1 + 3);
  long long v15 = *((_OWORD *)a1 + 1);
  uint64_t v16 = a1[4];
  uint64_t v7 = *(void *)a2;
  sub_216981010(&v8, (_DWORD *)(a2 + 8));
  sub_21698105C(&v9, (_DWORD *)(a2 + 12));
  long long v10 = *(_OWORD *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 32);
  sub_216D75418((uint64_t)&v12, &v7, a3, (tbb::task_group_context *)v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v17);
}

void sub_216D74648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D74688(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216D746E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  sub_216D7475C(v5, a2, a1 + 264);
  return v5;
}

void sub_216D74740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D7475C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v6 = *a2;
  *(void *)a1 = &unk_26C7693F8;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  *(void *)(a1 + 24) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 32), (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)(a1 + 36), (_DWORD *)a2 + 7);
  uint64_t v8 = a2[4];
  *(void *)(a1 + 40) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 48) = a3;
  return a1;
}

uint64_t sub_216D74820(uint64_t a1)
{
  *(void *)a1 = &unk_26C7693F8;
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  uint64_t v3 = *(atomic_ullong **)(a1 + 24);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_216D74898(void *a1)
{
  *(void *)a1 = &unk_26C7693F8;
  uint64_t v2 = *((void *)a1 + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
  sub_21697C414((_DWORD *)a1 + 8);
  uint64_t v3 = (atomic_ullong *)*((void *)a1 + 3);
  if (v3) {
    sub_216D16E0C(v3);
  }

  operator delete(a1);
}

uint64_t sub_216D74920(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216D749C8(a1[1], (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 2));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, a1[6]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216D749B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216D749C8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargets(a2, v5, 1u);
  sub_216D74A4C(a1, v5, v3, v4);
  unint64_t v6 = (void **)v5;
  sub_216981168(&v6);
}

void sub_216D74A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216D74A4C(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = (int8x16_t *)a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      uint64_t v8 = *(void *)(a1 + 448);
      unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v8 + 128), 1uLL);
      sub_216D6F71C((void *)(v8 + 40 * ((3 * (_BYTE)add) & 7) + 384), v6, add, (uint64_t *)(a1 + 440), (uint64_t (*)(void *, uint64_t))sub_216D6F6E0);
      v6 += 8;
    }
    while (v6 != v7);
    a2 = (uint64_t *)(a1 + 424);
    if (!atomic_fetch_add((atomic_ullong *volatile)(a1 + 424), 1uLL))
    {
      uint64_t v10 = *(void *)(a1 + 416);
      if (!v10) {
        sub_21683A7CC();
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
    }
  }
  if (*(unsigned char *)(a1 + 1048))
  {
    uint64_t v12 = a1;
    v17[0] = 0;
    uint64_t v18 = 65539;
    int v19 = 55;
    int8x16_t v11 = *v4;
    tbb::task_group_context::init((uint64_t)v17, (uint64_t)a2, a3, a4);
    long long v15 = &v12;
    int8x16_t v13 = vextq_s8(v11, v11, 8uLL);
    uint64_t v14 = 1;
    sub_216D74BE0(&v13, &v15, (uint64_t)&v16, (tbb::task_group_context *)v17);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v17);
  }
}

void sub_216D74BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

void *sub_216D74BE0(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    uint64_t v5 = result;
    int v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C769440;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_216D74CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D74CE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216D74D50(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

void sub_216D74D50(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) < (unint64_t)((uint64_t)(*(void *)a3 - *(void *)(a3 + 8)) >> 3))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_216D74E04(a2);
          if (*(void *)(a3 + 16) >= (unint64_t)((uint64_t)(*(void *)a3 - *(void *)(a3 + 8)) >> 3)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_216D74ED8(a1, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfPath **)a3);
}

uint64_t sub_216D74E04(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  uint64_t v4 = ***(uint64_t (****)(void))(sub_216D750A4(v3, (uint64_t)a1) - 40);

  return v4();
}

void sub_216D74ED8(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = a3[1];
  unsigned int v5 = *a3;
  if ((unint64_t)a3[2] < (*a3 - v4) >> 3 && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)uint64_t v14 = 0x10000;
    long long v15 = *(_OWORD *)a3;
    char v16 = a3[2];
    while (1)
    {
      sub_21692CF40(v14, *(unsigned __int8 *)(a1 + 12));
      char v7 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0) {
        break;
      }
      unsigned __int8 v13 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v13;
      unsigned __int8 v12 = v14[2];
      if (v14[2] < 2u)
      {
        unsigned int v8 = v14[0];
        if (v14[v14[0] + 3] >= v13
          || *((void *)&v15 + 3 * v14[0] + 2) >= (unint64_t)((uint64_t)(*((void *)&v15 + 3 * v14[0])
                                                                              - *((void *)&v15 + 3 * v14[0] + 1)) >> 3))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_216D75124(a2, (uint64_t)&v15 + 24 * v14[1], v14[v14[1] + 3]);
        unsigned __int8 v12 = --v14[2];
        v14[1] = (v14[1] + 1) & 7;
      }
LABEL_14:
      if (!v12 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v8 = v14[0];
LABEL_6:
    int v9 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&v15 + 3 * v8;
    int8x16_t v11 = *v9;
    uint64_t v10 = v9[1];
    if (v10 != *v9)
    {
      do
      {
        sub_216D7524C(*(uint64_t **)(a2 + 32), v10);
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      }
      while (v10 != v11);
      LOBYTE(v8) = v14[0];
    }
    unsigned __int8 v12 = --v14[2];
    v14[0] = (v8 - 1) & 7;
    goto LABEL_14;
  }
  while (v4 != v5)
  {
    sub_216D7524C(*(uint64_t **)(a2 + 32), v4);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
  }
}

uint64_t sub_216D750A4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)__n128 result = &unk_26C769440;
  *(void *)(result + 8) = v2;
  unint64_t v3 = *(void *)(a2 + 16)
     + 8
     * ((((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3 < 0)) >> 1);
  *(void *)(a2 + 8) = v3;
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v4;
  *(void *)(result + 40) = v4;
  *(_DWORD *)(result + 48) = 2;
  *(unsigned char *)(result + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_216D75124(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C769440;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 32) = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v9;
  *(void *)(v7 + 40) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v10 = ***(uint64_t (****)(void))(v7 - 40);

  return v10();
}

void sub_216D7524C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)*a1;
  sub_216D0162C(*a1, &v13);
  BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (!HasPrefix)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, v5, &v11);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v9);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    uint64_t v8 = v12;
    if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v13, v7))sub_216D74170(v3, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13); {
    if ((v18 & 7) != 0)
    }
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
  }
}

void sub_216D75394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_216D75418(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v14 = *(void *)a1;
  sub_216981010(&v15, (_DWORD *)(a1 + 8));
  sub_21698105C(&v16, (_DWORD *)(a1 + 12));
  long long v17 = *(_OWORD *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v9 = *a2;
  sub_216981010(&v10, (_DWORD *)a2 + 2);
  sub_21698105C(&v11, (_DWORD *)a2 + 3);
  long long v12 = *((_OWORD *)a2 + 1);
  uint64_t v13 = a2[4];
  sub_216D75534(&v14, (uint64_t)&v9, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_21697C414(&v15);
}

void sub_216D75518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

_DWORD *sub_216D75534(uint64_t *a1, uint64_t a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v18 = a3;
  uint64_t v13 = *a1;
  sub_216981010(&v14, (_DWORD *)a1 + 2);
  sub_21698105C(&v15, (_DWORD *)a1 + 3);
  long long v16 = *((_OWORD *)a1 + 1);
  uint64_t v17 = a1[4];
  uint64_t v8 = *(void *)a2;
  sub_216981010(&v9, (_DWORD *)(a2 + 8));
  sub_21698105C(&v10, (_DWORD *)(a2 + 12));
  long long v11 = *(_OWORD *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 32);
  sub_216D75648((uint64_t)&v13, &v8, (uint64_t)&v18, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  return sub_21697C414(&v14);
}

void sub_216D7562C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216D5BA6C((uint64_t)va);
  sub_216D5BA6C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D75648(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  uint64_t v8 = *(void *)a1;
  if (*(void *)a1 == *a2 && *(void *)(a1 + 8) == a2[1])
  {
    uint64_t result = sub_216D5D158(a1 + 16, (uint64_t)(a2 + 2));
    if (result) {
      return result;
    }
    uint64_t v8 = *(void *)a1;
  }
  uint64_t v15 = v8;
  sub_216981010(&v16, (_DWORD *)(a1 + 8));
  sub_21698105C(&v17, (_DWORD *)(a1 + 12));
  long long v18 = *(_OWORD *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v10 = *a2;
  sub_216981010(&v11, (_DWORD *)a2 + 2);
  sub_21698105C(&v12, (_DWORD *)a2 + 3);
  long long v13 = *((_OWORD *)a2 + 1);
  uint64_t v14 = a2[4];
  sub_216D757AC(&v15, (uint64_t)&v10, a3, (uint64_t)sub_216D758C8, 0, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  return (uint64_t)sub_21697C414(&v16);
}

void sub_216D75790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

_DWORD *sub_216D757AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, tbb::task_group_context *a6)
{
  uint64_t v16 = *a1;
  sub_216981010(&v17, (_DWORD *)a1 + 2);
  sub_21698105C(&v18, (_DWORD *)a1 + 3);
  long long v19 = *((_OWORD *)a1 + 1);
  uint64_t v20 = a1[4];
  uint64_t v11 = *(void *)a2;
  sub_216981010(&v12, (_DWORD *)(a2 + 8));
  sub_21698105C(&v13, (_DWORD *)(a2 + 12));
  long long v14 = *(_OWORD *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 32);
  sub_216D758D4((uint64_t)&v16, &v11, a3, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_21697C414(&v17);
}

void sub_216D758AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_216D758C8(uint64_t **a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
}

uint64_t sub_216D758D4(uint64_t a1, uint64_t *a2, uint64_t a3, tbb::task_group_context *a4)
{
  v22[0] = &unk_26C769488;
  uint64_t v24 = a4;
  uint64_t v7 = (tbb::internal::allocate_child_proxy *)tbb::internal::allocate_root_with_context_proxy::allocate(&v24, 8uLL);
  *((unsigned char *)v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C746C48;
  v22[1] = a3;
  uint64_t v23 = v7;
  uint64_t v8 = tbb::internal::allocate_child_proxy::allocate(v7, 0x60uLL);
  uint64_t v17 = *(void *)a1;
  sub_216981010(&v18, (_DWORD *)(a1 + 8));
  sub_21698105C(&v19, (_DWORD *)(a1 + 12));
  long long v20 = *(_OWORD *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v12 = *a2;
  sub_216981010(&v13, (_DWORD *)a2 + 2);
  sub_21698105C(&v14, (_DWORD *)a2 + 3);
  long long v15 = *((_OWORD *)a2 + 1);
  uint64_t v16 = a2[4];
  sub_216D75F64(v8, &v17, (uint64_t)&v12, (uint64_t)v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_21697C414(&v18);
  int v9 = v23;
  *((void *)v23 - 3) = 2;
  (*(void (**)(void, tbb::internal::allocate_child_proxy *, uint64_t))(**((void **)v9 - 5) + 8))(*((void *)v9 - 5), v9, v8);
  return sub_216D76714((uint64_t)v22, v10);
}

void sub_216D75A6C(_Unwind_Exception *a1, tbb::task *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_216D76714((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_216D75A84(uint64_t a1, tbb::task *a2)
{
  uint64_t v2 = (void *)sub_216D76714(a1, a2);

  operator delete(v2);
}

uint64_t sub_216D75AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v8[0] = 0;
  v8[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x30uLL);
  uint64_t v6 = **(uint64_t (****)(void))(sub_216D75ED0(v5, a2, a1) - 40);
  return (*v6)();
}

uint64_t sub_216D75B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x30uLL);
  sub_216D75BF0(v5, a2, a1);
  return (***(uint64_t (****)(void, uint64_t, uint64_t))(v5 - 40))(*(void *)(v5 - 40), v5, v5 - 8);
}

void sub_216D75BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D75BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C7694D0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_216D75CB0(uint64_t a1)
{
  *(void *)a1 = &unk_26C7694D0;
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_216D75D28(void *a1)
{
  *(void *)a1 = &unk_26C7694D0;
  uint64_t v2 = *((void *)a1 + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_21697C414((_DWORD *)a1 + 6);
  uint64_t v3 = (atomic_ullong *)*((void *)a1 + 2);
  if (v3) {
    sub_216D16E0C(v3);
  }

  operator delete(a1);
}

uint64_t sub_216D75DB0(uint64_t a1)
{
  return 0;
}

void sub_216D75DF4(uint64_t **a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (atomic_ullong *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  int v6 = a2[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2 + 4);
  int v7 = a2[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 5);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  sub_216D74310(**a1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D75EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D75ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C7694D0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 32) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 40) = a3;
  return a1;
}

uint64_t sub_216D75F64(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v8 = *a2;
  *(void *)a1 = &unk_26C769518;
  *(void *)(a1 + 8) = v8;
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)a2 + 2);
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)a2 + 3);
  long long v9 = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 40) = a2[4];
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 48) = *(void *)a3;
  sub_216981010((_DWORD *)(a1 + 56), (_DWORD *)(a3 + 8));
  sub_21698105C((_DWORD *)(a1 + 60), (_DWORD *)(a3 + 12));
  uint64_t v10 = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = a4;
  return a1;
}

uint64_t sub_216D76014(uint64_t a1)
{
  *(void *)a1 = &unk_26C769518;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void sub_216D76078(_DWORD *a1)
{
  *(void *)a1 = &unk_26C769518;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_21697C414(a1 + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);

  operator delete(a1);
}

uint64_t sub_216D760F0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v13 = *(void *)(a1 + 8);
  sub_216981010(&v14, (_DWORD *)(a1 + 16));
  sub_21698105C(&v15, (_DWORD *)(v2 + 12));
  uint64_t v3 = 0;
  long long v16 = *(_OWORD *)(v2 + 16);
  uint64_t v17 = *(void *)(v2 + 32);
  while (*(void *)(a1 + 8) != *(void *)(a1 + 48)
       || *(void *)(a1 + 16) != *(void *)(a1 + 56)
       || (sub_216D5D158(v2 + 16, v2 + 56) & 1) == 0)
  {
    sub_216D5D974(v2);
    if (++v3 == 4)
    {
      if (*(void *)(a1 + 8) != *(void *)(a1 + 48)
        || *(void *)(a1 + 16) != *(void *)(a1 + 56)
        || (sub_216D5D158(v2 + 16, v2 + 56) & 1) == 0)
      {
        *(unsigned char *)(a1 - 12) = 1;
      }
      uint64_t v3 = 4;
      goto LABEL_11;
    }
  }
  if (v3)
  {
LABEL_11:
    uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 16);
    v12[0] = 0;
    v12[1] = v4;
    uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v12, 0x40uLL);
    uint64_t v7 = v13;
    sub_216981010(&v8, &v14);
    sub_21698105C(&v9, &v15);
    long long v10 = v16;
    uint64_t v11 = v17;
    sub_216D762BC(v5, (uint64_t)&v7, v3, *(void *)(a1 + 88));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    goto LABEL_12;
  }
  uint64_t v5 = 0;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  return v5;
}

void sub_216D762A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216D5BA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D762BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C769560;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = *(void *)a2;
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 8));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 12));
  uint64_t v7 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = a3;
  return a1;
}

uint64_t sub_216D76340(uint64_t a1)
{
  *(void *)a1 = &unk_26C769560;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  return a1;
}

void sub_216D76390(_DWORD *a1)
{
  *(void *)a1 = &unk_26C769560;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_21697C414(a1 + 6);

  operator delete(a1);
}

uint64_t sub_216D763F0(uint64_t *a1)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v2 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)a1, 0x38uLL);
  sub_216D76530(v2, a1 + 2, a1[1]);
  sub_216D5D974((uint64_t)(a1 + 2));
  if (a1[7] == 1)
  {
    int v3 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      *(void *)(v2 - 8) = 0;
      *int v8 = v2;
      int v8 = (uint64_t *)(v2 - 8);
      uint64_t v2 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)a1, 0x38uLL);
      sub_216D76530(v2, a1 + 2, a1[1]);
      sub_216D5D974((uint64_t)(a1 + 2));
      int v3 = v4 + 1;
      uint64_t v5 = v4 + 2;
      ++v4;
    }
    while (v5 != a1[7]);
  }
  *(a1 - 3) = v3 + 2;
  if (v7)
  {
    (***(void (****)(void, uint64_t, uint64_t *))(v7 - 40))(*(void *)(v7 - 40), v7, v8);
    uint64_t v7 = 0;
    int v8 = &v7;
  }
  (*(void (**)(void, uint64_t *, uint64_t))(*(void *)*(a1 - 5) + 8))(*(a1 - 5), a1, v2);
  return 0;
}

uint64_t sub_216D76530(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v6 = *a2;
  *(void *)a1 = &unk_26C7695A8;
  *(void *)(a1 + 8) = v6;
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)a2 + 2);
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)a2 + 3);
  uint64_t v7 = a2[4];
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = a3;
  return a1;
}

uint64_t sub_216D765AC(uint64_t a1)
{
  *(void *)a1 = &unk_26C7695A8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void sub_216D765FC(_DWORD *a1)
{
  *(void *)a1 = &unk_26C7695A8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);

  operator delete(a1);
}

uint64_t sub_216D7665C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(*(void *)(a1 + 48) + 8);
  sub_216D5DD48(a1 + 8, (uint64_t)&v3);
  sub_216D75DF4(v1, &v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return 0;
}

void sub_216D76700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D76714(uint64_t a1, tbb::task *a2)
{
  *(void *)a1 = &unk_26C769488;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

uint64_t sub_216D76760(uint64_t a1)
{
  int v6 = (void **)(a1 + 1024);
  sub_216981168(&v6);
  sub_216D73B20(a1 + 464, v2);
  sub_216D6E3E8((void *)(a1 + 440));
  sub_216C7894C((void *)(a1 + 392));
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v4 = *(atomic_ullong **)(a1 + 8);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return a1;
}

void sub_216D767F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7695F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216D76814(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7695F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216D76858(uint64_t a1)
{
  return sub_216D76884((uint64_t)&v2, a1 + 24);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216D76884(uint64_t a1, uint64_t a2)
{
  sub_2168BBAAC((void ***)(a2 + 32), 0);
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    operator delete(v3);
  }

  return sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2);
}

uint64_t sub_216D768D4(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    long long v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_216D76CBC(a3, (uint64_t)(a2 - 4), (uint64_t)v11);
          if (result)
          {
            uint64_t result = (uint64_t)sub_216C12838(v11, a2 - 4);
          }
          break;
        case 3uLL:
          uint64_t result = sub_216D76F70(v11, v11 + 4, a2 - 4, a3);
          break;
        case 4uLL:
          uint64_t result = (uint64_t)sub_216D7759C(v11, v11 + 4, v11 + 8, a2 - 4, a3);
          break;
        case 5uLL:
          uint64_t result = (uint64_t)sub_216D77664(v11, v11 + 4, v11 + 8, v11 + 12, a2 - 4, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_216D77750(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_216D76F70(v11, &v11[4 * (v15 >> 1)], a2 - 4, a3);
      sub_216D76F70(v11 + 4, v17 - 4, a2 - 8, a3);
      sub_216D76F70(v11 + 8, &v11[4 * v16 + 4], a2 - 12, a3);
      sub_216D76F70(v17 - 4, v17, &v11[4 * v16 + 4], a3);
      sub_216C12838(v11, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_216D76F70(&v11[4 * (v15 >> 1)], v11, a2 - 4, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((sub_216D76CBC(a3, (uint64_t)(v11 - 4), (uint64_t)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_216D7704C(v11, a2, a3);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    int v18 = sub_216D771D0(v11, (unint64_t)a2, a3);
    if ((v19 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v20 = sub_216D77364(v11, v18, a3);
    uint64_t v11 = v18 + 4;
    uint64_t result = sub_216D77364(v18 + 4, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_17:
      uint64_t result = sub_216D768D4(v10, v18, a3, -v13, a5 & 1);
      uint64_t v11 = v18 + 4;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_216D76D30((uint64_t)v11, a2, a3);
  }
  else
  {
    return sub_216D76E64((uint64_t)v11, a2, a3);
  }
}

uint64_t sub_216D76CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3))return 1; {
  if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2))return 0;
  }

  return sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 8));
}

uint64_t sub_216D76D30(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v4 = (int *)result;
    uint64_t v5 = result + 16;
    if ((_DWORD *)(result + 16) != a2)
    {
      uint64_t v7 = 0;
      int v8 = (_DWORD *)result;
      do
      {
        uint64_t v9 = (uint64_t)v8;
        int v8 = (_DWORD *)v5;
        uint64_t result = sub_216D76CBC(a3, v5, v9);
        if (result)
        {
          sub_2169DC194(&v13, v8);
          uint64_t v10 = v7;
          while (1)
          {
            sub_216C10D00((int *)((char *)v4 + v10 + 16), (int *)((char *)v4 + v10));
            if (!v10) {
              break;
            }
            char v11 = sub_216D76CBC(a3, (uint64_t)&v13, (uint64_t)v4 + v10 - 16);
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = (int *)((char *)v4 + v10 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v12 = v4;
LABEL_10:
          sub_216C10D00(v12, &v13);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
          sub_21697C414(&v15);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
          uint64_t result = (uint64_t)sub_21697C414(&v13);
        }
        uint64_t v5 = (uint64_t)(v8 + 4);
        v7 += 16;
      }
      while (v8 + 4 != a2);
    }
  }
  return result;
}

void sub_216D76E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

uint64_t sub_216D76E64(uint64_t result, int *a2, uint64_t a3)
{
  if ((int *)result != a2)
  {
    uint64_t v4 = (int *)result;
    uint64_t v5 = result + 16;
    if ((int *)(result + 16) != a2)
    {
      do
      {
        uint64_t v7 = (int *)v5;
        uint64_t result = sub_216D76CBC(a3, v5, (uint64_t)v4);
        if (result)
        {
          sub_2169DC194(&v8, v7);
          do
          {
            sub_216C10D00(v4 + 4, v4);
            v4 -= 4;
          }
          while ((sub_216D76CBC(a3, (uint64_t)&v8, (uint64_t)v4) & 1) != 0);
          sub_216C10D00(v4 + 4, &v8);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
          sub_21697C414(&v10);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
          uint64_t result = (uint64_t)sub_21697C414(&v8);
        }
        uint64_t v5 = (uint64_t)(v7 + 4);
        uint64_t v4 = v7;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

void sub_216D76F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

uint64_t sub_216D76F70(int *a1, int *a2, int *a3, uint64_t a4)
{
  char v8 = sub_216D76CBC(a4, (uint64_t)a2, (uint64_t)a1);
  uint64_t result = sub_216D76CBC(a4, (uint64_t)a3, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    sub_216C12838(a2, a3);
    if (!sub_216D76CBC(a4, (uint64_t)a2, (uint64_t)a1)) {
      return 1;
    }
    int v10 = a1;
    int v11 = a2;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_216C12838(a1, a2);
    if (!sub_216D76CBC(a4, (uint64_t)a3, (uint64_t)a2)) {
      return 1;
    }
    int v10 = a2;
    int v11 = a3;
LABEL_9:
    sub_216C12838(v10, v11);
    return 2;
  }
  sub_216C12838(a1, a3);
  return 1;
}

int *sub_216D7704C(int *a1, int *a2, uint64_t a3)
{
  sub_2169DC194(&v10, a1);
  if (sub_216D76CBC(a3, (uint64_t)&v10, (uint64_t)(a2 - 4)))
  {
    char v6 = a1;
    do
      v6 += 4;
    while ((sub_216D76CBC(a3, (uint64_t)&v10, (uint64_t)v6) & 1) == 0);
  }
  else
  {
    unint64_t v7 = (unint64_t)(a1 + 4);
    do
    {
      char v6 = (int *)v7;
      if (v7 >= (unint64_t)a2) {
        break;
      }
      int v8 = sub_216D76CBC(a3, (uint64_t)&v10, v7);
      unint64_t v7 = (unint64_t)(v6 + 4);
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 4;
    while ((sub_216D76CBC(a3, (uint64_t)&v10, (uint64_t)a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    sub_216C12838(v6, a2);
    do
      v6 += 4;
    while (!sub_216D76CBC(a3, (uint64_t)&v10, (uint64_t)v6));
    do
      a2 -= 4;
    while ((sub_216D76CBC(a3, (uint64_t)&v10, (uint64_t)a2) & 1) != 0);
  }
  if (v6 - 4 != a1) {
    sub_216C10D00(a1, v6 - 4);
  }
  sub_216C10D00(v6 - 4, &v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  return v6;
}

void sub_216D771A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

int *sub_216D771D0(int *a1, unint64_t a2, uint64_t a3)
{
  sub_2169DC194(&v13, a1);
  uint64_t v6 = 0;
  do
  {
    char v7 = sub_216D76CBC(a3, (uint64_t)&a1[v6 + 4], (uint64_t)&v13);
    v6 += 4;
  }
  while ((v7 & 1) != 0);
  int v8 = &a1[v6];
  if (v6 == 4)
  {
    do
    {
      if ((unint64_t)v8 >= a2) {
        break;
      }
      a2 -= 16;
    }
    while ((sub_216D76CBC(a3, a2, (uint64_t)&v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!sub_216D76CBC(a3, a2, (uint64_t)&v13));
  }
  if ((unint64_t)v8 >= a2)
  {
    int v11 = v8 - 4;
  }
  else
  {
    int v9 = &a1[v6];
    int v10 = (int *)a2;
    do
    {
      sub_216C12838(v9, v10);
      do
        v9 += 4;
      while ((sub_216D76CBC(a3, (uint64_t)v9, (uint64_t)&v13) & 1) != 0);
      do
        v10 -= 4;
      while (!sub_216D76CBC(a3, (uint64_t)v10, (uint64_t)&v13));
    }
    while (v9 < v10);
    int v11 = v9 - 4;
  }
  if (v11 != a1) {
    sub_216C10D00(a1, v11);
  }
  sub_216C10D00(v11, &v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  return v11;
}

void sub_216D77340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

BOOL sub_216D77364(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 4;
      if (sub_216D76CBC(a3, (uint64_t)(a2 - 4), (uint64_t)a1)) {
        sub_216C12838(a1, v8);
      }
      return 1;
    case 3:
      sub_216D76F70(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      sub_216D7759C(a1, a1 + 4, a1 + 8, a2 - 4, a3);
      return 1;
    case 5:
      sub_216D77664(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      uint64_t v9 = (uint64_t)(a1 + 8);
      sub_216D76F70(a1, a1 + 4, a1 + 8, a3);
      int v10 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_216D76CBC(a3, (uint64_t)v10, v9))
    {
      sub_2169DC194(&v16, v10);
      uint64_t v13 = v11;
      while (1)
      {
        sub_216C10D00((int *)((char *)a1 + v13 + 48), (int *)((char *)a1 + v13 + 32));
        if (v13 == -32) {
          break;
        }
        char v14 = sub_216D76CBC(a3, (uint64_t)&v16, (uint64_t)a1 + v13 + 16);
        v13 -= 16;
        if ((v14 & 1) == 0)
        {
          int v15 = (int *)((char *)a1 + v13 + 48);
          goto LABEL_12;
        }
      }
      int v15 = a1;
LABEL_12:
      sub_216C10D00(v15, &v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      ++v12;
      sub_21697C414(&v16);
      if (v12 == 8) {
        return v10 + 4 == a2;
      }
    }
    uint64_t v9 = (uint64_t)v10;
    v11 += 16;
    v10 += 4;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_216D77570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169CFB98((int *)va);
  _Unwind_Resume(a1);
}

int *sub_216D7759C(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  sub_216D76F70(a1, a2, a3, a5);
  BOOL result = (int *)sub_216D76CBC(a5, (uint64_t)a4, (uint64_t)a3);
  if (result)
  {
    sub_216C12838(a3, a4);
    BOOL result = (int *)sub_216D76CBC(a5, (uint64_t)a3, (uint64_t)a2);
    if (result)
    {
      sub_216C12838(a2, a3);
      BOOL result = (int *)sub_216D76CBC(a5, (uint64_t)a2, (uint64_t)a1);
      if (result)
      {
        return sub_216C12838(a1, a2);
      }
    }
  }
  return result;
}

int *sub_216D77664(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  sub_216D7759C(a1, a2, a3, a4, a6);
  BOOL result = (int *)sub_216D76CBC(a6, (uint64_t)a5, (uint64_t)a4);
  if (result)
  {
    sub_216C12838(a4, a5);
    BOOL result = (int *)sub_216D76CBC(a6, (uint64_t)a4, (uint64_t)a3);
    if (result)
    {
      sub_216C12838(a3, a4);
      BOOL result = (int *)sub_216D76CBC(a6, (uint64_t)a3, (uint64_t)a2);
      if (result)
      {
        sub_216C12838(a2, a3);
        BOOL result = (int *)sub_216D76CBC(a6, (uint64_t)a2, (uint64_t)a1);
        if (result)
        {
          return sub_216C12838(a1, a2);
        }
      }
    }
  }
  return result;
}

int *sub_216D77750(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[4 * v10];
      do
      {
        sub_216D7786C((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((int *)v6 != a3)
    {
      char v14 = (int *)v6;
      do
      {
        if (sub_216D76CBC(a4, (uint64_t)v14, (uint64_t)a1))
        {
          sub_216C12838(v14, a1);
          sub_216D7786C((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 17)
    {
      unint64_t v15 = (unint64_t)v8 >> 4;
      do
      {
        sub_216D779F0(a1, v6, a4, v15);
        v6 -= 16;
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

uint64_t sub_216D7786C(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 3;
      uint64_t v11 = v10 + 1;
      int v12 = (int *)(result + 16 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_216D76CBC(a2, result + 16 * (v10 + 1), (uint64_t)(v12 + 4)))
      {
        v12 += 4;
        uint64_t v11 = v13;
      }
      BOOL result = sub_216D76CBC(a2, (uint64_t)v12, (uint64_t)v5);
      if ((result & 1) == 0)
      {
        sub_2169DC194(&v16, v5);
        do
        {
          char v14 = v12;
          sub_216C10D00(v5, v12);
          if (v7 < v11) {
            break;
          }
          uint64_t v15 = (2 * v11) | 1;
          int v12 = (int *)(v6 + 16 * v15);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v15;
          }
          else if (sub_216D76CBC(a2, v6 + 16 * v15, (uint64_t)(v12 + 4)))
          {
            v12 += 4;
          }
          else
          {
            uint64_t v11 = v15;
          }
          uint64_t v5 = v14;
        }
        while (!sub_216D76CBC(a2, (uint64_t)v12, (uint64_t)&v16));
        sub_216C10D00(v14, &v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_21697C414(&v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        return (uint64_t)sub_21697C414(&v16);
      }
    }
  }
  return result;
}

void sub_216D779DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

int *sub_216D779F0(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    sub_2169DC194(&v11, result);
    uint64_t v8 = sub_216D77AE4(v7, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = (int *)(a2 - 16);
    if (v8 == v10)
    {
      sub_216C10D00(v8, &v11);
    }
    else
    {
      sub_216C10D00(v8, v10);
      sub_216C10D00(v10, &v11);
      sub_216D77B98(v7, (uint64_t)(v9 + 4), a3, ((char *)(v9 + 4) - (char *)v7) >> 4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    return sub_21697C414(&v11);
  }
  return result;
}

void sub_216D77AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

int *sub_216D77AE4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[4 * v6 + 4];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && sub_216D76CBC(a2, (uint64_t)&a1[4 * v6 + 4], (uint64_t)&a1[4 * v6 + 8]))
    {
      v9 += 4;
      uint64_t v10 = v11;
    }
    sub_216C10D00(a1, v9);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_DWORD *sub_216D77B98(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = &result[4 * (v4 >> 1)];
    uint64_t v9 = (int *)(a2 - 16);
    BOOL result = (_DWORD *)sub_216D76CBC(a3, (uint64_t)v8, a2 - 16);
    if (result)
    {
      sub_2169DC194(&v11, v9);
      do
      {
        uint64_t v10 = v8;
        sub_216C10D00(v9, v8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = &v6[4 * v7];
        uint64_t v9 = v10;
      }
      while ((sub_216D76CBC(a3, (uint64_t)v8, (uint64_t)&v11) & 1) != 0);
      sub_216C10D00(v10, &v11);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_21697C414(&v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
      return sub_21697C414(&v11);
    }
  }
  return result;
}

void sub_216D77C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::UsdPrimCompositionQueryArc(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)a2;
  *((void *)this + 4) = 0;
  unint64_t v4 = (_OWORD *)((char *)this + 32);
  *((_OWORD *)this + 1) = v3;
  *((void *)this + 5) = -1;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (*(void *)this && *((void *)this + 1) != -1
    || (v13[0] = "usd/primCompositionQuery.cpp",
        v13[1] = "UsdPrimCompositionQueryArc",
        v13[2] = 42,
        void v13[3] = "pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::UsdPrimCompositionQueryArc(const PcpNodeRef &)",
        char v14 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "_node", 0) & 1) != 0))
  {
    *((_OWORD *)this + 1) = *(_OWORD *)this;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
    {
      *unint64_t v4 = *(_OWORD *)this;
    }
    else
    {
      uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
      uint64_t v7 = v6;
      uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
      if (v7 != v9 || OriginNode != ParentNode)
      {
        *((void *)this + 2) = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode(this);
        *((void *)this + 3) = v10;
      }
      *((void *)this + 4) = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 16));
      *((void *)this + 5) = v11;
    }
  }
  return this;
}

void sub_216D77D9C(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetTargetNode(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  return *(void *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingNode(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  return *((void *)this + 4);
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetTargetLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, void *a2@<X8>)
{
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  BOOL result = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v4);
  uint64_t v6 = result[1];
  *a2 = *result;
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetTargetPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, _DWORD *a2@<X8>)
{
  Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  sub_216981010(a2, Path);

  return sub_21698105C(a2 + 1, Path + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetUpTo@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_21697CF14(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
    uint64_t v9 = sub_216BBBFA8(LayerStack);
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v9, a2))
    {
      return pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, (char *)a1 + 48, a1, a2);
    }
    long long v22 = "usd/primCompositionQuery.cpp";
    uint64_t v23 = "MakeResolveTargetUpTo";
    uint64_t v24 = 149;
    int v25 = "UsdResolveTarget pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetUpTo(const Sdf"
          "LayerHandle &) const";
    char v26 = 0;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
    int v13 = *(char *)(Identifier + 23);
    char v14 = *(const char **)Identifier;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a1, (uint64_t)&v17);
    sub_216C26D48((uint64_t *)&v17);
    if (v13 >= 0) {
      uint64_t v15 = (const char *)Identifier;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v21 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer '%s' is not a layer in the layer stack of the node site '%s'", v15, p_p);
    if (v21 < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    sub_216BBEEA4(&v17);
  }
  long long v22 = 0;
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, (char *)a1 + 48, a1, &v22);
  uint64_t result = (uint64_t)v23;
  if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216D7802C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_216BC9108((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetStrongerThan@<X0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(a1);
  v31[0] = v6;
  v31[1] = v7;
  uint64_t v8 = sub_21697CF14(a2);
  if (v9 & 1 | (unint64_t)v8)
  {
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
    uint64_t v11 = sub_216BBBFA8(LayerStack);
    if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v11, a2))
    {
      char v26 = 0;
      long long v27 = 0;
      pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, a1 + 6, v31, &v26, a1, a2);
      goto LABEL_16;
    }
    char v26 = "usd/primCompositionQuery.cpp";
    long long v27 = "MakeResolveTargetStrongerThan";
    uint64_t v28 = 168;
    unint64_t v29 = "UsdResolveTarget pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::MakeResolveTargetStrongerThan(c"
          "onst SdfLayerHandle &) const";
    char v30 = 0;
    int v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
    int v14 = *(char *)(Identifier + 23);
    uint64_t v15 = *(const char **)Identifier;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1, (uint64_t)&v20);
    sub_216C26D48((uint64_t *)&v20);
    if (v14 >= 0) {
      int v16 = (const char *)Identifier;
    }
    else {
      int v16 = v15;
    }
    if (v25 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer '%s' is not a layer in the layer stack of the node site '%s'", v16, p_p);
    if (v25 < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    sub_216BBEEA4(&v20);
  }
  char v26 = 0;
  long long v27 = 0;
  std::string __p = 0;
  uint64_t v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(a3, a1 + 6, v31, &v26, a1, &__p);
  uint64_t v18 = v24;
  if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_16:
  uint64_t result = (uint64_t)v27;
  if (v27)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)v27 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216D78264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_216BC9108((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, void *a2@<X8>)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(&v10, 0.0, 1.0);
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits;
  switch(ArcType)
  {
    case 1:
      goto LABEL_6;
    case 2:
      sub_216D78C14(this);
    case 4:
      sub_216D78498(this);
    case 5:
      sub_216D78714(this);
    case 6:
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes;
LABEL_6:
      if (!sub_216D789AC(this, (void (*)(uint64_t, int *, uint64_t *, uint64_t *))v5, (uint64_t)&v8, 0))goto LABEL_9; {
      uint64_t v6 = v9;
      }
      *a2 = v8;
      a2[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      }
      break;
    default:
LABEL_9:
      *a2 = 0;
      a2[1] = 0;
      break;
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  uint64_t result = v9;
  if (v9)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216D78424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216D78498(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  long long v3 = *((_OWORD *)a1 + 2);
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v3);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v4);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(LayerStack);
}

void sub_216D786C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_2169CC68C(&a9);
  a9 = (void **)&a18;
  sub_216C29988(&a9);
  _Unwind_Resume(a1);
}

void sub_216D78714(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  long long v3 = *((_OWORD *)a1 + 2);
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v3);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v4);
  pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(LayerStack);
}

void sub_216D78958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_2169CC78C(&a9);
  a9 = (void **)&a18;
  sub_216C29988(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D789AC(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1, void (*a2)(uint64_t, int *, uint64_t *, uint64_t *), uint64_t a3, int *a4)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  long long v17 = *((_OWORD *)a1 + 2);
  uint64_t LayerStack = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v17);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v21);
  a2(LayerStack, &v21, &v23, &v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (0x6DB6DB6DB6DB6DB7 * ((v27 - v26) >> 3) != (v24 - v23) >> 3)
  {
    *(void *)&long long v17 = "usd/primCompositionQuery.cpp";
    *((void *)&v17 + 1) = "_GetIntroducingComposeInfo";
    uint64_t v18 = 104;
    int v19 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfPath]";
    char v20 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "result.size() == info.size()", 0) & 1) == 0) {
      goto LABEL_9;
    }
  }
  long long v17 = *(_OWORD *)a1;
  int SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v17);
  uint64_t v10 = v26;
  if (0x6DB6DB6DB6DB6DB7 * ((v27 - v26) >> 3) <= (unint64_t)SiblingNumAtOrigin)
  {
    *(void *)&long long v17 = "usd/primCompositionQuery.cpp";
    *((void *)&v17 + 1) = "_GetIntroducingComposeInfo";
    uint64_t v18 = 113;
    int v19 = "BOOL pxrInternal__aapl__pxrReserved__::_GetIntroducingComposeInfo(const UsdPrimCompositionQueryArc &, _PcpComp"
          "oseFunc<ResultType>, PcpSourceArcInfo *, ResultType *) [ResultType = pxrInternal__aapl__pxrReserved__::SdfPath]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Node sibling number of target node is out of range introducing composed list op");
LABEL_9:
    uint64_t v15 = 0;
    goto LABEL_10;
  }
  uint64_t v11 = SiblingNumAtOrigin;
  if (a3)
  {
    uint64_t v12 = v26 + 56 * SiblingNumAtOrigin;
    *(void *)a3 = *(void *)v12;
    sub_2168CD2FC((atomic_uint **)(a3 + 8), (atomic_uint **)(v12 + 8));
    uint64_t v13 = v10 + 56 * (int)v11;
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v13 + 16);
    std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v13 + 32));
  }
  if (a4)
  {
    int v14 = (_DWORD *)(v23 + 8 * v11);
    sub_2169C487C(a4, v14);
    sub_2169C48D4(a4 + 1, v14 + 1);
  }
  uint64_t v15 = 1;
LABEL_10:
  *(void *)&long long v17 = &v23;
  sub_216981168((void ***)&v17);
  *(void *)&long long v17 = &v26;
  sub_216C29988((void ***)&v17);
  return v15;
}

void sub_216D78BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_216981168(&a9);
  a9 = (void **)&a18;
  sub_216C29988(&a9);
  _Unwind_Resume(a1);
}

void sub_216D78C14(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  long long v2 = *((_OWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v2);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v3);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSets();
}

void sub_216D78E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a15;
  sub_216782F20(&a9);
  a9 = (void **)&a18;
  sub_216C29988(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D78E7C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  long long v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this@<X0>, int *a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this))
  {
    *(void *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetIntroPath((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 16), a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 4)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v5, 0.0, 1.0);
    std::string __p = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    sub_216D78498(a1);
  }
  int v3 = "usd/primCompositionQuery.cpp";
  uint64_t v4 = "GetIntroducingListEditor";
  *(void *)&v5[0] = 243;
  *(void *)&v5[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(SdfRef"
                      "erenceEditorProxy *, SdfReference *) const";
  LOBYTE(__p) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a reference list editor and reference for arc types other than PcpArcTypeReference");
  return 0;
}

{
  char *v3;
  const char *v4;
  double v5[2];
  void *__p;
  uint64_t v7;
  uint64_t v8;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 5)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v5, 0.0, 1.0);
    std::string __p = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    sub_216D78714(a1);
  }
  int v3 = "usd/primCompositionQuery.cpp";
  uint64_t v4 = "GetIntroducingListEditor";
  *(void *)&v5[0] = 268;
  *(void *)&v5[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(SdfPay"
                      "loadEditorProxy *, SdfPayload *) const";
  LOBYTE(__p) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a payload list editor and payload for arc types other than PcpArcTypePayload");
  return 0;
}

{
  char *v3;
  const char *v4;
  double v5[2];
  void *__p;
  uint64_t v7;
  uint64_t v8;

  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 2)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v5, 0.0, 1.0);
    std::string __p = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    sub_216D78C14(a1);
  }
  int v3 = "usd/primCompositionQuery.cpp";
  uint64_t v4 = "GetIntroducingListEditor";
  *(void *)&v5[0] = 327;
  *(void *)&v5[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(SdfNam"
                      "eEditorProxy *, std::string *) const";
  LOBYTE(__p) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a name list editor and name for arc types other than PcpArcTypeVariant");
  return 0;
}

void sub_216D790E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216D78E7C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D79158@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingPrimPath(a1, &v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_21697C414(&v7);
}

void sub_216D791CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216D79358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216D78E7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, int *a3)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) != 1
    && pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) != 6)
  {
    int v16 = "usd/primCompositionQuery.cpp";
    long long v17 = "GetIntroducingListEditor";
    *(void *)&v18[0] = 295;
    *(void *)&v18[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::GetIntroducingListEditor(Sdf"
                         "PathEditorProxy *, SdfPath *) const";
    LOBYTE(__p) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot retrieve a path list editor and path for arc types other than PcpArcTypeInherit and PcpArcTypeSpecialize");
    return 0;
  }
  int v16 = 0;
  long long v17 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v18, 0.0, 1.0);
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) == 1)
  {
    if (sub_216D789AC(a1, (void (*)(uint64_t, int *, uint64_t *, uint64_t *))pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits, (uint64_t)&v16, a3))
    {
      sub_216D79158(a1, (uint64_t *)&v16, &v14);
      uint64_t v6 = (atomic_uint **)sub_216A663FC(&v14);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(v6, &v15);
      goto LABEL_8;
    }
  }
  else if (sub_216D789AC(a1, (void (*)(uint64_t, int *, uint64_t *, uint64_t *))pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes, (uint64_t)&v16, a3))
  {
    sub_216D79158(a1, (uint64_t *)&v16, &v14);
    int v8 = (atomic_uint **)sub_216A663FC(&v14);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(v8, &v15);
LABEL_8:
    long long v9 = v15;
    long long v15 = 0uLL;
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v9;
    if (v10)
    {
      sub_216784EC4(v10);
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    uint64_t v11 = 1;
    goto LABEL_13;
  }
  uint64_t v11 = 0;
LABEL_13:
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  uint64_t v12 = v17;
  if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v12 + 8))(v12);
  }
  return v11;
}

void sub_216D795A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216D78E7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D79780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216D78E7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D797A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_uint *a15)
{
  if (a15)
  {
    if (atomic_fetch_add_explicit(a15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a15 + 8))(a15);
    }
  }
  JUMPOUT(0x216D797A0);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsImplicit(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this)) {
    return 0;
  }
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  if (v4 == *((void *)this + 5) && *((void *)this + 4) == ParentNode) {
    return 0;
  }
  v11[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
  v11[1] = v5;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v11, (uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v8);
  BOOL v6 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v12, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  sub_216BBEEA4(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  BOOL v2 = !v6;
  sub_21697C414(&v13);
  sub_216BBEEA4(&v12);
  return v2;
}

void sub_216D798C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsIntroducedInRootLayerStack(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(this)) {
    return 1;
  }
  uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 32));
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v4);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
  v12[0] = v6;
  v12[1] = v7;
  int v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v12);
  int v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v8);
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v9);
  uint64_t v11 = sub_216851B24(Identifier);
  return v11 == sub_216851B24(v10);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsIntroducedInRootLayerPrimSpec(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *this)
{
  return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)((char *)this + 32));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v8 = *a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = 0u;
  int v9 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(a1 + 48);
  *(void *)(a1 + 80) = 0;
  sub_216D7A604(__p);
  long long v12 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v13 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v12;
  if (v13)
  {
    sub_216784EC4(v13);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1, v10, v11, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)__p);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap((uint64_t *)__p, *v9);
  sub_2168BBAAC(&v22, 0);
  if (__p[1])
  {
    uint64_t v21 = __p[1];
    operator delete(__p[1]);
  }
  sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)*v9, 6u, &v25);
  uint64_t v15 = v25;
  uint64_t v14 = v26;
  uint64_t v16 = v27;
  if (v25 != v27 || v26 != v28)
  {
    uint64_t v17 = v28 - 1;
    do
    {
      uint64_t v18 = v14;
      v24[0] = v15;
      v24[1] = v14;
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v24) & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::UsdPrimCompositionQueryArc((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)__p, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v24);
        sub_216D79B94((uint64_t *)(a1 + 64), (long long *)__p);
        if (v23) {
          sub_216784EC4(v23);
        }
      }
      uint64_t v14 = v18 + 1;
    }
    while (v15 != v16 || v17 != v18);
  }
  return a1;
}

void sub_216D79B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216D7A564(&a9);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 56);
  if (v11) {
    sub_216784EC4(v11);
  }
  sub_216D16AD8(v9);
  _Unwind_Resume(a1);
}

void **sub_216D79B94(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    uint64_t v12 = (uint64_t)(v7 - *a1) >> 6;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58) {
      sub_21677CB10();
    }
    uint64_t v14 = v5 - *a1;
    if (v14 >> 5 > v13) {
      unint64_t v13 = v14 >> 5;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    v22[4] = result;
    uint64_t v16 = (char *)sub_2169B761C((uint64_t)result, v15);
    uint64_t v17 = &v16[64 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[64 * v18];
    long long v19 = *a2;
    long long v20 = a2[2];
    *((_OWORD *)v17 + 1) = a2[1];
    *((_OWORD *)v17 + 2) = v20;
    *(_OWORD *)uint64_t v17 = v19;
    *((void *)v17 + 6) = *((void *)a2 + 6);
    uint64_t v21 = *((void *)a2 + 7);
    *((void *)v17 + 7) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    void v22[2] = v17 + 64;
    sub_216D7A6AC(a1, v22);
    uint64_t v11 = a1[1];
    uint64_t result = sub_216D7A858(v22);
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[2];
    *(_OWORD *)(v7 + 16) = a2[1];
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)unint64_t v7 = v8;
    *(void *)(v7 + 48) = *((void *)a2 + 6);
    uint64_t v10 = *((void *)a2 + 7);
    *(void *)(v7 + 56) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v11;
  return result;
}

void sub_216D79CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7A858((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetDirectReferences@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = 0x100000001uLL;
  return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(a2, (uint64_t)this, &v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetDirectInherits@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = 0x100000003uLL;
  return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(a2, (uint64_t)this, &v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetDirectRootLayerArcs@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t a2@<X8>)
{
  LODWORD(v4) = 0;
  HIDWORD(v4) = 0;
  *(void *)((char *)&v4 + 4) = 0x100000001;
  return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::UsdPrimCompositionQuery(a2, (uint64_t)this, &v4);
}

__n128 pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::SetFilter(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[2] = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetFilter(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this)
{
  return *((void *)this + 4);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery::GetCompositionArcs(pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQuery *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  long long v4 = (_OWORD *)((char *)this + 32);
  if (*((_DWORD *)this + 8))
  {
    unint64_t v5 = operator new(0x20uLL);
    *unint64_t v5 = &unk_26C769640;
    v5[1] = sub_216D7A1EC;
    *((_OWORD *)v5 + 1) = *v4;
    uint64_t v23 = v5;
    sub_216D7A0E8(&v19, (uint64_t)v22);
    sub_216D7ABB0(v22);
  }
  if (*((_DWORD *)this + 9))
  {
    unint64_t v6 = operator new(0x20uLL);
    *unint64_t v6 = &unk_26C769640;
    v6[1] = sub_216D7A2C8;
    *((_OWORD *)v6 + 1) = *v4;
    uint64_t v23 = v6;
    sub_216D7A0E8(&v19, (uint64_t)v22);
    sub_216D7ABB0(v22);
  }
  if (*((_DWORD *)this + 10))
  {
    unint64_t v7 = operator new(0x20uLL);
    *unint64_t v7 = &unk_26C769640;
    v7[1] = sub_216D7A318;
    *((_OWORD *)v7 + 1) = *v4;
    uint64_t v23 = v7;
    sub_216D7A0E8(&v19, (uint64_t)v22);
    sub_216D7ABB0(v22);
  }
  if (*((_DWORD *)this + 11))
  {
    long long v8 = operator new(0x20uLL);
    *long long v8 = &unk_26C769640;
    v8[1] = sub_216D7A340;
    *((_OWORD *)v8 + 1) = *v4;
    uint64_t v23 = v8;
    sub_216D7A0E8(&v19, (uint64_t)v22);
    sub_216D7ABB0(v22);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v19 == v20)
  {
    if ((uint64_t *)((char *)this + 64) != a2) {
      sub_216D7AC34(a2, *((long long **)this + 8), *((long long **)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 6);
    }
  }
  else
  {
    sub_216D7A390(a2, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 6);
    long long v9 = (long long *)*((void *)this + 8);
    uint64_t v10 = (long long *)*((void *)this + 9);
    while (v9 != v10)
    {
      uint64_t v11 = v19;
      uint64_t v12 = v20;
      while (v11 != v12)
      {
        uint64_t v13 = *(void *)(v11 + 24);
        if (!v13) {
          sub_21683A7CC();
        }
        if (((*(uint64_t (**)(uint64_t, long long *))(*(void *)v13 + 48))(v13, v9) & 1) == 0) {
          goto LABEL_18;
        }
        v11 += 32;
      }
      sub_216D7A424(a2, v9);
LABEL_18:
      v9 += 4;
    }
  }
  uint64_t v15 = *a2;
  for (uint64_t i = a2[1]; v15 != i; v15 += 64)
  {
    uint64_t v17 = *((void *)this + 6);
    uint64_t v16 = *((void *)this + 7);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(v15 + 56);
    *(void *)(v15 + 48) = v17;
    *(void *)(v15 + 56) = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  v22[0] = (void **)&v19;
  sub_216D7A8E0(v22);
}

void sub_216D7A084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216D7A8E0(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_216D7A0E8(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)sub_2168707F4(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    uint64_t v18 = &v14[32 * v13];
    sub_216D7A964((uint64_t)v16, a2);
    uint64_t v17 = v16 + 32;
    sub_216D7A9E4(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = sub_216D7AA6C((uint64_t)&v15);
  }
  else
  {
    uint64_t result = sub_216D7A964(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_216D7A1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7AA6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D7A1EC(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, _DWORD *a2)
{
  uint64_t v2 = 1;
  switch(*a2)
  {
    case 0:
      return v2;
    case 1:
      unsigned int v3 = 16;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 2:
      unsigned int v3 = 32;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 3:
      unsigned int v3 = 2;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 4:
      unsigned int v3 = 64;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 5:
      unsigned int v3 = 4;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 6:
      unsigned int v3 = 48;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 7:
      unsigned int v3 = 66;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 8:
      unsigned int v3 = -49;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 9:
      unsigned int v3 = -67;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    case 0xA:
      unsigned int v3 = -5;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
    default:
      unsigned int v3 = 0;
      return (v3 >> pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1)) & 1;
  }
}

uint64_t sub_216D7A2C8(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2 == 2)
  {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1);
  }
  else if (v2 == 1)
  {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1) ^ 1;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_216D7A318(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (v2 == 2) {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 32));
  }
  if (v2 == 1) {
    return pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc::IsIntroducedInRootLayerStack((pxrInternal__aapl__pxrReserved__::UsdPrimCompositionQueryArc *)a1);
  }
  return 1;
}

uint64_t sub_216D7A340(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (v2 == 2) {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1) ^ 1;
  }
  if (v2 != 1) {
    return 1;
  }

  return pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
}

void **sub_216D7A390(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2169B761C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 64 * v6;
    sub_216D7A6AC(a1, v7);
    return sub_216D7A858(v7);
  }
  return result;
}

void sub_216D7A410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7A858((void **)va);
  _Unwind_Resume(a1);
}

void **sub_216D7A424(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    uint64_t v12 = (uint64_t)(v7 - *a1) >> 6;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58) {
      sub_21677CB10();
    }
    uint64_t v14 = v5 - *a1;
    if (v14 >> 5 > v13) {
      unint64_t v13 = v14 >> 5;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    v22[4] = result;
    uint64_t v16 = (char *)sub_2169B761C((uint64_t)result, v15);
    uint64_t v17 = &v16[64 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[64 * v18];
    long long v19 = *a2;
    long long v20 = a2[2];
    *((_OWORD *)v17 + 1) = a2[1];
    *((_OWORD *)v17 + 2) = v20;
    *(_OWORD *)uint64_t v17 = v19;
    *((void *)v17 + 6) = *((void *)a2 + 6);
    uint64_t v21 = *((void *)a2 + 7);
    *((void *)v17 + 7) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    void v22[2] = v17 + 64;
    sub_216D7A6AC(a1, v22);
    uint64_t v11 = a1[1];
    uint64_t result = sub_216D7A858(v22);
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[2];
    *(_OWORD *)(v7 + 16) = a2[1];
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)unint64_t v7 = v8;
    *(void *)(v7 + 48) = *((void *)a2 + 6);
    uint64_t v10 = *((void *)a2 + 7);
    *(void *)(v7 + 56) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v11;
  return result;
}

void sub_216D7A550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7A858((void **)va);
  _Unwind_Resume(a1);
}

void sub_216D7A564(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_216D7A5B8((uint64_t *)v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void sub_216D7A5B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_216784EC4(v4);
    }
  }
  a1[1] = v2;
}

void *sub_216D7A604@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x40uLL);
  uint64_t result = sub_216D7A650(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_216D7A63C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216D7A650(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C7695F0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)(a1 + 3));
  return a1;
}

void sub_216D7A698(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D7A6AC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D7A724((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D7A724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 64);
      long long v9 = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 32) = v9;
      *(_OWORD *)(v7 - 64) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      uint64_t v10 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v10;
      if (v10)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v16 + 1);
      }
      a3 -= 64;
      v7 -= 64;
      *((void *)&v16 + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216D7A7DC((uint64_t)v13);
  return v11;
}

uint64_t sub_216D7A7DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D7A814(a1);
  }
  return a1;
}

void sub_216D7A814(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unsigned int v3 = *(std::__shared_weak_count **)(v1 + 56);
    if (v3) {
      sub_216784EC4(v3);
    }
    v1 += 64;
  }
}

void **sub_216D7A858(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216D7A88C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 64;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_216784EC4(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 64;
    }
  }
}

void sub_216D7A8E0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_216D7ABB0(v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216D7A964(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_216D7A9E4(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = sub_216D7A964(result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D7AA6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_216D7ABB0((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_216D7AAC4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C769640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216D7AB18(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C769640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216D7AB50(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a1 + 16);
}

uint64_t sub_216D7AB64(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7696D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D7ABA4()
{
  return &unk_26C7696D8;
}

void *sub_216D7ABB0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216D7AC34(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 6)
  {
    sub_216D7AD88(a1);
    if (a4 >> 58) {
      sub_21677CB10();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_2169B75D8(a1, v12);
    uint64_t v13 = sub_216D7ADC4(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - v9) >> 6;
  if (v14 < a4)
  {
    long long v15 = &a2[4 * v14];
    sub_216D7AEE0((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = sub_216D7ADC4(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_216D7AEE0((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      long long v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_216784EC4(v19);
      }
      v18 -= 64;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_216D7AD78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216D7AD80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216D7AD88(uint64_t *a1)
{
  if (*a1)
  {
    sub_216D7A5B8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216D7ADC4(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  double v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      long long v6 = a2[2];
      *(_OWORD *)(v4 + 16) = a2[1];
      *(_OWORD *)(v4 + 32) = v6;
      *(_OWORD *)uint64_t v4 = v5;
      *(void *)(v4 + 48) = *((void *)a2 + 6);
      uint64_t v7 = *((void *)a2 + 7);
      *(void *)(v4 + 56) = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 64;
      a2 += 4;
    }
    while (a2 != a3);
    uint64_t v12 = v4;
  }
  char v10 = 1;
  sub_216D7AE64((uint64_t)v9);
  return v4;
}

uint64_t sub_216D7AE64(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D7AE9C(a1);
  }
  return a1;
}

void sub_216D7AE9C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_216784EC4(v3);
    }
    v1 -= 64;
  }
}

long long *sub_216D7AEE0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  long long v6 = a3;
  do
  {
    long long v7 = *v5;
    long long v8 = v5[2];
    *(_OWORD *)(a4 + 16) = v5[1];
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)a4 = v7;
    uint64_t v10 = *((void *)v5 + 6);
    uint64_t v9 = *((void *)v5 + 7);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a4 + 56);
    *(void *)(a4 + 48) = v10;
    *(void *)(a4 + 56) = v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    a4 += 64;
    v5 += 4;
  }
  while (v5 != v6);
  return v6;
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *pxrInternal__aapl__pxrReserved__::Usd_PrimData::Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, pxrInternal__aapl__pxrReserved__::UsdStage *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  sub_216981010((_DWORD *)this + 4, a3);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a3 + 1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91B18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)__cxa_guard_acquire(&qword_267B91B18);
    if (v17)
    {
      qword_267B91B10 = (uint64_t)pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::GetEmptyPrimType(v17);
      __cxa_guard_release(&qword_267B91B18);
    }
  }
  *((void *)this + 3) = qword_267B91B10;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (!a2)
  {
    uint64_t v18 = "usd/primData.cpp";
    long long v19 = "Usd_PrimData";
    uint64_t v20 = 67;
    char v21 = "pxrInternal__aapl__pxrReserved__::Usd_PrimData::Usd_PrimData(UsdStage *, const SdfPath &)";
    char v22 = 0;
    int v23 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v18, (pxrInternal__aapl__pxrReserved__ *)"Attempted to construct with null stage", v6);
  }
  if (sub_216C4B19C(9))
  {
    unint64_t v7 = **((void **)this + 3) & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      long long v8 = (const char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0) {
        long long v8 = *(const char **)v8;
      }
    }
    else
    {
      long long v8 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, (uint64_t *)&v18);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v18);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v10);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v14 = Identifier;
    }
    else {
      uint64_t v14 = *(void *)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Usd_PrimData::ctor<%s,%s,%s>\n", v12, v13, v8, Text, v14);
    long long v15 = v19;
    if (v19 && atomic_fetch_add_explicit((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v15 + 8))(v15);
    }
  }
  return this;
}

void sub_216D7B120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267B91B18);
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  if (sub_216C4B19C(9))
  {
    unint64_t v2 = **((void **)this + 3) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      uint64_t v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)this + 16));
    unint64_t v7 = *(void **)this;
    if (*(void *)this)
    {
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, &v12);
      long long v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v12);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v8);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v10 = (const char *)Identifier;
      }
      else {
        uint64_t v10 = *(const char **)Identifier;
      }
    }
    else
    {
      uint64_t v10 = "prim is invalid/expired";
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"~Usd_PrimData::dtor<%s,%s,%s>\n", v4, v5, v3, Text, v10);
    if (v7)
    {
      uint64_t v11 = v13;
      if (v13)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_21697C414((_DWORD *)this + 4);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  uint64_t v1 = *((void *)this + 5);
  unint64_t PrimDataAtPath = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 7) == 0 || PrimDataAtPath == 0)
  {
    ParentPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)this + 16), &v8);
    long long v6 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(ParentPath);
    if (v8 == *v6) {
      unint64_t PrimDataAtPath = 0;
    }
    else {
      unint64_t PrimDataAtPath = pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPath(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
    sub_21697C414(&v8);
  }
  return PrimDataAtPath;
}

void sub_216D7B35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91B08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91B08))
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&unk_267B91AE0);
    __cxa_atexit((void (*)(void *))sub_216BDB478, &unk_267B91AE0, &dword_216758000);
    __cxa_guard_release(&qword_267B91B08);
  }
  if ((*((unsigned char *)this + 57) & 0x10) != 0
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)this + 16)) & 1) != 0)
  {
    return &unk_267B91AE0;
  }
  else
  {
    return (void *)*((void *)this + 1);
  }
}

void sub_216D7B414(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, uint64_t a2, char *a3)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    v4[0] = "usd/primData.cpp";
    v4[1] = "GetSourcePrimIndex";
    v4[2] = 104;
    v4[3] = "const PcpPrimIndex &pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex() const";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_primIndex");
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdStage *pxrInternal__aapl__pxrReserved__::Usd_PrimData::_ComposeAndCacheFlags(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, int a3)
{
  uint64_t v4 = (uint64_t)this;
  if (a2 && !a3)
  {
    BOOL IsActive = pxrInternal__aapl__pxrReserved__::UsdStage::_IsActive(this, a2);
    *(void *)(v4 + 56) = *(void *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL | IsActive;
    int HasAnyPayloads = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasAnyPayloads(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v4 + 8));
    uint64_t v8 = *(void *)(v4 + 56);
    if (HasAnyPayloads)
    {
      unint64_t v9 = v8 | 0x200;
      *(void *)(v4 + 56) = v9;
      if (IsActive)
      {
        uint64_t v10 = *(void *)(*(void *)v4 + 128);
        Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v4 + 8));
        BOOL IsPayloadIncluded = pxrInternal__aapl__pxrReserved__::PcpCache::IsPayloadIncluded(v10, (unsigned int *)Path);
        unint64_t v9 = *(void *)(v4 + 56);
        if (IsPayloadIncluded)
        {
LABEL_10:
          unint64_t v13 = v9 | 2;
LABEL_11:
          *(void *)(v4 + 56) = v13;
          if ((*((unsigned char *)a2 + 56) & 8) == 0)
          {
            unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFF3;
            *(void *)(v4 + 56) = v14;
LABEL_13:
            unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFEFLL;
            goto LABEL_28;
          }
          pxrInternal__aapl__pxrReserved__::UsdStage::_GetKind((pxrInternal__aapl__pxrReserved__::UsdStage *)v4, &v36);
          BOOL IsModel = v36;
          if (v36)
          {
            BOOL IsGroup = pxrInternal__aapl__pxrReserved__::KindRegistry::IsGroup((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v36, v7, v16);
            BOOL IsComponent = pxrInternal__aapl__pxrReserved__::KindRegistry::IsComponent((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v36, v19, v20);
            if (IsGroup || IsComponent)
            {
              BOOL IsModel = 1;
              goto LABEL_19;
            }
            BOOL IsModel = pxrInternal__aapl__pxrReserved__::KindRegistry::IsModel((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v36, v7, v22);
          }
          BOOL IsComponent = 0;
          BOOL IsGroup = 0;
LABEL_19:
          if (v36 & 7) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v23 = *(void *)(v4 + 56);
          if (IsGroup)
          {
            unint64_t v24 = v23 | 8;
            *(void *)(v4 + 56) = v24;
            if (!IsModel) {
              goto LABEL_23;
            }
          }
          else
          {
            unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF7;
            *(void *)(v4 + 56) = v24;
            if (!IsModel)
            {
LABEL_23:
              unint64_t v14 = v24 & 0xFFFFFFFFFFFFFFFBLL;
              *(void *)(v4 + 56) = v24 & 0xFFFFFFFFFFFFFFFBLL;
              if (!IsComponent) {
                goto LABEL_13;
              }
LABEL_27:
              unint64_t v15 = v14 | 0x10;
LABEL_28:
              *(void *)(v4 + 56) = v15;
              this = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetSpecifier((pxrInternal__aapl__pxrReserved__::UsdStage *)v4, v7);
              uint64_t v25 = (*((void *)a2 + 7) >> 5) & 1;
              if (this == 2) {
                LODWORD(v25) = 1;
              }
              BOOL v26 = v25 == 0;
              uint64_t v27 = 32;
              if (v26) {
                uint64_t v27 = 0;
              }
              unint64_t v28 = *(void *)(v4 + 56) & 0xFFFFFFFFFFFFFFDFLL | v27;
              *(void *)(v4 + 56) = v28;
              if (this == 1)
              {
                unint64_t v29 = v28 & 0xFFFFFFFFFFFFFF7FLL;
                *(void *)(v4 + 56) = v28 & 0xFFFFFFFFFFFFFF7FLL;
              }
              else
              {
                unint64_t v29 = v28 | 0x80;
                *(void *)(v4 + 56) = v28 | 0x80;
                if ((*((unsigned char *)a2 + 56) & 0x40) != 0)
                {
                  unint64_t v30 = v28 | 0xC0;
LABEL_38:
                  unint64_t v31 = v30 & 0xFFFFFFFFFFFFFBFFLL;
                  *(void *)(v4 + 56) = v31;
                  if (IsActive
                    && (this = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(v4 + 8)),
                        unint64_t v31 = *(void *)(v4 + 56),
                        this))
                  {
                    unint64_t v32 = v31 | 0x100;
                  }
                  else
                  {
                    unint64_t v32 = v31 & 0xFFFFFFFFFFFFFEFFLL;
                  }
                  *(void *)(v4 + 56) = v32;
                  if ((*((unsigned char *)a2 + 57) & 0x10) != 0) {
                    unint64_t v33 = v32 | 0x1000;
                  }
                  else {
                    unint64_t v33 = v32 & 0xFFFFFFFFFFFFEFFFLL;
                  }
                  goto LABEL_45;
                }
              }
              unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFBFLL;
              goto LABEL_38;
            }
          }
          unint64_t v14 = v24 | 4;
          *(void *)(v4 + 56) = v24 | 4;
          if (!IsComponent) {
            goto LABEL_13;
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFDFFLL;
      *(void *)(v4 + 56) = v9;
      if (IsActive && (*((unsigned char *)a2 + 56) & 2) != 0) {
        goto LABEL_10;
      }
    }
    unint64_t v13 = v9 & 0xFFFFFFFFFFFFFFFDLL;
    goto LABEL_11;
  }
  uint64_t v34 = 207;
  if (a3) {
    uint64_t v34 = 4303;
  }
  unint64_t v35 = *((void *)this + 7) & 0xFFFFFFFFFFFFEF20 | v34;
  *((void *)this + 7) = v35;
  if (a2) {
    unint64_t v33 = v35 & 0xFFFFFFFFFFFFBFEFLL;
  }
  else {
    unint64_t v33 = v35 | 0x4000;
  }
LABEL_45:
  *(void *)(v4 + 56) = v33;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimData::IsSubComponent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetKind(this, &v4);
  BOOL result = pxrInternal__aapl__pxrReserved__::KindRegistry::IsSubComponent((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v4, v1, v2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPathOrInPrototype(*this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(pxrInternal__aapl__pxrReserved__::UsdStage **this)
{
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrototypeForInstance(*this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::_ComposePrimChildNames(pxrInternal__aapl__pxrReserved__::Usd_PrimData *a1, uint64_t **a2)
{
  sub_216BDFC40((uint64_t)&v8, 0, 0.0, 0.5);
  SourcePrimIndex = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(a1, v4, v5);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimChildNames(SourcePrimIndex, a2, &v8);
  uint64_t v10 = (void **)&v9;
  sub_216BDFE6C(&v10);
  return 1;
}

void sub_216D7B818(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1 + 8;
  sub_216BDFE6C((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_DescribePrimData(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, std::string *a3@<X8>)
{
  if (!this)
  {
    sub_216779094(a3, "null prim");
    return;
  }
  unint64_t v6 = *((void *)this + 7);
  BOOL v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if (v9)
  {
    LODWORD(v10) = pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(a2, v7);
    if ((*((void *)this + 7) & 0x1000) != 0)
    {
LABEL_4:
      int IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__ *)((char *)this + 16));
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v12 = *((void *)this + 7);
    uint64_t v10 = (v12 >> 12) & 1;
    if ((v12 & 0x1000) != 0) {
      goto LABEL_4;
    }
  }
  int IsRootPrimPath = 0;
LABEL_10:
  int v44 = IsRootPrimPath;
  if ((v6 & 0x100) == 0)
  {
    int v43 = 0;
    PrototypeForInstance = this;
    if ((v6 & 0x800) != 0) {
      goto LABEL_13;
    }
LABEL_15:
    if (*((unsigned char *)this + 56)) {
      unint64_t v14 = "";
    }
    else {
      unint64_t v14 = "inactive ";
    }
    goto LABEL_18;
  }
  if (!*(void *)this)
  {
    PrototypeForInstance = 0;
    int v43 = 0;
    if ((v6 & 0x800) != 0) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  PrototypeForInstance = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrototypeForInstance(*(pxrInternal__aapl__pxrReserved__::UsdStage **)this, this);
  int v43 = PrototypeForInstance;
  if ((v6 & 0x800) == 0) {
    goto LABEL_15;
  }
LABEL_13:
  unint64_t v14 = "expired ";
LABEL_18:
  uint64_t v15 = **((void **)this + 3);
  if (v15)
  {
    unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0) {
        uint64_t v17 = *(const char **)v17;
      }
    }
    else
    {
      uint64_t v17 = "";
    }
    uint64_t v18 = (const char *)&v51;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' ", (const char *)v7, v8, v17);
    if (v52 < 0) {
      uint64_t v18 = v51;
    }
  }
  else
  {
    uint64_t v18 = "";
  }
  if (v9) {
    long long v19 = a2;
  }
  else {
    long long v19 = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 16);
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v19);
  uint64_t v23 = "in prototype ";
  if (!v10) {
    uint64_t v23 = "";
  }
  unint64_t v24 = "instance proxy ";
  if (!v9) {
    unint64_t v24 = "";
  }
  if ((v6 & 0x100) != 0) {
    unint64_t v24 = "instance ";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s%sprim %s<%s> ", v21, v22, v14, v18, v24, v23, Text);
  if (v15 && v52 < 0)
  {
    operator delete(v51);
    if ((v6 & 0x800) != 0) {
      return;
    }
  }
  else if ((v6 & 0x800) != 0)
  {
    return;
  }
  if ((v9 | (v6 >> 8) & 1) == 1)
  {
    if ((v6 & 0x100) == 0 || v43)
    {
      uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__ *)((char *)PrototypeForInstance
                                                                                                  + 16));
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"with prototype <%s> ", v28, v29, v27);
      if ((v50 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v50 & 0x80u) == 0) {
        std::string::size_type v31 = v50;
      }
      else {
        std::string::size_type v31 = v49;
      }
      std::string::append(a3, p_p, v31);
      if ((char)v50 < 0) {
        operator delete(__p);
      }
    }
    else
    {
      std::string::append(a3, "with expired prototype");
    }
  }
  if ((v9 | v44 | v10) == 1)
  {
    SourcePrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(this, v25, v26);
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(SourcePrimIndex);
    uint64_t v34 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"using prim index <%s> ", v35, v36, v34);
    uint64_t v37 = (v50 & 0x80u) == 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
    std::string::size_type v38 = (v50 & 0x80u) == 0 ? v50 : v49;
    std::string::append(a3, v37, v38);
    if ((char)v50 < 0) {
      operator delete(__p);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdDescribe(*(pxrInternal__aapl__pxrReserved__ **)this, v46);
  if (v47 >= 0) {
    int v41 = v46;
  }
  else {
    int v41 = (void **)v46[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"on %s", v39, v40, v41);
  if ((v50 & 0x80u) == 0) {
    uint64_t v42 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v42 = (const std::string::value_type *)__p;
  }
  std::string::append(a3, v42);
  if ((char)v50 < 0) {
    operator delete(__p);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
}

void sub_216D7BBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a17 + 23) < 0) {
    operator delete(*(void **)a17);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  *(void *)&long long v11 = "usd/primData.cpp";
  *((void *)&v11 + 1) = "Usd_ThrowExpiredPrimAccessError";
  uint64_t v12 = 283;
  unint64_t v13 = "void pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(const Usd_PrimData *)";
  char v14 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
  pxrInternal__aapl__pxrReserved__::Usd_DescribePrimData(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v7, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v5 = &v8;
  }
  else {
    char v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Used %s", v3, v4, v5);
  sub_216D7BD88(&v11, 0, &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  return sub_21697C414(&v7);
}

void sub_216D7BD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  sub_21697B754(&a11);
  _Unwind_Resume(a1);
}

void sub_216D7BD88(long long *a1, int a2, long long *a3)
{
  pxrInternal__aapl__pxrReserved__::TfBaseException::TfBaseException((uint64_t)v6, a3);
  char v5 = v6;
  v6[0] = &unk_26C768370;
  pxrInternal__aapl__pxrReserved__::TfBaseException::_ThrowImpl(a1, (uint64_t)v6, (uint64_t)&v5, (uint64_t (*)(uint64_t))sub_216D7BE28, a2);
  pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError::~UsdExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError *)v6);
}

void sub_216D7BE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError::~UsdExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError *)va);
  _Unwind_Resume(a1);
}

void sub_216D7BE28(uint64_t *a1)
{
  exception = __cxa_allocate_exception(0x60uLL);
  sub_216D7BE84((uint64_t)exception, *a1);
}

void sub_216D7BE70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D7BE84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C74BD30;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_216863490((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  uint64_t v7 = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(void *)a1 = &unk_26C768370;
  return a1;
}

void sub_216D7BF54(_Unwind_Exception *a1)
{
  long long v4 = (std::exception_vtbl *)*v2;
  if (*v2)
  {
    v1[7].__vftable = v4;
    operator delete(v4);
  }
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimDataHandle::GetDescription(pxrInternal__aapl__pxrReserved__ **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, std::string *a3@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForTypedSchema(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7 = a2[1];
  if (v7)
  {
    if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
      uint64_t v7 = *a2;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  uint64_t v10 = v7;
  sub_216981010(&v11, a3);
  sub_21698105C(&v12, a3 + 1);
  *(void *)a1 = v10;
  sub_21697DE94((int *)(a1 + 8), &v11);
  sub_21697DEEC((int *)(a1 + 12), &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(a1, a4);
  if (result)
  {
    uint64_t v10 = 0;
    uint64_t result = (uint64_t)sub_216D7FBBC(a1 + 16, &v10, &v10, (uint64_t *)a1);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_216D7C0A8(uint64_t a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(uint64_t a1, uint64_t *a2)
{
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  long long v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4) {
    long long v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  long long v5 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40);
  uint64_t v6 = *(void **)a1;
  uint64_t v23 = (const char *)&v27;
  uint64_t v24 = (uint64_t)&stru_26C74C2D0;
  LOWORD(v25) = 0;
  char v22 = (char *)&unk_26C759208;
  char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), v5, (uint64_t (***)(void, uint64_t))&v22);
  if ((_BYTE)v25) {
    char v8 = 0;
  }
  else {
    char v8 = HasField;
  }
  if (v8)
  {
    char v22 = (char *)a1;
    sub_216973388((char **)(a1 + 80), (v28 - v27) >> 3);
    BOOL v9 = v27;
    uint64_t v10 = v28;
    BOOL v11 = v27 == v28;
    if (*a2)
    {
      if (v27 != v28)
      {
        do
        {
          uint64_t v12 = a2[4];
          uint64_t v13 = *a2;
          if (*a2)
          {
            uint64_t v14 = 8 * v13;
            uint64_t v15 = (void *)a2[4];
            while ((*v15 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v9 & 0xFFFFFFFFFFFFFFF8))
            {
              ++v15;
              v14 -= 8;
              if (!v14)
              {
                uint64_t v15 = (void *)(v12 + 8 * v13);
                break;
              }
            }
          }
          else
          {
            uint64_t v15 = (void *)a2[4];
          }
          if (v13 == ((uint64_t)v15 - v12) >> 3) {
            sub_216D7C9E4((uint64_t **)&v22, v9);
          }
          BOOL v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
        }
        while (v9 != v10);
      }
    }
    else
    {
      while (!v11)
      {
        sub_216D7C9E4((uint64_t **)&v22, v9);
        BOOL v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
        BOOL v11 = v9 == v10;
      }
    }
    goto LABEL_23;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)))
  {
LABEL_23:
    uint64_t v16 = 1;
    goto LABEL_28;
  }
  char v22 = "usd/primDefinition.cpp";
  uint64_t v23 = "_MapSchematicsPropertyPaths";
  uint64_t v24 = 200;
  uint64_t v25 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(const VtTokenArray &)";
  char v26 = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v20 = Identifier;
  }
  else {
    uint64_t v20 = *(void *)Identifier;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"No prim spec exists at path '%s' in schematics layer %s.", v19, Text, v20);
  uint64_t v16 = 0;
LABEL_28:
  char v22 = (char *)&v27;
  sub_216889A04((void ***)&v22);
  return v16;
}

void sub_216D7C2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 40) = &a17;
  sub_216889A04((void ***)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForAPISchema(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  v14[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a2;
  uint64_t v13 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v13 = (uint64_t)v10;
    }
  }
  sub_216ABF1B0((void *)(a1 + 56), &v13, v14, 1uLL);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = a3[1];
  if (v11)
  {
    if (*(unsigned char *)(sub_216850B68(a3 + 1) + 14)) {
      uint64_t v11 = *a3;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = v11;
  sub_216981010(v14, a4);
  sub_21698105C((_DWORD *)v14 + 1, a4 + 1);
  *(void *)a1 = v13;
  sub_21697DE94((int *)(a1 + 8), (int *)v14);
  sub_21697DEEC((int *)(a1 + 12), (int *)v14 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v14 + 1);
  sub_21697C414(v14);
  return pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_MapSchematicsPropertyPaths(a1, a5);
}

void sub_216D7C458(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaPropertySpec@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_2168CB120((void *)this + 2, a2);
  if (result)
  {
    long long v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3];
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(a3, v6, v5);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaAttributeSpec@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_2168CB120((void *)this + 2, a2);
  if (result)
  {
    long long v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3];
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath(a3, v6, v5);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaRelationshipSpec@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_2168CB120((void *)this + 2, a2);
  if (result)
  {
    long long v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3];
    return (void *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRelationshipAtPath(v6, v5);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition@<X0>(void *this@<X0>, atomic_uint **a2@<X1>, atomic_uint **a3@<X8>)
{
  if (*a2)
  {
    this = sub_2168CB120(this + 2, a2);
    long long v5 = (atomic_uint *)(this + 3);
    if (!this) {
      long long v5 = 0;
    }
    uint64_t v6 = *a2;
    *a3 = *a2;
    if ((v6 & 7) != 0)
    {
      uint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a3 = v7;
      }
    }
    a3[1] = v5;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetAttributeDefinition@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, atomic_uint **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, v6);
  long long v5 = v6[1];
  *(atomic_uint **)a3 = v6[0];
  *(void *)(a3 + 8) = v5;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetRelationshipDefinition@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, atomic_uint **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, v6);
  long long v5 = v6[1];
  *(atomic_uint **)a3 = v6[0];
  *(void *)(a3 + 8) = v5;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship::Relationship(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  result[1] = a2[1];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSpecType(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, atomic_uint **a2)
{
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, (atomic_uint **)&v4);
  uint64_t v3 = v5;
  if (v5) {
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 1));
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v3) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfLayer ***this)
{
  return pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this[1] + 1));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, uint64_t a2@<X8>)
{
  v3[0] = 0;
  v3[1] = this;
  return pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetDocumentation((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)this + 1);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    unint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216C08B4C(*v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (uint64_t (**)(void, uint64_t))a2);
}

void sub_216D7C7B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListPropertyMetadataFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, atomic_uint **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, (atomic_uint **)&v6);
  uint64_t v5 = v7;
  if (v7) {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields((pxrInternal__aapl__pxrReserved__::SdfLayer ****)&v6, (void **)a3);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v5)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer ****this@<X0>, void **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(*this[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this[1] + 1), (uint64_t)a2);
  uint64_t v3 = sub_216D7F2CC(*a2, a2[1], (uint64_t (*)(void *))pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField);
  return sub_216AD0DE4((uint64_t)a2, v3, a2[1]);
}

void sub_216D7C8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, atomic_uint **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(this, a2, (atomic_uint **)&v6);
  uint64_t v5 = v7;
  if (v7) {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetDocumentation((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&v6, (uint64_t)a3);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this@<X0>, uint64_t a2@<X8>)
{
  v4[0] = 0;
  uint64_t result = sub_2168CB120((void *)this + 2, v4);
  if (((uint64_t)v4[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v4[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (result)
  {
    v4[0] = 0;
    v4[1] = (pxrInternal__aapl__pxrReserved__::SdfLayer ***)(result + 3);
    return pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields(v4, (void **)a2);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

_DWORD *sub_216D7C9E4(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)(*a1 + 2);
  uint64_t v12 = **a1;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), a2, &v13);
  uint64_t v5 = sub_216D7F464(v4, a2, (uint64_t *)a2, &v12);
  if (v6)
  {
    uint64_t v7 = v5 + 2;
    char v8 = (uint64_t *)v3[11];
    if ((unint64_t)v8 >= v3[12])
    {
      uint64_t v10 = sub_216973984((char **)v3 + 10, v7);
    }
    else
    {
      uint64_t v9 = *v7;
      *char v8 = *v7;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v10 = (char *)(v8 + 1);
    }
    v3[11] = (uint64_t)v10;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_216D7CABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a2, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)this + 1);
  if (v5) {
    BOOL v6 = *((void *)a2 + 1) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v44 = "usd/primDefinition.cpp";
    uint64_t v45 = "_PropertyTypesMatch";
    uint64_t v46 = 250;
    char v47 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)";
    char v48 = 0;
    BOOL v8 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "strongProp && weakProp", 0) & 1) == 0) {
      return v8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)this + 1);
    if (!v5) {
      goto LABEL_18;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 1)) == 8)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)a2 + 1);
    if (v7
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 1)) == 8)
    {
      return 1;
    }
    else
    {
      int v44 = "usd/primDefinition.cpp";
      uint64_t v45 = "_PropertyTypesMatch";
      uint64_t v46 = 263;
      char v47 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)";
      char v48 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((void *)this + 1) + 8));
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)this
                                                                              + 1));
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v11 = Identifier;
      }
      else {
        uint64_t v11 = *(void *)Identifier;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((void *)a2 + 1) + 8));
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)a2
                                                                       + 1));
      if (*(char *)(v13 + 23) >= 0) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = *(void *)v13;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v44, (pxrInternal__aapl__pxrReserved__ *)"Cannot compose schema specs: Schema relationship spec at path '%s' in layer '%s' is a different spec type than schema attribute spec at path '%s' in layer '%s'.", v14, Text, v11, v12, v15);
      return 0;
    }
  }
  else
  {
LABEL_18:
    uint64_t v16 = *(void *)this;
    v43[0] = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v43[0] = v16 & 0xFFFFFFFFFFFFFFF8;
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)this + 1);
    v43[1] = v17;
    if (v17
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 + 1)) == 1|| (int v44 = "usd/primDefinition.cpp", v45 = "_PropertyTypesMatch", v46 = 270, v47 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)", v48 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "strongAttr", 0) & 1) != 0))
    {
      uint64_t v18 = *(void *)a2;
      v42[0] = v18;
      if ((v18 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v42[0] = v18 & 0xFFFFFFFFFFFFFFF8;
        v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)a2 + 1);
      v42[1] = v19;
      if (v19
        && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 1)) == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)v43, (uint64_t (**)(void, uint64_t))&v41);
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)v42, (uint64_t (**)(void, uint64_t))&v40);
        unint64_t v20 = v40;
        BOOL v8 = (v40 & 0xFFFFFFFFFFFFFFF8) == (v41 & 0xFFFFFFFFFFFFFFF8);
        if ((v40 & 0xFFFFFFFFFFFFFFF8) != (v41 & 0xFFFFFFFFFFFFFFF8))
        {
          int v44 = "usd/primDefinition.cpp";
          uint64_t v45 = "_PropertyTypesMatch";
          uint64_t v46 = 299;
          char v47 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, c"
                "onst Property &)";
          char v48 = 0;
          char v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((void *)this + 1) + 8));
          uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)this
                                                                           + 1));
          if (*(char *)(v22 + 23) >= 0) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = *(void *)v22;
          }
          unint64_t v24 = v41 & 0xFFFFFFFFFFFFFFF8;
          if ((v41 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v25 = (const char *)(v24 + 16);
            if (*(char *)(v24 + 39) < 0) {
              uint64_t v25 = *(const char **)v25;
            }
          }
          else
          {
            uint64_t v25 = "";
          }
          unint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((void *)a2 + 1) + 8));
          uint64_t v34 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)a2
                                                                           + 1));
          if (*(char *)(v34 + 23) >= 0) {
            uint64_t v36 = v34;
          }
          else {
            uint64_t v36 = *(void *)v34;
          }
          unint64_t v37 = v40 & 0xFFFFFFFFFFFFFFF8;
          if ((v40 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            std::string::size_type v38 = (const char *)(v37 + 16);
            if (*(char *)(v37 + 39) < 0) {
              std::string::size_type v38 = *(const char **)v38;
            }
          }
          else
          {
            std::string::size_type v38 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v44, (pxrInternal__aapl__pxrReserved__ *)"Cannot compose schema attribute specs: Mismatched type names.Schema attribute spec at path '%s' in layer '%s' has type name '%s' while schema attribute spec at path '%s' in layer '%s' has type name '%s'.", v35, v21, v23, v25, v33, v36, v38);
          unint64_t v20 = v40;
        }
        if ((v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v18 = v42[0];
      }
      else
      {
        int v44 = "usd/primDefinition.cpp";
        uint64_t v45 = "_PropertyTypesMatch";
        uint64_t v46 = 282;
        char v47 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch(const Property &, const Property &)";
        char v48 = 0;
        char v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((void *)this + 1) + 8));
        uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)this
                                                                         + 1));
        if (*(char *)(v27 + 23) >= 0) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = *(void *)v27;
        }
        uint64_t v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*((void *)a2 + 1) + 8));
        uint64_t v30 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(**((pxrInternal__aapl__pxrReserved__::SdfLayer ***)a2
                                                                         + 1));
        if (*(char *)(v30 + 23) >= 0) {
          uint64_t v32 = v30;
        }
        else {
          uint64_t v32 = *(void *)v30;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v44, (pxrInternal__aapl__pxrReserved__ *)"Cannot compose schema specs: Schema attribute spec at path '%s' in layer '%s' is a different spec type than schema relationship spec at path '%s' in layer '%s'.", v31, v26, v28, v29, v32);
        BOOL v8 = 0;
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v16 = v43[0];
    }
    else
    {
      BOOL v8 = 0;
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return v8;
}

void sub_216D7CF2C(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsRelationship(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)this + 1);
  return v1
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 1)) == 8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  result[1] = a2[1];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *this@<X0>, uint64_t (**a2)(void, uint64_t)@<X8>)
{
  *a2 = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)this + 1);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216D80204(*v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDef(char **this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *a2)
{
  uint64_t result = sub_216973388(this + 10, ((uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3) + ((this[11] - this[10]) >> 3));
  for (uint64_t i = (uint64_t *)*((void *)a2 + 4); i; uint64_t i = (uint64_t *)*i)
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_AddOrComposeProperty((uint64_t)this, i + 2, (atomic_uint *)i + 6);
  return result;
}

atomic_uint *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_AddOrComposeProperty(uint64_t a1, uint64_t *a2, atomic_uint *a3)
{
  uint64_t result = (atomic_uint *)sub_216D7FEA8(a1 + 16, a2, a2, (uint64_t)a3);
  if (v7)
  {
    uint64_t v8 = *a2;
    if (*a2)
    {
      uint64_t v9 = *(uint64_t **)(a1 + 88);
      if ((unint64_t)v9 >= *(void *)(a1 + 96))
      {
        uint64_t result = (atomic_uint *)sub_216973984((char **)(a1 + 80), a2);
      }
      else
      {
        *uint64_t v9 = v8;
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t result = (atomic_uint *)(v9 + 1);
      }
      *(void *)(a1 + 88) = result;
    }
  }
  else
  {
    uint64_t v10 = result;
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_CreateComposedPropertyIfNeeded(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2, result + 6, a3, &v21);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v21) & 1) == 0)
    {
      uint64_t v12 = (uint64_t **)sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v21);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v12, &v16);
      uint64_t v13 = v17;
      if (v17)
      {
        if (*(unsigned char *)(sub_216850B68(&v17) + 14)) {
          uint64_t v13 = v16;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      uint64_t v18 = v13;
      int v14 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v21);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v19);
      *((void *)v10 + 3) = v18;
      sub_21697DE94(v10 + 8, &v19);
      sub_21697DEEC(v10 + 9, &v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
      sub_21697C414(&v19);
      uint64_t v15 = v17;
      if (v17)
      {
        unint64_t add_explicit = (void *)atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF, memory_order_release);
        if (add_explicit == 1) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
      }
    }
    return (atomic_uint *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v21);
  }
  return result;
}

void sub_216D7D28C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfToken *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDefInstance(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216973388((char **)(a1 + 80), ((uint64_t)(a2[11] - a2[10]) >> 3)+ ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
  for (uint64_t i = (atomic_uint *)a2[4]; i; uint64_t i = *(atomic_uint **)i)
  {
    if ((*((void *)i + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)i + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance((uint64_t)EmptyString, a3, (uint64_t)&v9);
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_AddOrComposeProperty(a1, &v9, i + 6);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_CreateComposedPropertyIfNeeded(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, atomic_uint *a3@<X2>, atomic_uint *a4@<X3>, atomic_uint **a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *a5 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = a3;
  v22[0] = 0;
  v22[1] = a4;
  if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)&v23, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v22, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)a3))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91B48, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B91B48))
    {
      int v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v14) {
        int v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v15 = *((void *)v14 + 11);
      uint64_t v23 = v15;
      if ((v15 & 7) != 0)
      {
        uint64_t v16 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v23 = (uint64_t)v16;
        }
      }
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v17) {
        uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v18 = (atomic_uint *)*((void *)v17 + 22);
      unint64_t v24 = v18;
      if ((v18 & 7) != 0)
      {
        int v19 = (atomic_uint *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v19, 2u, memory_order_relaxed) & 1) == 0) {
          unint64_t v24 = v19;
        }
      }
      sub_216D30CFC(qword_267B91B30, &v23, 2uLL);
      for (uint64_t i = 8; i != -8; i -= 8)
      {
        uint64_t v21 = *(uint64_t *)((char *)&v23 + i);
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B91B30, &dword_216758000);
      __cxa_guard_release(&qword_267B91B48);
    }
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)qword_267B91B30[0];
    for (j = (const pxrInternal__aapl__pxrReserved__::TfToken *)unk_267B91B38;
          v10 != j;
          uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v10 + 8))
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 2), v10, 0) & 1) == 0)
      {
        unint64_t v24 = 0;
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 2), v10, (pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
        {
          if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5))
          {
            pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_FindOrCreatePropertySpecForComposition(a1, a2, a3, v22);
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a5, v22);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v12, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v22);
          }
          uint64_t v13 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5);
          pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v13, v10, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v23);
        }
        sub_2168EE084((uint64_t)&v23);
      }
    }
  }
}

void sub_216D7D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B91B48);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, v12);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_FindOrCreatePropertySpecForComposition@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X2>, atomic_uint **a4@<X8>)
{
  v45[2] = *(void ***)MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91B28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91B28))
  {
    sub_216779094(&__p, "/ComposedProperties");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&unk_267B91B20, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __cxa_atexit((void (*)(void *))sub_21697B754, &unk_267B91B20, &dword_216758000);
    __cxa_guard_release(&qword_267B91B28);
  }
  *a4 = 0;
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v8 = (uint64_t *)(a1 + 104);
  if (v9)
  {
    uint64_t v10 = sub_216AA5ECC(v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&unk_267B91B20, a2, (int *)&v43);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfLayer *)v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a4, (atomic_uint **)&__p);
    LOBYTE(v10) = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)sub_21697C414(&v43);
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  else
  {
    sub_216779094(&__p, "schema-composed-properties");
    v44[0] = 0;
    v44[1] = 0;
    int v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer ***)v44;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v43, (uint64_t *)v45);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v8;
    *uint64_t v8 = (uint64_t)v45[0];
    v45[0] = 0;
    sub_2168BD378((int)v8, v13);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v45);
    sub_2167877AC((uint64_t)&v43, v44[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v42);
  int v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v8);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&unk_267B91B20, &v41);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v41))
  {
    sub_216ABBA60((uint64_t *)&v43, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&unk_267B91B20);
    memset(&__p, 0, sizeof(__p));
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New((uint64_t *)&v43, 0, v45);
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v41, (atomic_uint **)v45);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v45);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = v44[0];
    if (v44[0] && atomic_fetch_add_explicit((atomic_uint *volatile)v44[0] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*v16 + 8))(v16);
    }
  }
  int v43 = 0;
  v44[0] = a3;
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1);
  SpecType = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1));
  if (SpecType == 1)
  {
    uint64_t v19 = *(void *)a2;
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)a3;
    unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
    if (v20) {
      EmptyString = (uint64_t *)(v20 + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(SpecType);
    }
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)&__p);
    int Variability = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v41, (uint64_t)EmptyString, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName, Variability, 0, v45);
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a4, (atomic_uint **)v45);
    p_p = (pxrInternal__aapl__pxrReserved__::SdfSpec *)v45;
  }
  else
  {
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1));
    if (v22 != 8)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/primDefinition.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_FindOrCreatePropertySpecForComposition";
      __p.__r_.__value_.__r.__words[2] = 439;
      std::string::size_type v38 = "SdfPropertySpecHandle pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_FindOrCreatePropertySpecForCompo"
            "sition(const TfToken &, const _LayerAndPath &)";
      char v39 = 0;
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3);
      int v25 = *(char *)(Identifier + 23);
      char v26 = *(const char **)Identifier;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v17);
      if (v25 >= 0) {
        uint64_t v28 = (const char *)Identifier;
      }
      else {
        uint64_t v28 = v26;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create a property spec from spec at layer '%s' and path '%s'. The spec type is not an attribute or relationship.", v28, Text);
      goto LABEL_31;
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v23 = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v23 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
    }
    char v33 = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&v43) != 0;
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v41, (uint64_t)v23, v33, 1, &__p);
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a4, (atomic_uint **)&__p);
    p_p = (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v31, p_p);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields(&v43, &__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p.__r_.__value_.__r.__words[0];
        i != (const pxrInternal__aapl__pxrReserved__::TfToken *)size;
        uint64_t i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
  {
    v45[1] = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)*a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 1), i, (pxrInternal__aapl__pxrReserved__::VtValue *)v45);
    uint64_t v36 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4);
    pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(v36, i, (const pxrInternal__aapl__pxrReserved__::VtValue *)v45);
    sub_2168EE084((uint64_t)v45);
  }
  v45[0] = (void **)&__p;
  sub_216889A04(v45);
LABEL_31:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v29, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v41);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v42);
}

void sub_216D7DB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B91B28);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsAttribute(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)*((void *)this + 1);
  return v1
      && pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(*v1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 1)) == 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *this)
{
  uint64_t v1 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeNameToken(this, (uint64_t (**)(void, uint64_t))&v3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *this)
{
  unsigned int v6 = 0;
  uint64_t v1 = (void **)*((void *)this + 1);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 464);
  uint64_t v4 = *v1;
  v7[1] = (uint64_t (**)(void, uint64_t))&v6;
  void v7[2] = (uint64_t (**)(void, uint64_t))&stru_26C756E50;
  __int16 v8 = 0;
  v7[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E6F8;
  pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 1), v3, v7);
  return v6;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeOverAndReplaceExistingProperty(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfLayer **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  v25[2] = *(void ***)MEMORY[0x263EF8340];
  uint64_t result = sub_2168CB1F4((void *)(a1 + 16), a2);
  __int16 v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer ***)(result + 3);
  if (result) {
    uint64_t v9 = (int *)(result + 3);
  }
  else {
    uint64_t v9 = 0;
  }
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v22 = *a3;
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a4, a2, &v23);
    v21[0] = 0;
    v21[1] = &v22;
    v20[0] = 0;
    v20[1] = v8;
    if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_PropertyTypesMatch((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)v21, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v20, v11))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::ListMetadataFields(v20, (void **)&v18);
      uint64_t v12 = v18;
      uint64_t v13 = v19;
      if (v18 != v19)
      {
        int v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 4);
        do
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, v12, 0) & 1) == 0)
          {
            v25[1] = 0;
            if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)v9, v14, v12, (pxrInternal__aapl__pxrReserved__::VtValue *)v25))
            {
              uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)a3);
              pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, v12, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
            }
            sub_2168EE084((uint64_t)v25);
          }
          uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v12 + 8);
        }
        while (v12 != v13);
      }
      v25[0] = (void **)&v18;
      sub_216889A04(v25);
      LODWORD(v18) = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v20);
      if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v21) != v18)
      {
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)a3);
        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v17) {
          uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        sub_216A5F2CC(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v17 + 464), (int *)&v18);
      }
      *(void *)uint64_t v9 = v22;
      sub_21697DE94(v9 + 2, &v23);
      sub_21697DEEC(v9 + 3, &v24);
      if (((uint64_t)v20[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v20[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v21[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    return sub_21697C414(&v23);
  }
  return result;
}

void sub_216D7E034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if ((a5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D7C0A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v31[0] = a1;
  v31[1] = &v32;
  uint64_t v32 = a4;
  if (*a3)
  {
    int64x2_t v29 = 0uLL;
    uint64_t v30 = 0;
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216973388((char **)&v29, (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    __int16 v8 = *(void **)(a2 + 56);
    for (uint64_t i = *(void **)(a2 + 64); v8 != i; ++v8)
    {
      if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v10 = (*v8 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        uint64_t v10 = (uint64_t)EmptyString;
      }
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v11 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v10, (uint64_t)v11, (uint64_t)&v37);
      uint64_t v12 = v29.i64[1];
      if (v29.i64[1] >= (unint64_t)v30)
      {
        uint64_t v15 = (v29.i64[1] - v29.i64[0]) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_21677CB10();
        }
        unint64_t v16 = (uint64_t)&v30[-v29.i64[0]] >> 2;
        if (v16 <= v15 + 1) {
          unint64_t v16 = v15 + 1;
        }
        if ((unint64_t)&v30[-v29.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        uint64_t v36 = &v30;
        if (v17) {
          uint64_t v18 = (char *)sub_21677CB28((uint64_t)&v30, v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v15];
        unint64_t v20 = &v18[8 * v17];
        unint64_t v35 = v20;
        *(void *)uint64_t v19 = v37;
        int v14 = v19 + 8;
        uint64_t v37 = 0;
        v34.i64[1] = (uint64_t)(v19 + 8);
        uint64_t v21 = (void *)v29.i64[1];
        uint64_t v22 = (void *)v29.i64[0];
        if (v29.i64[1] == v29.i64[0])
        {
          int64x2_t v24 = vdupq_n_s64(v29.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v23 = *--v21;
            *((void *)v19 - 1) = v23;
            v19 -= 8;
            *uint64_t v21 = 0;
          }
          while (v21 != v22);
          int64x2_t v24 = v29;
          int v14 = (void *)v34.i64[1];
          unint64_t v20 = v35;
        }
        v29.i64[0] = (uint64_t)v19;
        v29.i64[1] = (uint64_t)v14;
        int64x2_t v34 = v24;
        int v25 = v30;
        uint64_t v30 = v20;
        unint64_t v35 = v25;
        char v33 = (int64x2_t *)v24.i64[0];
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BE9D8((uint64_t)&v33);
        uint64_t v13 = v37;
      }
      else
      {
        uint64_t v13 = 0;
        *(void *)v29.i64[1] = v37;
        int v14 = (void *)(v12 + 8);
        uint64_t v37 = 0;
      }
      v29.i64[1] = (uint64_t)v14;
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    char v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D7E374(v31, (atomic_uint ***)&v29);
    if (!v26)
    {
      char v33 = &v29;
      sub_216889A04((void ***)&v33);
      return 0;
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v27 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDefInstance((uint64_t)a1, (void *)a2, (uint64_t)v27);
    char v33 = &v29;
    sub_216889A04((void ***)&v33);
  }
  else
  {
    uint64_t result = sub_216D7E374(v31, (atomic_uint ***)(a2 + 56));
    if (!result) {
      return result;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposePropertiesFromPrimDef((char **)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)a2);
  }
  return 1;
}

void sub_216D7E330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a9;
  sub_216889A04(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_216D7E374(uint64_t **a1, atomic_uint ***a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (char **)(*a1 + 7);
  uint64_t v6 = (*a1)[8] - (void)*v5;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  sub_216973388(v5, a2[1] - *a2 + (v6 >> 3));
  char v7 = *a2;
  __int16 v8 = a2[1];
  if (*a2 == v8)
  {
LABEL_30:
    uint64_t v27 = 1;
    goto LABEL_31;
  }
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v7, (atomic_uint **)&v43);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v43, v9);
    sub_216B12870(&v41, SchemaInfo + 2, &v44);
    uint64_t v11 = SchemaInfo + 3;
    uint64_t v12 = sub_216D7F7A8(*a1[1], &v41, &v41, (_DWORD *)SchemaInfo + 6);
    if (v13)
    {
      int v14 = (void *)v4[8];
      if ((unint64_t)v14 >= v4[9])
      {
        unint64_t v16 = sub_216973984(v5, (uint64_t *)v7);
      }
      else
      {
        uint64_t v15 = *v7;
        *int v14 = *v7;
        if ((v15 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v14 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v16 = (char *)(v14 + 1);
      }
      v4[8] = (uint64_t)v16;
      uint64_t v18 = v46;
      if ((unint64_t)v46 >= v47)
      {
        uint64_t v20 = (v46 - v45) >> 4;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v22 = v47 - (void)v45;
        if ((uint64_t)(v47 - (void)v45) >> 3 > v21) {
          unint64_t v21 = v22 >> 3;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        char v52 = &v47;
        int64x2_t v24 = (void **)sub_216787EE0((uint64_t)&v47, v23);
        int v25 = (char *)&v24[2 * v20];
        char v48 = v24;
        std::string::size_type v49 = v25;
        uint64_t v51 = (const char *)&v24[2 * v26];
        *(void *)int v25 = v41;
        uint64_t v41 = 0;
        *((void *)v25 + 1) = v42;
        uint64_t v42 = 0;
        uint64_t v50 = (uint64_t)(v25 + 16);
        sub_216BB1AF8((uint64_t *)&v45, &v48);
        uint64_t v19 = v46;
        sub_216BB1C94((uint64_t)&v48);
      }
      else
      {
        *(void *)uint64_t v46 = v41;
        *((void *)v18 + 1) = v42;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v19 = v18 + 16;
      }
      uint64_t v46 = v19;
      goto LABEL_21;
    }
    unint64_t v17 = v12;
    if (*((_DWORD *)v12 + 8) != *v11) {
      break;
    }
LABEL_21:
    if ((v42 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (++v7 == v8) {
      goto LABEL_30;
    }
  }
  sub_216A9C5B8((uint64_t)v5, v6 >> 3);
  std::string::size_type v31 = v45;
  for (uint64_t i = v46; v31 != i; v31 += 16)
    sub_216D7FA40((void *)*a1[1], v31);
  unint64_t v32 = (unint64_t)**a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (unint64_t)*v7 & 0xFFFFFFFFFFFFFFF8;
  if (v32 == v33)
  {
    char v48 = (void **)"usd/primDefinition.cpp";
    std::string::size_type v49 = "operator()";
    uint64_t v50 = 613;
    uint64_t v51 = "auto pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(const UsdPrimDefinit"
          "ion &, const TfToken &, _FamilyAndInstanceToVersionMap *)::(anonymous class)::operator()(const TfTokenVector &) const";
    LOBYTE(v52) = 0;
    if (v33)
    {
      unint64_t v35 = (const char *)(v32 + 16);
      if (*(char *)(v32 + 39) < 0) {
        unint64_t v35 = *(const char **)v35;
      }
    }
    else
    {
      unint64_t v35 = "";
    }
    unint64_t v39 = v17[2] & 0xFFFFFFFFFFFFFFF8;
    if (v39)
    {
      unint64_t v40 = (const char *)(v39 + 16);
      if (*(char *)(v39 + 39) < 0) {
        unint64_t v40 = *(const char **)v40;
      }
    }
    else
    {
      unint64_t v40 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v48, (pxrInternal__aapl__pxrReserved__ *)"Failure composing the API schema definition for '%s' into another prim definition. Adding this schema would cause a version conflict with an already composed in API schema definition with family '%s' and version %u.", v29, v35, v40, *((unsigned int *)v17 + 8));
  }
  else
  {
    char v48 = (void **)"usd/primDefinition.cpp";
    std::string::size_type v49 = "operator()";
    uint64_t v50 = 624;
    uint64_t v51 = "auto pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(const UsdPrimDefinit"
          "ion &, const TfToken &, _FamilyAndInstanceToVersionMap *)::(anonymous class)::operator()(const TfTokenVector &) const";
    LOBYTE(v52) = 0;
    if (v32)
    {
      int64x2_t v34 = (const char *)(v32 + 16);
      if (*(char *)(v32 + 39) < 0) {
        int64x2_t v34 = *(const char **)v34;
      }
    }
    else
    {
      int64x2_t v34 = "";
    }
    if (v33)
    {
      uint64_t v36 = (const char *)(v33 + 16);
      if (*(char *)(v33 + 39) < 0) {
        uint64_t v36 = *(const char **)v36;
      }
    }
    else
    {
      uint64_t v36 = "";
    }
    unint64_t v37 = v17[2] & 0xFFFFFFFFFFFFFFF8;
    if (v37)
    {
      std::string::size_type v38 = (const char *)(v37 + 16);
      if (*(char *)(v37 + 39) < 0) {
        std::string::size_type v38 = *(const char **)v38;
      }
    }
    else
    {
      std::string::size_type v38 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v48, (pxrInternal__aapl__pxrReserved__ *)"Failure composing the API schema definition for '%s' into another prim definition. Adding API schema '%s', which is built in to this schema definition would cause a version conflict with an already composed in API schema definition with family '%s' and version %u.", v29, v34, v36, v38, *((unsigned int *)v17 + 8));
  }
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = 0;
LABEL_31:
  char v48 = (void **)&v45;
  sub_216BB1A58(&v48);
  return v27;
}

void sub_216D7E7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, char a19)
{
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a17 = (unint64_t)&a19;
  sub_216BB1A58((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v47);
  __int16 v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, a3, &v46);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46) & 1) == 0)
  {
    uint64_t v15 = sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46);
    std::string __p = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetProperties(v15);
    p_p = &__p;
    sub_216991094(&p_p);
    unint64_t v16 = sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46);
    pxrInternal__aapl__pxrReserved__::SdfSpec::ListInfoKeys(v16, (uint64_t)&__p);
    uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p;
    uint64_t v19 = v42;
    while (v18 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v19)
    {
      if (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(v18, v17))
      {
        uint64_t v20 = sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46);
        pxrInternal__aapl__pxrReserved__::SdfSpec::ClearInfo(v20, v18);
      }
      uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v18 + 8);
    }
    p_p = &__p;
    sub_216889A04(&p_p);
LABEL_14:
    uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)a1 + 10);
    for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)a1 + 11);
          v22 != i;
          uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v22 + 8))
    {
      int64x2_t v24 = sub_2168CB120((void *)a1 + 2, v22);
      if (v24) {
        int v25 = v24 + 3;
      }
      else {
        int v25 = 0;
      }
      if (!v24)
      {
        std::string __p = "usd/primDefinition.cpp";
        uint64_t v42 = "FlattenTo";
        uint64_t v43 = 700;
        uint64_t v44 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(const SdfLayerHandle &, const SdfPath "
              "&, SdfSpecifier) const";
        char v45 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "layerAndPath", 0) & 1) == 0) {
          continue;
        }
      }
      sub_216A9ED88(&p_p, *v25);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, v22, (int *)&__p);
      char v26 = pxrInternal__aapl__pxrReserved__::SdfCopySpec((uint64_t *)&p_p, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 1), a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
      if ((v26 & 1) == 0)
      {
        std::string __p = "usd/primDefinition.cpp";
        uint64_t v42 = "FlattenTo";
        uint64_t v43 = 710;
        uint64_t v44 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(const SdfLayerHandle &, const SdfPath "
              "&, SdfSpecifier) const";
        char v45 = 0;
        unint64_t v27 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
        if (v27)
        {
          uint64_t v28 = (const char *)(v27 + 16);
          if (*(char *)(v27 + 39) < 0) {
            uint64_t v28 = *(const char **)v28;
          }
        }
        else
        {
          uint64_t v28 = "";
        }
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
        uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
        if (*(char *)(Identifier + 23) >= 0) {
          uint64_t v33 = Identifier;
        }
        else {
          uint64_t v33 = *(void *)Identifier;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to copy prim definition property '%s' to prim spec at path '%s' in layer '%s'.", v32, v28, Text, v33);
      }
      uint64_t v34 = v49;
      if (v49 && atomic_fetch_add_explicit((atomic_uint *volatile)(v49 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields(a1, (uint64_t)&__p);
    unint64_t v35 = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p;
    uint64_t v36 = v42;
    while (v35 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v36)
    {
      uint64_t v49 = 0;
      if (sub_216D7EEE8((uint64_t)a1, v35, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p))
      {
        unint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v37, a3, v35, (const pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
      }
      sub_2168EE084((uint64_t)&p_p);
      unint64_t v35 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v35 + 8);
    }
    p_p = &__p;
    sub_216889A04(&p_p);
    sub_2169791E0(a2);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens)) {
      sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::CreateExplicit();
  }
  pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a2, (uint64_t)a3, &__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v46, (atomic_uint **)&__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46))
  {
    unint64_t v21 = sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v46);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSpecifier(v21, a4);
    goto LABEL_14;
  }
  std::string __p = "usd/primDefinition.cpp";
  uint64_t v42 = "FlattenTo";
  uint64_t v43 = 690;
  uint64_t v44 = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(const SdfLayerHandle &, const SdfPath &, Sdf"
        "Specifier) const";
  char v45 = 0;
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
  if (*(char *)(v12 + 23) >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = *(void *)v12;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to create prim spec at path '%s' in layer '%s'", v13, v10, v14);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v39, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v46);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v47);
  return 0;
}

void sub_216D7EDA0(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v12 - 136));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v12 - 128));
  _Unwind_Resume(a1);
}

void *sub_216D7EEE8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(a2, a2)) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t result = sub_216D801A4(a1, &v7, a2, a3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdObject *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_216D0162C((uint64_t)a2, (int *)&v20);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, a3, &v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
  sub_21697C414(&v20);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2, v10, &v20);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v20);
  EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v11);
  uint64_t v13 = v21;
  if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, &v18);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v18))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(a1, (uint64_t *)EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2, v14, &v20);
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v20);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, a5);
    uint64_t v16 = v21;
    if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  else
  {
    *(_DWORD *)a5 = 1;
    *(void *)(a5 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 20));
    *(void *)(a5 + 24) = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_21697C414(&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  return sub_21697C414(&v22);
}

void sub_216D7F138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, int a12)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_216D6B1F8((uint64_t)a2, (uint64_t)&v9);
  __int16 v8 = sub_216D563F8(a2);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::FlattenTo(a1, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v9, v8, a3, a4);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216D7F2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216D7F2CC(void *a1, void *a2, uint64_t (*a3)(void *))
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while ((a3(v5) & 1) == 0)
  {
    if (++v5 == a2) {
      return a2;
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 1; i != a2; ++i)
    {
      if ((a3(i) & 1) == 0)
      {
        if (i != v5)
        {
          if ((*v5 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v5 = *i;
          void *i = 0;
        }
        ++v5;
      }
    }
  }
  return v5;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(void *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a2)
{
  uint64_t v2 = *(void *)a2;
  *this = *(void *)a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *this &= 0xFFFFFFFFFFFFFFF8;
  }
  this[1] = *((void *)a2 + 1);
  return this;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship::Relationship(void *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *a2)
{
  uint64_t v2 = *(void *)a2;
  *this = *(void *)a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *this &= 0xFFFFFFFFFFFFFFF8;
  }
  this[1] = *((void *)a2 + 1);
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)a2;
  *this = *(void *)a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *this &= 0xFFFFFFFFFFFFFFF8;
  }
  this[1] = *((void *)a2 + 1);
  return this;
}

void *sub_216D7F464(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_216D7F6CC(a1, v7, a3, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *int v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  int v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216D7F750((uint64_t)v22, 0);
  return v11;
}

void sub_216D7F6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7F750((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D7F6CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x28uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *uint64_t v10 = 0;
  v10[1] = a2;
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = *a4;
  v10[2] = v11;
  v10[3] = v12;
  sub_21697D878((_DWORD *)v10 + 8, (_DWORD *)a4 + 2);
  uint64_t result = sub_21697D8B4((_DWORD *)v10 + 9, (_DWORD *)a4 + 3);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216D7F750(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216D12E6C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216D7F7A8(uint64_t a1, void *a2, uint64_t *a3, _DWORD *a4)
{
  unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (v9 + ((((v9 + v8) | 1) * (v9 + v8)) >> 1)));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    float v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      float v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if ((v14[2] & 0xFFFFFFFFFFFFFFF8) == v8 && (v14[3] & 0xFFFFFFFFFFFFFFF8) == v9) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          float v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  unint64_t v16 = (void *)(a1 + 16);
  float v14 = operator new(0x28uLL);
  *float v14 = 0;
  v14[1] = v10;
  sub_216B15074(v14 + 2, a3);
  *((_DWORD *)v14 + 8) = *a4;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  int64x2_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *float v14 = *v24;
LABEL_39:
    *int64x2_t v24 = v14;
    goto LABEL_40;
  }
  *float v14 = *v16;
  *unint64_t v16 = v14;
  *(void *)(v23 + 8 * v4) = v16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    int64x2_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_216D7FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2169738AC(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_216D7FA40(void *a1, void *a2)
{
  uint64_t result = sub_216D7FA78(a1, a2);
  if (result)
  {
    sub_216D7FB70(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_216D7FA78(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * (v4 + ((((v4 + v3) | 1) * (v4 + v3)) >> 1)));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v4) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_216D7FB70(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    sub_2169738AC((uint64_t)&v6, v3);
  }
  return v2;
}

void *sub_216D7FBBC(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_216D7FE24(a1, v7, a3, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *BOOL v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216D7F750((uint64_t)v22, 0);
  return v11;
}

void sub_216D7FE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7F750((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D7FE24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x28uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *unint64_t v10 = 0;
  v10[1] = a2;
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = *a4;
  v10[2] = v11;
  v10[3] = v12;
  sub_216981010((_DWORD *)v10 + 8, (_DWORD *)a4 + 2);
  uint64_t result = sub_21698105C((_DWORD *)v10 + 9, (_DWORD *)a4 + 3);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void *sub_216D7FEA8(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if ((v13[2] & 0xFFFFFFFFFFFFFFF8) == v8) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  unint64_t v16 = operator new(0x28uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *unint64_t v16 = 0;
  v16[1] = v9;
  sub_216D80130((uint64_t)(v16 + 2), a3, a4);
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  float v13 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216D7F750((uint64_t)v26, 0);
  return v13;
}

void sub_216D80118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7F750((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216D80130(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = *(void *)a3;
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a3 + 8));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a3 + 12));
  return a1;
}

void *sub_216D801A4(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t result = sub_2168CB120((void *)(a1 + 16), a2);
  if (result)
  {
    unint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4);
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3];
    return (void *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v8, v7, a3, a4);
  }
  return result;
}

uint64_t sub_216D80204(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C2C0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C758B08;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91B58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91B58))
  {
    uint64_t v2 = operator new(0x18uLL);
    sub_216D80370(0, 6u, &v6);
    __n128 v10 = v6;
    char v11 = v7;
    uint64_t v3 = sub_216D805CC((uint64_t)&v10, 1);
    __n128 v8 = *(__n128 *)v3;
    uint64_t v9 = *(void *)(v3 + 16);
    __n128 v10 = v8;
    char v11 = v9;
    uint64_t v4 = sub_216D805CC((uint64_t)&v10, 0x100000005);
    long long v5 = *(_OWORD *)v4;
    v2[2] = *(void *)(v4 + 16);
    *(_OWORD *)uint64_t v2 = v5;
    qword_267B91B50 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B91B58);
  }
  return qword_267B91B50;
}

void sub_216D80348(_Unwind_Exception *a1)
{
}

__n128 sub_216D80370@<Q0>(unsigned int a1@<W0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v4 = a2;
  long long v9 = 0uLL;
  char v10 = 0;
  uint64_t v5 = sub_216D805CC((uint64_t)&v9, a1);
  uint64_t v8 = *(void *)(v5 + 16);
  long long v9 = *(_OWORD *)v5;
  char v10 = v8;
  __n128 v6 = (__n128 *)sub_216D805CC((uint64_t)&v9, v4);
  __n128 result = *v6;
  *a3 = *v6;
  a3[1].n128_u64[0] = v6[1].n128_u64[0];
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91B78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91B78))
  {
    qword_267B91B60 = 0;
    *(void *)algn_267B91B68 = 0;
    byte_267B91B70 = 0;
    __cxa_guard_release(&qword_267B91B78);
  }
  return &qword_267B91B60;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, this))
  {
    BOOL v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 4);
    return sub_216D804F8(a1, (pxrInternal__aapl__pxrReserved__ **)this + 1, v4);
  }
  else
  {
    v6[0] = "usd/primFlags.cpp";
    v6[1] = "operator()";
    v6[2] = 48;
    void v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()(const UsdPrim &) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Applying predicate to invalid prim.");
    return 0;
  }
}

BOOL sub_216D804F8(uint64_t *a1, pxrInternal__aapl__pxrReserved__ **a2, int a3)
{
  uint64_t v5 = *a2;
  if (!*a2 || (uint64_t v6 = *((void *)v5 + 7), (v6 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*a2, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    uint64_t v6 = *((void *)v5 + 7);
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFDFFFLL;
  uint64_t v8 = 0x2000;
  if (!a3) {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v7 | v8;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  unint64_t v14 = *a1 & v9;
  uint64_t v13 = v11 & v10;
  return *((unsigned __int8 *)a1 + 16) != sub_216D3BA90(&v14, 0, (uint64_t)&v14, 0xFu, &v13);
}

__n128 pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = a1[1].n128_u8[0] ^ 1;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = a1[1].n128_u8[0] ^ 1;
  return result;
}

uint64_t sub_216D805CC(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  char v8 = 1;
  if ((sub_216D5D158(a1, (uint64_t)v7) & 1) == 0)
  {
    uint64_t v4 = 1 << a2;
    if ((*(void *)a1 & (1 << a2)) != 0)
    {
      if ((BYTE4(a2) & 1) == ((*(void *)(a1 + 8) & v4) != 0))
      {
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 16) = 1;
      }
    }
    else
    {
      *(void *)a1 |= v4;
      if ((a2 & 0x100000000) != 0) {
        uint64_t v5 = *(void *)(a1 + 8) & ~v4;
      }
      else {
        uint64_t v5 = *(void *)(a1 + 8) | v4;
      }
      *(void *)(a1 + 8) = v5;
    }
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPrimRange::Stage@<W0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v5, (uint64_t)&v10);
  unint64_t v7 = v11;
  if (!v11 || (*((unsigned char *)v11 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v11, v6);
  }
  uint64_t v8 = *((void *)v7 + 4);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C((atomic_ullong *)v11);
  }
  uint64_t v10 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v10 + 1);
  sub_216D80B90(a3, v8, 0, &v10, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  BOOL result = sub_216D807A8((uint64_t *)a3);
  if (!result) {
    ++*(_DWORD *)(a3 + 48);
  }
  return result;
}

void sub_216D8076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216D807A8(uint64_t *a1)
{
  sub_216D3ADBC(a1, (uint64_t)v9);
  uint64_t v5 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
  BOOL v3 = 0;
  int v7 = 0;
  __int16 v8 = 0;
  if ((uint64_t *)v9[1] == a1)
  {
    if (v9[0] == v5)
    {
      BOOL v3 = 0;
      if (v10 == v6 && !v11 && !v12) {
        BOOL v3 = v13 == 0;
      }
    }
    else
    {
      BOOL v3 = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  if (*(void *)this == *(void *)(*((void *)this + 1) + 8))
  {
    unint64_t v9 = "usd/primRange.cpp";
    uint64_t v10 = "PruneChildren";
    uint64_t v11 = 56;
    char v12 = "void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren()";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Iterator past-the-end");
  }
  else if (*((unsigned char *)this + 29))
  {
    unint64_t v9 = "usd/primRange.cpp";
    uint64_t v10 = "PruneChildren";
    uint64_t v11 = 62;
    char v12 = "void pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren()";
    char v13 = 0;
    sub_216D3B00C((uint64_t)this, (uint64_t)v2);
    sub_216D0162C((uint64_t)v2, &v7);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot prune children during post-visit because thechildren have already been processed. Current node: %s", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
    sub_21697C414(&v4);
    if (v3) {
      sub_216D16E0C(v3);
    }
  }
  else
  {
    *((unsigned char *)this + 28) = 1;
  }
}

void sub_216D809C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D3B0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 8);
  BOOL v3 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(v2 + 8);
  if (*(unsigned char *)(this + 29))
  {
    *(unsigned char *)(this + 29) = 0;
    this = sub_216D5BD54((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)this, (int *)(this + 16), v3, (uint64_t *)(v2 + 24));
    if (this)
    {
      int v5 = *(_DWORD *)(v1 + 24);
      if (v5)
      {
        *(_DWORD *)(v1 + 24) = v5 - 1;
        *(unsigned char *)(v1 + 29) = 1;
      }
      else
      {
        *(void *)uint64_t v1 = v3;
        uint64_t v6 = 0;
        sub_2169C4380(&v6);
        sub_21697DE94((int *)(v1 + 16), (int *)&v6);
        sub_21697DEEC((int *)(v1 + 20), (int *)&v6 + 1);
        return (uint64_t)sub_21697B754(&v6);
      }
    }
  }
  else
  {
    if (!*(unsigned char *)(this + 28))
    {
      this = sub_216D5BC28((pxrInternal__aapl__pxrReserved__::UsdStage ***)this, (int *)(this + 16), *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(v2 + 8), (uint64_t *)(v2 + 24));
      if (this)
      {
        ++*(_DWORD *)(v1 + 24);
        return this;
      }
      uint64_t v2 = *(void *)(v1 + 8);
    }
    if (*(unsigned char *)(v2 + 52))
    {
      *(unsigned char *)(v1 + 29) = 1;
    }
    else
    {
      this = sub_216D5BD54((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)v1, (int *)(v1 + 16), v3, (uint64_t *)(v2 + 24));
      if (this)
      {
        while (1)
        {
          int v4 = *(_DWORD *)(v1 + 24);
          if (!v4) {
            break;
          }
          *(_DWORD *)(v1 + 24) = v4 - 1;
          this = sub_216D5BD54((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)v1, (int *)(v1 + 16), v3, (uint64_t *)(*(void *)(v1 + 8) + 24));
          if ((this & 1) == 0) {
            goto LABEL_13;
          }
        }
        *(void *)uint64_t v1 = v3;
        uint64_t v6 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
        sub_21697DE94((int *)(v1 + 16), (int *)&v6);
        sub_21697DEEC((int *)(v1 + 20), (int *)&v6 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
        this = (uint64_t)sub_21697C414(&v6);
      }
    }
LABEL_13:
    *(unsigned char *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t sub_216D80B90(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  sub_216D3B800(a1, a2, a3, a4, a5);
  return a1;
}

void sub_216D80C10(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::UsdPrimTypeInfo(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  *(void *)a2 = 0;
  a1[1] = *(void *)(a2 + 8);
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)(a1 + 1);
  *(void *)(a2 + 8) = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  a1[4] = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  int v4 = a1 + 5;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 5));
  a1[6] = 0;
  a1[8] = 0;
  a1[7] = 0;
  if (a1[1])
  {
    *int v4 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteTypeFromSchemaTypeName(v3, v5);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v9);
    uint64_t v6 = *v4;
    uint64_t v7 = v9;
  }
  else
  {
    if (!*a1) {
      return a1;
    }
    *int v4 = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)a1, v5);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v9);
    uint64_t v6 = *v4;
    uint64_t v7 = v9;
    BOOL v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)a1;
  }
  if (v6 != v7) {
    sub_2168D2318(a1 + 6, v3);
  }
  return a1;
}

void sub_216D80D20(_Unwind_Exception *a1)
{
  sub_216D11F60(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition(pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *this)
{
  uint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
  }
  BOOL v3 = (void *)((char *)this + 48);
  if (*((void *)this + 2) == *((void *)this + 3))
  {
    int v8 = sub_2168CB120((void *)(v2 + 32), v3);
    if (!v8 || (uint64_t v4 = v8[3]) == 0) {
      uint64_t v4 = *(void *)(v2 + 112);
    }
    *((void *)this + 7) = v4;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::BuildComposedPrimDefinition(v2, v3, (uint64_t)this + 16, &v10);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 7, (unint64_t *)&v4, (unint64_t)v10);
    if (!v4)
    {
      int v5 = v10;
      uint64_t v10 = 0;
      sub_216D12D3C((uint64_t *)this + 8, (uint64_t)v5);
      uint64_t v4 = *((void *)this + 8);
    }
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    if (v6)
    {
      uint64_t v7 = (void *)sub_216D12D7C((uint64_t)v6);
      operator delete(v7);
    }
  }
  return v4;
}

void *pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::GetEmptyPrimType(pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91BC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91BC8))
  {
    sub_216D80F64((uint64_t)&unk_267B91B80);
    __cxa_atexit((void (*)(void *))sub_216D80ED4, &unk_267B91B80, &dword_216758000);
    __cxa_guard_release(&qword_267B91BC8);
  }
  return &unk_267B91B80;
}

void sub_216D80EBC(_Unwind_Exception *a1)
{
}

uint64_t sub_216D80ED4(uint64_t a1)
{
  sub_216D12D3C((uint64_t *)(a1 + 64), 0);
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v5 = (void **)(a1 + 16);
  sub_216889A04(&v5);
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_216D80F64(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 40));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_216D80FA4(_Unwind_Exception *a1)
{
  sub_216D11F60(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack(pxrInternal__aapl__pxrReserved__ **a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7 = a1[1];
  if (!v7 || (*((unsigned char *)v7 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  }
  uint64_t v8 = *(void *)v7;

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetPropertyStack(v8, a1, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStackWithLayerOffsets(pxrInternal__aapl__pxrReserved__ **a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7 = a1[1];
  if (!v7 || (*((unsigned char *)v7 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  }
  uint64_t v8 = *(void *)v7;

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetPropertyStackWithLayerOffsets(v8, a1, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName@<X0>(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X8>)
{
  if ((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  std::string::value_type v5 = sub_216D33724();
  uint64_t result = std::string::rfind((const std::string *)EmptyString, v5, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v7 = result;
  if (*((char *)EmptyString + 23) < 0) {
    uint64_t v8 = EmptyString[1];
  }
  else {
    uint64_t v8 = *((unsigned __int8 *)EmptyString + 23);
  }
  if (result != v8 - 1
    || (v11[0] = "usd/property.cpp",
        v11[1] = "GetBaseName",
        void v11[2] = 51,
        void v11[3] = "TfToken pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName() const",
        char v12 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "delim != fullName.size()-1", 0), (result & 1) != 0))
  {
    if (v7 == -1)
    {
      uint64_t v9 = *((void *)this + 3);
      *(void *)a2 = v9;
      if ((v9 & 7) != 0)
      {
        uint64_t v10 = (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
          *(void *)a2 = v10;
        }
      }
    }
    else
    {
      if (*((char *)EmptyString + 23) < 0) {
        EmptyString = (uint64_t *)*EmptyString;
      }
      return pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2, (const char *)EmptyString + v7 + 1);
    }
  }
  else
  {
    *(void *)a2 = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, void *a2@<X8>)
{
  if ((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  std::string::value_type v4 = sub_216D33724();
  std::string::size_type v5 = std::string::rfind((const std::string *)EmptyString, v4, 0xFFFFFFFFFFFFFFFFLL);
  std::string::size_type v6 = v5;
  if (*((char *)EmptyString + 23) < 0) {
    uint64_t v7 = EmptyString[1];
  }
  else {
    uint64_t v7 = *((unsigned __int8 *)EmptyString + 23);
  }
  if (v5 == v7 - 1
    && (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/property.cpp",
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetNamespace",
        __p.__r_.__value_.__r.__words[2] = 65,
        uint64_t v9 = "TfToken pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace() const",
        char v10 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "delim != fullName.size()-1", 0) & 1) == 0)
    || v6 == -1)
  {
    *a2 = 0;
  }
  else
  {
    std::string::basic_string(&__p, (const std::string *)EmptyString, 0, v6, (std::allocator<char> *)&v11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216D812BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, uint64_t *a2@<X8>)
{
  if ((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }

  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier((unsigned __int8 *)EmptyString, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::GetDisplayGroup@<W0>(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::value_type v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    std::string::value_type v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  BOOL result = sub_216D24BF8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 104), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D813A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D24A4C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 104));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::ClearDisplayGroup(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 104));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::HasAuthoredDisplayGroup(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 104));
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::GetNestedDisplayGroups(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty::GetDisplayGroup(this, __p);
  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)__p, ":", a2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D81580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::SetNestedDisplayGroups(uint64_t a1, std::string **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, &__p);
  pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup(a1);
}

void sub_216D815F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::IsCustom(pxrInternal__aapl__pxrReserved__::UsdProperty *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  char v4 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_IsCustom(v4, this);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::SetCustom(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D2483C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 64));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  sub_216D16CFC((uint64_t)&v11, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8((uint64_t)&v11, v2);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v16, v3, 1);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
  if (v17 == v19 && v18 == v20) {
    return 0;
  }
  std::string::size_type v5 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)this + 24);
  do
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v21);
    uint64_t v11 = v17;
    char v12 = v18;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v5, &v9);
    uint64_t HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    if (HasSpec) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v16);
  }
  while (v17 != v19 || v18 != v20);
  return HasSpec;
}

void sub_216D8183C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthoredAt(pxrInternal__aapl__pxrReserved__::UsdProperty *this, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  char v4 = sub_21697CF14(a2);
  if (!(v5 & 1 | (unint64_t)v4)) {
    return 0;
  }
  sub_216D0162C((uint64_t)this, &v9);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v11))
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)a2);
    uint64_t HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  }
  else
  {
    uint64_t HasSpec = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  return HasSpec;
}

void sub_216D81928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)this + 1);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v7 = (atomic_uint **)sub_216D563F8(this);

  pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(this, a2, v7, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, atomic_uint **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 1);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(this, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::FlattenTo(pxrInternal__aapl__pxrReserved__::UsdProperty *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)this + 1);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  uint64_t v7 = (atomic_uint **)sub_216D563F8(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, v7, a3);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
}

void sub_216D81B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(uint64_t a1, int a2, uint64_t *a3, unsigned char *a4)
{
  if (a2 != 1 && a2 != 8)
  {
    std::string __p = "usd/property.cpp";
    unint64_t v40 = (atomic_uint *)"_GetTargets";
    uint64_t v41 = 184;
    uint64_t v42 = (atomic_uint *)"BOOL pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(SdfSpecType, SdfPathVector *, BOOL *) const";
    char v43 = 0;
    BOOL v8 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "specType == SdfSpecTypeAttribute || specType == SdfSpecTypeRelationship", 0) & 1) == 0)return v8; {
  }
    }
  int v10 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
  int v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v9 || (*((unsigned char *)v9 + 57) & 8) != 0) {
    return 0;
  }
  uint64_t v11 = *(void *)v9;
  uint64_t v12 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*(void *)v9 + 128);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  char v48 = 0;
  memset(v47, 0, sizeof(v47));
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v9);
  LayerStackuint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v12);
  sub_216D0162C(a1, (int *)&v37);
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&__p, LayerStackIdentifier, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
  sub_21697C414(&v37);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex((pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&v37);
  pxrInternal__aapl__pxrReserved__::PcpBuildPrimPropertyIndex((const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, v12, PrimIndex, &v37, (uint64_t)&v49);
  pxrInternal__aapl__pxrReserved__::PcpBuildTargetIndex((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&v37, a2, v47, (uint64_t)&v49);
  sub_2168BBAAC(&v38, 0);
  char v52 = (void **)&v37;
  sub_216BDCF18(&v52);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
  sub_21697C414(&v45);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v44);
  *(void *)&long long v37 = &v43;
  sub_216787968((void ***)&v37);
  unint64_t v16 = v42;
  if (v42 && atomic_fetch_add_explicit(v42 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v40;
  if (v40 && atomic_fetch_add_explicit(v40 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v17 + 8))(v17);
  }
  if (*(void *)&v47[0] == *((void *)&v47[0] + 1))
  {
    int64x2_t v20 = vdupq_n_s64(*(unint64_t *)&v47[0]);
  }
  else
  {
    float v18 = *v10;
    if (!*v10 || (uint64_t v19 = *((void *)v18 + 7), (v19 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*v10, v15);
      uint64_t v19 = *((void *)v18 + 7);
    }
    if ((v19 & 0x1000) != 0)
    {
      sub_216D16CFC((uint64_t)&__p, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdPrim::_GetProtoToInstancePathMap((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, v23, (uint64_t *)&v37);
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
      sub_21697C414(&v41);
      if (v40) {
        sub_216D16E0C((atomic_ullong *)v40);
      }
      unint64_t v25 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v47[0] + 1);
      for (uint64_t i = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)&v47[0];
            i != v25;
            uint64_t i = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::_ProtoToInstancePathMap::MapProtoToInstance((char **)&v37, i, (int *)&__p);
        unint64_t v26 = a3[1];
        if (v26 >= a3[2])
        {
          uint64_t v27 = sub_216AE5CE4(a3, &__p);
        }
        else
        {
          sub_21697D878((_DWORD *)a3[1], &__p);
          sub_21697D8B4((_DWORD *)(v26 + 4), (_DWORD *)&__p + 1);
          uint64_t v27 = v26 + 8;
        }
        a3[1] = v27;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3[1] - 8)))
        {
          uint64_t v28 = (_DWORD *)(a3[1] - 8);
          sub_216981128((uint64_t)(a3 + 2), v28);
          a3[1] = (uint64_t)v28;
        }
      }
      std::string __p = &v37;
      sub_216BECE18((void ***)&__p);
      goto LABEL_33;
    }
    int64x2_t v20 = (int64x2_t)v47[0];
  }
  long long v21 = *(_OWORD *)a3;
  *(int64x2_t *)a3 = v20;
  v47[0] = v21;
  uint64_t v22 = a3[2];
  a3[2] = *(void *)&v47[1];
  *(void *)&v47[1] = v22;
LABEL_33:
  uint64_t v29 = v49;
  uint64_t v30 = v50;
  if (v49 != v50)
  {
    if (a2 == 1) {
      std::string::size_type v31 = "getting connections for attribute <%s>";
    }
    else {
      std::string::size_type v31 = "getting targets for relationship <%s>";
    }
    sub_216D0162C(a1, (int *)&v37);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v31, v33, v34, Text);
    pxrInternal__aapl__pxrReserved__::UsdStage::_ReportPcpErrors(v11, &v49, (uint64_t *)&__p);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_21697C414(&v37);
    if (a4) {
      *a4 = 1;
    }
  }
  BOOL v8 = v29 == v30 && v48 != 0;
  std::string __p = (char *)&v47[1] + 8;
  sub_216787968((void ***)&__p);
  std::string __p = v47;
  sub_216981168((void ***)&__p);
  std::string __p = &v49;
  sub_216787968((void ***)&__p);
  return v8;
}

void sub_216D81F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  sub_216D16AD8((uint64_t)&__p);
  sub_216BD815C(&a28);
  std::string __p = (void *)(v28 - 128);
  sub_216787968((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  uint64_t v1 = (atomic_uint **)sub_216A663FC(a1);

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v1);
}

BOOL sub_216D8208C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, long long *a2, int a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))
  {
    sub_2169D5338((char *)&__p, a2);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v21);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v21);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    char v9 = sub_216D82EE4((uint64_t)&__p, EditTarget);
    int v10 = v22;
    if (v22
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v22->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v10->~__shared_weak_count_0)(v10);
    }
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_216D82FD0(a1, v11, &v21);
      if (v21
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v21 + 8)) & 1) == 0)
      {
        uint64_t v17 = v21;
        float v18 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_216D83100(&v17, &__p, a3);
        if (v18) {
          sub_216784EC4(v18);
        }
        unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v14) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v15 = v19;
        unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
        BOOL v12 = v15 >= v16
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19, (atomic_ullong *)v14);
      }
      else
      {
        BOOL v12 = 0;
      }
      if (v22) {
        sub_216784EC4(v22);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    }
    else
    {
      BOOL v12 = 0;
    }
    sub_2168EBBB8(&v27, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_21697C414(&v25);
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(void *)&long long __p = "usd/listEditImpl.h";
    *((void *)&__p + 1) = "Add";
    uint64_t v24 = 117;
    unint64_t v25 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Add(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditorType = pxrInternal"
          "__aapl__pxrReserved__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<p"
          "xrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy>]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v12;
}

void sub_216D82294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  int v10 = va_arg(va2, std::__shared_weak_count *);
  if (a4) {
    sub_216784EC4(a4);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_2169D5474((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, a2, a3, a4, &v9);
  sub_2168EBBB8(&v9, 0);
  BOOL v7 = sub_216D8208C(a1, (long long *)__p, a5);
  sub_2168EBBB8(&v14, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(&v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_216D823E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v11 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
  int v10 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, a2, &v11, a3, &v10);
  sub_2168EBBB8(&v10, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  BOOL v8 = sub_216D8208C(a1, (long long *)__p, a4);
  sub_2168EBBB8(&v16, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
  sub_21697C414(&v14);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_216D824F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  BOOL v8 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v11, __p, a2, a3, &v8);
  sub_2168EBBB8(&v8, 0);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  BOOL v6 = sub_216D8208C(a1, (long long *)v11, a4);
  sub_2168EBBB8(&v15, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v14);
  sub_21697C414(&v13);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return v6;
}

void sub_216D825F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

BOOL sub_216D8262C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, long long *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))
  {
    sub_2169D5338((char *)__p, a2);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v20);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v20);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    char v7 = sub_216D82EE4((uint64_t)__p, EditTarget);
    BOOL v8 = v21;
    if (v21
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v21->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v8->~__shared_weak_count_0)(v8);
    }
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_216D82FD0(a1, v9, &v20);
      if (v20
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v20 + 8)) & 1) == 0)
      {
        sub_216D8391C(&v20, (unsigned __int8 *)__p);
        unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v15) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v16 = v18;
        unint64_t v17 = atomic_load((unint64_t *)(v15 + 144));
        BOOL v10 = v16 >= v17
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (atomic_ullong *)v15);
      }
      else
      {
        BOOL v10 = 0;
      }
      if (v21) {
        sub_216784EC4(v21);
      }
      uint64_t v11 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v11) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      char v12 = sub_216862604(&v18, 0);
      LOBYTE(v20) = 0;
      int v13 = (void *)sub_2168520EC(v11 + 19, &v20);
      if (v13 != v12) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
    }
    else
    {
      BOOL v10 = 0;
    }
    sub_2168EBBB8(&v26, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_21697C414(&v24);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    __p[0] = "usd/listEditImpl.h";
    __p[1] = "Remove";
    uint64_t v23 = 148;
    uint64_t v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Remove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditorType = pxrInternal__aapl__pxrRes"
          "erved__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aa"
          "pl__pxrReserved__::SdfReferenceTypePolicy>]";
    char v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v10;
}

void sub_216D82858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_2169D5474((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL sub_216D828F8(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_216D82FD0(a1, v3, &v14);
    if (v14
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v14 + 1) & 1) == 0
      && sub_216ABDD60((uint64_t)&v14)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v14 + 6))(v14))
    {
      unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v5 = v12;
      unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
      BOOL v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (atomic_ullong *)v4);
    }
    else
    {
      BOOL v7 = 0;
    }
    if (v15) {
      sub_216784EC4(v15);
    }
    uint64_t v8 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    uint64_t v9 = sub_216862604(&v12, 0);
    LOBYTE(v14) = 0;
    BOOL v10 = (void *)sub_2168520EC(v8 + 19, &v14);
    if (v10 != v9) {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v8, v9, v10);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
  else
  {
    int v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    unint64_t v15 = (std::__shared_weak_count *)"Clear";
    uint64_t v16 = 174;
    unint64_t v17 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Clear(const UsdListEditorType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::UsdReferences, Li"
          "stOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfRefe"
          "renceTypePolicy>]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_216D82A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_216D82ADC(pxrInternal__aapl__pxrReserved__::UsdObject *a1, long long **a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &__p);
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&__p);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    uint64_t v7 = *((void *)&__p + 1);
    if (*((void *)&__p + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__p + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v34);
    std::string::size_type v31 = 0;
    unint64_t v32 = 0;
    unint64_t v33 = 0;
    sub_216D83D10((uint64_t *)&v31, 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        sub_2169D5338((char *)&__p, v8);
        if (sub_216D82EE4((uint64_t)&__p, EditTarget))
        {
          BOOL v10 = v32;
          if ((unint64_t)v32 >= v33)
          {
            uint64_t v11 = (char *)sub_216AE6EA0((uint64_t *)&v31, &__p);
          }
          else
          {
            sub_2169D5338(v32, &__p);
            uint64_t v11 = v10 + 56;
          }
          unint64_t v32 = v11;
        }
        sub_2168EBBB8(&v30, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
        sub_21697C414(&v28);
        if (SHIBYTE(v27) < 0) {
          operator delete((void *)__p);
        }
        uint64_t v8 = (long long *)((char *)v8 + 56);
      }
      while (v8 != v9);
    }
    unint64_t v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v13 = v34;
    unint64_t v14 = atomic_load((unint64_t *)(v12 + 144));
    if (v13 >= v14
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v34, (atomic_ullong *)v12))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
      sub_216D82FD0(a1, v15, &v24);
      if ((void)v24
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v24 + 8)) & 1) == 0)
      {
        if (v31 == v32)
        {
          if (sub_216ABDD60((uint64_t)&v24)) {
            (*(void (**)(void))(*(void *)v24 + 56))(v24);
          }
        }
        else
        {
          long long __p = v24;
          if (*((void *)&v24 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          LODWORD(v27) = 0;
          sub_216D83DD0((unsigned int *)&__p, &v31);
          if (*((void *)&__p + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&__p + 1));
          }
        }
      }
      if (*((void *)&v24 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v24 + 1));
      }
      unint64_t v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v17) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v18 = v34;
      unint64_t v19 = atomic_load((unint64_t *)(v17 + 144));
      BOOL v16 = v18 >= v19
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v34, (atomic_ullong *)v17);
      uint64_t v20 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v20) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      uint64_t v21 = sub_216862604(&v34, 0);
      LOBYTE(v24) = 0;
      uint64_t v22 = (void *)sub_2168520EC(v20 + 19, &v24);
      if (v22 != v21) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v20, v21, v22);
      }
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
    }
    else
    {
      BOOL v16 = 0;
    }
    *(void *)&long long __p = &v31;
    sub_2169CC68C((void ***)&__p);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v34);
  }
  else
  {
    *(void *)&long long __p = "usd/listEditImpl.h";
    *((void *)&__p + 1) = "Set";
    uint64_t v27 = 195;
    uint64_t v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdReferences"
          ", pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolic"
          "y>>::Set(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditorType = pxrInternal__aapl__pxrRese"
          "rved__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aap"
          "l__pxrReserved__::SdfReferenceTypePolicy>]";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v16;
}

void sub_216D82E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, void **a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a13) {
    sub_216784EC4(a13);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a11);
  a12 = (void **)&a19;
  sub_2169CC68C(&a12);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v19 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_216D82EE4(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      return 1;
    }
LABEL_5:
    unint64_t v5 = (int *)(a1 + 24);
    sub_216981010(&v8, (_DWORD *)(a1 + 24));
    unint64_t v6 = (int *)(a1 + 28);
    sub_21698105C(&v9, v6);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
    {
      if ((sub_216D54248(&v8, a2) & 1) == 0)
      {
        uint64_t v4 = 0;
        goto LABEL_10;
      }
      sub_2169C487C(v5, &v8);
      sub_2169C48D4(v6, &v9);
    }
    uint64_t v4 = 1;
LABEL_10:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    return v4;
  }
  if (!*(unsigned char *)(a1 + 23)) {
    goto LABEL_5;
  }
  return 1;
}

void sub_216D82FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D82FD0@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (unint64_t v12 = "usd/listEditImpl.h",
        unint64_t v13 = "_GetListEditor",
        uint64_t v14 = 238,
        unint64_t v15 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdReferences, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::Sd"
              "fReferenceTypePolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditorType = pxrInternal__aapl__pxrReserve"
              "d__::UsdReferences, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aa"
              "pl__pxrReserved__::SdfReferenceTypePolicy>]",
        char v16 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v12);
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v12);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v11);
    uint64_t v7 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11))
    {
      int v9 = (atomic_uint **)sub_216A663FC(&v11);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v9);
    }
    *a3 = 0;
    a3[1] = 0;
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_216D830D8(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_216D83100(void *a1, long long *a2, int a3)
{
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  int v18 = 0;
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v5;
      int v7 = 1;
      goto LABEL_9;
    case 1:
      uint64_t v8 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 0;
      uint64_t v16 = v8;
LABEL_9:
      int v9 = 4;
      goto LABEL_17;
    case 2:
      uint64_t v10 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v10;
      int v7 = 1;
      goto LABEL_16;
    case 3:
      uint64_t v11 = *a1;
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 0;
      uint64_t v16 = v11;
LABEL_16:
      int v9 = 5;
LABEL_17:
      unint64_t v17 = v6;
      int v18 = v9;
      break;
    default:
      unint64_t v6 = 0;
      int v7 = 0;
      break;
  }
  if (!sub_216ABA91C((uint64_t)a1) || (*(unsigned int (**)(void))(*(void *)*a1 + 16))())
  {
    uint64_t v13 = *a1;
    unint64_t v12 = (std::__shared_weak_count *)a1[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = v13;
    unint64_t v17 = v12;
    if (v6) {
      sub_216784EC4(v6);
    }
    int v18 = 0;
  }
  if (!sub_216D83444((uint64_t)&v16))
  {
    sub_216D83310((unsigned int *)&v16, -1, a2);
    goto LABEL_34;
  }
  uint64_t v14 = sub_216D833EC((uint64_t)&v16, (unsigned __int8 *)a2);
  if (v14 == -1) {
    goto LABEL_33;
  }
  if (v7) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = sub_216D83444((uint64_t)&v16) - 1;
  }
  if (v14 != v15)
  {
    sub_216D834C4((unsigned int *)&v16, v14);
LABEL_33:
    sub_216D83310((unsigned int *)&v16, v7 - 1, a2);
  }
LABEL_34:
  if (v17) {
    sub_216784EC4(v17);
  }
}

void sub_216D832E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D83310(unsigned int *a1, int a2, long long *a3)
{
  if (a2 == -1)
  {
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 112))(v5, a1[4]);
      a2 = -1227133513 * ((v6[1] - *v6) >> 3);
    }
    else
    {
      a2 = 0;
    }
  }
  uint64_t v7 = a2;
  sub_216D8373C(v8, 1uLL, a3);
  sub_216D83528(a1, v7, 0, v8);
  int v9 = (void **)v8;
  sub_2169CC68C(&v9);
}

void sub_216D833D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D833EC(uint64_t a1, unsigned __int8 *a2)
{
  if (!sub_216D837E8(a1)) {
    return -1;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);

  return sub_216D83860(v4, v5, a2);
}

uint64_t sub_216D83444(uint64_t a1)
{
  if (!sub_216D837E8(a1)) {
    return 0;
  }
  uint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

void sub_216D834C4(unsigned int *a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  sub_216D83528(a1, a2, 1, v2);
  uint64_t v3 = (void **)v2;
  sub_2169CC68C(&v3);
}

void sub_216D8350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_2169CC68C(&a12);
  _Unwind_Resume(a1);
}

void sub_216D83528(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sub_216D836C4((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 32))(__p);
      if (v17)
      {
        uint64_t v10 = "sdf/listProxy.h";
        uint64_t v11 = "_Edit";
        uint64_t v12 = 750;
        uint64_t v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePoli"
              "cy>::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::Sdf"
              "ReferenceTypePolicy]";
        char v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0) {
          int v9 = (const char *)WhyNot;
        }
        else {
          int v9 = (const char *)*WhyNot;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, void *))(**(void **)a1 + 80))(*(void *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = "sdf/listProxy.h";
      uint64_t v11 = "_Edit";
      uint64_t v12 = 758;
      uint64_t v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy"
            ">::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfRefe"
            "renceTypePolicy]";
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_216D836A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D836C4(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy"
            ">::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void *sub_216D8373C(void *a1, unint64_t a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2167B8760(a1, a2);
    unint64_t v6 = (char *)a1[1];
    uint64_t v7 = 56 * a2;
    uint64_t v8 = &v6[56 * a2];
    do
    {
      sub_2169D5338(v6, a3);
      v6 += 56;
      v7 -= 56;
    }
    while (v7);
    a1[1] = v8;
  }
  return a1;
}

void sub_216D837C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_216D837E8(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy"
            ">::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_216D83860(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = (void *)v4;
  unint64_t v6 = *(unsigned __int8 **)v4;
  uint64_t v7 = *(unsigned __int8 **)(v4 + 8);
  if (*(unsigned __int8 **)v4 == v7)
  {
    uint64_t v8 = *(unsigned __int8 **)v4;
  }
  else
  {
    while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v6, a3) & 1) == 0)
    {
      v6 += 56;
      if (v6 == v7)
      {
        unint64_t v6 = v7;
        break;
      }
    }
    uint64_t v8 = v6;
    unint64_t v6 = (unsigned __int8 *)v5[1];
  }
  if (v8 == v6) {
    return -1;
  }
  else {
    return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v8[-*v5] >> 3);
  }
}

void sub_216D8391C(uint64_t *a1, unsigned __int8 *a2)
{
  if (sub_216ABDD60((uint64_t)a1))
  {
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))())
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 0;
      sub_216D83ABC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
    }
    else if (((*(uint64_t (**)(void))(*(void *)*a1 + 24))() & 1) == 0)
    {
      uint64_t v5 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 1;
      sub_216D83ABC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      unint64_t v6 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 4;
      sub_216D83ABC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 5;
      sub_216D83ABC((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      sub_216D83BB0(a1, 2, (long long *)a2);
    }
  }
}

void sub_216D83A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D83ABC(unsigned int *a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_216D833EC((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(void *)a1)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void, void))(**(void **)a1 + 112))(*(void *)a1, a1[4]);
      uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4[1] - *v4) >> 3);
    }
    else
    {
      uint64_t v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_216D83528(a1, v5, 0, v6);
    uint64_t v7 = (void **)v6;
    sub_2169CC68C(&v7);
  }
  else
  {
    sub_216D834C4(a1, v3);
  }
}

void sub_216D83B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216D83BB0(uint64_t *a1, int a2, long long *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = a2;
  if (sub_216D833EC((uint64_t)&v5, (unsigned __int8 *)a3) == -1) {
    sub_216D83C38((unsigned int *)&v5, a3);
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216D83C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D83C38(unsigned int *a1, long long *a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[1] - *v5) >> 3);
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216D8373C(v7, 1uLL, a2);
  sub_216D83528(a1, v6, 0, v7);
  uint64_t v8 = (void **)v7;
  sub_2169CC68C(&v8);
}

void sub_216D83CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_216D83D10(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2167B421C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 56 * v6;
    sub_216AE6FC0(a1, v7);
    return sub_216AE6D78(v7);
  }
  return result;
}

void sub_216D83DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE6D78((void **)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_216D83DD0(unsigned int *a1, void *a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[1] - *v5) >> 3);
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216D83528(a1, 0, v6, a2);
  return a1;
}

double pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring@<D0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X2>, int *a4@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)) {
    goto LABEL_7;
  }
  sub_216D0162C(a1, &v33);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v35);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (int *)&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_21697C414(&v35);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_21697C414(&v33);
  BOOL IsPathInPrototype = pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)&v25, v9);
  BOOL v11 = IsPathInPrototype;
  if (IsPathInPrototype)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Cannot target a prototype or an object within a prototype.");
    }
    *(void *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_21697C414(&v25);
  if (!v11)
  {
LABEL_7:
    uint64_t v13 = *(void *)(a1 + 8);
    if (!v13 || (*(unsigned char *)(v13 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v8);
    }
    char v14 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v13;
    sub_216D0162C(a1, &v27);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v14);
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
    {
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, a2, &v25);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, a4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, &v25);
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v33);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (int *)&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_21697C414(&v33);
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v29);
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v31);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v33);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
      sub_21697C414(&v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      sub_21697C414(&v29);
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v35, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_21697C414(&v33);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
      sub_21697C414(&v35);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_21697C414(&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
    BOOL v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (a3) {
      char v17 = v16;
    }
    else {
      char v17 = 1;
    }
    if ((v17 & 1) == 0)
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      uint64_t v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v14);
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v19);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v20);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v24 = Identifier;
      }
      else {
        uint64_t v24 = *(void *)Identifier;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot map <%s> to layer @%s@ via stage's EditTarget", v22, v23, Text, v24);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      double result = *(double *)&v25;
      *(_OWORD *)a3 = v25;
      *(void *)(a3 + 16) = v26;
    }
  }
  return result;
}

void sub_216D84138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_21697B754((int *)va2);
  sub_21697B754((_DWORD *)(v3 - 56));
  sub_21697B754((uint64_t *)va);
  sub_21697B754((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget(pxrInternal__aapl__pxrReserved__::UsdRelationship *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring((uint64_t)a1, a2, (uint64_t)v21, &v19);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v19))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
    int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v16);
    if ((IsDormant & 1) == 0)
    {
      uint64_t v8 = (atomic_uint **)sub_216A67AC0(&v16);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v8, &v14);
      sub_216D1C358(&v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, a3);
      if (v15) {
        sub_216784EC4(v15);
      }
    }
    uint64_t v9 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v6, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
  else
  {
    v17[0] = "usd/relationship.cpp";
    v17[1] = "AddTarget";
    v17[2] = 110;
    v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget(const SdfPath &, UsdListPosition) const";
    char v18 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_216D0162C((uint64_t)a1, (int *)&v16);
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
    uint64_t v12 = (const char *)v21;
    if (v22 < 0) {
      uint64_t v12 = (const char *)v21[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot add target <%s> to relationship <%s>: %s", Text, v11, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
    sub_21697C414(&v16);
    uint64_t v9 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  return v9;
}

void sub_216D84380(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  if (a8) {
    sub_216784EC4(a8);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_21697B754((_DWORD *)(v8 - 64));
  if (*(char *)(v8 - 33) < 0) {
    operator delete(*(void **)(v8 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_216D843FC()
{
}

void pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(pxrInternal__aapl__pxrReserved__::UsdRelationship *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfSpec *a3@<X8>)
{
  char v3 = (char)a2;
  uint64_t v6 = (uint64_t *)((char *)this + 8);
  uint64_t v7 = *((void *)this + 1);
  if (!v7 || (*(unsigned char *)(v7 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v7;
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreateRelationshipSpecForEditing(v8, this);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, a3);
    unint64_t v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v10) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v11 = v23;
    unint64_t v12 = atomic_load((unint64_t *)(v10 + 144));
    if (v11 >= v12
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23, (atomic_ullong *)v10))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
      sub_216D16CFC((uint64_t)v16, v6, (_DWORD *)this + 4);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v16, &v21);
      if ((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*((void *)this + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      }
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(&v21, (uint64_t)EmptyString, v3, 1, a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v21);
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      if (v17) {
        sub_216D16E0C(v17);
      }
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
    }
    else
    {
      *(void *)a3 = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
}

void sub_216D84584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  sub_216D16AD8((uint64_t)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget(pxrInternal__aapl__pxrReserved__::UsdRelationship *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring((uint64_t)this, a2, (uint64_t)v22, &v20);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v20))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v12);
    if ((IsDormant & 1) == 0)
    {
      uint64_t v6 = (atomic_uint **)sub_216A67AC0(&v12);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v6, &v15);
      sub_216D1C758((uint64_t *)&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
      if (v16) {
        sub_216784EC4(v16);
      }
    }
    uint64_t v7 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v13);
  }
  else
  {
    uint64_t v15 = "usd/relationship.cpp";
    BOOL v16 = (std::__shared_weak_count *)"RemoveTarget";
    uint64_t v17 = 138;
    int v18 = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget(const SdfPath &) const";
    char v19 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_216D0162C((uint64_t)this, &v13);
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
    unint64_t v10 = (const char *)v22;
    if (v23 < 0) {
      unint64_t v10 = (const char *)v22[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove target <%s> from relationship <%s>: %s", Text, v9, v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    uint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  return v7;
}

void sub_216D84748(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, char a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a6);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a8);
  sub_21697B754((_DWORD *)(v10 - 48));
  if (*(char *)(v10 - 17) < 0) {
    operator delete(*(void **)(v10 - 40));
  }
  _Unwind_Resume(a1);
}

void sub_216D847C8()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v28 = 0;
  int v29 = 0;
  unint64_t v30 = 0;
  sub_216A6E72C(&v28, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_9:
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v18);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
    int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v17);
    if ((IsDormant & 1) == 0)
    {
      uint64_t v10 = (atomic_uint **)sub_216A67AC0(&v17);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v10, &v20);
      if (sub_216A5F518((uint64_t)&v20)) {
        (*v20)[7]((void **)v20);
      }
      if (v21) {
        sub_216784EC4(v21);
      }
      unint64_t v11 = (atomic_uint **)sub_216A67AC0(&v17);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v11, &__p);
      int v20 = (void (***)(void **))__p;
      int v21 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(v22) = 0;
      sub_216D1CC48((unsigned int *)&v20, &v28);
      if (v21) {
        sub_216784EC4(v21);
      }
      if (v26) {
        sub_216784EC4(v26);
      }
    }
    uint64_t v12 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v18);
  }
  else
  {
    while (1)
    {
      long long __p = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetTargetForAuthoring((uint64_t)a1, v4, (uint64_t)&__p, (int *)&v20);
      uint64_t v6 = v29;
      if ((unint64_t)v29 >= v30)
      {
        uint64_t v7 = (_DWORD *)sub_216AE5CE4(&v28, &v20);
      }
      else
      {
        sub_21697D878(v29, &v20);
        sub_21697D8B4(v6 + 1, (_DWORD *)&v20 + 1);
        uint64_t v7 = v6 + 2;
      }
      int v29 = v7;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
      sub_21697C414(&v20);
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v29 - 2)) {
        break;
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(__p);
      }
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
      if (v4 == v5) {
        goto LABEL_9;
      }
    }
    int v20 = (void (***)(void **))"usd/relationship.cpp";
    int v21 = (std::__shared_weak_count *)"SetTargets";
    uint64_t v22 = 169;
    uint64_t v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets(const SdfPathVector &) const";
    char v24 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v4);
    sub_216D0162C((uint64_t)a1, &v18);
    int v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
    p_p = (const char *)&__p;
    if (v27 < 0) {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set target <%s> on relationship <%s>: %s", Text, v14, p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p);
    }
    uint64_t v12 = 0;
  }
  int v20 = (void (***)(void **))&v28;
  sub_216981168((void ***)&v20);
  return v12;
}

void sub_216D84A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  a17 = v27 - 72;
  sub_216981168((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
  int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v18);
  if ((IsDormant & 1) == 0)
  {
    if (a2)
    {
      uint64_t v6 = sub_216A67AC0(&v18);
      pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetOwner((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v6, &v16);
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v16, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C7580A8, v7))
      {
        int v14 = v16;
        if (v16)
        {
          atomic_fetch_add((atomic_uint *volatile)v16, 1u);
          uint64_t v17 = v14;
          unint64_t add = (void *)atomic_fetch_add((atomic_uint *volatile)v14, 1u);
        }
        else
        {
          uint64_t v17 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
      }
      else
      {
        uint64_t v17 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
      uint64_t v10 = sub_216A663FC(&v17);
      int v14 = v18;
      if (v18) {
        atomic_fetch_add((atomic_uint *volatile)v18, 1u);
      }
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(v10, &v14);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v12, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
    }
    else
    {
      uint64_t v9 = (atomic_uint **)sub_216A67AC0(&v18);
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v9, &v14);
      if (sub_216A5F518((uint64_t)&v14)) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity *))(*(void *)v14 + 48))(v14);
      }
      if (v15) {
        sub_216784EC4(v15);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
  return IsDormant ^ 1u;
}

void sub_216D84C84(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, char a5, int a6, __int16 a7, char a8, char a9, int a10, __int16 a11, char a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a11);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v13 - 24));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets(uint64_t a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(a1, 8, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargetsImpl(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, unsigned char *a5, unsigned int a6)
{
  uint64_t v42 = 0;
  char v43 = 0;
  uint64_t v44 = 0;
  BOOL Targets = pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets((uint64_t)a1, 8, (uint64_t *)&v42, a5);
  uint64_t v10 = v42;
  unint64_t v11 = v43;
  if (v42 == v43)
  {
    LOBYTE(v12) = Targets;
  }
  else
  {
    int v12 = 0;
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v10)) {
        goto LABEL_25;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v13, &v30);
      int v14 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v30);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v10, &v35);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, (uint64_t)&v37);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_21697C414(&v35);
      BOOL v16 = v31;
      if (v31 && atomic_fetch_add_explicit(v31 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v15))goto LABEL_19; {
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v37, NameToken, (uint64_t)&v30);
      if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v30, v18))goto LABEL_12; {
      sub_216D0162C((uint64_t)&v30, &v35);
      }
      sub_216D3B53C(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, &v35);
      char v20 = v19;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_21697C414(&v35);
      if (v20) {
        v12 |= pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargetsImpl(&v30, a2, a3, a4, a5, a6);
      }
      if (!a6)
      {
        char v22 = 0;
        int v21 = 3;
      }
      else
      {
LABEL_12:
        int v21 = 0;
        char v22 = 1;
      }
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_21697C414(&v32);
      if (v31) {
        sub_216D16E0C((atomic_ullong *)v31);
      }
      if (v22) {
LABEL_19:
      }
        int v21 = 0;
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
      sub_21697C414(&v39);
      if (v38) {
        sub_216D16E0C(v38);
      }
      if (!v21)
      {
LABEL_25:
        sub_216A5CF30(a3, v10, v10);
        if (v23)
        {
          unint64_t v24 = a4[1];
          if (v24 >= a4[2])
          {
            uint64_t v25 = sub_216981B30(a4, v10);
          }
          else
          {
            sub_216981010((_DWORD *)a4[1], v10);
            sub_21698105C((_DWORD *)(v24 + 4), (_DWORD *)v10 + 1);
            uint64_t v25 = v24 + 8;
          }
          a4[1] = v25;
        }
        int v12 = 1;
      }
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
    }
    while (v10 != v11);
  }
  long long v37 = &v42;
  sub_216981168((void ***)&v37);
  return v12 & 1;
}

void sub_216D84FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)(v20 - 104);
  sub_216981168(&a20);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargets(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2, unsigned int a3)
{
  v10[0] = 0;
  v10[1] = 0;
  v8[1] = 0;
  uint64_t v9 = (uint64_t *)v10;
  uint64_t v7 = (uint64_t *)v8;
  v8[0] = 0;
  char v6 = 0;
  unsigned int ForwardedTargetsImpl = pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargetsImpl(a1, &v9, &v7, a2, &v6, a3);
  if (v6) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ForwardedTargetsImpl;
  }
  sub_216981EE8((uint64_t)&v7, v8[0]);
  sub_216981EE8((uint64_t)&v9, v10[0]);
  return v4;
}

void sub_216D85120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = (_DWORD *)a2[1];
    if (v4 != (_DWORD *)*a2)
    {
      do
      {
        v4 -= 2;
        sub_216981128((uint64_t)(a2 + 2), v4);
      }
      while (v4 != (_DWORD *)v5);
    }
    a2[1] = v5;
    return pxrInternal__aapl__pxrReserved__::UsdRelationship::_GetForwardedTargets(a1, a2, 0);
  }
  else
  {
    v10[0] = "usd/relationship.cpp";
    v10[1] = "GetForwardedTargets";
    v10[2] = 296;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(SdfPathVector *) const";
    char v11 = 0;
    sub_216D0162C((uint64_t)a1, &v8);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Passed null pointer for targets on <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    return 0;
  }
}

void sub_216D85254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 424));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::_Create(pxrInternal__aapl__pxrReserved__::UsdRelationship *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdRelationship::_CreateSpec(this, a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v5) ^ 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v3, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  return v2;
}

void sub_216D85304(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_216D85318()
{
  sub_216779094(v2, "UsdResolveInfoSourceNone");
  sub_216779094(__p, "No value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7696F0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdResolveInfoSourceFallback");
  sub_216779094(__p, "Built-in fallback value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7696F0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdResolveInfoSourceDefault");
  sub_216779094(__p, "Attribute default value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7696F0, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdResolveInfoSourceTimeSamples");
  sub_216779094(__p, "Attribute time samples");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7696F0, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdResolveInfoSourceValueClips");
  sub_216779094(__p, "Value clips");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7696F0, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216D854F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, uint64_t *a4)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(*(uint64_t **)a2, 6u, (uint64_t *)(a1 + 16));
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_217455290;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 32);
  uint64_t NodeIteratorAtNode = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2, a3);
  *(void *)(a1 + 48) = NodeIteratorAtNode;
  *(void *)(a1 + 56) = v10;
  if (*(void *)(a1 + 32) != NodeIteratorAtNode || v10 != *(void *)(a1 + 40))
  {
    v12[0] = NodeIteratorAtNode;
    v12[1] = v10;
    *(void *)(a1 + 64) = sub_216D85630((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v12, a4);
  }
  return a1;
}

void sub_216D85610(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D85630(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t *a2)
{
  uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v4);
  char v6 = sub_21697CF14(a2);
  uint64_t v8 = (void *)*Layers;
  if (v7 & 1 | (unint64_t)v6)
  {
    while (v8 != (void *)Layers[1])
    {
      if (sub_216ABA3A0(a2, v8)) {
        return v8;
      }
      ++v8;
    }
    v10[0] = "usd/resolveTarget.cpp";
    v10[1] = "_GetLayerIteratorInNode";
    v10[2] = 50;
    v10[3] = "SdfLayerRefPtrVector::const_iterator pxrInternal__aapl__pxrReserved__::_GetLayerIteratorInNode(const PcpNod"
             "eRef &, const SdfLayerHandle &)";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer not present in node");
    return (void *)*Layers;
  }
  return v8;
}

void *pxrInternal__aapl__pxrReserved__::UsdResolveTarget::UsdResolveTarget(void *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a5, uint64_t *a6)
{
  *a1 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  a1[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(*(uint64_t **)a2, 6u, a1 + 2);
  a1[8] = 0;
  a1[6] = 0;
  a1[7] = -1;
  a1[9] = 0;
  a1[10] = -1;
  a1[11] = 0;
  if (!*(void *)a5 || *((void *)a5 + 1) == -1)
  {
    uint64_t NodeIteratorAtNode = a1[4];
    uint64_t v15 = a1[5];
    uint64_t v16 = NodeIteratorAtNode;
    uint64_t v14 = v15;
  }
  else
  {
    uint64_t NodeIteratorAtNode = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2, a5);
    uint64_t v16 = a1[4];
    uint64_t v15 = a1[5];
  }
  a1[9] = NodeIteratorAtNode;
  a1[10] = v14;
  if (v16 != NodeIteratorAtNode || v14 != v15)
  {
    uint64_t v20 = NodeIteratorAtNode;
    uint64_t v21 = v14;
    a1[11] = sub_216D85630((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v20, a6);
  }
  uint64_t v17 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2, a3);
  a1[6] = v17;
  a1[7] = v18;
  if (a1[4] != v17 || v18 != a1[5])
  {
    uint64_t v20 = v17;
    uint64_t v21 = v18;
    a1[8] = sub_216D85630((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v20, a4);
  }
  return a1;
}

void sub_216D8582C(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStartNode(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this)
{
  if (*((void *)this + 6) == *((void *)this + 4) && *((void *)this + 7) == *((void *)this + 5)) {
    return 0;
  }
  else {
    return *((void *)this + 6);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStopNode(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this)
{
  if (*((void *)this + 9) == *((void *)this + 4) && *((void *)this + 10) == *((void *)this + 5)) {
    return 0;
  }
  else {
    return *((void *)this + 9);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStartLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((void *)this + 6) == *((void *)this + 4) && *((void *)this + 7) == *((void *)this + 5))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)**((void **)this + 8);
    sub_2168BD80C((uint64_t *)&v5);
  }
  sub_216ABBA60(a2, (uint64_t *)&v5);
  return sub_216ABB798(&v5);
}

void sub_216D85900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdResolveTarget::GetStopLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdResolveTarget *this@<X0>, uint64_t *a2@<X8>)
{
  if (*((void *)this + 9) == *((void *)this + 4) && *((void *)this + 10) == *((void *)this + 5))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)**((void **)this + 11);
    sub_2168BD80C((uint64_t *)&v5);
  }
  sub_216ABBA60(a2, (uint64_t *)&v5);
  return sub_216ABB798(&v5);
}

void sub_216D85984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_Resolver *pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, char a3)
{
  *(void *)this = a2;
  *((unsigned char *)this + 8) = a3;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = -1;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = -1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)v11);
  long long v4 = v11[1];
  *((_OWORD *)this + 1) = v11[0];
  *((_OWORD *)this + 2) = v4;
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes((uint64_t)this);
  uint64_t v5 = *((void *)this + 3);
  if (*((_OWORD *)this + 1) != *((_OWORD *)this + 2))
  {
    v10[0] = *((void *)this + 2);
    v10[1] = v5;
    uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10);
    char v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
    uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
    *((void *)this + 6) = *Layers;
    *((void *)this + 7) = Layers[1];
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes(uint64_t this)
{
  uint64_t v1 = (void *)this;
  uint64_t v2 = *(void *)(this + 16);
  uint64_t v3 = *(void *)(this + 24);
  BOOL v5 = v2 != *(void *)(this + 32) || v3 != *(void *)(this + 40);
  if (*(unsigned char *)(this + 8))
  {
    if (v5)
    {
      do
      {
        uint64_t v10 = v2;
        uint64_t v11 = v3;
        this = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v10);
        if (this)
        {
          uint64_t v6 = v1[3];
          v9[0] = v1[2];
          v9[1] = v6;
          this = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v9);
          if ((this & 1) == 0) {
            break;
          }
        }
        uint64_t v2 = v1[2];
        uint64_t v3 = v1[3] + 1;
        v1[3] = v3;
      }
      while (v2 != v1[4] || v3 != v1[5]);
    }
  }
  else if (v5)
  {
    do
    {
      uint64_t v10 = v2;
      uint64_t v11 = v3;
      this = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v10);
      if (!this) {
        break;
      }
      uint64_t v2 = v1[2];
      uint64_t v3 = v1[3] + 1;
      v1[3] = v3;
    }
    while (v2 != v1[4] || v3 != v1[5]);
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::Usd_Resolver *pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this, uint64_t **a2, char a3)
{
  *((void *)this + 2) = 0;
  long long v4 = (_OWORD *)((char *)this + 16);
  *((unsigned char *)this + 8) = a3;
  *((void *)this + 3) = -1;
  *((void *)this + 4) = 0;
  BOOL v5 = (_OWORD *)((char *)this + 32);
  *((void *)this + 5) = -1;
  *((void *)this + 6) = 0;
  uint64_t v6 = (void *)((char *)this + 48);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = a2;
  if (!a2)
  {
    char v23 = "usd/resolver.cpp";
    unint64_t v24 = "Usd_Resolver";
    *(void *)&long long v25 = 61;
    *((void *)&v25 + 1) = "pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver(const UsdResolveTarget *, BOOL)";
    char v26 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "_resolveTarget", 0))
    {
      *(void *)this = 0;
      return this;
    }
    a2 = (uint64_t **)*((void *)this + 8);
  }
  char v7 = *a2;
  *(void *)this = *a2;
  *long long v4 = *((_OWORD *)a2 + 3);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v7, 6u, (uint64_t *)&v23);
  *BOOL v5 = v25;
  uint64_t v8 = *((void *)this + 8);
  if (*(_OWORD *)(v8 + 72) != *((_OWORD *)this + 2))
  {
    *BOOL v5 = *(_OWORD *)(v8 + 72);
    uint64_t v10 = *(char **)(v8 + 72);
    int v9 = *(const char **)(v8 + 80);
    char v23 = v10;
    unint64_t v24 = v9;
    uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
    if (*(void *)(*((void *)this + 8) + 88) != *(void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v12)) {
      ++*((void *)this + 5);
    }
  }
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes((uint64_t)this);
  uint64_t v13 = (const char *)*((void *)this + 3);
  if (*((void *)this + 2) != *((void *)this + 4) || v13 != *((const char **)this + 5))
  {
    char v23 = (char *)*((void *)this + 2);
    unint64_t v24 = v13;
    uint64_t v14 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v14);
    uint64_t Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v15);
    uint64_t v17 = (void *)*((void *)this + 8);
    uint64_t v19 = *((void *)this + 2);
    uint64_t v18 = *((void *)this + 3);
    if (v19 == v17[6] && v18 == v17[7]) {
      uint64_t v20 = v17[8];
    }
    else {
      uint64_t v20 = *Layers;
    }
    *uint64_t v6 = v20;
    if (v19 == v17[9] && v18 == v17[10]) {
      uint64_t v21 = v17[11];
    }
    else {
      uint64_t v21 = Layers[1];
    }
    *((void *)this + 7) = v21;
  }
  return this;
}

void *pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextNode(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this)
{
  ++*((void *)this + 3);
  double result = (void *)pxrInternal__aapl__pxrReserved__::Usd_Resolver::_SkipEmptyNodes((uint64_t)this);
  uint64_t v3 = *((void *)this + 3);
  if (*((void *)this + 2) != *((void *)this + 4) || v3 != *((void *)this + 5))
  {
    v10[0] = *((void *)this + 2);
    v10[1] = v3;
    uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
    double result = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
    *((void *)this + 6) = *result;
    char v7 = (void *)*((void *)this + 8);
    if (v7 && (*((void *)this + 2) == v7[9] ? (BOOL v8 = *((void *)this + 3) == v7[10]) : (BOOL v8 = 0), v8)) {
      uint64_t v9 = v7[11];
    }
    else {
      uint64_t v9 = result[1];
    }
    *((void *)this + 7) = v9;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer(pxrInternal__aapl__pxrReserved__::Usd_Resolver *this)
{
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = *((void *)this + 6) + 8;
  *((void *)this + 6) = v2;
  if (v2 == v1) {
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextNode(this);
  }
  return v2 == v1;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = &unk_26C769710;
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  return this;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = &unk_26C769710;
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  return this;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaBase::~UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  *(void *)this = &unk_26C769710;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_21697C414((_DWORD *)this + 4);
  uint64_t v2 = (atomic_ullong *)*((void *)this + 1);
  if (v2) {
    sub_216D16E0C(v2);
  }
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::~UsdSchemaBase(this);

  operator delete(v1);
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetSchemaClassPrimDefinition(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(void *)this + 40))(this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName(v3, (atomic_uint **)&v5);
  if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(void *)this + 16))(this) == 5
    || (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(void *)this + 16))(this) == 6)
  {
    double result = sub_2168CB120((void *)(v2 + 72), &v5);
  }
  else
  {
    double result = sub_2168CB120((void *)(v2 + 32), &v5);
  }
  if (result) {
    double result = (void *)result[3];
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  return 1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91BD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91BD8))
  {
    __cxa_guard_release(&qword_267B91BD8);
  }
  return &qword_267B91BD0;
}

void sub_216D860C0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this)
{
  return &qword_267B91BD0;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3@<X2>, char a4@<W3>, int a5@<W4>, std::type_info *a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v22, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  if (a7 && (a4 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, a2, a8);
    uint64_t v28 = 0;
    if (!a6->__type_name
      || !pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a8)
      && (v15.n128_u64[0] = 0x7FF8000000000000,
          pxrInternal__aapl__pxrReserved__::UsdAttribute::Get(a8, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v27, v15))&& (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v27, a6, v16) & 1) != 0)
    {
      sub_2168EE084((uint64_t)v27);
      goto LABEL_17;
    }
    sub_2168EE084((uint64_t)v27);
    uint64_t v17 = *(void *)(a8 + 24);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a8 + 20));
    sub_21697C414((_DWORD *)(a8 + 16));
    uint64_t v18 = *(atomic_ullong **)(a8 + 8);
    if (v18) {
      sub_216D16E0C(v18);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)v22, (uint64_t *)a2, a3, a4, a5, a8);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a8, v19);
  if (a6->__type_name) {
    int v21 = IsDefined;
  }
  else {
    int v21 = 0;
  }
  if (v21 == 1) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a8, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a6, NAN);
  }
LABEL_17:
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  if (v23) {
    sub_216D16E0C(v23);
  }
}

void sub_216D862B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D86300()
{
  return 1;
}

uint64_t *sub_216D86308()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216D863C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021749E34CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  unint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      int v9 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)operator new(0x80uLL);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::UsdSchemaRegistry(v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          uint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegis"
                "try>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        uint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistr"
              "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_216D865F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    void v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistr"
            "y>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::DeleteInstance()
{
  for (unint64_t i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
        i;
        unint64_t i = v1)
  {
    unint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance, &v1, 0);
    if (v1 == i)
    {
      sub_2168EBBB8((void ***)(i + 120), 0);
      sub_216D8E648(i + 72);
      sub_216D8E648(i + 32);
      char v4 = (void **)(i + 8);
      sub_216C0ACA8(&v4);
      long long v3 = sub_216859A88((uint64_t *)i, v2);
      operator delete(v3);
      return;
    }
    sched_yield();
  }
}

void sub_216D86770()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_216D867B8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeSchemaIdentifierForFamilyAndVersion(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, atomic_uint **a3@<X8>)
{
  int v13 = (int)a2;
  if (a2)
  {
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)EmptyString;
      __dst.__r_.__value_.__r.__words[2] = EmptyString[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v7;
    }
    std::string::append(&__dst, "_");
    sub_2169975F0();
    if ((v11 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((v11 & 0x80u) == 0) {
      std::string::size_type v9 = v11;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    std::string::append(&__dst, (const std::string::value_type *)v8, v9);
    if ((char)v11 < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *a3 = *(atomic_uint **)this;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        *a3 = v6;
      }
    }
  }
}

void sub_216D86904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, uint64_t a2@<X8>)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  std::string::size_type v6 = sub_216D86AB0((uint64_t)EmptyString);
  if (v6 == -1)
  {
    uint64_t v9 = *(void *)this;
    if ((*(void *)this & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)a2 = v9;
    *(_DWORD *)(a2 + 8) = 0;
  }
  else
  {
    std::string::size_type v7 = v6;
    std::string::basic_string(&v11, EmptyString, 0, v6, (std::allocator<char> *)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
    std::string::basic_string(&__p, EmptyString, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v13);
    int v8 = sub_216D86B28(&__p, 0);
    *(void *)a2 = v12;
    uint64_t v12 = 0;
    *(_DWORD *)(a2 + 8) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216D86A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((a21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D86AB0(uint64_t a1)
{
  unint64_t v1 = (void *)a1;
  unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    unint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t result = v2 - 2;
  if (v2 < 2) {
    return -1;
  }
  if (v3 < 0) {
    unint64_t v1 = (void *)*v1;
  }
  if (*((char *)v1 + v2 - 1) < 0
    || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *((unsigned __int8 *)v1 + v2 - 1) + 60) & 0x400) == 0)
  {
    return -1;
  }
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v1 + result);
    if (v5 == 95) {
      break;
    }
    if ((v5 & 0x80) == 0)
    {
      --result;
      if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v5 + 60) & 0x400) != 0) {
        continue;
      }
    }
    return -1;
  }
  return result;
}

uint64_t sub_216D86B28(const std::string *a1, unsigned char *a2)
{
  unsigned int v8 = 0;
  sub_216D8E6EC(v5, a1, 8);
  MEMORY[0x21D4479B0](v5, &v8);
  if (a2 && (*((unsigned char *)&v5[4] + *(void *)(v5[0] - 24)) & 5) != 0) {
    *a2 = 0;
  }
  uint64_t v3 = v8;
  v5[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  double v5[2] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x21D447E60](&v7);
  return v3;
}

void sub_216D86CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D8E870((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaFamily(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (char *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  if (EmptyString[23] >= 0) {
    char v4 = EmptyString;
  }
  else {
    char v4 = *(char **)EmptyString;
  }
  int v5 = *v4;
  if (*v4) {
    BOOL v6 = (v5 - 48) >= 0xA;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
  if (v5 != 95 && (v5 & 0xFFFFFFDF) - 65 > 0x19) {
    return 0;
  }
  do
  {
    int v9 = *v4++;
    char v8 = v9;
    unsigned int v10 = (v9 & 0xFFFFFFDF) - 65;
    unsigned int v11 = v9 - 48;
  }
  while (v9 == 95 || v10 < 0x1A || v11 < 0xA);
  if (v8) {
    return 0;
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    __n128 v15 = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    __n128 v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
  }
  return sub_216D86AB0((uint64_t)v15) == -1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaIdentifier(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier(this, (uint64_t)&v6);
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaFamily((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v6, v3);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeSchemaIdentifierForFamilyAndVersion((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)v7, (atomic_uint **)&v5);
    BOOL result = (v5 & 0xFFFFFFFFFFFFFFF8) == (*(void *)this & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D86E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  sub_216D86E68();
  uint64_t v3 = sub_216877FD4(&xmmword_267B91C58, this);
  if (v3) {
    return v3 + 3;
  }
  else {
    return 0;
  }
}

void sub_216D86E68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91CA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v0 = __cxa_guard_acquire(&qword_267B91CA8);
    if (v0)
    {
      sub_216D8C1A8(v0, v1, v2);
      __cxa_atexit((void (*)(void *))sub_216D8C5F0, &xmmword_267B91C58, &dword_216758000);
      __cxa_guard_release(&qword_267B91CA8);
    }
  }
}

void sub_216D86EF0(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D86E68();
  BOOL result = sub_2168CB120(xmmword_267B91C80, this);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

{
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  void *result;
  unint64_t v6;

  if (!pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedSchemaFamily(this, a2)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeSchemaIdentifierForFamilyAndVersion(this, a2, (atomic_uint **)&v6);
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v6, v4);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D87070();
  uint64_t v3 = sub_216D87110(this);
  if (v3) {
    return v3 + 3;
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B91BF8, memory_order_acquire)) {
    return &qword_267B91BE0;
  }
  if (__cxa_guard_acquire(&qword_267B91BF8))
  {
    qword_267B91BE0 = 0;
    *(void *)algn_267B91BE8 = 0;
    qword_267B91BF0 = 0;
    __cxa_atexit((void (*)(void *))sub_216D871EC, &qword_267B91BE0, &dword_216758000);
    __cxa_guard_release(&qword_267B91BF8);
  }
  return &qword_267B91BE0;
}

void sub_216D87070()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91CD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91CD8))
  {
    sub_216D8C990();
    __cxa_atexit((void (*)(void *))sub_216D8CED0, &xmmword_267B91CB0, &dword_216758000);
    __cxa_guard_release(&qword_267B91CD8);
  }
}

void sub_216D870F8(_Unwind_Exception *a1)
{
}

void *sub_216D87110(void *a1)
{
  if (!*((void *)&xmmword_267B91CB0 + 1)) {
    return 0;
  }
  unint64_t v1 = *a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v2 = bswap64(0x9E3779B97F4A7C55 * v1);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_267B91CB0 + 8));
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = v2;
    if (v2 >= *((void *)&xmmword_267B91CB0 + 1)) {
      unint64_t v4 = v2 % *((void *)&xmmword_267B91CB0 + 1);
    }
  }
  else
  {
    unint64_t v4 = v2 & (*((void *)&xmmword_267B91CB0 + 1) - 1);
  }
  unint64_t v5 = *(void **)(xmmword_267B91CB0 + 8 * v4);
  if (!v5) {
    return 0;
  }
  BOOL result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v2 == v7)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v1) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *((void *)&xmmword_267B91CB0 + 1)) {
            v7 %= *((void *)&xmmword_267B91CB0 + 1);
          }
        }
        else
        {
          v7 &= *((void *)&xmmword_267B91CB0 + 1) - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_216D871EC(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfosInFamily@<X0>(void *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  sub_216D87070();
  BOOL result = sub_216D87110(a1);
  if (result)
  {
    switch(a3)
    {
      case 0:
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        int v9 = (const void *)result[3];
        uint64_t v10 = result[4];
        return sub_216D8D1FC(a4, v9, v10, (v10 - (uint64_t)v9) >> 3);
      case 1:
        unsigned int v11 = (char *)result[3];
        uint64_t v12 = result[4];
        if ((char *)v12 != v11)
        {
          unint64_t v13 = (v12 - (uint64_t)v11) >> 3;
          uint64_t v12 = result[3];
          do
          {
            unint64_t v14 = v13 >> 1;
            __n128 v15 = (uint64_t *)(v12 + 8 * (v13 >> 1));
            uint64_t v17 = *v15;
            uint64_t v16 = v15 + 1;
            v13 += ~(v13 >> 1);
            if (*(_DWORD *)(v17 + 24) > a2) {
              uint64_t v12 = (uint64_t)v16;
            }
            else {
              unint64_t v13 = v14;
            }
          }
          while (v13);
        }
        break;
      case 2:
        unsigned int v11 = (char *)result[3];
        uint64_t v12 = result[4];
        if ((char *)v12 != v11)
        {
          unint64_t v18 = (v12 - (uint64_t)v11) >> 3;
          uint64_t v12 = result[3];
          do
          {
            unint64_t v19 = v18 >> 1;
            uint64_t v20 = (uint64_t *)(v12 + 8 * (v18 >> 1));
            uint64_t v22 = *v20;
            int v21 = v20 + 1;
            v18 += ~(v18 >> 1);
            if (*(_DWORD *)(v22 + 24) < a2) {
              unint64_t v18 = v19;
            }
            else {
              uint64_t v12 = (uint64_t)v21;
            }
          }
          while (v18);
        }
        break;
      case 3:
        unsigned int v11 = (char *)result[3];
        uint64_t v12 = result[4];
        if ((char *)v12 == v11) {
          goto LABEL_35;
        }
        unint64_t v23 = (v12 - (uint64_t)v11) >> 3;
        do
        {
          unint64_t v24 = v23 >> 1;
          int v25 = &v11[8 * (v23 >> 1)];
          uint64_t v27 = *(void *)v25;
          uint64_t v26 = v25 + 8;
          v23 += ~(v23 >> 1);
          if (*(_DWORD *)(v27 + 24) < a2) {
            unint64_t v23 = v24;
          }
          else {
            unsigned int v11 = v26;
          }
        }
        while (v23);
        break;
      case 4:
        unsigned int v11 = (char *)result[3];
        uint64_t v12 = result[4];
        if ((char *)v12 == v11)
        {
LABEL_35:
          unsigned int v11 = (char *)v12;
        }
        else
        {
          unint64_t v28 = (v12 - (uint64_t)v11) >> 3;
          do
          {
            unint64_t v29 = v28 >> 1;
            uint64_t v30 = &v11[8 * (v28 >> 1)];
            uint64_t v32 = *(void *)v30;
            int v31 = v30 + 8;
            v28 += ~(v28 >> 1);
            if (*(_DWORD *)(v32 + 24) > a2) {
              unsigned int v11 = v31;
            }
            else {
              unint64_t v28 = v29;
            }
          }
          while (v28);
        }
        break;
      default:
        goto LABEL_6;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return sub_216D8D278(a4, v11, v12, (v12 - (uint64_t)v11) >> 3);
  }
  else
  {
LABEL_6:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, atomic_uint **a2@<X8>)
{
  sub_216D86E68();
  BOOL result = sub_216877FD4(&xmmword_267B91C58, this);
  if (!result)
  {
    unint64_t v7 = 0;
LABEL_6:
    *a2 = v7;
    return result;
  }
  uint64_t v6 = (atomic_uint *)result[3];
  *a2 = v6;
  if ((v6 & 7) != 0)
  {
    unint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_6;
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteSchemaTypeName@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, atomic_uint **a2@<X8>)
{
  sub_216D86E68();
  BOOL result = sub_216877FD4(&xmmword_267B91C58, this);
  if (!result || *((_DWORD *)result + 13) != 3)
  {
    unint64_t v7 = 0;
LABEL_7:
    *a2 = v7;
    return result;
  }
  uint64_t v6 = (atomic_uint *)result[3];
  *a2 = v6;
  if ((v6 & 7) != 0)
  {
    unint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_7;
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaTypeName@<X0>(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this@<X0>, atomic_uint **a2@<X8>)
{
  sub_216D86E68();
  BOOL result = sub_216877FD4(&xmmword_267B91C58, this);
  if (!result || (*((_DWORD *)result + 13) - 4) > 2)
  {
    unint64_t v7 = 0;
LABEL_7:
    *a2 = v7;
    return result;
  }
  uint64_t v6 = (atomic_uint *)result[3];
  *a2 = v6;
  if ((v6 & 7) != 0)
  {
    unint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (SchemaInfo) {
    return SchemaInfo[1];
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v4);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteTypeFromSchemaTypeName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (SchemaInfo && *((_DWORD *)SchemaInfo + 7) == 3) {
    return SchemaInfo[1];
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v4);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPITypeFromSchemaTypeName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (SchemaInfo && (*((_DWORD *)SchemaInfo + 7) - 4) <= 2) {
    return SchemaInfo[1];
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v4);
  return v4;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  sub_216D86E68();
  BOOL result = sub_216877FD4(&xmmword_267B91C58, this);
  if (result) {
    return (void *)*((unsigned int *)result + 13);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result) {
    return (void *)*((unsigned int *)result + 7);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsConcrete(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) == 3;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsConcrete(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result) {
    return (void *)(*((_DWORD *)result + 7) == 3);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAbstract(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) - 1 < 2;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAbstract(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result) {
    return (void *)((*((_DWORD *)result + 7) - 1) < 2);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsMultipleApplyAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) == 6;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsMultipleApplyAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result) {
    return (void *)(*((_DWORD *)result + 7) == 6);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAppliedAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind(this, a2) - 5 < 2;
}

void *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAppliedAPISchema(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (result) {
    return (void *)((*((_DWORD *)result + 7) - 5) < 2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameTemplate(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D87888();
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a1, (uint64_t)&qword_267B91CE0, (uint64_t)v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((const void **)v6, a2, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_216D87854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D87888()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91CF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91CF8))
  {
    sub_216779094(&qword_267B91CE0, "__INSTANCE_NAME__");
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B91CE0, &dword_216758000);
    __cxa_guard_release(&qword_267B91CF8);
  }
}

void sub_216D87920(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6 = sub_216D87A50((std::string *)a1);
  if (v6 == -1)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  }
  else
  {
    std::string::size_type v7 = v6;
    if (*(char *)(a1 + 23) < 0) {
      sub_216778F24(&__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __p = *(std::string *)a1;
    }
    sub_216D87888();
    if (byte_267B91CF7 >= 0) {
      std::string::size_type v8 = byte_267B91CF7;
    }
    else {
      std::string::size_type v8 = qword_267B91CE8;
    }
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v10 = *(const std::string::value_type **)a2;
    }
    if (v9 >= 0) {
      std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v11 = *(void *)(a2 + 8);
    }
    std::string::replace(&__p, v7, v8, v10, v11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216D87A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_216D87A50(std::string *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91D08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91D08))
  {
    sub_216D87888();
    uint64_t v18 = qword_267B91CE8;
    if (byte_267B91CF7 >= 0) {
      uint64_t v18 = byte_267B91CF7;
    }
    qword_267B91D00 = v18;
    __cxa_guard_release(&qword_267B91D08);
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v3 = 0;
    do
    {
      std::string::size_type v4 = std::string::find(this, 58, v3);
      if (v4 == -1)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v4 = this->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
      }
      size_t v5 = v4 - v3;
      if (v4 - v3 == qword_267B91D00)
      {
        sub_216D87888();
        if (byte_267B91CF7 >= 0) {
          unint64_t v6 = byte_267B91CF7;
        }
        else {
          unint64_t v6 = qword_267B91CE8;
        }
        std::string::size_type v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v10 = this->__r_.__value_.__l.__size_;
          if (v6 == -1 || v10 < v3) {
LABEL_48:
          }
            sub_216855AD4();
          std::string::size_type v12 = v10 - v3;
          if (v12 < v5) {
            size_t v5 = v12;
          }
          int v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v6 == -1 || v7 < v3) {
            goto LABEL_48;
          }
          if (v7 - v3 < v5) {
            size_t v5 = v7 - v3;
          }
          int v9 = this;
        }
        if (byte_267B91CF7 >= 0) {
          unint64_t v13 = &qword_267B91CE0;
        }
        else {
          unint64_t v13 = (uint64_t *)qword_267B91CE0;
        }
        if (v5 >= v6) {
          size_t v14 = v6;
        }
        else {
          size_t v14 = v5;
        }
        if (!memcmp((char *)v9 + v3, v13, v14) && v5 == v6) {
          return v3;
        }
      }
      else
      {
        std::string::size_type v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v3 = v4 + 1;
      if ((v7 & 0x80u) == 0) {
        std::string::size_type v16 = v7;
      }
      else {
        std::string::size_type v16 = this->__r_.__value_.__l.__size_;
      }
    }
    while (v3 < v16);
  }
  return -1;
}

void sub_216D87C04(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string::size_type v4 = sub_216D87A50((std::string *)a1);
  if (v4 == -1)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    std::string::size_type v5 = v4;
    sub_216D87888();
    uint64_t v6 = qword_267B91CE8;
    if (byte_267B91CF7 >= 0) {
      uint64_t v6 = byte_267B91CF7;
    }
    std::string::size_type v7 = v5 + v6 + 1;
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) != 0) {
      std::string::size_type v8 = *(void *)(a1 + 8);
    }
    if (v7 >= v8)
    {
      *a2 = 0;
    }
    else
    {
      std::string::basic_string(&__p, (const std::string *)a1, v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_216D87D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsMultipleApplyNameTemplate(std::string *a1)
{
  return sub_216D87A50(a1) != -1;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::CollectAddtionalAutoApplyAPISchemasFromPlugins(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1)
{
  unint64_t v2 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (!*v2)
  {
    Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v35, Instance);
    std::string::size_type v4 = v35;
    for (unint64_t i = v36; v4 != i; v4 += 2)
    {
      uint64_t v6 = (const void ***)sub_2168E5D78(v4);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v6, (uint64_t *)v34);
      unint64_t v7 = sub_216D880B4();
      std::string::size_type v8 = (unint64_t **)sub_216AA0A98((pxrInternal__aapl__pxrReserved__::TfToken *)v34, (void *)(v7 + 120));
      if (v8)
      {
        if (sub_216C4B19C(0))
        {
          uint64_t v9 = sub_2168E5D78(v4);
          char v10 = (void *)(v9 + 8);
          if (*(char *)(v9 + 31) < 0) {
            char v10 = (void *)*v10;
          }
          uint64_t v11 = sub_2168E5D78(v4);
          size_t v14 = (void *)(v11 + 32);
          if (*(char *)(v11 + 55) < 0) {
            size_t v14 = (void *)*v14;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Collecting additional auto apply API schemas from 'AutoApplyAPISchemas' metadata in plugin '%s' at path '%s'.", v12, v13, v10, v14);
        }
        JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v8);
        std::string::size_type v16 = (unint64_t **)(JsObject + 1);
        uint64_t v17 = (unint64_t **)*JsObject;
        if ((void *)*JsObject != JsObject + 1)
        {
          do
          {
            if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v17 + 7)))
            {
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v33);
              uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v17 + 7);
              unint64_t v19 = sub_216D880B4();
              sub_216D88A6C(v18, (void *)(v19 + 32), &v32);
              if (v32.n128_u64[0] != v32.n128_u64[1])
              {
                if (sub_216C4B19C(0))
                {
                  uint64_t v20 = sub_2168E5D78(v4);
                  int v21 = (void *)(v20 + 8);
                  if (*(char *)(v20 + 31) < 0) {
                    int v21 = (void *)*v21;
                  }
                  unint64_t v22 = v33 & 0xFFFFFFFFFFFFFFF8;
                  if ((v33 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    unint64_t v23 = (const char *)(v22 + 16);
                    if (*(char *)(v22 + 39) < 0) {
                      unint64_t v23 = *(const char **)v23;
                    }
                  }
                  else
                  {
                    unint64_t v23 = "";
                  }
                  sub_216D6B948(", ", (std::string *)v32.n128_u64[0], (std::string *)v32.n128_u64[1], &__p);
                  p_p = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Plugin '%s' is adding automatic application of API schema '%s' to the following schema types: [%s].\n", v24, v25, v21, v23, p_p);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                }
                uint64_t v27 = sub_2168CB1F4(a1, &v33);
                if (v27) {
                  sub_216AE27E0(v27 + 3, (void *)v27[4], (uint64_t *)v32.n128_u64[0], (uint64_t *)v32.n128_u64[1], (uint64_t)(v32.n128_u64[1] - v32.n128_u64[0]) >> 3);
                }
                else {
                  sub_216D8EB28((uint64_t)a1, &v33, &v33, &v32);
                }
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
              sub_216889A04((void ***)&__p);
              if ((v33 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            unint64_t v28 = v17[1];
            if (v28)
            {
              do
              {
                unint64_t v29 = (unint64_t **)v28;
                unint64_t v28 = (unint64_t *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                unint64_t v29 = (unint64_t **)v17[2];
                BOOL v30 = *v29 == (unint64_t *)v17;
                uint64_t v17 = v29;
              }
              while (!v30);
            }
            uint64_t v17 = v29;
          }
          while (v29 != v16);
        }
      }
      sub_216812ED4((uint64_t)v34, v34[1]);
    }
    v34[0] = (void **)&v35;
    sub_216850BF4(v34);
  }
}

void sub_216D88014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25)
{
  a18 = &a25;
  sub_216850BF4((void ***)&a18);
  _Unwind_Resume(a1);
}

unint64_t sub_216D880B4()
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v0 = (unint64_t *)atomic_load((unint64_t *)&qword_267B91C00);
  if (!v0)
  {
    uint64_t v0 = (unint64_t *)operator new(0x98uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "appliedAPISchemas", 0);
    std::string::size_type v38 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "multipleApplyAPISchemas", 0);
    long long v37 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "multipleApplyAPISchemaPrefixes", 0);
    int v36 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "autoApplyAPISchemas", 0);
    int v35 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "apiSchemaAutoApplyTo", 0);
    uint64_t v34 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "apiSchemaCanOnlyApplyTo", 0);
    uint64_t v33 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "apiSchemaAllowedInstanceNames", 0);
    __n128 v32 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "apiSchemaInstances", 0);
    int v31 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "schemaKind", 0);
    unint64_t v2 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "nonAppliedAPI", 0);
    std::string::size_type v3 = (uint64_t *)(v0 + 10);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 10, "singleApplyAPI", 0);
    std::string::size_type v4 = (uint64_t *)(v0 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 11, "multipleApplyAPI", 0);
    std::string::size_type v5 = (uint64_t *)(v0 + 12);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 12, "concreteTyped", 0);
    uint64_t v6 = (uint64_t *)(v0 + 13);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 13, "abstractTyped", 0);
    unint64_t v7 = (uint64_t *)(v0 + 14);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 14, "abstractBase", 0);
    std::string::size_type v8 = (uint64_t *)(v0 + 15);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 15, "AutoApplyAPISchemas", 0);
    unint64_t v9 = *v0;
    unint64_t v39 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v10 = *v38;
    uint64_t v40 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *v37;
    uint64_t v41 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v41 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = *v36;
    uint64_t v42 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v42 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *v35;
    uint64_t v43 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v43 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = *v34;
    uint64_t v44 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *v33;
    uint64_t v45 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = *v32;
    uint64_t v46 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v46 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = *v31;
    uint64_t v47 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v18 = *v2;
    uint64_t v48 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v19 = *v3;
    uint64_t v49 = v19;
    if ((v19 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v20 = *v4;
    uint64_t v50 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v21 = *v5;
    uint64_t v51 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v22 = *v6;
    uint64_t v52 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v52 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v23 = *v7;
    uint64_t v53 = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v24 = *v8;
    uint64_t v54 = v24;
    if ((v24 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[16] = 0;
    v0[17] = 0;
    v0[18] = 0;
    int v25 = (char *)operator new(0x80uLL);
    uint64_t v26 = 0;
    v0[16] = (unint64_t)v25;
    v0[17] = (unint64_t)v25;
    v0[18] = (unint64_t)(v25 + 128);
    do
    {
      unint64_t v27 = *(unint64_t *)((char *)&v39 + v26);
      *(void *)&v25[v26] = v27;
      if ((v27 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v25[v26] &= 0xFFFFFFFFFFFFFFF8;
      }
      v26 += 8;
    }
    while (v26 != 128);
    v0[17] = (unint64_t)(v25 + 128);
    for (uint64_t i = 120; i != -8; i -= 8)
    {
      unint64_t v29 = *(unint64_t *)((char *)&v39 + i);
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v30 = 0;
    atomic_compare_exchange_strong(&qword_267B91C00, (unint64_t *)&v30, (unint64_t)v0);
    if (v30)
    {
      unint64_t v39 = (unint64_t)(v0 + 16);
      sub_216889A04((void ***)&v39);
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B91C00);
    }
  }
  return (unint64_t)v0;
}

void sub_216D88804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void **a17, uint64_t a18, char a19)
{
  sub_216889A04(&a17);
  uint64_t v28 = 120;
  while (1)
  {
    uint64_t v29 = *(void *)(&a19 + v28);
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v28 -= 8;
    if (v28 == -8)
    {
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v19);
      _Unwind_Resume(a1);
    }
  }
}

void sub_216D88A2C()
{
}

void sub_216D88A34()
{
}

void sub_216D88A3C()
{
}

void sub_216D88A44()
{
}

void sub_216D88A4C()
{
}

void sub_216D88A54()
{
}

void sub_216D88A5C()
{
}

void sub_216D88A64()
{
}

void sub_216D88A6C(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  std::string::size_type v5 = (pxrInternal__aapl__pxrReserved__::JsValue *)sub_216AA0A98(a1, a2);
  if (!v5)
  {
LABEL_21:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  uint64_t v6 = (unint64_t **)v5;
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray(v5))
  {
LABEL_7:
    *(void *)&long long __dst = "usd/schemaRegistry.cpp";
    *((void *)&__dst + 1) = "_GetNameListFromMetadata";
    uint64_t v21 = 806;
    uint64_t v22 = "TfTokenVector pxrInternal__aapl__pxrReserved__::_GetNameListFromMetadata(const JsObject &, const TfToken &)";
    char v23 = 0;
    unint64_t v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      uint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin metadata value for key '%s' does not hold a string array", v11);
    goto LABEL_21;
  }
  unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v6);
  std::string::size_type v8 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
  unint64_t v9 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
  while (v8 != v9)
  {
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v8)) {
      goto LABEL_7;
    }
    std::string::size_type v8 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v8 + 16);
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v6);
  sub_216782DE0(v19, (v12[1] - *v12) >> 4);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (v13 != v14)
  {
    uint64_t v15 = v19[0];
    do
    {
      unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v13);
      if (*(char *)(String + 23) < 0)
      {
        sub_216778F24(&__dst, *(void **)String, *(void *)(String + 8));
      }
      else
      {
        long long v17 = *(_OWORD *)String;
        uint64_t v21 = *(void *)(String + 16);
        long long __dst = v17;
      }
      if (*((char *)v15 + 23) < 0) {
        operator delete(*(void **)v15);
      }
      long long v18 = __dst;
      *((void *)v15 + 2) = v21;
      *uint64_t v15 = v18;
      uint64_t v15 = (long long *)((char *)v15 + 24);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v13 + 16);
    }
    while (v13 != v14);
  }
  pxrInternal__aapl__pxrReserved__::TfToTokenVector(v19, a3);
  *(void *)&long long __dst = v19;
  sub_216782F20((void ***)&__dst);
}

void sub_216D88C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_SortAutoAppliedAPISchemas(uint64_t *a1)
{
  uint64_t result = *a1;
  unint64_t v2 = (uint64_t *)a1[1];
  if ((unint64_t)v2 - result >= 0x10)
  {
    unint64_t v4 = 126 - 2 * __clz(((uint64_t)v2 - result) >> 3);
    if (v2 == (uint64_t *)result) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v4;
    }
    return sub_216D8EE50(result, v2, v5, 1);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_InitializePrimDefsAndSchematicsForPluginSchemas(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *this)
{
  sub_216D86E68();
  __n128 v82 = 0u;
  long long v83 = 0u;
  int v84 = 1065353216;
  sub_216D8B1F4();
  unint64_t v2 = (void *)qword_267B91D20;
  if (qword_267B91D20)
  {
    do
    {
      v86 = 0;
      uint64_t v87 = 0;
      v85 = (__n128 *)&v86;
      std::string::size_type v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v2[3];
      unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v2[4];
      if (v3 != v4)
      {
        uint64_t v5 = v2 + 2;
        do
        {
          SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(v3, v1);
          if (SchemaInfo)
          {
            unint64_t v7 = SchemaInfo + 1;
            sub_216856018((uint64_t **)&v85, v7, (uint64_t *)v7);
            if (v1) {
              pxrInternal__aapl__pxrReserved__::TfType::GetAllDerivedTypes((uint64_t *)v7, (uint64_t **)&v85, v8);
            }
          }
          std::string::size_type v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v3 + 8);
        }
        while (v3 != v4);
        unint64_t v9 = (uint64_t *)v85;
        if (v85 != (__n128 *)&v86)
        {
          do
          {
            v81.n128_u64[0] = (unint64_t)(v9 + 4);
            unint64_t v10 = (char **)sub_216D8D2F4((uint64_t)&v82, v9 + 4, (uint64_t)&unk_2174BFD90, &v81);
            uint64_t v11 = v10;
            uint64_t v12 = v10[4];
            if (v12 >= v10[5])
            {
              uint64_t v14 = sub_216973984(v10 + 3, v2 + 2);
            }
            else
            {
              uint64_t v13 = *v5;
              *(void *)uint64_t v12 = *v5;
              if ((v13 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *(void *)v12 &= 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v14 = v12 + 8;
            }
            void v11[4] = v14;
            uint64_t v15 = (uint64_t *)v9[1];
            if (v15)
            {
              do
              {
                uint64_t v16 = v15;
                uint64_t v15 = (uint64_t *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                uint64_t v16 = (uint64_t *)v9[2];
                BOOL v24 = *v16 == (void)v9;
                unint64_t v9 = v16;
              }
              while (!v24);
            }
            unint64_t v9 = v16;
          }
          while (v16 != (uint64_t *)&v86);
        }
      }
      sub_2167FB780((uint64_t)&v85, v86);
      unint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  long long v17 = &v83;
  long long v18 = this;
  while (1)
  {
    long long v17 = *(long long **)v17;
    if (!v17) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::Usd_SortAutoAppliedAPISchemas((uint64_t *)v17 + 3);
  }
  if ((__n128 *)((char *)this + 72) != &v82)
  {
    *((_DWORD *)this + 26) = v84;
    sub_216D91510((void *)this + 9, (void *)v83, 0);
  }
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_216D8D5A8((uint64_t)&v82);
  v85 = 0;
  v86 = 0;
  uint64_t v87 = 0;
  uint64_t v20 = qword_267B91C68;
  if (qword_267B91C68)
  {
    v76 = (char **)((char *)this + 48);
    do
    {
      unsigned int v21 = *(_DWORD *)(v20 + 52);
      BOOL v22 = v21 > 6;
      int v23 = (1 << v21) & 0x68;
      BOOL v24 = v22 || v23 == 0;
      if (!v24)
      {
        uint64_t v26 = (uint64_t *)v85;
        int v25 = v86;
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v19);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(void *)(v20 + 32), &v81);
        unint64_t v27 = sub_2168E79D8(&v81);
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v26) >> 3);
        if (v29 & 1 | (unint64_t)v27)
        {
          uint64_t v30 = (uint64_t *)v85;
          int v31 = v86;
          if (v86 != v85)
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3);
            do
            {
              uint64_t v33 = (uint64_t)&v30[3 * (v32 >> 1)];
              unint64_t v34 = sub_216851B24(v33);
              unint64_t v35 = sub_216851B24((uint64_t)&v81);
              if (v34 >= v35) {
                v32 >>= 1;
              }
              else {
                v32 += ~(v32 >> 1);
              }
              if (v34 < v35) {
                uint64_t v30 = (uint64_t *)(v33 + 24);
              }
            }
            while (v32);
            int v31 = (__n128 *)v30;
            uint64_t v30 = (uint64_t *)v86;
          }
          long long v18 = this;
          if (v30 != (uint64_t *)v31 && (uint64_t v36 = sub_216851B24((uint64_t)v31), v36 == sub_216851B24((uint64_t)&v81)))
          {
            unint64_t v28 = v31[1].n128_u64[0];
          }
          else
          {
            __n128 v82 = v81;
            if (v81.n128_u64[1]) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v81.n128_u64[1] + 8), 1u, memory_order_relaxed);
            }
            *(void *)&long long v83 = v28;
            sub_216D89480((uint64_t *)&v85, v31, &v82);
            unint64_t v37 = v82.n128_u64[1];
            if (v82.n128_u64[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v82.n128_u64[1] + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(unint64_t))(*(void *)v37 + 8))(v37);
            }
          }
        }
        else
        {
          long long v18 = this;
        }
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)v81.n128_u64[1];
        if (v81.n128_u64[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)(v81.n128_u64[1] + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::PlugRegistry *))(*(void *)v19 + 8))(v19);
        }
        uint64_t v38 = v20 + 24;
        if (*(_DWORD *)(v20 + 52) == 3)
        {
          uint64_t v40 = (uint64_t *)*((void *)v18 + 7);
          unint64_t v39 = *((void *)v18 + 8);
          if ((unint64_t)v40 >= v39)
          {
            uint64_t v43 = ((char *)v40 - *v76) >> 4;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 60) {
              sub_21677CB10();
            }
            uint64_t v45 = v39 - (void)*v76;
            if (v45 >> 3 > v44) {
              unint64_t v44 = v45 >> 3;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_216787EE0((uint64_t)this + 64, v46);
            uint64_t v48 = (uint64_t *)((char *)v19 + 16 * v43);
            *uint64_t v48 = v38;
            v48[1] = v28;
            uint64_t v50 = (char *)*((void *)v18 + 6);
            uint64_t v49 = (char *)*((void *)v18 + 7);
            uint64_t v51 = v48;
            if (v49 != v50)
            {
              do
              {
                *((_OWORD *)v51 - 1) = *((_OWORD *)v49 - 1);
                v51 -= 2;
                v49 -= 16;
              }
              while (v49 != v50);
              uint64_t v49 = *v76;
            }
            uint64_t v41 = v48 + 2;
            *((void *)v18 + 6) = v51;
            *((void *)v18 + 7) = v48 + 2;
            *((void *)v18 + 8) = (char *)v19 + 16 * v47;
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            uint64_t *v40 = v38;
            v40[1] = v28;
            uint64_t v41 = v40 + 2;
          }
          *((void *)v18 + 7) = v41;
        }
        else
        {
          v82.n128_u64[0] = v20 + 24;
          v82.n128_u64[1] = v28;
          long long v83 = 0uLL;
          int v84 = 0;
          sub_216D91D5C((uint64_t)this + 8, (void *)(v20 + 24), (uint64_t *)(v20 + 24), &v82);
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)*((void *)&v83 + 1);
          *((void *)&v83 + 1) = 0;
          if (v19)
          {
            uint64_t v42 = (void *)sub_216D12D7C((uint64_t)v19);
            operator delete(v42);
          }
        }
      }
      uint64_t v20 = *(void *)v20;
    }
    while (v20);
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3);
  }
  else
  {
    unint64_t v52 = 0;
  }
  uint64_t v53 = *(void *)v18;
  sub_216D89604((uint64_t *)(v53 + 8), v52);
  v81.n128_u64[0] = (unint64_t)&v85;
  v81.n128_u64[1] = v53 + 8;
  v82.n128_u64[0] = (unint64_t)&unk_26C769760;
  v82.n128_u64[1] = (unint64_t)&v81;
  tbb::interface7::internal::isolate_within_arena(&v82, 0);
  uint64_t v55 = *(uint64_t **)(v53 + 8);
  uint64_t v54 = *(uint64_t **)(v53 + 16);
  if (v55 != v54)
  {
    v77 = *(uint64_t **)(v53 + 16);
    do
    {
      v56 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_216AA5ECC(v55);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v56, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v80);
      v79 = 0;
      v57 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AA5ECC(v55);
      v58 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v57);
      v59 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v59) {
        v59 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      v82.n128_u64[1] = (unint64_t)&v79;
      *(void *)&long long v83 = &stru_26C74DD70;
      WORD4(v83) = 0;
      v82.n128_u64[0] = (unint64_t)&unk_26C75E9C0;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v57, v58, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v59 + 112), &v82);
      if (BYTE8(v83)) {
        int v61 = 0;
      }
      else {
        int v61 = HasField;
      }
      if (v61 == 1)
      {
        v81.n128_u64[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79);
        v81.n128_u64[1] = v62;
        uint64_t v63 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79);
        uint64_t v65 = v64;
        while (1)
        {
          unint64_t v66 = v81.n128_u64[0];
          BOOL v67 = !v65 || v81.n128_u64[0] == v63;
          BOOL v68 = v67;
          if (v81.n128_u64[1] == v65 && v68) {
            break;
          }
          v70 = (const char *)(v81.n128_u64[0] + 32);
          if (sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)(v81.n128_u64[0] + 56)))
          {
            pxrInternal__aapl__pxrReserved__::VtDictionary::insert((pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(void *)this + 120), (const void **)(v66 + 32), (uint64_t)&v82);
          }
          else
          {
            v82.n128_u64[0] = (unint64_t)"usd/schemaRegistry.cpp";
            v82.n128_u64[1] = (unint64_t)"_InitializePrimDefsAndSchematicsForPluginSchemas";
            *(void *)&long long v83 = 1175;
            *((void *)&v83 + 1) = "void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_Ini"
                                    "tializePrimDefsAndSchematicsForPluginSchemas()";
            LOBYTE(v84) = 0;
            if (*(char *)(v66 + 55) < 0) {
              v70 = *(const char **)v70;
            }
            v73 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v55);
            uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v73);
            if (*(char *)(RealPath + 23) >= 0) {
              v75 = (const char *)RealPath;
            }
            else {
              v75 = *(const char **)RealPath;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v82, 1, (pxrInternal__aapl__pxrReserved__ *)"Found a VtTokenArray value for type name key '%s' in fallbackPrimTypes layer metadata dictionary in generated schema file '%s'.", v70, v75);
          }
          sub_2168EF1B0(&v81, v71, v72);
        }
        uint64_t v54 = v77;
      }
      sub_2168EBBB8(&v79, 0);
      sub_2168EBBB8(&v80, 0);
      ++v55;
    }
    while (v55 != v54);
  }
  v82.n128_u64[0] = (unint64_t)&v85;
  sub_2168CE2A4((void ***)&v82);
}

void sub_216D89364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_216D8D5A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216D89480(uint64_t *a1, __n128 *a2, __n128 *a3)
{
  n128_u64 = a2->n128_u64;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 3);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v21 = v9;
    if (v14) {
      uint64_t v15 = (char *)sub_216782ED8(v9, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    long long v17 = v15;
    long long v18 = &v15[24 * v8];
    uint64_t v19 = v18;
    uint64_t v20 = &v15[24 * v14];
    sub_216D91858(&v17, a3);
    n128_u64 = (void *)sub_216D919A8(a1, &v17, n128_u64);
    sub_2168CE630((uint64_t)&v17);
  }
  else if (a2 == (__n128 *)v6)
  {
    *a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    *(void *)(v7 + 24 * v8 + 16) = a3[1].n128_u64[0];
    a1[1] = (uint64_t)&a2[1].n128_i64[1];
  }
  else
  {
    sub_216D91800((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)&a2[1].n128_i64[1]);
    sub_21697D0EC((uint64_t)n128_u64, (uint64_t)a3);
    *(void *)(v7 + 24 * v8 + 16) = a3[1].n128_u64[0];
  }
  return n128_u64;
}

void sub_216D895F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168CE630((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D89604(uint64_t *a1, unint64_t a2)
{
  std::string::size_type v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6)
        std::string::size_type v3 = sub_216ABB798(v3 - 1);
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_216D92094(a1, v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetOverridePropertyNames@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91C10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91C10))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B91C08, "apiSchemaOverridePropertyNames");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B91C08, &dword_216758000);
    __cxa_guard_release(&qword_267B91C10);
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216D8979C(v6, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 72), (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B91C08, (uint64_t (**)(void, uint64_t))a3);
}

void sub_216D89770(_Unwind_Exception *a1)
{
}

uint64_t sub_216D8979C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t (**a5)(void, uint64_t))
{
  if (a5)
  {
    v7[1] = a5;
    void v7[2] = (uint64_t (**)(void, uint64_t))&stru_26C74E298;
    __int16 v8 = 0;
    v7[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DD20;
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey((uint64_t)a1, (uint64_t)a2, a3, a4, v7);
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(a1, a2, a3, a4, 0);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetDirectBuiltinAPISchemas(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
}

void sub_216D89BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (*(char *)(v8 - 89) < 0) {
    operator delete(*(void **)(v8 - 112));
  }
  sub_2169E0B70((void **)va);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder::BuildPrimDefinition(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder *this, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *a2)
{
  if (*((_DWORD *)this + 8) != 2)
  {
    *((_DWORD *)this + 8) = 1;
    std::string::size_type v3 = (uint64_t *)(*(void *)(*(void *)a2 + 8) + 8 * *((void *)this + 1));
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v4, *(const pxrInternal__aapl__pxrReserved__::TfToken **)this, v18);
    OverridePropertyNames = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetOverridePropertyNames(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18, (uint64_t)v17);
    uint64_t v6 = *(uint64_t **)this;
    if (*(_DWORD *)(*(void *)this + 28) == 6)
    {
      unint64_t v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v7) {
        Emptyunint64_t String = (uint64_t *)(v7 + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(OverridePropertyNames);
      }
      sub_216779094(__p, "");
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameTemplate((const void **)EmptyString, (uint64_t)__p, (uint64_t)&v16);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v9 = *v6;
      uint64_t v16 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v16 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    unint64_t v10 = operator new(0x70uLL);
    v10[6] = 0u;
    void v10[4] = 0u;
    v10[5] = 0u;
    void v10[2] = 0u;
    v10[3] = 0u;
    *unint64_t v10 = 0u;
    v10[1] = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v10 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v10 + 3);
    v10[1] = 0u;
    void v10[2] = 0u;
    *((_DWORD *)v10 + 12) = 1065353216;
    *(_OWORD *)((char *)v10 + 56) = 0u;
    *(_OWORD *)((char *)v10 + 72) = 0u;
    *(_OWORD *)((char *)v10 + 88) = 0u;
    *((void *)v10 + 13) = 0;
    *((void *)this + 2) = v10;
    sub_216ABBA60((uint64_t *)__p, v3);
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForAPISchema((uint64_t)v10, &v16, (uint64_t *)__p, v18, v17);
    unint64_t v11 = __p[1];
    if (__p[1])
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v11 + 8))(v11);
      }
    }
    sub_216D12D3C((uint64_t *)this + 3, *((void *)this + 2));
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetDirectBuiltinAPISchemas(&v15);
  }
  return 1;
}

void sub_216D8A29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_2169B2E0C((void *)(v31 - 136));
  sub_21697B754((_DWORD *)(v31 - 96));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(atomic_uint **this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v5) {
    uint64_t v5 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  }
  unint64_t v6 = *((void *)v5 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    unint64_t v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0) {
      unint64_t v7 = *(const char **)v7;
    }
  }
  else
  {
    unint64_t v7 = "";
  }
  std::string::value_type v8 = *v7;
  if (((unint64_t)*this & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)(((unint64_t)*this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  std::string::size_type v10 = std::string::find((const std::string *)EmptyString, v8, 0);
  if (v10 == -1)
  {
    char v14 = *this;
    *a2 = *this;
    if ((v14 & 7) != 0)
    {
      uint64_t v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v15;
      }
    }
    a2[1] = 0;
  }
  else
  {
    std::string::size_type v11 = v10;
    std::string::basic_string(&v17, (const std::string *)EmptyString, 0, v10, (std::allocator<char> *)&v16);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
    if (*((char *)EmptyString + 23) < 0) {
      Emptyunint64_t String = (uint64_t *)*EmptyString;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (const char *)EmptyString + v11 + 1);
    unint64_t v12 = v18;
    long long v18 = 0;
    unint64_t v13 = v16;
    *a2 = v12;
    a2[1] = v13;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216D8A530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateAppliedAPIPrimDefinitions(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *this)
{
  for (uint64_t i = (void *)*((void *)this + 3); i; uint64_t i = (void *)*i)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder::BuildPrimDefinition((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_APISchemaPrimDefBuilder *)(i + 3), this);
    BOOL v3 = *(_DWORD *)(i[3] + 28) == 6;
    uint64_t v4 = *(void *)this + 72;
    uint64_t v5 = i[6];
    i[6] = 0;
    uint64_t v8 = v5;
    BOOL v9 = v3;
    sub_216D9266C(v4, i + 2, i + 2, &v8);
    uint64_t v6 = v8;
    uint64_t v8 = 0;
    if (v6)
    {
      unint64_t v7 = (void *)sub_216D12D7C(v6);
      operator delete(v7);
    }
  }
}

void sub_216D8A608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
  {
    std::string::size_type v10 = (void *)sub_216D12D7C(a9);
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfPath *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateConcretePrimDefinitions(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1 != *((void *)this + 7))
  {
    unint64_t v2 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v1;
    BOOL v3 = (uint64_t *)(*(void *)(*(void *)this + 8) + 8 * *(void *)(v1 + 8));
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v4, v2, &v11);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetOverridePropertyNames(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (uint64_t)v10);
    uint64_t v5 = operator new(0x70uLL);
    v5[5] = 0u;
    v5[6] = 0u;
    uint64_t v5[3] = 0u;
    v5[4] = 0u;
    v5[1] = 0u;
    double v5[2] = 0u;
    *uint64_t v5 = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5 + 3);
    v5[1] = 0u;
    double v5[2] = 0u;
    *((_DWORD *)v5 + 12) = 1065353216;
    *(_OWORD *)((char *)v5 + 56) = 0u;
    *(_OWORD *)((char *)v5 + 72) = 0u;
    *(_OWORD *)((char *)v5 + 88) = 0u;
    *((void *)v5 + 13) = 0;
    void v9[3] = v5;
    sub_216ABBA60(&v7, v3);
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_IntializeForTypedSchema((uint64_t)v5, &v7, &v11, v10);
    uint64_t v6 = v8;
    if (v8)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_GetDirectBuiltinAPISchemas(v9);
  }
  return this;
}

void sub_216D8A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_2169735B4((uint64_t)&a9);
  a9 = (void **)&a15;
  sub_216889A04(&a9);
  uint64_t v21 = a18;
  a18 = 0;
  if (v21)
  {
    BOOL v22 = (void *)sub_216D12D7C(v21);
    operator delete(v22);
  }
  sub_2169B2E0C(&a19);
  sub_21697B754((_DWORD *)(v19 - 88));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_ComposeAPISchemasIntoPrimDefinition(uint64_t a1, uint64_t *a2, atomic_uint ***a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    uint64_t v8 = (void *)(a1 + 72);
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v4, (atomic_uint **)&v17);
      BOOL v9 = sub_2168CB120(v8, &v17);
      if (v9)
      {
        int v11 = *((unsigned __int8 *)v9 + 32);
        if (v11 == (v18 != 0))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_ComposeWeakerAPIPrimDefinition(a2, v9[3], &v18, a4);
        }
        else
        {
          v15[0] = "usd/schemaRegistry.cpp";
          v15[1] = "_ComposeAPISchemasIntoPrimDefinition";
          v15[2] = 1855;
          v15[3] = "void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_ComposeAPISchemasIntoPrimDefinition(UsdPri"
                   "mDefinition *, const TfTokenVector &, _FamilyAndInstanceToVersionMap *) const";
          char v16 = 0;
          unint64_t v12 = (unint64_t)*v4 & 0xFFFFFFFFFFFFFFF8;
          if (v12)
          {
            unint64_t v13 = (const char *)(v12 + 16);
            if (*(char *)(v12 + 39) < 0) {
              unint64_t v13 = *(const char **)v13;
            }
          }
          else
          {
            unint64_t v13 = "";
          }
          if (v11) {
            char v14 = "without";
          }
          else {
            char v14 = "with";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v15, (pxrInternal__aapl__pxrReserved__ *)"API schema '%s' can not be added to a prim definition %s an instance name.", v10, v13, v14);
        }
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_216D8AA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::UsdSchemaRegistry(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((void *)this + 15) = 0;
  unint64_t v2 = operator new(0x70uLL);
  v2[5] = 0u;
  v2[6] = 0u;
  void v2[3] = 0u;
  void v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *unint64_t v2 = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v2 + 2);
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v2 + 3);
  v2[1] = 0u;
  v2[2] = 0u;
  *((_DWORD *)v2 + 12) = 1065353216;
  *(_OWORD *)((char *)v2 + 56) = 0u;
  *(_OWORD *)((char *)v2 + 72) = 0u;
  *(_OWORD *)((char *)v2 + 88) = 0u;
  *((void *)v2 + 13) = 0;
  *((void *)this + 14) = v2;
  uint64_t v5 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_PRIM_DEFINITIONS_FOR_USDGENSCHEMA);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (!*v5)
  {
    uint64_t v8 = (char *)this;
    long long v9 = 0u;
    long long v10 = 0u;
    int v11 = 1065353216;
    *(_OWORD *)std::string __p = 0u;
    memset(v13, 0, sizeof(v13));
    uint64_t v14 = 0;
    int v15 = 1065353216;
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_InitializePrimDefsAndSchematicsForPluginSchemas((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *)&v8);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateAppliedAPIPrimDefinitions((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper *)&v8);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_SchemaDefInitHelper::_PopulateConcretePrimDefinitions((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    sub_216D8D5A8((uint64_t)v13 + 8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    BOOL v3 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)sub_216D8DEE8((uint64_t)&v9);
  }
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance, (unint64_t)this))
  {
    uint64_t v8 = "tf/instantiateSingleton.h";
    *(void *)&long long v9 = "SetInstanceConstructed";
    *((void *)&v9 + 1) = 56;
    *(void *)&long long v10 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSch"
                      "emaRegistry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry]";
    BYTE8(v10) = 0;
    int v11 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v8, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v4);
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v3);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C7697D8);
  return this;
}

void sub_216D8AC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D8ACCC((uint64_t)va);
  sub_2168EBBB8(v4, 0);
  sub_216D8E648(v3);
  sub_216D8E648((uint64_t)(v2 + 4));
  *(void *)(v5 - 56) = v2 + 1;
  sub_216C0ACA8((void ***)(v5 - 56));
  sub_216859A88(v2, v7);
  _Unwind_Resume(a1);
}

uint64_t sub_216D8ACCC(uint64_t a1)
{
  sub_216D8D5A8(a1 + 72);
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  sub_216D8DEE8(a1 + 8);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91C20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91C20))
  {
    qword_267B91C18 = (uint64_t)sub_216D8AD98();
    __cxa_guard_release(&qword_267B91C20);
  }
  return sub_2168CB1F4((void *)qword_267B91C18, this) != 0;
}

void sub_216D8AD80(_Unwind_Exception *a1)
{
}

_OWORD *sub_216D8AD98()
{
  uint64_t v0 = operator new(0x28uLL);
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + 8) = 1065353216;
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v1) {
    uint64_t v1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v1 + 24, (uint64_t *)v1 + 24);
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    unint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v2 + 30, (uint64_t *)v2 + 30);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v3 + 35, (uint64_t *)v3 + 35);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v4 + 38, (uint64_t *)v4 + 38);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5) {
    uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v5 + 57, (uint64_t *)v5 + 57);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v6 + 59, (uint64_t *)v6 + 59);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v7 + 9, (uint64_t *)v7 + 9);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, v8, (uint64_t *)v8);
  long long v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9) {
    long long v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v9 + 25, (uint64_t *)v9 + 25);
  long long v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10) {
    long long v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v10 + 54, (uint64_t *)v10 + 54);
  int v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11) {
    int v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v11 + 7, (uint64_t *)v11 + 7);
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12) {
    unint64_t v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v12 + 53, (uint64_t *)v12 + 53);
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13) {
    unint64_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v13 + 39, (uint64_t *)v13 + 39);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v14) {
    uint64_t v14 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  int v15 = (uint64_t *)*((void *)v14 + 9);
  char v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v16) {
    char v16 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  unint64_t v17 = (uint64_t *)*((void *)v16 + 10);
  while (v15 != v17)
  {
    sub_2168D4AAC((uint64_t)v0, v15, v15);
    ++v15;
  }
  pxrInternal__aapl__pxrReserved__::UsdGetClipRelatedFields(v22);
  uint64_t v18 = (uint64_t *)v22[0];
  uint64_t v19 = (uint64_t *)v22[1];
  while (v18 != v19)
  {
    sub_2168D4AAC((uint64_t)v0, v18, v18);
    ++v18;
  }
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20) {
    uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)v0, (void *)v20 + 26, (uint64_t *)v20 + 26);
  int v23 = (void **)v22;
  sub_216889A04(&v23);
  return v0;
}

void sub_216D8B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsTyped(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const std::type_info *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)this, v4, v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v2 = this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91C30, memory_order_acquire) & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__cxa_guard_acquire(&qword_267B91C30);
    if (this)
    {
      __cxa_guard_release(&qword_267B91C30);
    }
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  uint64_t v4 = qword_267B91C28;
  if ((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Instance);
  }

  return pxrInternal__aapl__pxrReserved__::PlugRegistry::FindDerivedTypeByName(v4, (uint64_t)EmptyString);
}

void sub_216D8B1BC(_Unwind_Exception *a1)
{
}

long long *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAutoApplyAPISchemas(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this)
{
  return &xmmword_267B91D10;
}

void sub_216D8B1F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91D88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91D88))
  {
    sub_216D8DF8C();
    __cxa_atexit((void (*)(void *))sub_216D8E038, &xmmword_267B91D10, &dword_216758000);
    __cxa_guard_release(&qword_267B91D88);
  }
}

void sub_216D8B27C(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedAPISchemaInstanceName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!*(void *)a2) {
    return 0;
  }
  SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(this, a2);
  if (!SchemaInfo || *((_DWORD *)SchemaInfo + 7) != 6) {
    return 0;
  }
  sub_216D8B1F4();
  uint64_t v6 = sub_2168CB120(&xmmword_267B91D60, this);
  if (v6 && v6[5])
  {
    uint64_t v7 = (void *)v6[4];
    if (v7)
    {
      unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        unint64_t v9 = v7[4] & 0xFFFFFFFFFFFFFFF8;
        if (v8 >= v9)
        {
          if (v9 >= v8) {
            goto LABEL_13;
          }
          ++v7;
        }
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    return 0;
  }
LABEL_13:
  unint64_t v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
  }
  int v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168CB120((void *)(v10 + 72), this);
  if (!v11 || (uint64_t v12 = *((void *)v11 + 3)) == 0)
  {
    unint64_t v27 = "usd/schemaRegistry.cpp";
    unint64_t v28 = "IsAllowedAPISchemaInstanceName";
    uint64_t v29 = 1719;
    uint64_t v30 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAllowedAPISchemaInstanceName(const TfToken "
          "&, const TfToken &)";
    char v31 = 0;
    unint64_t v14 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      int v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        int v15 = *(const char **)v15;
      }
    }
    else
    {
      int v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not find UsdPrimDefinition for multiple apply API schema '%s'", v15);
    return 0;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)EmptyString, (uint64_t *)&v27);
  uint64_t v19 = v28;
  if (v27 == v28)
  {
    BOOL v16 = 0;
  }
  else
  {
    uint64_t v20 = *(void *)(v12 + 80);
    uint64_t v21 = *(void *)(v12 + 88);
    if (v20 == v21)
    {
      BOOL v16 = 1;
    }
    else
    {
      uint64_t v22 = v20 + 8;
      do
      {
        if ((*(void *)(v22 - 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
          int v23 = (uint64_t *)((*(void *)(v22 - 8) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          int v23 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v23, &v32);
        unint64_t v24 = *((void *)v19 - 1) & 0xFFFFFFFFFFFFFFF8;
        int v25 = (atomic_uint *)(v32 & 0xFFFFFFFFFFFFFFF8);
        BOOL v16 = v24 != (v32 & 0xFFFFFFFFFFFFFFF8);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit(v25, 0xFFFFFFFE, memory_order_release);
        }
        BOOL v26 = (atomic_uint *)v24 == v25 || v22 == v21;
        v22 += 8;
      }
      while (!v26);
    }
  }
  unint64_t v32 = (unint64_t)&v27;
  sub_216889A04((void ***)&v32);
  return v16;
}

void sub_216D8B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  sub_216889A04(&a16);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaCanOnlyApplyToTypeNames(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D8B1F4();
  if (!*(void *)a2) {
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, a2, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t v5 = sub_2168CB120(xmmword_267B91D38, &v10);
  uint64_t result = v5 + 3;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v5)
  {
LABEL_7:
    uint64_t v7 = sub_2168CB120(xmmword_267B91D38, this);
    if (v7)
    {
      return v7 + 3;
    }
    else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B91C50, memory_order_acquire))
    {
      return &qword_267B91C38;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_267B91C50))
      {
        qword_267B91C38 = 0;
        unk_267B91C40 = 0;
        qword_267B91C48 = 0;
        __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B91C38, &dword_216758000);
        __cxa_guard_release(&qword_267B91C50);
      }
      return &qword_267B91C38;
    }
  }
  return result;
}

void sub_216D8B5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::BuildComposedPrimDefinition(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    *(void *)&long long v16 = "usd/schemaRegistry.cpp";
    *((void *)&v16 + 1) = "BuildComposedPrimDefinition";
    *(void *)&long long v17 = 1787;
    *((void *)&v17 + 1) = "std::unique_ptr<UsdPrimDefinition> pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::Buil"
                            "dComposedPrimDefinition(const TfToken &, const TfTokenVector &) const";
    LOBYTE(v18) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"BuildComposedPrimDefinition without applied API schemas is not allowed. If you want a prim definition for a single prim type with no appied schemas, use FindConcretePrimDefinition instead.");
    *a4 = 0;
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
    int v18 = 1065353216;
    uint64_t v7 = sub_2168CB120((void *)(a1 + 32), a2);
    if (v7 && (uint64_t v8 = v7[3]) != 0)
    {
      char v9 = (char *)operator new(0x70uLL);
      sub_216D8E1D0((uint64_t)v9, v8);
      uint64_t v10 = (atomic_uint **)*((void *)v9 + 7);
    }
    else
    {
      char v9 = (char *)operator new(0x70uLL);
      *((_OWORD *)v9 + 6) = 0u;
      *((_OWORD *)v9 + 4) = 0u;
      *((_OWORD *)v9 + 5) = 0u;
      *((_OWORD *)v9 + 2) = 0u;
      *((_OWORD *)v9 + 3) = 0u;
      *(_OWORD *)char v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v9 + 2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v9 + 3);
      uint64_t v10 = 0;
      *((_OWORD *)v9 + 1) = 0u;
      *((_OWORD *)v9 + 2) = 0u;
      *((_DWORD *)v9 + 12) = 1065353216;
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *((void *)v9 + 13) = 0;
    }
    *a4 = v9;
    int v11 = (atomic_uint **)*((void *)v9 + 8);
    if (v10 != v11)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v10, (atomic_uint **)&v14);
        SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v14, v12);
        sub_2168D2318(&v14, SchemaInfo + 2);
        sub_216D923D0((uint64_t)&v16, &v14, (uint64_t)&v14, (_DWORD *)SchemaInfo + 6);
        if ((v15 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v14 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v10;
      }
      while (v10 != v11);
      char v9 = *a4;
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::_ComposeAPISchemasIntoPrimDefinition(a1, (uint64_t *)v9, (atomic_uint ***)a3, (uint64_t)&v16);
    sub_2169735B4((uint64_t)&v16);
  }
}

void sub_216D8B7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v11);
  sub_2169735B4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(void *)a1, &v66);
  uint64_t v10 = sub_2168E79D8(&v66);
  if (!(v11 & 1 | (unint64_t)v10))
  {
    __p[0] = "usd/schemaRegistry.cpp";
    __p[1] = "Usd_GetAPISchemaPluginApplyToInfoForType";
    uint64_t v63 = 1878;
    uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(const TfType &, const TfToken "
          "&, UsdSchemaRegistry::TokenToTokenVectorMap *, UsdSchemaRegistry::TokenToTokenVectorMap *, TfHashMap<TfToken, "
          "TfToken::Set, TfHash> *)";
    char v65 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v21 = (const char *)TypeName;
    }
    else {
      uint64_t v21 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find plugin for schema type '%s'", v21);
    goto LABEL_73;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v66);
  pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v12, a1, v61);
  int v13 = sub_216D8BFBC((pxrInternal__aapl__pxrReserved__::TfToken *)v61);
  if ((v13 - 5) < 2)
  {
    unint64_t v14 = sub_216D880B4();
    sub_216D88A6C((pxrInternal__aapl__pxrReserved__::TfToken *)v61, (void *)(v14 + 40), &v59);
    if ((void)v59 != *((void *)&v59 + 1))
    {
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      uint64_t v15 = (void **)sub_216D92CB8(a4, a2, (uint64_t)&unk_2174BFD90, (uint64_t **)&v58);
      sub_216A698A4(v15 + 3);
      *(_OWORD *)(v15 + 3) = v59;
      _DWORD v15[5] = v60;
      v60 = 0;
      long long v59 = 0uLL;
    }
    if (v13 == 5)
    {
      long long v16 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_DISABLE_AUTO_APPLY_API_SCHEMAS);
      if (!v16) {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
      }
      if (*v16) {
        goto LABEL_71;
      }
      unint64_t v17 = sub_216D880B4();
      sub_216D88A6C((pxrInternal__aapl__pxrReserved__::TfToken *)v61, (void *)(v17 + 32), __p);
      if (__p[0] != __p[1])
      {
        if (sub_216C4B19C(0))
        {
          unint64_t v18 = *a2 & 0xFFFFFFFFFFFFFFF8;
          if (v18)
          {
            uint64_t v19 = (const char *)(v18 + 16);
            if (*(char *)(v18 + 39) < 0) {
              uint64_t v19 = *(const char **)v19;
            }
          }
          else
          {
            uint64_t v19 = "";
          }
          sub_216D6B948(", ", (std::string *)__p[0], (std::string *)__p[1], &v58);
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v54 = &v58;
          }
          else {
            uint64_t v54 = (std::string *)v58.__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"API schema '%s' is defined to auto apply to the following schema types: [%s].\n", v52, v53, v19, v54);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
        }
        v69[0] = a2;
        uint64_t v55 = (void **)sub_216D92CB8(a3, a2, (uint64_t)&unk_2174BFD90, v69);
        sub_216A698A4(v55 + 3);
        *(_OWORD *)(v55 + 3) = *(_OWORD *)__p;
        v55[5] = (void *)v63;
        __p[1] = 0;
        uint64_t v63 = 0;
        __p[0] = 0;
      }
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      uint64_t v51 = &v58;
    }
    else
    {
      unint64_t v22 = sub_216D880B4();
      sub_216D88A6C((pxrInternal__aapl__pxrReserved__::TfToken *)v61, (void *)(v22 + 48), &v58);
      if (v58.__r_.__value_.__r.__words[0] != v58.__r_.__value_.__l.__size_)
      {
        v69[0] = a2;
        int v23 = sub_216D92F10(a5, a2, (uint64_t)&unk_2174BFD90, v69);
        std::string::size_type size = v58.__r_.__value_.__l.__size_;
        unint64_t v24 = (uint64_t *)v58.__r_.__value_.__r.__words[0];
        if (v58.__r_.__value_.__r.__words[0] != v58.__r_.__value_.__l.__size_)
        {
          BOOL v26 = (uint64_t **)(v23 + 3);
          unint64_t v27 = v23 + 4;
          do
          {
            sub_21697C15C(v26, v27, v24, v24);
            ++v24;
          }
          while (v24 != (uint64_t *)size);
        }
      }
      unint64_t v28 = sub_216D880B4();
      uint64_t v29 = (pxrInternal__aapl__pxrReserved__::JsValue *)sub_216AA0A98((pxrInternal__aapl__pxrReserved__::TfToken *)v61, (void *)(v28 + 56));
      uint64_t v30 = (unint64_t **)v29;
      if (v29)
      {
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject(v29))
        {
          JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v30);
          unint64_t v32 = JsObject + 1;
          uint64_t v33 = (void *)*JsObject;
          if ((void *)*JsObject != JsObject + 1)
          {
            do
            {
              unint64_t v34 = (const char *)(v33 + 4);
              if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v33 + 7)))
              {
                unint64_t v35 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)v33 + 7);
                uint64_t v36 = v35;
                if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
                  Emptyunint64_t String = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
                }
                else {
                  Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((const void **)EmptyString, (uint64_t)(v33 + 4), (uint64_t)__p);
                pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
                if (SHIBYTE(v63) < 0) {
                  operator delete(__p[0]);
                }
                unint64_t v40 = sub_216D880B4();
                sub_216D88A6C(v36, (void *)(v40 + 40), __p);
                if (__p[0] != __p[1])
                {
                  BOOL v68 = &v57;
                  uint64_t v41 = (void **)sub_216D92CB8(a4, &v57, (uint64_t)&unk_2174BFD90, &v68);
                  sub_216A698A4(v41 + 3);
                  *(_OWORD *)(v41 + 3) = *(_OWORD *)__p;
                  v41[5] = (void *)v63;
                  __p[1] = 0;
                  uint64_t v63 = 0;
                  __p[0] = 0;
                }
                v69[0] = (uint64_t *)__p;
                sub_216889A04((void ***)v69);
                if ((v57 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
              else
              {
                __p[0] = "usd/schemaRegistry.cpp";
                __p[1] = "Usd_GetAPISchemaPluginApplyToInfoForType";
                uint64_t v63 = 1962;
                uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(const TfType &, co"
                      "nst TfToken &, UsdSchemaRegistry::TokenToTokenVectorMap *, UsdSchemaRegistry::TokenToTokenVectorMa"
                      "p *, TfHashMap<TfToken, TfToken::Set, TfHash> *)";
                char v65 = 0;
                unint64_t v38 = *(void *)(sub_216D880B4() + 56) & 0xFFFFFFFFFFFFFFF8;
                if (v38)
                {
                  unint64_t v39 = (const char *)(v38 + 16);
                  if (*(char *)(v38 + 39) < 0) {
                    unint64_t v39 = *(const char **)v39;
                  }
                }
                else
                {
                  unint64_t v39 = "";
                }
                if (*((char *)v33 + 55) < 0) {
                  unint64_t v34 = *(const char **)v34;
                }
                unint64_t v42 = *a2 & 0xFFFFFFFFFFFFFFF8;
                if (v42)
                {
                  uint64_t v43 = (const char *)(v42 + 16);
                  if (*(char *)(v42 + 39) < 0) {
                    uint64_t v43 = *(const char **)v43;
                  }
                }
                else
                {
                  uint64_t v43 = "";
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"%s value for instance name '%s' for API schema type '%s' is not holding a dictionary. PlugInfo may need to be regenerated.", v39, v34, v43);
              }
              unint64_t v44 = (void *)v33[1];
              if (v44)
              {
                do
                {
                  uint64_t v45 = v44;
                  unint64_t v44 = (void *)*v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  uint64_t v45 = (void *)v33[2];
                  BOOL v46 = *v45 == (void)v33;
                  uint64_t v33 = v45;
                }
                while (!v46);
              }
              uint64_t v33 = v45;
            }
            while (v45 != v32);
          }
        }
        else
        {
          __p[0] = "usd/schemaRegistry.cpp";
          __p[1] = "Usd_GetAPISchemaPluginApplyToInfoForType";
          uint64_t v63 = 1946;
          uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType(const TfType &, const Tf"
                "Token &, UsdSchemaRegistry::TokenToTokenVectorMap *, UsdSchemaRegistry::TokenToTokenVectorMap *, TfHashM"
                "ap<TfToken, TfToken::Set, TfHash> *)";
          char v65 = 0;
          unint64_t v47 = *(void *)(sub_216D880B4() + 56) & 0xFFFFFFFFFFFFFFF8;
          if (v47)
          {
            uint64_t v48 = (const char *)(v47 + 16);
            if (*(char *)(v47 + 39) < 0) {
              uint64_t v48 = *(const char **)v48;
            }
          }
          else
          {
            uint64_t v48 = "";
          }
          unint64_t v49 = *a2 & 0xFFFFFFFFFFFFFFF8;
          if (v49)
          {
            uint64_t v50 = (const char *)(v49 + 16);
            if (*(char *)(v49 + 39) < 0) {
              uint64_t v50 = *(const char **)v50;
            }
          }
          else
          {
            uint64_t v50 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Metadata value for key '%s' for API schema type '%s' is not holding a dictionary. PlugInfo may need to be regenerated.", v48, v50);
        }
      }
      __p[0] = &v58;
      uint64_t v51 = (std::string *)__p;
    }
    sub_216889A04((void ***)v51);
LABEL_71:
    __p[0] = &v59;
    sub_216889A04((void ***)__p);
  }
  sub_216812ED4((uint64_t)v61, (void *)v61[1]);
LABEL_73:
  uint64_t result = v67;
  if (v67)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216D8BE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::string __p = &a26;
  sub_216889A04((void ***)&__p);
  a26 = &a20;
  sub_216889A04((void ***)&a26);
  sub_216812ED4((uint64_t)&a23, a24);
  uint64_t v33 = *(atomic_uint **)(v31 - 120);
  if (v33)
  {
    if (atomic_fetch_add_explicit(v33 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v33 + 8))(v33);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216D8BFBC(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  unint64_t v2 = sub_216D880B4();
  uint64_t result = sub_216AA0A98(a1, (void *)(v2 + 64));
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)result);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v17);
    unint64_t v4 = sub_216D880B4();
    uint64_t v5 = v17;
    if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v4 + 72) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = 4;
    }
    else
    {
      unint64_t v6 = sub_216D880B4();
      uint64_t v5 = v17;
      if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v6 + 80) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t result = 5;
      }
      else
      {
        unint64_t v7 = sub_216D880B4();
        uint64_t v5 = v17;
        if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v7 + 88) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t result = 6;
        }
        else
        {
          unint64_t v8 = sub_216D880B4();
          uint64_t v5 = v17;
          if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v8 + 96) & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t result = 3;
          }
          else
          {
            unint64_t v9 = sub_216D880B4();
            uint64_t v5 = v17;
            if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v9 + 104) & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t result = 2;
            }
            else
            {
              unint64_t v10 = sub_216D880B4();
              uint64_t v5 = v17;
              unint64_t v11 = v17 & 0xFFFFFFFFFFFFFFF8;
              if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v10 + 112) & 0xFFFFFFFFFFFFFFF8))
              {
                uint64_t result = 1;
              }
              else
              {
                v15[0] = "usd/schemaRegistry.cpp";
                v15[1] = "_GetSchemaKindFromMetadata";
                v15[2] = 132;
                v15[3] = "UsdSchemaKind pxrInternal__aapl__pxrReserved__::_GetSchemaKindFromMetadata(const JsObject &)";
                char v16 = 0;
                if (v11)
                {
                  uint64_t v12 = (const char *)(v11 + 16);
                  if (*(char *)(v11 + 39) < 0) {
                    uint64_t v12 = *(const char **)v12;
                  }
                }
                else
                {
                  uint64_t v12 = "";
                }
                unint64_t v13 = *(void *)(sub_216D880B4() + 64) & 0xFFFFFFFFFFFFFFF8;
                if (v13)
                {
                  unint64_t v14 = (const char *)(v13 + 16);
                  if (*(char *)(v13 + 39) < 0) {
                    unint64_t v14 = *(const char **)v14;
                  }
                }
                else
                {
                  unint64_t v14 = "";
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid schema kind name '%s' found for plugin metadata key '%s'.", v12, v14);
                uint64_t result = 0;
                uint64_t v5 = v17;
              }
            }
          }
        }
      }
    }
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_216D8C188(_Unwind_Exception *a1)
{
  uint64_t v2 = *(void *)(v1 - 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216D8C1A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  xmmword_267B91C58 = 0u;
  *(_OWORD *)&qword_267B91C68 = 0u;
  dword_267B91C78 = 1065353216;
  xmmword_267B91C80[0] = 0u;
  xmmword_267B91C80[1] = 0u;
  dword_267B91CA0 = 1065353216;
  v21[1] = 0;
  uint64_t v22 = v3;
  uint64_t v20 = (uint64_t *)v21;
  v21[0] = 0;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(v3, &v20);
  sub_216856018(&v20, (unint64_t *)&v22, &v22);
  uint64_t v5 = v20;
  if (v20 != (uint64_t *)v21)
  {
    do
    {
      unint64_t v6 = v5 + 4;
      pxrInternal__aapl__pxrReserved__::TfType::GetAliases((uint64_t)&v22, v5[4], v4, (uint64_t)v19);
      if (v19[1] - v19[0] == 24)
      {
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v29, v19[0], 0);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v7);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*v6, &v27);
        unint64_t v8 = sub_2168E79D8(&v27);
        if (v9 & 1 | (unint64_t)v8)
        {
          unint64_t v10 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v27);
          pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v10, (const pxrInternal__aapl__pxrReserved__::TfType *)(v5 + 4), (uint64_t *)&v23);
          unsigned int v11 = sub_216D8BFBC((pxrInternal__aapl__pxrReserved__::TfToken *)&v23);
          sub_216812ED4((uint64_t)&v23, *((void **)&v23 + 1));
        }
        else
        {
          *(void *)&long long v23 = "usd/schemaRegistry.cpp";
          *((void *)&v23 + 1) = "_GetSchemaKindFromPlugin";
          uint64_t v24 = 144;
          int v25 = "UsdSchemaKind pxrInternal__aapl__pxrReserved__::_GetSchemaKindFromPlugin(const TfType &)";
          char v26 = 0;
          uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v5 + 4));
          if (*(char *)(TypeName + 23) >= 0) {
            unint64_t v13 = (const char *)TypeName;
          }
          else {
            unint64_t v13 = *(const char **)TypeName;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find plugin for schema type '%s'", v13);
          unsigned int v11 = 0;
        }
        uint64_t v14 = v28;
        if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v29, (uint64_t)&v27);
        *(void *)&long long v23 = v29;
        if ((v29 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&long long v23 = v23 & 0xFFFFFFFFFFFFFFF8;
        }
        *((void *)&v23 + 1) = *v6;
        uint64_t v24 = v27;
        if ((v27 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v24 &= 0xFFFFFFFFFFFFFFF8;
        }
        int v25 = (const char *)__PAIR64__(v11, v28);
        uint64_t v15 = sub_216D8C62C((uint64_t)&xmmword_267B91C58, v5 + 4, v5 + 4, &v23);
        if ((v24 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)&long long v23 = v15 + 24;
        sub_216BBA474((uint64_t)xmmword_267B91C80, &v29, &v29, &v23);
        if ((v27 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v29 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      *(void *)&long long v23 = v19;
      sub_216782F20((void ***)&v23);
      char v16 = (uint64_t *)v5[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          char v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v5[2];
          BOOL v18 = *v17 == (void)v5;
          uint64_t v5 = v17;
        }
        while (!v18);
      }
      uint64_t v5 = v17;
    }
    while (v17 != (uint64_t *)v21);
  }
  sub_2167FB780((uint64_t)&v20, v21[0]);
}

void sub_216D8C4CC(_Unwind_Exception *a1)
{
}

uint64_t sub_216D8C5F0(uint64_t a1)
{
  sub_2168C08A0(a1 + 40);

  return sub_216D8C8F0(a1);
}

char *sub_216D8C62C(uint64_t a1, void *a2, void *a3, _OWORD *a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == *a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t v12 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  long long v15 = *a4;
  long long v16 = a4[1];
  *(void *)a4 = 0;
  *(_OWORD *)(v12 + 24) = v15;
  *((void *)a4 + 2) = 0;
  *(_OWORD *)(v12 + 40) = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)uint64_t v12 = *v24;
LABEL_38:
    *uint64_t v24 = v12;
    goto LABEL_39;
  }
  *(void *)uint64_t v12 = *v14;
  *uint64_t v14 = v12;
  *(void *)(v23 + 8 * v4) = v14;
  if (*(void *)v12)
  {
    unint64_t v25 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_216D8C888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216D8C8A4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216D8C8A4(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = __p[5];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = __p[3];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_216D8C8F0(uint64_t a1)
{
  sub_216D8C92C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216D8C92C(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[5];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v5 = v2[3];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216D8C990()
{
  sub_216D86E68();
  xmmword_267B91CB0 = 0u;
  *(_OWORD *)&qword_267B91CC0 = 0u;
  dword_267B91CD0 = 1065353216;
  uint64_t v1 = qword_267B91C68;
  if (qword_267B91C68)
  {
    while (1)
    {
      uint64_t v2 = *(void *)(v1 + 40);
      uint64_t v3 = (atomic_uint *)(v2 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * (v2 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v5 = *((void *)&xmmword_267B91CB0 + 1);
      if (*((void *)&xmmword_267B91CB0 + 1))
      {
        uint8x8_t v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_267B91CB0 + 8));
        v6.i16[0] = vaddlv_u8(v6);
        if (v6.u32[0] > 1uLL)
        {
          unint64_t v0 = v4;
          if (v4 >= *((void *)&xmmword_267B91CB0 + 1)) {
            unint64_t v0 = v4 % *((void *)&xmmword_267B91CB0 + 1);
          }
        }
        else
        {
          unint64_t v0 = v4 & (*((void *)&xmmword_267B91CB0 + 1) - 1);
        }
        unint64_t v7 = *(void **)(xmmword_267B91CB0 + 8 * v0);
        if (v7)
        {
          unint64_t v8 = (void *)*v7;
          if (*v7)
          {
            do
            {
              unint64_t v9 = v8[1];
              if (v9 == v4)
              {
                if ((atomic_uint *)(v8[2] & 0xFFFFFFFFFFFFFFF8) == v3) {
                  goto LABEL_76;
                }
              }
              else
              {
                if (v6.u32[0] > 1uLL)
                {
                  if (v9 >= *((void *)&xmmword_267B91CB0 + 1)) {
                    v9 %= *((void *)&xmmword_267B91CB0 + 1);
                  }
                }
                else
                {
                  v9 &= *((void *)&xmmword_267B91CB0 + 1) - 1;
                }
                if (v9 != v0) {
                  break;
                }
              }
              unint64_t v8 = (void *)*v8;
            }
            while (v8);
          }
        }
      }
      uint8x8_t v10 = operator new(0x30uLL);
      v38[0] = v10;
      v38[1] = &qword_267B91CC0;
      *uint8x8_t v10 = 0;
      v10[1] = v4;
      void v10[2] = v2;
      if ((v2 & 7) != 0 && (atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
        v10[2] &= 0xFFFFFFFFFFFFFFF8;
      }
      v10[3] = 0;
      uint64_t v10[4] = 0;
      v10[5] = 0;
      char v39 = 1;
      float v11 = (float)(unint64_t)(qword_267B91CC8 + 1);
      if (v5 && (float)(*(float *)&dword_267B91CD0 * (float)v5) >= v11) {
        goto LABEL_67;
      }
      BOOL v12 = (v5 & (v5 - 1)) == 0;
      if (v5 < 3) {
        BOOL v12 = 0;
      }
      unint64_t v13 = (2 * v5) | !v12;
      unint64_t v14 = vcvtps_u32_f32(v11 / *(float *)&dword_267B91CD0);
      int8x8_t prime = (int8x8_t)(v13 <= v14 ? v14 : v13);
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v5 = *((void *)&xmmword_267B91CB0 + 1);
      if (*(void *)&prime > *((void *)&xmmword_267B91CB0 + 1)) {
        break;
      }
      if (*(void *)&prime < *((void *)&xmmword_267B91CB0 + 1))
      {
        unint64_t v22 = vcvtps_u32_f32((float)(unint64_t)qword_267B91CC8 / *(float *)&dword_267B91CD0);
        if (*((void *)&xmmword_267B91CB0 + 1) < 3uLL
          || (uint8x8_t v23 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_267B91CB0 + 8)),
              v23.i16[0] = vaddlv_u8(v23),
              v23.u32[0] > 1uLL))
        {
          unint64_t v22 = std::__next_prime(v22);
        }
        else
        {
          uint64_t v24 = 1 << -(char)__clz(v22 - 1);
          if (v22 >= 2) {
            unint64_t v22 = v24;
          }
        }
        if (*(void *)&prime <= v22) {
          int8x8_t prime = (int8x8_t)v22;
        }
        if (*(void *)&prime >= v5)
        {
          unint64_t v5 = *((void *)&xmmword_267B91CB0 + 1);
        }
        else
        {
          if (prime) {
            break;
          }
          unint64_t v37 = (void *)xmmword_267B91CB0;
          *(void *)&xmmword_267B91CB0 = 0;
          if (v37) {
            operator delete(v37);
          }
          unint64_t v5 = 0;
          *((void *)&xmmword_267B91CB0 + 1) = 0;
        }
      }
LABEL_62:
      if ((v5 & (v5 - 1)) != 0)
      {
        if (v4 >= v5) {
          unint64_t v0 = v4 % v5;
        }
        else {
          unint64_t v0 = v4;
        }
      }
      else
      {
        unint64_t v0 = (v5 - 1) & v4;
      }
LABEL_67:
      uint64_t v27 = *(void **)(xmmword_267B91CB0 + 8 * v0);
      if (v27)
      {
        *(void *)v38[0] = *v27;
        *uint64_t v27 = v38[0];
      }
      else
      {
        *(void *)v38[0] = qword_267B91CC0;
        qword_267B91CC0 = v38[0];
        *(void *)(xmmword_267B91CB0 + 8 * v0) = &qword_267B91CC0;
        if (*(void *)v38[0])
        {
          unint64_t v28 = *(void *)(*(void *)v38[0] + 8);
          if ((v5 & (v5 - 1)) != 0)
          {
            if (v28 >= v5) {
              v28 %= v5;
            }
          }
          else
          {
            v28 &= v5 - 1;
          }
          *(void *)(xmmword_267B91CB0 + 8 * v28) = v38[0];
        }
      }
      unint64_t v8 = (void *)v38[0];
      v38[0] = 0;
      ++qword_267B91CC8;
      sub_216D8CF50((uint64_t)v38);
LABEL_76:
      uint64_t v30 = (char *)v8[3];
      uint64_t v29 = (char *)v8[4];
      uint64_t v31 = (uint64_t)(v8 + 3);
      v38[0] = v1 + 24;
      if (v29 != v30)
      {
        unint64_t v32 = (v29 - v30) >> 3;
        do
        {
          unint64_t v33 = v32 >> 1;
          unint64_t v34 = &v30[8 * (v32 >> 1)];
          uint64_t v36 = *(void *)v34;
          unint64_t v35 = v34 + 8;
          v32 += ~(v32 >> 1);
          if (*(_DWORD *)(v36 + 24) > *(_DWORD *)(v1 + 48)) {
            uint64_t v30 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
        uint64_t v29 = v30;
      }
      sub_216D8CFB8(v31, v29, (char *)v38);
      uint64_t v1 = *(void *)v1;
      if (!v1) {
        return;
      }
    }
    if (*(void *)&prime >> 61) {
      sub_21677CA1C();
    }
    long long v16 = operator new(8 * *(void *)&prime);
    float v17 = (void *)xmmword_267B91CB0;
    *(void *)&xmmword_267B91CB0 = v16;
    if (v17) {
      operator delete(v17);
    }
    uint64_t v18 = 0;
    *((int8x8_t *)&xmmword_267B91CB0 + 1) = prime;
    do
      *(void *)(xmmword_267B91CB0 + 8 * v18++) = 0;
    while (*(void *)&prime != v18);
    BOOL v19 = (void **)qword_267B91CC0;
    if (qword_267B91CC0)
    {
      unint64_t v20 = *(void *)(qword_267B91CC0 + 8);
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(prime);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        if (v20 >= *(void *)&prime) {
          v20 %= *(void *)&prime;
        }
      }
      else
      {
        v20 &= *(void *)&prime - 1;
      }
      *(void *)(xmmword_267B91CB0 + 8 * v20) = &qword_267B91CC0;
      for (i = *v19; i; unint64_t v20 = v26)
      {
        unint64_t v26 = i[1];
        if (v21.u32[0] > 1uLL)
        {
          if (v26 >= *(void *)&prime) {
            v26 %= *(void *)&prime;
          }
        }
        else
        {
          v26 &= *(void *)&prime - 1;
        }
        if (v26 != v20)
        {
          if (!*(void *)(xmmword_267B91CB0 + 8 * v26))
          {
            *(void *)(xmmword_267B91CB0 + 8 * v26) = v19;
            goto LABEL_58;
          }
          *BOOL v19 = (void *)*i;
          void *i = **(void **)(xmmword_267B91CB0 + 8 * v26);
          **(void **)(xmmword_267B91CB0 + 8 * v26) = i;
          uint64_t i = v19;
        }
        unint64_t v26 = v20;
LABEL_58:
        BOOL v19 = (void **)i;
        uint64_t i = (void *)*i;
      }
    }
    unint64_t v5 = (unint64_t)prime;
    goto LABEL_62;
  }
}

void sub_216D8CEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D8CF50((uint64_t)va);
  sub_216D8CED0((uint64_t)&xmmword_267B91CB0);
  _Unwind_Resume(a1);
}

uint64_t sub_216D8CED0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        void v2[4] = v4;
        operator delete(v4);
      }
      uint64_t v5 = v2[2];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_216D8CF50(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[3];
      if (v3)
      {
        void v2[4] = v3;
        operator delete(v3);
      }
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_216D8CFB8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint8x8_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      BOOL v19 = (char *)sub_21677CB28(a1 + 16, v18);
    }
    else {
      BOOL v19 = 0;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    unint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint8x8_t v23 = (char *)sub_21677CB28(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)unint64_t v20 = *(void *)v3;
    unint64_t v28 = v20 + 8;
    uint64_t v4 = sub_216891860((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    uint8x8_t v10 = v6 - 8;
    float v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_216D8D1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D8D1FC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint8x8_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216D8D25C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D8D278(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint8x8_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216D8D2D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D8D2F4(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint8x8_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *unint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216D8D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216D8D55C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216D8D55C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 3;
    sub_216889A04(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_216D8D5A8(uint64_t a1)
{
  sub_216D8D5E4(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216D8D5E4(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      unint64_t v4 = (void **)(v2 + 24);
      sub_216889A04(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216D8D63C(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)*((void *)a1 + 1);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v5 = *(void *)v3;
  uint64_t v4 = *((void *)v3 + 1);
  v12[0] = v3;
  v12[1] = v2;
  if (v4 != v5)
  {
    uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v14[0] = 0;
      uint64_t v15 = 65539;
      int v16 = 55;
      tbb::task_group_context::init((uint64_t)v14, v7, v8, v9);
      unint64_t v13 = (tbb::task_group_context *)v14;
      uint64_t v10 = tbb::internal::allocate_root_with_context_proxy::allocate(&v13, 0x38uLL);
      *(unsigned char *)(v10 - 11) = 1;
      *(void *)uint64_t v10 = &unk_26C7697A0;
      *(void *)(v10 + 8) = v6;
      *(_OWORD *)(v10 + 16) = xmmword_217411D30;
      *(void *)(v10 + 32) = v12;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v10);
      *(_DWORD *)(v10 + 48) = 0;
      *(unsigned char *)(v10 + 52) = 5;
      *(void *)(v10 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v10 - 40) + 16))(*(void *)(v10 - 40), v10, v10 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v14);
    }
    else
    {
      sub_216D8DC1C(v12, 0, v6);
    }
  }
}

void sub_216D8D79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a11, v15);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_216D8D7E8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C7697A0;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        uint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        uint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      unint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)unint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      uint8x8_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C7697A0;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_216D8DC1C(*((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216D8DC1C(*((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)this + 4), v6, v4);
  return 0;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216D8DC1C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (a3 != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 24 * a2;
    do
    {
      uint64_t v6 = (uint64_t *)(*(void *)*v4 + v5);
      unint64_t v7 = (const void **)(sub_2168E5D78(v6) + 56);
      sub_216779094(&__p, "generatedSchema.usda");
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths(v7, (uint64_t)&__p, &v28);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p);
      }
      std::string __p = 0;
      long long v24 = 0;
      uint64_t v25 = 0;
      pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous((uint64_t)&v28, 0, (uint64_t)&__p, &v21);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p);
      }
      if (sub_216C4B19C(10))
      {
        uint64_t v8 = sub_2168E5D78(v6);
        uint64_t v11 = (void *)(v8 + 8);
        if (*(char *)(v8 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v28;
        }
        else {
          uint64_t v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        uint64_t v13 = "valid";
        if (!v21) {
          uint64_t v13 = "invalid";
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Looking up generated schema for plugin %s at path %s. Generated schema %s.\n", v9, v10, v11, v12, v13);
      }
      if (!v21)
      {
        std::string __p = "usd/schemaRegistry.cpp";
        long long v24 = "_GetGeneratedSchema";
        uint64_t v25 = 786;
        unint64_t v26 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::_GetGeneratedSchema(const PlugPluginPtr &)";
        char v27 = 0;
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v14 = &v28;
        }
        else {
          unint64_t v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        uint64_t v15 = sub_2168E5D78(v6);
        unsigned __int8 v17 = (void *)(v15 + 8);
        if (*(char *)(v15 + 31) < 0) {
          unsigned __int8 v17 = (void *)*v17;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to open schema layer at path '%s'. Any schemas defined in plugin library '%s' will not have valid prim definitions.", v16, v14, v17);
        long long v24 = 0;
        uint64_t v25 = 0;
        std::string __p = &v24;
        pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&v28, (pxrInternal__aapl__pxrReserved__::TfToken *)&__p, (uint64_t *)&v22);
        unsigned __int8 v18 = v21;
        unint64_t v21 = v22;
        uint64_t v22 = 0;
        sub_2168BD378((int)&v21, v18);
        sub_216ABB798(&v22);
        sub_2167877AC((uint64_t)&__p, v24);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      unsigned int v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(void *)v4[1]
                                                                                + 8
                                                                                * *(void *)(*(void *)*v4 + v5 + 16));
      unsigned __int8 v20 = *v19;
      *unsigned int v19 = v21;
      unint64_t v21 = 0;
      sub_2168BD378((int)v19, v20);
      uint64_t result = sub_216ABB798(&v21);
      v5 += 24;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_216D8DE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216D8DEBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x216D8DEA4);
}

void sub_216D8DED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x216D8DEB0);
  }
  JUMPOUT(0x216D8DEB4);
}

uint64_t sub_216D8DEE8(uint64_t a1)
{
  sub_216D8DF24(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216D8DF24(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216D12D3C(v2 + 6, 0);
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216D8DF8C()
{
  xmmword_267B91D10 = 0u;
  *(_OWORD *)&qword_267B91D20 = 0u;
  dword_267B91D30 = 1065353216;
  xmmword_267B91D38[0] = 0u;
  xmmword_267B91D38[1] = 0u;
  dword_267B91D58 = 1065353216;
  xmmword_267B91D60 = 0u;
  unk_267B91D70 = 0u;
  dword_267B91D80 = 1065353216;
  sub_216D86E68();
  for (uint64_t i = &qword_267B91C68;
        ;
        pxrInternal__aapl__pxrReserved__::Usd_GetAPISchemaPluginApplyToInfoForType((pxrInternal__aapl__pxrReserved__::PlugRegistry *)(i + 4), i + 3, (uint64_t)&xmmword_267B91D10, (uint64_t)xmmword_267B91D38, (uint64_t)&xmmword_267B91D60))
  {
    uint64_t i = (uint64_t *)*i;
    if (!i) {
      break;
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::CollectAddtionalAutoApplyAPISchemasFromPlugins((pxrInternal__aapl__pxrReserved__::PlugRegistry *)&xmmword_267B91D10);
}

void sub_216D8E010(_Unwind_Exception *a1)
{
  sub_216D8E07C(v1 + 80);
  sub_216D8E120(v1 + 40);
  sub_216D8E120(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D8E038(uint64_t a1)
{
  sub_216D8E07C(a1 + 80);
  sub_216D8E120(a1 + 40);

  return sub_216D8E120(a1);
}

uint64_t sub_216D8E07C(uint64_t a1)
{
  sub_216D8E0B8(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216D8E0B8(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      sub_2168CB05C((uint64_t)(v2 + 3), v2[4]);
      unint64_t v4 = (unint64_t)v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

uint64_t sub_216D8E120(uint64_t a1)
{
  sub_216D8E15C(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216D8E15C(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v5 = (void **)(v2 + 24);
      sub_216889A04(&v5);
      uint64_t v4 = *((void *)v2 + 2);
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216D8E1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a2 + 12);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_DWORD *)(a1 + 12);
  sub_216981010((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_21698105C(v5, v4);
  sub_216D8E2E4(a1 + 16, a2 + 16);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_21698FA28((void *)(a1 + 56), *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_21698FA28((void *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  sub_2168BD80C((uint64_t *)(a1 + 104));
  return a1;
}

void sub_216D8E298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  sub_216889A04((void ***)va);
  sub_216D12DEC(v3);
  sub_216D7C0A8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216D8E2E4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_216D8E35C(a1, i + 2, i + 2);
  return a1;
}

void sub_216D8E344(_Unwind_Exception *a1)
{
  sub_216D12DEC(v1);
  _Unwind_Resume(a1);
}

void *sub_216D8E35C(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  unint64_t v14 = operator new(0x28uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *unint64_t v14 = 0;
  v14[1] = v7;
  sub_216D8E5D4((uint64_t)(v14 + 2), a3);
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216D7F750((uint64_t)v24, 0);
  return v11;
}

void sub_216D8E5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D7F750((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216D8E5D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = a2[1];
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)a2 + 5);
  return a1;
}

uint64_t sub_216D8E648(uint64_t a1)
{
  sub_216D8E684(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216D8E684(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216D12D3C(v2 + 3, 0);
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_216D8E6EC(uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  sub_216D8E974(v7, a2, a3 | 8);
  return a1;
}

void sub_216D8E848(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x21D447E60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D8E870(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x21D447E60](a1 + 120);
  return a1;
}

uint64_t sub_216D8E974(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_216D8EA14(a1);
  return a1;
}

void sub_216D8E9F0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_216D8EA14(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t *sub_216D8EB28(uint64_t a1, void *a2, uint64_t *a3, __n128 *a4)
{
  unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  float v15 = (uint64_t *)(a1 + 16);
  uint64_t i = (uint64_t *)operator new(0x30uLL);
  uint64_t *i = 0;
  i[1] = v9;
  sub_216D8ED98(i + 2, a3, a4);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint8x8_t v23 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    uint64_t *i = *v23;
LABEL_38:
    *uint8x8_t v23 = (uint64_t)i;
    goto LABEL_39;
  }
  uint64_t *i = *v15;
  *float v15 = (uint64_t)i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint8x8_t v23 = (uint64_t *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216D8ED7C(_Unwind_Exception *a1)
{
  sub_216D8EDE8(v2, v1);
  _Unwind_Resume(a1);
}

__n128 sub_216D8ED98(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 1) = *a3;
  a1[3] = a3[1].n128_i64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void sub_216D8EDE8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v4 = (void **)(a2 + 24);
    sub_216889A04(&v4);
    uint64_t v3 = *(void *)(a2 + 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

uint64_t sub_216D8EE50(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  std::string::size_type v7 = (uint64_t *)result;
LABEL_2:
  v325 = a2 - 1;
  uint64_t i = v7;
  while (1)
  {
    std::string::size_type v7 = i;
    uint64_t v9 = (char *)a2 - (char *)i;
    uint64_t v10 = a2 - i;
    if (v5 || !v4)
    {
      switch(v10)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v157 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v157 = result;
          }
          if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v311 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v311 = result;
          }
          if (*(char *)(v157 + 23) >= 0) {
            v312 = (char *)v157;
          }
          else {
            v312 = *(char **)v157;
          }
          int v313 = *v312;
          if (*(char *)(v311 + 23) >= 0) {
            v314 = (char *)v311;
          }
          else {
            v314 = *(char **)v311;
          }
          if (v313 < 0
            || (int v315 = *v314, v315 < 0)
            || ((unsigned int v316 = v313,
                 unsigned int v317 = v315,
                 unsigned int v318 = (v315 ^ v316) & 0xFFFFFFDF,
                 v316 >= 0x40)
              ? (BOOL v319 = v318 == 0)
              : (BOOL v319 = 1),
                v319 || v317 < 0x40))
          {
            __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v157, v311);
            if (!result) {
              return result;
            }
          }
          else if ((((_BYTE)v316 + 5) & 0x1Fu) >= (((_BYTE)v317 + 5) & 0x1Fu))
          {
            return result;
          }
          uint64_t v320 = *v7;
          *std::string::size_type v7 = *(a2 - 1);
          *(a2 - 1) = v320;
          return result;
        case 3:
          return sub_216D90A50((uint64_t)v7, v7 + 1, v325);
        case 4:
          return (uint64_t)sub_216D91270(v7, v7 + 1, v7 + 2, v325);
        case 5:
          return (uint64_t)sub_216D906E4(v7, v7 + 1, v7 + 2, v7 + 3, v325);
        default:
          JUMPOUT(0);
      }
    }
    if (v9 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v7 == a2) {
        return result;
      }
      int64_t v191 = (unint64_t)(v10 - 2) >> 1;
      int64_t v327 = v191;
      while (1)
      {
        int64_t v192 = v191;
        if (v327 < v191) {
          goto LABEL_476;
        }
        uint64_t v193 = (2 * v191) | 1;
        v194 = &v7[v193];
        if (2 * v191 + 2 < v10)
        {
          if ((v194[1] & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v195 = (v194[1] & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v195 = result;
          }
          if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v196 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v196 = result;
          }
          if (*(char *)(v195 + 23) >= 0) {
            v197 = (char *)v195;
          }
          else {
            v197 = *(char **)v195;
          }
          int v198 = *v197;
          if (*(char *)(v196 + 23) >= 0) {
            v199 = (char *)v196;
          }
          else {
            v199 = *(char **)v196;
          }
          if ((v198 & 0x80000000) == 0)
          {
            int v200 = *v199;
            if ((v200 & 0x80000000) == 0)
            {
              unsigned int v201 = v198;
              unsigned int v202 = v200;
              unsigned int v203 = (v200 ^ v201) & 0xFFFFFFDF;
              BOOL v204 = v201 < 0x40 || v203 == 0;
              if (!v204 && v202 >= 0x40)
              {
                if ((((_BYTE)v201 + 5) & 0x1Fu) >= (((_BYTE)v202 + 5) & 0x1Fu)) {
                  goto LABEL_401;
                }
LABEL_400:
                ++v194;
                uint64_t v193 = 2 * v192 + 2;
                goto LABEL_401;
              }
            }
          }
          __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v195, v196);
          if (result) {
            goto LABEL_400;
          }
        }
LABEL_401:
        v205 = &v7[v192];
        if ((*v205 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v206 = (*v205 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          uint64_t v206 = result;
        }
        if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v207 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          uint64_t v207 = result;
        }
        if (*(char *)(v206 + 23) >= 0) {
          v208 = (char *)v206;
        }
        else {
          v208 = *(char **)v206;
        }
        int v209 = *v208;
        if (*(char *)(v207 + 23) >= 0) {
          v210 = (char *)v207;
        }
        else {
          v210 = *(char **)v207;
        }
        if (v209 < 0
          || (int v211 = *v210, v211 < 0)
          || ((unsigned int v212 = v209,
               unsigned int v213 = v211,
               unsigned int v214 = (v211 ^ v212) & 0xFFFFFFDF,
               v212 >= 0x40)
            ? (BOOL v215 = v214 == 0)
            : (BOOL v215 = 1),
              v215 || v213 < 0x40))
        {
          __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v206, v207);
          if (result) {
            goto LABEL_476;
          }
        }
        else if ((((_BYTE)v212 + 5) & 0x1Fu) < (((_BYTE)v213 + 5) & 0x1Fu))
        {
          goto LABEL_476;
        }
        uint64_t v216 = *v205;
        uint64_t *v205 = 0;
        int64_t v321 = v192;
        uint64_t v322 = v216;
        unint64_t v217 = v216 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v324 = (v216 & 0xFFFFFFFFFFFFFFF8) + 16;
        while (1)
        {
          v218 = v194;
          if (v194 != v205)
          {
            if ((*v205 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v205 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t *v205 = *v194;
            uint64_t *v194 = 0;
          }
          if (v327 < v193) {
            break;
          }
          uint64_t v219 = 2 * v193;
          uint64_t v193 = (2 * v193) | 1;
          v194 = &v7[v193];
          uint64_t v220 = v219 + 2;
          if (v219 + 2 < v10)
          {
            if ((v194[1] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v221 = (v194[1] & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v221 = result;
            }
            if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v222 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v222 = result;
            }
            if (*(char *)(v221 + 23) >= 0) {
              v223 = (char *)v221;
            }
            else {
              v223 = *(char **)v221;
            }
            int v224 = *v223;
            if (*(char *)(v222 + 23) >= 0) {
              v225 = (char *)v222;
            }
            else {
              v225 = *(char **)v222;
            }
            if (v224 < 0
              || (int v226 = *v225, v226 < 0)
              || ((unsigned int v227 = v224,
                   unsigned int v228 = v226,
                   unsigned int v229 = (v226 ^ v227) & 0xFFFFFFDF,
                   v227 >= 0x40)
                ? (BOOL v230 = v229 == 0)
                : (BOOL v230 = 1),
                  v230 || v228 < 0x40))
            {
              __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v221, v222);
              if (!result) {
                goto LABEL_449;
              }
LABEL_448:
              ++v194;
              uint64_t v193 = v220;
              goto LABEL_449;
            }
            if ((((_BYTE)v227 + 5) & 0x1Fu) < (((_BYTE)v228 + 5) & 0x1Fu)) {
              goto LABEL_448;
            }
          }
LABEL_449:
          uint64_t v231 = v324;
          if (!v217)
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v231 = result;
          }
          if ((*v194 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v232 = (*v194 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v232 = result;
          }
          if (*(char *)(v231 + 23) >= 0) {
            v233 = (char *)v231;
          }
          else {
            v233 = *(char **)v231;
          }
          int v234 = *v233;
          if (*(char *)(v232 + 23) >= 0) {
            v235 = (char *)v232;
          }
          else {
            v235 = *(char **)v232;
          }
          if (v234 < 0
            || (int v236 = *v235, v236 < 0)
            || ((unsigned int v237 = v234,
                 unsigned int v238 = v236,
                 unsigned int v239 = (v236 ^ v237) & 0xFFFFFFDF,
                 v237 >= 0x40)
              ? (BOOL v240 = v239 == 0)
              : (BOOL v240 = 1),
                v240 || v238 < 0x40))
          {
            __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v231, v232);
            v205 = v218;
            if (result) {
              break;
            }
          }
          else
          {
            v205 = v218;
            if ((((_BYTE)v237 + 5) & 0x1Fu) < (((_BYTE)v238 + 5) & 0x1Fu)) {
              break;
            }
          }
        }
        if ((*v218 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        int64_t v192 = v321;
        uint64_t *v218 = v322;
LABEL_476:
        int64_t v191 = v192 - 1;
        if (!v192)
        {
          uint64_t v241 = (unint64_t)v9 >> 3;
          while (1)
          {
            uint64_t v242 = 0;
            uint64_t v328 = *v7;
            *std::string::size_type v7 = 0;
            v243 = v7;
            do
            {
              v244 = &v243[v242 + 1];
              uint64_t v245 = 2 * v242;
              uint64_t v242 = (2 * v242) | 1;
              uint64_t v246 = v245 + 2;
              if (v245 + 2 >= v241) {
                goto LABEL_505;
              }
              if ((v244[1] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                uint64_t v247 = (v244[1] & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                uint64_t v247 = result;
              }
              if ((*v244 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                uint64_t v248 = (*v244 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                uint64_t v248 = result;
              }
              if (*(char *)(v247 + 23) >= 0) {
                v249 = (char *)v247;
              }
              else {
                v249 = *(char **)v247;
              }
              int v250 = *v249;
              if (*(char *)(v248 + 23) >= 0) {
                v251 = (char *)v248;
              }
              else {
                v251 = *(char **)v248;
              }
              if ((v250 & 0x80000000) == 0)
              {
                int v252 = *v251;
                if ((v252 & 0x80000000) == 0)
                {
                  unsigned int v253 = v250;
                  unsigned int v254 = v252;
                  unsigned int v255 = (v252 ^ v253) & 0xFFFFFFDF;
                  BOOL v256 = v253 < 0x40 || v255 == 0;
                  if (!v256 && v254 >= 0x40)
                  {
                    if ((((_BYTE)v253 + 5) & 0x1Fu) >= (((_BYTE)v254 + 5) & 0x1Fu)) {
                      goto LABEL_505;
                    }
LABEL_504:
                    ++v244;
                    uint64_t v242 = v246;
                    goto LABEL_505;
                  }
                }
              }
              __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v247, v248);
              if (result) {
                goto LABEL_504;
              }
LABEL_505:
              if (v244 != v243)
              {
                if ((*v243 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*v243 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t *v243 = *v244;
                uint64_t *v244 = 0;
              }
              v243 = v244;
            }
            while (v242 <= (uint64_t)((unint64_t)(v241 - 2) >> 1));
            uint64_t v257 = *v244;
            uint64_t v258 = *v244 & 7;
            if (v244 == --a2)
            {
              if (v258) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v257 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t *v244 = v328;
            }
            else
            {
              if (v258) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v257 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t *v244 = *a2;
              *a2 = v328;
              uint64_t v259 = (char *)v244 - (char *)v7 + 8;
              if (v259 >= 9)
              {
                if ((*v244 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  uint64_t v260 = (*v244 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  uint64_t v260 = result;
                }
                unint64_t v261 = (((unint64_t)v259 >> 3) - 2) >> 1;
                v262 = &v7[v261];
                if ((*v262 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  uint64_t v263 = (*v262 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  uint64_t v263 = result;
                }
                if (*(char *)(v260 + 23) >= 0) {
                  v264 = (char *)v260;
                }
                else {
                  v264 = *(char **)v260;
                }
                int v265 = *v264;
                if (*(char *)(v263 + 23) >= 0) {
                  v266 = (char *)v263;
                }
                else {
                  v266 = *(char **)v263;
                }
                if (v265 < 0
                  || (int v267 = *v266, v267 < 0)
                  || ((unsigned int v268 = v265,
                       unsigned int v269 = v267,
                       unsigned int v270 = (v267 ^ v268) & 0xFFFFFFDF,
                       v268 >= 0x40)
                    ? (BOOL v271 = v270 == 0)
                    : (BOOL v271 = 1),
                      v271 || v269 < 0x40))
                {
                  __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v260, v263);
                  if (result) {
                    goto LABEL_540;
                  }
                }
                else if ((((_BYTE)v268 + 5) & 0x1Fu) < (((_BYTE)v269 + 5) & 0x1Fu))
                {
LABEL_540:
                  uint64_t v272 = *v244;
                  uint64_t *v244 = 0;
                  uint64_t v329 = v272;
                  unint64_t v273 = v272 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v274 = (v272 & 0xFFFFFFFFFFFFFFF8) + 16;
                  while (1)
                  {
                    v275 = v262;
                    if (v262 != v244)
                    {
                      if ((*v244 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(*v244 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      uint64_t *v244 = *v262;
                      uint64_t *v262 = 0;
                    }
                    if (!v261) {
                      break;
                    }
                    uint64_t v276 = v274;
                    if (!v273)
                    {
                      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      uint64_t v276 = result;
                    }
                    unint64_t v261 = (v261 - 1) >> 1;
                    v262 = &v7[v261];
                    if ((*v262 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      uint64_t v277 = (*v262 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      uint64_t v277 = result;
                    }
                    if (*(char *)(v276 + 23) >= 0) {
                      v278 = (char *)v276;
                    }
                    else {
                      v278 = *(char **)v276;
                    }
                    int v279 = *v278;
                    if (*(char *)(v277 + 23) >= 0) {
                      v280 = (char *)v277;
                    }
                    else {
                      v280 = *(char **)v277;
                    }
                    if (v279 < 0
                      || (int v281 = *v280, v281 < 0)
                      || ((unsigned int v282 = v279,
                           unsigned int v283 = v281,
                           unsigned int v284 = (v281 ^ v282) & 0xFFFFFFDF,
                           v282 >= 0x40)
                        ? (BOOL v285 = v284 == 0)
                        : (BOOL v285 = 1),
                          v285 || v283 < 0x40))
                    {
                      __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v276, v277);
                      v244 = v275;
                      if ((result & 1) == 0) {
                        break;
                      }
                    }
                    else
                    {
                      v244 = v275;
                      if ((((_BYTE)v282 + 5) & 0x1Fu) >= (((_BYTE)v283 + 5) & 0x1Fu)) {
                        break;
                      }
                    }
                  }
                  if ((*v275 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*v275 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  uint64_t *v275 = v329;
                }
              }
            }
            if (v241-- <= 2) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v11 = (unint64_t)v10 >> 1;
    unint64_t v12 = &v7[(unint64_t)v10 >> 1];
    if ((unint64_t)v9 < 0x401)
    {
      __n128 result = sub_216D90A50((uint64_t)v12, v7, v325);
    }
    else
    {
      sub_216D90A50((uint64_t)v7, v12, v325);
      sub_216D90A50((uint64_t)(v7 + 1), v12 - 1, a2 - 2);
      sub_216D90A50((uint64_t)(v7 + 2), &v7[v11 + 1], a2 - 3);
      __n128 result = sub_216D90A50((uint64_t)(v12 - 1), v12, &v7[v11 + 1]);
      uint64_t v13 = *v7;
      *std::string::size_type v7 = *v12;
      *unint64_t v12 = v13;
    }
    --a3;
    if (a4) {
      goto LABEL_31;
    }
    if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v14 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v14 = result;
    }
    if ((*(v7 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v15 = (*(v7 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v15 = result;
    }
    if (*(char *)(v14 + 23) >= 0) {
      float v16 = (char *)v14;
    }
    else {
      float v16 = *(char **)v14;
    }
    int v17 = *v16;
    if (*(char *)(v15 + 23) >= 0) {
      BOOL v18 = (char *)v15;
    }
    else {
      BOOL v18 = *(char **)v15;
    }
    if (v17 < 0
      || (int v19 = *v18, v19 < 0)
      || ((unsigned int v20 = v17,
           unsigned int v21 = v19,
           unsigned int v22 = (v19 ^ v20) & 0xFFFFFFDF,
           v20 >= 0x40)
        ? (BOOL v23 = v22 == 0)
        : (BOOL v23 = 1),
          v23 || v21 < 0x40))
    {
      __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v14, v15);
      if (result) {
        goto LABEL_31;
      }
      goto LABEL_163;
    }
    if ((((_BYTE)v20 + 5) & 0x1Fu) >= (((_BYTE)v21 + 5) & 0x1Fu))
    {
LABEL_163:
      uint64_t v88 = *v7;
      *std::string::size_type v7 = 0;
      if ((*v325 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v89 = (*v325 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v89 = result;
      }
      unint64_t v90 = v88 & 0xFFFFFFFFFFFFFFF8;
      if ((v88 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v91 = v90 + 16;
      }
      else
      {
        __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v91 = result;
      }
      if (*(char *)(v89 + 23) >= 0) {
        v92 = (char *)v89;
      }
      else {
        v92 = *(char **)v89;
      }
      int v93 = *v92;
      if (*(char *)(v91 + 23) >= 0) {
        v94 = (char *)v91;
      }
      else {
        v94 = *(char **)v91;
      }
      if (v93 < 0
        || (int v95 = *v94, v95 < 0)
        || ((unsigned int v96 = v93,
             unsigned int v97 = v95,
             unsigned int v98 = (v95 ^ v96) & 0xFFFFFFDF,
             v96 >= 0x40)
          ? (BOOL v99 = v98 == 0)
          : (BOOL v99 = 1),
            v99 || v97 < 0x40))
      {
        __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v89, v91);
        if (result)
        {
LABEL_183:
          for (uint64_t i = v7 + 1; ; ++i)
          {
            if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v100 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v100 = result;
            }
            uint64_t v101 = v90 + 16;
            if (!v90)
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v101 = result;
            }
            if (*(char *)(v100 + 23) >= 0) {
              v102 = (char *)v100;
            }
            else {
              v102 = *(char **)v100;
            }
            int v103 = *v102;
            if (*(char *)(v101 + 23) >= 0) {
              v104 = (char *)v101;
            }
            else {
              v104 = *(char **)v101;
            }
            if (v103 < 0
              || (int v105 = *v104, v105 < 0)
              || ((unsigned int v106 = v103,
                   unsigned int v107 = v105,
                   unsigned int v108 = (v105 ^ v106) & 0xFFFFFFDF,
                   v106 >= 0x40)
                ? (BOOL v109 = v108 == 0)
                : (BOOL v109 = 1),
                  v109 || v107 < 0x40))
            {
              __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v100, v101);
              if (result) {
                goto LABEL_230;
              }
            }
            else if ((((_BYTE)v106 + 5) & 0x1Fu) < (((_BYTE)v107 + 5) & 0x1Fu))
            {
              goto LABEL_230;
            }
          }
        }
      }
      else if ((((_BYTE)v96 + 5) & 0x1Fu) < (((_BYTE)v97 + 5) & 0x1Fu))
      {
        goto LABEL_183;
      }
      for (uint64_t i = v7 + 1; i < a2; ++i)
      {
        if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v110 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          uint64_t v110 = result;
        }
        uint64_t v111 = v90 + 16;
        if (!v90)
        {
          __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          uint64_t v111 = result;
        }
        if (*(char *)(v110 + 23) >= 0) {
          v112 = (char *)v110;
        }
        else {
          v112 = *(char **)v110;
        }
        int v113 = *v112;
        if (*(char *)(v111 + 23) >= 0) {
          v114 = (char *)v111;
        }
        else {
          v114 = *(char **)v111;
        }
        if (v113 < 0
          || (int v115 = *v114, v115 < 0)
          || ((unsigned int v116 = v113,
               unsigned int v117 = v115,
               unsigned int v118 = (v115 ^ v116) & 0xFFFFFFDF,
               v116 >= 0x40)
            ? (BOOL v119 = v118 == 0)
            : (BOOL v119 = 1),
              v119 || v117 < 0x40))
        {
          __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v110, v111);
          if (result) {
            break;
          }
        }
        else if ((((_BYTE)v116 + 5) & 0x1Fu) < (((_BYTE)v117 + 5) & 0x1Fu))
        {
          break;
        }
      }
LABEL_230:
      j = a2;
      if (i < a2)
      {
        for (j = a2 - 1; ; --j)
        {
          if ((*j & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v121 = (*j & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v121 = result;
          }
          uint64_t v122 = v90 + 16;
          if (!v90)
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v122 = result;
          }
          if (*(char *)(v121 + 23) >= 0) {
            v123 = (char *)v121;
          }
          else {
            v123 = *(char **)v121;
          }
          int v124 = *v123;
          if (*(char *)(v122 + 23) >= 0) {
            v125 = (char *)v122;
          }
          else {
            v125 = *(char **)v122;
          }
          if (v124 < 0
            || (int v126 = *v125, v126 < 0)
            || ((unsigned int v127 = v124,
                 unsigned int v128 = v126,
                 unsigned int v129 = (v126 ^ v127) & 0xFFFFFFDF,
                 v127 >= 0x40)
              ? (BOOL v130 = v129 == 0)
              : (BOOL v130 = 1),
                v130 || v128 < 0x40))
          {
            __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v121, v122);
            if (!result) {
              break;
            }
          }
          else if ((((_BYTE)v127 + 5) & 0x1Fu) >= (((_BYTE)v128 + 5) & 0x1Fu))
          {
            break;
          }
        }
      }
      if (i >= j) {
        goto LABEL_298;
      }
      do
      {
        uint64_t v131 = *i;
        *i++ = *j;
        uint64_t *j = v131;
        while (1)
        {
          if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v132 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v132 = result;
          }
          uint64_t v133 = v90 + 16;
          if (!v90)
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v133 = result;
          }
          v134 = *(char *)(v132 + 23) >= 0 ? (char *)v132 : *(char **)v132;
          int v135 = *v134;
          v136 = *(char *)(v133 + 23) >= 0 ? (char *)v133 : *(char **)v133;
          if (v135 < 0) {
            break;
          }
          int v137 = *v136;
          if (v137 < 0) {
            break;
          }
          unsigned int v138 = v135;
          unsigned int v139 = v137;
          unsigned int v140 = (v137 ^ v138) & 0xFFFFFFDF;
          BOOL v141 = v138 < 0x40 || v140 == 0;
          if (v141 || v139 < 0x40) {
            break;
          }
          if ((((_BYTE)v138 + 5) & 0x1Fu) < (((_BYTE)v139 + 5) & 0x1Fu)) {
            goto LABEL_276;
          }
LABEL_274:
          ++i;
        }
        __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v132, v133);
        if ((result & 1) == 0) {
          goto LABEL_274;
        }
        do
        {
          while (1)
          {
LABEL_276:
            uint64_t v142 = *--j;
            unint64_t v143 = v142 & 0xFFFFFFFFFFFFFFF8;
            if ((v142 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v144 = v143 + 16;
            }
            else
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v144 = result;
            }
            uint64_t v145 = v90 + 16;
            if (!v90)
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v145 = result;
            }
            v146 = *(char *)(v144 + 23) >= 0 ? (char *)v144 : *(char **)v144;
            int v147 = *v146;
            v148 = *(char *)(v145 + 23) >= 0 ? (char *)v145 : *(char **)v145;
            if (v147 < 0) {
              break;
            }
            int v149 = *v148;
            if (v149 < 0) {
              break;
            }
            unsigned int v150 = v147;
            unsigned int v151 = v149;
            unsigned int v152 = (v149 ^ v150) & 0xFFFFFFDF;
            BOOL v153 = v150 < 0x40 || v152 == 0;
            if (v153 || v151 < 0x40) {
              break;
            }
            if ((((_BYTE)v150 + 5) & 0x1Fu) >= (((_BYTE)v151 + 5) & 0x1Fu)) {
              goto LABEL_297;
            }
          }
          __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v144, v145);
        }
        while (result);
LABEL_297:
        ;
      }
      while (i < j);
LABEL_298:
      v154 = i - 1;
      uint64_t v155 = *v7;
      uint64_t v156 = *v7 & 7;
      BOOL v4 = i - 1 >= v7;
      BOOL v5 = i - 1 == v7;
      if (i - 1 == v7)
      {
        if (v156) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (v156) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *std::string::size_type v7 = *v154;
        uint64_t *v154 = 0;
      }
      a4 = 0;
      uint64_t *v154 = v88;
    }
    else
    {
LABEL_31:
      uint64_t v24 = 0;
      uint64_t v25 = *v7;
      *std::string::size_type v7 = 0;
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v26)
        {
          __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          uint64_t v27 = result;
        }
        if ((v7[v24 + 1] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v28 = (v7[v24 + 1] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          uint64_t v28 = result;
        }
        uint64_t v29 = *(char *)(v27 + 23) >= 0 ? (char *)v27 : *(char **)v27;
        int v30 = *v29;
        uint64_t v31 = *(char *)(v28 + 23) >= 0 ? (char *)v28 : *(char **)v28;
        if (v30 < 0) {
          break;
        }
        int v32 = *v31;
        if (v32 < 0) {
          break;
        }
        unsigned int v33 = v30;
        unsigned int v34 = v32;
        unsigned int v35 = (v32 ^ v33) & 0xFFFFFFDF;
        BOOL v36 = v33 < 0x40 || v35 == 0;
        if (v36 || v34 < 0x40) {
          break;
        }
        if ((((_BYTE)v33 + 5) & 0x1Fu) >= (((_BYTE)v34 + 5) & 0x1Fu)) {
          goto LABEL_53;
        }
LABEL_51:
        ++v24;
      }
      __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v27, v28);
      if (result) {
        goto LABEL_51;
      }
LABEL_53:
      unint64_t v37 = &v7[v24];
      unint64_t v38 = (unint64_t)&v7[v24 + 1];
      k = a2 - 1;
      if (v24 * 8)
      {
        while (1)
        {
          uint64_t v40 = (v25 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v26)
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v40 = result;
          }
          if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v41 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v41 = result;
          }
          if (*(char *)(v40 + 23) >= 0) {
            unint64_t v42 = (char *)v40;
          }
          else {
            unint64_t v42 = *(char **)v40;
          }
          int v43 = *v42;
          if (*(char *)(v41 + 23) >= 0) {
            unint64_t v44 = (char *)v41;
          }
          else {
            unint64_t v44 = *(char **)v41;
          }
          if (v43 < 0
            || (int v45 = *v44, v45 < 0)
            || ((unsigned int v46 = v43,
                 unsigned int v47 = v45,
                 unsigned int v48 = (v45 ^ v46) & 0xFFFFFFDF,
                 v46 >= 0x40)
              ? (BOOL v49 = v48 == 0)
              : (BOOL v49 = 1),
                v49 || v47 < 0x40))
          {
            __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v40, v41);
            if (result) {
              goto LABEL_105;
            }
          }
          else if ((((_BYTE)v46 + 5) & 0x1Fu) < (((_BYTE)v47 + 5) & 0x1Fu))
          {
            goto LABEL_105;
          }
          --k;
        }
      }
      k = a2;
      if (v38 < (unint64_t)a2)
      {
        for (k = a2 - 1; ; --k)
        {
          uint64_t v50 = (v25 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v26)
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v50 = result;
          }
          if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v51 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v51 = result;
          }
          if (*(char *)(v50 + 23) >= 0) {
            unint64_t v52 = (char *)v50;
          }
          else {
            unint64_t v52 = *(char **)v50;
          }
          int v53 = *v52;
          if (*(char *)(v51 + 23) >= 0) {
            uint64_t v54 = (char *)v51;
          }
          else {
            uint64_t v54 = *(char **)v51;
          }
          if (v53 < 0
            || (int v55 = *v54, v55 < 0)
            || ((unsigned int v56 = v53,
                 unsigned int v57 = v55,
                 unsigned int v58 = (v55 ^ v56) & 0xFFFFFFDF,
                 v56 >= 0x40)
              ? (BOOL v59 = v58 == 0)
              : (BOOL v59 = 1),
                v59 || v57 < 0x40))
          {
            __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v50, v51);
            if (v38 >= (unint64_t)k) {
              char v61 = 1;
            }
            else {
              char v61 = result;
            }
            if (v61) {
              break;
            }
          }
          else if ((((_BYTE)v56 + 5) & 0x1Fu) < (((_BYTE)v57 + 5) & 0x1Fu) || v38 >= (unint64_t)k)
          {
            break;
          }
        }
      }
LABEL_105:
      if (v38 >= (unint64_t)k) {
        goto LABEL_152;
      }
      unint64_t v62 = &v7[v24 + 1];
      uint64_t v63 = k;
      while (2)
      {
        uint64_t v64 = *v62;
        *v62++ = *v63;
        *uint64_t v63 = v64;
        while (2)
        {
          uint64_t v65 = (v25 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v26)
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v65 = result;
          }
          if ((*v62 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v66 = (*v62 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v66 = result;
          }
          if (*(char *)(v65 + 23) >= 0) {
            uint64_t v67 = (char *)v65;
          }
          else {
            uint64_t v67 = *(char **)v65;
          }
          int v68 = *v67;
          if (*(char *)(v66 + 23) >= 0) {
            v69 = (char *)v66;
          }
          else {
            v69 = *(char **)v66;
          }
          if ((v68 & 0x80000000) == 0)
          {
            int v70 = *v69;
            if ((v70 & 0x80000000) == 0)
            {
              unsigned int v71 = v68;
              unsigned int v72 = v70;
              unsigned int v73 = (v70 ^ v71) & 0xFFFFFFDF;
              BOOL v74 = v71 < 0x40 || v73 == 0;
              if (!v74 && v72 >= 0x40)
              {
                if ((((_BYTE)v71 + 5) & 0x1Fu) >= (((_BYTE)v72 + 5) & 0x1Fu)) {
                  goto LABEL_129;
                }
                goto LABEL_127;
              }
            }
          }
          __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v65, v66);
          if (result)
          {
LABEL_127:
            ++v62;
            continue;
          }
          break;
        }
        do
        {
          while (1)
          {
LABEL_129:
            --v63;
            uint64_t v75 = (v25 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v26)
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v75 = result;
            }
            if ((*v63 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v76 = (*v63 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              uint64_t v76 = result;
            }
            v77 = *(char *)(v75 + 23) >= 0 ? (char *)v75 : *(char **)v75;
            int v78 = *v77;
            v79 = *(char *)(v76 + 23) >= 0 ? (char *)v76 : *(char **)v76;
            if (v78 < 0) {
              break;
            }
            int v80 = *v79;
            if (v80 < 0) {
              break;
            }
            unsigned int v81 = v78;
            unsigned int v82 = v80;
            unsigned int v83 = (v80 ^ v81) & 0xFFFFFFDF;
            BOOL v84 = v81 < 0x40 || v83 == 0;
            if (v84 || v82 < 0x40) {
              break;
            }
            if ((((_BYTE)v81 + 5) & 0x1Fu) < (((_BYTE)v82 + 5) & 0x1Fu)) {
              goto LABEL_150;
            }
          }
          __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v75, v76);
        }
        while ((result & 1) == 0);
LABEL_150:
        if (v62 < v63) {
          continue;
        }
        break;
      }
      unint64_t v37 = v62 - 1;
LABEL_152:
      uint64_t v85 = *v7;
      uint64_t v86 = *v7 & 7;
      if (v37 == v7)
      {
        if (v86) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (v86) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *std::string::size_type v7 = *v37;
        *unint64_t v37 = 0;
      }
      *unint64_t v37 = v25;
      if (v38 < (unint64_t)k)
      {
LABEL_161:
        __n128 result = sub_216D8EE50(v7, v37, a3, a4 & 1);
        a4 = 0;
        uint64_t i = v37 + 1;
      }
      else
      {
        char v87 = sub_216D90E58(v7, v37);
        uint64_t i = v37 + 1;
        __n128 result = sub_216D90E58(v37 + 1, a2);
        if (result)
        {
          a2 = v37;
          if (v87) {
            return result;
          }
          goto LABEL_2;
        }
        if ((v87 & 1) == 0) {
          goto LABEL_161;
        }
      }
    }
  }
  v158 = v7 + 1;
  BOOL v160 = v7 == a2 || v158 == a2;
  if (a4)
  {
    if (v160) {
      return result;
    }
    uint64_t v161 = 0;
    v162 = v7;
    while (2)
    {
      v163 = v162;
      v162 = v158;
      if ((*v163 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v164 = (*v163 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v164 = result;
      }
      if ((*v162 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v165 = (*v162 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v165 = result;
      }
      if (*(char *)(v164 + 23) >= 0) {
        v166 = (char *)v164;
      }
      else {
        v166 = *(char **)v164;
      }
      int v167 = *v166;
      if (*(char *)(v165 + 23) >= 0) {
        v168 = (char *)v165;
      }
      else {
        v168 = *(char **)v165;
      }
      if (v167 < 0
        || (int v169 = *v168, v169 < 0)
        || ((unsigned int v170 = v167,
             unsigned int v171 = v169,
             unsigned int v172 = (v169 ^ v170) & 0xFFFFFFDF,
             v170 >= 0x40)
          ? (BOOL v173 = v172 == 0)
          : (BOOL v173 = 1),
            v173 || v171 < 0x40))
      {
        __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v164, v165);
        if (result) {
          goto LABEL_342;
        }
      }
      else if ((((_BYTE)v170 + 5) & 0x1Fu) < (((_BYTE)v171 + 5) & 0x1Fu))
      {
LABEL_342:
        uint64_t v174 = 0;
        uint64_t v175 = *v162;
        uint64_t *v162 = 0;
        uint64_t v326 = v175;
        unint64_t v176 = v175 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v177 = (v175 & 0xFFFFFFFFFFFFFFF8) + 16;
        for (uint64_t m = v161; ; m -= 8)
        {
          if ((v174 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          v179 = (uint64_t *)((char *)v7 + m);
          uint64_t v180 = *(uint64_t *)((char *)v7 + m);
          uint64_t *v179 = 0;
          v179[1] = v180;
          if (!m) {
            break;
          }
          if ((*(uint64_t *)((char *)v7 + m - 8) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v181 = (*(uint64_t *)((char *)v7 + m - 8) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v181 = result;
          }
          uint64_t v182 = v177;
          if (!v176)
          {
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            uint64_t v182 = result;
          }
          if (*(char *)(v181 + 23) >= 0) {
            v183 = (char *)v181;
          }
          else {
            v183 = *(char **)v181;
          }
          int v184 = *v183;
          if (*(char *)(v182 + 23) >= 0) {
            v185 = (char *)v182;
          }
          else {
            v185 = *(char **)v182;
          }
          if (v184 < 0
            || (int v186 = *v185, v186 < 0)
            || ((unsigned int v187 = v184,
                 unsigned int v188 = v186,
                 unsigned int v189 = (v186 ^ v187) & 0xFFFFFFDF,
                 v187 >= 0x40)
              ? (BOOL v190 = v189 == 0)
              : (BOOL v190 = 1),
                v190 || v188 < 0x40))
          {
            __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v181, v182);
            if (!result)
            {
              v163 = (uint64_t *)((char *)v7 + m);
              goto LABEL_369;
            }
          }
          else if ((((_BYTE)v187 + 5) & 0x1Fu) >= (((_BYTE)v188 + 5) & 0x1Fu))
          {
            goto LABEL_369;
          }
          --v163;
          uint64_t v174 = *v179;
        }
        v163 = v7;
LABEL_369:
        if ((*v163 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t *v163 = v326;
      }
      v158 = v162 + 1;
      v161 += 8;
      if (v162 + 1 == a2) {
        return result;
      }
      continue;
    }
  }
  if (v160) {
    return result;
  }
  while (2)
  {
    v287 = v7;
    std::string::size_type v7 = v158;
    if ((*v287 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v288 = (*v287 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v288 = result;
    }
    if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v289 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v289 = result;
    }
    if (*(char *)(v288 + 23) >= 0) {
      v290 = (char *)v288;
    }
    else {
      v290 = *(char **)v288;
    }
    int v291 = *v290;
    if (*(char *)(v289 + 23) >= 0) {
      v292 = (char *)v289;
    }
    else {
      v292 = *(char **)v289;
    }
    if (v291 < 0
      || (int v293 = *v292, v293 < 0)
      || ((unsigned int v294 = v291,
           unsigned int v295 = v293,
           unsigned int v296 = (v293 ^ v294) & 0xFFFFFFDF,
           v294 >= 0x40)
        ? (BOOL v297 = v296 == 0)
        : (BOOL v297 = 1),
          v297 || v295 < 0x40))
    {
      __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v288, v289);
      if (!result) {
        goto LABEL_623;
      }
    }
    else if ((((_BYTE)v294 + 5) & 0x1Fu) >= (((_BYTE)v295 + 5) & 0x1Fu))
    {
      goto LABEL_623;
    }
    uint64_t v298 = 0;
    uint64_t v299 = *v7;
    *std::string::size_type v7 = 0;
    while (2)
    {
      if ((v298 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v298 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v300 = *v287;
      uint64_t *v287 = 0;
      v287[1] = v300;
      if ((*(v287 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v301 = (*(v287 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v301 = result;
      }
      uint64_t v302 = (v299 & 0xFFFFFFFFFFFFFFF8) + 16;
      if ((v299 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v302 = result;
      }
      if (*(char *)(v301 + 23) >= 0) {
        v303 = (char *)v301;
      }
      else {
        v303 = *(char **)v301;
      }
      int v304 = *v303;
      if (*(char *)(v302 + 23) >= 0) {
        v305 = (char *)v302;
      }
      else {
        v305 = *(char **)v302;
      }
      if ((v304 & 0x80000000) == 0)
      {
        int v306 = *v305;
        if ((v306 & 0x80000000) == 0)
        {
          unsigned int v307 = v304;
          unsigned int v308 = v306;
          unsigned int v309 = (v306 ^ v307) & 0xFFFFFFDF;
          BOOL v310 = v307 < 0x40 || v309 == 0;
          if (!v310 && v308 >= 0x40)
          {
            if ((((_BYTE)v307 + 5) & 0x1Fu) >= (((_BYTE)v308 + 5) & 0x1Fu)) {
              break;
            }
            goto LABEL_618;
          }
        }
      }
      __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v331, v301, v302);
      if (result)
      {
LABEL_618:
        uint64_t v298 = *v287--;
        continue;
      }
      break;
    }
    if ((*v287 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v287 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t *v287 = v299;
LABEL_623:
    v158 = v7 + 1;
    if (v7 + 1 != a2) {
      continue;
    }
    return result;
  }
}

void sub_216D9064C(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_216D906E4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  __n128 result = sub_216D91270(a1, a2, a3, a4);
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v11 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v11 = (uint64_t)result;
  }
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (*a5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v12 = (uint64_t)result;
  }
  if (*(char *)(v11 + 23) >= 0) {
    uint64_t v13 = (char *)v11;
  }
  else {
    uint64_t v13 = *(char **)v11;
  }
  int v14 = *v13;
  if (*(char *)(v12 + 23) >= 0) {
    uint64_t v15 = (char *)v12;
  }
  else {
    uint64_t v15 = *(char **)v12;
  }
  if (v14 < 0
    || (int v16 = *v15, v16 < 0)
    || ((unsigned int v17 = v14,
         unsigned int v18 = v16,
         unsigned int v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (BOOL v20 = v19 == 0)
      : (BOOL v20 = 1),
        v20 || v18 < 0x40))
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v47, v11, v12);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v22 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v22 = (uint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v23 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v23 = (uint64_t)result;
  }
  if (*(char *)(v22 + 23) >= 0) {
    uint64_t v24 = (char *)v22;
  }
  else {
    uint64_t v24 = *(char **)v22;
  }
  int v25 = *v24;
  if (*(char *)(v23 + 23) >= 0) {
    unint64_t v26 = (char *)v23;
  }
  else {
    unint64_t v26 = *(char **)v23;
  }
  if (v25 < 0
    || (int v27 = *v26, v27 < 0)
    || ((unsigned int v28 = v25,
         unsigned int v29 = v27,
         unsigned int v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (BOOL v31 = v30 == 0)
      : (BOOL v31 = 1),
        v31 || v29 < 0x40))
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v48, v22, v23);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v32 = *a3;
  *a3 = *a4;
  *a4 = v32;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v33 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v33 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v34 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v34 = (uint64_t)result;
  }
  if (*(char *)(v33 + 23) >= 0) {
    unsigned int v35 = (char *)v33;
  }
  else {
    unsigned int v35 = *(char **)v33;
  }
  int v36 = *v35;
  if (*(char *)(v34 + 23) >= 0) {
    unint64_t v37 = (char *)v34;
  }
  else {
    unint64_t v37 = *(char **)v34;
  }
  if (v36 < 0
    || (int v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v49, v33, v34);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v39 = *a2;
  *a2 = *a3;
  *a3 = v39;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v40 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v40 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v41 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v41 = (uint64_t)result;
  }
  if (*(char *)(v40 + 23) >= 0) {
    unint64_t v42 = (char *)v40;
  }
  else {
    unint64_t v42 = *(char **)v40;
  }
  int v43 = *v42;
  if (*(char *)(v41 + 23) >= 0) {
    unint64_t v44 = (char *)v41;
  }
  else {
    unint64_t v44 = *(char **)v41;
  }
  if (v43 < 0
    || (int v45 = *v44, v45 < 0)
    || v43 < 0x40u
    || ((v45 ^ v43) & 0xFFFFFFDF) == 0
    || v45 < 0x40u)
  {
    __n128 result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v50, v40, v41);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v43 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v46 = *a1;
  *a1 = *a2;
  *a2 = v46;
  return result;
}

uint64_t sub_216D90A50(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  BOOL v5 = (uint64_t *)result;
  if ((*(void *)result & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v6 = (*(void *)result & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v6 = result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v7 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v7 = result;
  }
  if (*(char *)(v6 + 23) >= 0) {
    unint64_t v8 = (char *)v6;
  }
  else {
    unint64_t v8 = *(char **)v6;
  }
  int v9 = *v8;
  if (*(char *)(v7 + 23) >= 0) {
    uint64_t v10 = (char *)v7;
  }
  else {
    uint64_t v10 = *(char **)v7;
  }
  if (v9 < 0
    || (int v11 = *v10, v11 < 0)
    || ((unsigned int v12 = v9,
         unsigned int v13 = v11,
         unsigned int v14 = (v11 ^ v12) & 0xFFFFFFDF,
         v12 >= 0x40)
      ? (BOOL v15 = v14 == 0)
      : (BOOL v15 = 1),
        v15 || v13 < 0x40))
  {
    __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v62, v6, v7);
    if (result) {
      goto LABEL_21;
    }
  }
  else if ((((_BYTE)v12 + 5) & 0x1Fu) < (((_BYTE)v13 + 5) & 0x1Fu))
  {
LABEL_21:
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v16 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v16 = result;
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v17 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v17 = result;
    }
    if (*(char *)(v16 + 23) >= 0) {
      unsigned int v18 = (char *)v16;
    }
    else {
      unsigned int v18 = *(char **)v16;
    }
    int v19 = *v18;
    if (*(char *)(v17 + 23) >= 0) {
      BOOL v20 = (char *)v17;
    }
    else {
      BOOL v20 = *(char **)v17;
    }
    if (v19 < 0
      || (int v21 = *v20, v21 < 0)
      || ((unsigned int v22 = v19,
           unsigned int v23 = v21,
           unsigned int v24 = (v21 ^ v22) & 0xFFFFFFDF,
           v22 >= 0x40)
        ? (BOOL v25 = v24 == 0)
        : (BOOL v25 = 1),
          v25 || v23 < 0x40))
    {
      __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v65, v16, v17);
      if (result) {
        goto LABEL_41;
      }
    }
    else if ((((_BYTE)v22 + 5) & 0x1Fu) < (((_BYTE)v23 + 5) & 0x1Fu))
    {
LABEL_41:
      a2 = a3;
LABEL_105:
      uint64_t v61 = *v5;
      *BOOL v5 = *a2;
      *a2 = v61;
      return result;
    }
    uint64_t v49 = *v5;
    *BOOL v5 = *a2;
    *a2 = v49;
    unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v50)
    {
      uint64_t v51 = v50 + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v51 = result;
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v52 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v52 = result;
    }
    if (*(char *)(v51 + 23) >= 0) {
      int v53 = (char *)v51;
    }
    else {
      int v53 = *(char **)v51;
    }
    int v54 = *v53;
    if (*(char *)(v52 + 23) >= 0) {
      int v55 = (char *)v52;
    }
    else {
      int v55 = *(char **)v52;
    }
    if (v54 < 0
      || (int v56 = *v55, v56 < 0)
      || ((unsigned int v57 = v54,
           unsigned int v58 = v56,
           unsigned int v59 = (v56 ^ v57) & 0xFFFFFFDF,
           v57 >= 0x40)
        ? (BOOL v60 = v59 == 0)
        : (BOOL v60 = 1),
          v60 || v58 < 0x40))
    {
      __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v66, v51, v52);
      BOOL v5 = a2;
      a2 = a3;
      if (!result) {
        return result;
      }
      goto LABEL_105;
    }
    unsigned int v47 = ((_BYTE)v57 + 5) & 0x1F;
    unsigned int v48 = ((_BYTE)v58 + 5) & 0x1F;
    BOOL v5 = a2;
    a2 = a3;
LABEL_104:
    if (v47 >= v48) {
      return result;
    }
    goto LABEL_105;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v26 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v26 = result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v27 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v27 = result;
  }
  if (*(char *)(v26 + 23) >= 0) {
    unsigned int v28 = (char *)v26;
  }
  else {
    unsigned int v28 = *(char **)v26;
  }
  int v29 = *v28;
  if (*(char *)(v27 + 23) >= 0) {
    unsigned int v30 = (char *)v27;
  }
  else {
    unsigned int v30 = *(char **)v27;
  }
  if (v29 < 0
    || (int v31 = *v30, v31 < 0)
    || ((unsigned int v32 = v29,
         unsigned int v33 = v31,
         unsigned int v34 = (v31 ^ v32) & 0xFFFFFFDF,
         v32 >= 0x40)
      ? (BOOL v35 = v34 == 0)
      : (BOOL v35 = 1),
        v35 || v33 < 0x40))
  {
    __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v63, v26, v27);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v32 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v36 = *a2;
  *a2 = *a3;
  *a3 = v36;
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v37 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v37 = result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v38 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v38 = result;
  }
  if (*(char *)(v37 + 23) >= 0) {
    uint64_t v39 = (char *)v37;
  }
  else {
    uint64_t v39 = *(char **)v37;
  }
  int v40 = *v39;
  if (*(char *)(v38 + 23) >= 0) {
    uint64_t v41 = (char *)v38;
  }
  else {
    uint64_t v41 = *(char **)v38;
  }
  if ((v40 & 0x80000000) == 0)
  {
    int v42 = *v41;
    if ((v42 & 0x80000000) == 0)
    {
      unsigned int v43 = v40;
      unsigned int v44 = v42;
      unsigned int v45 = (v42 ^ v43) & 0xFFFFFFDF;
      BOOL v46 = v43 < 0x40 || v45 == 0;
      if (!v46 && v44 >= 0x40)
      {
        unsigned int v47 = ((_BYTE)v43 + 5) & 0x1F;
        unsigned int v48 = ((_BYTE)v44 + 5) & 0x1F;
        goto LABEL_104;
      }
    }
  }
  __n128 result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v64, v37, v38);
  if (result) {
    goto LABEL_105;
  }
  return result;
}

uint64_t sub_216D90E58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2 - a1;
  uint64_t result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v6 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)1);
        uint64_t v6 = result;
      }
      if ((*(v2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (uint64_t *)((*(v2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      if (*(char *)(v6 + 23) >= 0) {
        uint64_t v37 = (char *)v6;
      }
      else {
        uint64_t v37 = *(char **)v6;
      }
      int v38 = *v37;
      if (*((char *)EmptyString + 23) >= 0) {
        uint64_t v39 = (char *)EmptyString;
      }
      else {
        uint64_t v39 = (char *)*EmptyString;
      }
      if ((v38 & 0x80000000) == 0)
      {
        int v40 = *v39;
        if ((v40 & 0x80000000) == 0)
        {
          unsigned int v41 = v38;
          unsigned int v42 = v40;
          unsigned int v43 = (v40 ^ v41) & 0xFFFFFFDF;
          BOOL v44 = v41 < 0x40 || v43 == 0;
          if (!v44 && v42 >= 0x40)
          {
            if ((((_BYTE)v41 + 5) & 0x1Fu) >= (((_BYTE)v42 + 5) & 0x1Fu)) {
              return 1;
            }
            goto LABEL_83;
          }
        }
      }
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v47, v6, (uint64_t)EmptyString))
      {
LABEL_83:
        uint64_t v45 = *a1;
        *a1 = *(v2 - 1);
        *(v2 - 1) = v45;
      }
      return 1;
    case 3:
      sub_216D90A50((uint64_t)a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_216D91270(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_216D906E4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v7 = a1 + 2;
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D90A50((uint64_t)a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      BOOL v46 = v2;
      while (2)
      {
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v12 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
          uint64_t v12 = (uint64_t)v8;
        }
        if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v13 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
          uint64_t v13 = (uint64_t)v8;
        }
        if (*(char *)(v12 + 23) >= 0) {
          unsigned int v14 = (char *)v12;
        }
        else {
          unsigned int v14 = *(char **)v12;
        }
        int v15 = *v14;
        if (*(char *)(v13 + 23) >= 0) {
          uint64_t v16 = (char *)v13;
        }
        else {
          uint64_t v16 = *(char **)v13;
        }
        if (v15 < 0
          || (int v17 = *v16, v17 < 0)
          || ((unsigned int v18 = v15,
               unsigned int v19 = v17,
               unsigned int v20 = (v17 ^ v18) & 0xFFFFFFDF,
               v18 >= 0x40)
            ? (BOOL v21 = v20 == 0)
            : (BOOL v21 = 1),
              v21 || v19 < 0x40))
        {
          unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v48, v12, v13);
          if (!v8) {
            goto LABEL_58;
          }
        }
        else if ((((_BYTE)v18 + 5) & 0x1Fu) >= (((_BYTE)v19 + 5) & 0x1Fu))
        {
          goto LABEL_58;
        }
        uint64_t v22 = *v9;
        *int v9 = 0;
        for (uint64_t i = v10; ; i -= 8)
        {
          unsigned int v24 = (uint64_t *)((char *)a1 + i + 24);
          BOOL v25 = (uint64_t *)((char *)a1 + i + 16);
          if (v25 != v24)
          {
            if ((*v24 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *unsigned int v24 = *v25;
            void *v25 = 0;
          }
          if (i == -16) {
            break;
          }
          if ((*(uint64_t *)((char *)a1 + i + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v26 = (*(uint64_t *)((char *)a1 + i + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
            uint64_t v26 = (uint64_t)v8;
          }
          uint64_t v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 16;
          if ((v22 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
            uint64_t v27 = (uint64_t)v8;
          }
          if (*(char *)(v26 + 23) >= 0) {
            unsigned int v28 = (char *)v26;
          }
          else {
            unsigned int v28 = *(char **)v26;
          }
          int v29 = *v28;
          if (*(char *)(v27 + 23) >= 0) {
            unsigned int v30 = (char *)v27;
          }
          else {
            unsigned int v30 = *(char **)v27;
          }
          if (v29 < 0
            || (int v31 = *v30, v31 < 0)
            || ((unsigned int v32 = v29,
                 unsigned int v33 = v31,
                 unsigned int v34 = (v31 ^ v32) & 0xFFFFFFDF,
                 v32 >= 0x40)
              ? (BOOL v35 = v34 == 0)
              : (BOOL v35 = 1),
                v35 || v33 < 0x40))
          {
            unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v49, v26, v27);
            if (!v8)
            {
              uint64_t v7 = (uint64_t *)((char *)a1 + i + 16);
              goto LABEL_55;
            }
          }
          else if ((((_BYTE)v32 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
          {
            goto LABEL_55;
          }
          --v7;
        }
        uint64_t v7 = a1;
LABEL_55:
        uint64_t v2 = v46;
        if ((*v7 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *uint64_t v7 = v22;
        if (++v11 != 8)
        {
LABEL_58:
          uint64_t v7 = v9;
          v10 += 8;
          if (++v9 == v2) {
            return 1;
          }
          continue;
        }
        return v9 + 1 == v46;
      }
  }
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_216D91270(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D90A50((uint64_t)a1, a2, a3);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v9 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v9 = (uint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v10 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v10 = (uint64_t)result;
  }
  if (*(char *)(v9 + 23) >= 0) {
    int v11 = (char *)v9;
  }
  else {
    int v11 = *(char **)v9;
  }
  int v12 = *v11;
  if (*(char *)(v10 + 23) >= 0) {
    uint64_t v13 = (char *)v10;
  }
  else {
    uint64_t v13 = *(char **)v10;
  }
  if (v12 < 0
    || (int v14 = *v13, v14 < 0)
    || ((unsigned int v15 = v12,
         unsigned int v16 = v14,
         unsigned int v17 = (v14 ^ v15) & 0xFFFFFFDF,
         v15 >= 0x40)
      ? (BOOL v18 = v17 == 0)
      : (BOOL v18 = 1),
        v18 || v16 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v38, v9, v10);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v15 + 5) & 0x1Fu) >= (((_BYTE)v16 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v20 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v20 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v21 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v21 = (uint64_t)result;
  }
  if (*(char *)(v20 + 23) >= 0) {
    uint64_t v22 = (char *)v20;
  }
  else {
    uint64_t v22 = *(char **)v20;
  }
  int v23 = *v22;
  if (*(char *)(v21 + 23) >= 0) {
    unsigned int v24 = (char *)v21;
  }
  else {
    unsigned int v24 = *(char **)v21;
  }
  if (v23 < 0
    || (int v25 = *v24, v25 < 0)
    || ((unsigned int v26 = v23,
         unsigned int v27 = v25,
         unsigned int v28 = (v25 ^ v26) & 0xFFFFFFDF,
         v26 >= 0x40)
      ? (BOOL v29 = v28 == 0)
      : (BOOL v29 = 1),
        v29 || v27 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v39, v20, v21);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v26 + 5) & 0x1Fu) >= (((_BYTE)v27 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v30 = *a2;
  *a2 = *a3;
  *a3 = v30;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v31 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v31 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v32 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v32 = (uint64_t)result;
  }
  if (*(char *)(v31 + 23) >= 0) {
    unsigned int v33 = (char *)v31;
  }
  else {
    unsigned int v33 = *(char **)v31;
  }
  int v34 = *v33;
  if (*(char *)(v32 + 23) >= 0) {
    BOOL v35 = (char *)v32;
  }
  else {
    BOOL v35 = *(char **)v32;
  }
  if (v34 < 0
    || (int v36 = *v35, v36 < 0)
    || v34 < 0x40u
    || ((v36 ^ v34) & 0xFFFFFFDF) == 0
    || v36 < 0x40u)
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v40, v31, v32);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v36 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v37 = *a1;
  *a1 = *a2;
  *a2 = v37;
  return result;
}

void sub_216D91510(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (char *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 16;
        v13[1] = v8 + 24;
        sub_216D91658((uint64_t)v13, (uint64_t)(v4 + 2));
        uint64_t v10 = *(char **)v8;
        unint64_t v11 = bswap64(0x9E3779B97F4A7C55 * *((void *)v8 + 2));
        *((void *)v8 + 1) = v11;
        int v12 = sub_216862E98((uint64_t)a1, v11, (void *)v8 + 2);
        sub_216862FF0(a1, v8, v12);
        uint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_216D8D5E4((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_216D916AC(a1, (uint64_t)(v4 + 2));
    uint64_t v4 = (void *)*v4;
  }
}

void sub_216D91628(void *a1)
{
  __cxa_begin_catch(a1);
  sub_216D8D5E4(v1, v2);
  __cxa_rethrow();
}

void sub_216D91644(_Unwind_Exception *a1)
{
}

uint64_t sub_216D91658(uint64_t a1, uint64_t a2)
{
  **(void **)a1 = *(void *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 != (void *)(a2 + 8)) {
    sub_216ABF1B0(v3, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

void *sub_216D916AC(void *a1, uint64_t a2)
{
  sub_216D91744((uint64_t)a1, a2, (uint64_t)&v8);
  uint64_t v3 = v8;
  uint64_t v4 = v8 + 2;
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v8[2]);
  v8[1] = v5;
  uint64_t v6 = sub_216862E98((uint64_t)a1, v5, v4);
  sub_216862FF0(a1, v3, v6);
  return v3;
}

void sub_216D91720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_216D8D55C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D91744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = *(uint64_t **)(a2 + 8);
  v6[2] = *(void *)a2;
  void v6[4] = 0;
  v6[5] = 0;
  void v6[3] = 0;
  uint64_t result = sub_21698FA28(v6 + 3, v7, *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - (void)v7) >> 3);
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = bswap64(0x9E3779B97F4A7C55 * v6[2]);
  return result;
}

void sub_216D917E4(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  sub_216D8D55C(v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D91800(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216D91A5C(a2, v7, v6);
}

__n128 sub_216D91858(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v6 = *a1;
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      uint64_t v11 = v4 - v6;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v28 = a1[4];
      unsigned int v15 = (char *)sub_216782ED8(v28, v13);
      unsigned int v17 = &v15[24 * v14];
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2] - v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[24 * v14];
        do
        {
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v18;
          *(void *)unint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          *((void *)v21 + 2) = *(void *)(v18 + 16);
          v21 += 24;
          v18 += 24;
        }
        while (v21 != v20);
        int64x2_t v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v22 = vdupq_n_s64(v18);
        uint64_t v20 = &v15[24 * v14];
      }
      uint64_t v25 = *a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v22;
      uint64_t v23 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[24 * v16];
      uint64_t v27 = v23;
      sub_2168CE630((uint64_t)&v25);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -3 * (v8 >> 1);
      sub_216D91ADC(v5, v4, v5 - 24 * (v8 >> 1));
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  a1[2] += 24;
  return result;
}

uint64_t sub_216D919A8(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216D91B48((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216D91BE4(v7, (uint64_t)a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216D91A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21697D0EC(a3 - 24, v6 - 24);
      *(void *)(a3 - 8) = *(void *)(v6 - 8);
      a3 -= 24;
      v6 -= 24;
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_216D91ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    sub_21697D0EC(a3, v4);
    *(void *)(a3 + 16) = *(void *)(v4 + 16);
    a3 += 24;
    v4 += 24;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_216D91B48(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v8 + 16) = a3[2];
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216D91C68((uint64_t)v12);
  return v10;
}

uint64_t sub_216D91BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(v4 + 16) = *(void *)(a2 + 16);
      v4 += 24;
      a2 += 24;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_216D91CA0((uint64_t)v6);
  return v4;
}

uint64_t sub_216D91C68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168CE5AC(a1);
  }
  return a1;
}

uint64_t sub_216D91CA0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D91CD8(a1);
  }
  return a1;
}

uint64_t sub_216D91CD8(uint64_t result)
{
  uint64_t v2 = *(uint64_t **)(result + 8);
  uint64_t v1 = *(uint64_t **)(result + 16);
  uint64_t v3 = *v1;
  for (uint64_t i = *v2; v3 != i; v3 -= 24)
  {
    __n128 result = *(void *)(v3 - 16);
    if (result)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void *sub_216D91D5C(uint64_t a1, void *a2, uint64_t *a3, __n128 *a4)
{
  unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x40uLL);
  void *i = 0;
  i[1] = v9;
  sub_216D91FCC((uint64_t)(i + 2), a3, a4);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *i = *v23;
LABEL_38:
    *uint64_t v23 = i;
    goto LABEL_39;
  }
  void *i = *v15;
  *long long v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216D91FB0(_Unwind_Exception *a1)
{
  sub_216D92020(v2, v1);
  _Unwind_Resume(a1);
}

__n128 sub_216D91FCC(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  __n128 result = *a3;
  *(void *)(a1 + 24) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  unint64_t v5 = a3[1].n128_u64[1];
  a3[1].n128_u64[1] = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = a3[2].n128_u32[0];
  return result;
}

void sub_216D92020(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_216D12D3C(a2 + 6, 0);
    uint64_t v3 = a2[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void sub_216D92094(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      char v13 = (char *)sub_21677CB28(v4, v12);
    }
    else {
      char v13 = 0;
    }
    unint64_t v14 = v13;
    long long v15 = &v13[8 * v10];
    float v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    float v16 = &v15[8 * a2];
    sub_216C0B4DC(a1, &v14);
    sub_216C0B5EC((uint64_t)&v14);
  }
}

void sub_216D92184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C0B5EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D92198(uint64_t a1, uint64_t *a2)
{
  if (sub_21698F7B0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216CCF480(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216D9221C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698F7B0(a2)) {
    sub_216D6C578();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

void *sub_216D923D0(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (v9 + ((((v9 + v8) | 1) * (v9 + v8)) >> 1)));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if ((v14[2] & 0xFFFFFFFFFFFFFFF8) == v8 && (v14[3] & 0xFFFFFFFFFFFFFFF8) == v9) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x28uLL);
  *unint64_t v14 = 0;
  v14[1] = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *((_DWORD *)v14 + 8) = *a4;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *unint64_t v14 = *v24;
LABEL_39:
    *unint64_t v24 = v14;
    goto LABEL_40;
  }
  *unint64_t v14 = *v16;
  *float v16 = v14;
  *(void *)(v23 + 8 * v4) = v16;
  if (*v14)
  {
    unint64_t v25 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_216D92650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2169738AC(v11, v10);
  _Unwind_Resume(a1);
}

void *sub_216D9266C(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216D928C4(a1, v7, a3, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    *BOOL v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216D928A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11)
{
  if (a10) {
    sub_216D9295C((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D928C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t result = operator new(0x28uLL);
  *(void *)a5 = result;
  *(void *)(a5 + 8) = v9;
  *uint64_t result = 0;
  result[1] = a2;
  uint64_t v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *a4;
  *a4 = 0;
  result[3] = v12;
  *((unsigned char *)result + 32) = *((unsigned char *)a4 + 8);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216D9295C(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_216D12D3C(a2 + 3, 0);
    uint64_t v3 = a2[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void *sub_216D929D0(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216D92C28(a1, v7, a3, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    *BOOL v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216D92C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11)
{
  if (a10) {
    sub_216D9295C((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D92C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t result = operator new(0x20uLL);
  *(void *)a5 = result;
  *(void *)(a5 + 8) = v9;
  *uint64_t result = 0;
  result[1] = a2;
  uint64_t v11 = *a3;
  result[2] = *a3;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *a4;
  *a4 = 0;
  result[3] = v12;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void *sub_216D92CB8(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168C3C3C(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    *BOOL v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216D92EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    sub_216D8EDE8((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D92F10(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216D93168(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    *BOOL v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216D93144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    sub_216D931EC((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D93168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = **a3;
  void v8[2] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  void v8[4] = 0;
  v8[5] = 0;
  uint64_t result = v8 + 4;
  *(result - 1) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216D931EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2168CB05C(a2 + 24, *(void **)(a2 + 32));
    uint64_t v3 = *(void *)(a2 + 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete((void *)a2);
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecializes,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (atomic_uint **)sub_216A663FC(a1);

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(v3, a2);
}

BOOL sub_216D9329C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, int a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    sub_216981010(&v21, a2);
    sub_21698105C(&v22, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v23);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v23);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    char v9 = sub_216D54248(&v21, EditTarget);
    unint64_t v10 = v24;
    if (v24
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v24->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v10->~__shared_weak_count_0)(v10);
    }
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_216D93DBC(a1, v11, &v23);
      if (v23
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v23 + 1) & 1) == 0)
      {
        unint64_t v17 = v23;
        size_t v18 = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_216D1C358(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a3);
        if (v18) {
          sub_216784EC4(v18);
        }
        unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v14) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v15 = v19;
        unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
        BOOL v12 = v15 >= v16
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19, (atomic_ullong *)v14);
      }
      else
      {
        BOOL v12 = 0;
      }
      if (v24) {
        sub_216784EC4(v24);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    }
    else
    {
      BOOL v12 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
  }
  else
  {
    uint64_t v23 = "usd/listEditImpl.h";
    unint64_t v24 = (std::__shared_weak_count *)"Add";
    uint64_t v25 = 117;
    int64x2_t v26 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Add(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditorType = pxrInternal__aap"
          "l__pxrReserved__::UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrIn"
          "ternal__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v12;
}

void sub_216D93498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, int a12, char a13, int a14, int a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a17) {
    sub_216784EC4(a17);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a11);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a13);
  sub_21697B754(&a15);
  _Unwind_Resume(a1);
}

BOOL sub_216D93548(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    sub_216981010(&v20, a2);
    sub_21698105C(&v21, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v22);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v22);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    char v7 = sub_216D54248(&v20, EditTarget);
    unint64_t v8 = v23;
    if (v23
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v23->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v8->~__shared_weak_count_0)(v8);
    }
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_216D93DBC(a1, v9, &v22);
      if (v22
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22 + 1) & 1) == 0)
      {
        sub_216D1C758((uint64_t *)&v22, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
        unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v15) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v16 = v18;
        unint64_t v17 = atomic_load((unint64_t *)(v15 + 144));
        BOOL v10 = v16 >= v17
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (atomic_ullong *)v15);
      }
      else
      {
        BOOL v10 = 0;
      }
      if (v23) {
        sub_216784EC4(v23);
      }
      uint64_t v11 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v11) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      BOOL v12 = sub_216862604(&v18, 0);
      LOBYTE(v22) = 0;
      float v13 = (void *)sub_2168520EC(v11 + 19, &v22);
      if (v13 != v12) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
    }
    else
    {
      BOOL v10 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
  }
  else
  {
    int v22 = "usd/listEditImpl.h";
    uint64_t v23 = (std::__shared_weak_count *)"Remove";
    uint64_t v24 = 148;
    uint64_t v25 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Remove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved"
          "__::UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__"
          "pxrReserved__::SdfPathKeyPolicy>]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v10;
}

void sub_216D93768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12)
{
}

BOOL sub_216D93808(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_216D93DBC(a1, v3, &v14);
    if (v14
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v14 + 1) & 1) == 0
      && sub_216A5F518((uint64_t)&v14)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v14 + 6))(v14))
    {
      unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v5 = v12;
      unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
      BOOL v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (atomic_ullong *)v4);
    }
    else
    {
      BOOL v7 = 0;
    }
    if (v15) {
      sub_216784EC4(v15);
    }
    unint64_t v8 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    char v9 = sub_216862604(&v12, 0);
    LOBYTE(v14) = 0;
    BOOL v10 = (void *)sub_2168520EC(v8 + 19, &v14);
    if (v10 != v9) {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v8, v9, v10);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
  else
  {
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    unint64_t v15 = (std::__shared_weak_count *)"Clear";
    uint64_t v16 = 174;
    unint64_t v17 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Clear(const UsdListEditorType &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::UsdSpecializes, ListOp"
          "ProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_216D939AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_216D939EC(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v31);
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v31);
    EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    BOOL v7 = v32;
    if (v32 && atomic_fetch_add_explicit((atomic_uint *volatile)v32 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(char *))(*(void *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    sub_216A6E72C((uint64_t *)&v31, (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
    unint64_t v8 = *(_DWORD **)a2;
    char v9 = (_DWORD *)*((void *)a2 + 1);
    if (*(_DWORD **)a2 != v9)
    {
      do
      {
        sub_216981010(&v24, v8);
        sub_21698105C((_DWORD *)&v24 + 1, v8 + 1);
        if (sub_216D54248((int *)&v24, EditTarget))
        {
          BOOL v10 = v32;
          if ((unint64_t)v32 >= v33)
          {
            uint64_t v11 = (char *)sub_216981B30((uint64_t *)&v31, &v24);
          }
          else
          {
            sub_216981010(v32, &v24);
            sub_21698105C((_DWORD *)v10 + 1, (_DWORD *)&v24 + 1);
            uint64_t v11 = v10 + 8;
          }
          uint64_t v32 = v11;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        sub_21697C414(&v24);
        v8 += 2;
      }
      while (v8 != v9);
    }
    unint64_t v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v13 = v30;
    unint64_t v14 = atomic_load((unint64_t *)(v12 + 144));
    if (v13 >= v14
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (atomic_ullong *)v12))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v29);
      sub_216D93DBC(a1, v15, &v27);
      if (v27
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v27 + 8)) & 1) == 0)
      {
        if (v31 == v32)
        {
          if (sub_216A5F518((uint64_t)&v27)) {
            (*(void (**)(uint64_t))(*(void *)v27 + 56))(v27);
          }
        }
        else
        {
          uint64_t v24 = (char **)v27;
          uint64_t v25 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v26 = 0;
          sub_216D1CC48((unsigned int *)&v24, &v31);
          if (v25) {
            sub_216784EC4(v25);
          }
        }
      }
      if (v28) {
        sub_216784EC4(v28);
      }
      unint64_t v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v17) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v18 = v30;
      unint64_t v19 = atomic_load((unint64_t *)(v17 + 144));
      BOOL v16 = v18 >= v19
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (atomic_ullong *)v17);
      int v20 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v20) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      int v21 = sub_216862604(&v30, 0);
      LOBYTE(v27) = 0;
      int v22 = (void *)sub_2168520EC(v20 + 19, &v27);
      if (v22 != v21) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v20, v21, v22);
      }
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v29);
    }
    else
    {
      BOOL v16 = 0;
    }
    uint64_t v24 = &v31;
    sub_216981168((void ***)&v24);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
  }
  else
  {
    uint64_t v31 = "usd/listEditImpl.h";
    uint64_t v32 = "Set";
    unint64_t v33 = 195;
    int v34 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdSpecialize"
          "s, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::"
          "Set(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditorType = pxrInternal__aapl__pxrReserved_"
          "_::UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__p"
          "xrReserved__::SdfPathKeyPolicy>]";
    char v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v16;
}

void sub_216D93D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, int a15, char a16, int a17, char a18)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a13) {
    sub_216784EC4(a13);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a14);
  a9 = (void **)&a18;
  sub_216981168(&a9);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_216D93DBC@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (unint64_t v12 = "usd/listEditImpl.h",
        unint64_t v13 = "_GetListEditor",
        uint64_t v14 = 238,
        unint64_t v15 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdSpecializes, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::S"
              "dfPathKeyPolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditorType = pxrInternal__aapl__pxrReserved__::"
              "UsdSpecializes, ListOpProxyType = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__"
              "pxrReserved__::SdfPathKeyPolicy>]",
        char v16 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v12);
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v12);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v11);
    BOOL v7 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11))
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      char v9 = (atomic_uint **)sub_216A663FC(&v11);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(v9, a3);
    }
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_216D93EC4(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_216D93EF0(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E2B624(a1, a3, (uint64_t)v6);
}

void sub_216D94E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216DFF8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D95078(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E2E774(a1, a3, (uint64_t)v6);
}

void sub_216D9604C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E2E718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D96254(a1, a3, a2, a4, a5);
}

uint64_t sub_216D96254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E3131C(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D96300(a1, a3, a2, a4, a5);
}

uint64_t sub_216D96300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E317AC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<BOOL>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C230];
  v5[0] = &unk_26C767928;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216D963EC(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  double v67 = a4;
  if (sub_21677EC50(*(void *)(a3 + 16), (uint64_t)&stru_26C757FD0)) {
    goto LABEL_53;
  }
  uint64_t v66 = 0;
  v64[1] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)&v66;
  v64[2] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)&stru_26C74C2C0;
  __int16 v65 = 0;
  v64[0] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)&unk_26C758B08;
  sub_216E0E6E8((uint64_t)&Inverse, (uint64_t)v64, (uint64_t)a2);
  double v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    double v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  Type = 0;
  sub_216E12E94(a1, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448), (uint64_t *)&Type, (uint64_t (****)(void, uint64_t))&Inverse);
  if ((Type & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)Type & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v66)
  {
    Type = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6738;
    unsigned int v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    char v58 = 0;
    sub_216D0162C((uint64_t)a2, (int *)v49);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v49);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 3, (pxrInternal__aapl__pxrReserved__ *)"Empty typeName for <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
LABEL_43:
    unint64_t v17 = v49;
LABEL_44:
    sub_21697C414(v17);
    int v29 = 1;
    goto LABEL_45;
  }
  uint64_t v8 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  Type = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66);
  int v53 = *(void **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
  if (v53 == Type)
  {
    Type = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6745;
    unsigned int v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    char v58 = 0;
    unint64_t v19 = v66 & 0xFFFFFFFFFFFFFFF8;
    if ((v66 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      int v20 = (const char *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0) {
        int v20 = *(const char **)v20;
      }
    }
    else
    {
      int v20 = "";
    }
    sub_216D0162C((uint64_t)a2, (int *)v49);
    unint64_t v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v49);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown typename for <%s>: '%s'", v20, v30);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    goto LABEL_43;
  }
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(pxrInternal__aapl__pxrReserved__::UsdTimeCode,pxrInternal__aapl__pxrReserved__::UsdAttribute const&,pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue const&)::opaqueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755210, v45, v46);
  }
  if (v53 == (void *)pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(pxrInternal__aapl__pxrReserved__::UsdTimeCode,pxrInternal__aapl__pxrReserved__::UsdAttribute const&,pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue const&)::opaqueType)
  {
    Type = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6752;
    unsigned int v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    char v58 = 0;
    sub_216D0162C((uint64_t)a2, (int *)v49);
    int v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v49);
    unint64_t v22 = v66 & 0xFFFFFFFFFFFFFFF8;
    if ((v66 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v23 = (const char *)(v22 + 16);
      if (*(char *)(v22 + 39) < 0) {
        uint64_t v23 = *(const char **)v23;
      }
    }
    else
    {
      uint64_t v23 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on <%s>: %s-typed attributes cannot have an authored default value", v21, v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    goto LABEL_43;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  unint64_t Typeid = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v53);
  if (strcmp((const char *)(*(void *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    Type = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6760;
    unsigned int v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    char v58 = 0;
    sub_216D0162C((uint64_t)a2, &v51);
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v51);
    unint64_t v12 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v53);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v49);
    int v13 = v50;
    uint64_t v14 = (void **)v49[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)(a3 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v15 = v49;
    if (v13 < 0) {
      uint64_t v15 = v14;
    }
    if (v48 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Type mismatch for <%s>: expected '%s', got '%s'", v11, (const char *)v15, (const char *)v16);
    if (v48 < 0) {
      operator delete(__p[0]);
    }
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
    unint64_t v17 = (void **)&v51;
    goto LABEL_44;
  }
  if (sub_216C4B19C(16))
  {
    Type = (void *)0x7FF8000000000000;
    BOOL v24 = sub_216E13E8C(&v67, (pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&Type);
    if (v24
      && pxrInternal__aapl__pxrReserved__::UsdStage::_GetVariability((pxrInternal__aapl__pxrReserved__::UsdStage *)v24, a2) == 1&& sub_216C4B19C(16))
    {
      p_Type = &Type;
      pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&Type, a2, v25);
      if (v56 < 0) {
        p_Type = Type;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Warning: authoring time sample value on uniform attribute <%s> at time %.3f\n", v27, v28, p_Type, *(void *)&v67);
      if (SHIBYTE(v56) < 0) {
        operator delete(Type);
      }
    }
  }
  int v29 = 0;
LABEL_45:
  if ((v63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
  sub_21697C414(&v62);
  if (v61) {
    sub_216D16E0C((atomic_ullong *)v61);
  }
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v29) {
    return 0;
  }
LABEL_53:
  sub_216DED378(a1, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v64);
  int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v64);
  if (IsDormant)
  {
    double Inverse = COERCE_DOUBLE("usd/stage.cpp");
    BOOL v60 = "_SetValueImpl";
    uint64_t v61 = 6785;
    char v62 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    LOBYTE(v63) = 0;
    sub_216D0162C((uint64_t)a2, (int *)v49);
    unint64_t v33 = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 48);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v49, &Type);
    int v34 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&Type);
    char v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v33);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v35);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v37 = (const char *)Identifier;
    }
    else {
      uint64_t v37 = *(const char **)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Inverse, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot set attribute value.  Failed to create attribute spec <%s> in layer @%s@", v34, v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&Type + 1);
    sub_21697C414(&Type);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    sub_21697C414(v49);
  }
  else
  {
    double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104));
    BOOL v60 = v39;
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, v67);
    char v40 = (uint64_t **)sub_216A64148(v64);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v40, (uint64_t *)&Type);
    unsigned int v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&Type);
    unsigned int v42 = sub_216A64148(v64);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, v49);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v41, (pxrInternal__aapl__pxrReserved__::SdfPath *)v49, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    sub_21697C414(v49);
    unsigned int v43 = v55;
    if (v55)
    {
      unint64_t add_explicit = (void *)atomic_fetch_add_explicit((atomic_uint *volatile)v55 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit == 1) {
        (*(void (**)(const char *))(*(void *)v43 + 8))(v43);
      }
    }
  }
  uint64_t v31 = IsDormant ^ 1u;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v64);
  return v31;
}

void sub_216D96B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  sub_216DFF644((uint64_t)&a34);
  uint64_t v37 = *(void *)(v35 - 96);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E160;
  v5[0] = &unk_26C76A160;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216D96D98(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E3192C(a1, a3, (uint64_t)v6);
}

void sub_216D97D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E318D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D97F68(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E34274(a1, a3, (uint64_t)v6);
}

void sub_216D98F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E34218((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D99144(a1, a3, a2, a4, a5);
}

uint64_t sub_216D99144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E36B60(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D991F0(a1, a3, a2, a4, a5);
}

uint64_t sub_216D991F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E36BEC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned char>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C250];
  v5[0] = &unk_26C76A208;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E190;
  v5[0] = &unk_26C76A240;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216D99330(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E36E34(a1, a3, (uint64_t)v6);
}

void sub_216D9A304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E36DD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D9A500(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E39574(a1, a3, (uint64_t)v6);
}

void sub_216D9B4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E39518((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D9B6DC(a1, a3, a2, a4, a5);
}

uint64_t sub_216D9B6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E3BE60(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D9B788(a1, a3, a2, a4, a5);
}

uint64_t sub_216D9B788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E3BEEC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<int>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C258];
  v5[0] = &unk_26C76A2E8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E1D8;
  v5[0] = &unk_26C76A320;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216D9B8C8(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E3C134(a1, a3, (uint64_t)v6);
}

void sub_216D9C89C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E3C0D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D9CA98(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E3EA7C(a1, a3, (uint64_t)v6);
}

void sub_216D9DA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E3EA20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D9DC74(a1, a3, a2, a4, a5);
}

uint64_t sub_216D9DC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E41368(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216D9DD20(a1, a3, a2, a4, a5);
}

uint64_t sub_216D9DD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E413F4(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned int>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C260];
  v5[0] = &unk_26C76A3C8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E1F0;
  v5[0] = &unk_26C76A400;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216D9DE60(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E4163C(a1, a3, (uint64_t)v6);
}

void sub_216D9EE34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E415E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D9F030(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E43F84(a1, a3, (uint64_t)v6);
}

void sub_216DA0004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E43F28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA020C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA020C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E46870(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA02B8(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA02B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E468FC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C290];
  v5[0] = &unk_26C76A4A8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E208;
  v5[0] = &unk_26C76A4E0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DA03F8(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E46B40(a1, a3, (uint64_t)v6);
}

void sub_216DA13CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E46AE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DA15C8(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E49488(a1, a3, (uint64_t)v6);
}

void sub_216DA259C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E4942C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA27A4(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA27A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E4BD74(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA2850(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA2850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E4BE00(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C298];
  v5[0] = &unk_26C76A588;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E220;
  v5[0] = &unk_26C76A5C0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DA2990(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E4C044(a1, a3, (uint64_t)v6);
}

void sub_216DA3964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E4BFE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DA3B60(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E4E7A8(a1, a3, (uint64_t)v6);
}

void sub_216DA4B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E4E74C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA4D3C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA4D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E50EB0(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA4DE8(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA4DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E50F60(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C510;
  v5[0] = &unk_26C76A668;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E268;
  v5[0] = &unk_26C76A6A0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DA4F28(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E511DC(a1, a3, (uint64_t)v6);
}

void sub_216DA5EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E51180((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DA60F8(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E53940(a1, a3, (uint64_t)v6);
}

void sub_216DA70CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E538E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA72D4(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA72D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E56048(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA7380(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA7380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E560F8(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<float>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C248];
  v5[0] = &unk_26C76A748;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E250;
  v5[0] = &unk_26C76A780;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DA74C0(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E5636C(a1, a3, (uint64_t)v6);
}

void sub_216DA8494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E56310((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DA8690(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E58AD0(a1, a3, (uint64_t)v6);
}

void sub_216DA9664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E58A74((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA986C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA986C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E5B1D8(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DA9918(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA9918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E5B288(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<double>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = MEMORY[0x263F8C240];
  v5[0] = &unk_26C7679D0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E238;
  v5[0] = &unk_26C76A828;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DA9A58(uint64_t a1, _DWORD *a2, double *a3, double a4)
{
  double v10 = a4;
  v9[0] = a1;
  v9[1] = &v10;
  void v9[2] = a2;
  uint64_t v7 = sub_216E5B3D0(a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a3, (uint64_t)v9);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, a3, 1, v10);
  }
  return v7;
}

void sub_216DA9BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216DDED9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DA9BF8(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  double v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = a2;
  uint64_t v9 = sub_216E5B564(a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a3, (uint64_t)v12);
  if (v9)
  {
    double v10 = v13;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, *(double **)(a3 + 32), *(void *)a3, v10);
  }
  return v9;
}

void sub_216DA9D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216DE002C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4, double a5)
{
  return sub_216DA9DB8(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA9DB8(uint64_t a1, _DWORD *a2, uint64_t a3, double *a4, double a5)
{
  double v11 = a5;
  v10[0] = a1;
  v10[1] = a3;
  void v10[2] = &v11;
  v10[3] = a2;
  if (!sub_216E5B6F8(a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v10))return 0; {
  uint64_t v8 = 1;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, a4, 1, v11);
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, double a5)
{
  return sub_216DA9EAC(a1, a3, a2, a4, a5);
}

uint64_t sub_216DA9EAC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, double a5)
{
  double v13 = a5;
  v12[0] = a1;
  v12[1] = a3;
  void v12[2] = &v13;
  void v12[3] = a2;
  uint64_t result = (uint64_t)sub_216E5B7A8(a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v12);
  if (result)
  {
    double v11 = v13;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, *(double **)(a4 + 32), *(void *)a4, v11);
    return 1;
  }
  return result;
}

uint64_t sub_216DA9F9C(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, double *a3, double a4)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    uint64_t v12 = a3;
    double v13 = &stru_26C7557E0;
  }
  else
  {
    double v14 = *a3;
    double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v8);
    uint64_t v12 = v9;
    double v14 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, &v14);
    uint64_t v12 = &v14;
    double v13 = &stru_26C7557E0;
  }
  double Inverse = COERCE_DOUBLE(&unk_26C76A8D0);
  return sub_216D963EC(a1, a2, (uint64_t)&Inverse, a4);
}

uint64_t sub_216DAA088(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, long long *a3, double a4)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    *((void *)&v24 + 1) = a3;
    *(void *)&long long v25 = &stru_26C7558A8;
    *(void *)&long long v24 = &unk_26C76A908;
    return sub_216D963EC(a1, a2, (uint64_t)&v24, a4);
  }
  else
  {
    long long v10 = a3[1];
    long long v24 = *a3;
    long long v25 = v10;
    double v11 = (double *)*((void *)a3 + 4);
    int v26 = v11;
    if (v11)
    {
      uint64_t v12 = (atomic_ullong *)(v11 - 2);
      if (*((void *)&v25 + 1)) {
        uint64_t v12 = (atomic_ullong *)*((void *)&v25 + 1);
      }
      atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
    }
    double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v8);
    unint64_t v22 = v13;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24, v14, v15);
    uint64_t v16 = v26;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24, v17, v18);
    unint64_t v19 = &v26[v24];
    while (v16 != v19)
    {
      *uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, v16);
      ++v16;
    }
    unint64_t v22 = &v24;
    uint64_t v23 = &stru_26C7558A8;
    double Inverse = COERCE_DOUBLE(&unk_26C76A908);
    uint64_t v9 = sub_216D963EC(a1, a2, (uint64_t)&Inverse, a4);
    sub_2168F83DC((uint64_t)&v24);
  }
  return v9;
}

void sub_216DAA1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DAA214(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E5B9D8(a1, a3, (uint64_t)v6);
}

void sub_216DAB1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E5B97C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DAB3E4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E5E2AC(a1, a3, (uint64_t)v6);
}

void sub_216DAC3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E5E250((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DAC5C0(a1, a3, a2, a4, a5);
}

uint64_t sub_216DAC5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E60B98(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DAC66C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DAC66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E60C24(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<std::string>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C747090;
  v5[0] = &unk_26C767960;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E280;
  v5[0] = &unk_26C76A9B0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DAC7AC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v6 = a4;
  v5[0] = a1;
  v5[1] = &v6;
  double v5[2] = a2;
  return sub_216E60D48(a1, a3, (uint64_t)v5);
}

void sub_216DAC8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216DFF644((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DAC918(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E610A8(a1, a3, (uint64_t)v6);
}

void sub_216DAD8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E6104C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DADAF4(a1, a3, a2, a4, a5);
}

uint64_t sub_216DADAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E63994(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DADBA0(a1, a3, a2, a4, a5);
}

uint64_t sub_216DADBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E63A20(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C2C0;
  v5[0] = &unk_26C7677B8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E298;
  v5[0] = &unk_26C76AA58;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DADCE0(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v10 = a4;
  v9[0] = a1;
  v9[1] = &v10;
  void v9[2] = a2;
  uint64_t v7 = sub_216E63B44((uint64_t)a1, a3, (uint64_t)v9);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)a3, 1, 0, v10);
  }
  return v7;
}

void sub_216DADE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216DDCA50((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DADE84(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, double a4)
{
  double v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = a2;
  uint64_t v9 = sub_216E63EBC((uint64_t)a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a3, (uint64_t)v12);
  if (v9)
  {
    double v10 = v13;
    sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, *(void *)(a3 + 32), *(void *)a3, 0, v10);
  }
  return v9;
}

void sub_216DAE000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216DDDC04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdStage *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DAE048(a1, a3, a2, a4, a5);
}

uint64_t sub_216DAE048(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v11 = a5;
  v10[0] = a1;
  v10[1] = a3;
  void v10[2] = &v11;
  v10[3] = a2;
  if (!sub_216E64234((uint64_t)a1, a4, (uint64_t)v10)) {
    return 0;
  }
  uint64_t v8 = 1;
  pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)a4, 1, 0, v11);
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__::UsdStage *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a3, uint64_t a4, double a5)
{
  return sub_216DAE140(a1, a3, a2, a4, a5);
}

uint64_t sub_216DAE140(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, uint64_t a4, double a5)
{
  double v13 = a5;
  v12[0] = a1;
  v12[1] = a3;
  void v12[2] = &v13;
  void v12[3] = a2;
  uint64_t result = (uint64_t)sub_216E642C0((uint64_t)a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v12);
  if (result)
  {
    double v11 = v13;
    sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, *(void *)(a4 + 32), *(void *)a4, 0, v11);
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C755240;
  v5[0] = &unk_26C7678F0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C755250;
  v5[0] = &unk_26C7678B8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DAE2D4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E643A8(a1, a3, (uint64_t)v6);
}

void sub_216DAF2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E6434C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DAF4A4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E66CF0(a1, a3, (uint64_t)v6);
}

void sub_216DB0478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E66C94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB0680(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB0680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E695DC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB072C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB072C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E69668(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C755210;
  v5[0] = &unk_26C76AB70;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C755C58;
  v5[0] = &unk_26C76ABA8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DB086C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v10 = a4;
  v9[0] = a1;
  v9[1] = &v10;
  void v9[2] = a2;
  uint64_t v7 = sub_216E69834(a1, a3, (uint64_t)v9);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, (uint64_t)a3, 1, v10);
  }
  return v7;
}

void sub_216DB09D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216DE1350((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DB0A0C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = a2;
  uint64_t v9 = sub_216E69BAC(a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a3, (uint64_t)v12);
  if (v9)
  {
    double v10 = v13;
    sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, *(void *)(a3 + 32), *(void *)a3, v10);
  }
  return v9;
}

void sub_216DB0B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216DE2798((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB0BCC(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB0BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v11 = a5;
  v10[0] = a1;
  v10[1] = a3;
  void v10[2] = &v11;
  v10[3] = a2;
  if (!sub_216E69F24(a1, a4, (uint64_t)v10)) {
    return 0;
  }
  uint64_t v8 = 1;
  pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, (uint64_t)a4, 1, v11);
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return sub_216DB0CC0(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB0CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v13 = a5;
  v12[0] = a1;
  v12[1] = a3;
  void v12[2] = &v13;
  void v12[3] = a2;
  uint64_t result = (uint64_t)sub_216E69FB0(a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a4, (uint64_t)v12);
  if (result)
  {
    double v11 = v13;
    sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, *(void *)(a4 + 32), *(void *)a4, v11);
    return 1;
  }
  return result;
}

uint64_t sub_216DB0DB0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  sub_216D16CFC((uint64_t)&v10, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_216D0162C((uint64_t)&v10, &v15);
  sub_216B505B0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(a1 + 64, &v17, 0, 0, (uint64_t)v24);
  if (v23 < 0) {
    operator delete(__p);
  }
  int v29 = (void **)&v21;
  sub_2169B81EC(&v29);
  int v29 = (void **)&v20;
  sub_2169B74B8(&v29);
  if (v17)
  {
    unint64_t v18 = v17;
    operator delete(v17);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  unint64_t v18 = v24;
  unint64_t v19 = &stru_26C755268;
  uint64_t v17 = &unk_26C76AC50;
  uint64_t v8 = sub_216D963EC(a1, (pxrInternal__aapl__pxrReserved__ *)a2, (uint64_t)&v17, a4);
  if (v28 < 0) {
    operator delete(v27);
  }
  uint64_t v17 = &v26;
  sub_2169B81EC((void ***)&v17);
  uint64_t v17 = &v25;
  sub_2169B74B8((void ***)&v17);
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  return v8;
}

void sub_216DB0F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  a14 = &a35;
  sub_2169B81EC((void ***)&a14);
  a14 = &a32;
  sub_2169B74B8((void ***)&a14);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216DB1064(uint64_t a1, uint64_t a2, long long *a3, double a4)
{
  long long v6 = a3[1];
  long long v36 = *a3;
  long long v37 = v6;
  uint64_t v7 = *((void *)a3 + 4);
  uint64_t v38 = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v37 + 1)) {
      uint64_t v8 = (atomic_ullong *)*((void *)&v37 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  sub_216D16CFC((uint64_t)__p, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_216D0162C((uint64_t)__p, &v34);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_21697C414(&v27);
  if (__p[1]) {
    sub_216D16E0C((atomic_ullong *)__p[1]);
  }
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36, v9, v10);
  uint64_t v11 = v38;
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36, v12, v13);
  for (uint64_t i = v38 + 96 * v36; v11 != i; v11 += 96)
  {
    sub_216B505B0(v11, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (uint64_t)v21);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(a1 + 64, v21, 0, 0, (uint64_t)__p);
    int v15 = *(void **)v11;
    if (*(void *)v11)
    {
      *(void *)(v11 + 8) = v15;
      operator delete(v15);
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
    *(void *)(v11 + 16) = v27;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v27 = 0;
    sub_2169B59AC((void **)(v11 + 24));
    *(_OWORD *)(v11 + 24) = v28;
    *(void *)(v11 + 40) = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    sub_2169B5A6C((void **)(v11 + 48));
    *(_OWORD *)(v11 + 48) = v30;
    *(void *)(v11 + 64) = v31;
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    int v16 = (void **)(v11 + 72);
    if (*(char *)(v11 + 95) < 0) {
      operator delete(*v16);
    }
    long long v17 = v32;
    *(void *)(v11 + 88) = v33;
    *(_OWORD *)int v16 = v17;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    v39[0] = (void **)&v30;
    sub_2169B81EC(v39);
    v39[0] = (void **)&v28;
    sub_2169B74B8(v39);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    v39[0] = (void **)&v23;
    sub_2169B81EC(v39);
    v39[0] = (void **)&v22;
    sub_2169B74B8(v39);
    if (v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }
  }
  __p[1] = &v36;
  uint64_t v27 = &stru_26C755278;
  __p[0] = &unk_26C76AC88;
  uint64_t v18 = sub_216D963EC(a1, (pxrInternal__aapl__pxrReserved__ *)a2, (uint64_t)__p, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
  sub_21697C414(&v34);
  sub_2169B88CC(&v36);
  return v18;
}

void sub_216DB132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v29 - 164));
  sub_21697C414((_DWORD *)(v29 - 168));
  sub_2169B88CC((void *)(v29 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_216DB13FC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E6A1EC(a1, a3, (uint64_t)v6);
}

void sub_216DB23D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E6A190((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DB25CC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E6C950(a1, a3, (uint64_t)v6);
}

void sub_216DB35A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E6C8F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB37A8(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB37A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E6F058(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB3854(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB3854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E6F108(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C570;
  v5[0] = &unk_26C76AD30;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DFE0;
  v5[0] = &unk_26C76AD68;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DB3994(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E6F344(a1, a3, (uint64_t)v6);
}

void sub_216DB4968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E6F2E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DB4B64(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E71AA8(a1, a3, (uint64_t)v6);
}

void sub_216DB5B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E71A4C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB5D40(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB5D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E741B0(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB5DEC(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB5DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E74260(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C5A0;
  v5[0] = &unk_26C76AE10;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DFC8;
  v5[0] = &unk_26C76AE48;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DB5F2C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E7449C(a1, a3, (uint64_t)v6);
}

void sub_216DB6F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E74440((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DB70FC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E76C00(a1, a3, (uint64_t)v6);
}

void sub_216DB80D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E76BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB82D8(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB82D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E79308(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DB8384(a1, a3, a2, a4, a5);
}

uint64_t sub_216DB8384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E793B8(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C5C0;
  v5[0] = &unk_26C76AEF0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DFB0;
  v5[0] = &unk_26C76AF28;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DB84C4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E795F4(a1, a3, (uint64_t)v6);
}

void sub_216DB9498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E79598((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DB9694(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E7BD58(a1, a3, (uint64_t)v6);
}

void sub_216DBA668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E7BCFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DBA870(a1, a3, a2, a4, a5);
}

uint64_t sub_216DBA870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E7E460(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DBA91C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DBA91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E7E510(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C610;
  v5[0] = &unk_26C76AFD0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E0B8;
  v5[0] = &unk_26C76B008;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DBAA5C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E7E774(a1, a3, (uint64_t)v6);
}

void sub_216DBBA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E7E718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DBBC2C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E80ED8(a1, a3, (uint64_t)v6);
}

void sub_216DBCC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E80E7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DBCE08(a1, a3, a2, a4, a5);
}

uint64_t sub_216DBCE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E835E0(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DBCEB4(a1, a3, a2, a4, a5);
}

uint64_t sub_216DBCEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E83690(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C600;
  v5[0] = &unk_26C76B0B0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E0D0;
  v5[0] = &unk_26C76B0E8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DBCFF4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E838F8(a1, a3, (uint64_t)v6);
}

void sub_216DBDFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E8389C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DBE1C4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E8605C(a1, a3, (uint64_t)v6);
}

void sub_216DBF198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E86000((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DBF3A0(a1, a3, a2, a4, a5);
}

uint64_t sub_216DBF3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E88764(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DBF44C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DBF44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E88814(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C5F0;
  v5[0] = &unk_26C76B190;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74E0E8;
  v5[0] = &unk_26C76B1C8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DBF58C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E88A7C(a1, a3, (uint64_t)v6);
}

void sub_216DC0560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E88A20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DC075C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E8B3C4(a1, a3, (uint64_t)v6);
}

void sub_216DC1730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E8B368((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC1938(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC1938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E8DCB0(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC19E4(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC19E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E8DD3C(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C720;
  v5[0] = &unk_26C76B270;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DE78;
  v5[0] = &unk_26C76B2A8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DC1B24(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E8DF98(a1, a3, (uint64_t)v6);
}

void sub_216DC2AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E8DF3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DC2CF4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E906FC(a1, a3, (uint64_t)v6);
}

void sub_216DC3CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E906A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC3ED0(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC3ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E92E04(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC3F7C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC3F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E92EB4(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C710;
  v5[0] = &unk_26C76B350;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DEC0;
  v5[0] = &unk_26C76B388;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DC40BC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E93150(a1, a3, (uint64_t)v6);
}

void sub_216DC5090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E930F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DC528C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E958B4(a1, a3, (uint64_t)v6);
}

void sub_216DC6260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E95858((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC6468(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC6468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E97FBC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC6514(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC6514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E9806C(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C700;
  v5[0] = &unk_26C76B430;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DF08;
  v5[0] = &unk_26C76B468;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DC6654(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E982F8(a1, a3, (uint64_t)v6);
}

void sub_216DC7628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E9829C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DC7824(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E9AA5C(a1, a3, (uint64_t)v6);
}

void sub_216DC87F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E9AA00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC8A00(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC8A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E9D164(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DC8AAC(a1, a3, a2, a4, a5);
}

uint64_t sub_216DC8AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216E9D214(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C6F0;
  v5[0] = &unk_26C76B510;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DF50;
  v5[0] = &unk_26C767998;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DC8BEC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E9D3C4(a1, a3, (uint64_t)v6);
}

void sub_216DC9BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E9D368((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DC9DBC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216E9FD0C(a1, a3, (uint64_t)v6);
}

void sub_216DCAD90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216E9FCB0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DCAF98(a1, a3, a2, a4, a5);
}

uint64_t sub_216DCAF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EA25F8(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DCB044(a1, a3, a2, a4, a5);
}

uint64_t sub_216DCB044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EA2684(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C760;
  v5[0] = &unk_26C76B5B8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DE60;
  v5[0] = &unk_26C76B5F0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DCB184(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EA28B8(a1, a3, (uint64_t)v6);
}

void sub_216DCC158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EA285C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DCC354(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EA501C(a1, a3, (uint64_t)v6);
}

void sub_216DCD328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EA4FC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DCD530(a1, a3, a2, a4, a5);
}

uint64_t sub_216DCD530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EA7724(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DCD5DC(a1, a3, a2, a4, a5);
}

uint64_t sub_216DCD5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EA77D4(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C750;
  v5[0] = &unk_26C76B698;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DEA8;
  v5[0] = &unk_26C76B6D0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DCD71C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EA7A60(a1, a3, (uint64_t)v6);
}

void sub_216DCE6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EA7A04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DCE8EC(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EAA1C4(a1, a3, (uint64_t)v6);
}

void sub_216DCF8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EAA168((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DCFAC8(a1, a3, a2, a4, a5);
}

uint64_t sub_216DCFAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EAC8CC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DCFB74(a1, a3, a2, a4, a5);
}

uint64_t sub_216DCFB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EAC97C(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C740;
  v5[0] = &unk_26C76B778;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DEF0;
  v5[0] = &unk_26C76B7B0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DCFCB4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EACBD4(a1, a3, (uint64_t)v6);
}

void sub_216DD0C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EACB78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DD0E84(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EAF338(a1, a3, (uint64_t)v6);
}

void sub_216DD1E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EAF2DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD2060(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD2060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EB1A40(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD210C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD210C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EB1AF0(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C730;
  v5[0] = &unk_26C76B858;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DF38;
  v5[0] = &unk_26C76B890;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DD224C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EB1D48(a1, a3, (uint64_t)v6);
}

void sub_216DD3220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EB1CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DD341C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EB4690(a1, a3, (uint64_t)v6);
}

void sub_216DD43F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EB4634((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD45F8(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD45F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EB6F7C(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD46A4(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD46A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EB7008(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C7A0;
  v5[0] = &unk_26C76B938;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DE48;
  v5[0] = &unk_26C76B970;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DD47E4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EB724C(a1, a3, (uint64_t)v6);
}

void sub_216DD57B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EB71F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DD59B4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EB99B0(a1, a3, (uint64_t)v6);
}

void sub_216DD6988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EB9954((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD6B90(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD6B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EBC0B8(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD6C3C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD6C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EBC168(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C790;
  v5[0] = &unk_26C76BA18;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DE90;
  v5[0] = &unk_26C76BA50;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DD6D7C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EBC3E0(a1, a3, (uint64_t)v6);
}

void sub_216DD7D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EBC384((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DD7F4C(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EBEB44(a1, a3, (uint64_t)v6);
}

void sub_216DD8F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EBEAE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD9128(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD9128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EC124C(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DD91D4(a1, a3, a2, a4, a5);
}

uint64_t sub_216DD91D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EC12FC(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C780;
  v5[0] = &unk_26C76BAF8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DED8;
  v5[0] = &unk_26C76BB30;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t sub_216DD9314(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EC1564(a1, a3, (uint64_t)v6);
}

void sub_216DDA2E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EC1508((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DDA4E4(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a4)
{
  double v5 = a4;
  v6[0] = a1;
  v6[1] = &v5;
  v6[2] = a2;
  return sub_216EC3CC8(a1, a3, (uint64_t)v6);
}

void sub_216DDB4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EC3C6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DDB6C0(a1, a3, a2, a4, a5);
}

uint64_t sub_216DDB6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EC63D0(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  return sub_216DDB76C(a1, a3, a2, a4, a5);
}

uint64_t sub_216DDB76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double), double a5)
{
  double v7 = a5;
  v6[0] = a1;
  v6[1] = a3;
  v6[2] = &v7;
  void v6[3] = a2;
  uint64_t result = (uint64_t)sub_216EC6480(a1, a4, (uint64_t)v6);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74C770;
  v5[0] = &unk_26C76BBD8;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C74DF20;
  v5[0] = &unk_26C76BC10;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3, double a4)
{
  v5[1] = a3;
  double v5[2] = &stru_26C757FD0;
  v5[0] = &unk_26C75E7C0;
  return sub_216D963EC(a1, a2, (uint64_t)v5, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  v18[1] = a6;
  double v18[2] = &stru_26C755240;
  __int16 v19 = 0;
  v18[0] = &unk_26C75DD58;
  sub_216E0E6E8((uint64_t)v13, (uint64_t)v18, a2);
  BOOL v11 = sub_216DDB9F4(a1, a2, a3, a4, a5, v13);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v11;
}

void sub_216DDB9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216DDB9F4(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(void, uint64_t))
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138);
  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v151);
        uint64_t v35 = *((void *)&v151 + 1);
        if (!*((void *)&v151 + 1) || (*(unsigned char *)(*((void *)&v151 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v151 + 1), v34);
        }
        long long v36 = *(atomic_ullong **)(v35 + 24);
        uint64_t explicit = atomic_load_explicit(v36 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v36);
        }
        uint64_t v38 = sub_216D563F8(&v151);
        *(void *)&long long v157 = 0;
        unsigned int v39 = sub_216E156AC(explicit, v38, a3, &v157, *a6);
        *((unsigned char *)a6 + 40) = v39;
        if ((v157 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v39 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v39)
        {
          *(void *)&long long v157 = 0;
          sub_216EC668C((uint64_t)&v151, a3, (uint64_t *)&v157, a5, (uint64_t)a6);
          if ((v157 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v152) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v152 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v152 + 1);
        sub_21697C414(&v152);
        char v40 = (atomic_ullong *)*((void *)&v151 + 1);
        if (!*((void *)&v151 + 1))
        {
LABEL_154:
          if (*((unsigned char *)a6 + 40))
          {
            unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v26) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_181;
          }
          goto LABEL_183;
        }
LABEL_153:
        sub_216D16E0C(v40);
        goto LABEL_154;
      }
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        int v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v139);
        unsigned int v42 = v140;
        if (!v140 || (*((unsigned char *)v140 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v140, v41);
        }
        unsigned int v43 = (atomic_ullong *)*((void *)v42 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v43 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v43);
        }
        uint64_t v45 = sub_216D563F8(&v139);
        BOOL v46 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v46) {
          BOOL v46 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v151 = 0;
        unsigned int v47 = sub_216E156AC(PrimDefinition, v45, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v46 + 464), &v151, *a6);
        *((unsigned char *)a6 + 40) = v47;
        if ((v151 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v47 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v47)
        {
          char v48 = sub_216D563F8(&v139);
          sub_216D16CFC((uint64_t)&v147, (uint64_t *)&v140, &v141);
          char v50 = (uint64_t *)sub_216D240F8((uint64_t)&v147, v49);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v50, 6u, (uint64_t *)&v157);
          long long v155 = v157;
          long long v156 = v158;
          long long v151 = v158;
          long long v152 = v158;
          long long v153 = v157;
          long long v154 = v157;
          if ((v150 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
          sub_21697C414(&v148);
          if (*((void *)&v147 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v147 + 1));
          }
          if (v152 != v154)
          {
            while (1)
            {
              int v53 = sub_216DFFC94(&v151, v51, v52);
              uint64_t v54 = v53[3] - 1;
              *(void *)&long long v157 = v53[2];
              *((void *)&v157 + 1) = v54;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) & 1) == 0)
              {
                unsigned int v57 = sub_216DFFC94(&v151, v55, v56);
                uint64_t v58 = v57[3] - 1;
                *(void *)&long long v147 = v57[2];
                *((void *)&v147 + 1) = v58;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v151);
              if (v152 == v154) {
                goto LABEL_150;
              }
            }
            uint64_t v61 = sub_216DFFC94(&v151, v59, v60);
            uint64_t v62 = v61[3] - 1;
            *(void *)&long long v157 = v61[2];
            *((void *)&v157 + 1) = v62;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v48, &v145);
            uint64_t v66 = sub_216DFFC94(&v151, v64, v65);
            uint64_t v67 = v66[3] - 1;
            *(void *)&long long v147 = v66[2];
            *((void *)&v147 + 1) = v67;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147);
            v69 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v69);
            *(void *)&long long v157 = Layers[1];
            *((void *)&v157 + 1) = v157;
            *(void *)&long long v158 = *Layers;
            *((void *)&v158 + 1) = v158;
            while (1)
            {
              if (*((void *)&v157 + 1) == *((void *)&v158 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
                sub_21697C414(&v145);
                goto LABEL_81;
              }
              *(void *)&long long v147 = sub_216E15794(&v151, v71, v72);
              *((void *)&v147 + 1) = v73;
              uint64_t v75 = (uint64_t *)sub_216BEF334((uint64_t)&v157, v73, v74);
              uint64_t v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v76) {
                uint64_t v76 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v144 = 0;
              sub_216EC7E6C((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147, v75, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v145, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v76 + 464), &v144);
              if ((v144 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (*((unsigned char *)a6 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v157);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
            sub_21697C414(&v145);
          }
        }
LABEL_150:
        if ((v143 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_152:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v142);
        sub_21697C414(&v141);
        char v40 = (atomic_ullong *)v140;
        if (!v140) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v139);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v139, (uint64_t)&v151);
      uint64_t v18 = *((void *)&v151 + 1);
      if ((v151 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18)
      {
        LOBYTE(v151) = 0;
        sub_216E158B4((uint64_t)*a6, &v151);
        *((unsigned char *)a6 + 40) = 1;
      }
      else
      {
        v77 = sub_216D563F8(&v139);
        sub_216D16CFC((uint64_t)&v147, (uint64_t *)&v140, &v141);
        v79 = (uint64_t *)sub_216D240F8((uint64_t)&v147, v78);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v79, 6u, (uint64_t *)&v157);
        long long v155 = v157;
        long long v156 = v158;
        long long v151 = v158;
        long long v152 = v158;
        long long v153 = v157;
        long long v154 = v157;
        if ((v150 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
        sub_21697C414(&v148);
        if (*((void *)&v147 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v147 + 1));
        }
        if (v152 != v154)
        {
          while (1)
          {
            unsigned int v82 = sub_216DFFC94(&v151, v80, v81);
            uint64_t v83 = v82[3] - 1;
            *(void *)&long long v157 = v82[2];
            *((void *)&v157 + 1) = v83;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) & 1) == 0)
            {
              uint64_t v86 = sub_216DFFC94(&v151, v84, v85);
              uint64_t v87 = v86[3] - 1;
              *(void *)&long long v147 = v86[2];
              *((void *)&v147 + 1) = v87;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v151);
            if (v152 == v154) {
              goto LABEL_129;
            }
          }
          unint64_t v90 = sub_216DFFC94(&v151, v88, v89);
          uint64_t v91 = v90[3] - 1;
          *(void *)&long long v157 = v90[2];
          *((void *)&v157 + 1) = v91;
          v92 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v92, v77, &v145);
          int v95 = sub_216DFFC94(&v151, v93, v94);
          uint64_t v96 = v95[3] - 1;
          *(void *)&long long v147 = v95[2];
          *((void *)&v147 + 1) = v96;
          unsigned int v97 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147);
          unsigned int v98 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v97);
          BOOL v99 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v98);
          *(void *)&long long v157 = v99[1];
          *((void *)&v157 + 1) = v157;
          *(void *)&long long v158 = *v99;
          *((void *)&v158 + 1) = v158;
          while (1)
          {
            if (*((void *)&v157 + 1) == *((void *)&v158 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
              sub_21697C414(&v145);
              goto LABEL_99;
            }
            *(void *)&long long v147 = sub_216E15794(&v151, v100, v101);
            *((void *)&v147 + 1) = v102;
            v104 = (uint64_t *)sub_216BEF334((uint64_t)&v157, v102, v103);
            int v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v105) {
              int v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v144 = 0;
            sub_216EC7E6C((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147, v104, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v145, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v105 + 64), &v144);
            if ((v144 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((unsigned char *)a6 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v157);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
          sub_21697C414(&v145);
        }
      }
LABEL_129:
      if ((v143 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_152;
    }
LABEL_33:
    if (sub_216EC668C(a2, a3, a4, a5, (uint64_t)a6))
    {
      unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_181;
    }
    goto LABEL_183;
  }
  if (v14 != 1) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19 || (uint64_t v20 = *(void *)(v19 + 56), (v20 & 0x800) != 0))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
    uint64_t v20 = *(void *)(v19 + 56);
  }
  uint64_t v21 = *(unsigned char **)(a2 + 8);
  if ((v20 & 0x4000) != 0)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v151 = v29;
    *((void *)&v151 + 1) = v30;
    if (*(void *)(a1 + 40)
      && (uint64_t v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151),
          long long v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v31),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v32) == *(void *)(a1 + 40)))
    {
      int v121 = sub_216EC7E6C((uint64_t)a6, *(void *)v21, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t *)(a1 + 40), v27, a3, a4);
      if (*((unsigned char *)a6 + 40))
      {
LABEL_126:
        unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_181:
        unint64_t v134 = v138;
        unint64_t v135 = atomic_load((unint64_t *)(v26 + 144));
        BOOL v136 = v134 >= v135
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138, (atomic_ullong *)v26);
        goto LABEL_185;
      }
      int v33 = v121;
    }
    else
    {
      int v33 = 0;
    }
    if ((v33 | sub_216EC7E6C((uint64_t)a6, *(void *)v21, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t *)(a1 + 32), v27, a3, a4)) != 1)goto LABEL_183; {
    goto LABEL_126;
    }
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned int v106 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v106, 1);
    if (v152 == v153) {
      goto LABEL_178;
    }
    while (1)
    {
      uint64_t v139 = 0;
      unsigned int v107 = (void *)sub_216AA5ECC((uint64_t *)v154);
      long long v157 = v152;
      unsigned int v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
      BOOL v109 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v109) {
        BOOL v109 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v157 + 1) = &v139;
      *(void *)&long long v158 = &stru_26C74C2C0;
      WORD4(v158) = 0;
      *(void *)&long long v157 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v107, v108, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v109 + 448), (uint64_t (***)(void, uint64_t))&v157);
      uint64_t v111 = v139;
      BOOL v112 = HasField && BYTE8(v158) == 0;
      if (v112 && v139 != 0)
      {
        v114 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v114) {
          v114 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v111 = v139;
        if ((v139 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v114 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v115 = *(void *)v21;
          long long v147 = v152;
          unsigned int v116 = (uint64_t *)v154;
          long long v157 = v152;
          unsigned int v117 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
          unsigned int v118 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v118) {
            unsigned int v118 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v157 = 0;
          sub_216EC7E6C((uint64_t)a6, v115, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147, v116, v117, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v118 + 448), (uint64_t *)&v157);
          if ((v157 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v111 = v139;
          if (*((unsigned char *)a6 + 40)) {
            goto LABEL_146;
          }
        }
      }
      if ((v111 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151);
      if (v152 == v153) {
        goto LABEL_178;
      }
    }
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      long long v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v122 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v122, 1);
      *(void *)&long long v157 = 0;
      v123 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v123) {
        v123 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v147 = 0;
      sub_216EC8078((uint64_t *)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v157, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v123 + 208), (uint64_t *)&v147, a5, (uint64_t)&v151, (uint64_t)a6);
    }
    else
    {
      char v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        char v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      int v126 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v126, 1);
      *(void *)&long long v157 = 0;
      unsigned int v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v127) {
        unsigned int v127 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v147 = 0;
      sub_216EC8078((uint64_t *)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v157, v127, (uint64_t *)&v147, a5, (uint64_t)&v151, (uint64_t)a6);
    }
    if ((v147 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v111 = v157;
LABEL_146:
    if ((v111 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_178;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16))
    || (v21[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16)))
  {
LABEL_124:
    BOOL v119 = a6;
    int v120 = 0;
    goto LABEL_177;
  }
  int v124 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v124, 1);
  if ((void)v152 == (void)v153)
  {
    int v125 = 1;
    if (*((void *)&v152 + 1) == *((void *)&v153 + 1))
    {
LABEL_139:
      BOOL v119 = a6;
      int v120 = v125;
      goto LABEL_177;
    }
  }
  int v125 = 1;
  while (1)
  {
    LODWORD(v147) = 1;
    unsigned int v128 = (void *)sub_216AA5ECC((uint64_t *)v154);
    long long v157 = v152;
    unsigned int v129 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
    BOOL v130 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v130) {
      BOOL v130 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v157 + 1) = &v147;
    *(void *)&long long v158 = &stru_26C758108;
    WORD4(v158) = 0;
    *(void *)&long long v157 = &unk_26C76A080;
    int v131 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v128, v129, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v130 + 312), (uint64_t (***)(void, uint64_t))&v157);
    int v132 = BYTE8(v158) ? 0 : v131;
    if (v132 == 1 && v147 != 1) {
      break;
    }
LABEL_174:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151);
    if (v152 == v153) {
      goto LABEL_139;
    }
  }
  if (!v147) {
    goto LABEL_124;
  }
  long long v157 = v152;
  if ((void)v152 && *((void *)&v152 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157))
    {
      *(void *)&long long v157 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
      *((void *)&v157 + 1) = v133;
      if (!(void)v157 || v133 == -1) {
        goto LABEL_176;
      }
    }
    int v125 = 2;
    goto LABEL_174;
  }
LABEL_176:
  BOOL v119 = a6;
  int v120 = 2;
LABEL_177:
  sub_216E1591C(v119, v120);
LABEL_178:
  if (*((unsigned char *)a6 + 40))
  {
    unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_181;
  }
LABEL_183:
  BOOL v136 = 0;
LABEL_185:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138);
  return v136;
}

void sub_216DDC88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(v9 - 120);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216DDCA50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  v18[1] = a6;
  double v18[2] = &stru_26C755250;
  __int16 v19 = 0;
  v18[0] = &unk_26C75DD90;
  sub_216E0E6E8((uint64_t)v13, (uint64_t)v18, a2);
  BOOL v11 = sub_216DDCBA8(a1, a2, a3, a4, a5, v13);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v11;
}

void sub_216DDCB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216DDCBA8(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(void, uint64_t))
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138);
  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v151);
        uint64_t v35 = *((void *)&v151 + 1);
        if (!*((void *)&v151 + 1) || (*(unsigned char *)(*((void *)&v151 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v151 + 1), v34);
        }
        long long v36 = *(atomic_ullong **)(v35 + 24);
        uint64_t explicit = atomic_load_explicit(v36 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v36);
        }
        uint64_t v38 = sub_216D563F8(&v151);
        *(void *)&long long v157 = 0;
        unsigned int v39 = sub_216E156AC(explicit, v38, a3, &v157, *a6);
        *((unsigned char *)a6 + 40) = v39;
        if ((v157 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v39 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v39)
        {
          *(void *)&long long v157 = 0;
          sub_216EC8E78((uint64_t)&v151, a3, (uint64_t *)&v157, a5, (uint64_t)a6);
          if ((v157 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v152) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v152 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v152 + 1);
        sub_21697C414(&v152);
        char v40 = (atomic_ullong *)*((void *)&v151 + 1);
        if (!*((void *)&v151 + 1))
        {
LABEL_154:
          if (*((unsigned char *)a6 + 40))
          {
            unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v26) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_181;
          }
          goto LABEL_183;
        }
LABEL_153:
        sub_216D16E0C(v40);
        goto LABEL_154;
      }
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        int v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v139);
        unsigned int v42 = v140;
        if (!v140 || (*((unsigned char *)v140 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v140, v41);
        }
        unsigned int v43 = (atomic_ullong *)*((void *)v42 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v43 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v43);
        }
        uint64_t v45 = sub_216D563F8(&v139);
        BOOL v46 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v46) {
          BOOL v46 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v151 = 0;
        unsigned int v47 = sub_216E156AC(PrimDefinition, v45, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v46 + 464), &v151, *a6);
        *((unsigned char *)a6 + 40) = v47;
        if ((v151 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v47 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v47)
        {
          char v48 = sub_216D563F8(&v139);
          sub_216D16CFC((uint64_t)&v147, (uint64_t *)&v140, &v141);
          char v50 = (uint64_t *)sub_216D240F8((uint64_t)&v147, v49);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v50, 6u, (uint64_t *)&v157);
          long long v155 = v157;
          long long v156 = v158;
          long long v151 = v158;
          long long v152 = v158;
          long long v153 = v157;
          long long v154 = v157;
          if ((v150 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
          sub_21697C414(&v148);
          if (*((void *)&v147 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v147 + 1));
          }
          if (v152 != v154)
          {
            while (1)
            {
              int v53 = sub_216DFFC94(&v151, v51, v52);
              uint64_t v54 = v53[3] - 1;
              *(void *)&long long v157 = v53[2];
              *((void *)&v157 + 1) = v54;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) & 1) == 0)
              {
                unsigned int v57 = sub_216DFFC94(&v151, v55, v56);
                uint64_t v58 = v57[3] - 1;
                *(void *)&long long v147 = v57[2];
                *((void *)&v147 + 1) = v58;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v151);
              if (v152 == v154) {
                goto LABEL_150;
              }
            }
            uint64_t v61 = sub_216DFFC94(&v151, v59, v60);
            uint64_t v62 = v61[3] - 1;
            *(void *)&long long v157 = v61[2];
            *((void *)&v157 + 1) = v62;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v48, &v145);
            uint64_t v66 = sub_216DFFC94(&v151, v64, v65);
            uint64_t v67 = v66[3] - 1;
            *(void *)&long long v147 = v66[2];
            *((void *)&v147 + 1) = v67;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147);
            v69 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v69);
            *(void *)&long long v157 = Layers[1];
            *((void *)&v157 + 1) = v157;
            *(void *)&long long v158 = *Layers;
            *((void *)&v158 + 1) = v158;
            while (1)
            {
              if (*((void *)&v157 + 1) == *((void *)&v158 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
                sub_21697C414(&v145);
                goto LABEL_81;
              }
              *(void *)&long long v147 = sub_216E15794(&v151, v71, v72);
              *((void *)&v147 + 1) = v73;
              uint64_t v75 = (uint64_t *)sub_216BEF334((uint64_t)&v157, v73, v74);
              uint64_t v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v76) {
                uint64_t v76 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v144 = 0;
              sub_216ECA658((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147, v75, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v145, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v76 + 464), &v144);
              if ((v144 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (*((unsigned char *)a6 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v157);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
            sub_21697C414(&v145);
          }
        }
LABEL_150:
        if ((v143 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_152:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v142);
        sub_21697C414(&v141);
        char v40 = (atomic_ullong *)v140;
        if (!v140) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v139);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v139, (uint64_t)&v151);
      uint64_t v18 = *((void *)&v151 + 1);
      if ((v151 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18)
      {
        LOBYTE(v151) = 0;
        sub_216E158B4((uint64_t)*a6, &v151);
        *((unsigned char *)a6 + 40) = 1;
      }
      else
      {
        v77 = sub_216D563F8(&v139);
        sub_216D16CFC((uint64_t)&v147, (uint64_t *)&v140, &v141);
        v79 = (uint64_t *)sub_216D240F8((uint64_t)&v147, v78);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v79, 6u, (uint64_t *)&v157);
        long long v155 = v157;
        long long v156 = v158;
        long long v151 = v158;
        long long v152 = v158;
        long long v153 = v157;
        long long v154 = v157;
        if ((v150 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
        sub_21697C414(&v148);
        if (*((void *)&v147 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v147 + 1));
        }
        if (v152 != v154)
        {
          while (1)
          {
            unsigned int v82 = sub_216DFFC94(&v151, v80, v81);
            uint64_t v83 = v82[3] - 1;
            *(void *)&long long v157 = v82[2];
            *((void *)&v157 + 1) = v83;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) & 1) == 0)
            {
              uint64_t v86 = sub_216DFFC94(&v151, v84, v85);
              uint64_t v87 = v86[3] - 1;
              *(void *)&long long v147 = v86[2];
              *((void *)&v147 + 1) = v87;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v151);
            if (v152 == v154) {
              goto LABEL_129;
            }
          }
          unint64_t v90 = sub_216DFFC94(&v151, v88, v89);
          uint64_t v91 = v90[3] - 1;
          *(void *)&long long v157 = v90[2];
          *((void *)&v157 + 1) = v91;
          v92 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v92, v77, &v145);
          int v95 = sub_216DFFC94(&v151, v93, v94);
          uint64_t v96 = v95[3] - 1;
          *(void *)&long long v147 = v95[2];
          *((void *)&v147 + 1) = v96;
          unsigned int v97 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147);
          unsigned int v98 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v97);
          BOOL v99 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v98);
          *(void *)&long long v157 = v99[1];
          *((void *)&v157 + 1) = v157;
          *(void *)&long long v158 = *v99;
          *((void *)&v158 + 1) = v158;
          while (1)
          {
            if (*((void *)&v157 + 1) == *((void *)&v158 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
              sub_21697C414(&v145);
              goto LABEL_99;
            }
            *(void *)&long long v147 = sub_216E15794(&v151, v100, v101);
            *((void *)&v147 + 1) = v102;
            v104 = (uint64_t *)sub_216BEF334((uint64_t)&v157, v102, v103);
            int v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v105) {
              int v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v144 = 0;
            sub_216ECA658((uint64_t)a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147, v104, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v145, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v105 + 64), &v144);
            if ((v144 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((unsigned char *)a6 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v157);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
          sub_21697C414(&v145);
        }
      }
LABEL_129:
      if ((v143 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_152;
    }
LABEL_33:
    if (sub_216EC8E78(a2, a3, a4, a5, (uint64_t)a6))
    {
      unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_181;
    }
    goto LABEL_183;
  }
  if (v14 != 1) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19 || (uint64_t v20 = *(void *)(v19 + 56), (v20 & 0x800) != 0))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
    uint64_t v20 = *(void *)(v19 + 56);
  }
  uint64_t v21 = *(unsigned char **)(a2 + 8);
  if ((v20 & 0x4000) != 0)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v151 = v29;
    *((void *)&v151 + 1) = v30;
    if (*(void *)(a1 + 40)
      && (uint64_t v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151),
          long long v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v31),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v32) == *(void *)(a1 + 40)))
    {
      int v121 = sub_216ECA658((uint64_t)a6, *(void *)v21, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t *)(a1 + 40), v27, a3, a4);
      if (*((unsigned char *)a6 + 40))
      {
LABEL_126:
        unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_181:
        unint64_t v134 = v138;
        unint64_t v135 = atomic_load((unint64_t *)(v26 + 144));
        BOOL v136 = v134 >= v135
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138, (atomic_ullong *)v26);
        goto LABEL_185;
      }
      int v33 = v121;
    }
    else
    {
      int v33 = 0;
    }
    if ((v33 | sub_216ECA658((uint64_t)a6, *(void *)v21, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t *)(a1 + 32), v27, a3, a4)) != 1)goto LABEL_183; {
    goto LABEL_126;
    }
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned int v106 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v106, 1);
    if (v152 == v153) {
      goto LABEL_178;
    }
    while (1)
    {
      uint64_t v139 = 0;
      unsigned int v107 = (void *)sub_216AA5ECC((uint64_t *)v154);
      long long v157 = v152;
      unsigned int v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
      BOOL v109 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v109) {
        BOOL v109 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v157 + 1) = &v139;
      *(void *)&long long v158 = &stru_26C74C2C0;
      WORD4(v158) = 0;
      *(void *)&long long v157 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v107, v108, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v109 + 448), (uint64_t (***)(void, uint64_t))&v157);
      uint64_t v111 = v139;
      BOOL v112 = HasField && BYTE8(v158) == 0;
      if (v112 && v139 != 0)
      {
        v114 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v114) {
          v114 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v111 = v139;
        if ((v139 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v114 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v115 = *(void *)v21;
          long long v147 = v152;
          unsigned int v116 = (uint64_t *)v154;
          long long v157 = v152;
          unsigned int v117 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
          unsigned int v118 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v118) {
            unsigned int v118 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v157 = 0;
          sub_216ECA658((uint64_t)a6, v115, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v147, v116, v117, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v118 + 448), (uint64_t *)&v157);
          if ((v157 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v111 = v139;
          if (*((unsigned char *)a6 + 40)) {
            goto LABEL_146;
          }
        }
      }
      if ((v111 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151);
      if (v152 == v153) {
        goto LABEL_178;
      }
    }
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      long long v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v122 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v122, 1);
      *(void *)&long long v157 = 0;
      v123 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v123) {
        v123 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v147 = 0;
      sub_216ECA810((uint64_t *)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v157, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v123 + 208), (uint64_t *)&v147, a5, (uint64_t)&v151, (uint64_t)a6);
    }
    else
    {
      char v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        char v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      int v126 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v126, 1);
      *(void *)&long long v157 = 0;
      unsigned int v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v127) {
        unsigned int v127 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v147 = 0;
      sub_216ECA810((uint64_t *)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v157, v127, (uint64_t *)&v147, a5, (uint64_t)&v151, (uint64_t)a6);
    }
    if ((v147 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v111 = v157;
LABEL_146:
    if ((v111 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_178;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16))
    || (v21[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16)))
  {
LABEL_124:
    BOOL v119 = a6;
    int v120 = 0;
    goto LABEL_177;
  }
  int v124 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v124, 1);
  if ((void)v152 == (void)v153)
  {
    int v125 = 1;
    if (*((void *)&v152 + 1) == *((void *)&v153 + 1))
    {
LABEL_139:
      BOOL v119 = a6;
      int v120 = v125;
      goto LABEL_177;
    }
  }
  int v125 = 1;
  while (1)
  {
    LODWORD(v147) = 1;
    unsigned int v128 = (void *)sub_216AA5ECC((uint64_t *)v154);
    long long v157 = v152;
    unsigned int v129 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
    BOOL v130 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v130) {
      BOOL v130 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v157 + 1) = &v147;
    *(void *)&long long v158 = &stru_26C758108;
    WORD4(v158) = 0;
    *(void *)&long long v157 = &unk_26C76A080;
    int v131 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v128, v129, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v130 + 312), (uint64_t (***)(void, uint64_t))&v157);
    int v132 = BYTE8(v158) ? 0 : v131;
    if (v132 == 1 && v147 != 1) {
      break;
    }
LABEL_174:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151);
    if (v152 == v153) {
      goto LABEL_139;
    }
  }
  if (!v147) {
    goto LABEL_124;
  }
  long long v157 = v152;
  if ((void)v152 && *((void *)&v152 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157))
    {
      *(void *)&long long v157 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
      *((void *)&v157 + 1) = v133;
      if (!(void)v157 || v133 == -1) {
        goto LABEL_176;
      }
    }
    int v125 = 2;
    goto LABEL_174;
  }
LABEL_176:
  BOOL v119 = a6;
  int v120 = 2;
LABEL_177:
  sub_216E1591C(v119, v120);
LABEL_178:
  if (*((unsigned char *)a6 + 40))
  {
    unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_181;
  }
LABEL_183:
  BOOL v136 = 0;
LABEL_185:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138);
  return v136;
}

void sub_216DDDA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(v9 - 120);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216DDDC04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  v18[1] = a6;
  double v18[2] = &stru_26C7557E0;
  __int16 v19 = 0;
  v18[0] = &unk_26C75DC78;
  sub_216E0E6E8((uint64_t)v13, (uint64_t)v18, a2);
  BOOL v11 = sub_216DDDD5C(a1, a2, a3, a4, a5, v13);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v11;
}

void sub_216DDDD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216DDDD5C(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(void, uint64_t))
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v137);
  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v150);
        uint64_t v35 = *((void *)&v150 + 1);
        if (!*((void *)&v150 + 1) || (*(unsigned char *)(*((void *)&v150 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v150 + 1), v34);
        }
        long long v36 = *(atomic_ullong **)(v35 + 24);
        uint64_t explicit = atomic_load_explicit(v36 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v36);
        }
        uint64_t v38 = sub_216D563F8(&v150);
        *(void *)&long long v156 = 0;
        unsigned int v39 = sub_216E156AC(explicit, v38, a3, &v156, *a6);
        *((unsigned char *)a6 + 40) = v39;
        if ((v156 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v39 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v39)
        {
          *(void *)&long long v156 = 0;
          sub_216ECB610((uint64_t)&v150, a3, (uint64_t *)&v156, a5, (uint64_t)a6);
          if ((v156 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v151) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v151 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v151 + 1);
        sub_21697C414(&v151);
        char v40 = (atomic_ullong *)*((void *)&v150 + 1);
        if (!*((void *)&v150 + 1))
        {
LABEL_154:
          if (*((unsigned char *)a6 + 40))
          {
            unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v26) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_181;
          }
          goto LABEL_183;
        }
LABEL_153:
        sub_216D16E0C(v40);
        goto LABEL_154;
      }
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        int v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v138);
        unsigned int v42 = v139;
        if (!v139 || (*((unsigned char *)v139 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v139, v41);
        }
        unsigned int v43 = (atomic_ullong *)*((void *)v42 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v43 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v43);
        }
        uint64_t v45 = sub_216D563F8(&v138);
        BOOL v46 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v46) {
          BOOL v46 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v150 = 0;
        unsigned int v47 = sub_216E156AC(PrimDefinition, v45, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v46 + 464), &v150, *a6);
        *((unsigned char *)a6 + 40) = v47;
        if ((v150 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v47 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v47)
        {
          char v48 = sub_216D563F8(&v138);
          sub_216D16CFC((uint64_t)&v146, (uint64_t *)&v139, &v140);
          char v50 = (uint64_t *)sub_216D240F8((uint64_t)&v146, v49);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v50, 6u, (uint64_t *)&v156);
          long long v154 = v156;
          long long v155 = v157;
          long long v150 = v157;
          long long v151 = v157;
          long long v152 = v156;
          long long v153 = v156;
          if ((v149 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
          sub_21697C414(&v147);
          if (*((void *)&v146 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v146 + 1));
          }
          if (v151 != v153)
          {
            while (1)
            {
              int v53 = sub_216DFFC94(&v150, v51, v52);
              uint64_t v54 = v53[3] - 1;
              *(void *)&long long v156 = v53[2];
              *((void *)&v156 + 1) = v54;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156) & 1) == 0)
              {
                unsigned int v57 = sub_216DFFC94(&v150, v55, v56);
                uint64_t v58 = v57[3] - 1;
                *(void *)&long long v146 = v57[2];
                *((void *)&v146 + 1) = v58;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v150);
              if (v151 == v153) {
                goto LABEL_150;
              }
            }
            uint64_t v61 = sub_216DFFC94(&v150, v59, v60);
            uint64_t v62 = v61[3] - 1;
            *(void *)&long long v156 = v61[2];
            *((void *)&v156 + 1) = v62;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v48, &v144);
            uint64_t v66 = sub_216DFFC94(&v150, v64, v65);
            uint64_t v67 = v66[3] - 1;
            *(void *)&long long v146 = v66[2];
            *((void *)&v146 + 1) = v67;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146);
            v69 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v69);
            *(void *)&long long v156 = Layers[1];
            *((void *)&v156 + 1) = v156;
            *(void *)&long long v157 = *Layers;
            *((void *)&v157 + 1) = v157;
            while (1)
            {
              if (*((void *)&v156 + 1) == *((void *)&v157 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
                sub_21697C414(&v144);
                goto LABEL_81;
              }
              *(void *)&long long v146 = sub_216E15794(&v150, v71, v72);
              *((void *)&v146 + 1) = v73;
              uint64_t v75 = (uint64_t *)sub_216BEF334((uint64_t)&v156, v73, v74);
              uint64_t v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v76) {
                uint64_t v76 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v143 = 0;
              sub_216ECCDF0((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146, v75, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v144, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v76 + 464), &v143);
              if ((v143 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (*((unsigned char *)a6 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v156);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
            sub_21697C414(&v144);
          }
        }
LABEL_150:
        if ((v142 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_152:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v141);
        sub_21697C414(&v140);
        char v40 = (atomic_ullong *)v139;
        if (!v139) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v138);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v138, (uint64_t)&v150);
      uint64_t v18 = *((void *)&v150 + 1);
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18)
      {
        LOBYTE(v150) = 0;
        sub_216E158B4((uint64_t)*a6, &v150);
        *((unsigned char *)a6 + 40) = 1;
      }
      else
      {
        v77 = sub_216D563F8(&v138);
        sub_216D16CFC((uint64_t)&v146, (uint64_t *)&v139, &v140);
        v79 = (uint64_t *)sub_216D240F8((uint64_t)&v146, v78);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v79, 6u, (uint64_t *)&v156);
        long long v154 = v156;
        long long v155 = v157;
        long long v150 = v157;
        long long v151 = v157;
        long long v152 = v156;
        long long v153 = v156;
        if ((v149 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
        sub_21697C414(&v147);
        if (*((void *)&v146 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v146 + 1));
        }
        if (v151 != v153)
        {
          while (1)
          {
            unsigned int v82 = sub_216DFFC94(&v150, v80, v81);
            uint64_t v83 = v82[3] - 1;
            *(void *)&long long v156 = v82[2];
            *((void *)&v156 + 1) = v83;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156) & 1) == 0)
            {
              uint64_t v86 = sub_216DFFC94(&v150, v84, v85);
              uint64_t v87 = v86[3] - 1;
              *(void *)&long long v146 = v86[2];
              *((void *)&v146 + 1) = v87;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v150);
            if (v151 == v153) {
              goto LABEL_129;
            }
          }
          unint64_t v90 = sub_216DFFC94(&v150, v88, v89);
          uint64_t v91 = v90[3] - 1;
          *(void *)&long long v156 = v90[2];
          *((void *)&v156 + 1) = v91;
          v92 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v92, v77, &v144);
          int v95 = sub_216DFFC94(&v150, v93, v94);
          uint64_t v96 = v95[3] - 1;
          *(void *)&long long v146 = v95[2];
          *((void *)&v146 + 1) = v96;
          unsigned int v97 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146);
          unsigned int v98 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v97);
          BOOL v99 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v98);
          *(void *)&long long v156 = v99[1];
          *((void *)&v156 + 1) = v156;
          *(void *)&long long v157 = *v99;
          *((void *)&v157 + 1) = v157;
          while (1)
          {
            if (*((void *)&v156 + 1) == *((void *)&v157 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
              sub_21697C414(&v144);
              goto LABEL_99;
            }
            *(void *)&long long v146 = sub_216E15794(&v150, v100, v101);
            *((void *)&v146 + 1) = v102;
            v104 = (uint64_t *)sub_216BEF334((uint64_t)&v156, v102, v103);
            int v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v105) {
              int v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v143 = 0;
            sub_216ECCDF0((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146, v104, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v144, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v105 + 64), &v143);
            if ((v143 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((unsigned char *)a6 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v156);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
          sub_21697C414(&v144);
        }
      }
LABEL_129:
      if ((v142 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_152;
    }
LABEL_33:
    if (sub_216ECB610(a2, a3, a4, a5, (uint64_t)a6))
    {
      unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_181;
    }
    goto LABEL_183;
  }
  if (v14 != 1) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19 || (uint64_t v20 = *(void *)(v19 + 56), (v20 & 0x800) != 0))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
    uint64_t v20 = *(void *)(v19 + 56);
  }
  uint64_t v21 = *(unsigned char **)(a2 + 8);
  if ((v20 & 0x4000) != 0)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v150 = v29;
    *((void *)&v150 + 1) = v30;
    if (*(void *)(a1 + 40)
      && (uint64_t v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150),
          long long v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v31),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v32) == *(void *)(a1 + 40)))
    {
      int v120 = sub_216ECCDF0((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150, (uint64_t *)(a1 + 40), v27, a3, a4);
      if (*((unsigned char *)a6 + 40))
      {
LABEL_126:
        unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_181:
        unint64_t v133 = v137;
        unint64_t v134 = atomic_load((unint64_t *)(v26 + 144));
        BOOL v135 = v133 >= v134
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v137, (atomic_ullong *)v26);
        goto LABEL_185;
      }
      int v33 = v120;
    }
    else
    {
      int v33 = 0;
    }
    if ((v33 | sub_216ECCDF0((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150, (uint64_t *)(a1 + 32), v27, a3, a4)) != 1)goto LABEL_183; {
    goto LABEL_126;
    }
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned int v106 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v106, 1);
    if (v151 == v152) {
      goto LABEL_178;
    }
    while (1)
    {
      uint64_t v138 = 0;
      unsigned int v107 = (void *)sub_216AA5ECC((uint64_t *)v153);
      long long v156 = v151;
      unsigned int v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
      BOOL v109 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v109) {
        BOOL v109 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v156 + 1) = &v138;
      *(void *)&long long v157 = &stru_26C74C2C0;
      WORD4(v157) = 0;
      *(void *)&long long v156 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v107, v108, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v109 + 448), (uint64_t (***)(void, uint64_t))&v156);
      uint64_t v111 = v138;
      BOOL v112 = HasField && BYTE8(v157) == 0;
      if (v112 && v138 != 0)
      {
        v114 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v114) {
          v114 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v111 = v138;
        if ((v138 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v114 & 0xFFFFFFFFFFFFFFF8))
        {
          long long v146 = v151;
          uint64_t v115 = (uint64_t *)v153;
          long long v156 = v151;
          unsigned int v116 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
          unsigned int v117 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v117) {
            unsigned int v117 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v156 = 0;
          sub_216ECCDF0((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146, v115, v116, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v117 + 448), (uint64_t *)&v156);
          if ((v156 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v111 = v138;
          if (*((unsigned char *)a6 + 40)) {
            goto LABEL_146;
          }
        }
      }
      if ((v111 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150);
      if (v151 == v152) {
        goto LABEL_178;
      }
    }
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      long long v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      int v121 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v121, 1);
      *(void *)&long long v156 = 0;
      uint64_t v122 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v122) {
        uint64_t v122 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v146 = 0;
      sub_216ECCE94((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v156, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v122 + 208), (uint64_t *)&v146, a5, (uint64_t)&v150, (uint64_t)a6);
    }
    else
    {
      char v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        char v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      int v125 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v125, 1);
      *(void *)&long long v156 = 0;
      int v126 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v126) {
        int v126 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v146 = 0;
      sub_216ECCE94((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v156, v126, (uint64_t *)&v146, a5, (uint64_t)&v150, (uint64_t)a6);
    }
    if ((v146 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v111 = v156;
LABEL_146:
    if ((v111 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_178;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16))
    || (v21[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16)))
  {
LABEL_124:
    unsigned int v118 = a6;
    int v119 = 0;
    goto LABEL_177;
  }
  v123 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v123, 1);
  if ((void)v151 == (void)v152)
  {
    int v124 = 1;
    if (*((void *)&v151 + 1) == *((void *)&v152 + 1))
    {
LABEL_139:
      unsigned int v118 = a6;
      int v119 = v124;
      goto LABEL_177;
    }
  }
  int v124 = 1;
  while (1)
  {
    LODWORD(v146) = 1;
    unsigned int v127 = (void *)sub_216AA5ECC((uint64_t *)v153);
    long long v156 = v151;
    unsigned int v128 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
    unsigned int v129 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v129) {
      unsigned int v129 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v156 + 1) = &v146;
    *(void *)&long long v157 = &stru_26C758108;
    WORD4(v157) = 0;
    *(void *)&long long v156 = &unk_26C76A080;
    int v130 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v127, v128, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v129 + 312), (uint64_t (***)(void, uint64_t))&v156);
    int v131 = BYTE8(v157) ? 0 : v130;
    if (v131 == 1 && v146 != 1) {
      break;
    }
LABEL_174:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150);
    if (v151 == v152) {
      goto LABEL_139;
    }
  }
  if (!v146) {
    goto LABEL_124;
  }
  long long v156 = v151;
  if ((void)v151 && *((void *)&v151 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156))
    {
      *(void *)&long long v156 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
      *((void *)&v156 + 1) = v132;
      if (!(void)v156 || v132 == -1) {
        goto LABEL_176;
      }
    }
    int v124 = 2;
    goto LABEL_174;
  }
LABEL_176:
  unsigned int v118 = a6;
  int v119 = 2;
LABEL_177:
  sub_216E1591C(v118, v119);
LABEL_178:
  if (*((unsigned char *)a6 + 40))
  {
    unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_181;
  }
LABEL_183:
  BOOL v135 = 0;
LABEL_185:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v137);
  return v135;
}

void sub_216DDEBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DDED9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  long long v6 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    uint64_t v9 = a5;
    uint64_t v10 = &stru_26C7557E0;
  }
  else
  {
    double v11 = *a5;
    double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v6);
    uint64_t v9 = v7;
    double v11 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, &v11);
    uint64_t v9 = &v11;
    uint64_t v10 = &stru_26C7557E0;
  }
  double Inverse = COERCE_DOUBLE(&unk_26C76A8D0);
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return (uint64_t)this + 48;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  v18[1] = a6;
  double v18[2] = &stru_26C7558A8;
  __int16 v19 = 0;
  v18[0] = &unk_26C75DCB0;
  sub_216E0E6E8((uint64_t)v13, (uint64_t)v18, a2);
  BOOL v11 = sub_216DDEFEC(a1, a2, a3, a4, a5, v13);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v11;
}

void sub_216DDEFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216DDEFEC(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t (****a6)(void, uint64_t))
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v137);
  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v150);
        uint64_t v35 = *((void *)&v150 + 1);
        if (!*((void *)&v150 + 1) || (*(unsigned char *)(*((void *)&v150 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v150 + 1), v34);
        }
        long long v36 = *(atomic_ullong **)(v35 + 24);
        uint64_t explicit = atomic_load_explicit(v36 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v36);
        }
        uint64_t v38 = sub_216D563F8(&v150);
        *(void *)&long long v156 = 0;
        unsigned int v39 = sub_216E156AC(explicit, v38, a3, &v156, *a6);
        *((unsigned char *)a6 + 40) = v39;
        if ((v156 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v39 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v39)
        {
          *(void *)&long long v156 = 0;
          sub_216ECDC90((uint64_t)&v150, a3, (uint64_t *)&v156, a5, (uint64_t)a6);
          if ((v156 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v151) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v151 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v151 + 1);
        sub_21697C414(&v151);
        char v40 = (atomic_ullong *)*((void *)&v150 + 1);
        if (!*((void *)&v150 + 1))
        {
LABEL_154:
          if (*((unsigned char *)a6 + 40))
          {
            unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v26) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_181;
          }
          goto LABEL_183;
        }
LABEL_153:
        sub_216D16E0C(v40);
        goto LABEL_154;
      }
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        int v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v138);
        unsigned int v42 = v139;
        if (!v139 || (*((unsigned char *)v139 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v139, v41);
        }
        unsigned int v43 = (atomic_ullong *)*((void *)v42 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v43 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v43);
        }
        uint64_t v45 = sub_216D563F8(&v138);
        BOOL v46 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v46) {
          BOOL v46 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v150 = 0;
        unsigned int v47 = sub_216E156AC(PrimDefinition, v45, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v46 + 464), &v150, *a6);
        *((unsigned char *)a6 + 40) = v47;
        if ((v150 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v47 = *((unsigned __int8 *)a6 + 40);
        }
        if (!v47)
        {
          char v48 = sub_216D563F8(&v138);
          sub_216D16CFC((uint64_t)&v146, (uint64_t *)&v139, &v140);
          char v50 = (uint64_t *)sub_216D240F8((uint64_t)&v146, v49);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v50, 6u, (uint64_t *)&v156);
          long long v154 = v156;
          long long v155 = v157;
          long long v150 = v157;
          long long v151 = v157;
          long long v152 = v156;
          long long v153 = v156;
          if ((v149 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
          sub_21697C414(&v147);
          if (*((void *)&v146 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v146 + 1));
          }
          if (v151 != v153)
          {
            while (1)
            {
              int v53 = sub_216DFFC94(&v150, v51, v52);
              uint64_t v54 = v53[3] - 1;
              *(void *)&long long v156 = v53[2];
              *((void *)&v156 + 1) = v54;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156) & 1) == 0)
              {
                unsigned int v57 = sub_216DFFC94(&v150, v55, v56);
                uint64_t v58 = v57[3] - 1;
                *(void *)&long long v146 = v57[2];
                *((void *)&v146 + 1) = v58;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v150);
              if (v151 == v153) {
                goto LABEL_150;
              }
            }
            uint64_t v61 = sub_216DFFC94(&v150, v59, v60);
            uint64_t v62 = v61[3] - 1;
            *(void *)&long long v156 = v61[2];
            *((void *)&v156 + 1) = v62;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v48, &v144);
            uint64_t v66 = sub_216DFFC94(&v150, v64, v65);
            uint64_t v67 = v66[3] - 1;
            *(void *)&long long v146 = v66[2];
            *((void *)&v146 + 1) = v67;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146);
            v69 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v69);
            *(void *)&long long v156 = Layers[1];
            *((void *)&v156 + 1) = v156;
            *(void *)&long long v157 = *Layers;
            *((void *)&v157 + 1) = v157;
            while (1)
            {
              if (*((void *)&v156 + 1) == *((void *)&v157 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
                sub_21697C414(&v144);
                goto LABEL_81;
              }
              *(void *)&long long v146 = sub_216E15794(&v150, v71, v72);
              *((void *)&v146 + 1) = v73;
              uint64_t v75 = (uint64_t *)sub_216BEF334((uint64_t)&v156, v73, v74);
              uint64_t v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v76) {
                uint64_t v76 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v143 = 0;
              sub_216ECF470((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146, v75, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v144, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v76 + 464), &v143);
              if ((v143 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (*((unsigned char *)a6 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v156);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
            sub_21697C414(&v144);
          }
        }
LABEL_150:
        if ((v142 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_152:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v141);
        sub_21697C414(&v140);
        char v40 = (atomic_ullong *)v139;
        if (!v139) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v138);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v138, (uint64_t)&v150);
      uint64_t v18 = *((void *)&v150 + 1);
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18)
      {
        LOBYTE(v150) = 0;
        sub_216E158B4((uint64_t)*a6, &v150);
        *((unsigned char *)a6 + 40) = 1;
      }
      else
      {
        v77 = sub_216D563F8(&v138);
        sub_216D16CFC((uint64_t)&v146, (uint64_t *)&v139, &v140);
        v79 = (uint64_t *)sub_216D240F8((uint64_t)&v146, v78);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v79, 6u, (uint64_t *)&v156);
        long long v154 = v156;
        long long v155 = v157;
        long long v150 = v157;
        long long v151 = v157;
        long long v152 = v156;
        long long v153 = v156;
        if ((v149 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
        sub_21697C414(&v147);
        if (*((void *)&v146 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v146 + 1));
        }
        if (v151 != v153)
        {
          while (1)
          {
            unsigned int v82 = sub_216DFFC94(&v150, v80, v81);
            uint64_t v83 = v82[3] - 1;
            *(void *)&long long v156 = v82[2];
            *((void *)&v156 + 1) = v83;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156) & 1) == 0)
            {
              uint64_t v86 = sub_216DFFC94(&v150, v84, v85);
              uint64_t v87 = v86[3] - 1;
              *(void *)&long long v146 = v86[2];
              *((void *)&v146 + 1) = v87;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v150);
            if (v151 == v153) {
              goto LABEL_129;
            }
          }
          unint64_t v90 = sub_216DFFC94(&v150, v88, v89);
          uint64_t v91 = v90[3] - 1;
          *(void *)&long long v156 = v90[2];
          *((void *)&v156 + 1) = v91;
          v92 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v92, v77, &v144);
          int v95 = sub_216DFFC94(&v150, v93, v94);
          uint64_t v96 = v95[3] - 1;
          *(void *)&long long v146 = v95[2];
          *((void *)&v146 + 1) = v96;
          unsigned int v97 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146);
          unsigned int v98 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v97);
          BOOL v99 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v98);
          *(void *)&long long v156 = v99[1];
          *((void *)&v156 + 1) = v156;
          *(void *)&long long v157 = *v99;
          *((void *)&v157 + 1) = v157;
          while (1)
          {
            if (*((void *)&v156 + 1) == *((void *)&v157 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
              sub_21697C414(&v144);
              goto LABEL_99;
            }
            *(void *)&long long v146 = sub_216E15794(&v150, v100, v101);
            *((void *)&v146 + 1) = v102;
            v104 = (uint64_t *)sub_216BEF334((uint64_t)&v156, v102, v103);
            int v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v105) {
              int v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v143 = 0;
            sub_216ECF470((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146, v104, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v144, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v105 + 64), &v143);
            if ((v143 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((unsigned char *)a6 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v156);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
          sub_21697C414(&v144);
        }
      }
LABEL_129:
      if ((v142 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_152;
    }
LABEL_33:
    if (sub_216ECDC90(a2, a3, a4, a5, (uint64_t)a6))
    {
      unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_181;
    }
    goto LABEL_183;
  }
  if (v14 != 1) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19 || (uint64_t v20 = *(void *)(v19 + 56), (v20 & 0x800) != 0))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
    uint64_t v20 = *(void *)(v19 + 56);
  }
  uint64_t v21 = *(unsigned char **)(a2 + 8);
  if ((v20 & 0x4000) != 0)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v150 = v29;
    *((void *)&v150 + 1) = v30;
    if (*(void *)(a1 + 40)
      && (uint64_t v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150),
          long long v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v31),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v32) == *(void *)(a1 + 40)))
    {
      int v120 = sub_216ECF470((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150, (uint64_t *)(a1 + 40), v27, a3, a4);
      if (*((unsigned char *)a6 + 40))
      {
LABEL_126:
        unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_181:
        unint64_t v133 = v137;
        unint64_t v134 = atomic_load((unint64_t *)(v26 + 144));
        BOOL v135 = v133 >= v134
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v137, (atomic_ullong *)v26);
        goto LABEL_185;
      }
      int v33 = v120;
    }
    else
    {
      int v33 = 0;
    }
    if ((v33 | sub_216ECF470((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150, (uint64_t *)(a1 + 32), v27, a3, a4)) != 1)goto LABEL_183; {
    goto LABEL_126;
    }
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    unsigned int v106 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v106, 1);
    if (v151 == v152) {
      goto LABEL_178;
    }
    while (1)
    {
      uint64_t v138 = 0;
      unsigned int v107 = (void *)sub_216AA5ECC((uint64_t *)v153);
      long long v156 = v151;
      unsigned int v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
      BOOL v109 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v109) {
        BOOL v109 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v156 + 1) = &v138;
      *(void *)&long long v157 = &stru_26C74C2C0;
      WORD4(v157) = 0;
      *(void *)&long long v156 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v107, v108, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v109 + 448), (uint64_t (***)(void, uint64_t))&v156);
      uint64_t v111 = v138;
      BOOL v112 = HasField && BYTE8(v157) == 0;
      if (v112 && v138 != 0)
      {
        v114 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v114) {
          v114 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v111 = v138;
        if ((v138 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v114 & 0xFFFFFFFFFFFFFFF8))
        {
          long long v146 = v151;
          uint64_t v115 = (uint64_t *)v153;
          long long v156 = v151;
          unsigned int v116 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
          unsigned int v117 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v117) {
            unsigned int v117 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v156 = 0;
          sub_216ECF470((uint64_t)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146, v115, v116, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v117 + 448), (uint64_t *)&v156);
          if ((v156 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v111 = v138;
          if (*((unsigned char *)a6 + 40)) {
            goto LABEL_146;
          }
        }
      }
      if ((v111 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150);
      if (v151 == v152) {
        goto LABEL_178;
      }
    }
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      long long v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      int v121 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v121, 1);
      *(void *)&long long v156 = 0;
      uint64_t v122 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v122) {
        uint64_t v122 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v146 = 0;
      sub_216ECF5BC((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v156, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v122 + 208), (uint64_t *)&v146, a5, (uint64_t)&v150, (uint64_t)a6);
    }
    else
    {
      char v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        char v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      int v125 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v125, 1);
      *(void *)&long long v156 = 0;
      int v126 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v126) {
        int v126 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v146 = 0;
      sub_216ECF5BC((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v156, v126, (uint64_t *)&v146, a5, (uint64_t)&v150, (uint64_t)a6);
    }
    if ((v146 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v111 = v156;
LABEL_146:
    if ((v111 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_178;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16))
    || (v21[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16)))
  {
LABEL_124:
    unsigned int v118 = a6;
    int v119 = 0;
    goto LABEL_177;
  }
  v123 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150, v123, 1);
  if ((void)v151 == (void)v152)
  {
    int v124 = 1;
    if (*((void *)&v151 + 1) == *((void *)&v152 + 1))
    {
LABEL_139:
      unsigned int v118 = a6;
      int v119 = v124;
      goto LABEL_177;
    }
  }
  int v124 = 1;
  while (1)
  {
    LODWORD(v146) = 1;
    unsigned int v127 = (void *)sub_216AA5ECC((uint64_t *)v153);
    long long v156 = v151;
    unsigned int v128 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
    unsigned int v129 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v129) {
      unsigned int v129 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v156 + 1) = &v146;
    *(void *)&long long v157 = &stru_26C758108;
    WORD4(v157) = 0;
    *(void *)&long long v156 = &unk_26C76A080;
    int v130 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v127, v128, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v129 + 312), (uint64_t (***)(void, uint64_t))&v156);
    int v131 = BYTE8(v157) ? 0 : v130;
    if (v131 == 1 && v146 != 1) {
      break;
    }
LABEL_174:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v150);
    if (v151 == v152) {
      goto LABEL_139;
    }
  }
  if (!v146) {
    goto LABEL_124;
  }
  long long v156 = v151;
  if ((void)v151 && *((void *)&v151 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156))
    {
      *(void *)&long long v156 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156);
      *((void *)&v156 + 1) = v132;
      if (!(void)v156 || v132 == -1) {
        goto LABEL_176;
      }
    }
    int v124 = 2;
    goto LABEL_174;
  }
LABEL_176:
  unsigned int v118 = a6;
  int v119 = 2;
LABEL_177:
  sub_216E1591C(v118, v119);
LABEL_178:
  if (*((unsigned char *)a6 + 40))
  {
    unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_181;
  }
LABEL_183:
  BOOL v135 = 0;
LABEL_185:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v137);
  return v135;
}

void sub_216DDFE68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DE002C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  long long v6 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    *((void *)&v20 + 1) = a5;
    *(void *)&long long v21 = &stru_26C7558A8;
    *(void *)&long long v20 = &unk_26C76A908;
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
  }
  long long v7 = a5[1];
  long long v20 = *a5;
  long long v21 = v7;
  uint64_t v8 = (double *)*((void *)a5 + 4);
  uint64_t v22 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 2);
    if (*((void *)&v21 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v21 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v6);
  uint64_t v18 = v10;
  sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20, v11, v12);
  uint64_t v13 = v22;
  sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20, v14, v15);
  int v16 = &v22[v20];
  while (v13 != v16)
  {
    *uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, v13);
    ++v13;
  }
  uint64_t v18 = &v20;
  uint64_t v19 = &stru_26C7558A8;
  double Inverse = COERCE_DOUBLE(&unk_26C76A908);
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void sub_216DE01FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  v18[1] = a6;
  double v18[2] = &stru_26C755268;
  __int16 v19 = 0;
  v18[0] = &unk_26C75DE38;
  sub_216E0E6E8((uint64_t)v13, (uint64_t)v18, a2);
  BOOL v11 = sub_216DE0318(a1, a2, a3, a4, a5, v13);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v11;
}

void sub_216DE0304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216DE0318(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t *a6)
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v135);
  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v148);
        uint64_t v35 = *((void *)&v148 + 1);
        if (!*((void *)&v148 + 1) || (*(unsigned char *)(*((void *)&v148 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v148 + 1), v34);
        }
        long long v36 = *(atomic_ullong **)(v35 + 24);
        uint64_t explicit = atomic_load_explicit(v36 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v36);
        }
        uint64_t v38 = sub_216D563F8(&v148);
        *(void *)&long long v154 = 0;
        sub_216ED1B98(a6, explicit, v38, a3, &v154);
        if ((v154 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!*((unsigned char *)a6 + 40))
        {
          *(void *)&long long v154 = 0;
          sub_216ED03B8((uint64_t)&v148, a3, (uint64_t *)&v154, a5, (uint64_t)a6);
          if ((v154 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v149) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v149 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v149 + 1);
        sub_21697C414(&v149);
        unsigned int v39 = (atomic_ullong *)*((void *)&v148 + 1);
        if (!*((void *)&v148 + 1))
        {
LABEL_154:
          if (*((unsigned char *)a6 + 40))
          {
            unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v26) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_181;
          }
          goto LABEL_183;
        }
LABEL_153:
        sub_216D16E0C(v39);
        goto LABEL_154;
      }
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        int v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v136);
        unsigned int v41 = v137;
        if (!v137 || (*((unsigned char *)v137 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v137, v40);
        }
        unsigned int v42 = (atomic_ullong *)*((void *)v41 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v42 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v42);
        }
        BOOL v44 = sub_216D563F8(&v136);
        uint64_t v45 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v45) {
          uint64_t v45 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v148 = 0;
        sub_216ED1B98(a6, PrimDefinition, v44, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v45 + 464), &v148);
        if ((v148 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!*((unsigned char *)a6 + 40))
        {
          BOOL v46 = sub_216D563F8(&v136);
          sub_216D16CFC((uint64_t)&v144, (uint64_t *)&v137, &v138);
          char v48 = (uint64_t *)sub_216D240F8((uint64_t)&v144, v47);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v48, 6u, (uint64_t *)&v154);
          long long v152 = v154;
          long long v153 = v155;
          long long v148 = v155;
          long long v149 = v155;
          long long v150 = v154;
          long long v151 = v154;
          if ((v147 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
          sub_21697C414(&v145);
          if (*((void *)&v144 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v144 + 1));
          }
          if (v149 != v151)
          {
            while (1)
            {
              uint64_t v51 = sub_216DFFC94(&v148, v49, v50);
              uint64_t v52 = v51[3] - 1;
              *(void *)&long long v154 = v51[2];
              *((void *)&v154 + 1) = v52;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154) & 1) == 0)
              {
                uint64_t v55 = sub_216DFFC94(&v148, v53, v54);
                uint64_t v56 = v55[3] - 1;
                *(void *)&long long v144 = v55[2];
                *((void *)&v144 + 1) = v56;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v148);
              if (v149 == v151) {
                goto LABEL_150;
              }
            }
            uint64_t v59 = sub_216DFFC94(&v148, v57, v58);
            uint64_t v60 = v59[3] - 1;
            *(void *)&long long v154 = v59[2];
            *((void *)&v154 + 1) = v60;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v46, &v142);
            uint64_t v64 = sub_216DFFC94(&v148, v62, v63);
            uint64_t v65 = v64[3] - 1;
            *(void *)&long long v144 = v64[2];
            *((void *)&v144 + 1) = v65;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144);
            uint64_t v67 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v67);
            *(void *)&long long v154 = Layers[1];
            *((void *)&v154 + 1) = v154;
            *(void *)&long long v155 = *Layers;
            *((void *)&v155 + 1) = v155;
            while (1)
            {
              if (*((void *)&v154 + 1) == *((void *)&v155 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
                sub_21697C414(&v142);
                goto LABEL_81;
              }
              *(void *)&long long v144 = sub_216E15794(&v148, v69, v70);
              *((void *)&v144 + 1) = v71;
              uint64_t v73 = (uint64_t *)sub_216BEF334((uint64_t)&v154, v71, v72);
              BOOL v74 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v74) {
                BOOL v74 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v141 = 0;
              sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144, v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v142, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v74 + 464), &v141);
              if ((v141 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (*((unsigned char *)a6 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v154);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
            sub_21697C414(&v142);
          }
        }
LABEL_150:
        if ((v140 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_152:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v139);
        sub_21697C414(&v138);
        unsigned int v39 = (atomic_ullong *)v137;
        if (!v137) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v136);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v136, (uint64_t)&v148);
      uint64_t v18 = *((void *)&v148 + 1);
      if ((v148 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18)
      {
        LOBYTE(v148) = 0;
        sub_216E158B4(*a6, &v148);
        *((unsigned char *)a6 + 40) = 1;
      }
      else
      {
        uint64_t v75 = sub_216D563F8(&v136);
        sub_216D16CFC((uint64_t)&v144, (uint64_t *)&v137, &v138);
        v77 = (uint64_t *)sub_216D240F8((uint64_t)&v144, v76);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v77, 6u, (uint64_t *)&v154);
        long long v152 = v154;
        long long v153 = v155;
        long long v148 = v155;
        long long v149 = v155;
        long long v150 = v154;
        long long v151 = v154;
        if ((v147 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
        sub_21697C414(&v145);
        if (*((void *)&v144 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v144 + 1));
        }
        if (v149 != v151)
        {
          while (1)
          {
            uint64_t v80 = sub_216DFFC94(&v148, v78, v79);
            uint64_t v81 = v80[3] - 1;
            *(void *)&long long v154 = v80[2];
            *((void *)&v154 + 1) = v81;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154) & 1) == 0)
            {
              uint64_t v84 = sub_216DFFC94(&v148, v82, v83);
              uint64_t v85 = v84[3] - 1;
              *(void *)&long long v144 = v84[2];
              *((void *)&v144 + 1) = v85;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v148);
            if (v149 == v151) {
              goto LABEL_129;
            }
          }
          uint64_t v88 = sub_216DFFC94(&v148, v86, v87);
          uint64_t v89 = v88[3] - 1;
          *(void *)&long long v154 = v88[2];
          *((void *)&v154 + 1) = v89;
          unint64_t v90 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v90, v75, &v142);
          uint64_t v93 = sub_216DFFC94(&v148, v91, v92);
          uint64_t v94 = v93[3] - 1;
          *(void *)&long long v144 = v93[2];
          *((void *)&v144 + 1) = v94;
          int v95 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144);
          uint64_t v96 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v95);
          unsigned int v97 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v96);
          *(void *)&long long v154 = v97[1];
          *((void *)&v154 + 1) = v154;
          *(void *)&long long v155 = *v97;
          *((void *)&v155 + 1) = v155;
          while (1)
          {
            if (*((void *)&v154 + 1) == *((void *)&v155 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
              sub_21697C414(&v142);
              goto LABEL_99;
            }
            *(void *)&long long v144 = sub_216E15794(&v148, v98, v99);
            *((void *)&v144 + 1) = v100;
            uint64_t v102 = (uint64_t *)sub_216BEF334((uint64_t)&v154, v100, v101);
            int v103 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v103) {
              int v103 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v141 = 0;
            sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144, v102, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v142, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v103 + 64), &v141);
            if ((v141 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((unsigned char *)a6 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v154);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
          sub_21697C414(&v142);
        }
      }
LABEL_129:
      if ((v140 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_152;
    }
LABEL_33:
    if (sub_216ED03B8(a2, a3, a4, a5, (uint64_t)a6))
    {
      unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_181;
    }
    goto LABEL_183;
  }
  if (v14 != 1) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19 || (uint64_t v20 = *(void *)(v19 + 56), (v20 & 0x800) != 0))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
    uint64_t v20 = *(void *)(v19 + 56);
  }
  long long v21 = *(unsigned char **)(a2 + 8);
  if ((v20 & 0x4000) != 0)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v148 = v29;
    *((void *)&v148 + 1) = v30;
    if (*(void *)(a1 + 40)
      && (uint64_t v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v148),
          long long v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v31),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v32) == *(void *)(a1 + 40)))
    {
      int v118 = sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v148, (uint64_t *)(a1 + 40), v27, a3, a4);
      if (*((unsigned char *)a6 + 40))
      {
LABEL_126:
        unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_181:
        unint64_t v131 = v135;
        unint64_t v132 = atomic_load((unint64_t *)(v26 + 144));
        BOOL v133 = v131 >= v132
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v135, (atomic_ullong *)v26);
        goto LABEL_185;
      }
      int v33 = v118;
    }
    else
    {
      int v33 = 0;
    }
    if ((v33 | sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v148, (uint64_t *)(a1 + 32), v27, a3, a4)) != 1)goto LABEL_183; {
    goto LABEL_126;
    }
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    v104 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v104, 1);
    if (v149 == v150) {
      goto LABEL_178;
    }
    while (1)
    {
      uint64_t v136 = 0;
      int v105 = (void *)sub_216AA5ECC((uint64_t *)v151);
      long long v154 = v149;
      unsigned int v106 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
      unsigned int v107 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v107) {
        unsigned int v107 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v154 + 1) = &v136;
      *(void *)&long long v155 = &stru_26C74C2C0;
      WORD4(v155) = 0;
      *(void *)&long long v154 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v105, v106, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v107 + 448), (uint64_t (***)(void, uint64_t))&v154);
      uint64_t v109 = v136;
      BOOL v110 = HasField && BYTE8(v155) == 0;
      if (v110 && v136 != 0)
      {
        BOOL v112 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v112) {
          BOOL v112 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v109 = v136;
        if ((v136 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v112 & 0xFFFFFFFFFFFFFFF8))
        {
          long long v144 = v149;
          int v113 = (uint64_t *)v151;
          long long v154 = v149;
          v114 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
          uint64_t v115 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v115) {
            uint64_t v115 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v154 = 0;
          sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144, v113, v114, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v115 + 448), (uint64_t *)&v154);
          if ((v154 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v109 = v136;
          if (*((unsigned char *)a6 + 40)) {
            goto LABEL_146;
          }
        }
      }
      if ((v109 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148);
      if (v149 == v150) {
        goto LABEL_178;
      }
    }
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      long long v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      int v119 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v119, 1);
      *(void *)&long long v154 = 0;
      int v120 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v120) {
        int v120 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v144 = 0;
      sub_216ED2A20((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v154, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v120 + 208), (uint64_t *)&v144, a5, (uint64_t)&v148, (uint64_t)a6);
    }
    else
    {
      char v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        char v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      v123 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v123, 1);
      *(void *)&long long v154 = 0;
      int v124 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v124) {
        int v124 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v144 = 0;
      sub_216ED2A20((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v154, v124, (uint64_t *)&v144, a5, (uint64_t)&v148, (uint64_t)a6);
    }
    if ((v144 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v109 = v154;
LABEL_146:
    if ((v109 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_178;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16))
    || (v21[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16)))
  {
LABEL_124:
    unsigned int v116 = a6;
    int v117 = 0;
    goto LABEL_177;
  }
  int v121 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v121, 1);
  if ((void)v149 == (void)v150)
  {
    int v122 = 1;
    if (*((void *)&v149 + 1) == *((void *)&v150 + 1))
    {
LABEL_139:
      unsigned int v116 = a6;
      int v117 = v122;
      goto LABEL_177;
    }
  }
  int v122 = 1;
  while (1)
  {
    LODWORD(v144) = 1;
    int v125 = (void *)sub_216AA5ECC((uint64_t *)v151);
    long long v154 = v149;
    int v126 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
    unsigned int v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v127) {
      unsigned int v127 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v154 + 1) = &v144;
    *(void *)&long long v155 = &stru_26C758108;
    WORD4(v155) = 0;
    *(void *)&long long v154 = &unk_26C76A080;
    int v128 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v125, v126, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v127 + 312), (uint64_t (***)(void, uint64_t))&v154);
    int v129 = BYTE8(v155) ? 0 : v128;
    if (v129 == 1 && v144 != 1) {
      break;
    }
LABEL_174:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148);
    if (v149 == v150) {
      goto LABEL_139;
    }
  }
  if (!v144) {
    goto LABEL_124;
  }
  long long v154 = v149;
  if ((void)v149 && *((void *)&v149 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154))
    {
      *(void *)&long long v154 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
      *((void *)&v154 + 1) = v130;
      if (!(void)v154 || v130 == -1) {
        goto LABEL_176;
      }
    }
    int v122 = 2;
    goto LABEL_174;
  }
LABEL_176:
  unsigned int v116 = a6;
  int v117 = 2;
LABEL_177:
  sub_216E1591C(v116, v117);
LABEL_178:
  if (*((unsigned char *)a6 + 40))
  {
    unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_181;
  }
LABEL_183:
  BOOL v133 = 0;
LABEL_185:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v135);
  return v133;
}

void sub_216DE118C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DE1350(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_216D0162C((uint64_t)&v7, &v12);
  sub_216B505B0(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (uint64_t)&v14);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(a1 + 64, &v14, 0, 0, (uint64_t)&v21);
  if (v20 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = (void **)&v18;
  sub_2169B81EC(&v22);
  uint64_t v22 = (void **)&v17;
  sub_2169B74B8(&v22);
  if (v14)
  {
    int v15 = v14;
    operator delete(v14);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  int v15 = &v21;
  int v16 = &stru_26C755268;
  int v14 = &unk_26C76AC50;
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void sub_216DE155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  a14 = &a35;
  sub_2169B81EC((void ***)&a14);
  a14 = &a32;
  sub_2169B74B8((void ***)&a14);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  v18[1] = a6;
  double v18[2] = &stru_26C755278;
  __int16 v19 = 0;
  v18[0] = &unk_26C75DE70;
  sub_216E0E6E8((uint64_t)v13, (uint64_t)v18, a2);
  BOOL v11 = sub_216DE1760(a1, a2, a3, a4, a5, v13);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v11;
}

void sub_216DE174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216DE1760(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t *a6)
{
  int v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v135);
  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v148);
        uint64_t v35 = *((void *)&v148 + 1);
        if (!*((void *)&v148 + 1) || (*(unsigned char *)(*((void *)&v148 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v148 + 1), v34);
        }
        long long v36 = *(atomic_ullong **)(v35 + 24);
        uint64_t explicit = atomic_load_explicit(v36 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v36);
        }
        uint64_t v38 = sub_216D563F8(&v148);
        *(void *)&long long v154 = 0;
        sub_216ED1B98(a6, explicit, v38, a3, &v154);
        if ((v154 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!*((unsigned char *)a6 + 40))
        {
          *(void *)&long long v154 = 0;
          sub_216ED3818((uint64_t)&v148, a3, (uint64_t *)&v154, a5, (uint64_t)a6);
          if ((v154 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v149) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v149 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v149 + 1);
        sub_21697C414(&v149);
        unsigned int v39 = (atomic_ullong *)*((void *)&v148 + 1);
        if (!*((void *)&v148 + 1))
        {
LABEL_154:
          if (*((unsigned char *)a6 + 40))
          {
            unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v26) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_181;
          }
          goto LABEL_183;
        }
LABEL_153:
        sub_216D16E0C(v39);
        goto LABEL_154;
      }
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        int v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v136);
        unsigned int v41 = v137;
        if (!v137 || (*((unsigned char *)v137 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v137, v40);
        }
        unsigned int v42 = (atomic_ullong *)*((void *)v41 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v42 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v42);
        }
        BOOL v44 = sub_216D563F8(&v136);
        uint64_t v45 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v45) {
          uint64_t v45 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v148 = 0;
        sub_216ED1B98(a6, PrimDefinition, v44, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v45 + 464), &v148);
        if ((v148 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!*((unsigned char *)a6 + 40))
        {
          BOOL v46 = sub_216D563F8(&v136);
          sub_216D16CFC((uint64_t)&v144, (uint64_t *)&v137, &v138);
          char v48 = (uint64_t *)sub_216D240F8((uint64_t)&v144, v47);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v48, 6u, (uint64_t *)&v154);
          long long v152 = v154;
          long long v153 = v155;
          long long v148 = v155;
          long long v149 = v155;
          long long v150 = v154;
          long long v151 = v154;
          if ((v147 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
          sub_21697C414(&v145);
          if (*((void *)&v144 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v144 + 1));
          }
          if (v149 != v151)
          {
            while (1)
            {
              uint64_t v51 = sub_216DFFC94(&v148, v49, v50);
              uint64_t v52 = v51[3] - 1;
              *(void *)&long long v154 = v51[2];
              *((void *)&v154 + 1) = v52;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154) & 1) == 0)
              {
                uint64_t v55 = sub_216DFFC94(&v148, v53, v54);
                uint64_t v56 = v55[3] - 1;
                *(void *)&long long v144 = v55[2];
                *((void *)&v144 + 1) = v56;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v148);
              if (v149 == v151) {
                goto LABEL_150;
              }
            }
            uint64_t v59 = sub_216DFFC94(&v148, v57, v58);
            uint64_t v60 = v59[3] - 1;
            *(void *)&long long v154 = v59[2];
            *((void *)&v154 + 1) = v60;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v46, &v142);
            uint64_t v64 = sub_216DFFC94(&v148, v62, v63);
            uint64_t v65 = v64[3] - 1;
            *(void *)&long long v144 = v64[2];
            *((void *)&v144 + 1) = v65;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144);
            uint64_t v67 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v67);
            *(void *)&long long v154 = Layers[1];
            *((void *)&v154 + 1) = v154;
            *(void *)&long long v155 = *Layers;
            *((void *)&v155 + 1) = v155;
            while (1)
            {
              if (*((void *)&v154 + 1) == *((void *)&v155 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
                sub_21697C414(&v142);
                goto LABEL_81;
              }
              *(void *)&long long v144 = sub_216E15794(&v148, v69, v70);
              *((void *)&v144 + 1) = v71;
              uint64_t v73 = (uint64_t *)sub_216BEF334((uint64_t)&v154, v71, v72);
              BOOL v74 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v74) {
                BOOL v74 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v141 = 0;
              sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144, v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v142, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v74 + 464), &v141);
              if ((v141 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (*((unsigned char *)a6 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v154);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
            sub_21697C414(&v142);
          }
        }
LABEL_150:
        if ((v140 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_152:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v139);
        sub_21697C414(&v138);
        unsigned int v39 = (atomic_ullong *)v137;
        if (!v137) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v136);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v136, (uint64_t)&v148);
      uint64_t v18 = *((void *)&v148 + 1);
      if ((v148 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18)
      {
        LOBYTE(v148) = 0;
        sub_216E158B4(*a6, &v148);
        *((unsigned char *)a6 + 40) = 1;
      }
      else
      {
        uint64_t v75 = sub_216D563F8(&v136);
        sub_216D16CFC((uint64_t)&v144, (uint64_t *)&v137, &v138);
        v77 = (uint64_t *)sub_216D240F8((uint64_t)&v144, v76);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v77, 6u, (uint64_t *)&v154);
        long long v152 = v154;
        long long v153 = v155;
        long long v148 = v155;
        long long v149 = v155;
        long long v150 = v154;
        long long v151 = v154;
        if ((v147 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v146);
        sub_21697C414(&v145);
        if (*((void *)&v144 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v144 + 1));
        }
        if (v149 != v151)
        {
          while (1)
          {
            uint64_t v80 = sub_216DFFC94(&v148, v78, v79);
            uint64_t v81 = v80[3] - 1;
            *(void *)&long long v154 = v80[2];
            *((void *)&v154 + 1) = v81;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154) & 1) == 0)
            {
              uint64_t v84 = sub_216DFFC94(&v148, v82, v83);
              uint64_t v85 = v84[3] - 1;
              *(void *)&long long v144 = v84[2];
              *((void *)&v144 + 1) = v85;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v148);
            if (v149 == v151) {
              goto LABEL_129;
            }
          }
          uint64_t v88 = sub_216DFFC94(&v148, v86, v87);
          uint64_t v89 = v88[3] - 1;
          *(void *)&long long v154 = v88[2];
          *((void *)&v154 + 1) = v89;
          unint64_t v90 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v90, v75, &v142);
          uint64_t v93 = sub_216DFFC94(&v148, v91, v92);
          uint64_t v94 = v93[3] - 1;
          *(void *)&long long v144 = v93[2];
          *((void *)&v144 + 1) = v94;
          int v95 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144);
          uint64_t v96 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v95);
          unsigned int v97 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v96);
          *(void *)&long long v154 = v97[1];
          *((void *)&v154 + 1) = v154;
          *(void *)&long long v155 = *v97;
          *((void *)&v155 + 1) = v155;
          while (1)
          {
            if (*((void *)&v154 + 1) == *((void *)&v155 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
              sub_21697C414(&v142);
              goto LABEL_99;
            }
            *(void *)&long long v144 = sub_216E15794(&v148, v98, v99);
            *((void *)&v144 + 1) = v100;
            uint64_t v102 = (uint64_t *)sub_216BEF334((uint64_t)&v154, v100, v101);
            int v103 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v103) {
              int v103 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v141 = 0;
            sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144, v102, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v142, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v103 + 64), &v141);
            if ((v141 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((unsigned char *)a6 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v154);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v143);
          sub_21697C414(&v142);
        }
      }
LABEL_129:
      if ((v140 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_152;
    }
LABEL_33:
    if (sub_216ED3818(a2, a3, a4, a5, (uint64_t)a6))
    {
      unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_181;
    }
    goto LABEL_183;
  }
  if (v14 != 1) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19 || (uint64_t v20 = *(void *)(v19 + 56), (v20 & 0x800) != 0))
  {
    int v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
    uint64_t v20 = *(void *)(v19 + 56);
  }
  long long v21 = *(unsigned char **)(a2 + 8);
  if ((v20 & 0x4000) != 0)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v148 = v29;
    *((void *)&v148 + 1) = v30;
    if (*(void *)(a1 + 40)
      && (uint64_t v31 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v148),
          long long v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v31),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v32) == *(void *)(a1 + 40)))
    {
      int v118 = sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v148, (uint64_t *)(a1 + 40), v27, a3, a4);
      if (*((unsigned char *)a6 + 40))
      {
LABEL_126:
        unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_181:
        unint64_t v131 = v135;
        unint64_t v132 = atomic_load((unint64_t *)(v26 + 144));
        BOOL v133 = v131 >= v132
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v135, (atomic_ullong *)v26);
        goto LABEL_185;
      }
      int v33 = v118;
    }
    else
    {
      int v33 = 0;
    }
    if ((v33 | sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v148, (uint64_t *)(a1 + 32), v27, a3, a4)) != 1)goto LABEL_183; {
    goto LABEL_126;
    }
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    v104 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v104, 1);
    if (v149 == v150) {
      goto LABEL_178;
    }
    while (1)
    {
      uint64_t v136 = 0;
      int v105 = (void *)sub_216AA5ECC((uint64_t *)v151);
      long long v154 = v149;
      unsigned int v106 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
      unsigned int v107 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v107) {
        unsigned int v107 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v154 + 1) = &v136;
      *(void *)&long long v155 = &stru_26C74C2C0;
      WORD4(v155) = 0;
      *(void *)&long long v154 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v105, v106, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v107 + 448), (uint64_t (***)(void, uint64_t))&v154);
      uint64_t v109 = v136;
      BOOL v110 = HasField && BYTE8(v155) == 0;
      if (v110 && v136 != 0)
      {
        BOOL v112 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v112) {
          BOOL v112 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v109 = v136;
        if ((v136 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v112 & 0xFFFFFFFFFFFFFFF8))
        {
          long long v144 = v149;
          int v113 = (uint64_t *)v151;
          long long v154 = v149;
          v114 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
          uint64_t v115 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v115) {
            uint64_t v115 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v154 = 0;
          sub_216ED2058(a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v144, v113, v114, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v115 + 448), (uint64_t *)&v154);
          if ((v154 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v109 = v136;
          if (*((unsigned char *)a6 + 40)) {
            goto LABEL_146;
          }
        }
      }
      if ((v109 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148);
      if (v149 == v150) {
        goto LABEL_178;
      }
    }
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      long long v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      int v119 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v119, 1);
      *(void *)&long long v154 = 0;
      int v120 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v120) {
        int v120 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v144 = 0;
      sub_216ED4FF8((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v154, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v120 + 208), (uint64_t *)&v144, a5, (uint64_t)&v148, (uint64_t)a6);
    }
    else
    {
      char v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        char v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      v123 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v123, 1);
      *(void *)&long long v154 = 0;
      int v124 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v124) {
        int v124 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v144 = 0;
      sub_216ED4FF8((uint64_t)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v154, v124, (uint64_t *)&v144, a5, (uint64_t)&v148, (uint64_t)a6);
    }
    if ((v144 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v109 = v154;
LABEL_146:
    if ((v109 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_178;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16))
    || (v21[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 + 16)))
  {
LABEL_124:
    unsigned int v116 = a6;
    int v117 = 0;
    goto LABEL_177;
  }
  int v121 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148, v121, 1);
  if ((void)v149 == (void)v150)
  {
    int v122 = 1;
    if (*((void *)&v149 + 1) == *((void *)&v150 + 1))
    {
LABEL_139:
      unsigned int v116 = a6;
      int v117 = v122;
      goto LABEL_177;
    }
  }
  int v122 = 1;
  while (1)
  {
    LODWORD(v144) = 1;
    int v125 = (void *)sub_216AA5ECC((uint64_t *)v151);
    long long v154 = v149;
    int v126 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
    unsigned int v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v127) {
      unsigned int v127 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v154 + 1) = &v144;
    *(void *)&long long v155 = &stru_26C758108;
    WORD4(v155) = 0;
    *(void *)&long long v154 = &unk_26C76A080;
    int v128 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v125, v126, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v127 + 312), (uint64_t (***)(void, uint64_t))&v154);
    int v129 = BYTE8(v155) ? 0 : v128;
    if (v129 == 1 && v144 != 1) {
      break;
    }
LABEL_174:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v148);
    if (v149 == v150) {
      goto LABEL_139;
    }
  }
  if (!v144) {
    goto LABEL_124;
  }
  long long v154 = v149;
  if ((void)v149 && *((void *)&v149 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154))
    {
      *(void *)&long long v154 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
      *((void *)&v154 + 1) = v130;
      if (!(void)v154 || v130 == -1) {
        goto LABEL_176;
      }
    }
    int v122 = 2;
    goto LABEL_174;
  }
LABEL_176:
  unsigned int v116 = a6;
  int v117 = 2;
LABEL_177:
  sub_216E1591C(v116, v117);
LABEL_178:
  if (*((unsigned char *)a6 + 40))
  {
    unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_181;
  }
LABEL_183:
  BOOL v133 = 0;
LABEL_185:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v135);
  return v133;
}

void sub_216DE25D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DE2798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  long long v5 = a5[1];
  long long v32 = *a5;
  long long v33 = v5;
  uint64_t v6 = *((void *)a5 + 4);
  uint64_t v34 = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v33 + 1)) {
      uint64_t v7 = (atomic_ullong *)*((void *)&v33 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  sub_216D16CFC((uint64_t)__p, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_216D0162C((uint64_t)__p, &v31);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
  sub_21697C414(&v24);
  if (__p[1]) {
    sub_216D16E0C((atomic_ullong *)__p[1]);
  }
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v32, v8, v9);
  uint64_t v10 = v34;
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v32, v11, v12);
  for (uint64_t i = v34 + 96 * v32; v10 != i; v10 += 96)
  {
    sub_216B505B0(v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (uint64_t)v18);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(a1 + 64, v18, 0, 0, (uint64_t)__p);
    int v14 = *(void **)v10;
    if (*(void *)v10)
    {
      *(void *)(v10 + 8) = v14;
      operator delete(v14);
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
    }
    *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
    *(void *)(v10 + 16) = v24;
    __p[0] = 0;
    __p[1] = 0;
    long long v24 = 0;
    sub_2169B59AC((void **)(v10 + 24));
    *(_OWORD *)(v10 + 24) = v25;
    *(void *)(v10 + 40) = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    sub_2169B5A6C((void **)(v10 + 48));
    *(_OWORD *)(v10 + 48) = v27;
    *(void *)(v10 + 64) = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    int v15 = (void **)(v10 + 72);
    if (*(char *)(v10 + 95) < 0) {
      operator delete(*v15);
    }
    long long v16 = v29;
    *(void *)(v10 + 88) = v30;
    *(_OWORD *)int v15 = v16;
    HIBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    v35[0] = (void **)&v27;
    sub_2169B81EC(v35);
    v35[0] = (void **)&v25;
    sub_2169B74B8(v35);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    v35[0] = (void **)&v20;
    sub_2169B81EC(v35);
    v35[0] = (void **)&v19;
    sub_2169B74B8(v35);
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
  }
  __p[1] = &v32;
  long long v24 = &stru_26C755278;
  __p[0] = &unk_26C76AC88;
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void sub_216DE2AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v31 - 148));
  sub_21697C414((_DWORD *)(v31 - 152));
  sub_2169B88CC((void *)(v31 - 144));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<std::map<double,pxrInternal__aapl__pxrReserved__::VtValue>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    v11[1] = a5;
    _OWORD v11[2] = (uint64_t)&stru_26C755220;
    v11[0] = (uint64_t)&unk_26C76BC48;
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
  }
  sub_216997AE0(v11, a5);
  double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v6);
  int v9 = v7;
  sub_216D16278((uint64_t)v11, &Inverse);
  int v9 = v11;
  uint64_t v10 = &stru_26C755220;
  double Inverse = COERCE_DOUBLE(&unk_26C76BC48);
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void sub_216DE2CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  v139[1] = a6;
  v139[2] = &stru_26C74DD70;
  __int16 v140 = 0;
  v139[0] = &unk_26C75E9C0;
  sub_216E0E6E8((uint64_t)v133, (uint64_t)v139, a2);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v141);
  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v13 == 3)
    {
      int v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v14) {
        int v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v154);
        uint64_t v33 = *((void *)&v154 + 1);
        if (!*((void *)&v154 + 1) || (*(unsigned char *)(*((void *)&v154 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v154 + 1), v32);
        }
        uint64_t v34 = *(atomic_ullong **)(v33 + 24);
        uint64_t explicit = atomic_load_explicit(v34 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v34);
        }
        long long v36 = sub_216D563F8(&v154);
        *(void *)&long long v160 = 0;
        sub_216ED770C(v133, explicit, v36, a3, &v160);
        if ((v160 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v138)
        {
          *(void *)&long long v160 = 0;
          sub_216ED5F2C((uint64_t)&v154, a3, (uint64_t *)&v160, a5, v133);
          if ((v160 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v155) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v155 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v155 + 1);
        sub_21697C414(&v155);
        long long v37 = (atomic_ullong *)*((void *)&v154 + 1);
        if (!*((void *)&v154 + 1))
        {
LABEL_156:
          if (v138)
          {
            unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v24) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_184;
          }
          goto LABEL_186;
        }
LABEL_155:
        sub_216D16E0C(v37);
        goto LABEL_156;
      }
      int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v142);
        unsigned int v39 = v143;
        if (!v143 || (*((unsigned char *)v143 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v143, v38);
        }
        char v40 = (atomic_ullong *)*((void *)v39 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v40 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v40);
        }
        unsigned int v42 = sub_216D563F8(&v142);
        unsigned int v43 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v43) {
          unsigned int v43 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v154 = 0;
        sub_216ED770C(v133, PrimDefinition, v42, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v43 + 464), &v154);
        if ((v154 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v138)
        {
          BOOL v44 = sub_216D563F8(&v142);
          sub_216D16CFC((uint64_t)&v150, (uint64_t *)&v143, &v144);
          BOOL v46 = (uint64_t *)sub_216D240F8((uint64_t)&v150, v45);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v46, 6u, (uint64_t *)&v160);
          long long v158 = v160;
          long long v159 = v161;
          long long v154 = v161;
          long long v155 = v161;
          long long v156 = v160;
          long long v157 = v160;
          if ((v153 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v152);
          sub_21697C414(&v151);
          if (*((void *)&v150 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v150 + 1));
          }
          if (v155 != v157)
          {
            while (1)
            {
              uint64_t v49 = sub_216DFFC94(&v154, v47, v48);
              uint64_t v50 = v49[3] - 1;
              *(void *)&long long v160 = v49[2];
              *((void *)&v160 + 1) = v50;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160) & 1) == 0)
              {
                uint64_t v53 = sub_216DFFC94(&v154, v51, v52);
                uint64_t v54 = v53[3] - 1;
                *(void *)&long long v150 = v53[2];
                *((void *)&v150 + 1) = v54;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v154);
              if (v155 == v157) {
                goto LABEL_152;
              }
            }
            uint64_t v57 = sub_216DFFC94(&v154, v55, v56);
            uint64_t v58 = v57[3] - 1;
            *(void *)&long long v160 = v57[2];
            *((void *)&v160 + 1) = v58;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v44, &v148);
            uint64_t v62 = sub_216DFFC94(&v154, v60, v61);
            uint64_t v63 = v62[3] - 1;
            *(void *)&long long v150 = v62[2];
            *((void *)&v150 + 1) = v63;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150);
            uint64_t v65 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v65);
            *(void *)&long long v160 = Layers[1];
            *((void *)&v160 + 1) = v160;
            *(void *)&long long v161 = *Layers;
            *((void *)&v161 + 1) = v161;
            while (1)
            {
              if (*((void *)&v160 + 1) == *((void *)&v161 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
                sub_21697C414(&v148);
                goto LABEL_81;
              }
              *(void *)&long long v150 = sub_216E15794(&v154, v67, v68);
              *((void *)&v150 + 1) = v69;
              uint64_t v71 = (uint64_t *)sub_216BEF334((uint64_t)&v160, v69, v70);
              unsigned int v72 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v72) {
                unsigned int v72 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v147 = 0;
              sub_216ED77F8((uint64_t)v133, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150, v71, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v148, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v72 + 464), &v147);
              if ((v147 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (v138) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v160);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
            sub_21697C414(&v148);
          }
        }
LABEL_152:
        if ((v146 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_154:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
        sub_21697C414(&v144);
        long long v37 = (atomic_ullong *)v143;
        if (!v143) {
          goto LABEL_156;
        }
        goto LABEL_155;
      }
    }
    long long v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16) {
      long long v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v142);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v142, (uint64_t)&v154);
      uint64_t v17 = *((void *)&v154 + 1);
      if ((v154 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v17)
      {
        LOBYTE(v154) = 0;
        sub_216E158B4(v133[0], &v154);
        char v138 = 1;
      }
      else
      {
        uint64_t v73 = sub_216D563F8(&v142);
        sub_216D16CFC((uint64_t)&v150, (uint64_t *)&v143, &v144);
        uint64_t v75 = (uint64_t *)sub_216D240F8((uint64_t)&v150, v74);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v75, 6u, (uint64_t *)&v160);
        long long v158 = v160;
        long long v159 = v161;
        long long v154 = v161;
        long long v155 = v161;
        long long v156 = v160;
        long long v157 = v160;
        if ((v153 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v152);
        sub_21697C414(&v151);
        if (*((void *)&v150 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v150 + 1));
        }
        if (v155 != v157)
        {
          while (1)
          {
            uint64_t v78 = sub_216DFFC94(&v154, v76, v77);
            uint64_t v79 = v78[3] - 1;
            *(void *)&long long v160 = v78[2];
            *((void *)&v160 + 1) = v79;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160) & 1) == 0)
            {
              uint64_t v82 = sub_216DFFC94(&v154, v80, v81);
              uint64_t v83 = v82[3] - 1;
              *(void *)&long long v150 = v82[2];
              *((void *)&v150 + 1) = v83;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v154);
            if (v155 == v157) {
              goto LABEL_130;
            }
          }
          uint64_t v86 = sub_216DFFC94(&v154, v84, v85);
          uint64_t v87 = v86[3] - 1;
          *(void *)&long long v160 = v86[2];
          *((void *)&v160 + 1) = v87;
          uint64_t v88 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v88, v73, &v148);
          uint64_t v91 = sub_216DFFC94(&v154, v89, v90);
          uint64_t v92 = v91[3] - 1;
          *(void *)&long long v150 = v91[2];
          *((void *)&v150 + 1) = v92;
          uint64_t v93 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150);
          uint64_t v94 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v93);
          int v95 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v94);
          *(void *)&long long v160 = v95[1];
          *((void *)&v160 + 1) = v160;
          *(void *)&long long v161 = *v95;
          *((void *)&v161 + 1) = v161;
          while (1)
          {
            if (*((void *)&v160 + 1) == *((void *)&v161 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
              sub_21697C414(&v148);
              goto LABEL_99;
            }
            *(void *)&long long v150 = sub_216E15794(&v154, v96, v97);
            *((void *)&v150 + 1) = v98;
            uint64_t v100 = (uint64_t *)sub_216BEF334((uint64_t)&v160, v98, v99);
            uint64_t v101 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v101) {
              uint64_t v101 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v147 = 0;
            sub_216ED77F8((uint64_t)v133, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150, v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v148, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v101 + 64), &v147);
            if ((v147 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v138) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v160);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
          sub_21697C414(&v148);
        }
      }
LABEL_130:
      if ((v146 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_154;
    }
LABEL_33:
    if (sub_216ED5F2C(a2, a3, a4, a5, v133))
    {
      unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v24) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_184;
    }
    goto LABEL_186;
  }
  if (v13 != 1) {
    goto LABEL_33;
  }
  uint64_t v18 = *(void *)(a2 + 8);
  if (!v18 || (uint64_t v19 = *(void *)(v18 + 56), (v19 & 0x800) != 0))
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v12);
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t v18 = *(void *)(a2 + 8);
  }
  if ((v19 & 0x4000) != 0)
  {
    long long v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v11);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v154 = v27;
    *((void *)&v154 + 1) = v28;
    if (*(void *)(a1 + 40)
      && (long long v29 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154),
          uint64_t v30 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v29),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v30) == *(void *)(a1 + 40)))
    {
      int v116 = sub_216ED77F8((uint64_t)v133, *(void *)v18, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154, (uint64_t *)(a1 + 40), v25, a3, a4);
      if (v138)
      {
LABEL_127:
        unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v24) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_184:
        unint64_t v129 = v141;
        unint64_t v130 = atomic_load((unint64_t *)(v24 + 144));
        BOOL v131 = v129 >= v130
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v141, (atomic_ullong *)v24);
        goto LABEL_188;
      }
      int v31 = v116;
    }
    else
    {
      int v31 = 0;
    }
    if ((v31 | sub_216ED77F8((uint64_t)v133, *(void *)v18, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154, (uint64_t *)(a1 + 32), v25, a3, a4)) != 1)goto LABEL_186; {
    goto LABEL_127;
    }
  }
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20) {
    uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v102 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v154, v102, 1);
    if (v155 == v156) {
      goto LABEL_181;
    }
    while (1)
    {
      uint64_t v142 = 0;
      int v103 = (void *)sub_216AA5ECC((uint64_t *)v157);
      long long v160 = v155;
      v104 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160);
      int v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v105) {
        int v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v160 + 1) = &v142;
      *(void *)&long long v161 = &stru_26C74C2C0;
      WORD4(v161) = 0;
      *(void *)&long long v160 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v103, v104, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v105 + 448), (uint64_t (***)(void, uint64_t))&v160);
      uint64_t v107 = v142;
      BOOL v108 = HasField && BYTE8(v161) == 0;
      if (v108 && v142 != 0)
      {
        BOOL v110 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v110) {
          BOOL v110 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v107 = v142;
        if ((v142 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v110 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v111 = *(void *)v18;
          long long v150 = v155;
          BOOL v112 = (uint64_t *)v157;
          long long v160 = v155;
          int v113 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160);
          v114 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v114) {
            v114 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v160 = 0;
          sub_216ED77F8((uint64_t)v133, v111, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v150, v112, v113, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v114 + 448), (uint64_t *)&v160);
          if ((v160 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v107 = v142;
          if (v138) {
            goto LABEL_148;
          }
        }
      }
      if ((v107 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v154);
      if (v155 == v156) {
        goto LABEL_181;
      }
    }
  }
  long long v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21) {
    long long v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v21 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    char v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22) {
      char v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      int v117 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v154, v117, 1);
      *(void *)&long long v160 = 0;
      int v118 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v118) {
        int v118 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v150 = 0;
      sub_216ED7B10((uint64_t *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v160, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v118 + 208), (uint64_t *)&v150, a5, (uint64_t)&v154, v133);
    }
    else
    {
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23) {
        uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v23 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      int v121 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v154, v121, 1);
      *(void *)&long long v160 = 0;
      int v122 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v122) {
        int v122 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v150 = 0;
      sub_216ED7B10((uint64_t *)v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v160, v122, (uint64_t *)&v150, a5, (uint64_t)&v154, v133);
    }
    if ((v150 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v107 = v160;
LABEL_148:
    if ((v107 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_181;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16))
    || (*(unsigned char *)(v18 + 57) & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16)))
  {
LABEL_124:
    uint64_t v115 = v133[0];
    if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(v133[0] + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      goto LABEL_179;
    }
    **(_DWORD **)(v115 + 8) = 0;
    goto LABEL_180;
  }
  int v119 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v154, v119, 1);
  if ((void)v155 == (void)v156)
  {
    int v120 = 1;
    if (*((void *)&v155 + 1) == *((void *)&v156 + 1))
    {
LABEL_140:
      uint64_t v115 = v133[0];
      if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(v133[0] + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
      {
        goto LABEL_179;
      }
      **(_DWORD **)(v115 + 8) = v120;
      goto LABEL_180;
    }
  }
  int v120 = 1;
  while (1)
  {
    LODWORD(v150) = 1;
    v123 = (void *)sub_216AA5ECC((uint64_t *)v157);
    long long v160 = v155;
    int v124 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160);
    int v125 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v125) {
      int v125 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v160 + 1) = &v150;
    *(void *)&long long v161 = &stru_26C758108;
    WORD4(v161) = 0;
    *(void *)&long long v160 = &unk_26C76A080;
    int v126 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v123, v124, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v125 + 312), (uint64_t (***)(void, uint64_t))&v160);
    int v127 = BYTE8(v161) ? 0 : v126;
    if (v127 == 1 && v150 != 1) {
      break;
    }
LABEL_176:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v154);
    if (v155 == v156) {
      goto LABEL_140;
    }
  }
  if (!v150) {
    goto LABEL_124;
  }
  long long v160 = v155;
  if ((void)v155 && *((void *)&v155 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160))
    {
      *(void *)&long long v160 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v160);
      *((void *)&v160 + 1) = v128;
      if (!(void)v160 || v128 == -1) {
        goto LABEL_178;
      }
    }
    int v120 = 2;
    goto LABEL_176;
  }
LABEL_178:
  uint64_t v115 = v133[0];
  if (!strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(v133[0] + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))**(_DWORD **)(v115 + 8) = 2; {
  else
  }
LABEL_179:
    *(unsigned char *)(v115 + 25) = 1;
LABEL_180:
  char v138 = 1;
LABEL_181:
  if (v138)
  {
    unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v24) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_184;
  }
LABEL_186:
  BOOL v131 = 0;
LABEL_188:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v141);
  if ((v137 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v137 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v136);
  sub_21697C414(&v135);
  if (v134) {
    sub_216D16E0C(v134);
  }
  return v131;
}

void sub_216DE3C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v21 = *(void *)(v19 - 120);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a19);
  sub_216DE3E30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216DE3E30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::VtDictionary *a5)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104)))
  {
    int v9 = a5;
    uint64_t v10 = &stru_26C74DD70;
    double Inverse = COERCE_DOUBLE(&unk_26C76BC80);
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)v11, a5);
  double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v6);
  int v9 = v7;
  p_double Inverse = (pxrInternal__aapl__pxrReserved__::VtValue *)&Inverse;
  sub_216D1616C((pxrInternal__aapl__pxrReserved__::VtDictionary *)v11, &p_Inverse);
  int v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)v11;
  uint64_t v10 = &stru_26C74DD70;
  double Inverse = COERCE_DOUBLE(&unk_26C76BC80);
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void sub_216DE3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtValue>(void *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(v10, a3, 0))
  {
    uint64_t v11 = (const char *)a1[149];
    if (v11)
    {
      if (v11[23] < 0) {
        uint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "UsdStages in aggregate";
    }
    char v48 = (char *)v11;
    sub_216E19F08((uint64_t)&v46, "Usd", (char *)&v48);
    uint64_t v45 = 0;
    if (*a2 < 2)
    {
      if (*a2 != 1)
      {
        char v48 = "usd/stage.cpp";
        uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
        uint64_t v50 = 1884;
        unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, con"
                                "st TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
        char v52 = 0;
        sub_216D0162C((uint64_t)a2, &v43);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, __p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1 + 6);
        uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
        if (*(char *)(Identifier + 23) >= 0) {
          long long v32 = (const char *)Identifier;
        }
        else {
          long long v32 = *(const char **)Identifier;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata at path <%s> in layer @%s@; a prim or property is required",
          Text,
          v32);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
        goto LABEL_35;
      }
      sub_216D435AC((uint64_t)a2, (uint64_t)&v48);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v48, __p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v45, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      sub_216D6B6A8((uint64_t)a2, (uint64_t)&v48);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v48, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v45, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
    sub_21697C414(&v50);
    if (v49) {
      sub_216D16E0C(v49);
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45))
    {
      char v22 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
      uint64_t Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v22);
      unint64_t v24 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
      unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v24);
      if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(Schema, a3, SpecType))
      {
        if (*(void *)a4)
        {
          uint64_t v26 = (uint64_t **)sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v26, (uint64_t *)&v48);
          uint64_t v27 = (const char **)sub_2169791E0((uint64_t *)&v48);
          uint64_t v28 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, __p);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a4, a5);
        }
        else
        {
          long long v36 = (uint64_t **)sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v36, (uint64_t *)&v48);
          long long v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v48);
          uint64_t v38 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v38, __p);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a5);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        unsigned int v39 = v49;
        if (v49 && atomic_fetch_add_explicit((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_ullong *))(*v39 + 8))(v39);
        }
        uint64_t v20 = 1;
        goto LABEL_37;
      }
      char v48 = "usd/stage.cpp";
      uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
      uint64_t v50 = 1902;
      unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const"
                              " TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
      char v52 = 0;
      unint64_t v34 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v34)
      {
        uint64_t v35 = (const char *)(v34 + 16);
        if (*(char *)(v34 + 39) < 0) {
          uint64_t v35 = *(const char **)v35;
        }
      }
      else
      {
        uint64_t v35 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, SpecType, (uint64_t)__p);
      if (v42 >= 0) {
        char v40 = __p;
      }
      else {
        char v40 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. '%s' is not registered as valid metadata for spec type %s.", v35, (const char *)v40);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      uint64_t v20 = 0;
LABEL_37:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v45);
      while (v47--)
        pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v46);
      return v20;
    }
    char v48 = "usd/stage.cpp";
    uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
    uint64_t v50 = 1892;
    unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const T"
                            "fToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
    char v52 = 0;
    sub_216D0162C((uint64_t)a2, &v43);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, __p);
    long long v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1 + 6);
    uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v17);
    if (*(char *)(v18 + 23) >= 0) {
      uint64_t v19 = (const char *)v18;
    }
    else {
      uint64_t v19 = *(const char **)v18;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. Failed to create spec <%s> in layer @%s@", v16, v19);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
LABEL_35:
    sub_21697C414(&v43);
    goto LABEL_36;
  }
  char v48 = "usd/stage.cpp";
  uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
  uint64_t v50 = 1868;
  unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const TfT"
                          "oken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
  char v52 = 0;
  unint64_t v12 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    int v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0) {
      int v13 = *(const char **)v13;
    }
  }
  else
  {
    int v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Unregistered metadata field: %s", v13);
  return 0;
}

void sub_216DE4530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28)
{
  sub_21697B754(&__p);
  uint64_t v29 = a28;
  if (a28)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a19);
  sub_21684E6B8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim(this, a2, "create prim spec");
  if (result)
  {
    sub_216D0162C((uint64_t)a2, &v7);
    sub_216DECC1C((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    return (uint64_t)sub_21697C414(&v7);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_216DE4704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(void *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(v10, a3, 0))
  {
    uint64_t v11 = (const char *)a1[149];
    if (v11)
    {
      if (v11[23] < 0) {
        uint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "UsdStages in aggregate";
    }
    char v48 = (char *)v11;
    sub_216E19F08((uint64_t)&v46, "Usd", (char *)&v48);
    uint64_t v45 = 0;
    if (*a2 < 2)
    {
      if (*a2 != 1)
      {
        char v48 = "usd/stage.cpp";
        uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
        uint64_t v50 = 1884;
        unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, con"
                                "st TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbst"
                                "ractDataConstValue]";
        char v52 = 0;
        sub_216D0162C((uint64_t)a2, &v43);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, __p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1 + 6);
        uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
        if (*(char *)(Identifier + 23) >= 0) {
          long long v32 = (const char *)Identifier;
        }
        else {
          long long v32 = *(const char **)Identifier;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata at path <%s> in layer @%s@; a prim or property is required",
          Text,
          v32);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
        goto LABEL_35;
      }
      sub_216D435AC((uint64_t)a2, (uint64_t)&v48);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v48, __p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v45, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      sub_216D6B6A8((uint64_t)a2, (uint64_t)&v48);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v48, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v45, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
    sub_21697C414(&v50);
    if (v49) {
      sub_216D16E0C(v49);
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45))
    {
      char v22 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
      uint64_t Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v22);
      unint64_t v24 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
      unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v24);
      if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(Schema, a3, SpecType))
      {
        if (*(void *)a4)
        {
          uint64_t v26 = (uint64_t **)sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v26, (uint64_t *)&v48);
          uint64_t v27 = (const char **)sub_2169791E0((uint64_t *)&v48);
          uint64_t v28 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, __p);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a4, a5);
        }
        else
        {
          long long v36 = (uint64_t **)sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v36, (uint64_t *)&v48);
          uint64_t v37 = sub_2169791E0((uint64_t *)&v48);
          uint64_t v38 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v45);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v38, __p);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a5);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        unsigned int v39 = v49;
        if (v49 && atomic_fetch_add_explicit((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_ullong *))(*v39 + 8))(v39);
        }
        uint64_t v20 = 1;
        goto LABEL_37;
      }
      char v48 = "usd/stage.cpp";
      uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
      uint64_t v50 = 1902;
      unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const"
                              " TfToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
      char v52 = 0;
      unint64_t v34 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v34)
      {
        uint64_t v35 = (const char *)(v34 + 16);
        if (*(char *)(v34 + 39) < 0) {
          uint64_t v35 = *(const char **)v35;
        }
      }
      else
      {
        uint64_t v35 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, SpecType, (uint64_t)__p);
      if (v42 >= 0) {
        char v40 = __p;
      }
      else {
        char v40 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. '%s' is not registered as valid metadata for spec type %s.", v35, (const char *)v40);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
LABEL_36:
      uint64_t v20 = 0;
LABEL_37:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v45);
      while (v47--)
        pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v46);
      return v20;
    }
    char v48 = "usd/stage.cpp";
    uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
    uint64_t v50 = 1892;
    unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const T"
                            "fToken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
    char v52 = 0;
    sub_216D0162C((uint64_t)a2, &v43);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, __p);
    long long v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1 + 6);
    uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v17);
    if (*(char *)(v18 + 23) >= 0) {
      uint64_t v19 = (const char *)v18;
    }
    else {
      uint64_t v19 = *(const char **)v18;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set metadata. Failed to create spec <%s> in layer @%s@", v16, v19);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
LABEL_35:
    sub_21697C414(&v43);
    goto LABEL_36;
  }
  char v48 = "usd/stage.cpp";
  uint64_t v49 = (atomic_ullong *)"_SetMetadataImpl";
  uint64_t v50 = 1868;
  unint64_t v51 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl(const UsdObject &, const TfT"
                          "oken &, const TfToken &, const T &) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]";
  char v52 = 0;
  unint64_t v12 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    int v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0) {
      int v13 = *(const char **)v13;
    }
  }
  else
  {
    int v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Unregistered metadata field: %s", v13);
  return 0;
}

void sub_216DE4C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28)
{
  sub_21697B754(&__p);
  uint64_t v29 = a28;
  if (a28)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a19);
  sub_21684E6B8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdStage::GetGlobalVariantFallbacks@<X0>(uint64_t *a1@<X8>)
{
  char v6 = 0;
  long long v5 = (atomic_ullong *)sub_216DE4E1C();
  tbb::spin_rw_mutex_v3::internal_acquire_reader(v5);
  uint64_t v3 = (const void ***)sub_216DE4E98();
  sub_216BE06D4(a1, v3);
  return sub_21685C048(&v5);
}

void sub_216DE4E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216DE4E1C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91DE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91DE0))
  {
    uint64_t v1 = operator new(8uLL);
    void *v1 = 0;
    qword_267B91DD8 = (uint64_t)v1;
    __cxa_guard_release(&qword_267B91DE0);
  }
  return qword_267B91DD8;
}

void sub_216DE4E80(_Unwind_Exception *a1)
{
}

unint64_t sub_216DE4E98()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)atomic_load((unint64_t *)&qword_267B91D90);
  if (!v0)
  {
    unint64_t v0 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)operator new(0x18uLL);
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 1) = 0;
    *(void *)unint64_t v0 = (char *)v0 + 8;
    long long v42 = 0uLL;
    unsigned int v41 = &v42;
    Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v0);
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v39, Instance);
    uint64_t v4 = v39;
    uint64_t v3 = v40;
    if (v39 != v40)
    {
      long long v25 = v40;
      do
      {
        long long v5 = (const void ***)sub_2168E5D78(v4);
        pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v5, v38);
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v36);
        if (sub_216E10FE8((uint64_t)v38, "UsdVariantFallbacks", &v36))
        {
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v36))
          {
            JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v36);
            sub_2168BB7AC((uint64_t *)&v30, JsObject);
            int v7 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*((char *)v7 + 55) < 0)
                {
                  sub_216778F24(__p, v7[4], (unint64_t)v7[5]);
                }
                else
                {
                  *(_OWORD *)std::string __p = *((_OWORD *)v7 + 2);
                  uint64_t v29 = v7[6];
                }
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v7 + 7)))
                {
                  unint64_t JsArray = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v7 + 7);
                  sub_216782DE0(&v26, (JsArray[1] - *JsArray) >> 4);
                  int v9 = *JsArray;
                  uint64_t v10 = JsArray[1];
                  if (v9 != v10)
                  {
                    uint64_t v11 = v26;
                    do
                    {
                      unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v9);
                      if (*(char *)(String + 23) < 0)
                      {
                        sub_216778F24(&__dst, *(void **)String, *(void *)(String + 8));
                      }
                      else
                      {
                        long long v13 = *(_OWORD *)String;
                        uint64_t v33 = *(void *)(String + 16);
                        long long __dst = v13;
                      }
                      if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v11->__r_.__value_.__l.__data_);
                      }
                      long long v14 = __dst;
                      v11->__r_.__value_.__r.__words[2] = v33;
                      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
                      ++v11;
                      int v9 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v9 + 16);
                    }
                    while (v9 != v10);
                  }
                  if (v26 != (std::string *)v27)
                  {
                    int v43 = __p;
                    int v15 = (std::string **)(sub_216E11098((uint64_t **)&v41, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v43)+ 7);
                    if (v15 != &v26) {
                      sub_21680F694((uint64_t)v15, v26, v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
                    }
                  }
                  *(void *)&long long __dst = &v26;
                  sub_216782F20((void ***)&__dst);
                }
                else
                {
                  *(void *)&long long __dst = "usd/stage.cpp";
                  *((void *)&__dst + 1) = "_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl";
                  uint64_t v33 = 208;
                  unint64_t v34 = "void pxrInternal__aapl__pxrReserved__::_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl(std"
                        "::remove_const_t<PcpVariantFallbackMap> *)";
                  char v35 = 0;
                  uint64_t v16 = sub_2168E5D78(v4);
                  uint64_t v17 = (const char *)(v16 + 8);
                  if (*(char *)(v16 + 31) < 0) {
                    uint64_t v17 = *(const char **)v17;
                  }
                  if (SHIBYTE(v29) >= 0) {
                    uint64_t v18 = __p;
                  }
                  else {
                    uint64_t v18 = (void **)__p[0];
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdVariantFallbacks] value for %s must be an arrays.", v17, (const char *)v18);
                }
                if (SHIBYTE(v29) < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v19 = v7[1];
                if (v19)
                {
                  do
                  {
                    uint64_t v20 = (void **)v19;
                    uint64_t v19 = (void *)*v19;
                  }
                  while (v19);
                }
                else
                {
                  do
                  {
                    uint64_t v20 = (void **)v7[2];
                    BOOL v21 = *v20 == v7;
                    int v7 = v20;
                  }
                  while (!v21);
                }
                int v7 = v20;
              }
              while (v20 != v31);
            }
            sub_216812ED4((uint64_t)&v30, v31[0]);
            uint64_t v3 = v25;
          }
          else
          {
            *(void *)&long long __dst = "usd/stage.cpp";
            *((void *)&__dst + 1) = "_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl";
            uint64_t v33 = 198;
            unint64_t v34 = "void pxrInternal__aapl__pxrReserved__::_usdGlobalVariantFallbackMap_Tf_StaticDataFactoryImpl(std::remo"
                  "ve_const_t<PcpVariantFallbackMap> *)";
            char v35 = 0;
            uint64_t v22 = sub_2168E5D78(v4);
            uint64_t v23 = (const char *)(v22 + 8);
            if (*(char *)(v22 + 31) < 0) {
              uint64_t v23 = *(const char **)v23;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdVariantFallbacks] was not a dictionary.", v23);
          }
        }
        if (v37) {
          sub_216784EC4(v37);
        }
        sub_216812ED4((uint64_t)v38, (void *)v38[1]);
        v4 += 2;
      }
      while (v4 != v3);
    }
    sub_216BE0AA8((uint64_t **)v0, v41, &v42);
    *(void *)&long long __dst = &v39;
    sub_216850BF4((void ***)&__dst);
    sub_216BE0608((uint64_t)&v41, (void *)v42);
    uint64_t v24 = 0;
    atomic_compare_exchange_strong(&qword_267B91D90, (unint64_t *)&v24, (unint64_t)v0);
    if (v24)
    {
      sub_216BE0608((uint64_t)v0, *((void **)v0 + 1));
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B91D90);
    }
  }
  return (unint64_t)v0;
}

void sub_216DE5280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  a34 = v35 - 152;
  sub_216850BF4((void ***)&a34);
  sub_216BE0608(v35 - 128, *(void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdStage::SetGlobalVariantFallbacks(uint64_t a1)
{
  char v5 = 1;
  uint64_t v4 = (atomic_ullong *)sub_216DE4E1C();
  tbb::spin_rw_mutex_v3::internal_acquire_writer(v4);
  uint64_t v2 = (uint64_t **)sub_216DE4E98();
  if (v2 != (uint64_t **)a1) {
    sub_216BE0AA8(v2, *(long long **)a1, (long long *)(a1 + 8));
  }
  return sub_21685C048(&v4);
}

void sub_216DE53A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216DE53B4()
{
  sub_216779094(v2, "UsdStage::LoadAll");
  sub_216779094(__p, "Load all loadable prims");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C769880, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdStage::LoadNone");
  sub_216779094(__p, "Load no loadable prims");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C769880, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216DE5488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetAssetPathContext((uint64_t)a1, a2, (uint64_t)&v12, a6);
  if (v13)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext(a1, v11);
    sub_216DE5A00(&v12, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)v11, a3, a4, a5);
    uint64_t v16 = (void **)v11;
    sub_216787968(&v16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
  sub_21697C414(&v14);
  return sub_216ABB798(&v13);
}

void sub_216DE5570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 56) = v5;
  sub_216787968((void ***)(v6 - 56));
  sub_216DE6164((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdStage::_GetAssetPathContext@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v40 = a4;
  unsigned int v39 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v37);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v38);
  sub_216D1CEAC((uint64_t)&v29);
  uint64_t v28 = 0;
  long long v26 = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  uint64_t v23 = a2;
  sub_216E29A0C(a1, a2, &v29, (void **)&v40, &v26, (uint64_t)&v23);
  if ((v36 & 0xFFFFFFFE) == 2)
  {
    int v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v32;
    if (v32)
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)&v32) + 14)) {
        int v7 = v31;
      }
      else {
        int v7 = 0;
      }
    }
    uint64_t v23 = v7;
    sub_2168BD80C((uint64_t *)&v23);
    int v8 = v39;
    unsigned int v39 = v23;
    uint64_t v23 = 0;
    sub_2168BD378((int)&v39, v8);
    sub_216ABB798(&v23);
    int v9 = sub_216D563F8(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, v9, (int *)&v23);
    sub_21697DE94(&v37, (int *)&v23);
    sub_21697DEEC(&v38, (int *)&v23 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    sub_21697C414(&v23);
  }
  else if (v36 == 4)
  {
    uint64_t v10 = v27[1];
    uint64_t ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v27[1], v40);
    uint64_t v12 = *((void *)v10 + 11);
    long long v13 = sub_216D563F8(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, v13, (int *)&v23);
    sub_21697DE94(&v37, (int *)&v23);
    sub_21697DEEC(&v38, (int *)&v23 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    sub_21697C414(&v23);
    BOOL HasAuthoredTimeSamples = pxrInternal__aapl__pxrReserved__::Usd_Clip::HasAuthoredTimeSamples(*(pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v12 + 16 * ClipIndexForTime), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
    int v15 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)((char *)v27[1] + 72);
    if (HasAuthoredTimeSamples) {
      int v15 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v12 + 16 * ClipIndexForTime);
    }
    pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*v15, (uint64_t *)&v23);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v24;
    if (v24)
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)&v24) + 14)) {
        uint64_t v16 = v23;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    long long v25 = v16;
    sub_2168BD80C((uint64_t *)&v25);
    uint64_t v17 = v39;
    unsigned int v39 = v25;
    long long v25 = 0;
    sub_2168BD378((int)&v39, v17);
    sub_216ABB798(&v25);
    uint64_t v18 = (uint64_t)v24;
    if (v24 && atomic_fetch_add_explicit(v24 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = v39;
  if (v39)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v19;
    unsigned int v39 = 0;
    sub_21697D878((_DWORD *)(a3 + 16), &v37);
    sub_21697D8B4((_DWORD *)(a3 + 20), &v38);
    *(_OWORD *)(a3 + 24) = v33;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = -1;
  }
  if (v28) {
    sub_216784EC4(v28);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
  sub_21697C414(&v34);
  uint64_t v20 = (uint64_t)v32;
  if (v32 && atomic_fetch_add_explicit(v32 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v30;
  if (v30 && atomic_fetch_add_explicit((atomic_uint *volatile)(v30 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_21697C414(&v37);
  return sub_216ABB798(&v39);
}

void sub_216DE593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, ...)
{
  va_start(va, a10);
  if (a10) {
    sub_216784EC4(a10);
  }
  sub_216D1B1E8((uint64_t)va);
  sub_21697B754((_DWORD *)(v10 - 72));
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v10 - 64));
  _Unwind_Resume(a1);
}

void sub_216DE59F8()
{
}

void sub_216DE5A00(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v43, a2);
  if (a4)
  {
    uint64_t v8 = 0;
    int v31 = a1 + 1;
    do
    {
      uint64_t v9 = a3 + 48 * v8;
      if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression(v9))
      {
        uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 3));
        uint64_t v11 = *(void *)(sub_216BBBFA8(LayerStack) + 392);
        pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(__p, a3 + 48 * v8);
        sub_216BD5918((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)__p, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(v11 + 16), (uint64_t *)v39);
        pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)__p);
        long long v13 = v40;
        uint64_t v12 = (uint64_t *)v41;
        if (v40 == (uint64_t *)v41)
        {
          if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v39))
          {
            if (((uint64_t)v39[1] & 4) != 0) {
              int v14 = (char *)(*(uint64_t (**)(void **))(((unint64_t)v39[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v39);
            }
            else {
              int v14 = (char *)v39[0];
            }
            if (v14[23] < 0)
            {
              sub_216778F24(__dst, *(void **)v14, *((void *)v14 + 1));
            }
            else
            {
              long long v15 = *(_OWORD *)v14;
              uint64_t v34 = *((void *)v14 + 2);
              *(_OWORD *)long long __dst = v15;
            }
          }
          else
          {
            __dst[0] = 0;
            __dst[1] = 0;
            uint64_t v34 = 0;
          }
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p);
          if (*(char *)(v9 + 23) < 0) {
            operator delete(*(void **)v9);
          }
          *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
          *(void *)(v9 + 16) = v36;
          HIBYTE(v36) = 0;
          LOBYTE(__p[0]) = 0;
          uint64_t v16 = (void **)(a3 + 48 * v8 + 24);
          if (*(char *)(v9 + 47) < 0)
          {
            operator delete(*v16);
            int v17 = SHIBYTE(v36);
            *(_OWORD *)uint64_t v16 = v37;
            *(void *)(a3 + 48 * v8 + 40) = v38;
            HIBYTE(v38) = 0;
            LOBYTE(v37) = 0;
            if (v17 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v16 = v37;
            *(void *)(a3 + 48 * v8 + 40) = v38;
            HIBYTE(v38) = 0;
            LOBYTE(v37) = 0;
          }
          if (SHIBYTE(v34) < 0) {
            operator delete(__dst[0]);
          }
        }
        else
        {
          sub_216E0B05C(a1, &v40);
        }
        sub_216850298((uint64_t)&v42);
        __p[0] = &v40;
        sub_216782F20((void ***)__p);
        sub_2168EE084((uint64_t)v39);
        if (v13 != v12) {
          goto LABEL_66;
        }
      }
      if (!a5)
      {
        sub_216ABBA60((uint64_t *)__dst, v31);
        sub_216E0AD48((uint64_t *)__dst, v9, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v39, v9, __p);
        if (*(char *)(v9 + 23) < 0) {
          operator delete(*(void **)v9);
        }
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v39;
        *(void *)(v9 + 16) = v40;
        HIBYTE(v40) = 0;
        LOBYTE(v39[0]) = 0;
        long long v26 = (void **)(a3 + 48 * v8 + 24);
        if (*(char *)(v9 + 47) < 0)
        {
          operator delete(*v26);
          int v27 = SHIBYTE(v40);
          *(_OWORD *)long long v26 = v41;
          *(void *)(a3 + 48 * v8 + 40) = v42;
          HIBYTE(v42) = 0;
          LOBYTE(v41) = 0;
          if (v27 < 0) {
            operator delete(v39[0]);
          }
        }
        else
        {
          *(_OWORD *)long long v26 = v41;
          *(void *)(a3 + 48 * v8 + 40) = v42;
          HIBYTE(v42) = 0;
          LOBYTE(v41) = 0;
        }
        if (SHIBYTE(v36) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v28 = __dst[1];
        if (__dst[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__dst[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v28 + 8))(v28);
        }
        goto LABEL_66;
      }
      sub_216ABBA60((uint64_t *)v39, v31);
      sub_216E0B12C((uint64_t *)v39, v9, (uint64_t)__p);
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__ *)v39[1];
      if (v39[1] && atomic_fetch_add_explicit((atomic_uint *volatile)v39[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(void *)v18 + 8))(v18);
      }
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v18);
      v39[0] = 0;
      v39[1] = 0;
      double v40 = 0;
      pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[0]);
      }
      uint64_t v20 = HIBYTE(v36);
      if (v36 >= 0) {
        uint64_t v21 = (void *)HIBYTE(v36);
      }
      else {
        uint64_t v21 = __p[1];
      }
      uint64_t v22 = (void *)HIBYTE(v34);
      char v23 = HIBYTE(v34);
      if (v34 < 0) {
        uint64_t v22 = __dst[1];
      }
      if (v21 != v22) {
        goto LABEL_55;
      }
      if (v34 >= 0) {
        uint64_t v24 = __dst;
      }
      else {
        uint64_t v24 = (void **)__dst[0];
      }
      if (v36 < 0)
      {
        if (memcmp(__p[0], v24, (size_t)__p[1])) {
          goto LABEL_55;
        }
      }
      else if (HIBYTE(v36))
      {
        long long v25 = __p;
        while (*(unsigned __int8 *)v25 == *(unsigned __int8 *)v24)
        {
          long long v25 = (void **)((char *)v25 + 1);
          uint64_t v24 = (void **)((char *)v24 + 1);
          if (!--v20) {
            goto LABEL_62;
          }
        }
LABEL_55:
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v39);
        if (*(char *)(v9 + 23) < 0) {
          operator delete(*(void **)v9);
        }
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v39;
        *(void *)(v9 + 16) = v40;
        HIBYTE(v40) = 0;
        LOBYTE(v39[0]) = 0;
        int v29 = (void **)(a3 + 48 * v8 + 24);
        if (*(char *)(v9 + 47) < 0)
        {
          operator delete(*v29);
          int v30 = SHIBYTE(v40);
          *(_OWORD *)int v29 = v41;
          *(void *)(a3 + 48 * v8 + 40) = v42;
          HIBYTE(v42) = 0;
          LOBYTE(v41) = 0;
          if (v30 < 0) {
            operator delete(v39[0]);
          }
        }
        else
        {
          *(_OWORD *)int v29 = v41;
          *(void *)(a3 + 48 * v8 + 40) = v42;
        }
        char v23 = HIBYTE(v34);
      }
LABEL_62:
      if (v23 < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(__p[0]);
      }
LABEL_66:
      ++v8;
    }
    while (v8 != a4);
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v43);
}

void sub_216DE5F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void *pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
  if (v4) {
    goto LABEL_2;
  }
  v11[0] = "usd/stage.cpp";
  v11[1] = "GetPathResolverContext";
  _OWORD v11[2] = 3901;
  void v11[3] = "ArResolverContext pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext() const";
  char v12 = 0;
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "_GetPcpCache()", 0))
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
LABEL_2:
    LayerStackuint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(v4);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    uint64_t v6 = *(char **)(LayerStackIdentifier + 32);
    int v7 = *(char **)(LayerStackIdentifier + 40);
    return sub_21695F340(a2, v6, v7, (v7 - v6) >> 4);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91DA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91DA8))
  {
    uint64_t v10 = operator new(0x18uLL);
    *uint64_t v10 = 0;
    v10[1] = 0;
    void v10[2] = 0;
    qword_267B91DA0 = (uint64_t)v10;
    __cxa_guard_release(&qword_267B91DA8);
  }
  uint64_t v9 = qword_267B91DA0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v6 = *(char **)v9;
  int v7 = *(char **)(v9 + 8);
  return sub_21695F340(a2, v6, v7, (v7 - v6) >> 4);
}

void sub_216DE614C(_Unwind_Exception *a1)
{
}

uint64_t sub_216DE6164(uint64_t a1)
{
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPathsValue(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, long long **a3, int a4, double a5)
{
  if (sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v37);
    uint64_t v10 = sub_216B8E5FC(a3);
    uint64_t v11 = (void *)*((void *)v10 + 2);
    long long v12 = *v10;
    long long v13 = __p[0];
    *uint64_t v10 = *(_OWORD *)v37;
    *((void *)v10 + 2) = v13;
    *(_OWORD *)long long v37 = v12;
    __p[0] = v11;
    uint64_t v14 = *((void *)v10 + 5);
    long long v15 = *(long long *)((char *)v10 + 24);
    uint64_t v16 = v39;
    *(long long *)((char *)v10 + 24) = *(_OWORD *)&__p[1];
    *((void *)v10 + 5) = v16;
    *(_OWORD *)&__p[1] = v15;
    uint64_t v39 = v14;
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)v37, 1, a4, a5);
    int v17 = sub_216B8E5FC(a3);
    uint64_t v18 = (void *)*((void *)v17 + 2);
    long long v19 = *v17;
    uint64_t v20 = __p[0];
    *int v17 = *(_OWORD *)v37;
    *((void *)v17 + 2) = v20;
    *(_OWORD *)long long v37 = v19;
    __p[0] = v18;
    uint64_t v21 = *((void *)v17 + 5);
    long long v22 = *(long long *)((char *)v17 + 24);
    uint64_t v23 = v39;
    *(long long *)((char *)v17 + 24) = *(_OWORD *)&__p[1];
    *((void *)v17 + 5) = v23;
    *(_OWORD *)&__p[1] = v22;
    uint64_t v39 = v21;
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v37[0]);
    }
  }
  else if (sub_216998140((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(_OWORD *)long long v37 = 0u;
    memset(__p, 0, sizeof(__p));
    uint64_t v24 = sub_216B8E760(a3);
    long long v25 = *(void **)(v24 + 32);
    *(void *)(v24 + 32) = 0;
    __p[2] = v25;
    long long v26 = *(_OWORD *)v24;
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v37;
    int v27 = *(void **)(v24 + 16);
    uint64_t v28 = *(void **)(v24 + 24);
    *(void *)(v24 + 16) = 0;
    *(void **)(v24 + 24) = __p[1];
    *(_OWORD *)long long v37 = v26;
    __p[0] = v27;
    __p[1] = v28;
    sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v29, v30);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, (uint64_t)__p[2], (uint64_t)v37[0], a4, a5);
    uint64_t v31 = sub_216B8E760(a3);
    long long v32 = *(void **)(v31 + 32);
    long long v33 = __p[0];
    *(void **)(v31 + 32) = __p[2];
    __p[2] = v32;
    long long v34 = *(_OWORD *)v31;
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v37;
    int v35 = *(void **)(v31 + 16);
    uint64_t v36 = *(void **)(v31 + 24);
    *(void *)(v31 + 16) = v33;
    *(void **)(v31 + 24) = __p[1];
    *(_OWORD *)long long v37 = v34;
    __p[0] = v35;
    __p[1] = v36;
    sub_2169B4408(v37);
  }
}

void sub_216DE63A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4, double a5)
{
  long long v19 = *(void **)&a5;
  sub_216D1CEAC((uint64_t)&v13);
  uint64_t v20 = a2;
  sub_216E29A0C(a1, a2, &v13, &v19, 0, (uint64_t)&v20);
  BOOL IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v16);
  if (a4) {
    char v10 = IsIdentity;
  }
  else {
    char v10 = 1;
  }
  if ((v10 & 1) == 0)
  {
    do
    {
      *a3 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(v16, a3);
      ++a3;
      --a4;
    }
    while (a4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_21697C414(&v17);
  uint64_t v11 = v15;
  if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v14;
  if (v14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DE650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(uint64_t a1, _DWORD *a2, _DWORD *a3, void **a4)
{
  uint64_t v4 = a2;
  sub_216E29A0C(a1, a2, a3, a4, 0, (uint64_t)&v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  long long v37 = *(void **)&a5;
  sub_216D1CEAC((uint64_t)&v31);
  __p[0] = (void *)a2;
  sub_216E29A0C(a1, (_DWORD *)a2, &v31, &v37, 0, (uint64_t)__p);
  *(_OWORD *)std::string __p = v34;
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p);
  long long v12 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v10, v11);
  sub_216D16CFC((uint64_t)__p, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::_GetProtoToInstancePathMap((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, v13, v30);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  if (__p[1]) {
    sub_216D16E0C((atomic_ullong *)__p[1]);
  }
  if (a4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 96 * a4;
    do
    {
      uint64_t v16 = (void *)(a3 + v14);
      sub_216DE683C((void *)(a3 + v14), (uint64_t)v12, (uint64_t)v30, (uint64_t)__p);
      int v17 = *(void **)(a3 + v14);
      if (v17)
      {
        *(void *)(a3 + v14 + 8) = v17;
        operator delete(v17);
        *uint64_t v16 = 0;
        v16[1] = 0;
        double v16[2] = 0;
      }
      uint64_t v18 = a3 + v14;
      *(_OWORD *)uint64_t v18 = *(_OWORD *)__p;
      *(void *)(v18 + 16) = v23;
      __p[1] = 0;
      uint64_t v23 = 0;
      __p[0] = 0;
      sub_2169B59AC((void **)(a3 + v14 + 24));
      *(_OWORD *)(v18 + 24) = v24;
      *(void *)(v18 + 40) = v25;
      uint64_t v25 = 0;
      long long v24 = 0uLL;
      sub_2169B5A6C((void **)(a3 + v14 + 48));
      *(_OWORD *)(v18 + 48) = v26;
      *(void *)(v18 + 64) = v27;
      uint64_t v27 = 0;
      long long v26 = 0uLL;
      long long v19 = (void **)(a3 + v14 + 72);
      if (*(char *)(a3 + v14 + 95) < 0) {
        operator delete(*v19);
      }
      *(_OWORD *)long long v19 = v28;
      *(void *)(v18 + 88) = v29;
      HIBYTE(v29) = 0;
      LOBYTE(v28) = 0;
      uint64_t v38 = (void **)&v26;
      sub_2169B81EC(&v38);
      uint64_t v38 = (void **)&v24;
      sub_2169B74B8(&v38);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v14 += 96;
    }
    while (v15 != v14);
  }
  __p[0] = v30;
  sub_216BECE18((void ***)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v36);
  sub_21697C414(&v35);
  uint64_t v20 = v33;
  if (v33 && atomic_fetch_add_explicit((atomic_uint *volatile)(v33 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t result = v32;
  if (v32)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DE67F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_216DE683C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8[0] = a2;
  v8[1] = a3;
  v6[0] = (void **)&v9;
  v6[1] = (void **)v8;
  v6[2] = (void **)&v12;
  int v7 = &v9;
  v5[0] = &v9;
  v5[1] = v8;
  double v5[2] = &v13;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(a1, (uint64_t)&v7, (uint64_t)sub_216E111DC, (uint64_t)v6, sub_216E11518, (uint64_t)v5, (void (*)(uint64_t, uint64_t))sub_216E11A2C);
  if (v9 == v10)
  {
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    sub_2169B70E4((void *)a4, v10 - 96);
  }
  v6[0] = (void **)&v9;
  sub_216B0B294(v6);
}

void sub_216DE6910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216B0B294((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAttributeValue(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t *a3, double a4)
{
  if (sub_216B8D878((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    uint64_t v8 = (void **)sub_216B8D9A4(a3);
    uint64_t v9 = *v8;
    *uint64_t v8 = 0;
    v37[0] = v9;
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes((uint64_t)a1, a2, (double *)v37, 1, a4);
    uint64_t v10 = (void **)sub_216B8D9A4(a3);
    *uint64_t v10 = v37[0];
  }
  else if (sub_216B8DA34((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(void *)&long long v39 = 0;
    *(_OWORD *)long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v11 = sub_216B8DB90(a3);
    uint64_t v12 = *(void *)(v11 + 32);
    *(void *)(v11 + 32) = 0;
    *(void *)&long long v39 = v12;
    long long v13 = *(_OWORD *)v11;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v37;
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    *(_OWORD *)(v11 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), 0);
    *(_OWORD *)long long v37 = v13;
    *(void *)&long long v38 = v14;
    *((void *)&v38 + 1) = v15;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v16, v17);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes((uint64_t)a1, a2, (double *)v39, (uint64_t)v37[0], a4);
    uint64_t v18 = sub_216B8DB90(a3);
    uint64_t v19 = *(void *)(v18 + 32);
    unint64_t v20 = v38;
    *(void *)(v18 + 32) = v39;
    *(void *)&long long v39 = v19;
    long long v21 = *(_OWORD *)v18;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v37;
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v23 = *(void *)(v18 + 24);
    *(_OWORD *)(v18 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), v20);
    *(_OWORD *)long long v37 = v21;
    *(void *)&long long v38 = v22;
    *((void *)&v38 + 1) = v23;
    sub_2168F83DC((uint64_t)v37);
  }
  else if (sub_21699AB4C((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    *(_OWORD *)long long v37 = 0u;
    long long v38 = 0u;
    sub_216B8EF88(a3, (uint64_t)v37);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions((uint64_t)a1, (uint64_t)a2, (uint64_t)v37, 1, a4);
    sub_216B8EF88(a3, (uint64_t)v37);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p[1]);
    }
    v43[0] = (void **)&v40;
    sub_2169B81EC(v43);
    v43[0] = (void **)&v38 + 1;
    sub_2169B74B8(v43);
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
  }
  else if (sub_21699AC40((pxrInternal__aapl__pxrReserved__::VtValue *)a3))
  {
    *(void *)&long long v39 = 0;
    *(_OWORD *)long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v24 = sub_216B50650(a3);
    uint64_t v25 = *(void *)(v24 + 32);
    *(void *)(v24 + 32) = 0;
    *(void *)&long long v39 = v25;
    long long v26 = *(_OWORD *)v24;
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v37;
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v28 = *(void *)(v24 + 24);
    *(_OWORD *)(v24 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), 0);
    *(_OWORD *)long long v37 = v26;
    *(void *)&long long v38 = v27;
    *((void *)&v38 + 1) = v28;
    sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v37, v29, v30);
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions((uint64_t)a1, (uint64_t)a2, v39, (uint64_t)v37[0], a4);
    uint64_t v31 = sub_216B50650(a3);
    uint64_t v32 = *(void *)(v31 + 32);
    unint64_t v33 = v38;
    *(void *)(v31 + 32) = v39;
    *(void *)&long long v39 = v32;
    long long v34 = *(_OWORD *)v31;
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v37;
    uint64_t v35 = *(void *)(v31 + 16);
    uint64_t v36 = *(void *)(v31 + 24);
    *(_OWORD *)(v31 + 16) = __PAIR128__(*((unint64_t *)&v38 + 1), v33);
    *(_OWORD *)long long v37 = v34;
    *(void *)&long long v38 = v35;
    *((void *)&v38 + 1) = v36;
    sub_2169B88CC(v37);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPathsValue(a1, a2, (long long **)a3, 0, a4);
  }
}

void sub_216DE6C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::UsdStage(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, _DWORD **a5, int a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C769838;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a2;
  uint64_t v12 = (uint64_t *)(a1 + 32);
  sub_2168BD80C((uint64_t *)(a1 + 32));
  *(void *)(a1 + 40) = *a3;
  sub_2168BD80C((uint64_t *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v51, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a1 + 48, v12, v51[0], v51[1]);
  *(unsigned char *)(a1 + 120) = 1;
  long long v13 = operator new(0x130uLL);
  sub_216ABBA60(&v45, v12);
  sub_216ABBA60(&v43, (uint64_t *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v42);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(&v47, &v45, &v43, a4, v42);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
  if (!v14) {
    uint64_t v14 = sub_216E11CD8(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
  }
  if ((*((void *)v14 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*((void *)v14 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
  }
  pxrInternal__aapl__pxrReserved__::PcpCache::PcpCache(v13, &v47, EmptyString, 1);
  *(void *)(a1 + 128) = v13;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v50);
  char v52 = (void **)&v49;
  sub_216787968(&v52);
  uint64_t v16 = v48;
  if (v48 && atomic_fetch_add_explicit((atomic_uint *volatile)v48 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v16 + 8))(v16);
  }
  std::string::size_type size = v47.__r_.__value_.__l.__size_;
  if (v47.__r_.__value_.__l.__size_
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v47.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v42);
  uint64_t v18 = v44;
  if (v44 && atomic_fetch_add_explicit((atomic_uint *volatile)(v44 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v46;
  if (v46 && atomic_fetch_add_explicit((atomic_uint *volatile)(v46 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  unint64_t v20 = (pxrInternal__aapl__pxrReserved__::Usd_ClipCache *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Usd_ClipCache(v20);
  *(void *)(a1 + 136) = v20;
  long long v21 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)operator new(0x110uLL);
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::Usd_InstanceCache(v21);
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 144) = v21;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(void *)(a1 + 192) = 0;
  uint64_t v22 = (_OWORD *)(a1 + 728);
  for (uint64_t i = 736; i != 784; i += 24)
    *(void *)(a1 + i) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  __dmb(0xBu);
  *(void *)(a1 + 200) = 0;
  __dmb(0xBu);
  *(void *)(a1 + 720) = 0;
  _OWORD *v22 = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(void *)(a1 + 208) = v22;
  __dmb(0xBu);
  *(void *)(a1 + 200) = 1;
  *(_DWORD *)(a1 + 784) = 1;
  *(unsigned char *)(a1 + 1184) = 0;
  uint64_t v24 = (void ***)(a1 + 1192);
  *(void *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 833) = 0u;
  *(_DWORD *)(a1 + 1200) = a6;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1216) = 0;
  sub_216980EEC((void *)(a1 + 1208), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 3);
  *(_WORD *)(a1 + 1256) = 0;
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  if (*(void *)(a1 + 32)
    || (v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp",
        v47.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdStage",
        v47.__r_.__value_.__r.__words[2] = 680,
        char v48 = "pxrInternal__aapl__pxrReserved__::UsdStage::UsdStage(const SdfLayerRefPtr &, const SdfLayerRefPtr &, const"
              " ArResolverContext &, const UsdStagePopulationMask &, InitialLoadSet)",
        char v49 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v47, "_rootLayer", 0) & 1) != 0))
  {
    if (sub_216C4B19C(12))
    {
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v12);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v25);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v29 = Identifier;
      }
      else {
        uint64_t v29 = *(void *)Identifier;
      }
      if (*(void *)(a1 + 40))
      {
        int v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(a1 + 40));
        uint64_t v31 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
        if (*(char *)(v31 + 23) >= 0) {
          uint64_t v32 = (const char *)v31;
        }
        else {
          uint64_t v32 = *(const char **)v31;
        }
      }
      else
      {
        uint64_t v32 = "<null>";
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::UsdStage(rootLayer=@%s@, sessionLayer=@%s@)\n", v27, v28, v29, v32);
    }
    unsigned __int8 v33 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if (v33)
    {
      long long v34 = (void **)operator new(0x18uLL);
      uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v35);
      unsigned __int8 v36 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
      if (v36)
      {
        std::operator+<char>();
        long long v37 = std::string::append(&v47, "@");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v34[2] = (void *)v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long v34 = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *long long v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
      }
      long long v39 = *v24;
      *uint64_t v24 = v34;
      if (v39) {
        sub_216E12054(a1 + 1192, v39);
      }
    }
    uint64_t v40 = *(void *)(a1 + 128);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetGlobalVariantFallbacks((uint64_t *)&v47);
    pxrInternal__aapl__pxrReserved__::PcpCache::SetVariantFallbacks(v40, (uint64_t)&v47, 0);
    sub_216BE0608((uint64_t)&v47, (void *)v47.__r_.__value_.__l.__size_);
  }
  return a1;
}

void sub_216DE71B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t *a15, pxrInternal__aapl__pxrReserved__::PcpCache **a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  a21 = v28 + 1232;
  sub_216CF4B9C((void ***)&a21);
  sub_216981168((void ***)&a21);
  uint64_t v35 = *v29;
  *uint64_t v29 = 0;
  if (v35) {
    sub_216E12054((int)v29, v35);
  }
  if (*(unsigned char *)(v28 + 1184)) {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v33 + 81));
  }
  unsigned __int8 v36 = *(atomic_uint **)(v28 + 832);
  if (v36 && atomic_fetch_add_explicit(v36 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v36 + 8))(v36);
  }
  a21 = a13;
  sub_216E11F04((void ***)&a21);
  sub_216E11D64(v33);
  sub_2169735B4(v32);
  long long v37 = (void **)*a12;
  *a12 = 0;
  if (v37) {
    sub_216E0BBF8((uint64_t)a12, v37);
  }
  sub_216E0BB00((pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(v28 + 136), 0);
  sub_216E0BA0C(a16, 0);
  sub_216D483F4(a14);
  sub_216ABB798(v31);
  sub_216ABB798(v30);
  sub_216859A88(a15, v38);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v28);
  _Unwind_Resume(a1);
}

void **sub_216DE741C(void **a1)
{
  char v3 = a1;
  sub_216981168(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::~UsdStage(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  *(void *)this = &unk_26C769838;
  if (sub_216C4B19C(12))
  {
    if (*((void *)this + 4))
    {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)this + 4);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v6 = (const char *)Identifier;
      }
      else {
        uint64_t v6 = *(const char **)Identifier;
      }
    }
    else
    {
      uint64_t v6 = "<null>";
    }
    if (*((void *)this + 5))
    {
      int v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)this + 5);
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
      if (*(char *)(v8 + 23) >= 0) {
        uint64_t v9 = (const char *)v8;
      }
      else {
        uint64_t v9 = *(const char **)v8;
      }
    }
    else
    {
      uint64_t v9 = "<null>";
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::~UsdStage(rootLayer=@%s@, sessionLayer=@%s@)\n", v2, v3, v6, v9);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_Close(this);
  uint64_t v15 = (void **)((char *)this + 1232);
  sub_216CF4B9C(&v15);
  uint64_t v15 = (void **)((char *)this + 1208);
  sub_216981168(&v15);
  uint64_t v10 = (void **)*((void *)this + 149);
  *((void *)this + 149) = 0;
  if (v10) {
    sub_216E12054(this + 1192, v10);
  }
  if (*((unsigned char *)this + 1184)) {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 848));
  }
  uint64_t v11 = (atomic_uint *)*((void *)this + 104);
  if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
  }
  uint64_t v15 = (void **)((char *)this + 792);
  sub_216E11F04(&v15);
  sub_216E11D64((unint64_t *)this + 25);
  sub_2169735B4((uint64_t)this + 152);
  uint64_t v12 = (void **)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v12) {
    sub_216E0BBF8((uint64_t)this + 144, v12);
  }
  sub_216E0BB00((pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)this + 17, 0);
  sub_216E0BA0C((pxrInternal__aapl__pxrReserved__::PcpCache **)this + 16, 0);
  sub_216BBED8C((uint64_t)this + 64);
  long long v13 = (atomic_uint *)*((void *)this + 7);
  if (v13 && atomic_fetch_add_explicit(v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v13 + 8))(v13);
  }
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 5);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 4);
  sub_216859A88((uint64_t *)this + 2, v14);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdStage::~UsdStage(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_Close(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  char v2 = *((unsigned char *)this + 1256);
  *((unsigned char *)this + 1256) = 1;
  uint64_t v4 = this;
  v5[0] = (uint64_t (**)(void))&unk_26C7698A0;
  v5[1] = (uint64_t (**)(void))&v4;
  tbb::interface7::internal::isolate_within_arena(v5, 0);
  uint64_t result = sub_216DE770C((uint64_t *)this + 25);
  *((unsigned char *)this + 1256) = v2;
  return result;
}

void sub_216DE76D4(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 1256) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216DE770C(uint64_t *a1)
{
  for (uint64_t i = 536; i != 584; i += 24)
    *(uint64_t *)((char *)&v3 + i) = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  __dmb(0xBu);
  uint64_t v3 = 0;
  __dmb(0xBu);
  uint64_t v36 = 0;
  memset(v37, 0, 48);
  *(void *)&long long v4 = v37;
  __dmb(0xBu);
  uint64_t v3 = 1;
  if (&v3 != a1) {
    a1 = sub_216873CA8(&v3, a1);
  }
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls((pxrInternal__aapl__pxrReserved__ *)a1) & 1) == 0) {
    sub_216E120A0(&v3);
  }
  return sub_216E11D64((unint64_t *)&v3);
}

void sub_216DE7800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E11D64((unint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiateStage(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _DWORD **a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if (sub_216C4B19C(13)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::_InstantiateStage: Creating new UsdStage\n", v12, v13);
  }
  long long v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v14);
  unsigned __int8 v15 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v15)
  {
    std::operator+<char>();
    long long v16 = std::string::append(v79, "@");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    uint64_t v86 = (uint64_t **)v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v79[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v86 = 0;
  }
  sub_2168E8C88((uint64_t)&v83, "Usd", (char *)__p);
  if (SHIBYTE(v86) < 0) {
    operator delete(__p[0]);
  }
  BOOL v18 = sub_216C4B19C(14);
  BOOL v19 = v18;
  if (v18) {
    uint64_t v20 = mach_absolute_time();
  }
  else {
    uint64_t v20 = 0;
  }
  if (*a1)
  {
    long long v21 = operator new(0x4F0uLL);
    pxrInternal__aapl__pxrReserved__::UsdStage::UsdStage((uint64_t)v21, a1, a2, a3, a4, a5);
    *a6 = (uint64_t)v21;
    long long v22 = (pxrInternal__aapl__pxrReserved__::UsdStageLoadRules *)pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v92);
    if (a5) {
      pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::LoadNone(v22, (uint64_t *)v79);
    }
    else {
      memset(v79, 0, 24);
    }
    uint64_t v23 = sub_216D57D70(a6);
    sub_216CF6034((void *)(v23 + 1232));
    *(std::string *)(v23 + 1232) = v79[0];
    memset(v79, 0, 24);
    __p[0] = v79;
    sub_216CF4B9C((void ***)__p);
    uint64_t v82 = 0;
    long long v81 = 0u;
    memset(v80, 0, sizeof(v80));
    memset(v79, 0, sizeof(v79));
    long long v25 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v24);
    uint64_t v26 = sub_216D57D70(a6);
    sub_216981010(&v89, v25);
    sub_21698105C((_DWORD *)&v89 + 1, (_DWORD *)v25 + 1);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v86 = 0;
    uint64_t v76 = __p;
    LOBYTE(v77) = 0;
    __p[0] = operator new(8uLL);
    __p[1] = __p[0];
    uint64_t v86 = (uint64_t **)((char *)__p[0] + 8);
    __p[1] = sub_216980F74((uint64_t)&v86, &v89, &v90, (_DWORD *)__p[0]);
    sub_216779094(&v76, "instantiating stage");
    pxrInternal__aapl__pxrReserved__::UsdStage::_ComposePrimIndexesInParallel(v26, (uint64_t)__p, (uint64_t *)&v76, (uint64_t)v79);
    if (SHIBYTE(v78) < 0) {
      operator delete(v76);
    }
    uint64_t v76 = __p;
    sub_216981168((void ***)&v76);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
    sub_21697C414(&v89);
    long long v27 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a6);
    uint64_t v29 = pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim(v27, v25, v28);
    *(void *)(sub_216D57D70(a6) + 24) = v29;
    unint64_t v30 = ((uint64_t)(v79[0].__r_.__value_.__l.__size_ - v79[0].__r_.__value_.__r.__words[0]) >> 3) + 1;
    uint64_t v76 = 0;
    v77 = 0;
    uint64_t v78 = 0;
    uint64_t v89 = 0;
    unint64_t v90 = 0;
    unint64_t v91 = 0;
    sub_2168265D4(&v76, v30);
    sub_216A6E72C(&v89, v30);
    uint64_t v31 = sub_216D57D70(a6);
    uint64_t v32 = v31;
    long long v33 = v77;
    if (v77 >= v78)
    {
      uint64_t v35 = ((char *)v77 - (unsigned char *)v76) >> 3;
      if ((unint64_t)(v35 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v36 = ((char *)v78 - (unsigned char *)v76) >> 2;
      if (v36 <= v35 + 1) {
        unint64_t v36 = v35 + 1;
      }
      if ((unint64_t)((char *)v78 - (unsigned char *)v76) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        long long v38 = (char *)sub_21677CB28((uint64_t)&v78, v37);
      }
      else {
        long long v38 = 0;
      }
      long long v39 = &v38[8 * v35];
      uint64_t v40 = &v38[8 * v37];
      *(void *)long long v39 = *(void *)(v32 + 24);
      long long v34 = (uint64_t *)(v39 + 8);
      long long v42 = (char *)v76;
      long long v41 = (char *)v77;
      if (v77 != v76)
      {
        do
        {
          uint64_t v43 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v39 - 1) = v43;
          v39 -= 8;
        }
        while (v41 != v42);
        long long v41 = (char *)v76;
      }
      uint64_t v76 = v39;
      v77 = v34;
      uint64_t v78 = (uint64_t *)v40;
      if (v41) {
        operator delete(v41);
      }
    }
    else
    {
      uint64_t *v77 = *(void *)(v31 + 24);
      long long v34 = v33 + 1;
    }
    v77 = v34;
    uint64_t v44 = v90;
    if ((unint64_t)v90 >= v91)
    {
      uint64_t v45 = (_DWORD *)sub_216981B30(&v89, v25);
    }
    else
    {
      sub_216981010(v90, v25);
      sub_21698105C(v44 + 1, (_DWORD *)v25 + 1);
      uint64_t v45 = v44 + 2;
    }
    unint64_t v90 = v45;
    std::string::size_type v46 = v79[0].__r_.__value_.__r.__words[0];
    if (v79[0].__r_.__value_.__l.__size_ != v79[0].__r_.__value_.__r.__words[0])
    {
      uint64_t v47 = 0;
      do
      {
        std::string::pointer data = v79[1].__r_.__value_.__l.__data_;
        char v49 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a6);
        uint64_t v51 = pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim(v49, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v46 + 8 * v47), v50);
        uint64_t v52 = v51;
        if (v51) {
          *(void *)(v51 + 40) = *((void *)v49 + 3) | 1;
        }
        uint64_t v53 = v77;
        if (v77 >= v78)
        {
          uint64_t v55 = ((char *)v77 - (unsigned char *)v76) >> 3;
          if ((unint64_t)(v55 + 1) >> 61) {
            sub_21677CB10();
          }
          unint64_t v56 = ((char *)v78 - (unsigned char *)v76) >> 2;
          if (v56 <= v55 + 1) {
            unint64_t v56 = v55 + 1;
          }
          if ((unint64_t)((char *)v78 - (unsigned char *)v76) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57) {
            uint64_t v58 = (char *)sub_21677CB28((uint64_t)&v78, v57);
          }
          else {
            uint64_t v58 = 0;
          }
          uint64_t v59 = (uint64_t *)&v58[8 * v55];
          uint64_t *v59 = v52;
          uint64_t v54 = v59 + 1;
          uint64_t v61 = (char *)v76;
          uint64_t v60 = (char *)v77;
          if (v77 != v76)
          {
            do
            {
              uint64_t v62 = *((void *)v60 - 1);
              v60 -= 8;
              *--uint64_t v59 = v62;
            }
            while (v60 != v61);
            uint64_t v60 = (char *)v76;
          }
          uint64_t v76 = v59;
          v77 = v54;
          uint64_t v78 = (uint64_t *)&v58[8 * v57];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          uint64_t *v77 = v51;
          uint64_t v54 = v53 + 1;
        }
        uint64_t v63 = &data[8 * v47];
        v77 = v54;
        uint64_t v64 = v90;
        if ((unint64_t)v90 >= v91)
        {
          uint64_t v65 = (_DWORD *)sub_216981B30(&v89, v63);
        }
        else
        {
          sub_216981010(v90, v63);
          sub_21698105C(v64 + 1, &data[8 * v47 + 4]);
          uint64_t v65 = v64 + 2;
        }
        unint64_t v90 = v65;
        ++v47;
        std::string::size_type v46 = v79[0].__r_.__value_.__r.__words[0];
      }
      while (v47 != (uint64_t)(v79[0].__r_.__value_.__l.__size_ - v79[0].__r_.__value_.__r.__words[0]) >> 3);
    }
    uint64_t v66 = (void *)sub_216D57D70(a6);
    uint64_t v87 = &v89;
    __p[0] = v66;
    __p[1] = &v76;
    uint64_t v86 = &v87;
    v88[0] = (uint64_t (**)(void))&unk_26C769AD8;
    v88[1] = (uint64_t (**)(void))__p;
    tbb::interface7::internal::isolate_within_arena(v88, 0);
    uint64_t v67 = (pxrInternal__aapl__pxrReserved__::PcpCache **)sub_216D57D70(a6);
    pxrInternal__aapl__pxrReserved__::UsdStage::_RegisterPerLayerNotices(v67);
    int v68 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a6);
    pxrInternal__aapl__pxrReserved__::UsdStage::_RegisterResolverChangeNotice(v68);
    pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetWritableCaches((char **)__p);
    uint64_t v69 = (uint64_t *)__p[0];
    int v70 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      do
        pxrInternal__aapl__pxrReserved__::UsdStageCache::Insert(*v69++, a6);
      while (v69 != v70);
      uint64_t v69 = (uint64_t *)__p[0];
    }
    if (v69)
    {
      __p[1] = v69;
      operator delete(v69);
    }
    if (v19)
    {
      uint64_t v71 = mach_absolute_time();
      if (sub_216C4B19C(14))
      {
        double v72 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)(v71 - v20));
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::_InstantiateStage: Time elapsed (s): %f\n", v73, v74, *(void *)&v72);
      }
    }
    __p[0] = &v89;
    sub_216981168((void ***)__p);
    if (v76)
    {
      v77 = (uint64_t *)v76;
      operator delete(v76);
    }
    __p[0] = &v81;
    sub_216981168((void ***)__p);
    __p[0] = (char *)&v80[1] + 8;
    sub_216981168((void ***)__p);
    __p[0] = v80;
    sub_216981168((void ***)__p);
    __p[0] = &v79[1];
    sub_216981168((void ***)__p);
    __p[0] = v79;
    sub_216981168((void ***)__p);
    pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v92);
  }
  else
  {
    *a6 = 0;
  }
  while (v84--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v83);
}

void sub_216DE7EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v43 - 144) = v43 - 136;
  sub_216981168((void ***)(v43 - 144));
  if (__p) {
    operator delete(__p);
  }
  sub_216DE8BFC(&a16);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v43 - 112));
  sub_216E10FB8(v42);
  sub_21684E6B8((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposePrimIndexesInParallel(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (sub_216C4B19C(3))
  {
    long long v8 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a2;
    if ((unint64_t)((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) >= 0x10) {
      unint64_t v9 = 16;
    }
    else {
      unint64_t v9 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
    }
    memset(v27, 0, 24);
    sub_216E1E47C(v27, v8, (_DWORD *)v8 + 2 * v9, v9);
    sub_216D59A34((pxrInternal__aapl__pxrReserved__::SdfPath **)v27);
    if (v34 >= 0) {
      long long v12 = v33;
    }
    else {
      long long v12 = (void ***)v33[0];
    }
    uint64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
    if ((unint64_t)v13 < 0x81)
    {
      p_p = "";
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" (and %zu more)", v10, v11, (v13 >> 3) - 16);
      if (v32 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Composing prim indexes: %s%s\n", v10, v11, v12, p_p);
    if ((unint64_t)v13 >= 0x81 && v32 < 0) {
      operator delete(__p);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    if (sub_216C4B19C(3))
    {
      long long v17 = &v35;
      if (v37 < 0) {
        long long v17 = (void ***)v35;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s", v15, v16, v17);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v35);
    }
    uint64_t v35 = (void **)v27;
    sub_216981168(&v35);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91DC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__cxa_guard_acquire(&qword_267B91DC8);
    if (v26)
    {
      sub_216CF86BC(v26, qword_267B91DB0);
      __cxa_atexit((void (*)(void *))sub_216DE741C, qword_267B91DB0, &dword_216758000);
      __cxa_guard_release(&qword_267B91DC8);
    }
  }
  uint64_t v18 = a1 + 1208;
  BOOL v19 = *(char **)(a1 + 1216);
  uint64_t v20 = *(char **)(a1 + 1208);
  long long v21 = (void *)qword_267B91DB0[0];
  if (v19 - v20 == unk_267B91DB8 - qword_267B91DB0[0])
  {
    while (v20 != v19)
    {
      if (*(void *)v20 != *v21) {
        goto LABEL_31;
      }
      v20 += 8;
      ++v21;
    }
    uint64_t v18 = 0;
  }
LABEL_31:
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v22 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 144);
  *(void *)&v27[0] = v18;
  *((void *)&v27[0] + 1) = a1 + 1232;
  *(void *)&v27[1] = v23;
  v33[0] = (void **)a1;
  long long v24 = *(const char **)(a1 + 1192);
  if (v24)
  {
    if (v24[23] < 0) {
      long long v24 = *(const char **)v24;
    }
  }
  else
  {
    long long v24 = "UsdStages in aggregate";
  }
  pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexesInParallel(v22, (pxrInternal__aapl__pxrReserved__::SdfPath **)a2, (uint64_t)&v35, (uint64_t)v27, (uint64_t)sub_216E1E504, (uint64_t)v33, (uint64_t)sub_216E1E6A8, "Usd", (uint64_t)v24);
  if (v35 != v36) {
    pxrInternal__aapl__pxrReserved__::UsdStage::_ReportPcpErrors(a1, (uint64_t *)&v35, a3);
  }
  uint64_t v30 = 0;
  long long v29 = 0u;
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::ProcessChanges(*(void **)(a1 + 144), (uint64_t *)v27, v25);
  if (a4) {
    sub_216DFBED0(a4, (uint64_t)v27);
  }
  if (*(void *)&v28[0] != *((void *)&v28[0] + 1)) {
    pxrInternal__aapl__pxrReserved__::UsdStage::_ComposePrimIndexesInParallel(a1, (char *)&v28[1] + 8, a3, a4);
  }
  v33[0] = (void **)&v29;
  sub_216981168(v33);
  v33[0] = (void **)&v28[1] + 1;
  sub_216981168(v33);
  v33[0] = (void **)v28;
  sub_216981168(v33);
  v33[0] = (void **)&v27[1] + 1;
  sub_216981168(v33);
  v33[0] = (void **)v27;
  sub_216981168(v33);
  *(void *)&v27[0] = &v35;
  sub_216787968((void ***)v27);
}

void sub_216DE83C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    long long v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_PrimData", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    long long v6 = 0;
    BOOL v7 = 0;
  }
  v15[1] = (uint64_t)v6;
  int v16 = v7;
  long long v8 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData::Usd_PrimData(v8, this, a2);
  v15[0] = (uint64_t)v8;
  unint64_t v9 = (unsigned int *)sub_216E1B7B4((uint64_t)this + 776, a2, v15);
  if (sub_216E18B24((uint64_t *)this + 25, 1, v9 + 4, 0, 0, 0, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_216E18E3C, v9))
  {
    uint64_t v10 = v15[0];
  }
  else
  {
    v13[0] = "usd/stage.cpp";
    v13[1] = "_InstantiatePrim";
    uint64_t v13[2] = 2795;
    void v13[3] = "Usd_PrimDataPtr pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim(const SdfPath &)";
    char v14 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Newly instantiated prim <%s> already present in _primMap", Text);
    uint64_t v10 = 0;
  }
  int v16 = v7 - 1;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    int v16 = -1;
  }
  return v10;
}

void sub_216DE85C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrototypePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim(this, a2, a3);
  if (result) {
    *(void *)(result + 40) = *((void *)this + 3) | 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeSubtreesInParallel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  v4[2] = &v5;
  uint64_t v5 = a3;
  v6[0] = (uint64_t (**)(void))&unk_26C769AD8;
  v6[1] = (uint64_t (**)(void))v4;
  return tbb::interface7::internal::isolate_within_arena(v6, 0);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_RegisterPerLayerNotices(pxrInternal__aapl__pxrReserved__::PcpCache **this)
{
  uint64_t UsedLayersRevision = pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayersRevision(this[16]);
  uint64_t v5 = this[24];
  if (v5) {
    BOOL v6 = v5 == (pxrInternal__aapl__pxrReserved__::PcpCache *)UsedLayersRevision;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    return;
  }
  BOOL v7 = (pxrInternal__aapl__pxrReserved__::PcpCache *)UsedLayersRevision;
  pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayers(this[16], v3, v4, (uint64_t)&v38);
  this[24] = v7;
  long long v8 = this[99];
  unint64_t v9 = this[100];
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  uint64_t v10 = v38;
  sub_216DFBF74((uint64_t *)&v36, (unint64_t)v39[1]);
  sub_216D61884(&v34, (uint64_t)this);
  long long v11 = (long long *)(this + 99);
  while (v10 != v39)
  {
    if (v8 == v9 || (unint64_t v12 = sub_216851B24((uint64_t)(v10 + 4)), v12 < sub_216851B24((uint64_t)v8)))
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfNotice *)sub_216E1E8D4(&v34, (unint64_t)pxrInternal__aapl__pxrReserved__::UsdStage::_HandleLayersDidChange, 0, v10 + 4);
      pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v13, (char **)&v30);
      uint64_t v14 = v10[5];
      uint64_t v31 = (void **)v10[4];
      uint64_t v32 = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 1u, memory_order_relaxed);
      }
      long long v33 = v30;
      long long v30 = 0uLL;
      sub_216DFC008((uint64_t *)&v36, (uint64_t)&v31);
      uint64_t v15 = *((void *)&v33 + 1);
      if (*((void *)&v33 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      uint64_t v16 = v32;
      if (v32 && atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      uint64_t v17 = *((void *)&v30 + 1);
      if (*((void *)&v30 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      uint64_t v18 = (void *)v10[1];
      if (v18)
      {
        do
        {
          uint64_t v10 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v19 = v10;
          uint64_t v10 = (void *)v10[2];
        }
        while ((void *)*v10 != v19);
      }
    }
    else
    {
      unint64_t v20 = sub_216851B24((uint64_t)v8);
      if (v20 >= sub_216851B24((uint64_t)(v10 + 4)))
      {
        long long v21 = (void *)*((void *)&v36 + 1);
        if (*((void *)&v36 + 1) >= (unint64_t)v37)
        {
          uint64_t v24 = sub_216E1EFA0((uint64_t *)&v36, v8);
        }
        else
        {
          **((void **)&v36 + 1) = *(void *)v8;
          uint64_t v22 = *((void *)v8 + 1);
          v21[1] = v22;
          if (v22) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 1u, memory_order_relaxed);
          }
          void v21[2] = *((void *)v8 + 2);
          uint64_t v23 = *((void *)v8 + 3);
          v21[3] = v23;
          if (v23) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 1u, memory_order_relaxed);
          }
          uint64_t v24 = (uint64_t)(v21 + 4);
        }
        *((void *)&v36 + 1) = v24;
        long long v8 = (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)v8 + 32);
        long long v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            uint64_t v10 = v25;
            long long v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = v10;
            uint64_t v10 = (void *)v10[2];
          }
          while ((void *)*v10 != v26);
        }
      }
      else
      {
LABEL_28:
        pxrInternal__aapl__pxrReserved__::TfNotice::Revoke((uint64_t *)v8 + 2);
        long long v8 = (pxrInternal__aapl__pxrReserved__::PcpCache *)((char *)v8 + 32);
      }
    }
  }
  if (v8 != v9) {
    goto LABEL_28;
  }
  long long v27 = *v11;
  *long long v11 = v36;
  long long v36 = v27;
  long long v28 = this[101];
  this[101] = v37;
  uint64_t v37 = v28;
  uint64_t v29 = v35;
  if (v35 && atomic_fetch_add_explicit((atomic_uint *volatile)(v35 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v31 = (void **)&v36;
  sub_216E11F04(&v31);
  sub_21699DA30((uint64_t)&v38, v39[0]);
}

void sub_216DE89E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  a11 = (void **)&a17;
  sub_216E11F04(&a11);
  sub_21699DA30((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_RegisterResolverChangeNotice(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  sub_216D61884(&v6, (uint64_t)this);
  char v2 = (pxrInternal__aapl__pxrReserved__::TfNotice *)sub_216E1F0B8(&v6, (uint64_t)pxrInternal__aapl__pxrReserved__::UsdStage::_HandleResolverDidChange, 0);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v2, (char **)&v8);
  uint64_t v3 = (atomic_uint *)*((void *)this + 104);
  *(_OWORD *)((char *)this + 824) = v8;
  *((void *)&v8 + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)&v8 + 1);
    *(void *)&long long v8 = 0;
    if (*((void *)&v8 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    *(void *)&long long v8 = 0;
  }
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DE8BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

void **sub_216DE8BFC(void **a1)
{
  uint64_t v3 = a1 + 12;
  sub_216981168(&v3);
  uint64_t v3 = a1 + 9;
  sub_216981168(&v3);
  uint64_t v3 = a1 + 6;
  sub_216981168(&v3);
  uint64_t v3 = a1 + 3;
  sub_216981168(&v3);
  uint64_t v3 = a1;
  sub_216981168(&v3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateNew@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v6)
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v22, "@");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v19 = 0;
  }
  sub_2168E8C88((uint64_t)&v20, "Usd", (char *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  sub_216DE8FD4(a1, &v17);
  if (v17)
  {
    sub_216ABBA60((uint64_t *)&v22, (uint64_t *)&v17);
    sub_216ABBA60(&v14, (uint64_t *)&v17);
    sub_216DE9288(&v14, (uint64_t *)&v16);
    sub_216ABBA60((uint64_t *)__p, (uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v22, (uint64_t *)__p, a2, a3);
    unint64_t v9 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v9 + 8))(v9);
    }
    sub_216ABB798(&v16);
    uint64_t v10 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    std::string::size_type size = v22.__r_.__value_.__l.__size_;
    if (v22.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v22.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
    uint64_t result = (uint64_t)sub_216ABB798(&v17);
  }
  else
  {
    uint64_t result = (uint64_t)sub_216ABB798(&v17);
    *a3 = 0;
  }
  while (v21--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
  return result;
}

void sub_216DE8E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (*(char *)(v22 - 33) < 0) {
    operator delete(*(void **)(v22 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_216DE8FD4(uint64_t a1@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  long long v8 = (char *)&v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v8, a2);
  sub_2167877AC((uint64_t)&v8, v9);
  if (!*a2)
  {
    unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v5 = v13;
    unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
    if (v5 >= v6
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13, (atomic_ullong *)v4))
    {
      long long v8 = "usd/stage.cpp";
      unint64_t v9 = "_CreateNewLayer";
      uint64_t v10 = 911;
      long long v11 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::_CreateNewLayer(const std::string &)";
      char v12 = 0;
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v7 = (const char *)a1;
      }
      else {
        uint64_t v7 = *(const char **)a1;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to CreateNew layer with identifier '%s'", v7);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
}

void sub_216DE90D4(_Unwind_Exception *a1)
{
  sub_216ABB798(v1);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v2 - 24));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Open(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  long long v8 = sub_21697CF14(a1);
  if (v9 & 1 | (unint64_t)v8)
  {
    if (sub_216C4B19C(13))
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v10);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v12 = Identifier;
      }
      else {
        uint64_t v12 = *(void *)Identifier;
      }
      unint64_t v13 = sub_21697CF14(a2);
      if (v14 & 1 | (unint64_t)v13)
      {
        uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
        if (*(char *)(v16 + 23) >= 0) {
          uint64_t v17 = (const char *)v16;
        }
        else {
          uint64_t v17 = *(const char **)v16;
        }
      }
      else
      {
        uint64_t v17 = "<null>";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a3, (uint64_t)__p);
      if (v22 >= 0) {
        uint64_t v20 = __p;
      }
      else {
        uint64_t v20 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::Open(rootLayer=@%s@, sessionLayer=@%s@, load=%s)\n", v18, v19, v12, v17, v20);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_216DEB82C(a3, a1, a2, a4);
  }
  else
  {
    __p[0] = "usd/stage.cpp";
    __p[1] = "Open";
    uint64_t v22 = 1249;
    uint64_t v23 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Open(const SdfLayerHandle &, const SdfLayerH"
          "andle &, InitialLoadSet)";
    char v24 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a4 = 0;
  }
}

void sub_216DE926C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216DE9288(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayNameFromIdentifier(__p, Identifier);
  pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)__p, 46, &v11);
  unint64_t v5 = std::string::append(&v11, "-session.usda");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&v12, (pxrInternal__aapl__pxrReserved__::TfToken *)&v7, a2);
  sub_2167877AC((uint64_t)&v7, v8[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216DE9354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_2167877AC((uint64_t)&a10, a11);
  if (*(char *)(v24 - 25) < 0) {
    operator delete(*(void **)(v24 - 48));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateNew@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    std::operator+<char>();
    char v9 = std::string::append(&v18, "@");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v15 = 0;
  }
  sub_2168E8C88((uint64_t)&v16, "Usd", (char *)__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  sub_216DE8FD4(a1, __p);
  if (__p[0])
  {
    sub_216ABBA60((uint64_t *)&v18, (uint64_t *)__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v18, a2, a3, a4);
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
    if (v18.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v18.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
    uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  }
  else
  {
    uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    *a4 = 0;
  }
  while (v17--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return result;
}

void sub_216DE9520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateNew@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, unsigned int a3@<W2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    std::operator+<char>();
    char v9 = std::string::append(&v18, "@");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v15 = 0;
  }
  sub_2168E8C88((uint64_t)&v16, "Usd", (char *)__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  sub_216DE8FD4(a1, __p);
  if (__p[0])
  {
    sub_216ABBA60((uint64_t *)&v18, (uint64_t *)__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v18, a2, a3, a4);
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
    if (v18.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v18.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
    uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  }
  else
  {
    uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    *a4 = 0;
  }
  while (v17--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return result;
}

void sub_216DE9730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Open(uint64_t *a1@<X0>, std::string *a2@<X1>, unsigned int a3@<W2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  unsigned __int8 v8 = sub_21697CF14(a1);
  if (v9 & 1 | (unint64_t)v8)
  {
    if (sub_216C4B19C(13))
    {
      long long v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v10);
      int v12 = *(char *)(Identifier + 23);
      uint64_t v13 = *(void *)Identifier;
      pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString(a2, &v23);
      int v14 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = v23.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a3, (uint64_t)__p);
      std::string v18 = &v23;
      if (v14 < 0) {
        std::string v18 = (std::string *)v15;
      }
      if (v12 >= 0) {
        uint64_t v19 = Identifier;
      }
      else {
        uint64_t v19 = v13;
      }
      if (v22 >= 0) {
        uint64_t v20 = __p;
      }
      else {
        uint64_t v20 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::Open(rootLayer=@%s@, pathResolverContext=%s, load=%s)\n", v16, v17, v19, v18, v20);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
    sub_216DEBA9C(a3, a1, (uint64_t *)a2, a4);
  }
  else
  {
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v23.__r_.__value_.__l.__size_ = (std::string::size_type)"Open";
    v23.__r_.__value_.__r.__words[2] = 1269;
    uint64_t v24 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Open(const SdfLayerHandle &, const ArResolve"
          "rContext &, InitialLoadSet)";
    char v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a4 = 0;
  }
}

void sub_216DE9930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateNew@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X2>, unsigned int a4@<W3>, pxrInternal__aapl__pxrReserved__ **a5@<X8>)
{
  unsigned __int8 v10 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v10)
  {
    std::operator+<char>();
    std::string v11 = std::string::append(&v20, "@");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v17 = 0;
  }
  sub_2168E8C88((uint64_t)&v18, "Usd", (char *)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_216DE8FD4(a1, __p);
  if (__p[0])
  {
    sub_216ABBA60((uint64_t *)&v20, (uint64_t *)__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v20, a2, a3, a4, a5);
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
    if (v20.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v20.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
    uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  }
  else
  {
    uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    *a5 = 0;
  }
  while (v19--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v18);
  return result;
}

void sub_216DE9AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Open(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X2>, unsigned int a4@<W3>, pxrInternal__aapl__pxrReserved__ **a5@<X8>)
{
  unsigned __int8 v10 = sub_21697CF14(a1);
  if (v11 & 1 | (unint64_t)v10)
  {
    if (sub_216C4B19C(13))
    {
      long long v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v14 = Identifier;
      }
      else {
        uint64_t v14 = *(void *)Identifier;
      }
      std::string::size_type v15 = sub_21697CF14(a2);
      if (v16 & 1 | (unint64_t)v15)
      {
        std::string::size_type v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v17);
        if (*(char *)(v18 + 23) >= 0) {
          int v19 = (const char *)v18;
        }
        else {
          int v19 = *(const char **)v18;
        }
      }
      else
      {
        int v19 = "<null>";
      }
      pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString(a3, &v28);
      int v20 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      std::string::size_type v21 = v28.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a4, (uint64_t)__p);
      uint64_t v24 = &v28;
      if (v20 < 0) {
        uint64_t v24 = (std::string *)v21;
      }
      if (v27 >= 0) {
        char v25 = __p;
      }
      else {
        char v25 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::Open(rootLayer=@%s@, sessionLayer=@%s@, pathResolverContext=%s, load=%s)\n", v22, v23, v14, v19, v24, v25);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
    }
    sub_216DEBD0C(a4, a1, a2, (uint64_t *)a3, a5);
  }
  else
  {
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v28.__r_.__value_.__l.__size_ = (std::string::size_type)"Open";
    v28.__r_.__value_.__r.__words[2] = 1291;
    uint64_t v29 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Open(const SdfLayerHandle &, const SdfLayerH"
          "andle &, const ArResolverContext &, InitialLoadSet)";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a5 = 0;
  }
}

void sub_216DE9D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(unsigned int a1@<W0>, pxrInternal__aapl__pxrReserved__ **a2@<X8>)
{
  sub_216779094(&__p, "tmp.usda");
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(&__p, a1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216DE9DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(const std::string *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  v7[0] = 0;
  v7[1] = 0;
  long long v6 = v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v6, (uint64_t *)&v8);
  sub_216ABBA60(&v9, (uint64_t *)&v8);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open(&v9, a2, a3);
  uint64_t v5 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_216ABB798(&v8);
  sub_2167877AC((uint64_t)&v6, v7[0]);
}

void sub_216DE9E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  sub_216ABB798(&a12);
  sub_2167877AC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Open(uint64_t *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  long long v6 = sub_21697CF14(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    if (sub_216C4B19C(13))
    {
      unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v8);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v10 = Identifier;
      }
      else {
        uint64_t v10 = *(void *)Identifier;
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a2, (uint64_t)__p);
      if (v15 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::Open(rootLayer=@%s@, load=%s)\n", v11, v12, v10, v13);
      if (SHIBYTE(v15) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_216DEB55C(a2, a1, a3);
  }
  else
  {
    __p[0] = "usd/stage.cpp";
    __p[1] = "Open";
    uint64_t v15 = 1230;
    char v16 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Open(const SdfLayerHandle &, InitialLoadSet)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a3 = 0;
  }
}

void sub_216DEA014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(const std::string *a1@<X0>, std::string *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  unsigned int v4 = a3;
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd", 0, a3);
    BOOL v10 = v9 != 0;
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
  }
  int v20 = v9;
  int v21 = v10;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v15, (uint64_t *)&v17);
  sub_216ABBA60(&v18, (uint64_t *)&v17);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open(&v18, a2, v4, a4);
  uint64_t v11 = v19;
  if (v19 && atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_216ABB798(&v17);
  sub_2167877AC((uint64_t)&v15, v16[0]);
  int v12 = v21--;
  if (v12)
  {
    uint64_t v13 = (uint64_t)v20;
    int v14 = v12 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
      int v21 = v14--;
    }
    while (v14 != -2);
  }
}

void sub_216DEA170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v16 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  sub_216ABB798(&a12);
  sub_2167877AC((uint64_t)&a9, a10);
  sub_21684E6B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(const std::string *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  unsigned int v4 = a3;
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd", 0, a3);
    BOOL v10 = v9 != 0;
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
  }
  int v20 = v9;
  int v21 = v10;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v15, (uint64_t *)&v17);
  sub_216ABBA60(&v18, (uint64_t *)&v17);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open(&v18, a2, v4, a4);
  uint64_t v11 = v19;
  if (v19 && atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_216ABB798(&v17);
  sub_2167877AC((uint64_t)&v15, v16[0]);
  int v12 = v21--;
  if (v12)
  {
    uint64_t v13 = (uint64_t)v20;
    int v14 = v12 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
      int v21 = v14--;
    }
    while (v14 != -2);
  }
}

void sub_216DEA32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v16 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  sub_216ABB798(&a12);
  sub_2167877AC((uint64_t)&a9, a10);
  sub_21684E6B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(const std::string *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X2>, unsigned int a4@<W3>, pxrInternal__aapl__pxrReserved__ **a5@<X8>)
{
  unsigned __int8 v10 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v10)
  {
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd", 0, (char *)a3);
    BOOL v12 = v11 != 0;
  }
  else
  {
    uint64_t v11 = 0;
    BOOL v12 = 0;
  }
  char v22 = v11;
  int v23 = v12;
  v18[0] = 0;
  v18[1] = 0;
  char v17 = v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v17, (uint64_t *)&v19);
  sub_216ABBA60(&v20, (uint64_t *)&v19);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open(&v20, a2, a3, a4, a5);
  uint64_t v13 = v21;
  if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_216ABB798(&v19);
  sub_2167877AC((uint64_t)&v17, v18[0]);
  int v14 = v23--;
  if (v14)
  {
    uint64_t v15 = (uint64_t)v22;
    int v16 = v14 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
      int v23 = v16--;
    }
    while (v16 != -2);
  }
}

void sub_216DEA4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v16 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  sub_216ABB798(&a12);
  sub_2167877AC((uint64_t)&a9, a10);
  sub_21684E6B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Open@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v6)
  {
    std::operator+<char>();
    char v7 = std::string::append(&v13, "@");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v18 = 0;
  }
  sub_2168E8C88((uint64_t)&v19, "Usd", (char *)__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  memset(&v13, 0, sizeof(v13));
  sub_216DEA7F0(a1, (pxrInternal__aapl__pxrReserved__::ArResolverContext *)&v13, &v16);
  __p[0] = &v13;
  sub_216787968((void ***)__p);
  if (v16)
  {
    sub_216ABBA60((uint64_t *)&v13, (uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v13, a2, a3);
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
    if (v13.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v13.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
  }
  else
  {
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v13.__r_.__value_.__l.__size_ = (std::string::size_type)"Open";
    v13.__r_.__value_.__r.__words[2] = 1062;
    int v14 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Open(const std::string &, InitialLoadSet)";
    char v15 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      unsigned __int8 v10 = (const char *)a1;
    }
    else {
      unsigned __int8 v10 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open layer @%s@", v10);
    *a3 = 0;
  }
  for (uint64_t result = (uint64_t)sub_216ABB798(&v16); v20--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v19))
    ;
  return result;
}

void sub_216DEA744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_216ABB798(&a19);
  sub_21684E6B8(v25 - 48);
  _Unwind_Resume(a1);
}

void sub_216DEA7F0(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::ArResolverContext *a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  v13[0] = 0;
  char v14 = 0;
  if (*(void *)a2 != *((void *)a2 + 1)) {
    sub_216E0BF7C((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v13, a2);
  }
  v11[0] = 0;
  v11[1] = 0;
  unsigned __int8 v10 = (uint64_t *)v11;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
  if (!v5) {
    uint64_t v5 = sub_216E11CD8(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
  }
  if ((*((void *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (const std::string *)((*((void *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  char v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if (!v7) {
    char v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA11E8(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  }
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) != 0) {
    long long v8 = (uint64_t *)((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    long long v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  BOOL v12 = (long long *)v8;
  uint64_t v9 = sub_21677B174(&v10, (const void **)v8, (uint64_t)&unk_2174BFD90, &v12);
  std::string::operator=((std::string *)(v9 + 7), EmptyString);
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1, &v10, a3);
  sub_2167877AC((uint64_t)&v10, v11[0]);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v13);
  }
}

void sub_216DEA948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a21) {
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Open@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::ArResolverContext *a2@<X1>, unsigned int a3@<W2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v15, "@");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v19 = 0;
  }
  sub_2168E8C88((uint64_t)&v20, "Usd", (char *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  sub_216DEA7F0(a1, a2, __p);
  if (__p[0])
  {
    sub_216ABBA60((uint64_t *)&v15, (uint64_t *)__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v15, (std::string *)a2, a3, a4);
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
    if (v15.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v15.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
  }
  else
  {
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v15.__r_.__value_.__l.__size_ = (std::string::size_type)"Open";
    v15.__r_.__value_.__r.__words[2] = 1079;
    uint64_t v16 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Open(const std::string &, const ArResolverCo"
          "ntext &, InitialLoadSet)";
    char v17 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      BOOL v12 = (const char *)a1;
    }
    else {
      BOOL v12 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open layer @%s@", v12);
    *a4 = 0;
  }
  for (uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
        v21--;
  return result;
}

void sub_216DEAB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a18);
  sub_21684E6B8(v23 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v15, "@");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v20 = 0;
  }
  sub_2168E8C88((uint64_t)&v21, "Usd", (char *)__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  memset(&v15, 0, sizeof(v15));
  sub_216DEA7F0(a1, (pxrInternal__aapl__pxrReserved__::ArResolverContext *)&v15, &v18);
  __p[0] = &v15;
  sub_216787968((void ***)__p);
  if (v18)
  {
    sub_216ABBA60((uint64_t *)&v15, (uint64_t *)&v18);
    pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked((uint64_t *)&v15, a2, a3, a4);
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
    if (v15.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v15.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
  }
  else
  {
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v15.__r_.__value_.__l.__size_ = (std::string::size_type)"OpenMasked";
    v15.__r_.__value_.__r.__words[2] = 1096;
    uint64_t v16 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(const std::string &, const UsdSta"
          "gePopulationMask &, InitialLoadSet)";
    char v17 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      BOOL v12 = (const char *)a1;
    }
    else {
      BOOL v12 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open layer @%s@", v12);
    *a4 = 0;
  }
  for (uint64_t result = (uint64_t)sub_216ABB798(&v18); v22--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21))
    ;
  return result;
}

void sub_216DEADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_216ABB798(&a19);
  sub_21684E6B8(v25 - 64);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(uint64_t *a1@<X0>, _DWORD **a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v8 = sub_21697CF14(a1);
  if (v9 & 1 | (unint64_t)v8)
  {
    if (sub_216C4B19C(13))
    {
      long long v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v10);
      int v12 = *(char *)(Identifier + 23);
      uint64_t v13 = *(void *)Identifier;
      sub_216DEBF8C(a2);
      int v14 = SHIBYTE(v27);
      std::string v15 = (void **)v26[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a3, (uint64_t)__p);
      std::string::size_type v18 = v26;
      if (v14 < 0) {
        std::string::size_type v18 = v15;
      }
      if (v12 >= 0) {
        uint64_t v19 = Identifier;
      }
      else {
        uint64_t v19 = v13;
      }
      if (v25 >= 0) {
        std::string::size_type v20 = __p;
      }
      else {
        std::string::size_type v20 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::OpenMasked(rootLayer=@%s@, mask=%s, load=%s)\n", v16, v17, v19, v18, v20);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(v26[0]);
      }
    }
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1[1];
    if (v21)
    {
      if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a1;
      }
      else {
        uint64_t v21 = 0;
      }
    }
    uint64_t v23 = v21;
    sub_2168BD80C((uint64_t *)&v23);
    sub_216DE9288(a1, (uint64_t *)&v22);
    sub_216DEC0D4(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiateStage((uint64_t *)&v23, &v22, (uint64_t)v26, a2, a3, a4);
    __p[0] = v26;
    sub_216787968((void ***)__p);
    sub_216ABB798(&v22);
    sub_216ABB798(&v23);
  }
  else
  {
    v26[0] = "usd/stage.cpp";
    v26[1] = "OpenMasked";
    uint64_t v27 = 1316;
    std::string v28 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(const SdfLayerHandle &, const Usd"
          "StagePopulationMask &, InitialLoadSet)";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a4 = 0;
  }
}

void sub_216DEB034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::ArResolverContext *a2@<X1>, _DWORD **a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v10 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v10)
  {
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v17, "@");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    std::string::size_type v21 = 0;
  }
  sub_2168E8C88((uint64_t)&v22, "Usd", (char *)__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  sub_216DEA7F0(a1, a2, __p);
  if (__p[0])
  {
    sub_216ABBA60((uint64_t *)&v17, (uint64_t *)__p);
    pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked((uint64_t *)&v17, (std::string *)a2, a3, a4, a5);
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
    if (v17.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v17.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
  }
  else
  {
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)"OpenMasked";
    v17.__r_.__value_.__r.__words[2] = 1114;
    std::string::size_type v18 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(const std::string &, const ArReso"
          "lverContext &, const UsdStagePopulationMask &, InitialLoadSet)";
    char v19 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      int v14 = (const char *)a1;
    }
    else {
      int v14 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open layer @%s@", v14);
    *a5 = 0;
  }
  for (uint64_t result = (uint64_t)sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
        v23--;
  return result;
}

void sub_216DEB26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a18);
  sub_21684E6B8(v23 - 64);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(uint64_t *a1@<X0>, std::string *a2@<X1>, _DWORD **a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v10 = sub_21697CF14(a1);
  if (v11 & 1 | (unint64_t)v10)
  {
    if (sub_216C4B19C(13))
    {
      long long v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v14 = Identifier;
      }
      else {
        uint64_t v14 = *(void *)Identifier;
      }
      std::string v15 = &v27;
      pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString(a2, &v27);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v15 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      sub_216DEBF8C(a3);
      int v16 = v26;
      std::string v17 = (void **)v25[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a4, (uint64_t)__p);
      std::string::size_type v20 = v25;
      if (v16 < 0) {
        std::string::size_type v20 = v17;
      }
      if (v24 >= 0) {
        std::string::size_type v21 = __p;
      }
      else {
        std::string::size_type v21 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::OpenMasked(rootLayer=@%s@, pathResolverContext=%s, mask=%s, load=%s)\n", v18, v19, v14, v15, v20, v21);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v22 = a1[1];
    if (v22)
    {
      if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
        std::string::size_type v22 = *a1;
      }
      else {
        std::string::size_type v22 = 0;
      }
    }
    v27.__r_.__value_.__r.__words[0] = v22;
    sub_2168BD80C((uint64_t *)&v27);
    sub_216DE9288(a1, (uint64_t *)v25);
    pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiateStage((uint64_t *)&v27, v25, (uint64_t)a2, a3, a4, a5);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v25);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v27);
  }
  else
  {
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)"OpenMasked";
    v27.__r_.__value_.__r.__words[2] = 1370;
    std::string v28 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(const SdfLayerHandle &, const ArR"
          "esolverContext &, const UsdStagePopulationMask &, InitialLoadSet)";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a5 = 0;
  }
}

void sub_216DEB4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_216DEB55C(int a1@<W0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetReadableCaches((char **)&__p);
  unsigned __int8 v6 = (pxrInternal__aapl__pxrReserved__ **)__p;
  char v7 = (pxrInternal__aapl__pxrReserved__ **)v21;
  if (__p == v21)
  {
    BOOL v8 = 1;
    if (__p)
    {
LABEL_5:
      std::string::size_type v21 = (const char *)v6;
      operator delete(v6);
    }
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdStageCache::FindOneMatching(*v6, a2, a3);
      BOOL v8 = *a3 == 0;
      if (*a3) {
        break;
      }
      sub_216E10FB8(a3);
      ++v6;
    }
    while (v6 != v7);
    unsigned __int8 v6 = (pxrInternal__aapl__pxrReserved__ **)__p;
    if (__p) {
      goto LABEL_5;
    }
  }
  if (v8)
  {
    *a3 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetWritableCaches(&v29);
    char v9 = v30;
    if (v29 == v30)
    {
      uint64_t v16 = *a2;
      uint64_t v15 = a2[1];
      std::string __p = &unk_26C769C68;
      std::string::size_type v21 = 0;
      uint64_t v22 = v16;
      uint64_t v23 = (const char *)v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 1u, memory_order_relaxed);
      }
      char v24 = 0;
      char v25 = 0;
      char v26 = 0;
      char v27 = 0;
      int v28 = a1;
      sub_216E124C0((uint64_t)&__p, (uint64_t *)&v18);
      std::string v17 = *a3;
      *a3 = v18;
      std::string::size_type v18 = 0;
      sub_2168BD378((int)a3, v17);
      sub_216E10FB8(&v18);
      sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
    }
    else
    {
      unsigned __int8 v10 = v29 + 8;
      do
      {
        uint64_t v11 = *((void *)v10 - 1);
        std::string __p = &unk_26C769C68;
        std::string::size_type v21 = 0;
        uint64_t v12 = a2[1];
        uint64_t v22 = *a2;
        uint64_t v23 = (const char *)v12;
        if (v12) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
        }
        char v24 = 0;
        char v25 = 0;
        char v26 = 0;
        char v27 = 0;
        int v28 = a1;
        pxrInternal__aapl__pxrReserved__::UsdStageCache::RequestStage(v11, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&__p, (uint64_t)&v18);
        sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
        if (!*a3)
        {
          *a3 = v18;
          sub_2168BD80C((uint64_t *)&v18);
          sub_2168BD378((int)a3, 0);
        }
        int v13 = v19;
        sub_216E10FB8(&v18);
        if (v13) {
          break;
        }
        BOOL v14 = v10 == v9;
        v10 += 8;
      }
      while (!v14);
    }
    if (!*a3)
    {
      std::string __p = "usd/stage.cpp";
      std::string::size_type v21 = "_OpenImpl";
      uint64_t v22 = 1221;
      uint64_t v23 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::_OpenImpl(InitialLoadSet, const Args &...)"
            " [Args = <pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>]";
      char v24 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "stage", 0);
    }
    if (v29)
    {
      char v30 = v29;
      operator delete(v29);
    }
  }
}

void sub_216DEB7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v16 = *(void **)(v14 - 88);
  if (v16)
  {
    *(void *)(v14 - 80) = v16;
    operator delete(v16);
  }
  sub_216E10FB8(v13);
  _Unwind_Resume(a1);
}

void sub_216DEB82C(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetReadableCaches((char **)&__p);
  BOOL v8 = (pxrInternal__aapl__pxrReserved__ **)__p;
  char v9 = (pxrInternal__aapl__pxrReserved__ **)v20;
  if (__p == v20)
  {
    BOOL v10 = 1;
    if (__p)
    {
LABEL_5:
      std::string::size_type v20 = (const char *)v8;
      operator delete(v8);
    }
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdStageCache::FindOneMatching(*v8, a2, a3, a4);
      BOOL v10 = *a4 == 0;
      if (*a4) {
        break;
      }
      sub_216E10FB8(a4);
      ++v8;
    }
    while (v8 != v9);
    BOOL v8 = (pxrInternal__aapl__pxrReserved__ **)__p;
    if (__p) {
      goto LABEL_5;
    }
  }
  if (v10)
  {
    *a4 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetWritableCaches(&v24);
    uint64_t v11 = v25;
    if (v24 == v25)
    {
      sub_216E12B64((uint64_t)&__p, a1, a2, a3);
      sub_216E124C0((uint64_t)&__p, (uint64_t *)&v17);
      uint64_t v16 = *a4;
      *a4 = v17;
      std::string v17 = 0;
      sub_2168BD378((int)a4, v16);
      sub_216E10FB8(&v17);
      sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
    }
    else
    {
      uint64_t v12 = v24 + 8;
      do
      {
        uint64_t v13 = *((void *)v12 - 1);
        sub_216E12B64((uint64_t)&__p, a1, a2, a3);
        pxrInternal__aapl__pxrReserved__::UsdStageCache::RequestStage(v13, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&__p, (uint64_t)&v17);
        sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
        if (!*a4)
        {
          *a4 = v17;
          sub_2168BD80C((uint64_t *)&v17);
          sub_2168BD378((int)a4, 0);
        }
        int v14 = v18;
        sub_216E10FB8(&v17);
        if (v14) {
          break;
        }
        BOOL v15 = v12 == v11;
        v12 += 8;
      }
      while (!v15);
    }
    if (!*a4)
    {
      std::string __p = "usd/stage.cpp";
      std::string::size_type v20 = "_OpenImpl";
      uint64_t v21 = 1221;
      uint64_t v22 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::_OpenImpl(InitialLoadSet, const Args &...)"
            " [Args = <pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "stage", 0);
    }
    if (v24)
    {
      char v25 = v24;
      operator delete(v24);
    }
  }
}

void sub_216DEBA1C(_Unwind_Exception *a1)
{
  unsigned int v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(void *)(v2 - 80) = v4;
    operator delete(v4);
  }
  sub_216E10FB8(v1);
  _Unwind_Resume(a1);
}

void sub_216DEBA84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x216DEBA7CLL);
}

void sub_216DEBA9C(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, pxrInternal__aapl__pxrReserved__ **a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetReadableCaches((char **)&__p);
  BOOL v8 = (pxrInternal__aapl__pxrReserved__ **)__p;
  char v9 = (pxrInternal__aapl__pxrReserved__ **)v20;
  if (__p == v20)
  {
    BOOL v10 = 1;
    if (__p)
    {
LABEL_5:
      std::string::size_type v20 = (const char *)v8;
      operator delete(v8);
    }
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdStageCache::FindOneMatching(*v8, a2, a3, a4);
      BOOL v10 = *a4 == 0;
      if (*a4) {
        break;
      }
      sub_216E10FB8(a4);
      ++v8;
    }
    while (v8 != v9);
    BOOL v8 = (pxrInternal__aapl__pxrReserved__ **)__p;
    if (__p) {
      goto LABEL_5;
    }
  }
  if (v10)
  {
    *a4 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetWritableCaches(&v24);
    uint64_t v11 = v25;
    if (v24 == v25)
    {
      sub_216E12BC8((uint64_t)&__p, a1, a2, (void **)a3);
      sub_216E124C0((uint64_t)&__p, (uint64_t *)&v17);
      uint64_t v16 = *a4;
      *a4 = v17;
      std::string v17 = 0;
      sub_2168BD378((int)a4, v16);
      sub_216E10FB8(&v17);
      sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
    }
    else
    {
      uint64_t v12 = v24 + 8;
      do
      {
        uint64_t v13 = *((void *)v12 - 1);
        sub_216E12BC8((uint64_t)&__p, a1, a2, (void **)a3);
        pxrInternal__aapl__pxrReserved__::UsdStageCache::RequestStage(v13, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&__p, (uint64_t)&v17);
        sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
        if (!*a4)
        {
          *a4 = v17;
          sub_2168BD80C((uint64_t *)&v17);
          sub_2168BD378((int)a4, 0);
        }
        int v14 = v18;
        sub_216E10FB8(&v17);
        if (v14) {
          break;
        }
        BOOL v15 = v12 == v11;
        v12 += 8;
      }
      while (!v15);
    }
    if (!*a4)
    {
      std::string __p = "usd/stage.cpp";
      std::string::size_type v20 = "_OpenImpl";
      uint64_t v21 = 1221;
      uint64_t v22 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::_OpenImpl(InitialLoadSet, const Args &...)"
            " [Args = <pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrIntern"
            "al__aapl__pxrReserved__::ArResolverContext>]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "stage", 0);
    }
    if (v24)
    {
      char v25 = v24;
      operator delete(v24);
    }
  }
}

void sub_216DEBC8C(_Unwind_Exception *a1)
{
  unsigned int v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(void *)(v2 - 80) = v4;
    operator delete(v4);
  }
  sub_216E10FB8(v1);
  _Unwind_Resume(a1);
}

void sub_216DEBCF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x216DEBCECLL);
}

void sub_216DEBD0C(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, pxrInternal__aapl__pxrReserved__ **a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetReadableCaches((char **)&__p);
  BOOL v10 = (char *)__p;
  uint64_t v11 = v22;
  if (__p == v22)
  {
    BOOL v12 = 1;
    if (__p)
    {
LABEL_5:
      uint64_t v22 = v10;
      operator delete(v10);
    }
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdStageCache::FindOneMatching(*(void *)v10, a2, a3, a4, a5);
      BOOL v12 = *a5 == 0;
      if (*a5) {
        break;
      }
      sub_216E10FB8(a5);
      v10 += 8;
    }
    while (v10 != v11);
    BOOL v10 = (char *)__p;
    if (__p) {
      goto LABEL_5;
    }
  }
  if (v12)
  {
    *a5 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStageCacheContext::_GetWritableCaches(&v26);
    uint64_t v13 = v27;
    if (v26 == v27)
    {
      sub_216E12C88((uint64_t)&__p, a1, a2, a3, (void **)a4);
      sub_216E124C0((uint64_t)&__p, (uint64_t *)&v19);
      unsigned __int8 v18 = *a5;
      *a5 = v19;
      unsigned __int8 v19 = 0;
      sub_2168BD378((int)a5, v18);
      sub_216E10FB8(&v19);
      sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
    }
    else
    {
      int v14 = v26 + 8;
      do
      {
        uint64_t v15 = *((void *)v14 - 1);
        sub_216E12C88((uint64_t)&__p, a1, a2, a3, (void **)a4);
        pxrInternal__aapl__pxrReserved__::UsdStageCache::RequestStage(v15, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&__p, (uint64_t)&v19);
        sub_216E12A0C((pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *)&__p);
        if (!*a5)
        {
          *a5 = v19;
          sub_2168BD80C((uint64_t *)&v19);
          sub_2168BD378((int)a5, 0);
        }
        int v16 = v20;
        sub_216E10FB8(&v19);
        if (v16) {
          break;
        }
        BOOL v17 = v14 == v13;
        v14 += 8;
      }
      while (!v17);
    }
    if (!*a5)
    {
      std::string __p = "usd/stage.cpp";
      uint64_t v22 = "_OpenImpl";
      uint64_t v23 = 1221;
      char v24 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::_OpenImpl(InitialLoadSet, const Args &...)"
            " [Args = <pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>, pxrInternal__aapl__pxrReserv"
            "ed__::ArResolverContext>]";
      char v25 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "stage", 0);
    }
    if (v26)
    {
      char v27 = v26;
      operator delete(v26);
    }
  }
}

void sub_216DEBF0C(_Unwind_Exception *a1)
{
  unsigned int v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(void *)(v2 - 80) = v4;
    operator delete(v4);
  }
  sub_216E10FB8(v1);
  _Unwind_Resume(a1);
}

void sub_216DEBF74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x216DEBF6CLL);
}

uint64_t sub_216DEBF8C(_DWORD **a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216DEC0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DEC0D4(uint64_t *a1)
{
  IsAnonymous = sub_21697CF14(a1);
  if (v3 & 1 | (unint64_t)IsAnonymous
    && (char v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1),
        IsAnonymous = (uint64_t (*)(uint64_t *))pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v4),
        (IsAnonymous & 1) == 0))
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonymous);
    BOOL v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    uint64_t RepositoryPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v8);
    if (*(char *)(RepositoryPath + 23) >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(RepositoryPath + 23);
    }
    else {
      uint64_t v10 = *(void *)(RepositoryPath + 8);
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    if (v10) {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v11);
    }
    else {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v11);
    }
    return pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset((uint64_t)Resolver);
  }
  else
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonymous);
    return pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContext((pxrInternal__aapl__pxrReserved__::ArResolver *)v5);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_21697CF14(a1);
  if (v11 & 1 | (unint64_t)v10)
  {
    if (sub_216C4B19C(13))
    {
      BOOL v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v14 = Identifier;
      }
      else {
        uint64_t v14 = *(void *)Identifier;
      }
      uint64_t v15 = sub_21697CF14(a2);
      if (v16 & 1 | (unint64_t)v15)
      {
        BOOL v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v17);
        if (*(char *)(v18 + 23) >= 0) {
          unsigned __int8 v19 = (const char *)v18;
        }
        else {
          unsigned __int8 v19 = *(const char **)v18;
        }
      }
      else
      {
        unsigned __int8 v19 = "<null>";
      }
      sub_216DEBF8C(a3);
      int v20 = SHIBYTE(v33);
      uint64_t v21 = (void **)v32[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a4, (uint64_t)__p);
      char v24 = v32;
      if (v20 < 0) {
        char v24 = v21;
      }
      if (v31 >= 0) {
        char v25 = __p;
      }
      else {
        char v25 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::OpenMasked(rootLayer=@%s@, sessionLayer=@%s@, mask=%s, load=%s)\n", v22, v23, v14, v19, v24, v25);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33) < 0) {
        operator delete(v32[0]);
      }
    }
    char v26 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1[1];
    if (v26)
    {
      if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
        char v26 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a1;
      }
      else {
        char v26 = 0;
      }
    }
    char v29 = v26;
    sub_2168BD80C((uint64_t *)&v29);
    char v27 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2[1];
    if (v27)
    {
      if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
        char v27 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      }
      else {
        char v27 = 0;
      }
    }
    int v28 = v27;
    sub_2168BD80C((uint64_t *)&v28);
    sub_216DEC0D4(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiateStage((uint64_t *)&v29, &v28, (uint64_t)v32, a3, a4, a5);
    __p[0] = v32;
    sub_216787968((void ***)__p);
    sub_216ABB798(&v28);
    sub_216ABB798(&v29);
  }
  else
  {
    v32[0] = "usd/stage.cpp";
    v32[1] = "OpenMasked";
    uint64_t v33 = 1342;
    uint64_t v34 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(const SdfLayerHandle &, const Sdf"
          "LayerHandle &, const UsdStagePopulationMask &, InitialLoadSet)";
    char v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a5 = 0;
  }
}

void sub_216DEC3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X2>, _DWORD **a4@<X3>, unsigned int a5@<W4>, uint64_t *a6@<X8>)
{
  BOOL v12 = sub_21697CF14(a1);
  if (v13 & 1 | (unint64_t)v12)
  {
    if (sub_216C4B19C(13))
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v14);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v16 = Identifier;
      }
      else {
        uint64_t v16 = *(void *)Identifier;
      }
      uint64_t v31 = v16;
      BOOL v17 = sub_21697CF14(a2);
      if (v18 & 1 | (unint64_t)v17)
      {
        unsigned __int8 v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v19);
        if (*(char *)(v20 + 23) >= 0) {
          uint64_t v21 = (const char *)v20;
        }
        else {
          uint64_t v21 = *(const char **)v20;
        }
      }
      else
      {
        uint64_t v21 = "<null>";
      }
      pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString(a3, &v36);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v36;
      }
      else {
        uint64_t v22 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      sub_216DEBF8C(a4);
      int v23 = v35;
      char v24 = (void **)v34[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C769880, a5, (uint64_t)__p);
      char v27 = v34;
      if (v23 < 0) {
        char v27 = v24;
      }
      if (v33 >= 0) {
        int v28 = __p;
      }
      else {
        int v28 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::OpenMasked(rootLayer=@%s@, sessionLayer=@%s@, pathResolverContext=%s, mask=%s, load=%s)\n", v25, v26, v31, v21, v22, v27, v28);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
      if (v35 < 0) {
        operator delete(v34[0]);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v29 = a1[1];
    if (v29)
    {
      if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
        std::string::size_type v29 = *a1;
      }
      else {
        std::string::size_type v29 = 0;
      }
    }
    v36.__r_.__value_.__r.__words[0] = v29;
    sub_2168BD80C((uint64_t *)&v36);
    char v30 = (void *)a2[1];
    if (v30)
    {
      if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
        char v30 = (void *)*a2;
      }
      else {
        char v30 = 0;
      }
    }
    v34[0] = v30;
    sub_2168BD80C((uint64_t *)v34);
    pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiateStage((uint64_t *)&v36, v34, (uint64_t)a3, a4, a5, a6);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v34);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v36);
  }
  else
  {
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v36.__r_.__value_.__l.__size_ = (std::string::size_type)"OpenMasked";
    v36.__r_.__value_.__r.__words[2] = 1399;
    uint64_t v37 = "static UsdStageRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(const SdfLayerHandle &, const Sdf"
          "LayerHandle &, const ArResolverContext &, const UsdStagePopulationMask &, InitialLoadSet)";
    char v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid root layer");
    *a6 = 0;
  }
}

void sub_216DEC690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty(const pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)a1 + 1);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    unsigned __int8 v6 = *(atomic_ullong **)(v4 + 24);
    uint64_t explicit = (void *)atomic_load_explicit(v6 + 7, memory_order_acquire);
    if (!explicit) {
      uint64_t explicit = (void *)pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v6);
    }
    BOOL v8 = (atomic_uint **)sub_216D563F8(a1);
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(explicit, v8, (atomic_uint **)a2);
  }
}

void *pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaAttribute@<X0>(const pxrInternal__aapl__pxrReserved__::UsdAttribute *a1@<X1>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty(a1, (uint64_t)v5);
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(a2, v5);
  if ((v5[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaRelationship@<X0>(const pxrInternal__aapl__pxrReserved__::UsdRelationship *a1@<X1>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty(a1, (uint64_t)v5);
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship::Relationship(a2, v5);
  if ((v5[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const char *a3)
{
  if (!*((unsigned char *)this + 120)) {
    return 1;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentityPathMapping((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 64)))
  {
    sub_216D0162C((uint64_t)a2, &v17);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, &v11);
    sub_216D0162C((uint64_t)a2, (int *)&v16);
    unsigned __int8 v6 = v11;
    char v7 = v16;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
    sub_21697C414(&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
    sub_21697C414(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_21697C414(&v17);
    if (v6 != v7) {
      return 1;
    }
  }
  if (sub_216D59FC8((uint64_t)a2))
  {
    char v11 = "usd/stage.cpp";
    BOOL v12 = "_ValidateEditPrim";
    uint64_t v13 = 1464;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim(const UsdPrim &, const char *) const";
    char v15 = 0;
    sub_216D0162C((uint64_t)a2, &v17);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s at path <%s>; authoring to an instancing prototype is not allowed.",
      a3,
      Text);
LABEL_10:
    sub_21697B754(&v17);
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4))
  {
    char v11 = "usd/stage.cpp";
    BOOL v12 = "_ValidateEditPrim";
    uint64_t v13 = 1472;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim(const UsdPrim &, const char *) const";
    char v15 = 0;
    sub_216D0162C((uint64_t)a2, &v17);
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s at path <%s>; authoring to an instance proxy is not allowed.",
      a3,
      v10);
    goto LABEL_10;
  }
  return 1;
}

void sub_216DECA0C(_Unwind_Exception *a1)
{
  sub_21697B754((_DWORD *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const char *a3)
{
  if (!*((unsigned char *)this + 120)) {
    return 1;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentityPathMapping((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 64)))
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), a2, &v9);
    unsigned __int8 v6 = v9;
    char v7 = *(char **)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
    sub_21697C414(&v9);
    if (v6 != v7) {
      return 1;
    }
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(a2, v5))
  {
    char v9 = "usd/stage.cpp";
    uint64_t v10 = "_ValidateEditPrimAtPath";
    uint64_t v11 = 1493;
    BOOL v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrimAtPath(const SdfPath &, const char *) const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s at path <%s>; authoring to an instancing prototype is not allowed.");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdStage::_IsObjectDescendantOfInstance((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, a2))
  {
    char v9 = "usd/stage.cpp";
    uint64_t v10 = "_ValidateEditPrimAtPath";
    uint64_t v11 = 1501;
    BOOL v12 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrimAtPath(const SdfPath &, const char *) const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s at path <%s>; authoring to an instance proxy is not allowed.");
    return 0;
  }
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsObjectDescendantOfInstance(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetNumPrototypes(this[18])) {
    return 0;
  }
  uint64_t v4 = this[18];
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(a2, &v7);
  BOOL IsPathDescendantToAnInstance = pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathDescendantToAnInstance(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  return IsPathDescendantToAnInstance;
}

void sub_216DECC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216DECC1C@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(a1, a2, &v6);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v6)) {
    pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer((uint64_t *)a1, (uint64_t)&v6, a3);
  }
  else {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216DECC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaAttribute@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *a3@<X2>, void *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(this, a2, &v15);
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v15)
    || (v13[0] = "usd/stage.cpp",
        v13[1] = "_CreateNewSpecFromSchemaAttribute",
        uint64_t v13[2] = 1539,
        void v13[3] = "SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaAttribute(co"
                 "nst UsdPrim &, const UsdPrimDefinition::Attribute &)",
        char v14 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "primSpec", 0) & 1) != 0))
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetName(a3);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((*(void *)Name & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    v13[0] = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::GetTypeName(a3);
    int Variability = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability(a3);
    pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(&v15, (uint64_t)EmptyString, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v13, Variability, 0, a4);
  }
  else
  {
    *a4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v15);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
}

void sub_216DECDB0(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v8 - 40));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaRelationship@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship *a3@<X2>, void *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(this, a2, &v15);
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v15)
    || (v13[0] = "usd/stage.cpp",
        v13[1] = "_CreateNewSpecFromSchemaRelationship",
        uint64_t v13[2] = 1553,
        void v13[3] = "SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaRelations"
                 "hip(const UsdPrim &, const UsdPrimDefinition::Relationship &)",
        char v14 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "primSpec", 0) & 1) != 0))
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetName(a3);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((*(void *)Name & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    int Variability = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability(a3);
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(&v15, (uint64_t)EmptyString, 0, Variability, a4);
  }
  else
  {
    *a4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v15);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
}

void sub_216DECED8(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v8 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewPropertySpecFromSchema<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)a2, (uint64_t)v15);
  if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsAttribute((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v15))
  {
    sub_216D16CFC((uint64_t)v9, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(v8, v15);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaAttribute(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v9, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)v8, &v14);
    unint64_t add = v14;
    *a3 = v14;
    if (add) {
      unint64_t add = (atomic_uint *)atomic_fetch_add(add, 1u);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    if ((v8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (!pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsRelationship((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v15))
    {
      *a3 = 0;
      goto LABEL_19;
    }
    sub_216D16CFC((uint64_t)v9, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship::Relationship(v8, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v15);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaRelationship(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v9, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship *)v8, &v14);
    int v7 = v14;
    *a3 = v14;
    if (v7) {
      int v7 = (atomic_uint *)atomic_fetch_add(v7, 1u);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    if ((v8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
LABEL_19:
  if ((v15[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216DED0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  uint64_t v6 = *(void *)(v4 - 48);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewPropertySpecFromSchema<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)a2, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute::Attribute(v11, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsAttribute((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v11))
  {
    sub_216D16CFC((uint64_t)&v6, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaAttribute(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Attribute *)v11, a3);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    if (v7) {
      sub_216D16E0C(v7);
    }
  }
  else
  {
    *a3 = 0;
  }
  if ((v11[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216DED1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewPropertySpecFromSchema<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)a2, (uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship::Relationship(v11, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsRelationship((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v11))
  {
    sub_216D16CFC((uint64_t)&v6, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewSpecFromSchemaRelationship(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Relationship *)v11, a3);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    if (v7) {
      sub_216D16E0C(v7);
    }
  }
  else
  {
    *a3 = 0;
  }
  if ((v11[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216DED330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216DED378(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfSpec *a3@<X8>)
{
  sub_216D16CFC((uint64_t)v77, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  if (pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v77, "create property spec"))
  {
    sub_216D0162C(a2, &v75);
    uint64_t v6 = sub_216D563F8((_DWORD *)a2);
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 48);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v75, (uint64_t *)v56);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v56);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewPropertySpecFromSchema<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, a2, a3);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v10, a3);
        int v12 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8((uint64_t)v77, v11);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v67, v12, 1);
        while (v68 != v70 || v69 != v71)
        {
          char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v72);
          std::string __p = (void *)v68;
          uint64_t v61 = v69;
          Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v6, (int *)v73);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v66, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v73);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v73 + 1);
          sub_21697C414(v73);
          if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v66))
          {
            if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v66, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C757F70, v16))
            {
              unint64_t add = v66;
              std::string __p = v66;
              if (v66)
              {
                atomic_fetch_add((atomic_uint *volatile)v66, 1u);
                unint64_t add = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                uint64_t v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                if (__p) {
                  unint64_t add = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)atomic_fetch_add((atomic_uint *volatile)__p, 1u);
                }
              }
              else
              {
                uint64_t v65 = 0;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
            }
            else
            {
              uint64_t v65 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v65))
            {
              std::string __p = "usd/stage.cpp";
              uint64_t v61 = "_CreatePropertySpecForEditing";
              uint64_t v62 = 1706;
              uint64_t v63 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(const "
                    "UsdProperty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec]";
              char v64 = 0;
              pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021746BF94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v73);
              if (v74 >= 0) {
                std::string v36 = (const char *)v73;
              }
              else {
                std::string v36 = (const char *)v73[0];
              }
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
              pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v75, &v58);
              char v38 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
              long long v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v7);
              uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v39);
              if (*(char *)(Identifier + 23) >= 0) {
                long long v41 = (const char *)Identifier;
              }
              else {
                long long v41 = *(const char **)Identifier;
              }
              long long v42 = sub_216990F1C(&v66);
              unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v42);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, SpecType, (uint64_t)v56);
              if (v57 >= 0) {
                uint64_t v44 = v56;
              }
              else {
                uint64_t v44 = (void **)v56[0];
              }
              uint64_t v45 = sub_216990F1C(&v66);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v45, &v54);
              std::string::size_type v46 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
              uint64_t v47 = (uint64_t **)sub_216990F1C(&v66);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v47, &v52);
              char v48 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v52);
              uint64_t v49 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v48);
              if (*(char *)(v49 + 23) >= 0) {
                uint64_t v50 = (const char *)v49;
              }
              else {
                uint64_t v50 = *(const char **)v49;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Spec type mismatch.  Failed to create %s for <%s> at <%s> in @%s@.  Strongest existing spec, %s at <%s> in @%s@", v36, Text, v38, v41, (const char *)v44, v46, v50);
              uint64_t v51 = v53;
              if (v53
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v53 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
              sub_21697C414(&v54);
              if (v57 < 0) {
                operator delete(v56[0]);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
              sub_21697C414(&v58);
              unint64_t v24 = v74;
              if ((v24 & 0x80000000) != 0) {
                operator delete(v73[0]);
              }
              *(void *)a3 = 0;
              goto LABEL_28;
            }
            pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v73);
            pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v77, v56);
            if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56)
              || (std::string __p = "usd/stage.cpp",
                  uint64_t v61 = "_CreatePropertySpecForEditing",
                  uint64_t v62 = 1712,
                  uint64_t v63 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(co"
                        "nst UsdProperty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec]",
                  char v64 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "primSpec", 0) & 1) != 0))
            {
              sub_216E12D5C((pxrInternal__aapl__pxrReserved__::TfToken *)v56, v6, &v65, a3);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v23, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v56);
              sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v73);
LABEL_28:
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v24, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v65);
              char v26 = (void **)&v66;
              goto LABEL_47;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v19, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v56);
            sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v73);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v65);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v66);
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v67);
        }
        *(void *)a3 = 0;
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C757F70, v8))
      {
        v67[0] = v56[0];
        if (v56[0])
        {
          uint64_t v21 = 1;
          atomic_fetch_add((atomic_uint *volatile)v56[0], 1u);
          uint64_t v22 = (atomic_uint *)v67[0];
          *(void *)a3 = v67[0];
          if (v22) {
            uint64_t v21 = atomic_fetch_add(v22, 1u);
          }
        }
        else
        {
          *(void *)a3 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v67);
      }
      else
      {
        *(void *)a3 = 0;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v25, a3);
        v67[0] = "usd/stage.cpp";
        v67[1] = "_CreatePropertySpecForEditing";
        uint64_t v68 = 1664;
        uint64_t v69 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(const UsdPro"
              "perty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec]";
        LOBYTE(v70) = 0;
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021746BF94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
        if (v62 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        int v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v75, &v52);
        std::string::size_type v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
        char v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v7);
        uint64_t v31 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
        if (*(char *)(v31 + 23) >= 0) {
          uint64_t v32 = (const char *)v31;
        }
        else {
          uint64_t v32 = *(const char **)v31;
        }
        char v33 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56);
        unsigned int v34 = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v33);
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, v34, (uint64_t)v73);
        if (v74 >= 0) {
          char v35 = (const char *)v73;
        }
        else {
          char v35 = (const char *)v73[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v67, 3, (pxrInternal__aapl__pxrReserved__ *)"Spec type mismatch.  Failed to create %s for <%s> at <%s> in @%s@.  %s already at that location.", p_p, v28, v29, v32, v35);
        if (v74 < 0) {
          operator delete(v73[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
        sub_21697C414(&v52);
        unint64_t v25 = SHIBYTE(v62);
        if ((v25 & 0x80000000) != 0) {
          operator delete(__p);
        }
        *(void *)a3 = 0;
      }
      char v26 = v56;
LABEL_47:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v25, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v26);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
    sub_21697C414(&v75);
  }
  else
  {
    *(void *)a3 = 0;
  }
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
  sub_21697C414(&v79);
  if (v78) {
    sub_216D16E0C(v78);
  }
}

void sub_216DED9C4(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v33 - 152));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v35, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a29);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v36, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a31);
  sub_21697B754((_DWORD *)(v33 - 128));
  sub_216D16AD8(v33 - 120);
  _Unwind_Resume(a1);
}

void sub_216DEDB98(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfSpec *a3@<X8>)
{
  sub_216D16CFC((uint64_t)v77, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  if (pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v77, "create property spec"))
  {
    sub_216D0162C(a2, &v75);
    uint64_t v6 = sub_216D563F8((_DWORD *)a2);
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 48);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v75, (uint64_t *)v56);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v56);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewPropertySpecFromSchema<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, a2, a3);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v10, a3);
        int v12 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8((uint64_t)v77, v11);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v67, v12, 1);
        while (v68 != v70 || v69 != v71)
        {
          char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v72);
          std::string __p = (void *)v68;
          uint64_t v61 = v69;
          Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v6, (int *)v73);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v66, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v73);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v73 + 1);
          sub_21697C414(v73);
          if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v66))
          {
            if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v66, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C7580C0, v16))
            {
              unint64_t add = v66;
              std::string __p = v66;
              if (v66)
              {
                atomic_fetch_add((atomic_uint *volatile)v66, 1u);
                unint64_t add = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                uint64_t v65 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                if (__p) {
                  unint64_t add = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)atomic_fetch_add((atomic_uint *volatile)__p, 1u);
                }
              }
              else
              {
                uint64_t v65 = 0;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
            }
            else
            {
              uint64_t v65 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v65))
            {
              std::string __p = "usd/stage.cpp";
              uint64_t v61 = "_CreatePropertySpecForEditing";
              uint64_t v62 = 1706;
              uint64_t v63 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(const "
                    "UsdProperty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec]";
              char v64 = 0;
              pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021746C0CFLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v73);
              if (v74 >= 0) {
                std::string v36 = (const char *)v73;
              }
              else {
                std::string v36 = (const char *)v73[0];
              }
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
              pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v75, &v58);
              char v38 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
              long long v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v7);
              uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v39);
              if (*(char *)(Identifier + 23) >= 0) {
                long long v41 = (const char *)Identifier;
              }
              else {
                long long v41 = *(const char **)Identifier;
              }
              long long v42 = sub_216990F1C(&v66);
              unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v42);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, SpecType, (uint64_t)v56);
              if (v57 >= 0) {
                uint64_t v44 = v56;
              }
              else {
                uint64_t v44 = (void **)v56[0];
              }
              uint64_t v45 = sub_216990F1C(&v66);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v45, &v54);
              std::string::size_type v46 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
              uint64_t v47 = (uint64_t **)sub_216990F1C(&v66);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v47, &v52);
              char v48 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v52);
              uint64_t v49 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v48);
              if (*(char *)(v49 + 23) >= 0) {
                uint64_t v50 = (const char *)v49;
              }
              else {
                uint64_t v50 = *(const char **)v49;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Spec type mismatch.  Failed to create %s for <%s> at <%s> in @%s@.  Strongest existing spec, %s at <%s> in @%s@", v36, Text, v38, v41, (const char *)v44, v46, v50);
              uint64_t v51 = v53;
              if (v53
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v53 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
              sub_21697C414(&v54);
              if (v57 < 0) {
                operator delete(v56[0]);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
              sub_21697C414(&v58);
              unint64_t v24 = v74;
              if ((v24 & 0x80000000) != 0) {
                operator delete(v73[0]);
              }
              *(void *)a3 = 0;
              goto LABEL_28;
            }
            pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v73);
            pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v77, v56);
            if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56)
              || (std::string __p = "usd/stage.cpp",
                  uint64_t v61 = "_CreatePropertySpecForEditing",
                  uint64_t v62 = 1712,
                  uint64_t v63 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(co"
                        "nst UsdProperty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec]",
                  char v64 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "primSpec", 0) & 1) != 0))
            {
              sub_216E12E00((pxrInternal__aapl__pxrReserved__::TfToken *)v56, v6, &v65, a3);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v23, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v56);
              sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v73);
LABEL_28:
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v24, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v65);
              char v26 = (void **)&v66;
              goto LABEL_47;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v19, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v56);
            sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v73);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v65);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v66);
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v67);
        }
        *(void *)a3 = 0;
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C7580C0, v8))
      {
        v67[0] = v56[0];
        if (v56[0])
        {
          uint64_t v21 = 1;
          atomic_fetch_add((atomic_uint *volatile)v56[0], 1u);
          uint64_t v22 = (atomic_uint *)v67[0];
          *(void *)a3 = v67[0];
          if (v22) {
            uint64_t v21 = atomic_fetch_add(v22, 1u);
          }
        }
        else
        {
          *(void *)a3 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v67);
      }
      else
      {
        *(void *)a3 = 0;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v25, a3);
        v67[0] = "usd/stage.cpp";
        v67[1] = "_CreatePropertySpecForEditing";
        uint64_t v68 = 1664;
        uint64_t v69 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(const UsdPro"
              "perty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec]";
        LOBYTE(v70) = 0;
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021746C0CFLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
        if (v62 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        int v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v75, &v52);
        std::string::size_type v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
        char v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v7);
        uint64_t v31 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
        if (*(char *)(v31 + 23) >= 0) {
          uint64_t v32 = (const char *)v31;
        }
        else {
          uint64_t v32 = *(const char **)v31;
        }
        uint64_t v33 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v56);
        unsigned int v34 = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v33);
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, v34, (uint64_t)v73);
        if (v74 >= 0) {
          char v35 = (const char *)v73;
        }
        else {
          char v35 = (const char *)v73[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v67, 3, (pxrInternal__aapl__pxrReserved__ *)"Spec type mismatch.  Failed to create %s for <%s> at <%s> in @%s@.  %s already at that location.", p_p, v28, v29, v32, v35);
        if (v74 < 0) {
          operator delete(v73[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
        sub_21697C414(&v52);
        unint64_t v25 = SHIBYTE(v62);
        if ((v25 & 0x80000000) != 0) {
          operator delete(__p);
        }
        *(void *)a3 = 0;
      }
      char v26 = v56;
LABEL_47:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v25, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v26);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
    sub_21697C414(&v75);
  }
  else
  {
    *(void *)a3 = 0;
  }
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
  sub_21697C414(&v79);
  if (v78) {
    sub_216D16E0C(v78);
  }
}

void sub_216DEE1E4(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v33 - 152));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v35, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a29);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v36, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a31);
  sub_21697B754((_DWORD *)(v33 - 128));
  sub_216D16AD8(v33 - 120);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2@<X1>, atomic_uint **a3@<X8>)
{
  sub_216D16CFC((uint64_t)v83, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v83, "create property spec"))
  {
    sub_216D0162C((uint64_t)a2, &v81);
    uint64_t v6 = sub_216D563F8(a2);
    int v7 = (uint64_t *)((char *)this + 48);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v81, (uint64_t *)v62);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v62))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v62);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreateNewPropertySpecFromSchema<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>(this, (uint64_t)a2, a3);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v10, (pxrInternal__aapl__pxrReserved__::SdfSpec *)a3);
        int v12 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8((uint64_t)v83, v11);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v73, v12, 1);
        while (v74 != v76 || v75 != v77)
        {
          char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v78);
          std::string __p = (void *)v74;
          uint64_t v67 = v75;
          Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__p);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v6, (int *)v79);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v72, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v79);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v79 + 1);
          sub_21697C414(v79);
          if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v72))
          {
            if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v72, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C757F58, v16))
            {
              unint64_t add = v72;
              std::string __p = v72;
              if (v72)
              {
                atomic_fetch_add((atomic_uint *volatile)v72, 1u);
                unint64_t add = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                uint64_t v71 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                if (__p) {
                  unint64_t add = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)atomic_fetch_add((atomic_uint *volatile)__p, 1u);
                }
              }
              else
              {
                uint64_t v71 = 0;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
            }
            else
            {
              uint64_t v71 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v71))
            {
              std::string __p = "usd/stage.cpp";
              uint64_t v67 = "_CreatePropertySpecForEditing";
              uint64_t v68 = 1706;
              uint64_t v69 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(const "
                    "UsdProperty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
              char v70 = 0;
              pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217468731 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v79);
              if (v80 >= 0) {
                uint64_t v43 = (const char *)v79;
              }
              else {
                uint64_t v43 = (const char *)v79[0];
              }
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
              pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v81, &v64);
              uint64_t v45 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
              std::string::size_type v46 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v7);
              uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v46);
              if (*(char *)(Identifier + 23) >= 0) {
                char v48 = (const char *)Identifier;
              }
              else {
                char v48 = *(const char **)Identifier;
              }
              uint64_t v49 = sub_216990F1C(&v72);
              unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v49);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, SpecType, (uint64_t)v62);
              if (v63 >= 0) {
                uint64_t v51 = v62;
              }
              else {
                uint64_t v51 = (void **)v62[0];
              }
              uint64_t v52 = sub_216990F1C(&v72);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v52, &v61);
              uint64_t v53 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v61);
              int v54 = (uint64_t **)sub_216990F1C(&v72);
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v54, (uint64_t *)&v59);
              int v55 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v59);
              uint64_t v56 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v55);
              if (*(char *)(v56 + 23) >= 0) {
                char v57 = (const char *)v56;
              }
              else {
                char v57 = *(const char **)v56;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Spec type mismatch.  Failed to create %s for <%s> at <%s> in @%s@.  Strongest existing spec, %s at <%s> in @%s@", v43, Text, v45, v48, (const char *)v51, v53, v57);
              uint64_t v58 = v60;
              if (v60
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v60 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
              sub_21697C414(&v61);
              if (v63 < 0) {
                operator delete(v62[0]);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
              sub_21697C414(&v64);
              unint64_t v42 = v80;
              if ((v42 & 0x80000000) != 0) {
                operator delete(v79[0]);
              }
              *a3 = 0;
              goto LABEL_64;
            }
            pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v64);
            pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v83, &v61);
            if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v61)
              || (std::string __p = "usd/stage.cpp",
                  uint64_t v67 = "_CreatePropertySpecForEditing",
                  uint64_t v68 = 1712,
                  uint64_t v69 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(co"
                        "nst UsdProperty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]",
                  char v70 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "primSpec", 0) & 1) != 0))
            {
              if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v71, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C757F70, v19))
              {
                std::string __p = v71;
                if (v71)
                {
                  uint64_t v24 = 1;
                  atomic_fetch_add((atomic_uint *volatile)v71, 1u);
                  v79[0] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                  if (__p) {
                    uint64_t v24 = atomic_fetch_add((atomic_uint *volatile)__p, 1u);
                  }
                }
                else
                {
                  v79[0] = 0;
                }
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v24, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
              }
              else
              {
                v79[0] = 0;
              }
              if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v79))
              {
                std::string __p = v71;
                if (v71)
                {
                  uint64_t v36 = 1;
                  atomic_fetch_add((atomic_uint *volatile)v71, 1u);
                  int v59 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p;
                  if (__p) {
                    uint64_t v36 = atomic_fetch_add((atomic_uint *volatile)__p, 1u);
                  }
                }
                else
                {
                  int v59 = 0;
                }
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v36, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
                sub_216E12E00((pxrInternal__aapl__pxrReserved__::TfToken *)&v61, v6, &v59, v62);
                long long v39 = (atomic_uint *)v62[0];
                *a3 = (atomic_uint *)v62[0];
                if (v39) {
                  long long v39 = (atomic_uint *)atomic_fetch_add(v39, 1u);
                }
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v39, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v62);
                p_p = (void **)&v59;
              }
              else
              {
                sub_216E12D5C((pxrInternal__aapl__pxrReserved__::TfToken *)&v61, v6, v79, &__p);
                uint64_t v37 = (atomic_uint *)__p;
                *a3 = (atomic_uint *)__p;
                if (v37) {
                  uint64_t v37 = (atomic_uint *)atomic_fetch_add(v37, 1u);
                }
                p_p = &__p;
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v37, (pxrInternal__aapl__pxrReserved__::SdfSpec *)p_p);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v40, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v79);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v41, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v61);
              sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v64);
LABEL_64:
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v42, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v71);
              char v35 = (void **)&v72;
              goto LABEL_65;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v61);
            sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v64);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v71);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v72);
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v73);
        }
        *a3 = 0;
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v62, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C757F58, v8))
      {
        v73[0] = v62[0];
        if (v62[0])
        {
          uint64_t v22 = 1;
          atomic_fetch_add((atomic_uint *volatile)v62[0], 1u);
          int v23 = (atomic_uint *)v73[0];
          *a3 = (atomic_uint *)v73[0];
          if (v23) {
            uint64_t v22 = atomic_fetch_add(v23, 1u);
          }
        }
        else
        {
          *a3 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v22, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v73);
      }
      else
      {
        *a3 = 0;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v25, (pxrInternal__aapl__pxrReserved__::SdfSpec *)a3);
        v73[0] = "usd/stage.cpp";
        v73[1] = "_CreatePropertySpecForEditing";
        uint64_t v74 = 1664;
        int v75 = "SdfHandle<PropType> pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(const UsdPro"
              "perty &) [PropType = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
        LOBYTE(v76) = 0;
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217468731 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
        if (v68 >= 0) {
          char v26 = (const char *)&__p;
        }
        else {
          char v26 = (const char *)__p;
        }
        char v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v81, &v59);
        int v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
        std::string::size_type v29 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v7);
        uint64_t v30 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v29);
        if (*(char *)(v30 + 23) >= 0) {
          uint64_t v31 = (const char *)v30;
        }
        else {
          uint64_t v31 = *(const char **)v30;
        }
        uint64_t v32 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v62);
        unsigned int v33 = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v32);
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, v33, (uint64_t)v79);
        if (v80 >= 0) {
          unsigned int v34 = (const char *)v79;
        }
        else {
          unsigned int v34 = (const char *)v79[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v73, 3, (pxrInternal__aapl__pxrReserved__ *)"Spec type mismatch.  Failed to create %s for <%s> at <%s> in @%s@.  %s already at that location.", v26, v27, v28, v31, v34);
        if (v80 < 0) {
          operator delete(v79[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
        sub_21697C414(&v59);
        unint64_t v25 = SHIBYTE(v68);
        if ((v25 & 0x80000000) != 0) {
          operator delete(__p);
        }
        *a3 = 0;
      }
      char v35 = v62;
LABEL_65:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v25, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v35);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_21697C414(&v81);
  }
  else
  {
    *a3 = 0;
  }
  if ((v87 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v86);
  sub_21697C414(&v85);
  if (v84) {
    sub_216D16E0C(v84);
  }
}

void sub_216DEEAEC(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a13);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a20);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v35, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a29);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v36, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a31);
  sub_21697B754((_DWORD *)(v33 - 128));
  sub_216D16AD8(v33 - 120);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  if (sub_216B8D878(a5))
  {
    uint64_t v6 = *((void *)a5 + 1);
    if ((v6 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::SdfTimeCode>();
  }
  if (sub_216B8DA34(a5))
  {
    uint64_t v7 = *((void *)a5 + 1);
    if ((v7 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>();
  }
  if (sub_21699AB4C(a5))
  {
    uint64_t v8 = *((void *)a5 + 1);
    if ((v8 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::SdfPathExpression>();
  }
  if (sub_21699AC40(a5))
  {
    uint64_t v9 = *((void *)a5 + 1);
    if ((v9 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>();
  }
  if (sub_2168EC434(a5))
  {
    uint64_t v10 = *((void *)a5 + 1);
    if ((v10 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>();
  }
  if (sub_216995B54(a5))
  {
    uint64_t v11 = *((void *)a5 + 1);
    if ((v11 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(a5);
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<std::map<double,pxrInternal__aapl__pxrReserved__::VtValue>>();
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, double a4)
{
  uint64_t v4 = (uint64_t)a3;
  if (sub_216B8D878(a3))
  {
    uint64_t v8 = *(void *)(v4 + 8);
    if ((v8 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    return sub_216DA9F9C(a1, a2, (double *)v4, a4);
  }
  else if (sub_216B8DA34((pxrInternal__aapl__pxrReserved__::VtValue *)v4))
  {
    uint64_t v10 = *(void *)(v4 + 8);
    if ((v10 & 4) != 0) {
      uint64_t v11 = (long long *)(*(uint64_t (**)(uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v11 = *(long long **)v4;
    }
    return sub_216DAA088(a1, a2, v11, a4);
  }
  else if (sub_21699AB4C((pxrInternal__aapl__pxrReserved__::VtValue *)v4))
  {
    uint64_t v12 = *(void *)(v4 + 8);
    if ((v12 & 4) != 0) {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v13 = *(void *)v4;
    }
    return sub_216DB0DB0(a1, (uint64_t)a2, v13, a4);
  }
  else if (sub_21699AC40((pxrInternal__aapl__pxrReserved__::VtValue *)v4))
  {
    uint64_t v14 = *(void *)(v4 + 8);
    if ((v14 & 4) != 0) {
      char v15 = (long long *)(*(uint64_t (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      char v15 = *(long long **)v4;
    }
    return sub_216DB1064(a1, (uint64_t)a2, v15, a4);
  }
  else
  {
    return sub_216DEF178(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v4, a4);
  }
}

uint64_t sub_216DEF178(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, double a4)
{
  double v67 = a4;
  if (sub_216A5F85C(a3)) {
    goto LABEL_59;
  }
  uint64_t v66 = 0;
  v64[1] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)&v66;
  v64[2] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)&stru_26C74C2C0;
  __int16 v65 = 0;
  v64[0] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)&unk_26C758B08;
  sub_216E0E6E8((uint64_t)&Inverse, (uint64_t)v64, (uint64_t)a2);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  std::string __p = 0;
  sub_216E12E94(a1, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448), (uint64_t *)&__p, (uint64_t (****)(void, uint64_t))&Inverse);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v66)
  {
    std::string __p = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6738;
    char v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::VtValue]";
    char v58 = 0;
    sub_216D0162C((uint64_t)a2, (int *)v49);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v49);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Empty typeName for <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
LABEL_49:
    std::string::size_type v29 = v49;
LABEL_50:
    sub_21697C414(v29);
    int v26 = 1;
    goto LABEL_51;
  }
  uint64_t v8 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  std::string __p = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66);
  uint64_t v53 = *(void **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
  if (v53 == __p)
  {
    std::string __p = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6745;
    char v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::VtValue]";
    char v58 = 0;
    unint64_t v11 = v66 & 0xFFFFFFFFFFFFFFF8;
    if ((v66 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0) {
        uint64_t v12 = *(const char **)v12;
      }
    }
    else
    {
      uint64_t v12 = "";
    }
    sub_216D0162C((uint64_t)a2, (int *)v49);
    char v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v49);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown typename for <%s>: '%s'", v12, v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    goto LABEL_49;
  }
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::UsdTimeCode,pxrInternal__aapl__pxrReserved__::UsdAttribute const&,pxrInternal__aapl__pxrReserved__::VtValue const&)::opaqueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755210, v45, v46);
  }
  if (v53 == (void *)pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::UsdTimeCode,pxrInternal__aapl__pxrReserved__::UsdAttribute const&,pxrInternal__aapl__pxrReserved__::VtValue const&)::opaqueType)
  {
    std::string __p = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6752;
    char v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::VtValue]";
    char v58 = 0;
    sub_216D0162C((uint64_t)a2, (int *)v49);
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v49);
    unint64_t v14 = v66 & 0xFFFFFFFFFFFFFFF8;
    if ((v66 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      char v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        char v15 = *(const char **)v15;
      }
    }
    else
    {
      char v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on <%s>: %s-typed attributes cannot have an authored default value", v13, v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    goto LABEL_49;
  }
  if (*((void *)a3 + 1)) {
    uint64_t Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a3);
  }
  else {
    uint64_t Typeid = MEMORY[0x263F8C288];
  }
  unint64_t v16 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v53);
  if (strcmp((const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v16 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    std::string __p = "usd/stage.cpp";
    int v55 = "_SetValueImpl";
    uint64_t v56 = 6760;
    char v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::VtValue]";
    char v58 = 0;
    sub_216D0162C((uint64_t)a2, &v51);
    int v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v51);
    unint64_t v18 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v53);
    unsigned __int8 v19 = v49;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v18 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v49);
    if (v50 < 0) {
      unsigned __int8 v19 = (void **)v49[0];
    }
    if (*((void *)a3 + 1)) {
      uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a3);
    }
    else {
      uint64_t v20 = MEMORY[0x263F8C288];
    }
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v20 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v47);
    if (v48 >= 0) {
      int v28 = v47;
    }
    else {
      int v28 = (void **)v47[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Type mismatch for <%s>: expected '%s', got '%s'", v17, (const char *)v19, (const char *)v28);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
    std::string::size_type v29 = (void **)&v51;
    goto LABEL_50;
  }
  if (sub_216C4B19C(16))
  {
    std::string __p = (void *)0x7FF8000000000000;
    BOOL v21 = sub_216E13E8C(&v67, (pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&__p);
    if (v21
      && pxrInternal__aapl__pxrReserved__::UsdStage::_GetVariability((pxrInternal__aapl__pxrReserved__::UsdStage *)v21, a2) == 1&& sub_216C4B19C(16))
    {
      p_p = &__p;
      pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, a2, v22);
      if (v56 < 0) {
        p_p = __p;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Warning: authoring time sample value on uniform attribute <%s> at time %.3f\n", v24, v25, p_p, *(void *)&v67);
      if (SHIBYTE(v56) < 0) {
        operator delete(__p);
      }
    }
  }
  int v26 = 0;
LABEL_51:
  if ((v63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
  sub_21697C414(&v62);
  if (v61) {
    sub_216D16E0C((atomic_ullong *)v61);
  }
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v26) {
    return 0;
  }
LABEL_59:
  sub_216DED378(a1, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v64);
  int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v64);
  if (IsDormant)
  {
    double Inverse = COERCE_DOUBLE("usd/stage.cpp");
    uint64_t v60 = "_SetValueImpl";
    uint64_t v61 = 6785;
    uint64_t v62 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_SetValueImpl(UsdTimeCode, const UsdAttribute &, const T &) ["
          "T = pxrInternal__aapl__pxrReserved__::VtValue]";
    LOBYTE(v63) = 0;
    sub_216D0162C((uint64_t)a2, (int *)v49);
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 48);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v32, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v49, &__p);
    uint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    unsigned int v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v32);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v34);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v36 = (const char *)Identifier;
    }
    else {
      uint64_t v36 = *(const char **)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Inverse, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot set attribute value.  Failed to create attribute spec <%s> in layer @%s@", v33, v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    sub_21697C414(v49);
  }
  else
  {
    double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 104));
    uint64_t v60 = v38;
    double v39 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, v67);
    uint64_t v40 = (uint64_t **)sub_216A64148(v64);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v40, (uint64_t *)&__p);
    long long v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&__p);
    unint64_t v42 = sub_216A64148(v64);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, v49);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v49, v39, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v49 + 1);
    sub_21697C414(v49);
    uint64_t v43 = v55;
    if (v55)
    {
      unint64_t add_explicit = (void *)atomic_fetch_add_explicit((atomic_uint *volatile)v55 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit == 1) {
        (*(void (**)(const char *))(*(void *)v43 + 8))(v43);
      }
    }
  }
  uint64_t v30 = IsDormant ^ 1u;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v64);
  return v30;
}

void sub_216DEF924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  sub_216DFF644((uint64_t)&a34);
  uint64_t v37 = *(void *)(v35 - 96);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_ClearValue(uint64_t *a1, uint64_t a2, double a3)
{
  sub_216D16CFC((uint64_t)&Inverse, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  char v6 = pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&Inverse, "clear attribute value");
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_21697C414(&v34);
  if (v33) {
    sub_216D16E0C(v33);
  }
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = sub_21697CF14(a1 + 6);
  if (!(v8 & 1 | (unint64_t)v7))
  {
    double Inverse = COERCE_DOUBLE("usd/stage.cpp");
    uint64_t v33 = (atomic_ullong *)"_ClearValue";
    uint64_t v34 = 1990;
    unint64_t v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ClearValue(UsdTimeCode, const UsdAttribute &)";
    char v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Inverse, 1, (pxrInternal__aapl__pxrReserved__ *)"EditTarget does not contain a valid layer.");
    return 0;
  }
  uint64_t v9 = sub_2169791E0(a1 + 6);
  sub_216D0162C(a2, (int *)&v27);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, &Inverse);
  LOBYTE(v9) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec((pxrInternal__aapl__pxrReserved__::SdfLayer *)v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&Inverse);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&Inverse + 1);
  sub_21697C414(&Inverse);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_21697C414(&v27);
  if ((v9 & 1) == 0) {
    return 1;
  }
  sub_216DED378((uint64_t)a1, a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v31);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v31) & 1) == 0) {
    goto LABEL_9;
  }
  double Inverse = COERCE_DOUBLE("usd/stage.cpp");
  uint64_t v33 = (atomic_ullong *)"_ClearValue";
  uint64_t v34 = 2004;
  unint64_t v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ClearValue(UsdTimeCode, const UsdAttribute &)";
  char v36 = 0;
  sub_216D0162C(a2, &v29);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v27);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1 + 6);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v20);
  uint64_t v24 = *(char *)(Identifier + 23) >= 0 ? Identifier : *(void *)Identifier;
  unint64_t v25 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Failed to get attribute spec <%s> in layer @%s@", v22, v23, Text, v24);
  char v26 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&Inverse, "attrSpec", v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_21697C414(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_21697C414(&v29);
  if (v26)
  {
LABEL_9:
    double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 13));
    uint64_t v33 = v10;
    double v11 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, a3);
    uint64_t v12 = (uint64_t **)sub_216A64148(&v31);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v12, &v27);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v27);
    unint64_t v14 = sub_216A64148(&v31);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v29);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    uint64_t v16 = v28;
    if (v28)
    {
      unint64_t add_explicit = (void *)atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release);
      if (add_explicit == 1) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t v17 = 1;
  }
  else
  {
    uint64_t v17 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v31);
  return v17;
}

void sub_216DEFE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdObject *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  sub_216D16CFC((uint64_t)&v44, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  char v8 = pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v44, "clear metadata");
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if (v45) {
    sub_216D16E0C(v45);
  }
  if ((v8 & 1) == 0) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48);
  uint64_t v10 = sub_21697CF14((void *)this + 6);
  if (!(v11 & 1 | (unint64_t)v10))
  {
    uint64_t v44 = "usd/stage.cpp";
    uint64_t v45 = (atomic_ullong *)"_ClearMetadata";
    uint64_t v46 = 2028;
    unint64_t v47 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(const UsdObject &, const TfT"
                            "oken &, const TfToken &)";
    char v48 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"EditTarget does not contain a valid layer.");
    return 0;
  }
  uint64_t v12 = sub_2169791E0((uint64_t *)this + 6);
  sub_216D0162C((uint64_t)a2, (int *)__p);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v44);
  LOBYTE(v12) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec((pxrInternal__aapl__pxrReserved__::SdfLayer *)v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
  sub_21697C414(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
  sub_21697C414(__p);
  if (v12)
  {
    uint64_t v43 = 0;
    if (*(int *)a2 < 2)
    {
      sub_216D435AC((uint64_t)a2, (uint64_t)&v44);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v44, __p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v43, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      sub_216D6B6A8((uint64_t)a2, (uint64_t)&v44);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePropertySpecForEditing(this, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v44, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v43, (atomic_uint **)__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
      if ((v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_21697C414(&v46);
    if (v45) {
      sub_216D16E0C(v45);
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v43) & 1) == 0) {
      goto LABEL_20;
    }
    uint64_t v44 = "usd/stage.cpp";
    uint64_t v45 = (atomic_ullong *)"_ClearMetadata";
    uint64_t v46 = 2046;
    unint64_t v47 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(const UsdObject &, const TfT"
                            "oken &, const TfToken &)";
    char v48 = 0;
    sub_216D0162C((uint64_t)a2, &v41);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, __p);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v9);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v32);
    uint64_t v36 = *(char *)(Identifier + 23) >= 0 ? Identifier : *(void *)Identifier;
    uint64_t v37 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No spec at <%s> in layer @%s@", v34, v35, Text, v36);
    char v38 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "spec", v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
    sub_21697C414(&v41);
    if (v38)
    {
LABEL_20:
      uint64_t v16 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v43);
      uint64_t Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v16);
      unint64_t v18 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v43);
      unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v18);
      if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(Schema, a3, SpecType))
      {
        if (*(void *)a4)
        {
          uint64_t v20 = (uint64_t **)sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v43);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v20, (uint64_t *)&v44);
          BOOL v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v44);
          uint64_t v22 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v43);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v22, __p);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseFieldDictValueByKey(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3, a4);
        }
        else
        {
          unint64_t v25 = (uint64_t **)sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v43);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v25, (uint64_t *)&v44);
          char v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v44);
          uint64_t v27 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v43);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v27, __p);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a3);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
        uint64_t v28 = v45;
        if (v45 && atomic_fetch_add_explicit((atomic_uint *volatile)v45 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_ullong *))(*v28 + 8))(v28);
        }
        uint64_t v14 = 1;
        goto LABEL_38;
      }
      uint64_t v44 = "usd/stage.cpp";
      uint64_t v45 = (atomic_ullong *)"_ClearMetadata";
      uint64_t v46 = 2056;
      unint64_t v47 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ClearMetadata(const UsdObject &, const T"
                              "fToken &, const TfToken &)";
      char v48 = 0;
      unint64_t v23 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v23)
      {
        uint64_t v24 = (const char *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0) {
          uint64_t v24 = *(const char **)v24;
        }
      }
      else
      {
        uint64_t v24 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, SpecType, (uint64_t)__p);
      if (v40 >= 0) {
        int v29 = __p;
      }
      else {
        int v29 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot clear metadata. '%s' is not registered as valid metadata for spec type %s.", v24, (const char *)v29);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v14 = 0;
LABEL_38:
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v43);
    return v14;
  }
  return 1;
}

void sub_216DF046C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
}

void sub_216DF05BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D16AD8((uint64_t)va);
  JUMPOUT(0x216DF05B0);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t a2@<X8>)
{
  char v3 = (atomic_ullong *)*((void *)this + 3);
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(v3 + 6, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
  sub_216D16CFC(a2, (uint64_t *)&v5, &v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
  sub_21697C414(&v4);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216DF0660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, atomic_ullong *a10)
{
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t a2@<X8>)
{
  sub_216ABBA60(&v10, (uint64_t *)this + 4);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_2169791E0(&v10);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v4, (atomic_uint **)&v12);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)v11;
  if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v5 + 8))(v5);
  }
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  IsValiduint64_t Identifier = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString);
  if (IsValidIdentifier)
  {
    char v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsValidIdentifier);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, &v10);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    uint64_t result = sub_21697C414(&v10);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216DF07B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_216ABBA60(a2, (uint64_t *)this + 4);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = a2;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    PrimDataAtPathOrInPrototype = (atomic_ullong *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPathOrInPrototype(this, v3);
    if (PrimDataAtPathOrInPrototype)
    {
      uint64_t v7 = PrimDataAtPathOrInPrototype;
      if (PrimDataAtPathOrInPrototype[2] == *(void *)v3) {
        char v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimDataAtPathOrInPrototype);
      }
      char v8 = v7;
      atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(0);
      char v8 = 0;
    }
    sub_216D16CFC(a3, (uint64_t *)&v8, v3);
    if (v8) {
      sub_216D16E0C(v8);
    }
  }
  else
  {
    *(_DWORD *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
  }
}

void sub_216DF08E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *a10)
{
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_216ABBA60(&v6, (uint64_t *)this + 4);
  char v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v6);
  uint64_t v4 = sub_216D563F8(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetDefaultPrim(v3, v4);
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DF0994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::ClearDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  sub_216ABBA60(&v3, (uint64_t *)this + 4);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ClearDefaultPrim(v1);
  uint64_t result = v4;
  if (v4)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DF0A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  sub_216ABBA60(&v5, (uint64_t *)this + 4);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v5);
  HasDefaultPriuint64_t m = pxrInternal__aapl__pxrReserved__::SdfLayer::HasDefaultPrim(v1);
  uint64_t v3 = v6;
  if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return HasDefaultPrim;
}

void sub_216DF0ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t PrimDataAtPath = pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPath((pxrInternal__aapl__pxrReserved__::UsdStage *)this, a2);
  if (!PrimDataAtPath)
  {
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPathInPrototypeForInstancePath(this[18], a2, &v6);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v6)) {
      uint64_t PrimDataAtPath = pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPath((pxrInternal__aapl__pxrReserved__::UsdStage *)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
    }
    else {
      uint64_t PrimDataAtPath = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
  }
  return PrimDataAtPath;
}

void sub_216DF0B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2)) {
    goto LABEL_17;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v8);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (uint64_t)&v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
      sub_21697C414(&v8);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v14, v6))
      {
        NameToken = (atomic_uint **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14, NameToken, (uint64_t)&v8);
        *(_DWORD *)a3 = v8;
        *(void *)(a3 + 8) = v10;
        uint64_t v10 = 0;
        sub_21697D878((_DWORD *)(a3 + 16), &v11);
        sub_21697D8B4((_DWORD *)(a3 + 20), &v12);
        *(void *)(a3 + 24) = v13;
        uint64_t v13 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
        sub_21697C414(&v11);
        if (v10) {
          sub_216D16E0C(v10);
        }
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        goto LABEL_4;
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_21697C414(&v16);
      if (v15) {
        sub_216D16E0C(v15);
      }
    }
LABEL_17:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
    return;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2, (uint64_t)&v14);
  *(_DWORD *)a3 = v14;
  *(void *)(a3 + 8) = v15;
  char v15 = 0;
  sub_21697D878((_DWORD *)(a3 + 16), &v16);
  sub_21697D8B4((_DWORD *)(a3 + 20), &v17);
  *(void *)(a3 + 24) = v18;
  uint64_t v18 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
LABEL_4:
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
}

void sub_216DF0DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetPropertyAtPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(this, a2, (uint64_t)&v4);
  sub_216D6B6A8((uint64_t)&v4, a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216DF0E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(this, a2, (uint64_t)&v4);
  sub_216D6B7B4((uint64_t)&v4, a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216DF0ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetRelationshipAtPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(this, a2, (uint64_t)&v4);
  sub_216D6B8C4((uint64_t)&v4, a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216DF0F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  if (sub_216DF0FF4((uint64_t *)this + 25, (uint64_t)&v4, (unsigned int *)a2)) {
    uint64_t v2 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v6 = 0;
  sub_21685C048(&v4);
  return v2;
}

{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  if (sub_216DF0FF4((uint64_t *)this + 25, (uint64_t)&v4, (unsigned int *)a2)) {
    uint64_t v2 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v6 = 0;
  sub_21685C048(&v4);
  return v2;
}

void sub_216DF0FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216DF0FF4(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216E18B24(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_216E18E3C, 0);
}

void sub_216DF10D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForUnload(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    char v5 = "usd/stage.cpp";
    uint64_t v6 = "_IsValidForUnload";
    uint64_t v7 = 2254;
    uint64_t v8 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForUnload(const SdfPath &) const";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to load/unload a relative path <%s>");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(a2, v3))
  {
    char v5 = "usd/stage.cpp";
    uint64_t v6 = "_IsValidForUnload";
    uint64_t v7 = 2259;
    uint64_t v8 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForUnload(const SdfPath &) const";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to load/unload a prototype path <%s>");
    return 0;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForLoad(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForUnload(this, a2)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, a2, (uint64_t)&v29);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v29, v4) & 1) == 0)
  {
    sub_216981010(&v28, a2);
    for (uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698105C((_DWORD *)&v28 + 1, (_DWORD *)a2 + 1);
          ;
          uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v23))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(i);
      if (v28 == *(void *)v7) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, (uint64_t)&v23);
      int v29 = (int)v23;
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)v24;
      uint64_t v24 = 0;
      char v9 = (atomic_ullong *)v30;
      int v30 = v8;
      if (v9) {
        sub_216D16E0C(v9);
      }
      sub_21697DE94(&v31, (int *)&v25);
      sub_21697DEEC(&v32, (int *)&v25 + 1);
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v33 = v26;
      unint64_t v26 = 0;
      char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v29, v10);
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_21697C414(&v25);
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v24;
      if (v24) {
        sub_216D16E0C(v24);
      }
      if (IsDefined) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, &v23);
      sub_21697DE94((int *)&v28, (int *)&v23);
      sub_21697DEEC((int *)&v28 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    }
    uint64_t v13 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
    if (v28 == *v13)
    {
      unint64_t v23 = "usd/stage.cpp";
      uint64_t v24 = (atomic_ullong *)"_IsValidForLoad";
      uint64_t v25 = 2290;
      unint64_t v26 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForLoad(const SdfPath &) const";
      char v27 = 0;
      unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
      if (*((char *)String + 23) >= 0) {
        char v15 = (const char *)String;
      }
      else {
        char v15 = (const char *)*String;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Attempt to load a path <%s> which is not present in the stage", v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
      sub_21697C414(&v28);
      goto LABEL_35;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
    sub_21697C414(&v28);
  }
  int v16 = v30;
  if (!v30 || (uint64_t v17 = *((void *)v30 + 7), (v17 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v30, v5);
    uint64_t v17 = *((void *)v16 + 7);
  }
  if (v17)
  {
    if (!sub_216D6B2D0((uint64_t)&v29, v5))
    {
      uint64_t v12 = 1;
      goto LABEL_36;
    }
    unint64_t v23 = "usd/stage.cpp";
    uint64_t v24 = (atomic_ullong *)"_IsValidForLoad";
    uint64_t v25 = 2303;
    unint64_t v26 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForLoad(const SdfPath &) const";
    char v27 = 0;
    uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
    if (*((char *)v20 + 23) >= 0) {
      BOOL v21 = (const char *)v20;
    }
    else {
      BOOL v21 = (const char *)*v20;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to load instance prototype <%s>", v21);
  }
  else
  {
    unint64_t v23 = "usd/stage.cpp";
    uint64_t v24 = (atomic_ullong *)"_IsValidForLoad";
    uint64_t v25 = 2297;
    unint64_t v26 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForLoad(const SdfPath &) const";
    char v27 = 0;
    uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
    if (*((char *)v18 + 23) >= 0) {
      unsigned __int8 v19 = (const char *)v18;
    }
    else {
      unsigned __int8 v19 = (const char *)*v18;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to load an inactive path <%s>", v19);
  }
LABEL_35:
  uint64_t v12 = 0;
LABEL_36:
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_21697C414(&v31);
  if (v30) {
    sub_216D16E0C((atomic_ullong *)v30);
  }
  return v12;
}

void sub_216DF1530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DF1588(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
    uint64_t v3 = *(void *)(v2 + 56);
  }
  return v3 & 1;
}

unint64_t *pxrInternal__aapl__pxrReserved__::UsdStage::_DiscoverPayloads(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3, uint64_t *a4, char a5, uint64_t *a6)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  for (uint64_t i = 5; i != 8; ++i)
    v63[i - 1] = 0;
  unint64_t v64 = 0;
  v63[1] = 0;
  __int16 v65 = &v66;
  v63[0] = sub_216E19264;
  for (uint64_t j = 5; j != 8; ++j)
    v58[j - 1] = 0;
  unint64_t v59 = 0;
  v58[1] = 0;
  uint64_t v60 = &v61;
  v58[0] = sub_216E19264;
  int v51 = a1;
  char v52 = a5;
  uint64_t v53 = a4;
  int v54 = a6;
  int v55 = &v62;
  uint64_t v56 = &v57;
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a1, a2, (uint64_t)&v128);
    sub_216DF1FC0((uint64_t *)&v51, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v128);
    if ((v130 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v130 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v129 + 1);
    sub_21697C414(&v129);
    uint64_t v10 = (atomic_ullong *)v128.i64[1];
    if (v128.i64[1]) {
LABEL_9:
    }
      sub_216D16E0C(v10);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a1, a2, (uint64_t)v46);
    char IsDefined = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v46, v18);
    if (IsDefined)
    {
      UsdPrimAllPrimsPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(IsDefined);
      uint64_t v21 = UsdPrimAllPrimsPredicate[1].i64[0];
      v22.i64[0] = -8193;
      v22.i64[0] = vandq_s8(*UsdPrimAllPrimsPredicate, v22).u64[0];
      v22.i64[1] = vorrq_s8(*UsdPrimAllPrimsPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
      int8x16_t v128 = v22;
      uint64_t v129 = v21;
      sub_216D3B730((uint64_t)v43, (uint64_t)v46, &v128);
      sub_216D3ADBC(v43, (uint64_t)&v39);
      *(void *)&long long v34 = v43[1];
      *((void *)&v34 + 1) = v43;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v36);
      int v37 = 0;
      __int16 v38 = 0;
      v128.i32[0] = 0;
      uint64_t v131 = 65539;
      int v132 = 55;
      tbb::task_group_context::init((uint64_t)&v128, v23, v24, v25);
      long long v72 = v39;
      sub_216981010(&v73, &v40);
      sub_21698105C(&v74, v41);
      int v75 = v41[1];
      __int16 v76 = v42;
      long long v67 = v34;
      sub_216981010(&v68, &v35);
      sub_21698105C(&v69, &v36);
      int v70 = v37;
      __int16 v71 = v38;
      long long v82 = v72;
      sub_216981010(&v83, &v73);
      sub_21698105C(&v84, &v74);
      int v85 = v75;
      __int16 v86 = v76;
      long long v77 = v67;
      sub_216981010(&v78, &v68);
      sub_21698105C(&v79, &v69);
      int v80 = v70;
      __int16 v81 = v71;
      int v95 = (uint64_t *)&v51;
      long long v91 = v82;
      sub_216981010(&v92, &v83);
      sub_21698105C((_DWORD *)&v92 + 1, &v84);
      int v93 = v85;
      __int16 v94 = v86;
      long long v87 = v77;
      sub_216981010(&v88, &v78);
      sub_21698105C((_DWORD *)&v88 + 1, &v79);
      int v89 = v80;
      __int16 v90 = v81;
      if (v91 != v87
        || v92 != v88
        || v93 != v89
        || v94 != v90
        || HIBYTE(v94) != HIBYTE(v90))
      {
        long long v101 = v91;
        sub_216981010(&v102, &v92);
        sub_21698105C(&v103, (_DWORD *)&v92 + 1);
        int v104 = v93;
        __int16 v105 = v94;
        long long v96 = v87;
        sub_216981010(&v97, &v88);
        sub_21698105C(&v98, (_DWORD *)&v88 + 1);
        int v99 = v89;
        __int16 v100 = v90;
        long long v111 = v101;
        sub_216981010(&v112, &v102);
        sub_21698105C(&v113, &v103);
        int v114 = v104;
        __int16 v115 = v105;
        long long v106 = v96;
        sub_216981010(&v107, &v97);
        sub_21698105C(&v108, &v98);
        int v109 = v99;
        __int16 v110 = v100;
        v126[0] = &unk_26C769D98;
        *(void *)&long long v121 = &v128;
        unint64_t v26 = (tbb::internal::allocate_child_proxy *)tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v121, 8uLL);
        *((unsigned char *)v26 - 11) = 1;
        *(void *)unint64_t v26 = &unk_26C746C48;
        int v127 = v26;
        v126[1] = &v95;
        uint64_t v27 = tbb::internal::allocate_child_proxy::allocate(v26, 0x50uLL);
        long long v121 = v111;
        sub_216981010(&v122, &v112);
        sub_21698105C(&v123, &v113);
        int v124 = v114;
        __int16 v125 = v115;
        long long v116 = v106;
        sub_216981010(&v117, &v107);
        sub_21698105C(&v118, &v108);
        int v119 = v109;
        __int16 v120 = v110;
        *(unsigned char *)(v27 - 11) = 1;
        *(void *)uint64_t v27 = &unk_26C769E28;
        *(_OWORD *)(v27 + 8) = v121;
        sub_216981010((_DWORD *)(v27 + 24), &v122);
        sub_21698105C((_DWORD *)(v27 + 28), &v123);
        *(_DWORD *)(v27 + 32) = v124;
        *(_WORD *)(v27 + 36) = v125;
        *(_OWORD *)(v27 + 40) = v116;
        sub_216981010((_DWORD *)(v27 + 56), &v117);
        sub_21698105C((_DWORD *)(v27 + 60), &v118);
        *(_DWORD *)(v27 + 64) = v119;
        *(_WORD *)(v27 + 68) = v120;
        *(void *)(v27 + 72) = v126;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v118);
        sub_21697C414(&v117);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v123);
        sub_21697C414(&v122);
        uint64_t v28 = v127;
        *((void *)v127 - 3) = 2;
        (*(void (**)(void, tbb::internal::allocate_child_proxy *, uint64_t))(**((void **)v28 - 5) + 8))(*((void *)v28 - 5), v28, v27);
        sub_216E1932C((uint64_t)v126, v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v108);
        sub_21697C414(&v107);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v113);
        sub_21697C414(&v112);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v98);
        sub_21697C414(&v97);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v103);
        sub_21697C414(&v102);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v88 + 1);
      sub_21697C414(&v88);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1);
      sub_21697C414(&v92);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v79);
      sub_21697C414(&v78);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v84);
      sub_21697C414(&v83);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
      sub_21697C414(&v68);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v74);
      sub_21697C414(&v73);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v128);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_21697C414(&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v41);
      sub_21697C414(&v40);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v45);
      sub_21697C414(&v44);
    }
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
    sub_21697C414(&v48);
    uint64_t v10 = v47;
    if (v47) {
      goto LABEL_9;
    }
  }
  if (a4)
  {
    v33[1] = 0;
    v33[2] = 0;
    v33[0] = (uint64_t)&v62;
    unint64_t v11 = v64;
    __dmb(0xBu);
    unint64_t v12 = tbb::internal::concurrent_vector_base_v3::internal_capacity((tbb::internal::concurrent_vector_base_v3 *)v63);
    if (v12 >= v11) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v12;
    }
    v32[0] = &v62;
    v32[1] = v13;
    v32[2] = 0;
    sub_216DF20B4(a4, v33, v32);
  }
  if (a6)
  {
    v31[1] = 0;
    void v31[2] = 0;
    v31[0] = (uint64_t)&v57;
    unint64_t v14 = v59;
    __dmb(0xBu);
    unint64_t v15 = tbb::internal::concurrent_vector_base_v3::internal_capacity((tbb::internal::concurrent_vector_base_v3 *)v58);
    if (v15 >= v14) {
      unint64_t v16 = v14;
    }
    else {
      unint64_t v16 = v15;
    }
    v30[0] = &v57;
    v30[1] = v16;
    v30[2] = 0;
    sub_216DF20B4(a6, v31, v30);
  }
  sub_216E19274(&v57);
  return sub_216E19274(&v62);
}

void sub_216DF1E94(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void sub_216DF1FC0(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v4 = *a1;
  if (sub_216DF1588((uint64_t)a2, a2))
  {
    if ((sub_216D6B2D0((uint64_t)a2, v5) & 1) == 0)
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D6B334((uint64_t)a2, v6, v7);
      if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasAnyPayloads(v8))
      {
        unint64_t v11 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D6B334((uint64_t)a2, v9, v10);
        Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(v11);
        if (!*((unsigned char *)a1 + 8)
          || !pxrInternal__aapl__pxrReserved__::PcpCache::IsPayloadIncluded(*(void *)(v4 + 128), (unsigned int *)Path))
        {
          if (a1[2]) {
            sub_216E0BFBC(a1[4], Path, v12, (uint64_t)v18);
          }
          if (a1[3])
          {
            uint64_t v14 = a1[5];
            sub_216D0162C((uint64_t)a2, &v16);
            sub_216E0C028(v14, &v16, v15, (uint64_t)v18);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
            sub_21697C414(&v16);
          }
        }
      }
    }
  }
}

void sub_216DF20A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

uint64_t *sub_216DF20B4(uint64_t *result, uint64_t *a2, void *a3)
{
  if (a2[1] != a3[1] || *a2 != *a3)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = result + 1;
    do
    {
      uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216E19EA8(a2);
      uint64_t result = sub_2169814FC(v6, v7, v8, v8);
      uint64_t v9 = a2[1];
      uint64_t v10 = a2[2];
      uint64_t v11 = v9 + 1;
      a2[1] = v9 + 1;
      if (v10)
      {
        uint64_t v12 = v10 + 8;
        if (((v9 - 1) & v11) != 0) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        a2[2] = v13;
      }
    }
    while (v11 != a3[1] || *a2 != *a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Load(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v11[0] = 0;
  v11[1] = 0;
  v9[1] = 0;
  uint64_t v10 = v11;
  uint64_t v8 = (uint64_t *)v9;
  v9[0] = 0;
  sub_216A5CF30(&v8, a2, a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::LoadAndUnload((uint64_t)a1, &v8, &v10, a3);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a1, a2, a4);
  sub_216981EE8((uint64_t)&v8, v9[0]);
  sub_216981EE8((uint64_t)&v10, v11[0]);
}

void sub_216DF21F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdStage::LoadAndUnload(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v8 = *(const char **)(a1 + 1192);
  if (v8)
  {
    if (v8[23] < 0) {
      uint64_t v8 = *(const char **)v8;
    }
  }
  else
  {
    uint64_t v8 = "UsdStages in aggregate";
  }
  int v95 = (pxrInternal__aapl__pxrReserved__::SdfPath **)v8;
  uint64_t EffectiveRuleForPath = sub_216E19F08((uint64_t)&v107, "Usd", (char *)&v95);
  uint64_t v10 = a3[2];
  if (a2[2]) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (v10)
    {
      uint64_t v12 = (void *)*a3;
      if ((void *)*a3 == a3 + 1) {
        goto LABEL_133;
      }
      char v13 = 1;
      while (1)
      {
        uint64_t EffectiveRuleForPath = pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::GetEffectiveRuleForPath((char **)(a1 + 1232), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 28));
        if (EffectiveRuleForPath != 2) {
          goto LABEL_21;
        }
        uint64_t v14 = (void *)v12[1];
        if (v14)
        {
          do
          {
            unint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            unint64_t v15 = (void *)v12[2];
            BOOL v11 = *v15 == (void)v12;
            uint64_t v12 = v15;
          }
          while (!v11);
        }
        v13 &= EffectiveRuleForPath == 2;
        uint64_t v12 = v15;
        if (v15 == a3 + 1)
        {
          if (v13) {
            goto LABEL_133;
          }
          goto LABEL_21;
        }
      }
    }
    int v74 = (void *)*a2;
    if ((void *)*a2 == a2 + 1) {
      goto LABEL_133;
    }
    while (1)
    {
      int v75 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v74 + 28);
      if (a4 == 1) {
        break;
      }
      if (!a4)
      {
        uint64_t EffectiveRuleForPath = pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::IsLoadedWithAllDescendants((char **)(a1 + 1232), v75);
        goto LABEL_141;
      }
LABEL_142:
      __int16 v76 = (void *)v74[1];
      if (v76)
      {
        do
        {
          long long v77 = v76;
          __int16 v76 = (void *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          long long v77 = (void *)v74[2];
          BOOL v11 = *v77 == (void)v74;
          int v74 = v77;
        }
        while (!v11);
      }
      int v74 = v77;
      if (v77 == a2 + 1) {
        goto LABEL_133;
      }
    }
    uint64_t EffectiveRuleForPath = pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::IsLoadedWithNoDescendants((char **)(a1 + 1232), v75);
LABEL_141:
    if ((EffectiveRuleForPath & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_142;
  }
LABEL_21:
  v106[0] = 0;
  v106[1] = 0;
  v104[1] = 0;
  __int16 v105 = (uint64_t *)v106;
  int v103 = (uint64_t *)v104;
  v104[0] = 0;
  uint64_t v18 = (void *)*a2;
  int v16 = a2 + 1;
  int v17 = v18;
  if (v18 != v16)
  {
    do
    {
      uint64_t EffectiveRuleForPath = pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForLoad((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
      if (EffectiveRuleForPath) {
        uint64_t EffectiveRuleForPath = (uint64_t)sub_216A5CF30(&v105, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28), (_DWORD *)v17 + 7);
      }
      unsigned __int8 v19 = (void *)v17[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          unsigned __int8 v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v17[2];
          BOOL v11 = *v20 == (void)v17;
          int v17 = v20;
        }
        while (!v11);
      }
      int v17 = v20;
    }
    while (v20 != v16);
  }
  uint64_t v23 = (void *)*a3;
  uint64_t v21 = a3 + 1;
  int8x16_t v22 = v23;
  if (v23 != v21)
  {
    do
    {
      uint64_t EffectiveRuleForPath = pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidForUnload((pxrInternal__aapl__pxrReserved__::UsdStage *)EffectiveRuleForPath, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v22 + 28));
      if (EffectiveRuleForPath) {
        uint64_t EffectiveRuleForPath = (uint64_t)sub_216A5CF30(&v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v22 + 28), (_DWORD *)v22 + 7);
      }
      uint64_t v24 = (void *)v22[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v22[2];
          BOOL v11 = *v25 == (void)v22;
          int8x16_t v22 = v25;
        }
        while (!v11);
      }
      int8x16_t v22 = v25;
    }
    while (v25 != v21);
  }
  unint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 1232);
  pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::LoadAndUnload((int *)(a1 + 1232), &v105, &v103, a4);
  uint64_t v27 = v105;
  if (v105 == (uint64_t *)v106)
  {
    __int16 v100 = 0;
    long long v101 = 0;
    unint64_t v102 = 0;
  }
  else
  {
    do
    {
      sub_216981010(&v78, (_DWORD *)v27 + 7);
      sub_21698105C((_DWORD *)&v78 + 1, (_DWORD *)v27 + 8);
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v78, &v100);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v100))
        {
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100, (uint64_t)&v95);
          if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v95, v28))goto LABEL_47; {
          int v30 = v96;
          }
          if (!v96 || (uint64_t v31 = *((void *)v96 + 7), (v31 & 0x800) != 0))
          {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v96, v29);
            uint64_t v31 = *((void *)v30 + 7);
          }
          if ((v31 & 2) != 0)
          {
            if (*(void **)((char *)v27 + 28) != v78) {
              sub_216A5CF30(&v105, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v78, &v78);
            }
            int v32 = 13;
          }
          else
          {
LABEL_47:
            sub_2169C487C((int *)&v78, &v100);
            sub_2169C48D4((int *)&v78 + 1, (_DWORD *)&v100 + 1);
            int v32 = 0;
          }
          if ((v99 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v98);
          sub_21697C414(&v97);
          if (v96) {
            sub_216D16E0C((atomic_ullong *)v96);
          }
        }
        else
        {
          int v32 = 13;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
        sub_21697C414(&v100);
      }
      while (!v32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
      sub_21697C414(&v78);
      unint64_t v33 = (uint64_t *)v27[1];
      if (v33)
      {
        do
        {
          long long v34 = v33;
          unint64_t v33 = (uint64_t *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          long long v34 = (uint64_t *)v27[2];
          BOOL v11 = *v34 == (void)v27;
          uint64_t v27 = v34;
        }
        while (!v11);
      }
      uint64_t v27 = v34;
    }
    while (v34 != (uint64_t *)v106);
    int v35 = v105;
    __int16 v100 = 0;
    long long v101 = 0;
    unint64_t v102 = 0;
    unint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 1232);
    if (v105 != (uint64_t *)v106)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetMostAncestralInstancePath(*(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)(a1 + 144), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v35 + 28), (int *)&v95);
        BOOL v36 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v95);
        if (v36) {
          int v37 = &v95;
        }
        else {
          int v37 = (pxrInternal__aapl__pxrReserved__::SdfPath ***)((char *)v35 + 28);
        }
        __int16 v38 = v101;
        if ((unint64_t)v101 >= v102)
        {
          int v40 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216981B30((uint64_t *)&v100, v37);
        }
        else
        {
          sub_216981010(v101, v37);
          if (v36) {
            long long v39 = (_DWORD *)&v95 + 1;
          }
          else {
            long long v39 = v35 + 4;
          }
          sub_21698105C((_DWORD *)v38 + 1, v39);
          int v40 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v38 + 8);
        }
        long long v101 = v40;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
        sub_21697C414(&v95);
        int v41 = (uint64_t *)v35[1];
        if (v41)
        {
          do
          {
            __int16 v42 = v41;
            int v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            __int16 v42 = (uint64_t *)v35[2];
            BOOL v11 = *v42 == (void)v35;
            int v35 = v42;
          }
          while (!v11);
        }
        int v35 = v42;
      }
      while (v42 != (uint64_t *)v106);
    }
  }
  uint64_t v43 = v103;
  if (v103 != (uint64_t *)v104)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetMostAncestralInstancePath(*(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)(a1 + 144), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v43 + 28), (int *)&v95);
      BOOL v44 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v95);
      if (v44) {
        uint64_t v45 = &v95;
      }
      else {
        uint64_t v45 = (pxrInternal__aapl__pxrReserved__::SdfPath ***)((char *)v43 + 28);
      }
      uint64_t v46 = v101;
      if ((unint64_t)v101 >= v102)
      {
        int v48 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216981B30((uint64_t *)&v100, v45);
      }
      else
      {
        sub_216981010(v101, v45);
        if (v44) {
          unint64_t v47 = (_DWORD *)&v95 + 1;
        }
        else {
          unint64_t v47 = v43 + 4;
        }
        sub_21698105C((_DWORD *)v46 + 1, v47);
        int v48 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v46 + 8);
      }
      long long v101 = v48;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
      sub_21697C414(&v95);
      int v49 = (uint64_t *)v43[1];
      if (v49)
      {
        do
        {
          uint64_t v50 = v49;
          int v49 = (uint64_t *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          uint64_t v50 = (uint64_t *)v43[2];
          BOOL v11 = *v50 == (void)v43;
          uint64_t v43 = v50;
        }
        while (!v11);
      }
      uint64_t v43 = v50;
    }
    while (v50 != (uint64_t *)v104);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::RemoveDescendentPaths((uint64_t)&v100);
  pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(&v95);
  char v52 = v100;
  int v51 = v101;
  while (v52 != v51)
  {
    pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly((uint64_t **)&v95, *(const pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 128), v52);
    char v52 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v52 + 8);
  }
  uint64_t IncludedPayloads = pxrInternal__aapl__pxrReserved__::PcpCache::GetIncludedPayloads(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 128));
  sub_216E19F7C((uint64_t)&v93, *(void **)(IncludedPayloads + 16), 0);
  v92[0] = 0;
  v92[1] = 0;
  long long v91 = v92;
  int v55 = v100;
  for (uint64_t i = v101; v55 != i; v55 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v55 + 8))
  {
    uint64_t v56 = sub_216AEE8AC(v93, &v94, v55, &v78);
    sub_216D35CF4((uint64_t *)&v91, v56, v57);
  }
  char v58 = *(void **)(a1 + 128);
  int v79 = 0;
  uint64_t v80 = 0;
  int v78 = &v79;
  pxrInternal__aapl__pxrReserved__::PcpCache::RequestPayloads(v58, &v78, &v91, (uint64_t **)&v95);
  sub_216981EE8((uint64_t)&v78, v79);
  if (sub_216C4B19C(8) && sub_216C4B19C(8))
  {
    unint64_t v59 = &v78;
    sub_216DF2E14(&v105);
    if (v80 < 0) {
      unint64_t v59 = v78;
    }
    uint64_t v60 = &v88;
    sub_216DF2E14(&v103);
    if (v90 < 0) {
      uint64_t v60 = v88;
    }
    uint64_t v61 = &v85;
    sub_216DF2F5C(v26);
    if (v87 < 0) {
      uint64_t v61 = v85;
    }
    sub_216DF2E14(&v91);
    int v62 = v84;
    uint64_t v63 = (void **)v83;
    sub_216D59A34(&v100);
    uint64_t v66 = &v83;
    if (v62 < 0) {
      uint64_t v66 = v63;
    }
    if (v82 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"UsdStage::LoadAndUnload()\n  finalLoadSet: %s\n  finalUnloadSet: %s\n  _loadRules: %s\n  payloadsToExclude: %s\n  recomposePaths: %s\n", v64, v65, v59, v60, v61, v66, p_p);
    if (v82 < 0) {
      operator delete(__p);
    }
    if (v84 < 0) {
      operator delete(v83);
    }
    if (v87 < 0) {
      operator delete(v85);
    }
    if (SHIBYTE(v90) < 0) {
      operator delete(v88);
    }
    if (SHIBYTE(v80) < 0) {
      operator delete(v78);
    }
  }
  if (sub_216C4B19C(1)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"\nProcessing Load/Unload changes\n", v68, v69);
  }
  int v89 = 0;
  uint64_t v90 = 0;
  uint64_t v88 = &v89;
  sub_216DF30A4((pxrInternal__aapl__pxrReserved__::PcpCache **)a1, (pxrInternal__aapl__pxrReserved__::PcpChanges *)&v95, (char *)&v88);
  sub_216D61884(&v85, a1);
  int v70 = v100;
  for (j = v101; v70 != j; int v70 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v70 + 8))
  {
    int v78 = v70;
    sub_216E1B264((uint64_t **)&v88, v70, (uint64_t)&unk_2174BFD90, (_DWORD **)&v78);
  }
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)&v78, (uint64_t *)&v85, (uint64_t)&v88);
  sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)&v78, (uint64_t *)&v85);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)&v78);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(&v78, (uint64_t *)&v85);
  int v78 = &unk_26C768CE0;
  sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)&v78, (uint64_t *)&v85);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)&v78);
  uint64_t v72 = v86;
  if (v86 && atomic_fetch_add_explicit((atomic_uint *volatile)(v86 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  sub_216D5FE08((uint64_t)&v88, v89);
  sub_216981EE8((uint64_t)&v91, v92[0]);
  sub_216981EE8((uint64_t)&v93, v94);
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)&v95);
  int v95 = &v100;
  sub_216981168((void ***)&v95);
  sub_216981EE8((uint64_t)&v103, v104[0]);
  sub_216981EE8((uint64_t)&v105, v106[0]);
LABEL_133:
  while (v108--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v107);
}

void sub_216DF2B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,void *a50,uint64_t a51,char a52,void *a53,uint64_t a54,uint64_t a55)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_216981EE8((uint64_t)&a49, a50);
  sub_216981EE8((uint64_t)&a52, a53);
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)&a55);
  a55 = v55 - 176;
  sub_216981168((void ***)&a55);
  sub_216981EE8(v55 - 152, *(void **)(v55 - 144));
  sub_216981EE8(v55 - 128, *(void **)(v55 - 120));
  sub_21684E6B8(v55 - 104);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Unload(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  v4[1] = 0;
  char v5 = v6;
  uint64_t v3 = (uint64_t *)v4;
  v4[0] = 0;
  sub_216A5CF30(&v3, a2, a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::LoadAndUnload((uint64_t)this, &v5, &v3, 0);
  sub_216981EE8((uint64_t)&v3, v4[0]);
  sub_216981EE8((uint64_t)&v5, v6[0]);
}

void sub_216DF2DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_216DF2E14(void *a1)
{
  sub_21677B834((uint64_t)v3);
  sub_216E1A000(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216DF2F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DF2F5C(pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216DF3090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216DF30A4(pxrInternal__aapl__pxrReserved__::PcpCache **a1, pxrInternal__aapl__pxrReserved__::PcpChanges *this, char *a3)
{
  pxrInternal__aapl__pxrReserved__::PcpChanges::Apply(this, (uint64_t)this, a3);
  LayerStackChanges = (void *)pxrInternal__aapl__pxrReserved__::PcpChanges::GetLayerStackChanges(this);
  uint64_t v9 = LayerStackChanges + 1;
  uint64_t v10 = (void *)*LayerStackChanges;
  if ((void *)*LayerStackChanges != LayerStackChanges + 1)
  {
    do
    {
      BOOL v11 = (void *)sub_216BBCEA8(v10 + 4);
      sub_216BCA858(v11, v35);
      if (v35[0] != v35[1])
      {
        sub_216779094(__p, "Recomposing stage");
        pxrInternal__aapl__pxrReserved__::UsdStage::_ReportPcpErrors((uint64_t)a1, (uint64_t *)v35, (uint64_t *)__p);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
      }
      __p[0] = v35;
      sub_216787968((void ***)__p);
      uint64_t v12 = (void *)v10[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (void *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          uint64_t v10 = v13;
        }
        while (!v14);
      }
      uint64_t v10 = v13;
    }
    while (v13 != v9);
  }
  CacheChanges = (void *)pxrInternal__aapl__pxrReserved__::PcpChanges::GetCacheChanges(this, v7, v8);
  if (CacheChanges[2])
  {
    uint64_t v16 = *CacheChanges;
    int v17 = *(void **)(*CacheChanges + 40);
    uint64_t v18 = *CacheChanges + 48;
    if (v17 != (void *)v18)
    {
      do
      {
        v35[0] = (_DWORD *)v17 + 7;
        sub_216E1B264((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28), (uint64_t)&unk_2174BFD90, v35);
        if (sub_216C4B19C(1))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Did Change Significantly: %s\n", v20, v21, Text);
        }
        int8x16_t v22 = (void *)v17[1];
        if (v22)
        {
          do
          {
            uint64_t v23 = v22;
            int8x16_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            uint64_t v23 = (void *)v17[2];
            BOOL v14 = *v23 == (void)v17;
            int v17 = v23;
          }
          while (!v14);
        }
        int v17 = v23;
      }
      while (v23 != (void *)v18);
    }
    uint64_t v24 = *(void **)(v16 + 88);
    uint64_t v25 = (void *)(v16 + 96);
    if (v24 != v25)
    {
      do
      {
        v35[0] = (_DWORD *)v24 + 7;
        sub_216E1B264((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 28), (uint64_t)&unk_2174BFD90, v35);
        if (sub_216C4B19C(1))
        {
          unint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 28));
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Did Change Prim: %s\n", v27, v28, v26);
        }
        int v29 = (void *)v24[1];
        if (v29)
        {
          do
          {
            int v30 = v29;
            int v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            int v30 = (void *)v24[2];
            BOOL v14 = *v30 == (void)v24;
            uint64_t v24 = v30;
          }
          while (!v14);
        }
        uint64_t v24 = v30;
      }
      while (v30 != v25);
    }
  }
  else if (sub_216C4B19C(1))
  {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"No cache changes\n", v31, v32);
  }
  sub_216E1A0B8((uint64_t)a1, (uint64_t)a3);
  pxrInternal__aapl__pxrReserved__::UsdStage::_RegisterPerLayerNotices(a1);
}

void sub_216DF3318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::string __p = &a17;
  sub_216787968((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_216DF334C(pxrInternal__aapl__pxrReserved__::TfNotice *a1, uint64_t *a2)
{
  char v4 = sub_216D24140(a2);
  if (v5 & 1 | (unint64_t)v4)
  {
    uint64_t v6 = (const std::type_info *)(sub_216D01530(a2) + 16);
    uint64_t v7 = (char *)sub_216851B24((uint64_t)a2);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = (const std::type_info *)MEMORY[0x263F8C288];
  }

  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(a1, v6, v7, v8);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::GetLoadSet@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpCache::GetIncludedPayloads(this[16]);
  for (uint64_t i = (void *)*((void *)result + 2); i; uint64_t i = (void *)*i)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimPathUsingPrimIndexAtPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), &v7);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v7)) {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7;
    }
    else {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2);
    }
    sub_216A5CF30((uint64_t **)a2, v6, v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    uint64_t result = sub_21697C414(&v7);
  }
  return result;
}

void sub_216DF3480(_Unwind_Exception *a1)
{
  sub_216981EE8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimPathUsingPrimIndexAtPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2, (uint64_t)&v10);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v10, v6);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  if (IsDefined)
  {
    sub_2169C487C(a3, a2);
    sub_2169C48D4(a3 + 1, (_DWORD *)a2 + 1);
  }
  else if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetNumPrototypes(this[18]))
  {
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrimsInPrototypesUsingPrimIndexPath(this[18], a2, (uint64_t *)&v10);
    int v8 = v10;
    uint64_t v9 = v11;
    while (v8 != v9)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v8) & 1) == 0)
      {
        sub_2169C487C(a3, v8);
        sub_2169C48D4(a3 + 1, (_DWORD *)v8 + 1);
        break;
      }
      ++v8;
    }
    unint64_t v15 = &v10;
    sub_216981168((void ***)&v15);
  }
}

void sub_216DF35E8(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::FindLoadable@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_216981010(&v7, a2);
  sub_21698105C(&v8, (_DWORD *)a2 + 1);
  a3[2] = 0;
  a3[1] = 0;
  *a3 = (uint64_t)(a3 + 1);
  pxrInternal__aapl__pxrReserved__::UsdStage::_DiscoverPayloads(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, 0, 0, 0, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_21697C414(&v7);
}

void sub_216DF36C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981EE8(v2, *(void **)(v2 + 8));
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::SetLoadRules(uint64_t a1, _DWORD **a2)
{
  uint64_t v3 = a1 + 1232;
  if ((_DWORD **)v3 != a2) {
    sub_216CF5EB0(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  }
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v14);
  char v5 = *(const pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 128);
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v14, v5, v6);
  pxrInternal__aapl__pxrReserved__::UsdStage::_Recompose((pxrInternal__aapl__pxrReserved__::PcpCache **)a1, (const pxrInternal__aapl__pxrReserved__::PcpChanges *)v14);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D61884(&v12, a1);
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (uint64_t *)v11;
  v9[0] = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
  sub_216E1B264(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9[0], (uint64_t)&unk_2174BFD90, v9);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v9, &v12, (uint64_t)&v10);
  sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v9, &v12);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v9);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(v9, &v12);
  v9[0] = &unk_26C768CE0;
  sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v9, &v12);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)v9);
  sub_216D5FE08((uint64_t)&v10, v11[0]);
  uint64_t v8 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)v14);
}

void sub_216DF3868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void *);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)va);
  sub_216D5FE08((uint64_t)va1, v13);
  uint64_t v3 = v16;
  if (v16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)va2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_Recompose(pxrInternal__aapl__pxrReserved__::PcpCache **this, const pxrInternal__aapl__pxrReserved__::PcpChanges *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  sub_216DF30A4(this, a2, (char *)&v2);
  sub_216D5FE08((uint64_t)&v2, v3[0]);
}

void sub_216DF3944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void pxrInternal__aapl__pxrReserved__::UsdStage::SetPopulationMask(uint64_t a1, _DWORD **a2)
{
  uint64_t v3 = a1 + 1208;
  if ((_DWORD **)v3 != a2) {
    sub_216A98D9C(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v14);
  char v5 = *(const pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 128);
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v14, v5, v6);
  pxrInternal__aapl__pxrReserved__::UsdStage::_Recompose((pxrInternal__aapl__pxrReserved__::PcpCache **)a1, (const pxrInternal__aapl__pxrReserved__::PcpChanges *)v14);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D61884(&v12, a1);
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (uint64_t *)v11;
  v9[0] = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
  sub_216E1B264(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9[0], (uint64_t)&unk_2174BFD90, v9);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v9, &v12, (uint64_t)&v10);
  sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v9, &v12);
  pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v9);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(v9, &v12);
  v9[0] = &unk_26C768CE0;
  sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v9, &v12);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)v9);
  sub_216D5FE08((uint64_t)&v10, v11[0]);
  uint64_t v8 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)v14);
}

void sub_216DF3AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void *);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)va);
  sub_216D5FE08((uint64_t)va1, v13);
  uint64_t v3 = v16;
  if (v16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)va2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::ExpandPopulationMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = 0;
  int v32 = 0;
  uint64_t v33 = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216980EEC(&v31, *(_DWORD **)(a1 + 1208), *(_DWORD **)(a1 + 1216), (uint64_t)(*(void *)(a1 + 1216) - *(void *)(a1 + 1208)) >> 3);
  uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  char v8 = pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::IncludesSubtree((pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)&v31, v7);
  int v29 = (void **)&v31;
  sub_216981168(&v29);
  if ((v8 & 1) == 0)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (uint64_t)&v31);
      pxrInternal__aapl__pxrReserved__::UsdPrim::FindAllRelationshipTargetPaths(&v29, &v31, a2, a3, 0);
      pxrInternal__aapl__pxrReserved__::UsdPrim::FindAllAttributeConnectionPaths(&v27, &v31, a2, a4, 0);
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v29;
      uint64_t v9 = v30;
      if (v29 == (void **)v30) {
        goto LABEL_14;
      }
      uint64_t v11 = v30;
      uint64_t v12 = (int *)v29 + 3;
      while (!pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::Includes((pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 1208), v10))
      {
        uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
        v12 += 2;
        if (v10 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9) {
          goto LABEL_15;
        }
      }
      if (v10 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9) {
        goto LABEL_15;
      }
      if ((int *)((char *)v10 + 8) == v9)
      {
LABEL_14:
        uint64_t v11 = (int *)v10;
      }
      else
      {
        uint64_t v11 = (int *)v10;
        do
        {
          if (!pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::Includes((pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 1208), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 - 1)))
          {
            sub_21697DE94(v11, v12 - 1);
            sub_21697DEEC(v11 + 1, v12);
            v11 += 2;
          }
          uint64_t v13 = v12 + 1;
          v12 += 2;
        }
        while (v13 != v9);
      }
LABEL_15:
      sub_216AD6870((uint64_t)&v29, v11, v30);
      uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v27;
      uint64_t v15 = v28;
      if (v27 == (void ***)v28) {
        goto LABEL_27;
      }
      uint64_t v16 = v28;
      int v17 = (int *)v27 + 3;
      while (!pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::Includes((pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 1208), v14))
      {
        uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
        v17 += 2;
        if (v14 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)v15) {
          goto LABEL_28;
        }
      }
      if (v14 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)v15) {
        goto LABEL_28;
      }
      if ((int *)((char *)v14 + 8) == v15)
      {
LABEL_27:
        uint64_t v16 = (int *)v14;
      }
      else
      {
        uint64_t v16 = (int *)v14;
        do
        {
          if (!pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::Includes((pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 1208), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 - 1)))
          {
            sub_21697DE94(v16, v17 - 1);
            sub_21697DEEC(v16 + 1, v17);
            v16 += 2;
          }
          uint64_t v18 = v17 + 1;
          v17 += 2;
        }
        while (v18 != v15);
      }
LABEL_28:
      sub_216AD6870((uint64_t)&v27, v16, v28);
      if (v29 == (void **)v30 && v27 == (void ***)v28)
      {
        char v23 = 0;
      }
      else
      {
        memset(v26, 0, sizeof(v26));
        sub_216980EEC(v26, *(_DWORD **)(a1 + 1208), *(_DWORD **)(a1 + 1216), (uint64_t)(*(void *)(a1 + 1216) - *(void *)(a1 + 1208)) >> 3);
        unsigned __int8 v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v29;
        uint64_t v20 = v30;
        while (v19 != (pxrInternal__aapl__pxrReserved__::SdfPath *)v20)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v19, &v35);
          sub_216CF897C((pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
          sub_21697C414(&v35);
          unsigned __int8 v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 + 8);
        }
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v27;
        int8x16_t v22 = v28;
        while (v21 != (pxrInternal__aapl__pxrReserved__::SdfPath *)v22)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v21, &v35);
          sub_216CF897C((pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
          sub_21697C414(&v35);
          uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 8);
        }
        pxrInternal__aapl__pxrReserved__::UsdStage::SetPopulationMask(a1, (_DWORD **)v26);
        int v35 = v26;
        sub_216981168((void ***)&v35);
        char v23 = 1;
      }
      v26[0] = (void **)&v27;
      sub_216981168(v26);
      uint64_t v27 = &v29;
      sub_216981168((void ***)&v27);
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
      sub_21697C414(&v33);
      if (v32) {
        sub_216D16E0C(v32);
      }
    }
    while ((v23 & 1) != 0);
  }
}

void sub_216DF3EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::ExpandPopulationMask(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);

  pxrInternal__aapl__pxrReserved__::UsdStage::ExpandPopulationMask((uint64_t)a1, UsdPrimDefaultPredicate, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetAllPrototypes(this[18], (uint64_t *)&v22);
  unint64_t v4 = 126 - 2 * __clz(((char *)v23 - (char *)v22) >> 3);
  if (v23 == v22) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_2169D38EC((uint64_t)v22, v23, (uint64_t)v15, v5, 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v22;
  uint64_t v7 = v23;
  if (v22 != v23)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, v6, (uint64_t)v17);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v17, v8) & 1) != 0|| (v15[0] = (void **)"usd/stage.cpp", v15[1] = (void **)"GetPrototypes", v15[2] = (void **)2690, v15[3] = (void **)"vector<UsdPrim> pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes() const", v16 = 0, Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v6), uint64_t v14 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Failed to find prim at prototype path <%s>.\n", v12, v13, Text), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "p", v14)))
      {
        unint64_t v9 = a2[1];
        if (v9 >= a2[2])
        {
          uint64_t v10 = sub_216E1B48C(a2, (uint64_t)v17);
        }
        else
        {
          sub_216D3B3EC((uint64_t)(a2 + 2), a2[1], (uint64_t)v17);
          uint64_t v10 = v9 + 32;
          a2[1] = v9 + 32;
        }
        a2[1] = v10;
      }
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
      sub_21697C414(&v19);
      if (v18) {
        sub_216D16E0C(v18);
      }
      uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
    }
    while (v6 != (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7);
  }
  v15[0] = (void **)&v22;
  sub_216981168(v15);
}

void sub_216DF4194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a16 = (void **)&a20;
  sub_216981168(&a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetInstancesForPrototype(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = sub_216D6B2D0((uint64_t)a2, a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)*((void *)this + 18);
    sub_216D0162C((uint64_t)a2, (int *)&v13);
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetInstancePrimIndexesForPrototype(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
    sub_21697C414(&v13);
    sub_216DF43B0(a3, (v19 - v18) >> 3);
    char v8 = v18;
    for (i = v19; v8 != i; char v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8))
    {
      PrimDataAtPathOrInPrototype = (atomic_ullong *)pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPathOrInPrototype((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, v8);
      uint64_t v12 = PrimDataAtPathOrInPrototype;
      if (PrimDataAtPathOrInPrototype) {
        atomic_fetch_add_explicit(PrimDataAtPathOrInPrototype + 6, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimDataAtPathOrInPrototype);
      sub_216D16CFC((uint64_t)&v13, (uint64_t *)&v12, v11);
      sub_216DF4444(a3, (uint64_t)&v13);
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
      if (v12) {
        sub_216D16E0C(v12);
      }
    }
    uint64_t v13 = &v18;
    sub_216981168((void ***)&v13);
  }
}

void sub_216DF4340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a10 = (void **)&a14;
  sub_216981168(&a10);
  sub_216E1B384(&a10);
  _Unwind_Resume(a1);
}

void **sub_216DF43B0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 32 * v6;
    sub_216E1B57C(a1, v7);
    return sub_216E1B738(v7);
  }
  return result;
}

void sub_216DF4430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E1B738((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216DF4444(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = a1 + 2;
    if (v12) {
      uint64_t v13 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    int v15 = &v13[32 * v9];
    uint64_t v17 = &v13[32 * v12];
    sub_216D6C860(v5, (uint64_t)v15, a2);
    int v16 = v15 + 32;
    sub_216E1B57C(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_216E1B738(&v14);
  }
  else
  {
    uint64_t result = sub_216D6C860((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_216DF4544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E1B738((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrototypeForInstance(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if ((*((unsigned char *)a2 + 57) & 1) == 0) {
    return 0;
  }
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)*((void *)this + 18);
  PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(a2);
  Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(PrimIndex);
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypeForInstanceablePrimIndexPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v8)) {
    uint64_t PrimDataAtPath = pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  }
  else {
    uint64_t PrimDataAtPath = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  return PrimDataAtPath;
}

void sub_216DF45EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(pxrInternal__aapl__pxrReserved__::UsdStage *a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, int a4)
{
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5)
  {
    if ((v5 & 0x100) != 0)
    {
      if (sub_216C4B19C(3))
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instance prim <%s>\n", v12, v13, Text);
      }
      goto LABEL_11;
    }
    int v200 = 0;
    unsigned int v201 = 0;
    uint64_t v202 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Usd_PrimData::_ComposePrimChildNames((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, &v200) & 1) == 0)
    {
      uint64_t v195 = (void **)"usd/stage.cpp";
      uint64_t v196 = "_ComposeChildren";
      uint64_t v197 = 2870;
      int v198 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(Usd_PrimDataPtr, const UsdStagePopulationMask *, BOOL)";
      char v199 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v195, "prim->_ComposePrimChildNames(&nameOrder)", 0) & 1) == 0)goto LABEL_270; {
    }
      }
    if (a3
      && (SourcePrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, v8, v9), Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(SourcePrimIndex), (pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::IncludesSubtree((pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path) & 1) == 0))
    {
      int v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v200;
      uint64_t v14 = v201;
      int v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v201;
      if (v200 != v201)
      {
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)Path, v15, &v195);
          BOOL v17 = pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::Includes(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v195);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
          sub_21697C414(&v195);
          if (!v17) {
            break;
          }
          int v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v15 + 8);
          if (v15 == (const pxrInternal__aapl__pxrReserved__::TfToken *)v14) {
            goto LABEL_30;
          }
        }
      }
      if (v15 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v14)
      {
        uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v15 + 8);
        if ((uint64_t *)((char *)v15 + 8) == v14)
        {
          int v16 = v15;
        }
        else
        {
          int v16 = v15;
          do
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)Path, v18, &v195);
            BOOL v19 = pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::Includes(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v195);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
            sub_21697C414(&v195);
            if (v19)
            {
              if (v18 != v16)
              {
                if ((*(void *)v16 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                *(void *)int v16 = *(void *)v18;
                *(void *)uint64_t v18 = 0;
              }
              int v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v16 + 8);
            }
            uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v18 + 8);
          }
          while (v18 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v14);
        }
      }
LABEL_30:
      sub_216AD0DE4((uint64_t)&v200, v16, v201);
    }
    else
    {
      a3 = 0;
    }
    uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v200;
    int v20 = v201;
    if (v200 == v201)
    {
      if (sub_216C4B19C(3))
      {
        __int16 v42 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Children empty <%s>\n", v43, v44, v42);
      }
      pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyDescendents(a1, (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    }
    else
    {
      unint64_t v22 = *(void *)(a2 + 32);
      if (v22)
      {
        unint64_t v23 = *(void *)(a2 + 32);
        while ((*(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)) & 0xFFFFFFFFFFFFFFF8) == (*(void *)v21 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v24 = *(void *)(v23 + 40);
          unint64_t v23 = v24 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v21 + 8);
          if ((v24 & 7) != 0) {
            unint64_t v25 = 0;
          }
          else {
            unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v25) {
            BOOL v26 = v21 == (const pxrInternal__aapl__pxrReserved__::TfToken *)v20;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            unint64_t v23 = v25;
            break;
          }
        }
        if (v22 != v23 && a4)
        {
          unint64_t v27 = v22;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildSubtree((uint64_t)a1, v27, (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, (const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)a3);
            uint64_t v28 = *(void *)(v27 + 40);
            if ((v28 & 7) != 0) {
              unint64_t v27 = 0;
            }
            else {
              unint64_t v27 = v28 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          while (v27 != v23);
        }
        if (v23)
        {
          if (v21 == (const pxrInternal__aapl__pxrReserved__::TfToken *)v20)
          {
            BOOL v58 = sub_216C4B19C(3);
            unint64_t v59 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23;
            if (v58)
            {
              uint64_t v60 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Children removed from end <%s>\n", v61, v62, v60);
              unint64_t v59 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23;
            }
            while (v59)
            {
              uint64_t v63 = *((void *)v59 + 5);
              if ((v63 & 7) != 0) {
                unint64_t v64 = 0;
              }
              else {
                unint64_t v64 = v63 & 0xFFFFFFFFFFFFFFF8;
              }
              pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrim(a1, v59);
              unint64_t v59 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v64;
            }
            if (v23 == v22)
            {
              *(void *)(a2 + 32) = 0;
            }
            else
            {
              uint64_t v65 = *(void *)(v22 + 40);
              if ((v65 & 7) != 0) {
                unint64_t v66 = 0;
              }
              else {
                unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
              }
              while (v66 != v23)
              {
                unint64_t v22 = v66;
                uint64_t v67 = *(void *)(v66 + 40);
                if ((v67 & 7) != 0) {
                  unint64_t v66 = 0;
                }
                else {
                  unint64_t v66 = v67 & 0xFFFFFFFFFFFFFFF8;
                }
              }
              *(void *)(v22 + 40) = a2 | 1;
            }
            goto LABEL_270;
          }
          if (sub_216C4B19C(3))
          {
            int v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Require general children recomposition <%s>\n", v30, v31, v29);
          }
          sub_216E1B8C8(&v193, ((char *)v20 - (char *)v21) >> 3);
          int v32 = v194;
          if (v194 == v193)
          {
            int v35 = v194;
          }
          else
          {
            uint64_t v33 = 0;
            uint64_t v34 = ((char *)v194 - (unsigned char *)v193) >> 3;
            do
            {
              *((void *)v193 + v33++) = v21;
              uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v21 + 8);
            }
            while (v34 != v33);
            int v35 = (uint64_t **)v193;
            int v32 = v194;
          }
          unint64_t v68 = 126 - 2 * __clz(v32 - v35);
          if (v32 == v35) {
            uint64_t v69 = 0;
          }
          else {
            uint64_t v69 = v68;
          }
          sub_216E1B940((uint64_t)v35, v32, v69, 1);
          sub_216E1C540((uint64_t)&__p, v23, 0);
          unint64_t v183 = v22;
          unint64_t v70 = 126 - 2 * __clz((v192 - (unsigned char *)__p) >> 3);
          if (v192 == __p) {
            uint64_t v71 = 0;
          }
          else {
            uint64_t v71 = v70;
          }
          sub_216E1C628((uint64_t)__p, (uint64_t *)v192, v71, 1);
          int v73 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)__p;
          uint64_t v72 = v192;
          int v75 = (const pxrInternal__aapl__pxrReserved__::TfToken **)v193;
          int v74 = v194;
          unsigned int v188 = 0;
          unsigned int v189 = 0;
          BOOL v190 = 0;
          sub_216884D8C((void **)&v188, ((char *)v194 - (unsigned char *)v193) >> 3);
          if (v75 != (const pxrInternal__aapl__pxrReserved__::TfToken **)v74
            || v73 != (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v72)
          {
            while (1)
            {
              while (v73 == (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v72)
              {
                int v103 = v75;
                int v73 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v72;
LABEL_183:
                int v75 = (const pxrInternal__aapl__pxrReserved__::TfToken **)v74;
                if (v103 != (const pxrInternal__aapl__pxrReserved__::TfToken **)v74)
                {
                  while (1)
                  {
                    if (v73 != (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v72)
                    {
                      long long v121 = *v103;
                      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*v73 + 16));
                      uint64_t v123 = *(void *)v121;
                      uint64_t v124 = *(void *)NameToken;
                      if (*(void *)v121) {
                        BOOL v125 = v124 == 0;
                      }
                      else {
                        BOOL v125 = 1;
                      }
                      if (v125)
                      {
                        if (v123) {
                          BOOL v126 = 1;
                        }
                        else {
                          BOOL v126 = v124 == 0;
                        }
                        if (v126) {
                          goto LABEL_239;
                        }
                      }
                      else
                      {
                        if (v123 == v124) {
                          goto LABEL_239;
                        }
                        unint64_t v127 = v123 & 0xFFFFFFFFFFFFFFF8;
                        unint64_t v128 = v124 & 0xFFFFFFFFFFFFFFF8;
                        unint64_t v129 = *(void *)(v127 + 8);
                        unint64_t v130 = *(void *)(v128 + 8);
                        if (v129 >= v130)
                        {
                          if (v129 != v130) {
                            goto LABEL_239;
                          }
                          uint64_t v133 = *(const void **)(v128 + 16);
                          unint64_t v131 = v128 + 16;
                          int v132 = v133;
                          int v134 = *(char *)(v131 + 23);
                          uint64_t v137 = *(const void **)(v127 + 16);
                          unint64_t v135 = v127 + 16;
                          int v136 = v137;
                          int v138 = *(char *)(v135 + 23);
                          if (v138 >= 0) {
                            size_t v139 = *(unsigned __int8 *)(v135 + 23);
                          }
                          else {
                            size_t v139 = *(void *)(v135 + 8);
                          }
                          if (v138 >= 0) {
                            __int16 v140 = (const void *)v135;
                          }
                          else {
                            __int16 v140 = v136;
                          }
                          if (v134 >= 0) {
                            size_t v141 = *(unsigned __int8 *)(v131 + 23);
                          }
                          else {
                            size_t v141 = *(void *)(v131 + 8);
                          }
                          if (v134 >= 0) {
                            uint64_t v142 = (const void *)v131;
                          }
                          else {
                            uint64_t v142 = v132;
                          }
                          if (v141 >= v139) {
                            size_t v143 = v139;
                          }
                          else {
                            size_t v143 = v141;
                          }
                          int v144 = memcmp(v140, v142, v143);
                          BOOL v145 = v139 < v141;
                          if (v144) {
                            BOOL v145 = v144 < 0;
                          }
                          if (!v145)
                          {
LABEL_239:
                            int v75 = v103;
                            break;
                          }
                        }
                      }
                    }
                    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), *v103, &v195);
                    if (sub_216C4B19C(3))
                    {
                      uint64_t v147 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v195);
                      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Creating new <%s>\n", v148, v149, v147);
                    }
                    uint64_t v150 = pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v195, v146);
                    uint64_t v151 = v150;
                    int v152 = *v103;
                    uint64_t v153 = v189;
                    if (v189 >= (uint64_t *)v190)
                    {
                      uint64_t v155 = ((char *)v189 - (char *)v188) >> 4;
                      unint64_t v156 = v155 + 1;
                      if ((unint64_t)(v155 + 1) >> 60) {
                        sub_21677CB10();
                      }
                      uint64_t v157 = v190 - (char *)v188;
                      if ((v190 - (char *)v188) >> 3 > v156) {
                        unint64_t v156 = v157 >> 3;
                      }
                      if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v158 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v158 = v156;
                      }
                      if (v158) {
                        long long v159 = (char *)sub_216787EE0((uint64_t)&v190, v158);
                      }
                      else {
                        long long v159 = 0;
                      }
                      long long v160 = (uint64_t *)&v159[16 * v155];
                      *long long v160 = v151;
                      v160[1] = (uint64_t)v152;
                      v162 = (char *)v188;
                      long long v161 = v189;
                      v163 = (char *)v160;
                      if (v189 != v188)
                      {
                        do
                        {
                          *((_OWORD *)v163 - 1) = *((_OWORD *)v161 - 1);
                          v163 -= 16;
                          v161 -= 2;
                        }
                        while (v161 != (uint64_t *)v162);
                        long long v161 = v188;
                      }
                      long long v154 = v160 + 2;
                      unsigned int v188 = (uint64_t *)v163;
                      unsigned int v189 = v160 + 2;
                      BOOL v190 = &v159[16 * v158];
                      if (v161) {
                        operator delete(v161);
                      }
                    }
                    else
                    {
                      *unsigned int v189 = v150;
                      v153[1] = (uint64_t)v152;
                      long long v154 = v153 + 2;
                    }
                    unsigned int v189 = v154;
                    if (a4) {
                      pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildSubtree((uint64_t)a1, *(v154 - 2), (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, (const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)a3);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
                    sub_21697C414(&v195);
                    if (++v103 == (const pxrInternal__aapl__pxrReserved__::TfToken **)v74)
                    {
                      int v75 = (const pxrInternal__aapl__pxrReserved__::TfToken **)v74;
                      break;
                    }
                  }
                }
                if (v75 == (const pxrInternal__aapl__pxrReserved__::TfToken **)v74
                  && v73 == (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v72)
                {
                  goto LABEL_242;
                }
              }
              if (v75 == (const pxrInternal__aapl__pxrReserved__::TfToken **)v74) {
                goto LABEL_151;
              }
              uint64_t v76 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*v73 + 16));
              uint64_t v77 = *(void *)*v75;
              if (!v76 || v77 == 0) {
                break;
              }
              if (v76 == v77) {
                goto LABEL_155;
              }
              unint64_t v80 = v76 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v81 = v77 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v82 = *(void *)(v80 + 8);
              unint64_t v83 = *(void *)(v81 + 8);
              if (v82 >= v83)
              {
                if (v82 != v83) {
                  goto LABEL_155;
                }
                uint64_t v86 = *(const void **)(v81 + 16);
                unint64_t v84 = v81 + 16;
                int v85 = v86;
                int v87 = *(char *)(v84 + 23);
                uint64_t v90 = *(const void **)(v80 + 16);
                unint64_t v88 = v80 + 16;
                int v89 = v90;
                int v91 = *(char *)(v88 + 23);
                if (v91 >= 0) {
                  size_t v92 = *(unsigned __int8 *)(v88 + 23);
                }
                else {
                  size_t v92 = *(void *)(v88 + 8);
                }
                if (v91 >= 0) {
                  int v93 = (const void *)v88;
                }
                else {
                  int v93 = v89;
                }
                if (v87 >= 0) {
                  size_t v94 = *(unsigned __int8 *)(v84 + 23);
                }
                else {
                  size_t v94 = *(void *)(v84 + 8);
                }
                if (v87 >= 0) {
                  int v95 = (const void *)v84;
                }
                else {
                  int v95 = v85;
                }
                if (v94 >= v92) {
                  size_t v96 = v92;
                }
                else {
                  size_t v96 = v94;
                }
                int v97 = memcmp(v93, v95, v96);
                BOOL v98 = v92 < v94;
                if (v97) {
                  BOOL v98 = v97 < 0;
                }
                if (!v98) {
                  goto LABEL_155;
                }
              }
LABEL_151:
              if (sub_216C4B19C(3))
              {
                uint64_t v99 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*v73 + 16));
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Removing <%s>\n", v100, v101, v99);
              }
              unint64_t v102 = *v73++;
              pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrim(a1, v102);
            }
            if (v76) {
              BOOL v79 = 1;
            }
            else {
              BOOL v79 = v77 == 0;
            }
            if (!v79) {
              goto LABEL_151;
            }
LABEL_155:
            if (v75 == (const pxrInternal__aapl__pxrReserved__::TfToken **)v74
              || v73 == (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v72)
            {
              int v103 = v75;
            }
            else
            {
              int v103 = v75;
              do
              {
                int v104 = *v103;
                if ((*(void *)v104 & 0xFFFFFFFFFFFFFFF8) != (*(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*v73 + 16)) & 0xFFFFFFFFFFFFFFF8)) {
                  break;
                }
                if (sub_216C4B19C(3))
                {
                  __int16 v105 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*v73 + 16));
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Preserving <%s>\n", v106, v107, v105);
                }
                int v108 = *v73;
                int v109 = *v103;
                __int16 v110 = v189;
                if (v189 >= (uint64_t *)v190)
                {
                  uint64_t v112 = ((char *)v189 - (char *)v188) >> 4;
                  unint64_t v113 = v112 + 1;
                  if ((unint64_t)(v112 + 1) >> 60) {
                    sub_21677CB10();
                  }
                  uint64_t v114 = v190 - (char *)v188;
                  if ((v190 - (char *)v188) >> 3 > v113) {
                    unint64_t v113 = v114 >> 3;
                  }
                  if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v115 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v115 = v113;
                  }
                  if (v115) {
                    long long v116 = (char *)sub_216787EE0((uint64_t)&v190, v115);
                  }
                  else {
                    long long v116 = 0;
                  }
                  int v117 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v116[16 * v112];
                  *int v117 = v108;
                  v117[1] = v109;
                  int v119 = (char *)v188;
                  int v118 = v189;
                  __int16 v120 = v117;
                  if (v189 != v188)
                  {
                    do
                    {
                      *((_OWORD *)v120 - 1) = *((_OWORD *)v118 - 1);
                      v120 -= 2;
                      v118 -= 2;
                    }
                    while (v118 != (uint64_t *)v119);
                    int v118 = v188;
                  }
                  long long v111 = (uint64_t *)(v117 + 2);
                  unsigned int v188 = (uint64_t *)v120;
                  unsigned int v189 = (uint64_t *)(v117 + 2);
                  BOOL v190 = &v116[16 * v115];
                  if (v118) {
                    operator delete(v118);
                  }
                }
                else
                {
                  *unsigned int v189 = (uint64_t)v108;
                  v110[1] = (uint64_t)v109;
                  long long v111 = v110 + 2;
                }
                unsigned int v189 = v111;
                if (a4) {
                  pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildSubtree((uint64_t)a1, *(v111 - 2), (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, (const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)a3);
                }
                ++v103;
                ++v73;
                if (v103 == (const pxrInternal__aapl__pxrReserved__::TfToken **)v74) {
                  break;
                }
              }
              while (v73 != (pxrInternal__aapl__pxrReserved__::Usd_PrimData **)v72);
            }
            goto LABEL_183;
          }
LABEL_242:
          uint64_t v164 = v188;
          uint64_t v165 = v189;
          if (v188 == v189)
          {
            uint64_t v195 = (void **)"usd/stage.cpp";
            uint64_t v196 = "_ComposeChildren";
            uint64_t v197 = 3098;
            int v198 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(Usd_PrimDataPtr, const UsdStagePopu"
                   "lationMask *, BOOL)";
            char v199 = 0;
            int v179 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v195, "!tempChildren.empty()", 0);
            uint64_t v164 = v188;
            if (!v179)
            {
              if (!v188) {
                goto LABEL_259;
              }
              goto LABEL_258;
            }
            uint64_t v165 = v189;
          }
          unint64_t v166 = v183;
          unint64_t v167 = 126 - 2 * __clz(((char *)v165 - (char *)v164) >> 4);
          if (v165 == v164) {
            uint64_t v168 = 0;
          }
          else {
            uint64_t v168 = v167;
          }
          sub_216E1D24C((unint64_t)v164, v165, v168, 1);
          uint64_t v164 = v188;
          int v169 = v189;
          uint64_t v170 = (((char *)v189 - (char *)v188) >> 4) - 1;
          if (((char *)v189 - (char *)v188) >> 4 != 1)
          {
            unsigned int v171 = v188 + 2;
            uint64_t v172 = *v188;
            do
            {
              uint64_t v173 = *v171;
              v171 += 2;
              *(void *)(v172 + 40) = v173;
              uint64_t v172 = v173;
              --v170;
            }
            while (v170);
          }
          *(void *)(*(v169 - 2) + 40) = a2 | 1;
          if (v23 == v183)
          {
            *(void *)(a2 + 32) = *v164;
          }
          else
          {
            for (uint64_t i = *(void *)(v183 + 40); ; uint64_t i = *(void *)(v175 + 40))
            {
              unint64_t v175 = (i & 7) != 0 ? 0 : i & 0xFFFFFFFFFFFFFFF8;
              if (v175 == v23) {
                break;
              }
              unint64_t v166 = v175;
            }
            *(void *)(v166 + 40) = *v164;
          }
LABEL_258:
          unsigned int v189 = v164;
          operator delete(v164);
LABEL_259:
          if (__p)
          {
            int64_t v192 = (char *)__p;
            operator delete(__p);
          }
          if (v193)
          {
            v194 = (uint64_t **)v193;
            operator delete(v193);
          }
          goto LABEL_270;
        }
      }
      if (v21 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v20)
      {
        unint64_t v182 = v22;
        int v184 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        __int16 v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
        while (1)
        {
          if (!*(void *)v21)
          {
            uint64_t v195 = (void **)"usd/stage.cpp";
            uint64_t v196 = "_ComposeChildren";
            uint64_t v197 = 2946;
            int v198 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(Usd_PrimDataPtr, const UsdStagePopu"
                   "lationMask *, BOOL)";
            char v199 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v195, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to instantiate prim with empty path.");
            goto LABEL_270;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v38, v21, &v193);
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v193))
          {
            uint64_t v37 = pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v193, v39);
            if (v37)
            {
              if (a4) {
                pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildSubtree((uint64_t)a1, v37, (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, (const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)a3);
              }
              if (v36)
              {
                *(void *)(v36 + 40) = v37;
                char v40 = 1;
                uint64_t v36 = v37;
              }
              else
              {
                char v40 = 1;
                uint64_t v36 = v37;
                int v184 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v37;
              }
              goto LABEL_71;
            }
            uint64_t v195 = (void **)"usd/stage.cpp";
            uint64_t v196 = "_ComposeChildren";
            uint64_t v197 = 2959;
            int v198 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(Usd_PrimDataPtr, const UsdStagePopu"
                   "lationMask *, BOOL)";
            char v199 = 0;
            int v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v193);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v195, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to instantiate prim properly: <%s>", v41);
            uint64_t v37 = 0;
          }
          else
          {
            uint64_t v195 = (void **)"usd/stage.cpp";
            uint64_t v196 = "_ComposeChildren";
            uint64_t v197 = 2952;
            int v198 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(Usd_PrimDataPtr, const UsdStagePopu"
                   "lationMask *, BOOL)";
            char v199 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v195, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to instantiate prim with invalid path.");
          }
          char v40 = 0;
LABEL_71:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v193 + 1);
          sub_21697C414(&v193);
          if ((v40 & 1) == 0) {
            goto LABEL_270;
          }
          uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v21 + 8);
          if (v21 == (const pxrInternal__aapl__pxrReserved__::TfToken *)v20)
          {
            unint64_t v48 = v182;
            if (v182)
            {
              unint64_t v49 = a2;
              if (sub_216C4B19C(3))
              {
                uint64_t v50 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v38);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Children appended <%s>\n", v51, v52, v50);
              }
              uint64_t v53 = *(void *)(v182 + 40);
              if ((v53 & 7) == 0)
              {
                unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
                if (v54)
                {
                  do
                  {
                    unint64_t v48 = v54;
                    uint64_t v55 = *(void *)(v54 + 40);
                    uint64_t v56 = v55 & 7;
                    unint64_t v54 = v55 & 0xFFFFFFFFFFFFFFF8;
                    if (v56) {
                      BOOL v57 = 1;
                    }
                    else {
                      BOOL v57 = v54 == 0;
                    }
                  }
                  while (!v57);
                }
              }
              *(void *)(v48 + 40) = v184;
            }
            else
            {
              unint64_t v49 = a2;
              if (sub_216C4B19C(3))
              {
                unint64_t v176 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v38);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Children all new <%s>\n", v177, v178, v176);
              }
              if (*(void *)(a2 + 32))
              {
                uint64_t v195 = (void **)"usd/stage.cpp";
                uint64_t v196 = "_ComposeChildren";
                uint64_t v197 = 2977;
                int v198 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(Usd_PrimDataPtr, const UsdStage"
                       "PopulationMask *, BOOL)";
                char v199 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v195, "!prim->_firstChild", 0);
              }
              *(void *)(a2 + 32) = v184;
            }
            *(void *)(v37 + 40) = v49 | 1;
            goto LABEL_270;
          }
        }
      }
      if (sub_216C4B19C(3))
      {
        uint64_t v45 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Children same in same order <%s>\n", v46, v47, v45);
      }
    }
LABEL_270:
    uint64_t v195 = (void **)&v200;
    sub_216889A04(&v195);
    return;
  }
  if (sub_216C4B19C(3))
  {
    uint64_t v180 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Inactive prim <%s>\n", v6, v7, v180);
  }
LABEL_11:

  pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyDescendents(a1, (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
}

void sub_216DF53AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  a23 = (void *)(v26 - 112);
  sub_216889A04((void ***)&a23);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyDescendents(_DWORD *this, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  if (v2)
  {
    uint64_t v3 = (uint64_t)this;
    unint64_t v4 = this + 278;
    do
    {
      while (1)
      {
        uint64_t v5 = *((void *)v2 + 5) & 7;
        unint64_t v6 = *((void *)v2 + 5) & 0xFFFFFFFFFFFFFFF8;
        if (!*(unsigned char *)(v3 + 1184)) {
          break;
        }
        uint64_t v7 = *(void *)(v3 + 1104);
        v10[0] = 0;
        v10[1] = v7;
        uint64_t v8 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x20uLL);
        *((unsigned char *)v8 - 11) = 1;
        *uint64_t v8 = &unk_26C769F48;
        v8[1] = v3;
        uint64_t v8[2] = v2;
        void v8[3] = v4;
        this = (_DWORD *)(**(uint64_t (***)(void))*(v8 - 5))();
        if (!v5)
        {
          uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v6;
          if (v6) {
            continue;
          }
        }
        return this;
      }
      this = pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrim((pxrInternal__aapl__pxrReserved__::UsdStage *)v3, v2);
      if (v5) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v6 == 0;
      }
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v6;
    }
    while (!v9);
  }
  return this;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildSubtree(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *a4)
{
  if ((*((unsigned char *)this + 57) & 0x10) != 0)
  {
    SourcePrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSourcePrimIndex(this, a2, (char *)this);
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(SourcePrimIndex);
    NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)Path, NameToken, &v12);
  }
  else
  {
    uint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeSubtree(a1, a2, this, a4, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  return sub_21697C414(&v12);
}

void sub_216DF56FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (sub_216C4B19C(3))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)a2 + 16));
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Destroying <%s>\n", v5, v6, Text);
  }
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyDescendents(this, a2);
  *((void *)a2 + 7) |= 0x800uLL;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (!*((unsigned char *)this + 1256))
  {
    sub_216981010(&v15, (_DWORD *)a2 + 4);
    sub_21698105C(&v16, (_DWORD *)a2 + 5);
    if ((sub_216DF6FEC((uint64_t *)this + 25, &v15) & 1) == 0)
    {
      v13[0] = "usd/stage.cpp";
      v13[1] = "_DestroyPrim";
      uint64_t v13[2] = 3494;
      void v13[3] = "void pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrim(Usd_PrimDataPtr)";
      char v14 = 0;
      unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
      if (*((char *)String + 23) >= 0) {
        uint64_t v11 = (uint64_t)String;
      }
      else {
        uint64_t v11 = *String;
      }
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Destroyed prim <%s> not present in stage's data structures", v9, v10, v11);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "_primMap.erase(primPath)", v12);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    return sub_21697C414(&v15);
  }
  return result;
}

void sub_216DF583C(_Unwind_Exception *a1)
{
  sub_21697B754((_DWORD *)(v1 - 40));
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeSubtree(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *a4, _DWORD *a5)
{
  if (*(unsigned char *)(a1 + 1184))
  {
    *(void *)&long long v10 = a1;
    *((void *)&v10 + 1) = a2;
    *(void *)&long long v11 = a3;
    *((void *)&v11 + 1) = a4;
    sub_216981010(&v12, a5);
    sub_21698105C(&v13, a5 + 1);
    uint64_t v7 = *(void *)(a1 + 1104);
    v14[0] = 0;
    v14[1] = v7;
    uint64_t v8 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v14, 0x38uLL);
    *(unsigned char *)(v8 - 11) = 1;
    *(void *)uint64_t v8 = &unk_26C769F00;
    *(_OWORD *)(v8 + 24) = v11;
    *(_OWORD *)(v8 + 8) = v10;
    sub_216981010((_DWORD *)(v8 + 40), &v12);
    sub_21698105C((_DWORD *)(v8 + 44), &v13);
    *(void *)(v8 + 48) = a1 + 1112;
    (***(void (****)(void))(v8 - 40))();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    return sub_21697C414(&v12);
  }
  else
  {
    return (_DWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeSubtreeImpl((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3, a4, a5);
  }
}

void sub_216DF59B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216DF6154((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_ReportPcpErrors(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  memset(v3, 0, sizeof(v3));
  pxrInternal__aapl__pxrReserved__::UsdStage::_ReportErrors(a1, a2, v3, a3);
  unint64_t v4 = (void **)v3;
  sub_216782F20(&v4);
}

void sub_216DF5A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216782F20(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_ReportErrors(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t *a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91D98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91D98))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26798CE80, &dword_216758000);
    __cxa_guard_release(&qword_267B91D98);
  }
  if (*a2 != a2[1] || *a3 != a3[1])
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = (uint64_t *)*a4;
    }
    sub_216ABBA60((uint64_t *)&v66, (uint64_t *)(a1 + 32));
    BOOL v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v66);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v13 = Identifier;
    }
    else {
      uint64_t v13 = *(void *)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"(%s on stage @%s@ <%p>)", v11, v12, v8, v13, a1);
    char v14 = v67;
    if (v67 && atomic_fetch_add_explicit((atomic_uint *volatile)v67 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v14 + 8))(v14);
    }
    uint64_t v61 = 0;
    int v62 = 0;
    unint64_t v63 = 0;
    uint64_t v56 = a3;
    sub_21680BC90((uint64_t *)&v61, 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3) + ((a2[1] - *a2) >> 4));
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    if (*a2 != v18)
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)v17 + 96)))
        {
          (*(void (**)(void **__return_ptr))(**(void **)v17 + 16))(v57);
          if (v58 >= 0) {
            uint64_t v21 = v57;
          }
          else {
            uint64_t v21 = (void **)v57[0];
          }
          if (v65 >= 0) {
            unint64_t v22 = v64;
          }
          else {
            unint64_t v22 = (void **)v64[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s %s", v19, v20, v21, v22);
          unint64_t v23 = v62;
          if ((unint64_t)v62 >= v63)
          {
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            if (0x5555555555555556 * ((uint64_t)(v63 - (void)v61) >> 3) > v25) {
              unint64_t v25 = 0x5555555555555556 * ((uint64_t)(v63 - (void)v61) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v61) >> 3) >= 0x555555555555555) {
              unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v26 = v25;
            }
            unint64_t v70 = &v63;
            if (v26) {
              goto LABEL_47;
            }
            uint64_t v37 = 0;
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)v17 + 96));
          int v28 = *((char *)String + 23);
          uint64_t v29 = *String;
          (*(void (**)(void **__return_ptr))(**(void **)v17 + 16))(v57);
          if (v28 >= 0) {
            int v32 = String;
          }
          else {
            int v32 = (uint64_t *)v29;
          }
          uint64_t v33 = (void **)v57[0];
          if (v58 >= 0) {
            uint64_t v33 = v57;
          }
          if (v65 >= 0) {
            uint64_t v34 = v64;
          }
          else {
            uint64_t v34 = (void **)v64[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"In <%s>: %s %s", v30, v31, v32, v33, v34);
          unint64_t v23 = v62;
          if ((unint64_t)v62 >= v63)
          {
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3);
            unint64_t v36 = v24 + 1;
            if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            if (0x5555555555555556 * ((uint64_t)(v63 - (void)v61) >> 3) > v36) {
              unint64_t v36 = 0x5555555555555556 * ((uint64_t)(v63 - (void)v61) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v61) >> 3) >= 0x555555555555555) {
              unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v26 = v36;
            }
            unint64_t v70 = &v63;
            if (v26) {
LABEL_47:
            }
              uint64_t v37 = (void **)sub_216782ED8((uint64_t)&v63, v26);
            else {
              uint64_t v37 = 0;
            }
LABEL_50:
            __int16 v38 = &v37[3 * v24];
            unint64_t v66 = v37;
            uint64_t v67 = (const char *)v38;
            uint64_t v69 = (const char *)&v37[3 * v26];
            long long v39 = *(_OWORD *)__p;
            void v38[2] = v60;
            *(_OWORD *)__int16 v38 = v39;
            __p[1] = 0;
            uint64_t v60 = 0;
            __p[0] = 0;
            uint64_t v68 = (uint64_t)(v38 + 3);
            sub_216790CCC((uint64_t *)&v61, &v66);
            char v40 = v62;
            sub_216790E64((uint64_t)&v66);
            int v62 = v40;
            if (SHIBYTE(v60) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_52;
          }
        }
        long long v35 = *(_OWORD *)__p;
        v23->__r_.__value_.__r.__words[2] = (std::string::size_type)v60;
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v35;
        __p[1] = 0;
        uint64_t v60 = 0;
        __p[0] = 0;
        int v62 = v23 + 1;
LABEL_52:
        if (v58 < 0) {
          operator delete(v57[0]);
        }
        v17 += 16;
      }
      while (v17 != v18);
    }
    int v41 = *v56;
    __int16 v42 = v56[1];
    if (*v56 != v42)
    {
      do
      {
        uint64_t v43 = v41;
        if (*((char *)v41 + 23) < 0) {
          uint64_t v43 = (uint64_t *)*v41;
        }
        if (v65 >= 0) {
          BOOL v44 = v64;
        }
        else {
          BOOL v44 = (void **)v64[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s %s", v15, v16, v43, v44);
        uint64_t v45 = v62;
        if ((unint64_t)v62 >= v63)
        {
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3);
          unint64_t v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          if (0x5555555555555556 * ((uint64_t)(v63 - (void)v61) >> 3) > v48) {
            unint64_t v48 = 0x5555555555555556 * ((uint64_t)(v63 - (void)v61) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v61) >> 3) >= 0x555555555555555) {
            unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v49 = v48;
          }
          unint64_t v70 = &v63;
          if (v49) {
            uint64_t v50 = (void **)sub_216782ED8((uint64_t)&v63, v49);
          }
          else {
            uint64_t v50 = 0;
          }
          int v51 = &v50[3 * v47];
          unint64_t v66 = v50;
          uint64_t v67 = (const char *)v51;
          uint64_t v69 = (const char *)&v50[3 * v49];
          long long v52 = *(_OWORD *)__p;
          double v51[2] = v60;
          *(_OWORD *)int v51 = v52;
          __p[1] = 0;
          uint64_t v60 = 0;
          __p[0] = 0;
          uint64_t v68 = (uint64_t)(v51 + 3);
          sub_216790CCC((uint64_t *)&v61, &v66);
          uint64_t v53 = v62;
          sub_216790E64((uint64_t)&v66);
          int v62 = v53;
          if (SHIBYTE(v60) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v46 = *(_OWORD *)__p;
          v62->__r_.__value_.__r.__words[2] = (std::string::size_type)v60;
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          int v62 = v45 + 1;
        }
        v41 += 3;
      }
      while (v41 != v42);
    }
    std::mutex::lock(&stru_26798CE80);
    unint64_t v54 = v61;
    for (uint64_t i = v62; v54 != i; ++v54)
    {
      unint64_t v66 = (void **)"usd/stage.cpp";
      uint64_t v67 = "_ReportErrors";
      uint64_t v68 = 3197;
      uint64_t v69 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ReportErrors(const PcpErrorVector &, const std::vector<std"
            "::string> &, const std::string &) const";
      LOBYTE(v70) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v66, v54);
    }
    std::mutex::unlock(&stru_26798CE80);
    unint64_t v66 = (void **)&v61;
    sub_216782F20(&v66);
    if (v65 < 0) {
      operator delete(v64[0]);
    }
  }
}

void sub_216DF606C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35)
{
  a19 = &a25;
  sub_216782F20((void ***)&a19);
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216DF6154(uint64_t a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeSubtreeImpl(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *Parent, const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *a4, _DWORD *a5)
{
  long long v10 = (const char *)*((void *)a1 + 149);
  if (v10)
  {
    if (v10[23] < 0) {
      long long v10 = *(const char **)v10;
    }
  }
  else
  {
    long long v10 = "UsdStages in aggregate";
  }
  v32[0] = (void **)v10;
  sub_216E19F08((uint64_t)&v36, "Usd", (char *)v32);
  long long v11 = (void *)(a2 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a5)) {
    int v12 = a5;
  }
  else {
    int v12 = (_DWORD *)(a2 + 16);
  }
  sub_216981010(&v34, v12);
  sub_21698105C(&v35, v12 + 1);
  PrimIndex = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex(*((void *)a1 + 16), &v34);
  *(void *)(a2 + 8) = PrimIndex;
  if (PrimIndex) {
    goto LABEL_9;
  }
  v32[0] = (void **)"usd/stage.cpp";
  v32[1] = (void **)"_ComposeSubtreeImpl";
  v32[2] = (void **)3342;
  void v32[3] = (void **)"void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeSubtreeImpl(Usd_PrimDataPtr, Usd_PrimData"
                      "ConstPtr, const UsdStagePopulationMask *, const SdfPath &)";
  char v33 = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
  pxrInternal__aapl__pxrReserved__::UsdDescribe(a1, __p);
  if (v31 >= 0) {
    unint64_t v27 = __p;
  }
  else {
    unint64_t v27 = (void **)__p[0];
  }
  int v28 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Prim index at <%s> not found in PcpCache for UsdStage %s", v25, v26, Text, v27);
  char v29 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v32, "prim->_primIndex", v28);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  if (v29)
  {
LABEL_9:
    if (!Parent) {
      Parent = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    }
    int v14 = Parent == *((const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1 + 3)
       && *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(a2 + 8)) != *v11;
    pxrInternal__aapl__pxrReserved__::Usd_PrimData::_ComposeAndCacheFlags((pxrInternal__aapl__pxrReserved__::UsdStage *)a2, Parent, v14);
    pxrInternal__aapl__pxrReserved__::UsdStage::_ComposePrimTypeInfoImpl(a1, (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    if (*v11 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v15))
    {
      sub_216E1DEFC((uint64_t)a1 + 152);
      v32[0] = 0;
      int v16 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v16) {
        int v16 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if (sub_216DF6CBC(a1, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v16 + 112), (const void ****)v32))
      {
        sub_216DF6EA0();
        pxrInternal__aapl__pxrReserved__::Usd_PrimTypeInfoCache::ComputeInvalidPrimTypeToFallbackMap(qword_267B91DE8, (pxrInternal__aapl__pxrReserved__::VtDictionary *)v32, (uint64_t)a1 + 152);
      }
      sub_2168EBBB8(v32, 0);
      goto LABEL_26;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Usd_ClipCache *)*((void *)a1 + 17);
    uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    if (pxrInternal__aapl__pxrReserved__::Usd_ClipCache::PopulateClipsForPrim(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), v18))
    {
      BOOL v19 = (unint64_t *)(a2 + 56);
      unint64_t v20 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFBFFLL;
    }
    else
    {
      BOOL v19 = (unint64_t *)(a2 + 56);
      unint64_t v20 = *(void *)(a2 + 56) & 0xFFFFFFFFFFFFFBFFLL;
      if ((*((void *)Parent + 7) & 0x400) == 0)
      {
        uint64_t v21 = 0;
LABEL_25:
        *BOOL v19 = v21 | v20;
LABEL_26:
        pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren(a1, (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, a4, 1);
        goto LABEL_27;
      }
    }
    uint64_t v21 = 1024;
    goto LABEL_25;
  }
LABEL_27:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
  for (uint64_t result = (uint64_t)sub_21697C414(&v34); v37--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v36))
    ;
  return result;
}

void sub_216DF645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  sub_21697B754(&a23);
  sub_21684E6B8(v23 - 80);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdDescribe@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    unint64_t v4 = sub_216ABBA60(&v28, (uint64_t *)this + 4);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v4);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v7 = Identifier;
    }
    else {
      uint64_t v7 = *(void *)Identifier;
    }
    uint64_t v8 = (uint64_t *)((char *)this + 40);
    sub_216ABBA60(&v26, v8);
    BOOL v9 = sub_21697CF14(&v26);
    unint64_t v12 = v10 & 1 | (unint64_t)v9;
    if (v12)
    {
      sub_216ABBA60(&v22, v8);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v22);
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
      if (*(char *)(v14 + 23) >= 0) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = *(void *)v14;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)", sessionLayer @%s@", v15, v16, v17);
      if (v25 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
    }
    else
    {
      p_p = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"stage with rootLayer @%s@%s", v10, v11, v7, p_p);
    if (v12)
    {
      if (v25 < 0) {
        operator delete(__p);
      }
      uint64_t v20 = v23;
      if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
    uint64_t v21 = v27;
    if (v27 && atomic_fetch_add_explicit((atomic_uint *volatile)(v27 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t result = (void *)v29;
    if (v29)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  else
  {
    return sub_216779094(a2, "null stage");
  }
  return result;
}

void sub_216DF66C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,atomic_uint *a21)
{
  if (a21 && atomic_fetch_add_explicit(a21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a21 + 8))(a21);
  }
  uint64_t v23 = *(atomic_uint **)(v21 - 40);
  if (v23)
  {
    if (atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v23 + 8))(v23);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_ComposePrimTypeInfoImpl(pxrInternal__aapl__pxrReserved__::UsdStage *this, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 7);
  if ((v3 & 0x4000) == 0
    && ((v3 & 0x1000) == 0
     || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)a2 + 16))))
  {
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v16, *((const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2 + 1), 1);
    if (v17 == v19 && v18 == v20)
    {
LABEL_25:
      uint64_t v25 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v25 = 0;
        uint64_t v5 = (void *)sub_216AA5ECC(v21);
        uint64_t v26 = v17;
        uint64_t v27 = v18;
        Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v26);
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v7) {
          uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v27 = &v25;
        uint64_t v28 = &stru_26C74C2C0;
        LOWORD(v29) = 0;
        uint64_t v26 = (uint64_t (**)(void, uint64_t))&unk_26C758B08;
        int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v5, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448), &v26);
        int v9 = (_BYTE)v29 ? 0 : HasField;
        uint64_t v10 = v25;
        if (v9 == 1 && v25 != 0)
        {
          unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
          if (!v12) {
            unint64_t v12 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
          }
          uint64_t v10 = v25;
          if ((v25 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v12 & 0xFFFFFFFFFFFFFFF8)) {
            break;
          }
        }
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v16);
        if (v17 == v19 && v18 == v20) {
          goto LABEL_25;
        }
      }
      uint64_t v13 = v25;
      if ((v25 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v13 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    long long v15 = 0u;
    long long v14 = 0u;
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  sub_216DF6EA0();
  *((void *)a2 + 3) = qword_267B92030;
}

void sub_216DF6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216DF6CBC(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ****a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v20) & 1) == 0)
  {
LABEL_19:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  if (!sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    v18[0] = "usd/stage.h";
    v18[1] = "GetMetadata";
    double v18[2] = 2410;
    _DWORD v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(const TfToken &, T *) const [T = pxrInternal__"
             "aapl__pxrReserved__::VtDictionary]";
    char v19 = 0;
    uint64_t v7 = v16;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E6ALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
    if (v17 < 0) {
      uint64_t v7 = (void **)v16[0];
    }
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      long long v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        long long v11 = *(const char **)v11;
      }
    }
    else
    {
      long long v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v8, v9, (uint64_t)__p);
    if (v15 >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Requested type %s for stage metadatum %s does not match retrieved type %s", (const char *)v7, v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    goto LABEL_19;
  }
  if ((v21 & 4) != 0) {
    uint64_t v5 = (const void ****)(*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  }
  else {
    uint64_t v5 = v20;
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(a3, v5);
  uint64_t v6 = 1;
LABEL_20:
  sub_2168EE084((uint64_t)&v20);
  return v6;
}

void sub_216DF6E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2168EE084(v24 - 56);
  _Unwind_Resume(a1);
}

void sub_216DF6EA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92038))
  {
    sub_216E0C3C0((uint64_t)&unk_267B91DE8);
    __cxa_atexit((void (*)(void *))sub_216E0C394, &unk_267B91DE8, &dword_216758000);
    __cxa_guard_release(&qword_267B92038);
  }
}

void sub_216DF6F30(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrimsInParallel(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(unsigned char *)(a1 + 1184))
  {
    uint64_t v5 = "usd/stage.cpp";
    uint64_t v6 = "_DestroyPrimsInParallel";
    uint64_t v7 = 3437;
    uint64_t v8 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrimsInParallel(const vector<SdfPath> &)";
    char v9 = 0;
    int v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "!_dispatcher");
  }
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v5 = (char *)&unk_26C769B60;
  uint64_t v6 = (const char *)v4;
  return tbb::interface7::internal::isolate_within_arena((uint64_t (***)(void))&v5, 0);
}

uint64_t sub_216DF6FEC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v5 = *a1;
  __dmb(0xBu);
  while (2)
  {
    sub_216E18FDC((uint64_t)&v12, (uint64_t)a1, v5 & v4, 0);
    while (1)
    {
      uint64_t v6 = (void *)(v14 + 16);
      while (1)
      {
        uint64_t v7 = v6;
        uint64_t v6 = (void *)*v6;
        if ((unint64_t)v6 < 0x40) {
          break;
        }
        if (*(void *)a2 == v6[2]) {
          goto LABEL_8;
        }
      }
      if (!v6) {
        break;
      }
LABEL_8:
      if (v13 || (char v13 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v12) & 1) != 0))
      {
        *uint64_t v7 = *v6;
        atomic_fetch_add(a1 + 65, 0xFFFFFFFFFFFFFFFFLL);
        sub_21685C048(&v12);
        uint64_t v10 = 1;
        char v13 = 1;
        unint64_t v12 = (tbb::spin_rw_mutex_v3 *)(v6 + 1);
        tbb::spin_rw_mutex_v3::internal_acquire_writer(v6 + 1);
        sub_21685C048(&v12);
        sub_216E11E34((uint64_t)a1, (uint64_t)v6);
        return v10;
      }
      uint64_t v8 = *a1;
      __dmb(0xBu);
      if (v5 != v8)
      {
        BOOL v9 = sub_21686CF40((uint64_t)a1, v4, v5, v8);
        uint64_t v5 = v8;
        if (v9) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v8 = *a1;
    __dmb(0xBu);
    if (v5 != v8 && sub_21686CF40((uint64_t)a1, v4, v5, v8))
    {
LABEL_15:
      sub_21685C048(&v12);
      uint64_t v5 = v8;
      continue;
    }
    break;
  }
  sub_21685C048(&v12);
  return 0;
}

void sub_216DF7184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Reload(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const char *)*((void *)this + 149);
  if (v2)
  {
    if (v2[23] < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "UsdStages in aggregate";
  }
  *(void *)uint64_t v7 = v2;
  sub_216E19F08((uint64_t)&v18, "Usd", v7);
  pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v7);
  uint64_t v8 = v9;
  v9[0] = 0;
  v11[0] = 0;
  v11[1] = 0;
  v9[1] = 0;
  uint64_t v10 = v11;
  unint64_t v12 = v13;
  v13[0] = 0;
  v15[0] = 0;
  v15[1] = 0;
  v13[1] = 0;
  uint64_t v14 = v15;
  v17[0] = 0;
  v17[1] = 0;
  int v16 = v17;
  *((void *)this + 105) = v7;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v21);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v3);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext(this, v6);
  pxrInternal__aapl__pxrReserved__::ArResolver::RefreshContext((uint64_t)Resolver);
  uint64_t v20 = (void **)v6;
  sub_216787968(&v20);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v6);
  pxrInternal__aapl__pxrReserved__::PcpCache::Reload(*((pxrInternal__aapl__pxrReserved__::PcpCache **)this + 16), *((uint64_t ***)this + 105));
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Reload(*((pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)this + 17));
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v6);
  if (*((char **)this + 105) == v7) {
    pxrInternal__aapl__pxrReserved__::UsdStage::_ProcessPendingChanges(this);
  }
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v21);
  sub_216D5FE08((uint64_t)&v16, v17[0]);
  sub_216D5FE08((uint64_t)&v14, v15[0]);
  sub_216D5FE08((uint64_t)&v12, v13[0]);
  sub_216D5FE08((uint64_t)&v10, v11[0]);
  sub_216D5FE08((uint64_t)&v8, v9[0]);
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)v7);
  while (v19--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v18);
}

void sub_216DF7370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v5 - 72));
  sub_216DF79DC((pxrInternal__aapl__pxrReserved__::PcpChanges *)va);
  sub_21684E6B8(v5 - 96);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_ProcessPendingChanges(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  if (!*((void *)this + 105))
  {
    std::string __p = "usd/stage.cpp";
    uint64_t v28 = "_ProcessPendingChanges";
    uint64_t v29 = 4498;
    uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ProcessPendingChanges()";
    LOBYTE(v31) = 0;
    uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_pendingChanges", 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  if (sub_216C4B19C(1))
  {
    pxrInternal__aapl__pxrReserved__::UsdDescribe(this, &__p);
    uint64_t v4 = v29 >= 0 ? &__p : (void **)__p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"\nProcessPendingChanges (%s)\n", v2, v3, v4);
    if (SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v5 = *((void *)this + 105);
  uint64_t v6 = (unsigned int **)(v5 + 192);
  sub_216DF30A4((int)this, (pxrInternal__aapl__pxrReserved__::PcpChanges *)v5);
  int v35 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this;
  sub_216DFB854(&v35, (uint64_t **)(v5 + 120));
  sub_216DFB854(&v35, (uint64_t **)(v5 + 192));
  sub_216DFB854(&v35, (uint64_t **)(v5 + 216));
  sub_216DFB854(&v35, (uint64_t **)(v5 + 144));
  sub_216DFB854(&v35, (uint64_t **)(v5 + 168));
  sub_216DFBA98((void **)(v5 + 120), (uint64_t **)(v5 + 192));
  uint64_t v7 = *(unsigned int **)(v5 + 192);
  uint64_t v8 = (unsigned int *)(v5 + 200);
  if (v7 != (unsigned int *)(v5 + 200))
  {
    do
    {
      std::string __p = 0;
      LOBYTE(v28) = 0;
      uint64_t v29 = 0;
      if (sub_216DF0FF4((uint64_t *)this + 25, (uint64_t)&__p, v7 + 8))
      {
        BOOL v9 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v29 + 24);
        if (v9) {
          pxrInternal__aapl__pxrReserved__::UsdStage::_ComposePrimTypeInfoImpl(this, v9);
        }
      }
      uint64_t v29 = 0;
      sub_21685C048(&__p);
      uint64_t v10 = (unsigned int *)*((void *)v7 + 1);
      if (v10)
      {
        do
        {
          long long v11 = v10;
          uint64_t v10 = *(unsigned int **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v11 = (unsigned int *)*((void *)v7 + 2);
          BOOL v12 = *(void *)v11 == (void)v7;
          uint64_t v7 = v11;
        }
        while (!v12);
      }
      uint64_t v7 = v11;
    }
    while (v11 != v8);
  }
  if (*(void *)(v5 + 136))
  {
    char v13 = *v6;
    if (*v6 == v8) {
      goto LABEL_29;
    }
    do
    {
      std::string __p = v13 + 8;
      uint64_t v14 = sub_216E1B264((uint64_t **)(v5 + 120), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 8), (uint64_t)&unk_2174BFD90, (_DWORD **)&__p);
      sub_216B08220((uint64_t)(v14 + 10), (__n128 *)(v13 + 10));
      char v15 = (unsigned int *)*((void *)v13 + 1);
      if (v15)
      {
        do
        {
          int v16 = v15;
          char v15 = *(unsigned int **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (unsigned int *)*((void *)v13 + 2);
          BOOL v12 = *(void *)v16 == (void)v13;
          char v13 = v16;
        }
        while (!v12);
      }
      char v13 = v16;
    }
    while (v16 != v8);
  }
  else
  {
    sub_2168A6B2C((uint64_t *)(v5 + 120), v5 + 192);
  }
  if (*(void *)(v5 + 136))
  {
LABEL_29:
    sub_216DFBBD8((uint64_t *)(v5 + 120));
    sub_216DFBA98((void **)(v5 + 120), (uint64_t **)(v5 + 144));
    uint64_t v18 = *(void **)(v5 + 144);
    if (v18 != (void *)(v5 + 152))
    {
      do
      {
        std::string __p = v18 + 4;
        int v19 = sub_216E1B264((uint64_t **)(v5 + 120), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 4), (uint64_t)&unk_2174BFD90, (_DWORD **)&__p);
        sub_216B08220((uint64_t)(v19 + 10), (__n128 *)(v18 + 5));
        uint64_t v20 = (void *)v18[1];
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            uint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (void *)v18[2];
            BOOL v12 = *v21 == (void)v18;
            uint64_t v18 = v21;
          }
          while (!v12);
        }
        uint64_t v18 = v21;
      }
      while (v21 != (void *)(v5 + 152));
    }
    goto LABEL_38;
  }
  char v17 = sub_2168A6B2C((uint64_t *)(v5 + 120), v5 + 144);
LABEL_38:
  if (*(void *)(v5 + 136))
  {
    uint64_t v22 = *(void *)(v5 + 120);
    if (*(void *)(v22 + 32) == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v17))
    {
      if (*(void *)(v5 + 136) != 1)
      {
        std::string __p = "usd/stage.cpp";
        uint64_t v28 = "_ProcessPendingChanges";
        uint64_t v29 = 4597;
        uint64_t v30 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_ProcessPendingChanges()";
        LOBYTE(v31) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "recomposeChanges.size() == 1", 0);
      }
      sub_216D5FE08(v5 + 168, *(void **)(v5 + 176));
      *(void *)(v5 + 168) = v5 + 176;
      *(void *)(v5 + 176) = 0;
      *(void *)(v5 + 184) = 0;
    }
  }
  sub_216DFBA98((void **)(v5 + 120), (uint64_t **)(v5 + 168));
  if (*(void *)(v5 + 232))
  {
    sub_216DFBBD8((uint64_t *)(v5 + 216));
    sub_216DFBA98((void **)(v5 + 120), (uint64_t **)(v5 + 216));
  }
  uint64_t LayerStackChanges = pxrInternal__aapl__pxrReserved__::PcpChanges::GetLayerStackChanges(*((pxrInternal__aapl__pxrReserved__::PcpChanges **)this
                                                                                         + 105));
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*((pxrInternal__aapl__pxrReserved__::PcpCache **)this + 16), (uint64_t *)&__p);
  uint64_t v24 = sub_216BE284C(LayerStackChanges, (uint64_t)&__p);
  uint64_t v25 = (void *)(LayerStackChanges + 8);
  uint64_t result = (uint64_t)v28;
  if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)v28 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v25 != v24)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdStage::HasLocalLayer((uint64_t)this, (uint64_t *)this + 6);
    *((unsigned char *)this + 120) = result;
  }
  *((void *)this + 105) = 0;
  if (*(void *)(v5 + 136) || *(void *)(v5 + 184) || *(void *)(v5 + 232))
  {
    sub_216D61884(&v33, (uint64_t)this);
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(&__p, &v33);
    std::string __p = &unk_26C768D30;
    uint64_t v30 = (const char *)(v5 + 120);
    uint64_t v31 = v5 + 168;
    uint64_t v32 = v5 + 216;
    sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p, &v33);
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)&__p);
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(&__p, &v33);
    std::string __p = &unk_26C768CE0;
    sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p, &v33);
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)&__p);
    uint64_t result = v34;
    if (v34)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_216DF7928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216DF79DC(pxrInternal__aapl__pxrReserved__::PcpChanges *a1)
{
  sub_216D5FE08((uint64_t)a1 + 216, *((void **)a1 + 28));
  sub_216D5FE08((uint64_t)a1 + 192, *((void **)a1 + 25));
  sub_216D5FE08((uint64_t)a1 + 168, *((void **)a1 + 22));
  sub_216D5FE08((uint64_t)a1 + 144, *((void **)a1 + 19));
  sub_216D5FE08((uint64_t)a1 + 120, *((void **)a1 + 16));

  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(a1, (uint64_t)&__p);
    uint64_t v2 = (const char *)HIBYTE(v14);
    if (v14 < 0) {
      uint64_t v2 = v13;
    }
    if (v2)
    {
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
      if (!v3) {
        uint64_t v3 = sub_216E11CD8(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
      }
      if ((*((void *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (uint64_t *)((*((void *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
      }
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&__p, (uint64_t)EmptyString, &v10);
      uint64_t v6 = sub_216AA0AEC(&v10);
      BOOL v5 = (v7 & 1 | (unint64_t)v6) != 0;
      uint64_t v8 = v11;
      if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      if (v14 < 0) {
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v5 = 0;
      if (v14 < 0) {
LABEL_19:
      }
        operator delete(__p);
    }
  }
  else
  {
    std::string __p = "usd/stage.cpp";
    char v13 = "IsSupportedFile";
    uint64_t v14 = 3550;
    char v15 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile(const std::string &)";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty file path given");
    return 0;
  }
  return v5;
}

void sub_216DF7BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11 && atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::Save(pxrInternal__aapl__pxrReserved__::PcpCache **this, uint64_t a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers((pxrInternal__aapl__pxrReserved__::UsdStage *)this, 1, a3, &v21);
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this[16], &v19);
  uint64_t v4 = sub_216BCA2D4(&v19);
  if (v5 & 1 | (unint64_t)v4
    || (uint64_t v14 = (void **)"usd/stage.cpp",
        char v15 = "Save",
        uint64_t v16 = 3594,
        char v17 = "void pxrInternal__aapl__pxrReserved__::UsdStage::Save()",
        char v18 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "localLayerStack", 0) & 1) != 0))
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(&v19);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers(v6, (uint64_t *)&v14);
    char v7 = v21;
    uint64_t v8 = v22;
    if (v21 == v22) {
      goto LABEL_14;
    }
    BOOL v9 = v22;
    uint64_t v10 = v15;
    while (1)
    {
      uint64_t v10 = (const char *)sub_216BCCD64((uint64_t)v14, (uint64_t)v10, (uint64_t)v7);
      if (v10 != v15) {
        break;
      }
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_15;
      }
    }
    if (v7 == v8) {
      goto LABEL_15;
    }
    uint64_t v11 = (uint64_t)(v7 + 2);
    if (v7 + 2 == v8)
    {
LABEL_14:
      BOOL v9 = v7;
    }
    else
    {
      BOOL v9 = v7;
      do
      {
        uint64_t v12 = sub_216BCCD64((uint64_t)v14, (uint64_t)v15, v11);
        if ((const char *)v12 == v15)
        {
          sub_21697D0EC((uint64_t)v9, v11);
          v9 += 2;
        }
        v11 += 16;
      }
      while ((uint64_t *)v11 != v8);
    }
LABEL_15:
    sub_216DF7F40((uint64_t)&v21, (uint64_t)v9, (uint64_t)v22);
    uint64_t v23 = &v14;
    sub_216850BF4((void ***)&v23);
  }
  sub_216DF7FCC(&v21);
  uint64_t v13 = v20;
  if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = (void **)&v21;
  sub_216850BF4(&v14);
}

void sub_216DF7DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  uint64_t v17 = a15;
  if (a15)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  a14 = (void **)&a16;
  sub_216850BF4(&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
  if (v6)
  {
    int v7 = a2;
    pxrInternal__aapl__pxrReserved__::PcpCache::GetUsedLayers(v6, a2, a3, (uint64_t)&v11);
    if (v7)
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_ClipCache *)*((void *)this + 17);
      if (v8)
      {
        pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetUsedLayers(v8, (uint64_t)&v9);
        if (v10[1]) {
          sub_216DF9FCC((uint64_t *)&v11, v9, v10);
        }
        sub_21699DA30((uint64_t)&v9, v10[0]);
      }
    }
    sub_216E1E000(a4, v11, &v12);
    sub_21699DA30((uint64_t)&v11, v12);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_216DF7F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_216DF7F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = a2;
    if (a3 != v5)
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      uint64_t v6 = a2;
      do
      {
        sub_21697D0EC(v6, v6 + v7);
        v6 += 16;
      }
      while (v6 + v7 != v5);
    }
    sub_216850C48((atomic_uint *)a1, v6);
  }
  return a2;
}

void sub_216DF7FCC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    do
    {
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v1);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v3))
      {
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v1);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v4))
        {
          v10[0] = "usd/stage.cpp";
          v10[1] = "_SaveLayers";
          void v10[2] = 3576;
          v10[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SaveLayers(const SdfLayerHandleVector &)";
          char v11 = 0;
          uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v1);
          uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
          if (*(char *)(Identifier + 23) >= 0) {
            uint64_t v8 = Identifier;
          }
          else {
            uint64_t v8 = *(void *)Identifier;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v10, (pxrInternal__aapl__pxrReserved__ *)"Not saving @%s@ because it is an anonymous layer", v7, v8);
        }
        else
        {
          BOOL v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v9, 0);
        }
      }
      v1 += 2;
    }
    while (v1 != v2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SaveSessionLayers(pxrInternal__aapl__pxrReserved__::PcpCache **this)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this[16], &v7);
  uint64_t v1 = sub_216BCA2D4(&v7);
  if (v2 & 1 | (unint64_t)v1
    || (v5[0] = (uint64_t *)"usd/stage.cpp",
        v5[1] = (uint64_t *)"SaveSessionLayers",
        void v5[2] = (uint64_t *)3616,
        void v5[3] = (uint64_t *)"void pxrInternal__aapl__pxrReserved__::UsdStage::SaveSessionLayers()",
        char v6 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "localLayerStack", 0) & 1) != 0))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(&v7);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers(v3, (uint64_t *)v5);
    sub_216DF7FCC(v5);
    BOOL v9 = (void **)v5;
    sub_216850BF4(&v9);
  }
  uint64_t result = v8;
  if (v8)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DF81A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_uint *a15)
{
  if (a15)
  {
    if (atomic_fetch_add_explicit(a15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a15 + 8))(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::WriteFallbackPrimTypes(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  char v2 = *((unsigned char *)this + 1257);
  *((unsigned char *)this + 1257) = 1;
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
  }
  uint64_t v4 = (uint64_t **)(v3 + 120);
  if (!pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v3 + 120)))
  {
    uint64_t v7 = 0;
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v5) {
      uint64_t v5 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    if (sub_216DF6CBC(this, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v5 + 112), (const void ****)&v7))
    {
      pxrInternal__aapl__pxrReserved__::VtDictionaryOver((pxrInternal__aapl__pxrReserved__ *)&v7, v4, 0);
      char v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v6) {
        char v6 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      uint64_t v4 = (uint64_t **)&v7;
    }
    else
    {
      char v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v6) {
        char v6 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
    }
    sub_216DF8338(this, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v6 + 112), (const void ****)v4);
    sub_2168EBBB8(&v7, 0);
  }
  *((unsigned char *)this + 1257) = v2;
}

void sub_216DF8314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EBBB8((void ***)va, 0);
  *(unsigned char *)(v2 + 1257) = v3;
  _Unwind_Resume(a1);
}

uint64_t sub_216DF8338(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ****a3)
{
  void v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C74DD80;
  sub_2168EEEA8(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216DF83C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidPathForCreatingPrim(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  v12[0] = 0;
  LODWORD(v17) = 1;
  char v18 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v19 + 1);
  unint64_t v20 = 0;
  sub_216E0CD74(a3, v12, (uint64_t)&v17);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a2))
      {
        uint64_t v17 = "usd/stage.cpp";
        char v18 = (atomic_ullong *)"_IsValidPathForCreatingPrim";
        uint64_t v19 = 3672;
        unint64_t v20 = (unint64_t)"std::pair<BOOL, UsdPrim> pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidPathForCrea"
                                "tingPrim(const SdfPath &) const";
        LOBYTE(v21) = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Path must not contain variant selections: <%s>", Text);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2, (uint64_t)v12);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v12, v6))char v7 = pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrim((pxrInternal__aapl__pxrReserved__::UsdStage *)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, "create prim"); {
        else
        }
          char v7 = pxrInternal__aapl__pxrReserved__::UsdStage::_ValidateEditPrimAtPath((pxrInternal__aapl__pxrReserved__::UsdStage *)this, a2, "create prim");
        if (v7)
        {
          char v11 = 1;
          sub_216E0CDDC((uint64_t)&v17, &v11, (uint64_t)v12);
          sub_216DF86D0(a3, (uint64_t)&v17);
          if ((v21 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
          sub_21697C414(&v20);
          if (v19) {
            sub_216D16E0C((atomic_ullong *)v19);
          }
        }
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        sub_21697C414(&v14);
        if (v13) {
          sub_216D16E0C(v13);
        }
      }
    }
    else
    {
      uint64_t v17 = "usd/stage.cpp";
      char v18 = (atomic_ullong *)"_IsValidPathForCreatingPrim";
      uint64_t v19 = 3665;
      unint64_t v20 = (unint64_t)"std::pair<BOOL, UsdPrim> pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidPathForCreati"
                              "ngPrim(const SdfPath &) const";
      LOBYTE(v21) = 0;
      BOOL v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Path must be a prim path: <%s>", v9);
    }
  }
  else
  {
    uint64_t v17 = "usd/stage.cpp";
    char v18 = (atomic_ullong *)"_IsValidPathForCreatingPrim";
    uint64_t v19 = 3659;
    unint64_t v20 = (unint64_t)"std::pair<BOOL, UsdPrim> pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidPathForCreating"
                            "Prim(const SdfPath &) const";
    LOBYTE(v21) = 0;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Path must be an absolute path: <%s>", v8);
  }
}

void sub_216DF868C(_Unwind_Exception *a1)
{
  sub_216DF8764(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216DF86D0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(atomic_ullong **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  if (v5) {
    sub_216D16E0C(v5);
  }
  sub_21697DE94((int *)(a1 + 24), (int *)(a2 + 24));
  sub_21697DEEC((int *)(a1 + 28), (int *)(a2 + 28));
  if (a2 != a1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
  }
  return a1;
}

uint64_t sub_216DF8764(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  char v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, a3);
    return;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidPathForCreatingPrim((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, a2, (uint64_t)v25);
  if (v25[0])
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v26, v6) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
      sub_216DECC1C((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), a2, &v22);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v22))
      {
        unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v8) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v9 = v23;
        unint64_t v10 = atomic_load((unint64_t *)(v8 + 144));
        if (v9 >= v10
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23, (atomic_ullong *)v8))
        {
          uint64_t v17 = "usd/stage.cpp";
          char v18 = (atomic_ullong *)"OverridePrim";
          uint64_t v19 = 3712;
          unint64_t v20 = "UsdPrim pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(const SdfPath &)";
          char v21 = 0;
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to create PrimSpec for <%s>", Text);
        }
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
        *(void *)(a3 + 24) = 0;
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v12, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
        sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
        goto LABEL_26;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v23);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, a2, (uint64_t)&v17);
      int v26 = (int)v17;
      uint64_t v13 = v18;
      char v18 = 0;
      int v14 = v27;
      uint64_t v27 = v13;
      if (v14) {
        sub_216D16E0C(v14);
      }
      sub_21697DE94(&v28, (int *)&v19);
      sub_21697DEEC(&v29, (int *)&v19 + 1);
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v30 = v20;
      unint64_t v20 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
      sub_21697C414(&v19);
      if (v18) {
        sub_216D16E0C(v18);
      }
    }
    *(_DWORD *)a3 = v26;
    int v15 = v27;
    *(void *)(a3 + 8) = v27;
    if (v15) {
      atomic_fetch_add_explicit(v15 + 6, 1uLL, memory_order_relaxed);
    }
    sub_216981010((_DWORD *)(a3 + 16), &v28);
    sub_21698105C((_DWORD *)(a3 + 20), &v29);
    uint64_t v16 = v30;
    *(void *)(a3 + 24) = v30;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
    goto LABEL_26;
  }
  *(_DWORD *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
  *(void *)(a3 + 24) = 0;
LABEL_26:
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_21697C414(&v28);
  if (v27) {
    sub_216D16E0C(v27);
  }
}

void sub_216DF8AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216DF8764((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidPathForCreatingPrim(this, a2, (uint64_t)v9);
  int v8 = v9[0];
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_DefinePrim((pxrInternal__aapl__pxrReserved__::UsdStage *)this, a2, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
    *(void *)(a4 + 24) = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_DefinePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, a4);
    return;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v44);
  unint64_t v50 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::_DefinePrim((uint64_t *)&v37, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50);
  char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v8);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
  sub_21697C414(&v39);
  if (v38) {
    sub_216D16E0C(v38);
  }
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_21697C414(&v44);
  if ((IsDefined & 1) == 0)
  {
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
    *(void *)(a4 + 24) = 0;
    return;
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v50);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, a2, (uint64_t)&v44);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v44, v10))
  {
    int v12 = v46;
    if (!v46 || (uint64_t v13 = *((void *)v46 + 7), (v13 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46, v11);
      uint64_t v13 = *((void *)v12 + 7);
    }
    if ((v13 & 0x40) != 0)
    {
      unint64_t v14 = (unint64_t)*a3;
      if (!*a3) {
        goto LABEL_51;
      }
      int v15 = v46;
      if (!v46 || (*((unsigned char *)v46 + 57) & 8) != 0)
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46, v11);
        unint64_t v14 = (unint64_t)*a3;
      }
      if ((**((void **)v15 + 3) & 0xFFFFFFFFFFFFFFF8) == (v14 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_51;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v43);
  sub_216DECC1C((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), a2, &v42);
  int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v42);
  char v17 = IsDormant;
  if (IsDormant)
  {
    unint64_t v18 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v18) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v19 = v50;
    unint64_t v20 = atomic_load((unint64_t *)(v18 + 144));
    if (v19 >= v20
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v50, (atomic_ullong *)v18))
    {
      int v37 = "usd/stage.cpp";
      __int16 v38 = (atomic_ullong *)"_DefinePrim";
      uint64_t v39 = 3761;
      unint64_t v40 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::UsdStage::_DefinePrim(const SdfPath &, const TfToken &)";
      char v41 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to create primSpec for <%s>", Text);
    }
    *(_DWORD *)a4 = 1;
    *(void *)(a4 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
    *(void *)(a4 + 24) = 0;
  }
  else
  {
    unint64_t v23 = sub_216A663FC(&v42);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSpecifier(v23, 0);
    uint64_t v22 = *a3;
    if (*a3)
    {
      uint64_t v24 = sub_216A663FC(&v42);
      uint64_t v25 = v24;
      if (((unint64_t)*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (uint64_t *)(((unint64_t)*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v24);
      }
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetTypeName(v25, (uint64_t)EmptyString);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v22, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v43);
  if ((v17 & 1) == 0)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v44, v27))
    {
      LODWORD(v37) = v44;
      __int16 v38 = (atomic_ullong *)v46;
      if (v46) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v46 + 6, 1uLL, memory_order_relaxed);
      }
      sub_216981010(&v39, &v47);
      sub_21698105C((_DWORD *)&v39 + 1, &v48);
      unint64_t v40 = v49;
      if ((v49 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v40 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, a2, (uint64_t)&v37);
    }
    int v44 = (int)v37;
    int v28 = (pxrInternal__aapl__pxrReserved__ *)v38;
    __int16 v38 = 0;
    int v29 = (atomic_ullong *)v46;
    long long v46 = v28;
    if (v29) {
      sub_216D16E0C(v29);
    }
    sub_21697DE94(&v47, (int *)&v39);
    sub_21697DEEC(&v48, (int *)&v39 + 1);
    if ((v49 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v49 = v40;
    unint64_t v40 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
    sub_21697C414(&v39);
    if (v38) {
      sub_216D16E0C(v38);
    }
LABEL_51:
    if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v44, v11))goto LABEL_56; {
    uint64_t v31 = v46;
    }
    if (!v46 || (uint64_t v32 = *((void *)v46 + 7), (v32 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v46, v30);
      uint64_t v32 = *((void *)v31 + 7);
    }
    if ((v32 & 0x40) == 0)
    {
LABEL_56:
      unint64_t v33 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v33) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v34 = v50;
      unint64_t v35 = atomic_load((unint64_t *)(v33 + 144));
      if (v34 >= v35
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v50, (atomic_ullong *)v33))
      {
        int v37 = "usd/stage.cpp";
        __int16 v38 = (atomic_ullong *)"_DefinePrim";
        uint64_t v39 = 3777;
        unint64_t v40 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::UsdStage::_DefinePrim(const SdfPath &, const TfToken &)";
        char v41 = 0;
        uint64_t v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to define UsdPrim <%s>", v36);
      }
    }
    *(_DWORD *)a4 = v44;
    *(void *)(a4 + 8) = v46;
    long long v46 = 0;
    sub_21697D878((_DWORD *)(a4 + 16), &v47);
    sub_21697D8B4((_DWORD *)(a4 + 20), &v48);
    *(void *)(a4 + 24) = v49;
    unint64_t v49 = 0;
    goto LABEL_62;
  }
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_62:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
  sub_21697C414(&v47);
  if (v46) {
    sub_216D16E0C((atomic_ullong *)v46);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v50);
}

void sub_216DF9150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216D16AD8((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v10 - 56));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 64))
    && !pxrInternal__aapl__pxrReserved__::UsdStage::HasLocalLayer((uint64_t)this, (uint64_t *)this + 6))
  {
    int v29 = "usd/stage.cpp";
    uint64_t v30 = "CreateClassPrim";
    uint64_t v31 = (atomic_ullong *)3788;
    uint64_t v32 = "UsdPrim pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(const SdfPath &)";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Must create classes in local LayerStack");
    *(_DWORD *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::_IsValidPathForCreatingPrim((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, a2, (uint64_t)&v29);
    if ((_BYTE)v29)
    {
      int v24 = (int)v30;
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__ *)v31;
      if (v31) {
        atomic_fetch_add_explicit(v31 + 6, 1uLL, memory_order_relaxed);
      }
      sub_216981010(&v26, &v32);
      sub_21698105C(&v27, (_DWORD *)&v32 + 1);
      unint64_t v28 = (unint64_t)v33;
      if ((v33 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v28 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v24, v6))goto LABEL_19; {
      int v8 = v25;
      }
      if (!v25 || (uint64_t v9 = *((void *)v25 + 7), (v9 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v25, v7);
        uint64_t v9 = *((void *)v8 + 7);
      }
      if ((v9 & 0x40) != 0 && sub_216D44AB0((uint64_t)&v24, v7) != 2)
      {
        unint64_t v19 = "usd/stage.cpp";
        unint64_t v20 = (atomic_ullong *)"CreateClassPrim";
        uint64_t v21 = 3804;
        uint64_t v22 = "UsdPrim pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(const SdfPath &)";
        char v23 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Non-class prim already exists at <%s>", Text);
        *(_DWORD *)a3 = 1;
        *(void *)(a3 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
        *(void *)(a3 + 24) = 0;
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
LABEL_19:
        if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v24, v7))goto LABEL_20; {
        int v11 = v25;
        }
        if (!v25 || (uint64_t v12 = *((void *)v25 + 7), (v12 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v25, v10);
          uint64_t v12 = *((void *)v11 + 7);
        }
        if ((v12 & 0x20) == 0)
        {
LABEL_20:
          unint64_t v18 = 0;
          pxrInternal__aapl__pxrReserved__::UsdStage::_DefinePrim(this, a2, (void **)&v18, (uint64_t)&v19);
          int v24 = (int)v19;
          uint64_t v13 = (pxrInternal__aapl__pxrReserved__ *)v20;
          unint64_t v20 = 0;
          unint64_t v14 = (atomic_ullong *)v25;
          uint64_t v25 = v13;
          if (v14) {
            sub_216D16E0C(v14);
          }
          sub_21697DE94(&v26, (int *)&v21);
          sub_21697DEEC(&v27, (int *)&v21 + 1);
          if ((v28 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v28 = (unint64_t)v22;
          uint64_t v22 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
          sub_21697C414(&v21);
          if (v20) {
            sub_216D16E0C(v20);
          }
          if ((v18 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v24, v15))
          {
            uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v16) {
              uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            LODWORD(v18) = 2;
            unint64_t v19 = 0;
            sub_216E10E50((uint64_t)&v24, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v16 + 312));
          }
        }
        *(_DWORD *)a3 = v24;
        *(void *)(a3 + 8) = v25;
        uint64_t v25 = 0;
        sub_21697D878((_DWORD *)(a3 + 16), &v26);
        sub_21697D8B4((_DWORD *)(a3 + 20), &v27);
        *(void *)(a3 + 24) = v28;
        unint64_t v28 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
      sub_21697C414(&v26);
      if (v25) {
        sub_216D16E0C((atomic_ullong *)v25);
      }
    }
    else
    {
      *(_DWORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
      *(void *)(a3 + 24) = 0;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
    sub_21697C414(&v32);
    if (v31) {
      sub_216D16E0C(v31);
    }
  }
}

void sub_216DF95E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_216DF8764((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::HasLocalLayer(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 128), &v7);
  uint64_t v3 = sub_216BBCEA8(&v7);
  BOOL HasLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v3, a2);
  uint64_t v5 = v8;
  if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return HasLayer;
}

void sub_216DF96C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_RemovePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), a2, &v9);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v9))
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v4 = (uint64_t **)sub_216A663FC(&v9);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRealNameParent(v4, &v8);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v8))
    {
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v6 = (uint64_t **)sub_216A663FC(&v8);
      uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(v6, &v9);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v9);
  return v3;
}

void sub_216DF976C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, char a4)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTargetForLocalLayer@<X0>(pxrInternal__aapl__pxrReserved__::PcpCache **this@<X0>, unint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this[16], (uint64_t *)&v16);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v16);
  uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  uint64_t v8 = v17;
  if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v8 + 8))(v8);
  }
  unint64_t v9 = (uint64_t)(Layers[1] - *Layers) >> 3;
  if (v9 <= a2)
  {
    uint64_t v16 = "usd/stage.cpp";
    char v17 = "GetEditTargetForLocalLayer";
    uint64_t v18 = 3835;
    unint64_t v19 = "UsdEditTarget pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTargetForLocalLayer(size_t)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer index %zu is out of range: only %zu entries in layer stack", a2, v9);
    return pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a3);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this[16], (uint64_t *)&v16);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v16);
    LayerOffsetForLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v10, a2);
    uint64_t v12 = v17;
    if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = *Layers + 8 * a2;
    if (LayerOffsetForLayer) {
      *(_OWORD *)int v15 = *(_OWORD *)LayerOffsetForLayer;
    }
    else {
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v15, 0.0, 1.0);
    }
    return pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a3, v13, v15[0], v15[1]);
  }
}

void sub_216DF9920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_217324208(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTargetForLocalLayer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(a1 + 128), &v10);
  uint64_t v5 = (void *)sub_216BBCEA8(&v10);
  LayerOffsetForLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v5, a2);
  uint64_t v7 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (LayerOffsetForLayer) {
    long long v9 = *(_OWORD *)LayerOffsetForLayer;
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, 0.0, 1.0);
  }
  return pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a3, a2, *(double *)&v9, *((double *)&v9 + 1));
}

void sub_216DF9A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    sub_217324208(a12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  uint64_t v4 = sub_21697CF14(a2);
  if (!(v5 & 1 | (unint64_t)v4))
  {
    unint64_t v19 = "usd/stage.cpp";
    char v20 = "SetEditTarget";
    uint64_t v21 = 3862;
    uint64_t v22 = "void pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(const UsdEditTarget &)";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set an invalid UsdEditTarget as current");
    return;
  }
  BOOL HasLocalLayer = 1;
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)a2 + 16)))
  {
    BOOL HasLocalLayer = pxrInternal__aapl__pxrReserved__::UsdStage::HasLocalLayer((uint64_t)this, (uint64_t *)a2);
    if (!HasLocalLayer)
    {
      unint64_t v19 = "usd/stage.cpp";
      char v20 = "SetEditTarget";
      uint64_t v21 = 3877;
      uint64_t v22 = "void pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(const UsdEditTarget &)";
      char v23 = 0;
      long long v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)a2);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v11 = (const char *)Identifier;
      }
      else {
        uint64_t v11 = *(const char **)Identifier;
      }
      sub_216ABBA60(&v16, (uint64_t *)this + 4);
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v16);
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
      if (*(char *)(v13 + 23) >= 0) {
        unint64_t v14 = (const char *)v13;
      }
      else {
        unint64_t v14 = *(const char **)v13;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer @%s@ is not in the local LayerStack rooted at @%s@", v11, v14);
      goto LABEL_21;
    }
    p_BOOL HasLocalLayer = &HasLocalLayer;
  }
  else
  {
    p_BOOL HasLocalLayer = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdEditTarget::operator==((uint64_t)a2, (uint64_t)this + 48)) {
    return;
  }
  *((void *)this + 6) = *(void *)a2;
  sub_2168CD2FC((atomic_uint **)this + 7, (atomic_uint **)a2 + 1);
  if ((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48) != a2)
  {
    uint64_t v7 = (_DWORD *)sub_216BBED8C((uint64_t)this + 64);
    sub_216BBEE18(v7, (uint64_t)a2 + 16);
  }
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 56);
  if (p_HasLocalLayer) {
    BOOL v8 = *p_HasLocalLayer;
  }
  else {
    BOOL v8 = pxrInternal__aapl__pxrReserved__::UsdStage::HasLocalLayer((uint64_t)this, (uint64_t *)a2);
  }
  *((unsigned char *)this + 120) = v8;
  sub_216D61884(&v16, (uint64_t)this);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(&v19, &v16);
  unint64_t v19 = (char *)&unk_26C768D68;
  sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)&v19, &v16);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged::~StageEditTargetChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged *)&v19);
LABEL_21:
  uint64_t v15 = v17;
  if (v17)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
}

void sub_216DF9C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, atomic_uint *a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged::~StageEditTargetChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageEditTargetChanged *)va);
  if (a5)
  {
    if (atomic_fetch_add_explicit(a5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a5 + 8))(a5);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetLayerStack@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*((pxrInternal__aapl__pxrReserved__::PcpCache **)this + 16), &v30);
  uint64_t v6 = sub_216BCA2D4(&v30);
  if (v7 & 1 | (unint64_t)v6)
  {
    BOOL v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(&v30);
    uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v8);
    uint64_t v10 = Layers;
    uint64_t v11 = *(uint64_t **)Layers;
    if ((a2 & 1) == 0)
    {
      uint64_t v12 = *(uint64_t **)(Layers + 8);
      sub_216ABBA60((uint64_t *)&v25, (uint64_t *)this + 4);
      if (v11 != v12)
      {
        while (!sub_216ABA3A0((uint64_t *)&v25, v11))
        {
          if (++v11 == v12)
          {
            uint64_t v11 = v12;
            break;
          }
        }
      }
      uint64_t v13 = v26;
      if (v26 && atomic_fetch_add_explicit((atomic_uint *volatile)v26 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v13 + 8))(v13);
      }
    }
    unint64_t v14 = *(uint64_t **)(v10 + 8);
    if (v11 == v14)
    {
      uint64_t v25 = "usd/stage.cpp";
      int v26 = "GetLayerStack";
      uint64_t v27 = 3928;
      unint64_t v28 = "SdfLayerHandleVector pxrInternal__aapl__pxrReserved__::UsdStage::GetLayerStack(BOOL) const";
      char v29 = 0;
      sub_216ABBA60(&v23, (uint64_t *)this + 4);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v23);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v16);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v20 = Identifier;
      }
      else {
        uint64_t v20 = *(void *)Identifier;
      }
      uint64_t v21 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Root layer @%s@ not in LayerStack", v18, v19, v20);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "copyBegin != layers.end()", v21);
      uint64_t v22 = v24;
      if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      unint64_t v14 = *(uint64_t **)(v10 + 8);
    }
    sub_216BCCE1C((uint64_t)a3, v11, v14, v14 - v11);
  }
  uint64_t result = v31;
  if (v31)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DF9F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = a18;
  if (a18)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  sub_216850BF4(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_216DF9FCC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    char v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_216C18DA8(v5, v6, (uint64_t)(v4 + 4), v4 + 4);
      char v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          char v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_216ABBA60(a2, (uint64_t *)this + 5);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::MuteLayer(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v10 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = (char *)operator new(0x18uLL);
  char v5 = v4;
  uint64_t v6 = v4 + 24;
  char v5 = sub_21695F6C0((uint64_t)&v6, (long long *)__p, &v10, v4);
  memset(v3, 0, sizeof(v3));
  pxrInternal__aapl__pxrReserved__::UsdStage::MuteAndUnmuteLayers(a1, (uint64_t *)&v4, (uint64_t *)v3);
  char v7 = v3;
  sub_216782F20((void ***)&v7);
  v3[0] = (void **)&v4;
  sub_216782F20(v3);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216DFA180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void pxrInternal__aapl__pxrReserved__::UsdStage::MuteAndUnmuteLayers(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(const char **)(a1 + 1192);
  if (v6)
  {
    if (v6[23] < 0) {
      uint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    uint64_t v6 = "UsdStages in aggregate";
  }
  v20[0] = (void *)v6;
  sub_216E19F08((uint64_t)&v21, "Usd", (char *)v20);
  pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(v20);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  pxrInternal__aapl__pxrReserved__::PcpCache::RequestLayerMuting(*(uint64_t **)(a1 + 128), a2, a3, v20, &v17, &v14);
  sub_216D61884(&v12, a1);
  if (v17 != v18 || v14 != v15)
  {
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(v9, &v12);
    v9[0] = (void **)&unk_26C768DA0;
    void v9[3] = (void **)&v17;
    void v9[4] = (void **)&v14;
    sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v9, &v12);
    pxrInternal__aapl__pxrReserved__::UsdNotice::LayerMutingChanged::~LayerMutingChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::LayerMutingChanged *)v9);
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpChanges::IsEmpty((pxrInternal__aapl__pxrReserved__::PcpChanges *)v20))
  {
    v11[0] = 0;
    v11[1] = 0;
    long long v10 = v11;
    sub_216DF30A4((pxrInternal__aapl__pxrReserved__::PcpCache **)a1, (pxrInternal__aapl__pxrReserved__::PcpChanges *)v20, (char *)&v10);
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v9, &v12, (uint64_t)&v10);
    sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v9, &v12);
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v9);
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(v9, &v12);
    v9[0] = (void **)&unk_26C768CE0;
    sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v9, &v12);
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)v9);
    sub_216D5FE08((uint64_t)&v10, v11[0]);
  }
  uint64_t v7 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  v9[0] = (void **)&v14;
  sub_216782F20(v9);
  v9[0] = (void **)&v17;
  sub_216782F20(v9);
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)v20);
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_216DFA40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)&a9);
  sub_216D5FE08((uint64_t)&a15, a16);
  uint64_t v28 = a19;
  if (a19)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
  }
  a9 = &a20;
  sub_216782F20((void ***)&a9);
  a9 = &a23;
  sub_216782F20((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)&a26);
  sub_21684E6B8(v26 - 48);
  _Unwind_Resume(a1);
}

void sub_216DFA4E4()
{
}

void pxrInternal__aapl__pxrReserved__::UsdStage::UnmuteLayer(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v11 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v7 = &v3;
  char v8 = 0;
  uint64_t v3 = (void **)operator new(0x18uLL);
  uint64_t v4 = (char *)v3;
  char v5 = v3 + 3;
  uint64_t v4 = sub_21695F6C0((uint64_t)&v5, (long long *)__p, &v11, (char *)v3);
  pxrInternal__aapl__pxrReserved__::UsdStage::MuteAndUnmuteLayers(a1, v6, (uint64_t *)&v3);
  uint64_t v7 = &v3;
  sub_216782F20((void ***)&v7);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = (void **)v6;
  sub_216782F20(&v3);
}

void sub_216DFA608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  a9 = &a12;
  sub_216782F20((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMutedLayers(pxrInternal__aapl__pxrReserved__::PcpCache **this)
{
  return pxrInternal__aapl__pxrReserved__::PcpCache::GetMutedLayers(this[16]);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::IsLayerMuted(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(*(uint64_t **)(a1 + 128), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Traverse@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)sub_216D61884(&v6, (uint64_t)this);
  uint64_t UsdPrimDefaultPredicate = (void *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v3);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::Stage(&v6, UsdPrimDefaultPredicate, a2);
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DFA6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Traverse@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D61884(&v6, a1);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::Stage(&v6, a2, a3);
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DFA79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)sub_216D61884(&v6, (uint64_t)this);
  UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v3);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::Stage(&v6, UsdPrimAllPrimsPredicate, a2);
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216DFA840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimSpec@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_RemoveProperty(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 48), a2, (uint64_t *)&v17);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v17))
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v4 = sub_216990F1C(&v17);
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetOwner((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v4, &v15);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v15, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C7580A8, v5))
    {
      uint64_t v13 = v15;
      if (v15)
      {
        atomic_fetch_add(v15, 1u);
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v13;
        unint64_t add = (void *)atomic_fetch_add(v13, 1u);
      }
      else
      {
        uint64_t v16 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    }
    else
    {
      uint64_t v16 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v15);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v16) & 1) == 0
      || (LOBYTE(v14) = 0,
          uint64_t v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Prop has no parent", v7, v8, "usd/stage.cpp", "_RemoveProperty", 4073, "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_RemoveProperty(const SdfPath &)", v14), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "parent", v12) & 1) != 0))
    {
      uint64_t v9 = sub_216A663FC(&v16);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(v9, &v17);
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v10, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
  return v3;
}

void sub_216DFA994(_Unwind_Exception *a1@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v2 - 32));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v2 - 24));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_HandleLayersDidChange(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer *a2)
{
  uint64_t v4 = (const char *)*((void *)this + 149);
  if (v4)
  {
    if (v4[23] < 0) {
      uint64_t v4 = *(const char **)v4;
    }
  }
  else
  {
    uint64_t v4 = "UsdStages in aggregate";
  }
  __p[0] = (void *)v4;
  sub_216E19F08((uint64_t)&v122, "Usd", (char *)__p);
  unint64_t v5 = *((void *)a2 + 2);
  unint64_t v6 = *((void *)this + 102);
  if (v5 == v6) {
    goto LABEL_142;
  }
  if (v5 < v6)
  {
    __p[0] = "usd/stage.cpp";
    __p[1] = "_HandleLayersDidChange";
    uint64_t v109 = 4283;
    __int16 v110 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_HandleLayersDidChange(const SdfNotice::LayersDidChangeSentPerLayer &)";
    char v111 = 0;
    int v93 = sub_216ABBA60((uint64_t *)&v127, (uint64_t *)this + 4);
    size_t v94 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v93);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v94);
    if (*(char *)(Identifier + 23) >= 0) {
      size_t v96 = (const char *)Identifier;
    }
    else {
      size_t v96 = *(const char **)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Detected usd threading violation.  Concurrent changes to layer(s) composed in stage %p rooted at @%s@.  (serial=%zu, lastSerial=%zu).", this, v96, v5, *((void *)this + 102));
    uint64_t v97 = v128;
    if (v128 && atomic_fetch_add_explicit((atomic_uint *volatile)(v128 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
    }
    goto LABEL_142;
  }
  *((void *)this + 102) = v5;
  if (sub_216C4B19C(1))
  {
    pxrInternal__aapl__pxrReserved__::UsdDescribe(this, __p);
    uint64_t v9 = v109 >= 0 ? __p : (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"\nHandleLayersDidChange received (%s)\n", v7, v8, v9);
    if (SHIBYTE(v109) < 0) {
      operator delete(__p[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(__p);
  uint64_t v112 = v113;
  v113[0] = 0;
  v115[0] = 0;
  v115[1] = 0;
  v113[1] = 0;
  uint64_t v114 = v115;
  long long v116 = v117;
  v117[0] = 0;
  v119[0] = 0;
  v119[1] = 0;
  v117[1] = 0;
  int v118 = v119;
  v121[0] = 0;
  v121[1] = 0;
  __int16 v120 = v121;
  uint64_t v10 = (void **)*((void *)this + 105);
  if (!v10)
  {
    uint64_t v10 = __p;
    *((void *)this + 105) = __p;
  }
  __int16 v105 = 0;
  long long v106 = 0;
  uint64_t v107 = 0;
  long long v11 = (uint64_t *)*((void *)a2 + 1);
  uint64_t v12 = *v11;
  uint64_t v102 = v11[1];
  uint64_t v99 = v10;
  if (*v11 == v102)
  {
    uint64_t v72 = (uint64_t **)v10;
    goto LABEL_116;
  }
  BOOL v98 = a2;
  int v103 = (uint64_t **)(v10 + 21);
  int v104 = (uint64_t **)(v10 + 15);
  long long v101 = (uint64_t **)(v10 + 18);
  __int16 v100 = (uint64_t **)(v10 + 24);
  do
  {
    AllLayerStacksUsingLayer = (void *)pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer(*((void *)this + 16), v12);
    if (*AllLayerStacksUsingLayer != AllLayerStacksUsingLayer[1])
    {
      uint64_t v14 = v12 + 16;
      if (*(_DWORD *)(v12 + 220) >= 2u) {
        uint64_t v14 = *(void *)v14;
      }
      unsigned int v15 = *(_DWORD *)(v12 + 216);
      if (v15)
      {
        uint64_t v16 = v14 + 200 * v15;
        do
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v14) & 1) == 0)
          {
            BOOL v17 = sub_216C4B19C(1);
            if (v17)
            {
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v14);
              uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v12);
              uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v19);
              if (*(char *)(v20 + 23) >= 0) {
                uint64_t v23 = v20;
              }
              else {
                uint64_t v23 = *(void *)v20;
              }
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"<%s> in @%s@ changed.\n", v21, v22, Text, v23);
            }
            uint64_t v25 = (pxrInternal__aapl__pxrReserved__ **)(v14 + 8);
            if (*(void *)v14 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v17)
              || pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v14))
            {
              uint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)(v14 + 8);
              if (*(_DWORD *)(v14 + 132) >= 4u) {
                uint64_t v26 = *v25;
              }
              uint64_t v27 = *(unsigned int *)(v14 + 128);
              if (v27)
              {
                uint64_t v28 = 40 * v27;
                while (1)
                {
                  char v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  if (!v29) {
                    char v29 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  }
                  if ((*(void *)v26 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v29 & 0xFFFFFFFFFFFFFFF8)) {
                    break;
                  }
                  uint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)((char *)v26 + 40);
                  v28 -= 40;
                  if (!v28) {
                    goto LABEL_39;
                  }
                }
                if (sub_216C4B19C(1))
                {
                  unint64_t v47 = *(void *)v26 & 0xFFFFFFFFFFFFFFF8;
                  if (v47)
                  {
                    int v48 = (const char *)(v47 + 16);
                    if (*(char *)(v47 + 39) < 0) {
                      int v48 = *(const char **)v48;
                    }
                  }
                  else
                  {
                    int v48 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Changed field: %s\n", v45, v46, v48);
                }
                char v55 = 1;
                goto LABEL_95;
              }
LABEL_39:
              if ((*(_WORD *)(v14 + 192) & 0x10) != 0)
              {
LABEL_94:
                char v55 = 0;
LABEL_95:
                uint64_t v56 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
                unint64_t v127 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(v14 + 8);
                sub_216DFB644((uint64_t *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, v56, v104, &v127);
                if (v55)
                {
                  BOOL v57 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
                  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v57, (uint64_t *)&v127);
                  uint64_t v58 = sub_216BBCEA8((uint64_t *)&v127);
                  BOOL HasLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v58, (uint64_t *)v12);
                  uint64_t v60 = v128;
                  if (v128
                    && atomic_fetch_add_explicit((atomic_uint *volatile)(v128 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                  {
                    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
                  }
                  if (HasLayer)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (int *)&v127);
                    sub_216E1E3AC((uint64_t *)&v105, &v127);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v127 + 1);
                    sub_21697C414(&v127);
                  }
                  pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v57, (uint64_t *)v12, (int *)v14, 62, 1, 0, 0, (uint64_t *)&v127);
                  int v62 = (void **)v127;
                  uint64_t v61 = (void **)v128;
                  while (v62 != v61)
                  {
                    sub_216E1E3AC((uint64_t *)&v105, v62);
                    v62 += 9;
                  }
                  uint64_t v124 = &v127;
                  sub_216BE117C((void ***)&v124);
                  if (sub_216C4B19C(1))
                  {
                    unint64_t v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v14);
                    unint64_t v64 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v12);
                    uint64_t v65 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v64);
                    int v66 = *(char *)(v65 + 23);
                    uint64_t v67 = *(void *)v65;
                    sub_216D59A34(&v105);
                    if (v66 >= 0) {
                      uint64_t v70 = v65;
                    }
                    else {
                      uint64_t v70 = v67;
                    }
                    uint64_t v71 = (void ***)&v127;
                    if (v129 < 0) {
                      uint64_t v71 = (void ***)v127;
                    }
                    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding paths that use <%s> in layer @%s@: %s\n", v68, v69, v63, v70, v71);
                    if (v129 < 0) {
                      operator delete(v127);
                    }
                  }
                }
                goto LABEL_112;
              }
              uint64_t v30 = (pxrInternal__aapl__pxrReserved__ *)(v14 + 8);
              if (*(_DWORD *)(v14 + 132) >= 4u) {
                uint64_t v30 = *v25;
              }
              uint64_t v31 = *(unsigned int *)(v14 + 128);
              if (v31)
              {
                char v32 = 0;
                uint64_t v33 = 40 * v31;
                do
                {
                  unint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  if (!v34) {
                    unint64_t v34 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                  }
                  if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v34 + 56) & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_66;
                  }
                  unint64_t v35 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
                  if (!v35) {
                    unint64_t v35 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
                  }
                  if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v35 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_66:
                    char v32 = 1;
                  }
                  else
                  {
                    uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    if (!v36) {
                      uint64_t v36 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    }
                    if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v36 + 26) & 0xFFFFFFFFFFFFFFF8)) {
                      goto LABEL_153;
                    }
                    int v37 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    if (!v37) {
                      int v37 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                    }
                    if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v37 + 39) & 0xFFFFFFFFFFFFFFF8)
                      || pxrInternal__aapl__pxrReserved__::UsdIsClipRelatedField(v30, v24))
                    {
                      goto LABEL_153;
                    }
                    __int16 v38 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
                    if (!v38) {
                      __int16 v38 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
                    }
                    if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v38 + 14) & 0xFFFFFFFFFFFFFFF8)
                      && !*((unsigned char *)this + 1257)
                      && *(void *)v14 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v38))
                    {
                      sub_216ABBA60((uint64_t *)&v127, (uint64_t *)this + 4);
                      uint64_t v39 = sub_216851B24(v12);
                      if (v39 == sub_216851B24((uint64_t)&v127))
                      {
                        BOOL v41 = 1;
                      }
                      else
                      {
                        sub_216ABBA60((uint64_t *)&v124, (uint64_t *)this + 5);
                        uint64_t v40 = sub_216851B24(v12);
                        BOOL v41 = v40 == sub_216851B24((uint64_t)&v124);
                        uint64_t v42 = v125;
                        if (v125
                          && atomic_fetch_add_explicit((atomic_uint *volatile)(v125 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                        {
                          (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
                        }
                      }
                      uint64_t v43 = v128;
                      if (v128
                        && atomic_fetch_add_explicit((atomic_uint *volatile)(v128 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                      {
                        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
                      }
                      if (v41)
                      {
LABEL_153:
                        if (sub_216C4B19C(1))
                        {
                          unint64_t v51 = *(void *)v30 & 0xFFFFFFFFFFFFFFF8;
                          if (v51)
                          {
                            long long v52 = (const char *)(v51 + 16);
                            if (*(char *)(v51 + 39) < 0) {
                              long long v52 = *(const char **)v52;
                            }
                          }
                          else
                          {
                            long long v52 = "";
                          }
                          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Changed field: %s\n", v49, v50, v52);
                        }
                        goto LABEL_94;
                      }
                    }
                  }
                  uint64_t v30 = (pxrInternal__aapl__pxrReserved__ *)((char *)v30 + 40);
                  v33 -= 40;
                }
                while (v33);
                if (v32)
                {
                  uint64_t v53 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
                  unint64_t v127 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(v14 + 8);
                  sub_216DFB644((uint64_t *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, v53, v100, &v127);
                }
              }
LABEL_88:
              unint64_t v54 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
              unint64_t v127 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(v14 + 8);
              sub_216DFB644((uint64_t *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, v54, v103, &v127);
              goto LABEL_112;
            }
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v14)
              || (*(unsigned __int16 *)(v14 + 192) | (*(unsigned __int8 *)(v14 + 194) << 16)) < 0x100000u)
            {
              goto LABEL_88;
            }
            int v44 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
            unint64_t v127 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(v14 + 8);
            sub_216DFB644((uint64_t *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, v44, v101, &v127);
          }
LABEL_112:
          v14 += 200;
        }
        while (v14 != v16);
      }
    }
    v12 += 232;
  }
  while (v12 != v102);
  uint64_t v72 = (uint64_t **)*((void *)this + 105);
  long long v11 = (uint64_t *)*((void *)v98 + 1);
LABEL_116:
  int v73 = (pxrInternal__aapl__pxrReserved__::PcpCache *)*((void *)this + 16);
  pxrInternal__aapl__pxrReserved__::PcpChanges::DidChange(v72, v73, v11);
  int v74 = v105;
  int v75 = v106;
  while (v74 != v75)
  {
    pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeSignificantly(v72, v73, v74);
    int v74 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v74 + 8);
  }
  uint64_t LayerStackChanges = pxrInternal__aapl__pxrReserved__::PcpChanges::GetLayerStackChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)v72);
  uint64_t v77 = (void *)(LayerStackChanges + 8);
  int v78 = *(void **)LayerStackChanges;
  if (*(void *)LayerStackChanges != LayerStackChanges + 8)
  {
    BOOL v79 = (uint64_t **)(v99 + 27);
    do
    {
      if (*((unsigned char *)v78 + 51))
      {
        unint64_t v80 = (int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)LayerStackChanges);
        pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v73, v78 + 4, v80, 47, 1, 0, 0, (uint64_t *)&v127);
        unint64_t v82 = (void **)v127;
        unint64_t v81 = (void **)v128;
        while (v82 != v81)
        {
          unint64_t v130 = v82;
          sub_216E1B264(v79, (pxrInternal__aapl__pxrReserved__::SdfPath *)v82, (uint64_t)&unk_2174BFD90, (_DWORD **)&v130);
          v82 += 9;
        }
        uint64_t v124 = &v127;
        sub_216BE117C((void ***)&v124);
        uint64_t LayerStackChanges = sub_216C4B19C(1);
        if (LayerStackChanges)
        {
          sub_216BEBED4(v78 + 4);
          int v83 = v129;
          unint64_t v84 = (void **)v127;
          sub_216E1E2D0(v79);
          if (v83 >= 0) {
            int v87 = (void ***)&v127;
          }
          else {
            int v87 = (void ***)v84;
          }
          unint64_t v88 = (void ***)&v124;
          if (v126 < 0) {
            unint64_t v88 = (void ***)v124;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding paths that use layer stack %s: %s\n", v85, v86, v87, v88);
          if (v126 < 0) {
            operator delete(v124);
          }
          if (v129 < 0) {
            operator delete(v127);
          }
        }
      }
      int v89 = (void *)v78[1];
      if (v89)
      {
        do
        {
          uint64_t v90 = v89;
          int v89 = (void *)*v89;
        }
        while (v89);
      }
      else
      {
        do
        {
          uint64_t v90 = (void *)v78[2];
          BOOL v91 = *v90 == (void)v78;
          int v78 = v90;
        }
        while (!v91);
      }
      int v78 = v90;
    }
    while (v90 != v77);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_ProcessPendingChanges(this);
  unint64_t v127 = &v105;
  sub_216981168((void ***)&v127);
  sub_216D5FE08((uint64_t)&v120, v121[0]);
  sub_216D5FE08((uint64_t)&v118, v119[0]);
  sub_216D5FE08((uint64_t)&v116, v117[0]);
  sub_216D5FE08((uint64_t)&v114, v115[0]);
  sub_216D5FE08((uint64_t)&v112, v113[0]);
  pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)__p);
LABEL_142:
  while (v123--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v122);
}

void sub_216DFB44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_21684E6B8(v31 - 168);
  _Unwind_Resume(a1);
}

void sub_216DFB644(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::PcpCache *this, uint64_t **a4, void *a5)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this, (uint64_t *)&__p);
  uint64_t v10 = sub_216BBCEA8((uint64_t *)&__p);
  BOOL HasLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v10, a1);
  uint64_t v12 = v23;
  if (v23 && atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
  }
  if (HasLayer)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a2, (int *)&__p);
    sub_216E1E1CC(a4, &__p, a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
  }
  pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(this, a1, (int *)a2, 62, 1, 0, 0, (uint64_t *)&__p);
  uint64_t v13 = __p;
  uint64_t v14 = v23;
  while (v13 != v14)
  {
    sub_216E1E1CC(a4, v13, a5);
    v13 += 18;
  }
  p_p = &__p;
  sub_216BE117C(&p_p);
  if (sub_216C4B19C(1))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v16);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v18 = Identifier;
    }
    else {
      uint64_t v18 = *(void *)Identifier;
    }
    sub_216E1E2D0(a4);
    if (v24 >= 0) {
      uint64_t v21 = &__p;
    }
    else {
      uint64_t v21 = __p;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding paths that use <%s> in layer @%s@: %s\n", v19, v20, Text, v18, v21);
    if (v24 < 0) {
      operator delete(__p);
    }
  }
}

void sub_216DFB7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216DFB854(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***a1, uint64_t **a2)
{
  uint64_t v2 = *a1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = (uint64_t *)(a2 + 1);
  uint64_t v3 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    do
    {
      if (pxrInternal__aapl__pxrReserved__::UsdStage::_IsObjectDescendantOfInstance(v2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 4)))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 4), &v16);
        pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrimsInPrototypesUsingPrimIndexPath(v2[18], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, (uint64_t *)&v14);
        unint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v14;
        uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v15;
        if (v14 != v15)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, v6, 1);
            sub_216E0CE70(&v18, &v21, (uint64_t)(v3 + 5));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
            sub_21697C414(&v21);
            unint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
          }
          while (v6 != v7);
        }
        uint64_t v21 = (void **)&v14;
        sub_216981168(&v21);
        char v8 = sub_2167AE00C(a2, v3);
        sub_216D5FE64((uint64_t)(v3 + 4));
        operator delete(v3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        sub_21697C414(&v16);
      }
      else
      {
        uint64_t v9 = (uint64_t *)v3[1];
        if (v9)
        {
          do
          {
            char v8 = v9;
            uint64_t v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            char v8 = (uint64_t *)v3[2];
            BOOL v10 = *v8 == (void)v3;
            uint64_t v3 = v8;
          }
          while (!v10);
        }
      }
      uint64_t v3 = v8;
    }
    while (v8 != v4);
    uint64_t v11 = v18;
    for (uint64_t i = v19; v11 != i; v11 += 32)
    {
      uint64_t v14 = (uint64_t *)v11;
      uint64_t v13 = sub_216E1B264(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v11, (uint64_t)&unk_2174BFD90, (_DWORD **)&v14);
      sub_216891650((uint64_t)(v13 + 10), *((void *)v13 + 6), *(char **)(v11 + 8), *(char **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 3);
    }
  }
  uint64_t v14 = &v18;
  sub_216E0D354((void ***)&v14);
}

void sub_216DFBA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a14;
  sub_216E0D354(&a17);
  _Unwind_Resume(a1);
}

void sub_216DFBA98(void **a1, uint64_t **a2)
{
  uint64_t v3 = (uint64_t *)(a2 + 1);
  uint64_t v2 = *a2;
  uint64_t v4 = a1 + 1;
  unint64_t v5 = *a1;
  while (v5 != v4 && v2 != v3)
  {
    if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)))
    {
      char v8 = (uint64_t *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v2 = v8;
          char v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = v2;
          uint64_t v2 = (uint64_t *)v2[2];
        }
        while ((uint64_t *)*v2 != v9);
      }
    }
    else
    {
      if (v2[4] == v5[4])
      {
        sub_216891650((uint64_t)(v5 + 5), v5[6], (char *)v2[5], (char *)v2[6], (v2[6] - v2[5]) >> 3);
      }
      else if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)))
      {
        uint64_t v11 = (void *)v5[1];
        if (v11)
        {
          do
          {
            unint64_t v5 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = v5;
            unint64_t v5 = (void *)v5[2];
          }
          while ((void *)*v5 != v12);
        }
        continue;
      }
      BOOL v10 = sub_2167AE00C(a2, v2);
      sub_216D5FE64((uint64_t)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v10;
    }
  }
}

uint64_t *sub_216DFBBD8(uint64_t *result)
{
  uint64_t v1 = result + 1;
  uint64_t v2 = (uint64_t *)*result;
  if ((uint64_t *)*result != result + 1)
  {
    uint64_t v3 = (uint64_t **)result;
    do
    {
      uint64_t v4 = (uint64_t *)v2[1];
      unint64_t v5 = v2;
      if (v4)
      {
        do
        {
          unint64_t v6 = v4;
          uint64_t v4 = (uint64_t *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v6 = (uint64_t *)v5[2];
          BOOL v7 = *v6 == (void)v5;
          unint64_t v5 = v6;
        }
        while (!v7);
      }
      char v8 = v1;
      if (v6 != v1)
      {
        char v8 = v6;
        while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 4)))
        {
          uint64_t v9 = (uint64_t *)v8[1];
          if (v9)
          {
            do
            {
              BOOL v10 = v9;
              uint64_t v9 = (uint64_t *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              BOOL v10 = (uint64_t *)v8[2];
              BOOL v7 = *v10 == (void)v8;
              char v8 = v10;
            }
            while (!v7);
          }
          char v8 = v10;
          if (v10 == v1)
          {
            char v8 = v1;
            break;
          }
        }
      }
      uint64_t result = sub_216E1E414(v3, v6, v8);
      uint64_t v11 = (uint64_t *)v2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (uint64_t *)v2[2];
          BOOL v7 = *v12 == (void)v2;
          uint64_t v2 = v12;
        }
        while (!v7);
      }
      uint64_t v2 = v12;
    }
    while (v12 != v1);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_HandleResolverDidChange(const pxrInternal__aapl__pxrReserved__::PcpCache **this, const pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext((pxrInternal__aapl__pxrReserved__::UsdStage *)this, __p);
  LOBYTE(a2) = pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::AffectsContext((uint64_t)a2);
  int v22 = __p;
  sub_216787968(&v22);
  if (a2)
  {
    if (sub_216C4B19C(1))
    {
      pxrInternal__aapl__pxrReserved__::UsdDescribe((pxrInternal__aapl__pxrReserved__ *)this, __p);
      unint64_t v6 = v11 >= 0 ? __p : (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"\nHandleResolverDidChange received (%s)\n", v4, v5, v6);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::PcpChanges::PcpChanges(__p);
    uint64_t v12 = v13;
    v13[0] = 0;
    v15[0] = 0;
    v15[1] = 0;
    v13[1] = 0;
    uint64_t v14 = v15;
    int v16 = v17;
    v17[0] = 0;
    v19[0] = 0;
    v19[1] = 0;
    v17[1] = 0;
    uint64_t v18 = v19;
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v20 = v21;
    BOOL v7 = (void **)this[105];
    if (!v7)
    {
      this[105] = (const pxrInternal__aapl__pxrReserved__::PcpCache *)__p;
      BOOL v7 = __p;
    }
    pxrInternal__aapl__pxrReserved__::PcpChanges::DidChangeAssetResolver((pxrInternal__aapl__pxrReserved__::PcpChanges *)v7, this[16]);
    char v8 = this[105];
    int v22 = (void **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
    sub_216E1B264((uint64_t **)v8 + 27, (pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)&unk_2174BFD90, (_DWORD **)&v22);
    if (this[105] == (const pxrInternal__aapl__pxrReserved__::PcpCache *)__p) {
      pxrInternal__aapl__pxrReserved__::UsdStage::_ProcessPendingChanges((pxrInternal__aapl__pxrReserved__::UsdStage *)this);
    }
    sub_216D5FE08((uint64_t)&v20, v21[0]);
    sub_216D5FE08((uint64_t)&v18, v19[0]);
    sub_216D5FE08((uint64_t)&v16, v17[0]);
    sub_216D5FE08((uint64_t)&v14, v15[0]);
    sub_216D5FE08((uint64_t)&v12, v13[0]);
    pxrInternal__aapl__pxrReserved__::PcpChanges::~PcpChanges((pxrInternal__aapl__pxrReserved__::PcpChanges *)__p);
  }
}

void sub_216DFBE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_216DFBED0(uint64_t a1, uint64_t a2)
{
  sub_2169DC954((uint64_t *)a1, *(int **)(a1 + 8), *(_DWORD **)a2, *(_DWORD **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  sub_2169DC954((uint64_t *)(a1 + 24), *(int **)(a1 + 32), *(_DWORD **)(a2 + 24), *(_DWORD **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  sub_2169DC954((uint64_t *)(a1 + 48), *(int **)(a1 + 56), *(_DWORD **)(a2 + 48), *(_DWORD **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  sub_2169DC954((uint64_t *)(a1 + 72), *(int **)(a1 + 80), *(_DWORD **)(a2 + 72), *(_DWORD **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  uint64_t v4 = *(int **)(a1 + 104);
  unint64_t v5 = *(char **)(a2 + 96);
  unint64_t v6 = *(char **)(a2 + 104);

  return sub_2169DC954((uint64_t *)(a1 + 96), v4, v5, v6, (v6 - v5) >> 3);
}

atomic_uint *sub_216DFBF74(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (atomic_uint *)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    void v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 32 * v6;
    sub_216E1E6B4(a1, v7);
    return sub_216E1E858((atomic_uint *)v7);
  }
  return result;
}

void sub_216DFBFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E1E858((atomic_uint *)va);
  _Unwind_Resume(a1);
}

atomic_uint *sub_216DFC008(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (atomic_uint *)(a1 + 2);
  unint64_t v5 = v6;
  BOOL v7 = (_OWORD *)*((void *)result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)sub_2168707F4((uint64_t)result, v12);
    uint64_t v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[32 * v15];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    void v16[2] = v14 + 32;
    sub_216E1E6B4(a1, v16);
    char v8 = (_OWORD *)a1[1];
    uint64_t result = sub_216E1E858((atomic_uint *)v16);
  }
  else
  {
    *BOOL v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    v7[1] = *(_OWORD *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    char v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_216DFC104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E1E858((atomic_uint *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216DFC118(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, atomic_uint **a3)
{
  if (!a2)
  {
    v20[0] = "usd/stage.cpp";
    v20[1] = "_GetDefiningSpecType";
    uint64_t v21 = 5168;
    int v22 = "SdfSpecType pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(Usd_PrimDataConstPtr, const TfToken &) const";
    LOBYTE(v23) = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v20, "primData", 0)) {
      return 0;
    }
  }
  if (*a3
    || (uint64_t v26 = "usd/stage.cpp",
        uint64_t v27 = "_GetDefiningSpecType",
        uint64_t v28 = 5168,
        char v29 = "SdfSpecType pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefiningSpecType(Usd_PrimDataConstPtr, const TfToken &) const",
        char v30 = 0,
        uint64_t SpecType = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "!propName.IsEmpty()", 0) & 1) != 0))
  {
    unint64_t v5 = (atomic_ullong *)*((void *)a2 + 3);
    uint64_t explicit = (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)atomic_load_explicit(v5 + 7, memory_order_acquire);
    if (!explicit) {
      uint64_t explicit = (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v5);
    }
    uint64_t SpecType = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSpecType(explicit, a3);
    if (!SpecType)
    {
      PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(a2);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v20, PrimIndex, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v19);
      if (v21 != v23 || v22 != v24)
      {
        int v9 = 0;
        do
        {
          unint64_t v10 = v25;
          uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v25);
          uint64_t v26 = (char *)v21;
          uint64_t v27 = v22;
          Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v26);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v11, Path))
          {
            if ((v9 & 1) == 0)
            {
              uint64_t v26 = (char *)v21;
              uint64_t v27 = v22;
              uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v26);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)a3, &v16);
              sub_21697DE94(&v18, &v16);
              sub_21697DEEC(&v19, &v17);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
              sub_21697C414(&v16);
            }
            uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v10);
            uint64_t SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
            if (SpecType) {
              goto LABEL_17;
            }
            int v9 = 1;
          }
          v9 &= !pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v20);
        }
        while (v21 != v23 || v22 != v24);
      }
      uint64_t SpecType = 0;
LABEL_17:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
    }
  }
  return SpecType;
}

void sub_216DFC404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::ExportToString(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const char *a2, char a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(a1, a3, &v8);
  uint64_t v4 = sub_216AA5ECC((uint64_t *)&v8);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString(v4, a2, v5);
  sub_216ABB798(&v8);
  return v6;
}

void sub_216DFC470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Flatten@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)this + 32);
  sub_216ABBA60(&v55, (uint64_t *)this + 4);
  unint64_t v5 = (const std::string *)sub_216779094(&v76, ".usda");
  int v73 = 0;
  uint64_t v74 = 0;
  uint64_t v72 = &v73;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(v5, (pxrInternal__aapl__pxrReserved__::TfToken *)&v72, (uint64_t *)&v54);
  sub_2167877AC((uint64_t)&v72, v73);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = sub_21697CF14(&v55);
  if (!(v7 & 1 | (unint64_t)v6))
  {
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp";
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)"Flatten";
    v76.__r_.__value_.__r.__words[2] = 5630;
    unint64_t v77 = (unint64_t)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(BOOL) const";
    char v78 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v76, "rootLayer", 0) & 1) == 0) {
      goto LABEL_89;
    }
  }
  if (v54
    || (v76.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/stage.cpp",
        v76.__r_.__value_.__l.__size_ = (std::string::size_type)"Flatten",
        v76.__r_.__value_.__r.__words[2] = 5634,
        unint64_t v77 = (unint64_t)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(BOOL) const",
        char v78 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v76, "flatLayer", 0) & 1) != 0))
  {
    uint64_t v43 = a3;
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, (uint64_t *)&v72);
    v53[0] = 0;
    v53[1] = 0;
    long long v52 = (uint64_t *)v53;
    char v8 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v72;
    long long v46 = v73;
    if (v72 != (atomic_ullong **)v73)
    {
      uint64_t v9 = 1;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v62);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v62 + 1);
        sub_216D0162C((uint64_t)v8, (int *)&v50);
        unint64_t v10 = sub_21698EFF0((uint64_t)&v52, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
        uint64_t v13 = v10;
        if (v53 == v10)
        {
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"/Flattened_Prototype_%lu", v11, v12, v9);
          pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&size, &v76);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v76.__r_.__value_.__l.__data_);
          }
          sub_21697DE94((int *)&v62, (int *)&size);
          sub_21697DEEC((int *)&v62 + 1, (int *)&size + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&size + 1);
          sub_21697C414(&size);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v8, v14, &size);
          while (1)
          {
            ++v9;
            uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)&size);
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (uint64_t)&v76);
            int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v76, v16);
            if ((v77 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76.__r_.__value_.__r.__words[2] + 1);
            sub_21697C414(&v76.__r_.__value_.__r.__words[2]);
            if (v76.__r_.__value_.__l.__size_) {
              sub_216D16E0C((atomic_ullong *)v76.__r_.__value_.__l.__size_);
            }
            if (!IsDefined) {
              break;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"/Flattened_Prototype_%lu", v18, v19, v9);
            pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v48, &v76);
            if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v76.__r_.__value_.__l.__data_);
            }
            sub_21697DE94((int *)&v62, (int *)&v48);
            sub_21697DEEC((int *)&v62 + 1, (int *)&v48 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
            sub_21697C414(&v48);
          }
          sub_216E0D3EC(&v52, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v50, &v62);
          uint64_t v20 = v68;
          if (v68
            && atomic_fetch_add_explicit((atomic_uint *volatile)&v68->__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string *))(v20->__r_.__value_.__r.__words[0] + 8))(v20);
          }
        }
        else
        {
          sub_2169C487C((int *)&v62, (_DWORD *)v10 + 9);
          sub_2169C48D4((int *)&v62 + 1, (_DWORD *)v13 + 10);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
        sub_21697C414(&v50);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
        sub_21697C414(&v62);
        char v8 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v8 + 32);
      }
      while (v8 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v46);
    }
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
    sub_216E1B384((void ***)&v76);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)this, &v50);
    uint64_t v21 = v50;
    for (uint64_t i = v51; v21 != i; v21 += 32)
    {
      sub_216ABBA60(&v48, (uint64_t *)&v54);
      sub_216D0162C(v21, (int *)&v76);
      int v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216E0D4A4((uint64_t)&v52, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v76);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v76.__r_.__value_.__r.__words + 1);
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__ *)sub_21697C414(&v76);
      UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v23);
      uint64_t v25 = (uint64_t *)sub_216D3B730((uint64_t)&v76, v21, UsdPrimAllPrimsPredicate);
      sub_216D3ADBC(v25, (uint64_t)&v72);
      std::string::size_type size = (atomic_ullong **)v76.__r_.__value_.__l.__size_;
      uint64_t v68 = &v76;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v69);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v69 + 1);
      int v70 = 0;
      __int16 v71 = 0;
      while (v73 != (atomic_ullong *)v68
           || v72 != size
           || v74 != v69
           || v75 != v70
           || BYTE4(v75) != v71
           || BYTE5(v75) != HIBYTE(v71))
      {
        sub_216D3AE90((uint64_t)&v72, (uint64_t)&v62);
        sub_216D0162C((uint64_t)&v62, &v59);
        sub_216D0162C(v21, &v57);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v61, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v57, v22, 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
        sub_21697C414(&v57);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
        sub_21697C414(&v59);
        sub_216DFD368(&v62, &v48, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v61, (uint64_t)&v52);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
        sub_21697C414(&v61);
        if ((v66 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
        sub_21697C414(&v64);
        if (v63) {
          sub_216D16E0C(v63);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v72);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
      sub_21697C414(&v69);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v74 + 1);
      sub_21697C414(&v74);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76.__r_.__value_.__r.__words[2] + 1);
      sub_21697C414(&v76.__r_.__value_.__r.__words[2]);
      uint64_t v26 = v49;
      if (v49 && atomic_fetch_add_explicit((atomic_uint *volatile)(v49 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    sub_216E1B384((void ***)&v76);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v72);
    uint64_t v28 = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v27);
    sub_216D3B730((uint64_t)&v76, (uint64_t)&v72, v28);
    if ((v75 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v74 + 1);
    sub_21697C414(&v74);
    if (v73) {
      sub_216D16E0C(v73);
    }
    sub_216D3ADBC((uint64_t *)&v76, (uint64_t)&v72);
    std::string::size_type size = (atomic_ullong **)v76.__r_.__value_.__l.__size_;
    uint64_t v68 = &v76;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v69);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v69 + 1);
    int v70 = 0;
    __int16 v71 = 0;
    while (v73 != (atomic_ullong *)v68
         || v72 != size
         || v74 != v69
         || v75 != v70
         || BYTE4(v75) != v71
         || BYTE5(v75) != HIBYTE(v71))
    {
      sub_216D3AE90((uint64_t)&v72, (uint64_t)&v62);
      sub_216ABBA60(&v50, (uint64_t *)&v54);
      sub_216D0162C((uint64_t)&v62, (int *)&v48);
      sub_216DFD368(&v62, &v50, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (uint64_t)&v52);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
      sub_21697C414(&v48);
      uint64_t v29 = v51;
      if (v51 && atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      if ((v66 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
      sub_21697C414(&v64);
      if (v63) {
        sub_216D16E0C(v63);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v72);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
    sub_21697C414(&v69);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v74 + 1);
    sub_21697C414(&v74);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v76.__r_.__value_.__r.__words[2]);
    if (a2)
    {
      char v30 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_216AA5ECC((uint64_t *)&v54);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation(v30, (uint64_t)&v76);
      std::string::size_type v31 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v31 = v76.__r_.__value_.__l.__size_;
      }
      if (v31) {
        std::string::append(&v76, "\n\n");
      }
      char v32 = sub_216ABBA60((uint64_t *)&size, v4);
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v32);
      uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v33);
      if (*(char *)(RealPath + 23) >= 0) {
        uint64_t v37 = RealPath;
      }
      else {
        uint64_t v37 = *(void *)RealPath;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Generated from Composed Stage of root layer %s\n", v35, v36, v37);
      if (v74 >= 0) {
        __int16 v38 = (const std::string::value_type *)&v72;
      }
      else {
        __int16 v38 = (const std::string::value_type *)v72;
      }
      if (v74 >= 0) {
        std::string::size_type v39 = HIBYTE(v74);
      }
      else {
        std::string::size_type v39 = (std::string::size_type)v73;
      }
      std::string::append(&v76, v38, v39);
      if (SHIBYTE(v74) < 0) {
        operator delete(v72);
      }
      uint64_t v40 = v68;
      if (v68
        && atomic_fetch_add_explicit((atomic_uint *volatile)&v68->__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string *))(v40->__r_.__value_.__r.__words[0] + 8))(v40);
      }
      BOOL v41 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216AA5ECC((uint64_t *)&v54);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetDocumentation(v41, (uint64_t)&v76);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
    }
    void *v43 = v54;
    unint64_t v54 = 0;
    sub_21698F21C((uint64_t)&v52, v53[0]);
  }
  else
  {
LABEL_89:
    *a3 = 0;
  }
  sub_216ABB798(&v54);
  uint64_t result = v56;
  if (v56 && atomic_fetch_add_explicit((atomic_uint *volatile)(v56 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216DFCE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a29,uint64_t a30,uint64_t a31)
{
  sub_216ABB798(&a29);
  uint64_t v32 = a31;
  if (a31)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a31 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Export(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const char *a2, char a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(a1, a3, &v11);
  uint64_t v6 = sub_216AA5ECC((uint64_t *)&v11);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::Export(v6, a2, (char *)__p, a4);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  sub_216ABB798(&v11);
  return v7;
}

void sub_216DFD33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_216ABB798(&a15);
  _Unwind_Resume(a1);
}

void *sub_216DFD368(pxrInternal__aapl__pxrReserved__ **a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v35 = 0;
  if (sub_216DF1588((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))
  {
    sub_216D0162C((uint64_t)a1, (int *)&__p);
    uint64_t v10 = (void **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
    uint64_t v11 = __p;
    unint64_t v12 = *v10;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (v11 == v12)
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v13, &__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v35, (atomic_uint **)&__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
    }
    else
    {
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v31);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v29);
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
      int v19 = a1[1];
      if (!v19 || (*((unsigned char *)v19 + 57) & 8) != 0) {
        Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], v18);
      }
      if ((**((void **)v19 + 3) & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29, 1, &__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v35, (atomic_uint **)&__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
      sub_21697C414(&v31);
    }
    if (sub_216E0D4E4((uint64_t)a1, v15))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1, v22, (uint64_t)&__p);
      sub_216D0162C((uint64_t)&__p, (int *)&v29);
      uint64_t v23 = (_DWORD *)sub_216E0D4A4(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
      sub_216981010(&v33, v23);
      sub_21698105C(&v34, v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
      sub_21697C414(&v29);
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_21697C414(&v38);
      if (v37) {
        sub_216D16E0C(v37);
      }
      char v24 = (atomic_uint **)sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v35);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v24);
    }
    std::string __p = v35;
    if (v35) {
      atomic_fetch_add(v35, 1u);
    }
    sub_216E0D638((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
    uint64_t v40 = 0;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties((uint64_t)a1, (uint64_t)&__p, (uint64_t *)&v29);
    sub_216D3BB5C(&__p);
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)v29;
    uint64_t v26 = v30;
    if (v29 != v30)
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored(v25)) {
          goto LABEL_20;
        }
        if (*(_DWORD *)v25 == 3)
        {
          sub_216D6B7B4((uint64_t)v25, (uint64_t)&__p);
          BOOL HasAuthoredValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
          if ((v40 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
          sub_21697C414(&v38);
          if (v37) {
            sub_216D16E0C(v37);
          }
          if (HasAuthoredValue)
          {
LABEL_20:
            sub_216D563F8(v25);
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p, 0.0, 1.0);
            sub_216DFE78C(v25, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v35);
          }
        }
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)v25 + 32);
      }
      while (v25 != v26);
    }
    std::string __p = &v29;
    sub_216D3BBE0((void ***)&__p);
  }
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v35);
}

void sub_216DFD774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(const pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X1>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X2>, atomic_uint **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a1))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, v9))
    {
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(a2, a3, (uint64_t)&v37);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v11))
      {
        if (*(_DWORD *)a1 == 4)
        {
          if (v37 != 4)
          {
LABEL_7:
            *(void *)&long long v29 = "usd/stage.cpp";
            *((void *)&v29 + 1) = "_FlattenProperty";
            uint64_t v30 = 5697;
            int v31 = "UsdProperty pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(const UsdProperty &, const Us"
                  "dPrim &, const TfToken &)";
            char v32 = 0;
            pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&v44, a1, v12);
            int v13 = v45;
            uint64_t v14 = v44;
            pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)&v37, v15);
            int v16 = (const char *)&v44;
            if (v13 < 0) {
              int v16 = (const char *)v14;
            }
            if (v36 >= 0) {
              p_p = (const char *)&__p;
            }
            else {
              p_p = (const char *)__p;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot flatten %s to %s because they are different property types", v16, p_p);
            if (v36 < 0) {
              operator delete(__p);
            }
            if (v45 < 0) {
              operator delete(v44);
            }
            *(_DWORD *)a4 = 2;
            *(void *)(a4 + 8) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
            *(void *)(a4 + 24) = 0;
            if ((v41 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
LABEL_47:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
            sub_21697C414(&v39);
            if (v38) {
              sub_216D16E0C(v38);
            }
            *(void *)&long long v29 = &v42;
            sub_216991094((void ***)&v29);
            return;
          }
        }
        else if (*(_DWORD *)a1 == 3 && v37 != 3)
        {
          goto LABEL_7;
        }
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack((pxrInternal__aapl__pxrReserved__ **)&v37, v12, (uint64_t)&v29, NAN);
        sub_216E1FAB0((void **)&v42);
        long long v42 = v29;
        uint64_t v43 = v30;
        uint64_t v30 = 0;
        long long v29 = 0uLL;
        int v44 = (void **)&v29;
        sub_216991094(&v44);
      }
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
      sub_21697C414(&v39);
      if (v38) {
        sub_216D16E0C(v38);
      }
      LODWORD(v37) = 2;
      int v38 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v39);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v40);
      uint64_t v41 = 0;
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v34);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2, v24, &v29);
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v29);
      pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v25, a2, &v33);
      uint64_t v26 = *((void *)&v29 + 1);
      if (*((void *)&v29 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v29 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v33))
      {
        uint64_t v27 = (uint64_t **)sub_216A663FC(&v33);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties(v27);
      }
      *(_DWORD *)a4 = 2;
      *(void *)(a4 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
      *(void *)(a4 + 24) = 0;
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v28, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v33);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v34);
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_47;
    }
    *(void *)&long long v29 = "usd/stage.cpp";
    *((void *)&v29 + 1) = "_FlattenProperty";
    uint64_t v30 = 5683;
    int v31 = "UsdProperty pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(const UsdProperty &, const UsdPrim &,"
          " const TfToken &)";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&v37, a1, v10);
    int v19 = SHIBYTE(v40);
    uint64_t v20 = (void **)v37;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&v44, a2, v21);
    int v22 = &v37;
    if (v19 < 0) {
      int v22 = v20;
    }
    if (v45 >= 0) {
      uint64_t v23 = (const char *)&v44;
    }
    else {
      uint64_t v23 = (const char *)v44;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot flatten property <%s> to invalid %s", (const char *)v22, v23);
    if (v45 < 0) {
      operator delete(v44);
    }
  }
  else
  {
    *(void *)&long long v29 = "usd/stage.cpp";
    *((void *)&v29 + 1) = "_FlattenProperty";
    uint64_t v30 = 5676;
    int v31 = "UsdProperty pxrInternal__aapl__pxrReserved__::UsdStage::_FlattenProperty(const UsdProperty &, const UsdPrim &,"
          " const TfToken &)";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&v37, a1, v9);
    if (v40 >= 0) {
      int v18 = (const char *)&v37;
    }
    else {
      int v18 = (const char *)v37;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot flatten invalid property <%s>", v18);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v37);
  }
  *(_DWORD *)a4 = 2;
  *(void *)(a4 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
  *(void *)(a4 + 24) = 0;
}

void sub_216DFE398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint **sub_216DFE654(uint64_t a1, atomic_uint **a2, atomic_uint **a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = (char *)a3 - (char *)a2;
    uint64_t v6 = a3;
    uint64_t v7 = *(atomic_uint ***)(a1 + 8);
    if (a3 == v7)
    {
      uint64_t v9 = a2;
    }
    else
    {
      uint64_t v8 = v5 >> 3;
      uint64_t v9 = a2;
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9, &v9[v8]);
        ++v9;
        uint64_t v5 = (uint64_t)&v9[v8];
      }
      while (&v9[v8] != v7);
      uint64_t v6 = *(atomic_uint ***)(a1 + 8);
    }
    while (v6 != v9)
      uint64_t v6 = (atomic_uint **)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v6 - 1));
    *(void *)(a1 + 8) = v9;
  }
  return a2;
}

atomic_uint **sub_216DFE6F4(atomic_uint **a1, atomic_uint **a2, void *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = a1;
    while (!pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(v5, a3))
    {
      if (++v5 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 1; i != a2; ++i)
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(i, a3)) {
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5++, i);
      }
    }
  }
  return v5;
}

void sub_216DFE78C(_DWORD *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*a1 == 4)
  {
    sub_216D6B8C4((uint64_t)a1, (uint64_t)v7);
    uint64_t v5 = (uint64_t **)sub_216A663FC(a2);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelationships(v5);
  }
  if (*a1 == 3)
  {
    sub_216D6B7B4((uint64_t)a1, (uint64_t)v7);
    v13[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v7);
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v13))
    {
      uint64_t v6 = (uint64_t **)sub_216A663FC(a2);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributes(v6);
    }
    v13[0] = "usd/stage.cpp";
    v13[1] = "_CopyProperty";
    uint64_t v13[2] = 5391;
    void v13[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyProperty(const UsdProperty &, const SdfP"
             "rimSpecHandle &, const TfToken &, const _PathRemapping &, const SdfLayerOffset &)";
    char v14 = 0;
    sub_216D0162C((uint64_t)v7, (int *)&v12);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v13, (pxrInternal__aapl__pxrReserved__ *)"Attribute <%s> has unknown value type. It will be omitted from the flattened result.", v4, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_21697C414(&v12);
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    if (v8) {
      sub_216D16E0C(v8);
    }
  }
}

void sub_216DFEDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  sub_2168EE084((uint64_t)&a22);
  sub_216997EC4((uint64_t)&a25, a26);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v27, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a16);
  sub_216D2EDA0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_216DFEF78()
{
}

void *pxrInternal__aapl__pxrReserved__::UsdStage::_GetPcpPrimIndex(uint64_t a1, unsigned int *a2)
{
  return pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex(*(void *)(a1 + 128), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetSpecifier(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unsigned int v22 = 1;
  v20[1] = &v22;
  void v20[2] = &stru_26C758108;
  __int16 v21 = 0;
  v20[0] = &unk_26C76A080;
  int v24 = 0;
  uint64_t v25 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v26 + 1);
  uint64_t v27 = 0;
  sub_216E0E6E8((uint64_t)&v14, (uint64_t)v20, (uint64_t)&v24);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v25) {
    sub_216D16E0C(v25);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 16))
    || (*((unsigned char *)this + 57) & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::UsdStage *)((char *)this + 16)))
  {
LABEL_6:
    uint64_t v3 = v14;
    if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(v14 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      goto LABEL_35;
    }
    **(_DWORD **)(v3 + 8) = 0;
    goto LABEL_36;
  }
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(this);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v24, PrimIndex, 1);
  if (v26 == v28)
  {
    int v5 = 1;
    if (v27 == v29)
    {
LABEL_12:
      uint64_t v3 = v14;
      if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(v14 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
      {
        goto LABEL_35;
      }
      **(_DWORD **)(v3 + 8) = v5;
      goto LABEL_36;
    }
  }
  int v5 = 1;
  while (1)
  {
    int v23 = 1;
    uint64_t v6 = (void *)sub_216AA5ECC(v30);
    uint64_t ParentNode = v26;
    char v32 = v27;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8) {
      uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    char v32 = &v23;
    int v33 = &stru_26C758108;
    __int16 v34 = 0;
    uint64_t ParentNode = (uint64_t (**)(void, uint64_t))&unk_26C76A080;
    int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 312), &ParentNode);
    int v10 = (_BYTE)v34 ? 0 : HasField;
    if (v10 == 1 && v23 != 1) {
      break;
    }
LABEL_31:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v24);
    if (v26 == v28 && v27 == v29) {
      goto LABEL_12;
    }
  }
  if (!v23) {
    goto LABEL_6;
  }
  uint64_t ParentNode = v26;
  char v32 = v27;
  if (v26 && v27 != (int *)-1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode))
    {
      uint64_t ParentNode = (uint64_t (**)(void, uint64_t))pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
      char v32 = v11;
      if (!ParentNode || v11 == (int *)-1) {
        goto LABEL_34;
      }
    }
    int v5 = 2;
    goto LABEL_31;
  }
LABEL_34:
  uint64_t v3 = v14;
  if (!strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(v14 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL)))**(_DWORD **)(v3 + 8) = 2; {
  else
  }
LABEL_35:
    *(unsigned char *)(v3 + 25) = 1;
LABEL_36:
  char v19 = 1;
  uint64_t v12 = v22;
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  return v12;
}

void sub_216DFF378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216DFF394(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetKind(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  v14[1] = a2;
  void v14[2] = &stru_26C74C2C0;
  __int16 v15 = 0;
  v14[0] = &unk_26C758B08;
  int v4 = 0;
  int v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v7);
  uint64_t v8 = 0;
  sub_216E0E6E8((uint64_t)v9, (uint64_t)v14, (uint64_t)&v4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  sub_216DFF548(this, 0, v9);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216DFF518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216DFF644((uint64_t)va);
  if ((*v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL sub_216DFF548(pxrInternal__aapl__pxrReserved__::Usd_PrimData *a1, int a2, uint64_t (****a3)(void, uint64_t))
{
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(a1);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v11, PrimIndex, 1);
  uint64_t v10 = 0;
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    int v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v9 = 0;
  BOOL result = sub_216E15990((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 208), &v9, a2, (uint64_t)v11, a3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216DFF60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216DFF644(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsActive(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unsigned __int8 v17 = 1;
  v15[1] = &v17;
  uint64_t v15[2] = MEMORY[0x263F8C230];
  __int16 v16 = 0;
  v15[0] = &unk_26C75BAE8;
  int v5 = 0;
  int v6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  uint64_t v9 = 0;
  sub_216E0E6E8((uint64_t)v10, (uint64_t)v15, (uint64_t)&v5);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  sub_216DFF7F0(this, 0, v10);
  int v3 = v17;
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return v3 != 0;
}

void sub_216DFF7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216DFF8EC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216DFF7F0(pxrInternal__aapl__pxrReserved__::Usd_PrimData *a1, int a2, uint64_t (****a3)(void, uint64_t))
{
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(a1);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v11, PrimIndex, 1);
  uint64_t v10 = 0;
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    int v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v9 = 0;
  BOOL result = sub_216E1FC54((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, v7, &v9, a2, (uint64_t)v11, a3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216DFF8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216DFF8EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  int v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_IsCustom(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty(a2, (uint64_t)&v48);
  uint64_t v3 = *((void *)&v48 + 1);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v3) {
    return 0;
  }
  int v5 = sub_216D563F8(a2);
  sub_216D16CFC((uint64_t)&v44, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  int v7 = (uint64_t *)sub_216D240F8((uint64_t)&v44, v6);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v7, 6u, (uint64_t *)&v54);
  long long v52 = v54;
  long long v53 = v55;
  long long v48 = v55;
  long long v49 = v55;
  long long v50 = v54;
  long long v51 = v54;
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_21697C414(&v46);
  if (v45) {
    sub_216D16E0C(v45);
  }
  if (v49 != v51)
  {
    uint64_t v14 = MEMORY[0x263F8C230];
    do
    {
      __int16 v15 = sub_216DFFC94(&v48, v8, v9);
      uint64_t v16 = v15[3] - 1;
      *(void *)&long long v54 = v15[2];
      *((void *)&v54 + 1) = v16;
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v54) & 1) == 0)
      {
        char v19 = sub_216DFFC94(&v48, v17, v18);
        uint64_t v20 = (atomic_ullong *)(v19[3] - 1);
        int v44 = (atomic_ullong *)v19[2];
        char v45 = v20;
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v44))
        {
          int v23 = sub_216DFFC94(&v48, v21, v22);
          uint64_t v24 = v23[3] - 1;
          *(void *)&long long v54 = v23[2];
          *((void *)&v54 + 1) = v24;
          Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v54);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v5, &v42);
          uint64_t v28 = sub_216DFFC94(&v48, v26, v27);
          uint64_t v29 = v28[3] - 1;
          *(void *)&long long v54 = v28[2];
          *((void *)&v54 + 1) = v29;
          uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v54);
          int v31 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
          uint64_t Layers = (atomic_ullong **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v31);
          int v44 = Layers[1];
          char v45 = v44;
          uint64_t v46 = *Layers;
          unint64_t v47 = (unint64_t)v46;
          while (v45 != (atomic_ullong *)v47)
          {
            char v41 = 0;
            unint64_t v35 = (uint64_t *)sub_216BEF334((uint64_t)&v44, v33, v34);
            char v36 = (void *)sub_216AA5ECC(v35);
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v37) {
              uint64_t v37 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            *((void *)&v54 + 1) = &v41;
            *(void *)&long long v55 = v14;
            WORD4(v55) = 0;
            *(void *)&long long v54 = &unk_26C75BAE8;
            if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v36, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v37 + 64), (uint64_t (***)(void, uint64_t))&v54))BOOL v38 = BYTE8(v55) == 0; {
            else
            }
              BOOL v38 = 0;
            if (v38 && v41 != 0)
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
              sub_21697C414(&v42);
              return 1;
            }
            sub_216BEF4DC((uint64_t)&v44);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
          sub_21697C414(&v42);
        }
      }
      sub_216DFFD8C(&v48);
    }
    while ((void)v49 != (void)v51 || *((void *)&v49 + 1) != *((void *)&v51 + 1));
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  int v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11) {
    int v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v10, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v11 + 64));
  FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
  return *(unsigned char *)sub_216958184(FallbackValue) != 0;
}

void sub_216DFFC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216DFFC94(void *result, uint64_t a2, char *a3)
{
  if (result[2] == result[6] && result[3] == result[7])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    void v4[2] = 287;
    void v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpNodeIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, true>::operator->() [T = std::pair<pxrInternal__"
            "aapl__pxrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = true]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216DFFD18(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))MEMORY[0x263F8C230];
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75BAE8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

void *sub_216DFFD8C(void *a1)
{
  uint64_t v2 = a1[3];
  if (a1[2] == a1[6] && v2 == a1[7])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator++";
    void v5[2] = 250;
    void v5[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserve"
            "d__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, true>::operator++() [T = std::pair"
            "<pxrInternal__aapl__pxrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = true]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    a1[3] = v2 - 1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetVariability(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  if (*(_DWORD *)a2 != 3) {
    goto LABEL_37;
  }
  sub_216D6B7B4((uint64_t)a2, (uint64_t)&v57);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaAttribute((const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v57, &v51);
  BOOL IsAttribute = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsAttribute((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&v51);
  BOOL v4 = IsAttribute;
  if (IsAttribute) {
    uint64_t Variability = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::GetVariability((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)&v51);
  }
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v4)
  {
    int v5 = 1;
  }
  else
  {
    int v43 = sub_216D563F8(&v57);
    sub_216D16CFC((uint64_t)&v47, (uint64_t *)&v58, &v59);
    __int16 v7 = (uint64_t *)sub_216D240F8((uint64_t)&v47, v6);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v7, 6u, (uint64_t *)&v62);
    long long v56 = v63;
    long long v55 = v62;
    long long v51 = v63;
    long long v52 = v63;
    long long v53 = v62;
    long long v54 = v62;
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
    sub_21697C414(&v49);
    if (v48) {
      sub_216D16E0C(v48);
    }
    while ((void)v52 != (void)v54 || *((void *)&v52 + 1) != *((void *)&v54 + 1))
    {
      int v11 = sub_216DFFC94(&v51, v8, v9);
      uint64_t v12 = v11[3] - 1;
      *(void *)&long long v62 = v11[2];
      *((void *)&v62 + 1) = v12;
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62) & 1) == 0)
      {
        __int16 v15 = sub_216DFFC94(&v51, v13, v14);
        uint64_t v16 = (atomic_ullong *)(v15[3] - 1);
        unint64_t v47 = (atomic_ullong *)v15[2];
        long long v48 = v16;
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v47))
        {
          char v19 = sub_216DFFC94(&v51, v17, v18);
          uint64_t v20 = v19[3] - 1;
          *(void *)&long long v62 = v19[2];
          *((void *)&v62 + 1) = v20;
          Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v43, &v45);
          uint64_t v24 = sub_216DFFC94(&v51, v22, v23);
          uint64_t v25 = v24[3] - 1;
          *(void *)&long long v62 = v24[2];
          *((void *)&v62 + 1) = v25;
          uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62);
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
          uint64_t Layers = (atomic_ullong **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v27);
          unint64_t v47 = Layers[1];
          long long v48 = v47;
          long long v49 = *Layers;
          unint64_t v50 = (unint64_t)v49;
          while (1)
          {
            int v31 = v48;
            char v32 = (atomic_ullong *)v50;
            if (v48 == (atomic_ullong *)v50)
            {
              int v5 = 0;
              goto LABEL_29;
            }
            unsigned int v44 = 0;
            uint64_t v33 = (uint64_t *)sub_216BEF334((uint64_t)&v47, v29, v30);
            __int16 v34 = (void *)sub_216AA5ECC(v33);
            unint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v35) {
              unint64_t v35 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            *((void *)&v62 + 1) = &v44;
            *(void *)&long long v63 = &stru_26C756E50;
            WORD4(v63) = 0;
            *(void *)&long long v62 = &unk_26C75E6F8;
            char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v34, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v35 + 464), (uint64_t (***)(void, uint64_t))&v62);
            char v37 = BYTE8(v63) ? 0 : HasField;
            if (v37) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v47);
          }
          uint64_t Variability = v44;
          int v5 = 1;
LABEL_29:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
          sub_21697C414(&v45);
          if (v31 != v32) {
            goto LABEL_32;
          }
        }
      }
      sub_216DFFD8C(&v51);
    }
    int v5 = 0;
  }
LABEL_32:
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
  sub_21697C414(&v59);
  if (v58) {
    sub_216D16E0C(v58);
  }
  if (!v5)
  {
LABEL_37:
    BOOL v38 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!v38) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    int v39 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v39) {
      int v39 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v38, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v39 + 464));
    FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
    return *(unsigned int *)sub_2169D0924(FallbackValue);
  }
  return Variability;
}

void sub_216E00184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_216E00200(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C756E50;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E6F8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdObject *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, pxrInternal__aapl__pxrReserved__::VtValue *a6)
{
  if (*(_DWORD *)a2 != 3) {
    goto LABEL_5;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12) {
    uint64_t v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 54) & 0xFFFFFFFFFFFFFFF8))
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v20 = (uint64_t *)v21;
    sub_216D6B7B4((uint64_t)a2, (uint64_t)&v15);
    uint64_t v13 = sub_216E0043C((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v15, &v20);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_21697C414(&v17);
    if (v16) {
      sub_216D16E0C(v16);
    }
    if (v13) {
      sub_216A9E868(a6, (uint64_t)&v20);
    }
    sub_216997EC4((uint64_t)&v20, v21[0]);
  }
  else
  {
LABEL_5:
    sub_216E005EC((uint64_t)&v15, (uint64_t)a6, (uint64_t)a2, 0);
    uint64_t v13 = sub_216E00690((uint64_t *)this, (uint64_t)a2, a3, a4, a5, &v15);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_21697C414(&v18);
    if (v17) {
      sub_216D16E0C(v17);
    }
  }
  return v13;
}

void sub_216E003F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

uint64_t sub_216E0043C(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t **a2)
{
  uint64_t v15[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)v12, a1);
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t TimeSamples = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamples((uint64_t)v12, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
  uint64_t v4 = (uint64_t *)__p;
  if (TimeSamples)
  {
    int v5 = v10;
    if (__p != v10)
    {
      do
      {
        v15[1] = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::Get(v12, v15, *(double *)v4))
        {
          v14[0] = v4;
          char v6 = sub_216A9E780(a2, (double *)v4, (uint64_t)&unk_2174BFD90, v14);
          sub_21697DC0C(v6 + 5, v15);
        }
        else
        {
          v14[1] = (uint64_t *)((char *)&off_26C75B258 + 3);
          uint64_t v13 = v4;
          __int16 v7 = sub_216A9E780(a2, (double *)v4, (uint64_t)&unk_2174BFD90, &v13);
          sub_2168ED33C(v7 + 5, v14);
          sub_2168EE084((uint64_t)v14);
        }
        sub_2168EE084((uint64_t)v15);
        ++v4;
      }
      while (v4 != v5);
      uint64_t v4 = (uint64_t *)__p;
    }
  }
  if (v4)
  {
    uint64_t v10 = v4;
    operator delete(v4);
  }
  sub_216D2FE74((uint64_t)v12);
  return TimeSamples;
}

void sub_216E005A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_216D2FE74((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_216E005EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(a1 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a3 + 16));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a3 + 20));
  uint64_t v8 = *(void *)(a3 + 24);
  *(void *)(a1 + 32) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 41) = a4;
  return a1;
}

BOOL sub_216E00690(uint64_t *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, const pxrInternal__aapl__pxrReserved__::VtDictionary ***a6)
{
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v143);
  int v14 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v14 == 3)
    {
      __int16 v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        __int16 v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v156);
        uint64_t v37 = *((void *)&v156 + 1);
        if (!*((void *)&v156 + 1) || (*(unsigned char *)(*((void *)&v156 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v156 + 1), v36);
        }
        BOOL v38 = *(atomic_ullong **)(v37 + 24);
        uint64_t explicit = atomic_load_explicit(v38 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        }
        int v40 = sub_216D563F8(&v156);
        *(void *)&long long v162 = 0;
        sub_216E215DC(a6, explicit, v40, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162);
        if ((v162 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!*((unsigned char *)a6 + 40))
        {
          *(void *)&long long v162 = 0;
          sub_216E1FDFC((uint64_t)&v156, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162, a5, (pxrInternal__aapl__pxrReserved__::VtValue **)a6);
          if ((v162 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v157) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v157 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v157 + 1);
        sub_21697C414(&v157);
        char v41 = (atomic_ullong *)*((void *)&v156 + 1);
        if (!*((void *)&v156 + 1))
        {
LABEL_163:
          if (*((unsigned char *)a6 + 40))
          {
            unint64_t v28 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v28) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_195;
          }
          goto LABEL_197;
        }
LABEL_162:
        sub_216D16E0C(v41);
        goto LABEL_163;
      }
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v144);
        int v43 = v145;
        if (!v145 || (*((unsigned char *)v145 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v145, v42);
        }
        unsigned int v44 = (atomic_ullong *)*((void *)v43 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v44 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v44);
        }
        int v46 = sub_216D563F8(&v144);
        unint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v47) {
          unint64_t v47 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v156 = 0;
        sub_216E215DC(a6, PrimDefinition, v46, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v47 + 464), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v156);
        if ((v156 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!*((unsigned char *)a6 + 40))
        {
          long long v48 = sub_216D563F8(&v144);
          sub_216D16CFC((uint64_t)&v152, (uint64_t *)&v145, &v146);
          unint64_t v50 = (uint64_t *)sub_216D240F8((uint64_t)&v152, v49);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v50, 6u, (uint64_t *)&v162);
          long long v160 = v162;
          long long v161 = v163;
          long long v156 = v163;
          long long v157 = v163;
          long long v158 = v162;
          long long v159 = v162;
          if ((v155 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v154);
          sub_21697C414(&v153);
          if (*((void *)&v152 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v152 + 1));
          }
          if (v157 != v159)
          {
            while (1)
            {
              long long v53 = sub_216DFFC94(&v156, v51, v52);
              uint64_t v54 = v53[3] - 1;
              *(void *)&long long v162 = v53[2];
              *((void *)&v162 + 1) = v54;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162) & 1) == 0)
              {
                int v57 = sub_216DFFC94(&v156, v55, v56);
                uint64_t v58 = v57[3] - 1;
                *(void *)&long long v152 = v57[2];
                *((void *)&v152 + 1) = v58;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152)) {
                  break;
                }
              }
LABEL_84:
              sub_216DFFD8C(&v156);
              if (v157 == v159) {
                goto LABEL_159;
              }
            }
            uint64_t v61 = sub_216DFFC94(&v156, v59, v60);
            uint64_t v62 = v61[3] - 1;
            *(void *)&long long v162 = v61[2];
            *((void *)&v162 + 1) = v62;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v48, &v150);
            uint64_t v66 = sub_216DFFC94(&v156, v64, v65);
            uint64_t v67 = v66[3] - 1;
            *(void *)&long long v152 = v66[2];
            *((void *)&v152 + 1) = v67;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
            uint64_t v69 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v69);
            *(void *)&long long v162 = Layers[1];
            *((void *)&v162 + 1) = v162;
            *(void *)&long long v163 = *Layers;
            *((void *)&v163 + 1) = v163;
            while (1)
            {
              if (*((void *)&v162 + 1) == *((void *)&v163 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v151);
                sub_21697C414(&v150);
                goto LABEL_84;
              }
              *(void *)&long long v152 = sub_216E15794(&v156, v71, v72);
              *((void *)&v152 + 1) = v73;
              uint64_t v75 = (uint64_t *)sub_216BEF334((uint64_t)&v162, v73, v74);
              std::string v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v76) {
                std::string v76 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v149 = 0;
              sub_216E21DB8(a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152, v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v150, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v76 + 464), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v149);
              if ((v149 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (*((unsigned char *)a6 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v162);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v151);
            sub_21697C414(&v150);
          }
        }
LABEL_159:
        if ((v148 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_161:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v147);
        sub_21697C414(&v146);
        char v41 = (atomic_ullong *)v145;
        if (!v145) {
          goto LABEL_163;
        }
        goto LABEL_162;
      }
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v144);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v144, (uint64_t)&v156);
      uint64_t v18 = *((void *)&v156 + 1);
      if ((v156 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18)
      {
        uint64_t v19 = *a6;
        uint64_t v20 = (*a6)[1];
        if (v20 && ((unint64_t)(*a6)[1] & 3) != 3) {
          (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))(((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                          + 32))(*a6);
        v19[1] = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&unk_26C7501AB;
        *(unsigned char *)uint64_t v19 = 0;
        *((unsigned char *)a6 + 40) = 1;
      }
      else
      {
        unint64_t v77 = sub_216D563F8(&v144);
        sub_216D16CFC((uint64_t)&v152, (uint64_t *)&v145, &v146);
        BOOL v79 = (uint64_t *)sub_216D240F8((uint64_t)&v152, v78);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v79, 6u, (uint64_t *)&v162);
        long long v160 = v162;
        long long v161 = v163;
        long long v156 = v163;
        long long v157 = v163;
        long long v158 = v162;
        long long v159 = v162;
        if ((v155 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v154);
        sub_21697C414(&v153);
        if (*((void *)&v152 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v152 + 1));
        }
        if (v157 != v159)
        {
          while (1)
          {
            unint64_t v82 = sub_216DFFC94(&v156, v80, v81);
            uint64_t v83 = v82[3] - 1;
            *(void *)&long long v162 = v82[2];
            *((void *)&v162 + 1) = v83;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162) & 1) == 0)
            {
              uint64_t v86 = sub_216DFFC94(&v156, v84, v85);
              uint64_t v87 = v86[3] - 1;
              *(void *)&long long v152 = v86[2];
              *((void *)&v152 + 1) = v87;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152)) {
                break;
              }
            }
LABEL_102:
            sub_216DFFD8C(&v156);
            if (v157 == v159) {
              goto LABEL_135;
            }
          }
          uint64_t v90 = sub_216DFFC94(&v156, v88, v89);
          uint64_t v91 = v90[3] - 1;
          *(void *)&long long v162 = v90[2];
          *((void *)&v162 + 1) = v91;
          size_t v92 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v92, v77, &v150);
          int v95 = sub_216DFFC94(&v156, v93, v94);
          uint64_t v96 = v95[3] - 1;
          *(void *)&long long v152 = v95[2];
          *((void *)&v152 + 1) = v96;
          uint64_t v97 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
          BOOL v98 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v97);
          uint64_t v99 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v98);
          *(void *)&long long v162 = v99[1];
          *((void *)&v162 + 1) = v162;
          *(void *)&long long v163 = *v99;
          *((void *)&v163 + 1) = v163;
          while (1)
          {
            if (*((void *)&v162 + 1) == *((void *)&v163 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v151);
              sub_21697C414(&v150);
              goto LABEL_102;
            }
            *(void *)&long long v152 = sub_216E15794(&v156, v100, v101);
            *((void *)&v152 + 1) = v102;
            int v104 = (uint64_t *)sub_216BEF334((uint64_t)&v162, v102, v103);
            __int16 v105 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v105) {
              __int16 v105 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v149 = 0;
            sub_216E21DB8(a6, a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152, v104, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v150, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v105 + 64), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v149);
            if ((v149 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((unsigned char *)a6 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v162);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v151);
          sub_21697C414(&v150);
        }
      }
LABEL_135:
      if ((v148 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_161;
    }
LABEL_36:
    if (sub_216E1FDFC(a2, a3, a4, a5, (pxrInternal__aapl__pxrReserved__::VtValue **)a6))
    {
      unint64_t v28 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v28) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_195;
    }
    goto LABEL_197;
  }
  if (v14 != 1) {
    goto LABEL_36;
  }
  uint64_t v21 = *(void *)(a2 + 8);
  if (!v21 || (uint64_t v22 = *(void *)(v21 + 56), (v22 & 0x800) != 0))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v13);
    uint64_t v22 = *(void *)(v21 + 56);
  }
  int v23 = *(unsigned char **)(a2 + 8);
  if ((v22 & 0x4000) != 0)
  {
    uint64_t v29 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v12);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v156 = v31;
    *((void *)&v156 + 1) = v32;
    if (a1[5]
      && (uint64_t v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156),
          __int16 v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v33),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == a1[5]))
    {
      int v121 = sub_216E21DB8(a6, *(void **)v23, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156, a1 + 5, v29, a3, a4);
      if (*((unsigned char *)a6 + 40))
      {
LABEL_132:
        unint64_t v28 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v28) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_195:
        unint64_t v139 = v143;
        unint64_t v140 = atomic_load((unint64_t *)(v28 + 144));
        BOOL v141 = v139 >= v140
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v143, (atomic_ullong *)v28);
        goto LABEL_199;
      }
      int v35 = v121;
    }
    else
    {
      int v35 = 0;
    }
    if ((v35 | sub_216E21DB8(a6, *(void **)v23, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v156, a1 + 4, v29, a3, a4)) != 1)goto LABEL_197; {
    goto LABEL_132;
    }
  }
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24) {
    uint64_t v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v106 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v156, v106, 1);
    if (v157 == v158) {
      goto LABEL_192;
    }
    while (1)
    {
      uint64_t v144 = 0;
      uint64_t v107 = (void *)sub_216AA5ECC((uint64_t *)v159);
      long long v162 = v157;
      int v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162);
      uint64_t v109 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v109) {
        uint64_t v109 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v162 + 1) = &v144;
      *(void *)&long long v163 = &stru_26C74C2C0;
      WORD4(v163) = 0;
      *(void *)&long long v162 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v107, v108, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v109 + 448), (uint64_t (***)(void, uint64_t))&v162);
      uint64_t v111 = v144;
      BOOL v112 = HasField && BYTE8(v163) == 0;
      if (v112 && v144 != 0)
      {
        uint64_t v114 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v114) {
          uint64_t v114 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v111 = v144;
        if ((v144 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v114 & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v115 = *(void **)v23;
          long long v152 = v157;
          long long v116 = (uint64_t *)v159;
          long long v162 = v157;
          int v117 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162);
          int v118 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v118) {
            int v118 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v162 = 0;
          sub_216E21DB8(a6, v115, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152, v116, v117, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v118 + 448), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162);
          if ((v162 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v111 = v144;
          if (*((unsigned char *)a6 + 40)) {
            goto LABEL_155;
          }
        }
      }
      if ((v111 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v156);
      if (v157 == v158) {
        goto LABEL_192;
      }
    }
  }
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v25) {
    uint64_t v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v25 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v26) {
      uint64_t v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v26 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v122 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v156, v122, 1);
      *(void *)&long long v162 = 0;
      int v123 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v123) {
        int v123 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v152 = 0;
      sub_216E23768((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v123 + 208), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v152, a5, (uint64_t)&v156, (uint64_t)a6);
    }
    else
    {
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27) {
        uint64_t v27 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v27 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_36;
      }
      uint64_t v128 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v156, v128, 1);
      *(void *)&long long v162 = 0;
      char v129 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v129) {
        char v129 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v152 = 0;
      sub_216E23768((uint64_t)v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v162, v129, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v152, a5, (uint64_t)&v156, (uint64_t)a6);
    }
    if ((v152 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v111 = v162;
LABEL_155:
    if ((v111 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_192;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16))
    || (v23[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16)))
  {
    int v119 = *a6;
    __int16 v120 = (*a6)[1];
    if (v120 && ((unint64_t)(*a6)[1] & 3) != 3) {
      goto LABEL_129;
    }
    goto LABEL_130;
  }
  uint64_t v124 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v23);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v156, v124, 1);
  if ((void)v157 == (void)v158)
  {
    int v125 = 1;
    if (*((void *)&v157 + 1) == *((void *)&v158 + 1))
    {
LABEL_145:
      char v126 = *a6;
      unint64_t v127 = (*a6)[1];
      if (v127 && ((unint64_t)(*a6)[1] & 3) != 3) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))(((unint64_t)v127 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                        + 32))(*a6);
      v126[1] = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)((char *)&off_26C758118 + 3);
      *(_DWORD *)char v126 = v125;
      goto LABEL_191;
    }
  }
  int v125 = 1;
  while (1)
  {
    LODWORD(v152) = 1;
    unint64_t v130 = (void *)sub_216AA5ECC((uint64_t *)v159);
    long long v162 = v157;
    unint64_t v131 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162);
    int v132 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v132) {
      int v132 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v162 + 1) = &v152;
    *(void *)&long long v163 = &stru_26C758108;
    WORD4(v163) = 0;
    *(void *)&long long v162 = &unk_26C76A080;
    int v133 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v130, v131, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v132 + 312), (uint64_t (***)(void, uint64_t))&v162);
    if (BYTE8(v163)) {
      int v134 = 0;
    }
    else {
      int v134 = v133;
    }
    if (v134 != 1 || v152 == 1) {
      goto LABEL_183;
    }
    if (!v152) {
      break;
    }
    long long v162 = v157;
    if (!(void)v157 || *((void *)&v157 + 1) == -1)
    {
LABEL_185:
      int v136 = *a6;
      uint64_t v137 = (*a6)[1];
      if (v137) {
        BOOL v138 = ((unint64_t)(*a6)[1] & 3) == 3;
      }
      else {
        BOOL v138 = 1;
      }
      if (!v138) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))(((unint64_t)v137 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                        + 32))(*a6);
      v136[1] = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)((char *)&off_26C758118 + 3);
      *(_DWORD *)int v136 = 2;
      goto LABEL_191;
    }
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162))
    {
      *(void *)&long long v162 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v162);
      *((void *)&v162 + 1) = v135;
      if (!(void)v162 || v135 == -1) {
        goto LABEL_185;
      }
    }
    int v125 = 2;
LABEL_183:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v156);
    if (v157 == v158) {
      goto LABEL_145;
    }
  }
  int v119 = *a6;
  __int16 v120 = (*a6)[1];
  if (!v120 || ((unint64_t)(*a6)[1] & 3) == 3) {
    goto LABEL_130;
  }
LABEL_129:
  (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))(((unint64_t)v120 & 0xFFFFFFFFFFFFFFF8)
                                                                                  + 32))(*a6);
LABEL_130:
  v119[1] = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)((char *)&off_26C758118 + 3);
  *(_DWORD *)int v119 = 0;
LABEL_191:
  *((unsigned char *)a6 + 40) = 1;
LABEL_192:
  if (*((unsigned char *)a6 + 40))
  {
    unint64_t v28 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v28) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_195;
  }
LABEL_197:
  BOOL v141 = 0;
LABEL_199:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v143);
  return v141;
}

void sub_216E0161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(v9 - 120);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216E017E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6)
{
  sub_216E0E6E8((uint64_t)v132, a6, a2);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138);
  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v13 == 3)
    {
      int v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v14) {
        int v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v151);
        uint64_t v32 = *((void *)&v151 + 1);
        if (!*((void *)&v151 + 1) || (*(unsigned char *)(*((void *)&v151 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v151 + 1), v31);
        }
        uint64_t v33 = *(atomic_ullong **)(v32 + 24);
        uint64_t explicit = atomic_load_explicit(v33 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v33);
        }
        int v35 = sub_216D563F8(&v151);
        *(void *)&long long v157 = 0;
        unsigned int v36 = sub_216E156AC(explicit, v35, a3, &v157, v132[0]);
        unsigned __int8 v137 = v36;
        if ((v157 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v36 = v137;
        }
        if (!v36)
        {
          *(void *)&long long v157 = 0;
          sub_216E24564((uint64_t)&v151, a3, (uint64_t *)&v157, a5, v132);
          if ((v157 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v152) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v152 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v152 + 1);
        sub_21697C414(&v152);
        uint64_t v37 = (atomic_ullong *)*((void *)&v151 + 1);
        if (!*((void *)&v151 + 1))
        {
LABEL_163:
          if (v137)
          {
            unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v24) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_191;
          }
          goto LABEL_193;
        }
LABEL_162:
        sub_216D16E0C(v37);
        goto LABEL_163;
      }
      __int16 v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v15) {
        __int16 v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v139);
        int v39 = v140;
        if (!v140 || (*((unsigned char *)v140 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v140, v38);
        }
        int v40 = (atomic_ullong *)*((void *)v39 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v40 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v40);
        }
        int v42 = sub_216D563F8(&v139);
        int v43 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v43) {
          int v43 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v151 = 0;
        unsigned int v44 = sub_216E156AC(PrimDefinition, v42, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v43 + 464), &v151, v132[0]);
        unsigned __int8 v137 = v44;
        if ((v151 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v44 = v137;
        }
        if (!v44)
        {
          int v45 = sub_216D563F8(&v139);
          sub_216D16CFC((uint64_t)&v146, (uint64_t *)&v140, &v141);
          unint64_t v47 = (uint64_t *)sub_216D240F8((uint64_t)&v146, v46);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v47, 6u, (uint64_t *)&v157);
          long long v155 = v157;
          long long v156 = v158;
          long long v151 = v158;
          long long v152 = v158;
          long long v153 = v157;
          long long v154 = v157;
          if ((v150 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
          sub_21697C414(&v148);
          if (v147) {
            sub_216D16E0C(v147);
          }
          if (v152 != v154)
          {
            while (1)
            {
              unint64_t v50 = sub_216DFFC94(&v151, v48, v49);
              uint64_t v51 = v50[3] - 1;
              *(void *)&long long v157 = v50[2];
              *((void *)&v157 + 1) = v51;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) & 1) == 0)
              {
                uint64_t v54 = sub_216DFFC94(&v151, v52, v53);
                uint64_t v55 = (atomic_ullong *)(v54[3] - 1);
                uint64_t v146 = v54[2];
                int v147 = v55;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146)) {
                  break;
                }
              }
LABEL_82:
              sub_216DFFD8C(&v151);
              if (v152 == v154) {
                goto LABEL_159;
              }
            }
            uint64_t v58 = sub_216DFFC94(&v151, v56, v57);
            uint64_t v59 = v58[3] - 1;
            *(void *)&long long v157 = v58[2];
            *((void *)&v157 + 1) = v59;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v45, &v144);
            long long v63 = sub_216DFFC94(&v151, v61, v62);
            uint64_t v64 = (atomic_ullong *)(v63[3] - 1);
            uint64_t v146 = v63[2];
            int v147 = v64;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146);
            uint64_t v66 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v66);
            *(void *)&long long v157 = Layers[1];
            *((void *)&v157 + 1) = v157;
            *(void *)&long long v158 = *Layers;
            *((void *)&v158 + 1) = v158;
            while (1)
            {
              if (*((void *)&v157 + 1) == *((void *)&v158 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
                sub_21697C414(&v144);
                goto LABEL_82;
              }
              sub_216E15794(&v151, v68, v69);
              uint64_t v72 = (uint64_t *)sub_216BEF334((uint64_t)&v157, v70, v71);
              uint64_t v73 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v73) {
                uint64_t v73 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v146 = 0;
              if (sub_216E15820(v132, v72, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v144, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v73 + 464), &v146))unsigned __int8 v137 = 1; {
              if ((v146 & 7) != 0)
              }
                atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              if (v137) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v157);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
            sub_21697C414(&v144);
          }
        }
LABEL_159:
        if ((v143 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_161:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v142);
        sub_21697C414(&v141);
        uint64_t v37 = (atomic_ullong *)v140;
        if (!v140) {
          goto LABEL_163;
        }
        goto LABEL_162;
      }
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16) {
      uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v139);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v139, (uint64_t)&v151);
      uint64_t v17 = *((void *)&v151 + 1);
      if ((v151 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v17)
      {
        LOBYTE(v151) = 0;
        sub_216E158B4((uint64_t)v132[0], &v151);
        unsigned __int8 v137 = 1;
      }
      else
      {
        uint64_t v74 = sub_216D563F8(&v139);
        sub_216D16CFC((uint64_t)&v146, (uint64_t *)&v140, &v141);
        std::string v76 = (uint64_t *)sub_216D240F8((uint64_t)&v146, v75);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v76, 6u, (uint64_t *)&v157);
        long long v155 = v157;
        long long v156 = v158;
        long long v151 = v158;
        long long v152 = v158;
        long long v153 = v157;
        long long v154 = v157;
        if ((v150 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
        sub_21697C414(&v148);
        if (v147) {
          sub_216D16E0C(v147);
        }
        if (v152 != v154)
        {
          while (1)
          {
            BOOL v79 = sub_216DFFC94(&v151, v77, v78);
            uint64_t v80 = v79[3] - 1;
            *(void *)&long long v157 = v79[2];
            *((void *)&v157 + 1) = v80;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) & 1) == 0)
            {
              uint64_t v83 = sub_216DFFC94(&v151, v81, v82);
              uint64_t v84 = (atomic_ullong *)(v83[3] - 1);
              uint64_t v146 = v83[2];
              int v147 = v84;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146)) {
                break;
              }
            }
LABEL_102:
            sub_216DFFD8C(&v151);
            if (v152 == v154) {
              goto LABEL_136;
            }
          }
          uint64_t v87 = sub_216DFFC94(&v151, v85, v86);
          uint64_t v88 = v87[3] - 1;
          *(void *)&long long v157 = v87[2];
          *((void *)&v157 + 1) = v88;
          int v89 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v89, v74, &v144);
          size_t v92 = sub_216DFFC94(&v151, v90, v91);
          uint64_t v93 = (atomic_ullong *)(v92[3] - 1);
          uint64_t v146 = v92[2];
          int v147 = v93;
          size_t v94 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146);
          int v95 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v94);
          uint64_t v96 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v95);
          *(void *)&long long v157 = v96[1];
          *((void *)&v157 + 1) = v157;
          *(void *)&long long v158 = *v96;
          *((void *)&v158 + 1) = v158;
          while (1)
          {
            if (*((void *)&v157 + 1) == *((void *)&v158 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
              sub_21697C414(&v144);
              goto LABEL_102;
            }
            sub_216E15794(&v151, v97, v98);
            long long v101 = (uint64_t *)sub_216BEF334((uint64_t)&v157, v99, v100);
            uint64_t v102 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v102) {
              uint64_t v102 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v146 = 0;
            if (sub_216E15820(v132, v101, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v144, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v102 + 64), &v146))unsigned __int8 v137 = 1; {
            if ((v146 & 7) != 0)
            }
              atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            if (v137) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v157);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
          sub_21697C414(&v144);
        }
      }
LABEL_136:
      if ((v143 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_161;
    }
LABEL_33:
    if (sub_216E24564(a2, a3, a4, a5, v132))
    {
      unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v24) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_191;
    }
    goto LABEL_193;
  }
  if (v13 != 1) {
    goto LABEL_33;
  }
  uint64_t v18 = *(void *)(a2 + 8);
  if (!v18 || (uint64_t v19 = *(void *)(v18 + 56), (v19 & 0x800) != 0))
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v12);
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t v18 = *(void *)(a2 + 8);
  }
  if ((v19 & 0x4000) != 0)
  {
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v11);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v151 = v27;
    *((void *)&v151 + 1) = v28;
    if (*(void *)(a1 + 40))
    {
      uint64_t v29 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151);
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v29);
      if (**(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v30) == *(void *)(a1 + 40))
      {
        if (sub_216E15820(v132, (uint64_t *)(a1 + 40), v25, a3, a4))
        {
LABEL_132:
          unsigned __int8 v137 = 1;
LABEL_133:
          unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v24) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
LABEL_191:
          unint64_t v128 = v138;
          unint64_t v129 = atomic_load((unint64_t *)(v24 + 144));
          BOOL v130 = v128 >= v129
              || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138, (atomic_ullong *)v24);
          goto LABEL_195;
        }
        if (v137) {
          goto LABEL_133;
        }
      }
    }
    if (!sub_216E15820(v132, (uint64_t *)(a1 + 32), v25, a3, a4)) {
      goto LABEL_193;
    }
    goto LABEL_132;
  }
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20) {
    uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    int v103 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v103, 1);
    if (v152 == v153) {
      goto LABEL_188;
    }
    while (1)
    {
      uint64_t v146 = 0;
      int v104 = (void *)sub_216AA5ECC((uint64_t *)v154);
      long long v157 = v152;
      __int16 v105 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
      long long v106 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v106) {
        long long v106 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v157 + 1) = &v146;
      *(void *)&long long v158 = &stru_26C74C2C0;
      WORD4(v158) = 0;
      *(void *)&long long v157 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v104, v105, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v106 + 448), (uint64_t (***)(void, uint64_t))&v157);
      uint64_t v108 = v146;
      BOOL v109 = HasField && BYTE8(v158) == 0;
      if (v109 && v146 != 0)
      {
        uint64_t v111 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v111) {
          uint64_t v111 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v108 = v146;
        if ((v146 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v111 & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL v112 = (uint64_t *)v154;
          long long v157 = v152;
          unint64_t v113 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
          uint64_t v114 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v114) {
            uint64_t v114 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v157 = 0;
          if (sub_216E15820(v132, v112, v113, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v114 + 448), (uint64_t *)&v157))unsigned __int8 v137 = 1; {
          if ((v157 & 7) != 0)
          }
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          uint64_t v108 = v146;
          if (v137) {
            goto LABEL_156;
          }
        }
      }
      if ((v108 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151);
      if (v152 == v153) {
        goto LABEL_188;
      }
    }
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21) {
    uint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v21 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22) {
      uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      long long v116 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v116, 1);
      *(void *)&long long v157 = 0;
      int v117 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v117) {
        int v117 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v146 = 0;
      sub_216E25D44(v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v157, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v117 + 208), &v146, a5, (uint64_t)&v151, v132);
    }
    else
    {
      int v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23) {
        int v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v23 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      __int16 v120 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v120, 1);
      *(void *)&long long v157 = 0;
      int v121 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v121) {
        int v121 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v146 = 0;
      sub_216E25D44(v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v157, v121, &v146, a5, (uint64_t)&v151, v132);
    }
    if ((v146 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v108 = v157;
LABEL_156:
    if ((v108 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_188;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16))
    || (*(unsigned char *)(v18 + 57) & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16)))
  {
LABEL_129:
    unint64_t v115 = v132[0];
    if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)v132[0][2][1] & 0x7FFFFFFFFFFFFFFFLL)))
    {
      goto LABEL_186;
    }
    *(_DWORD *)v115[1] = 0;
    goto LABEL_187;
  }
  int v118 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v18);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151, v118, 1);
  if ((void)v152 == (void)v153)
  {
    int v119 = 1;
    if (*((void *)&v152 + 1) == *((void *)&v153 + 1))
    {
LABEL_146:
      unint64_t v115 = v132[0];
      if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)v132[0][2][1] & 0x7FFFFFFFFFFFFFFFLL)))
      {
        goto LABEL_186;
      }
      *(_DWORD *)v115[1] = v119;
      goto LABEL_187;
    }
  }
  int v119 = 1;
  while (1)
  {
    LODWORD(v146) = 1;
    uint64_t v122 = (void *)sub_216AA5ECC((uint64_t *)v154);
    long long v157 = v152;
    int v123 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
    uint64_t v124 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v124) {
      uint64_t v124 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v157 + 1) = &v146;
    *(void *)&long long v158 = &stru_26C758108;
    WORD4(v158) = 0;
    *(void *)&long long v157 = &unk_26C76A080;
    int v125 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v122, v123, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v124 + 312), (uint64_t (***)(void, uint64_t))&v157);
    int v126 = BYTE8(v158) ? 0 : v125;
    if (v126 == 1 && v146 != 1) {
      break;
    }
LABEL_183:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v151);
    if (v152 == v153) {
      goto LABEL_146;
    }
  }
  if (!v146) {
    goto LABEL_129;
  }
  long long v157 = v152;
  if ((void)v152 && *((void *)&v152 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157))
    {
      *(void *)&long long v157 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v157);
      *((void *)&v157 + 1) = v127;
      if (!(void)v157 || v127 == -1) {
        goto LABEL_185;
      }
    }
    int v119 = 2;
    goto LABEL_183;
  }
LABEL_185:
  unint64_t v115 = v132[0];
  if (!strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)v132[0][2][1] & 0x7FFFFFFFFFFFFFFFLL)))*(_DWORD *)v115[1] = 2; {
  else
  }
LABEL_186:
    *((unsigned char *)v115 + 25) = 1;
LABEL_187:
  unsigned __int8 v137 = 1;
LABEL_188:
  if (v137)
  {
    unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v24) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_191;
  }
LABEL_193:
  BOOL v130 = 0;
LABEL_195:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v138);
  if ((v136 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v136 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v135);
  sub_21697C414(&v134);
  if (v133) {
    sub_216D16E0C(v133);
  }
  return v130;
}

void sub_216E02790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v17 = *(void *)(v15 - 112);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a15);
  sub_216E02968((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216E02968(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<std::map<double,pxrInternal__aapl__pxrReserved__::VtValue>>(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t **a6)
{
  if (*(_DWORD *)a2 == 3)
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v12) {
      uint64_t v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 54) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B7B4(a2, (uint64_t)&v158);
      uint64_t v27 = sub_216E0043C((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v158, a6);
      if ((BYTE8(v159) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v159 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v159 + 1);
      sub_21697C414(&v159);
      uint64_t v28 = (atomic_ullong *)*((void *)&v158 + 1);
      if (*((void *)&v158 + 1)) {
        goto LABEL_199;
      }
      return v27;
    }
  }
  v143[1] = a6;
  v143[2] = &stru_26C755220;
  __int16 v144 = 0;
  v143[0] = &unk_26C76A0B8;
  sub_216E0E6E8((uint64_t)v137, (uint64_t)v143, a2);
  int v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v145);
  int v15 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v15 == 3)
    {
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v16 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v158);
        uint64_t v37 = *((void *)&v158 + 1);
        if (!*((void *)&v158 + 1) || (*(unsigned char *)(*((void *)&v158 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v158 + 1), v36);
        }
        BOOL v38 = *(atomic_ullong **)(v37 + 24);
        uint64_t explicit = atomic_load_explicit(v38 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v38);
        }
        int v40 = sub_216D563F8(&v158);
        *(void *)&long long v164 = 0;
        unsigned int v41 = sub_216E156AC(explicit, v40, a3, &v164, v137[0]);
        unsigned __int8 v142 = v41;
        if ((v164 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v41 = v142;
        }
        if (!v41)
        {
          *(void *)&long long v164 = 0;
          sub_216E26F80((uint64_t)&v158, a3, (uint64_t *)&v164, a5, (uint64_t)v137);
          if ((v164 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v159) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v159 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v159 + 1);
        sub_21697C414(&v159);
        int v42 = (atomic_ullong *)*((void *)&v158 + 1);
        if (!*((void *)&v158 + 1))
        {
LABEL_164:
          if (v142)
          {
            unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v26) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_192;
          }
          goto LABEL_194;
        }
LABEL_163:
        sub_216D16E0C(v42);
        goto LABEL_164;
      }
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v17) {
        uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v146);
        unsigned int v44 = v147;
        if (!v147 || (*((unsigned char *)v147 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v147, v43);
        }
        int v45 = (atomic_ullong *)*((void *)v44 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v45 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v45);
        }
        unint64_t v47 = sub_216D563F8(&v146);
        uint64_t v48 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v48) {
          uint64_t v48 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v158 = 0;
        unsigned int v49 = sub_216E156AC(PrimDefinition, v47, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v48 + 464), &v158, v137[0]);
        unsigned __int8 v142 = v49;
        if ((v158 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v49 = v142;
        }
        if (!v49)
        {
          unint64_t v50 = sub_216D563F8(&v146);
          sub_216D16CFC((uint64_t)&v154, (uint64_t *)&v147, &v148);
          uint64_t v52 = (uint64_t *)sub_216D240F8((uint64_t)&v154, v51);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v52, 6u, (uint64_t *)&v164);
          long long v162 = v164;
          long long v163 = v165;
          long long v158 = v165;
          long long v159 = v165;
          long long v160 = v164;
          long long v161 = v164;
          if ((v157 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v156);
          sub_21697C414(&v155);
          if (*((void *)&v154 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v154 + 1));
          }
          if (v159 != v161)
          {
            while (1)
            {
              uint64_t v55 = sub_216DFFC94(&v158, v53, v54);
              uint64_t v56 = v55[3] - 1;
              *(void *)&long long v164 = v55[2];
              *((void *)&v164 + 1) = v56;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164) & 1) == 0)
              {
                uint64_t v59 = sub_216DFFC94(&v158, v57, v58);
                uint64_t v60 = v59[3] - 1;
                *(void *)&long long v154 = v59[2];
                *((void *)&v154 + 1) = v60;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154)) {
                  break;
                }
              }
LABEL_89:
              sub_216DFFD8C(&v158);
              if (v159 == v161) {
                goto LABEL_160;
              }
            }
            long long v63 = sub_216DFFC94(&v158, v61, v62);
            uint64_t v64 = v63[3] - 1;
            *(void *)&long long v164 = v63[2];
            *((void *)&v164 + 1) = v64;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v50, &v152);
            uint64_t v68 = sub_216DFFC94(&v158, v66, v67);
            uint64_t v69 = v68[3] - 1;
            *(void *)&long long v154 = v68[2];
            *((void *)&v154 + 1) = v69;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
            uint64_t v71 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v71);
            *(void *)&long long v164 = Layers[1];
            *((void *)&v164 + 1) = v164;
            *(void *)&long long v165 = *Layers;
            *((void *)&v165 + 1) = v165;
            while (1)
            {
              if (*((void *)&v164 + 1) == *((void *)&v165 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v153);
                sub_21697C414(&v152);
                goto LABEL_89;
              }
              *(void *)&long long v154 = sub_216E15794(&v158, v73, v74);
              *((void *)&v154 + 1) = v75;
              uint64_t v77 = (uint64_t *)sub_216BEF334((uint64_t)&v164, v75, v76);
              char v78 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v78) {
                char v78 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v151 = 0;
              sub_216E28760((uint64_t)v137, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154, v77, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v152, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v78 + 464), &v151);
              if ((v151 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (v142) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v164);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v153);
            sub_21697C414(&v152);
          }
        }
LABEL_160:
        if ((v150 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_162:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
        sub_21697C414(&v148);
        int v42 = (atomic_ullong *)v147;
        if (!v147) {
          goto LABEL_164;
        }
        goto LABEL_163;
      }
    }
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v18) {
      uint64_t v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v146);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v146, (uint64_t)&v158);
      uint64_t v19 = *((void *)&v158 + 1);
      if ((v158 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v19)
      {
        LOBYTE(v158) = 0;
        sub_216E158B4((uint64_t)v137[0], &v158);
        unsigned __int8 v142 = 1;
      }
      else
      {
        BOOL v79 = sub_216D563F8(&v146);
        sub_216D16CFC((uint64_t)&v154, (uint64_t *)&v147, &v148);
        uint64_t v81 = (uint64_t *)sub_216D240F8((uint64_t)&v154, v80);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v81, 6u, (uint64_t *)&v164);
        long long v162 = v164;
        long long v163 = v165;
        long long v158 = v165;
        long long v159 = v165;
        long long v160 = v164;
        long long v161 = v164;
        if ((v157 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v156);
        sub_21697C414(&v155);
        if (*((void *)&v154 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v154 + 1));
        }
        if (v159 != v161)
        {
          while (1)
          {
            uint64_t v84 = sub_216DFFC94(&v158, v82, v83);
            uint64_t v85 = v84[3] - 1;
            *(void *)&long long v164 = v84[2];
            *((void *)&v164 + 1) = v85;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164) & 1) == 0)
            {
              uint64_t v88 = sub_216DFFC94(&v158, v86, v87);
              uint64_t v89 = v88[3] - 1;
              *(void *)&long long v154 = v88[2];
              *((void *)&v154 + 1) = v89;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154)) {
                break;
              }
            }
LABEL_107:
            sub_216DFFD8C(&v158);
            if (v159 == v161) {
              goto LABEL_138;
            }
          }
          size_t v92 = sub_216DFFC94(&v158, v90, v91);
          uint64_t v93 = v92[3] - 1;
          *(void *)&long long v164 = v92[2];
          *((void *)&v164 + 1) = v93;
          size_t v94 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v94, v79, &v152);
          uint64_t v97 = sub_216DFFC94(&v158, v95, v96);
          uint64_t v98 = v97[3] - 1;
          *(void *)&long long v154 = v97[2];
          *((void *)&v154 + 1) = v98;
          uint64_t v99 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154);
          uint64_t v100 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v99);
          long long v101 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v100);
          *(void *)&long long v164 = v101[1];
          *((void *)&v164 + 1) = v164;
          *(void *)&long long v165 = *v101;
          *((void *)&v165 + 1) = v165;
          while (1)
          {
            if (*((void *)&v164 + 1) == *((void *)&v165 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v153);
              sub_21697C414(&v152);
              goto LABEL_107;
            }
            *(void *)&long long v154 = sub_216E15794(&v158, v102, v103);
            *((void *)&v154 + 1) = v104;
            long long v106 = (uint64_t *)sub_216BEF334((uint64_t)&v164, v104, v105);
            uint64_t v107 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v107) {
              uint64_t v107 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v151 = 0;
            sub_216E28760((uint64_t)v137, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154, v106, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v152, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v107 + 64), &v151);
            if ((v151 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v142) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v164);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v153);
          sub_21697C414(&v152);
        }
      }
LABEL_138:
      if ((v150 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_162;
    }
LABEL_37:
    if (sub_216E26F80(a2, a3, a4, a5, (uint64_t)v137))
    {
      unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v26) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_192;
    }
    goto LABEL_194;
  }
  if (v15 != 1) {
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)(a2 + 8);
  if (!v20 || (uint64_t v21 = *(void *)(v20 + 56), (v21 & 0x800) != 0))
  {
    int v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v14);
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t v20 = *(void *)(a2 + 8);
  }
  if ((v21 & 0x4000) != 0)
  {
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v13);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v158 = v31;
    *((void *)&v158 + 1) = v32;
    if (*(void *)(a1 + 40)
      && (uint64_t v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v158),
          __int16 v34 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v33),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v34) == *(void *)(a1 + 40)))
    {
      int v121 = sub_216E28760((uint64_t)v137, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v158, (uint64_t *)(a1 + 40), v29, a3, a4);
      if (v142)
      {
LABEL_135:
        unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v26) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
LABEL_192:
        unint64_t v134 = v145;
        unint64_t v135 = atomic_load((unint64_t *)(v26 + 144));
        uint64_t v27 = v134 >= v135
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v145, (atomic_ullong *)v26);
        goto LABEL_196;
      }
      int v35 = v121;
    }
    else
    {
      int v35 = 0;
    }
    if ((v35 | sub_216E28760((uint64_t)v137, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v158, (uint64_t *)(a1 + 32), v29, a3, a4)) != 1)goto LABEL_194; {
    goto LABEL_135;
    }
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v108 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v158, v108, 1);
    if (v159 == v160) {
      goto LABEL_189;
    }
    while (1)
    {
      uint64_t v146 = 0;
      BOOL v109 = (void *)sub_216AA5ECC((uint64_t *)v161);
      long long v164 = v159;
      __int16 v110 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164);
      uint64_t v111 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v111) {
        uint64_t v111 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v164 + 1) = &v146;
      *(void *)&long long v165 = &stru_26C74C2C0;
      WORD4(v165) = 0;
      *(void *)&long long v164 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v109, v110, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v111 + 448), (uint64_t (***)(void, uint64_t))&v164);
      uint64_t v113 = v146;
      BOOL v114 = HasField && BYTE8(v165) == 0;
      if (v114 && v146 != 0)
      {
        long long v116 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v116) {
          long long v116 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v113 = v146;
        if ((v146 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v116 & 0xFFFFFFFFFFFFFFF8))
        {
          long long v154 = v159;
          int v117 = (uint64_t *)v161;
          long long v164 = v159;
          int v118 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164);
          int v119 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v119) {
            int v119 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v164 = 0;
          sub_216E28760((uint64_t)v137, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v154, v117, v118, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v119 + 448), (uint64_t *)&v164);
          if ((v164 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v113 = v146;
          if (v142) {
            goto LABEL_156;
          }
        }
      }
      if ((v113 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v158);
      if (v159 == v160) {
        goto LABEL_189;
      }
    }
  }
  int v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    int v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      unint64_t v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v122 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v158, v122, 1);
      *(void *)&long long v164 = 0;
      int v123 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v123) {
        int v123 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v154 = 0;
      sub_216E28838(v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v164, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v123 + 208), (uint64_t *)&v154, a5, (uint64_t)&v158, (uint64_t)v137);
    }
    else
    {
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        uint64_t v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_37;
      }
      int v126 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v158, v126, 1);
      *(void *)&long long v164 = 0;
      uint64_t v127 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v127) {
        uint64_t v127 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *(void *)&long long v154 = 0;
      sub_216E28838(v20, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v164, v127, (uint64_t *)&v154, a5, (uint64_t)&v158, (uint64_t)v137);
    }
    if ((v154 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v113 = v164;
LABEL_156:
    if ((v113 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_189;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v20 + 16))
    || (*(unsigned char *)(v20 + 57) & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v20 + 16)))
  {
LABEL_132:
    __int16 v120 = v137[0];
    if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)v137[0][2][1] & 0x7FFFFFFFFFFFFFFFLL)))
    {
      goto LABEL_187;
    }
    *(_DWORD *)v120[1] = 0;
    goto LABEL_188;
  }
  uint64_t v124 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v20);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v158, v124, 1);
  if ((void)v159 == (void)v160)
  {
    int v125 = 1;
    if (*((void *)&v159 + 1) == *((void *)&v160 + 1))
    {
LABEL_148:
      __int16 v120 = v137[0];
      if (strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)v137[0][2][1] & 0x7FFFFFFFFFFFFFFFLL)))
      {
        goto LABEL_187;
      }
      *(_DWORD *)v120[1] = v125;
      goto LABEL_188;
    }
  }
  int v125 = 1;
  while (1)
  {
    LODWORD(v154) = 1;
    unint64_t v128 = (void *)sub_216AA5ECC((uint64_t *)v161);
    long long v164 = v159;
    unint64_t v129 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164);
    BOOL v130 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v130) {
      BOOL v130 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v164 + 1) = &v154;
    *(void *)&long long v165 = &stru_26C758108;
    WORD4(v165) = 0;
    *(void *)&long long v164 = &unk_26C76A080;
    int v131 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v128, v129, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v130 + 312), (uint64_t (***)(void, uint64_t))&v164);
    int v132 = BYTE8(v165) ? 0 : v131;
    if (v132 == 1 && v154 != 1) {
      break;
    }
LABEL_184:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v158);
    if (v159 == v160) {
      goto LABEL_148;
    }
  }
  if (!v154) {
    goto LABEL_132;
  }
  long long v164 = v159;
  if ((void)v159 && *((void *)&v159 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164))
    {
      *(void *)&long long v164 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v164);
      *((void *)&v164 + 1) = v133;
      if (!(void)v164 || v133 == -1) {
        goto LABEL_186;
      }
    }
    int v125 = 2;
    goto LABEL_184;
  }
LABEL_186:
  __int16 v120 = v137[0];
  if (!strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)v137[0][2][1] & 0x7FFFFFFFFFFFFFFFLL)))*(_DWORD *)v120[1] = 2; {
  else
  }
LABEL_187:
    *((unsigned char *)v120 + 25) = 1;
LABEL_188:
  unsigned __int8 v142 = 1;
LABEL_189:
  if (v142)
  {
    unint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v26) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_192;
  }
LABEL_194:
  uint64_t v27 = 0;
LABEL_196:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v145);
  if ((v141 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v140);
  sub_21697C414(&v139);
  uint64_t v28 = v138;
  if (v138) {
LABEL_199:
  }
    sub_216D16E0C(v28);
  return v27;
}

void sub_216E039E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v4 = *(void *)(v2 - 112);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va1);
  sub_216E03BD4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E03BD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_HasMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdObject *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  v128[0] = 0;
  uint64_t v129 = 0;
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v130);
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v12 == 3)
    {
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v13) {
        uint64_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4((uint64_t)a2, (uint64_t)&v143);
        uint64_t v32 = *((void *)&v143 + 1);
        if (!*((void *)&v143 + 1) || (*(unsigned char *)(*((void *)&v143 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v143 + 1), v31);
        }
        uint64_t v33 = *(atomic_ullong **)(v32 + 24);
        uint64_t explicit = atomic_load_explicit(v33 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v33);
        }
        int v35 = sub_216D563F8(&v143);
        *(void *)&long long v149 = 0;
        sub_216E2973C((uint64_t)v128, explicit, v35, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v149);
        if ((v149 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v128[0])
        {
          *(void *)&long long v149 = 0;
          sub_216E29634((uint64_t)&v143, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v149, a5, v128);
          if ((v149 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v144) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v144 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v144 + 1);
        sub_21697C414(&v144);
        unsigned int v36 = (atomic_ullong *)*((void *)&v143 + 1);
        if (!*((void *)&v143 + 1)) {
          goto LABEL_155;
        }
        goto LABEL_154;
      }
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v14) {
        uint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4((uint64_t)a2, (uint64_t)&v131);
        BOOL v38 = v132;
        if (!v132 || (*((unsigned char *)v132 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v132, v37);
        }
        int v39 = (atomic_ullong *)*((void *)v38 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v39 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v39);
        }
        unsigned int v41 = sub_216D563F8(&v131);
        int v42 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v42) {
          int v42 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v143 = 0;
        sub_216E2973C((uint64_t)v128, PrimDefinition, v41, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v42 + 464), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v143);
        if ((v143 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v128[0])
        {
          int v43 = sub_216D563F8(&v131);
          sub_216D16CFC((uint64_t)&v138, (uint64_t *)&v132, &v133);
          int v45 = (uint64_t *)sub_216D240F8((uint64_t)&v138, v44);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v45, 6u, (uint64_t *)&v149);
          long long v147 = v149;
          long long v148 = v150;
          long long v143 = v150;
          long long v144 = v150;
          long long v145 = v149;
          long long v146 = v149;
          if ((v142 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v141);
          sub_21697C414(&v140);
          if (v139) {
            sub_216D16E0C(v139);
          }
          if (v144 != v146)
          {
            while (1)
            {
              uint64_t v48 = sub_216DFFC94(&v143, v46, v47);
              uint64_t v49 = v48[3] - 1;
              *(void *)&long long v149 = v48[2];
              *((void *)&v149 + 1) = v49;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149) & 1) == 0)
              {
                uint64_t v52 = sub_216DFFC94(&v143, v50, v51);
                uint64_t v53 = (atomic_ullong *)(v52[3] - 1);
                uint64_t v138 = v52[2];
                int v139 = v53;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v138)) {
                  break;
                }
              }
LABEL_81:
              sub_216DFFD8C(&v143);
              if (v144 == v146) {
                goto LABEL_151;
              }
            }
            uint64_t v56 = sub_216DFFC94(&v143, v54, v55);
            uint64_t v57 = v56[3] - 1;
            *(void *)&long long v149 = v56[2];
            *((void *)&v149 + 1) = v57;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v43, &v136);
            uint64_t v61 = sub_216DFFC94(&v143, v59, v60);
            uint64_t v62 = (atomic_ullong *)(v61[3] - 1);
            uint64_t v138 = v61[2];
            int v139 = v62;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v138);
            uint64_t v64 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v64);
            *(void *)&long long v149 = Layers[1];
            *((void *)&v149 + 1) = v149;
            *(void *)&long long v150 = *Layers;
            *((void *)&v150 + 1) = v150;
            while (1)
            {
              if (*((void *)&v149 + 1) == *((void *)&v150 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v137);
                sub_21697C414(&v136);
                goto LABEL_81;
              }
              sub_216E15794(&v143, v66, v67);
              uint64_t v70 = (uint64_t *)sub_216BEF334((uint64_t)&v149, v68, v69);
              uint64_t v71 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v71) {
                uint64_t v71 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v138 = 0;
              sub_216E297B4((uint64_t)v128, v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v136, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v71 + 464), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v138);
              if ((v138 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (v128[0]) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v149);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v137);
            sub_21697C414(&v136);
          }
        }
LABEL_151:
        if ((v135 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v135 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_153:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v134);
        sub_21697C414(&v133);
        unsigned int v36 = (atomic_ullong *)v132;
        if (!v132)
        {
LABEL_155:
          if (!v128[0]) {
            goto LABEL_160;
          }
          unint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v23) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
          goto LABEL_158;
        }
LABEL_154:
        sub_216D16E0C(v36);
        goto LABEL_155;
      }
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v15) {
      uint64_t v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8((uint64_t)a2, (uint64_t)&v131);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v131, (uint64_t)&v143);
      uint64_t v16 = *((void *)&v143 + 1);
      if ((v143 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v16)
      {
        v128[0] = 1;
      }
      else
      {
        uint64_t v72 = sub_216D563F8(&v131);
        sub_216D16CFC((uint64_t)&v138, (uint64_t *)&v132, &v133);
        uint64_t v74 = (uint64_t *)sub_216D240F8((uint64_t)&v138, v73);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v74, 6u, (uint64_t *)&v149);
        long long v147 = v149;
        long long v148 = v150;
        long long v143 = v150;
        long long v144 = v150;
        long long v145 = v149;
        long long v146 = v149;
        if ((v142 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v141);
        sub_21697C414(&v140);
        if (v139) {
          sub_216D16E0C(v139);
        }
        if (v144 != v146)
        {
          while (1)
          {
            uint64_t v77 = sub_216DFFC94(&v143, v75, v76);
            uint64_t v78 = v77[3] - 1;
            *(void *)&long long v149 = v77[2];
            *((void *)&v149 + 1) = v78;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149) & 1) == 0)
            {
              uint64_t v81 = sub_216DFFC94(&v143, v79, v80);
              uint64_t v82 = (atomic_ullong *)(v81[3] - 1);
              uint64_t v138 = v81[2];
              int v139 = v82;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v138)) {
                break;
              }
            }
LABEL_99:
            sub_216DFFD8C(&v143);
            if (v144 == v146) {
              goto LABEL_132;
            }
          }
          uint64_t v85 = sub_216DFFC94(&v143, v83, v84);
          uint64_t v86 = v85[3] - 1;
          *(void *)&long long v149 = v85[2];
          *((void *)&v149 + 1) = v86;
          uint64_t v87 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v87, v72, &v136);
          uint64_t v90 = sub_216DFFC94(&v143, v88, v89);
          uint64_t v91 = (atomic_ullong *)(v90[3] - 1);
          uint64_t v138 = v90[2];
          int v139 = v91;
          size_t v92 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v138);
          uint64_t v93 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v92);
          size_t v94 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v93);
          *(void *)&long long v149 = v94[1];
          *((void *)&v149 + 1) = v149;
          *(void *)&long long v150 = *v94;
          *((void *)&v150 + 1) = v150;
          while (1)
          {
            if (*((void *)&v149 + 1) == *((void *)&v150 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v137);
              sub_21697C414(&v136);
              goto LABEL_99;
            }
            sub_216E15794(&v143, v95, v96);
            uint64_t v99 = (uint64_t *)sub_216BEF334((uint64_t)&v149, v97, v98);
            uint64_t v100 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v100) {
              uint64_t v100 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v138 = 0;
            sub_216E297B4((uint64_t)v128, v99, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v136, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v100 + 64), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v138);
            if ((v138 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v128[0]) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v149);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v137);
          sub_21697C414(&v136);
        }
      }
LABEL_132:
      if ((v135 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v135 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_153;
    }
    goto LABEL_33;
  }
  if (v12 == 1)
  {
    uint64_t v17 = *((void *)a2 + 1);
    if (!v17 || (uint64_t v18 = *(void *)(v17 + 56), (v18 & 0x800) != 0))
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), v11);
      uint64_t v18 = *(void *)(v17 + 56);
      uint64_t v17 = *((void *)a2 + 1);
    }
    if ((v18 & 0x4000) == 0)
    {
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19) {
        uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v17);
        pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v143, PrimIndex, 1);
        if (v144 == v145) {
          goto LABEL_146;
        }
        while (1)
        {
          uint64_t v138 = 0;
          uint64_t v102 = (void *)sub_216AA5ECC((uint64_t *)v146);
          long long v149 = v144;
          int v103 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149);
          uint64_t v104 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v104) {
            uint64_t v104 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *((void *)&v149 + 1) = &v138;
          *(void *)&long long v150 = &stru_26C74C2C0;
          WORD4(v150) = 0;
          *(void *)&long long v149 = &unk_26C758B08;
          int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v102, v103, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v104 + 448), (uint64_t (***)(void, uint64_t))&v149);
          uint64_t v106 = v138;
          BOOL v107 = HasField && BYTE8(v150) == 0;
          if (v107 && v138 != 0)
          {
            BOOL v109 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
            if (!v109) {
              BOOL v109 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
            }
            uint64_t v106 = v138;
            if ((v138 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v109 & 0xFFFFFFFFFFFFFFF8))
            {
              __int16 v110 = (uint64_t *)v146;
              long long v149 = v144;
              uint64_t v111 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149);
              BOOL v112 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v112) {
                BOOL v112 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              *(void *)&long long v149 = 0;
              sub_216E297B4((uint64_t)v128, v110, v111, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v112 + 448), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v149);
              if ((v149 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v106 = v138;
              if (v128[0]) {
                break;
              }
            }
          }
          if ((v106 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v143);
          if (v144 == v145) {
            goto LABEL_146;
          }
        }
      }
      else
      {
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v20) {
          uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 39) & 0xFFFFFFFFFFFFFFF8))
        {
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 + 16))
            && ((*(unsigned char *)(v17 + 57) & 0x10) == 0
             || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 + 16))))
          {
            uint64_t v113 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v17);
            pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v143, v113, 1);
            while (v144 != v145)
            {
              LODWORD(v138) = 1;
              uint64_t v122 = (void *)sub_216AA5ECC((uint64_t *)v146);
              long long v149 = v144;
              int v123 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149);
              uint64_t v124 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v124) {
                uint64_t v124 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              *((void *)&v149 + 1) = &v138;
              *(void *)&long long v150 = &stru_26C758108;
              WORD4(v150) = 0;
              *(void *)&long long v149 = &unk_26C76A080;
              int v125 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v122, v123, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v124 + 312), (uint64_t (***)(void, uint64_t))&v149);
              if (BYTE8(v150)) {
                int v126 = 0;
              }
              else {
                int v126 = v125;
              }
              if (v126 == 1 && v138 != 1)
              {
                if (!v138) {
                  break;
                }
                long long v149 = v144;
                if (!(void)v144 || *((void *)&v144 + 1) == -1) {
                  break;
                }
                while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149) != 1
                     || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149))
                {
                  *(void *)&long long v149 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v149);
                  *((void *)&v149 + 1) = v127;
                  if (!(void)v149 || v127 == -1) {
                    goto LABEL_127;
                  }
                }
              }
              pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v143);
            }
          }
LABEL_127:
          v128[0] = 1;
LABEL_147:
          unint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v23) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
          goto LABEL_158;
        }
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v21) {
          uint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 26) & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v115 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v17);
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v143, v115, 1);
          *(void *)&long long v149 = 0;
          long long v116 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v116) {
            long long v116 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          uint64_t v138 = 0;
          sub_216E29878(v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v149, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v116 + 208), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v138, a5, (uint64_t)&v143, v128);
        }
        else
        {
          uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v22) {
            uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v22 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_33;
          }
          int v117 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v17);
          pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v143, v117, 1);
          *(void *)&long long v149 = 0;
          int v118 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v118) {
            int v118 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          uint64_t v138 = 0;
          sub_216E29878(v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v149, v118, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v138, a5, (uint64_t)&v143, v128);
        }
        if ((v138 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v106 = v149;
      }
      if ((v106 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_146:
      if (!v128[0]) {
        goto LABEL_160;
      }
      goto LABEL_147;
    }
    unint64_t v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10);
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v17);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(v25);
    *(void *)&long long v143 = v26;
    *((void *)&v143 + 1) = v27;
    if (*((void *)this + 5)
      && (uint64_t v28 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v143),
          uint64_t v29 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v28),
          **(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v29) == *((void *)this + 5)))
    {
      int v114 = sub_216E297B4((uint64_t)v128, (uint64_t *)this + 5, v24, a3, a4);
      if (v128[0])
      {
LABEL_129:
        unint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v23) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        goto LABEL_158;
      }
      int v30 = v114;
    }
    else
    {
      int v30 = 0;
    }
    if ((v30 | sub_216E297B4((uint64_t)v128, (uint64_t *)this + 4, v24, a3, a4)) != 1) {
      goto LABEL_160;
    }
    goto LABEL_129;
  }
LABEL_33:
  if (!sub_216E29634((uint64_t)a2, a3, a4, a5, v128)) {
    goto LABEL_160;
  }
  unint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
LABEL_158:
  unint64_t v119 = v130;
  unint64_t v120 = atomic_load((unint64_t *)(v23 + 144));
  if (v119 < v120) {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v130, (atomic_ullong *)v23);
  }
LABEL_160:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v130);
  return v128[0];
}

void sub_216E04A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = *(void *)(v3 - 112);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_ListMetadataFields(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdObject *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)a2 + 1);
  if (*(int *)a2 < 2)
  {
    uint64_t v10 = this;
    if (!v7 || (uint64_t v11 = *((void *)v7 + 7), (v11 & 0x800) != 0))
    {
      this = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), a2);
      uint64_t v11 = *((void *)v7 + 7);
    }
    if ((v11 & 0x4000) != 0)
    {
      uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
      PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v7);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
      v48[0] = v16;
      v48[1] = v17;
      if (*((void *)v10 + 5))
      {
        uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v48);
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
        if (**(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v19) == *((void *)v10 + 5))
        {
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_216AA5ECC((uint64_t *)v10 + 5);
          pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v20, v14, (uint64_t)&v43);
          uint64_t v21 = (uint64_t *)v43;
          uint64_t v22 = (uint64_t *)v44;
          if ((const char *)v43 != v44)
          {
            do
            {
              if ((sub_216E053B8((const pxrInternal__aapl__pxrReserved__::TfToken *)v21) & 1) == 0)
              {
                unint64_t v23 = *(uint64_t **)(a4 + 8);
                if ((unint64_t)v23 >= *(void *)(a4 + 16))
                {
                  uint64_t v25 = sub_216973984((char **)a4, v21);
                }
                else
                {
                  uint64_t v24 = *v21;
                  *unint64_t v23 = *v21;
                  if ((v24 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    *v23 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  uint64_t v25 = (char *)(v23 + 1);
                }
                *(void *)(a4 + 8) = v25;
              }
              ++v21;
            }
            while (v21 != v22);
          }
          uint64_t v49 = (void **)&v43;
          sub_216889A04(&v49);
        }
      }
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_216AA5ECC((uint64_t *)v10 + 4);
      pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v26, v14, (uint64_t)&v43);
      uint64_t v27 = (uint64_t *)v43;
      uint64_t v28 = (uint64_t *)v44;
      if ((const char *)v43 != v44)
      {
        do
        {
          if ((sub_216E053B8((const pxrInternal__aapl__pxrReserved__::TfToken *)v27) & 1) == 0)
          {
            uint64_t v29 = *(uint64_t **)(a4 + 8);
            if ((unint64_t)v29 >= *(void *)(a4 + 16))
            {
              uint64_t v31 = sub_216973984((char **)a4, v27);
            }
            else
            {
              uint64_t v30 = *v27;
              *uint64_t v29 = *v27;
              if ((v30 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *v29 &= 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v31 = (char *)(v29 + 1);
            }
            *(void *)(a4 + 8) = v31;
          }
          ++v27;
        }
        while (v27 != v28);
      }
      uint64_t v49 = (void **)&v43;
      sub_216889A04(&v49);
      unsigned int v9 = 7;
      goto LABEL_37;
    }
    unint64_t v43 = 0;
    unsigned int v9 = sub_216E05128(v7, (atomic_uint **)&v43, a3, a4);
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v8 = (atomic_uint **)sub_216D563F8(a2);
    unsigned int v9 = sub_216E05128(v7, v8, a3, a4);
  }
  if (v9 >= 0xC)
  {
    unint64_t v43 = (unint64_t)"usd/stage.cpp";
    unsigned int v44 = "_ListMetadataFields";
    uint64_t v45 = 7685;
    uint64_t v46 = "TfTokenVector pxrInternal__aapl__pxrReserved__::UsdStage::_ListMetadataFields(const UsdObject &, BOOL) const";
    char v47 = 0;
    unint64_t v12 = *(void *)sub_216D563F8(a2) & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      uint64_t v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0) {
        uint64_t v13 = *(const char **)v13;
      }
    }
    else
    {
      uint64_t v13 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 1, (pxrInternal__aapl__pxrReserved__ *)"Illegal SpecType int(specType)==<%i> for UsdObject: %s.", v9, v13);
    return;
  }
LABEL_37:
  unint64_t v32 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v32) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if (*(unsigned char *)(v32 + 72 * v9 + 120))
  {
    unint64_t v33 = v32 + 72 * v9;
    __int16 v34 = *(uint64_t **)(v33 + 96);
    for (uint64_t i = *(uint64_t **)(v33 + 104); v34 != i; ++v34)
    {
      if ((sub_216E053B8((const pxrInternal__aapl__pxrReserved__::TfToken *)v34) & 1) == 0)
      {
        unsigned int v36 = *(uint64_t **)(a4 + 8);
        if ((unint64_t)v36 >= *(void *)(a4 + 16))
        {
          BOOL v38 = sub_216973984((char **)a4, v34);
        }
        else
        {
          uint64_t v37 = *v34;
          uint64_t *v36 = *v34;
          if ((v37 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v36 &= 0xFFFFFFFFFFFFFFF8;
          }
          BOOL v38 = (char *)(v36 + 1);
        }
        *(void *)(a4 + 8) = v38;
      }
    }
  }
  int v39 = *(char **)(a4 + 8);
  unint64_t v40 = 126 - 2 * __clz((uint64_t)&v39[-*(void *)a4] >> 3);
  if (v39 == *(char **)a4) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  sub_21698BD44(*(pxrInternal__aapl__pxrReserved__::TfToken **)a4, v39, (uint64_t)&v43, v41, 1);
  int v42 = sub_216D5FD4C(*(uint64_t **)a4, *(uint64_t **)(a4 + 8));
  sub_216AD0DE4(a4, v42, *(void **)(a4 + 8));
}

void sub_216E050C0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  sub_216889A04((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_216E05128(pxrInternal__aapl__pxrReserved__::Usd_PrimData *a1, atomic_uint **a2, char a3, uint64_t a4)
{
  uint64_t v7 = (atomic_ullong *)*((void *)a1 + 3);
  uint64_t explicit = (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)atomic_load_explicit(v7 + 7, memory_order_acquire);
  if (!explicit) {
    uint64_t explicit = (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v7);
  }
  if (*a2) {
    uint64_t SpecType = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSpecType(explicit, a2);
  }
  else {
    uint64_t SpecType = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v32);
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(a1);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v25, PrimIndex, 1);
  for (BOOL i = 1;
        v26 != v28 || v27 != v29;
        BOOL i = pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v25))
  {
    if (i)
    {
      sub_216E0E77C((uint64_t)v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2, (int *)&v23);
      sub_21697DE94(&v31, (int *)&v23);
      sub_21697DEEC(&v32, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
    }
    uint64_t v13 = v30;
    if (!SpecType)
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v30);
      uint64_t SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_216AA5ECC(v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (uint64_t)&v23);
    uint64_t v17 = v23;
    uint64_t v16 = v24;
    while (v17 != v16)
    {
      if ((sub_216E053B8((const pxrInternal__aapl__pxrReserved__::TfToken *)v17) & 1) == 0)
      {
        uint64_t v18 = *(uint64_t **)(a4 + 8);
        if ((unint64_t)v18 >= *(void *)(a4 + 16))
        {
          uint64_t v20 = sub_216973984((char **)a4, v17);
        }
        else
        {
          uint64_t v19 = *v17;
          *uint64_t v18 = *v17;
          if ((v19 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v18 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v20 = (char *)(v18 + 1);
        }
        *(void *)(a4 + 8) = v20;
      }
      ++v17;
    }
    unint64_t v33 = (void **)&v23;
    sub_216889A04(&v33);
  }
  if (a3)
  {
    if (*a2) {
      pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListPropertyMetadataFields(explicit, a2, (uint64_t)&v23);
    }
    else {
      pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields(explicit, (uint64_t)&v23);
    }
    sub_216AE27E0((uint64_t *)a4, *(void **)(a4 + 8), v23, v24, v24 - v23);
    unint64_t v33 = (void **)&v23;
    sub_216889A04(&v33);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_21697C414(&v31);
  return SpecType;
}

void sub_216E0536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v11 - 88) = &a11;
  sub_216889A04((void ***)(v11 - 88));
  sub_21697B754((_DWORD *)(v11 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_216E053B8(const pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92068))
  {
    xmmword_267B92040 = 0u;
    *(_OWORD *)algn_267B92050 = 0u;
    dword_267B92060 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_216E0E7FC, &xmmword_267B92040, &dword_216758000);
    __cxa_guard_release(&qword_267B92068);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_267B92070, memory_order_acquire) != -1)
  {
    uint64_t v8 = &v6;
    uint64_t v7 = &v8;
    std::__call_once(&qword_267B92070, &v7, (void (__cdecl *)(void *))sub_216E0E800);
  }
  if (sub_2168CB1F4(&xmmword_267B92040, a1)) {
    return 1;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v3, a1);
  if (FieldDefinition
    && ((uint64_t v5 = FieldDefinition,
         (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsReadOnly(FieldDefinition) & 1) != 0)
     || (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::HoldsChildren(v5) & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetAllMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::UsdObject *a2, int a3, uint64_t **a4, char a5)
{
  void v21[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdStage::_ListMetadataFields(a1, a2, a3, (uint64_t)&v18);
  uint64_t v10 = v18;
  for (i = v19; v10 != i; uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v10 + 8))
  {
    v21[1] = 0;
    sub_216E005EC((uint64_t)v13, (uint64_t)v21, (uint64_t)a2, a5);
    unint64_t v20 = 0;
    sub_216E00690((uint64_t *)a1, (uint64_t)a2, v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, a3, (const pxrInternal__aapl__pxrReserved__::VtDictionary ***)v13);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v20 = (unint64_t)v10;
    unint64_t v12 = sub_216E1F808(a4, v10, (uint64_t)&unk_2174BFD90, (uint64_t **)&v20);
    sub_2168EC6DC(v12 + 5, v21);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
    sub_2168EE084((uint64_t)v21);
  }
  v13[0] = (void **)&v18;
  sub_216889A04(v13);
}

void sub_216E0565C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_AttrGetValueHelper<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_ResolveValue(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, uint64_t a3, double a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, a3, 1, 0, a4);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_AttrGetValueHelper<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::_ResolveValue(pxrInternal__aapl__pxrReserved__::UsdStage *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, double a4)
{
  sub_2169B49FC(this, (uint64_t)a2, (char *)this);
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *(void *)this;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPaths(a1, a2, v8, v9, 0, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_AttrGetValueHelper<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_ResolveValue(uint64_t a1, _DWORD *a2, double *a3, double a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, a3, 1, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_AttrGetValueHelper<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_ResolveValue(uint64_t a1, _DWORD *a2, double **this, double a4)
{
  sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)this, (uint64_t)a2, (char *)this);
  uint64_t v8 = this[4];
  uint64_t v9 = (uint64_t)*this;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedTimeCodes(a1, a2, v8, v9, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_AttrGetValueHelper<pxrInternal__aapl__pxrReserved__::SdfPathExpression>::_ResolveValue(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, a3, 1, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_AttrGetValueHelper<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>::_ResolveValue(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, double a4)
{
  sub_2169B8E9C(this, a2, (char *)this);
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = *(void *)this;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedPathExpressions(a1, a2, v8, v9, a4);
}

uint64_t sub_216E0581C(pxrInternal__aapl__pxrReserved__::UsdStage *this, pxrInternal__aapl__pxrReserved__::UsdObject *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, double a4)
{
  void v11[3] = *(uint64_t (***)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))MEMORY[0x263EF8340];
  v11[0] = (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))&unk_26C766AB0;
  v11[1] = (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))a2;
  void v11[2] = (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))a3;
  uint64_t v8 = sub_216E0EA58((uint64_t)this, a2, v11, a3, a4);
  char v9 = v8 ^ 1;
  if (!a3) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAttributeValue(this, a2, (uint64_t *)a3, a4);
  }
  return v8;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetPropertyStack(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__ **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  char v19 = 0;
  memset(v18, 0, sizeof(v18));
  double v20 = a4;
  uint64_t v7 = (atomic_ullong *)a2[1];
  if (!v7 || (atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed), atomic_ullong v8 = v7[7], (v8 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    atomic_ullong v8 = v7[7];
  }
  if ((v8 & 0x400) != 0)
  {
    unint64_t v12 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136);
    if ((v8 & 0x800) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    }
    ClipsForPriuint64_t m = pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2));
    int v15 = a2[1];
    if (!v15 || (*((unsigned char *)v15 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v13);
    }
    PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v15);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v21, PrimIndex, 0);
    uint64_t v17 = sub_216D563F8(a2);
    sub_216E2AB10((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v21, v17, (uint64_t)v18, &v20, (void **)ClipsForPrim);
  }
  else
  {
    char v9 = a2[1];
    if (!v9 || (*((unsigned char *)v9 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    }
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v9);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v21, v10, 1);
    uint64_t v11 = sub_216D563F8(a2);
    sub_216E2ADA0((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v21, v11, (uint64_t)v18);
  }
  sub_216D16E0C(v7);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_216E2B04C((char *)a3, *(atomic_uint ***)&v18[0], *((atomic_uint ***)&v18[0] + 1), (uint64_t)(*((void *)&v18[0] + 1) - *(void *)&v18[0]) >> 3);
  v21[0] = (void **)&v18[1] + 1;
  sub_216BDCF18(v21);
  v21[0] = (void **)v18;
  sub_216991094(v21);
}

void sub_216E05C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
}

void **sub_216E05C84(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_216BDCF18(&v3);
  uint64_t v3 = a1;
  sub_216991094(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetPropertyStackWithLayerOffsets(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__ **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  char v21 = 1;
  double v22 = a4;
  uint64_t v7 = (atomic_ullong *)a2[1];
  if (!v7 || (atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed), atomic_ullong v8 = v7[7], (v8 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    atomic_ullong v8 = v7[7];
  }
  if ((v8 & 0x400) != 0)
  {
    unint64_t v12 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136);
    if ((v8 & 0x800) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    }
    ClipsForPriuint64_t m = pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2));
    int v15 = a2[1];
    if (!v15 || (*((unsigned char *)v15 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v13);
    }
    PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v15);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v23, PrimIndex, 0);
    uint64_t v17 = sub_216D563F8(a2);
    sub_216E2AB10((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v23, v17, (uint64_t)&v18, &v22, (void **)ClipsForPrim);
  }
  else
  {
    char v9 = a2[1];
    if (!v9 || (*((unsigned char *)v9 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
    }
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v9);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v23, v10, 1);
    uint64_t v11 = sub_216D563F8(a2);
    sub_216E2ADA0((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v23, v11, (uint64_t)&v18);
  }
  sub_216D16E0C(v7);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_216E2B0E0((char *)a3, *((uint64_t *)&v19 + 1), v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *((void *)&v19 + 1)) >> 3));
  v23[0] = (void **)&v19 + 1;
  sub_216BDCF18(v23);
  v23[0] = (void **)&v18;
  sub_216991094(v23);
}

void sub_216E05F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimStack@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)this + 1);
  if (!v4 || (*((unsigned char *)v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v4);
  for (uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v14, PrimIndex, 1);
        v15 != v17 || v16 != v18;
        uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v14))
  {
    atomic_ullong v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v19);
    v20[0] = v15;
    v20[1] = v16;
    Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v20);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, Path, &v13);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v13) & 1) == 0)
    {
      uint64_t v10 = *(char **)(a3 + 8);
      if ((unint64_t)v10 >= *(void *)(a3 + 16))
      {
        unint64_t v12 = sub_216A8E01C((atomic_uint ***)a3, &v13);
      }
      else
      {
        uint64_t v11 = v13;
        *(void *)uint64_t v10 = v13;
        if (v11) {
          atomic_fetch_add(v11, 1u);
        }
        unint64_t v12 = v10 + 8;
      }
      *(void *)(a3 + 8) = v12;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v10, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  }
  return result;
}

void sub_216E060B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216991094((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimStackWithLayerOffsets@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((void *)this + 1);
  if (!v4 || (*((unsigned char *)v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v4);
  for (uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v14, PrimIndex, 1);
        (void)v15 != v16 || *((void *)&v15 + 1) != v17;
        uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v14))
  {
    atomic_ullong v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v18);
    long long v19 = v15;
    Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v19);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, Path, &v13);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v13) & 1) == 0)
    {
      long long v12 = v15;
      *(void *)&long long v19 = sub_216E06358((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12, v18);
      *((void *)&v19 + 1) = v11;
      sub_216E06200(a3, &v13, &v19);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v10, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  }
  return result;
}

void sub_216E061CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BDCF18((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E06200(uint64_t *a1, atomic_uint **a2, _OWORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v23 = v6;
    if (v15) {
      uint64_t v16 = (char *)sub_216782ED8(v6, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (atomic_uint **)&v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    char v21 = v17;
    double v22 = &v16[24 * v15];
    uint64_t v18 = *a2;
    *uint64_t v17 = *a2;
    if (v18)
    {
      atomic_fetch_add(v18, 1u);
      uint64_t v17 = v21;
    }
    *(_OWORD *)&v16[24 * v12 + 8] = *a3;
    char v21 = v17 + 3;
    sub_216C33658(a1, v20);
    uint64_t v11 = a1[1];
    sub_216C336E0((uint64_t)v20);
  }
  else
  {
    uint64_t v10 = *a2;
    *(void *)unint64_t v9 = *a2;
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    *(_OWORD *)(v9 + 8) = *a3;
    uint64_t v11 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v11;
  return v11 - 24;
}

void sub_216E06344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C336E0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216E06358(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, void *a2)
{
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a1);
  long long v11 = *(_OWORD *)((char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v5, v6) + 40);
  uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  unint64_t v8 = (void *)sub_216BBBFA8(LayerStack);
  LayerOffsetForLayer = (double *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v8, a2);
  if (LayerOffsetForLayer) {
    return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)&v11, LayerOffsetForLayer);
  }
  else {
    return *(double *)&v11;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfoWithResolveTarget(uint64_t a1, _DWORD *a2, const pxrInternal__aapl__pxrReserved__::UsdResolveTarget *a3, _DWORD *a4, void **a5)
{
  uint64_t v5 = a3;
  sub_216E2B17C(a1, a2, a4, a5, 0, &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo(pxrInternal__aapl__pxrReserved__::UsdStage *a1, uint64_t *a2, uint64_t (**a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), double a5)
{
  return sub_216E06404(a1, a3, a2, a4, a5);
}

uint64_t sub_216E06404(pxrInternal__aapl__pxrReserved__::UsdStage *a1, uint64_t (**a2)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), uint64_t *a3, uint64_t (**a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), double a5)
{
  v10[0] = (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))&unk_26C766AB0;
  v10[1] = a2;
  void v10[2] = a4;
  uint64_t result = (uint64_t)sub_216E107D0((uint64_t)a1, a3, (uint64_t)a2, v10, (pxrInternal__aapl__pxrReserved__::VtValue *)a4, a5);
  if (result)
  {
    if (a4) {
      pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAttributeValue(a1, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2, (uint64_t *)a4, a5);
    }
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInInterval(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_216D1CEAC((uint64_t)&v11);
  uint64_t v16 = a2;
  sub_216E29A0C(a1, a2, &v11, 0, 0, (uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(a1, (uint64_t)&v11, (uint64_t)a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
  sub_21697C414(&v14);
  uint64_t v8 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return 1;
}

void sub_216E065F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5 = *(double *)(a4 + 16);
  if (*(double *)a4 <= v5)
  {
    if (*(double *)a4 != v5 || (*(unsigned char *)(a4 + 8) ? (BOOL v11 = *(unsigned char *)(a4 + 24) == 0) : (BOOL v11 = 1), !v11))
    {
      *(void *)(a5 + 8) = *(void *)a5;
      int v12 = *(_DWORD *)(a2 + 72);
      if (v12 == 4)
      {
        sub_216D16CFC((uint64_t)&v56, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
        double v22 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136);
        sub_216D0162C((uint64_t)&v56, (int *)&v53);
        ClipsForPriuint64_t m = pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
        sub_21697C414(&v53);
        uint64_t v24 = sub_216D563F8((_DWORD *)a3);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64), v24, (int *)&v58);
        uint64_t v25 = (uint64_t *)*ClipsForPrim;
        uint64_t v26 = (uint64_t *)ClipsForPrim[1];
        while (v25 != v26)
        {
          if (sub_216E06ADC(v25, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64))
            && sub_216E06B5C((uint64_t)v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58))
          {
            pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetTimeSamplesInInterval((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, *v25, a4, (uint64_t)&v53);
            unint64_t v40 = *(void **)a5;
            if (*(void *)a5)
            {
              *(void *)(a5 + 8) = v40;
              operator delete(v40);
              *(void *)a5 = 0;
              *(void *)(a5 + 8) = 0;
              *(void *)(a5 + 16) = 0;
            }
            *(_OWORD *)a5 = v53;
            *(double *)(a5 + 16) = v54;
            break;
          }
          v25 += 2;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
        sub_21697C414(&v58);
        if ((BYTE8(v57) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v57 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
        sub_21697C414(&v57);
        if (*((void *)&v56 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v56 + 1));
        }
      }
      else if (v12 == 3)
      {
        uint64_t v13 = sub_216D563F8((_DWORD *)a3);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64), v13, &v60);
        int v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)(a2 + 16));
        pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath(&v58, v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60);
        if (!v59[1])
        {
LABEL_57:
          sub_2167FB780((uint64_t)&v58, v59[0]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
          sub_21697C414(&v60);
          return 1;
        }
        unint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 48);
        if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v15))
        {
          double v16 = *(double *)a4;
          uint64_t v17 = v59;
          uint64_t v18 = v59[0];
          if (*(unsigned char *)(a4 + 8))
          {
            if (v59[0])
            {
              long long v19 = v59;
              long long v20 = v59[0];
              do
              {
                char v21 = v20 + 1;
                if (*((double *)v20 + 4) >= v16)
                {
                  char v21 = v20;
                  long long v19 = v20;
                }
                long long v20 = (void *)*v21;
              }
              while (*v21);
              goto LABEL_46;
            }
          }
          else if (v59[0])
          {
            long long v19 = v59;
            uint64_t v41 = v59[0];
            do
            {
              int v42 = v41 + 1;
              if (v16 < *((double *)v41 + 4))
              {
                int v42 = v41;
                long long v19 = v41;
              }
              uint64_t v41 = (void *)*v42;
            }
            while (*v42);
            goto LABEL_46;
          }
          long long v19 = v59;
LABEL_46:
          double v43 = *(double *)(a4 + 16);
          if (*(unsigned char *)(a4 + 24))
          {
            if (v59[0])
            {
              do
              {
                unsigned int v44 = v18 + 1;
                if (v43 < *((double *)v18 + 4))
                {
                  unsigned int v44 = v18;
                  uint64_t v17 = v18;
                }
                uint64_t v18 = (void *)*v44;
              }
              while (*v44);
            }
          }
          else
          {
            while (v18)
            {
              uint64_t v45 = v18 + 1;
              if (*((double *)v18 + 4) >= v43)
              {
                uint64_t v45 = v18;
                uint64_t v17 = v18;
              }
              uint64_t v18 = (void *)*v45;
            }
          }
          sub_216C50B28(a5, *(char **)(a5 + 8), v19, v17);
          goto LABEL_57;
        }
        double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse(v15);
        *(double *)&long long v53 = v28;
        BYTE8(v53) = fabs(v28) != INFINITY;
        double v54 = v28;
        char v55 = BYTE8(v53);
        long long v29 = *(_OWORD *)(a4 + 16);
        long long v56 = *(_OWORD *)a4;
        long long v57 = v29;
        sub_216E10BD4((uint64_t)&v56, (uint64_t)&v53);
        BOOL v30 = fabs(Inverse) != INFINITY;
        double v31 = *(double *)&v56;
        int v32 = BYTE8(v56);
        double v33 = *(double *)&v57;
        int v34 = BYTE8(v57);
        if (v30)
        {
          double v31 = Inverse + *(double *)&v56;
          double v33 = Inverse + *(double *)&v57;
          int v32 = BYTE8(v56) & v30;
          int v34 = BYTE8(v57) & v30;
        }
        int v35 = v59;
        unsigned int v36 = v59[0];
        if (v32)
        {
          if (v59[0])
          {
            uint64_t v37 = v59;
            BOOL v38 = v59[0];
            do
            {
              int v39 = v38 + 1;
              if (*((double *)v38 + 4) >= v31)
              {
                int v39 = v38;
                uint64_t v37 = v38;
              }
              BOOL v38 = (void *)*v39;
            }
            while (*v39);
            goto LABEL_66;
          }
        }
        else if (v59[0])
        {
          uint64_t v37 = v59;
          char v47 = v59[0];
          do
          {
            uint64_t v48 = v47 + 1;
            if (v31 < *((double *)v47 + 4))
            {
              uint64_t v48 = v47;
              uint64_t v37 = v47;
            }
            char v47 = (void *)*v48;
          }
          while (*v48);
          goto LABEL_66;
        }
        uint64_t v37 = v59;
LABEL_66:
        if (v34)
        {
          if (v59[0])
          {
            do
            {
              uint64_t v49 = v36 + 1;
              if (v33 < *((double *)v36 + 4))
              {
                uint64_t v49 = v36;
                int v35 = v36;
              }
              unsigned int v36 = (void *)*v49;
            }
            while (*v49);
          }
        }
        else
        {
          while (v36)
          {
            uint64_t v50 = v36 + 1;
            if (*((double *)v36 + 4) >= v33)
            {
              uint64_t v50 = v36;
              int v35 = v36;
            }
            unsigned int v36 = (void *)*v50;
          }
        }
        sub_216C50B28(a5, *(char **)(a5 + 8), v37, v35);
        uint64_t v52 = *(double **)a5;
        uint64_t v51 = *(double **)(a5 + 8);
        while (v52 != v51)
        {
          *uint64_t v52 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)v15, *v52);
          ++v52;
        }
        goto LABEL_57;
      }
    }
  }
  return 1;
}

void sub_216E06A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_21697B754(va1);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216E06ADC(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5 = *a1 + 24;
  uint64_t v6 = sub_216851B24(a2);
  if (v6 != sub_216851B24(v5)) {
    return 0;
  }
  uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*a1 + 40);

  return pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, v8);
}

BOOL sub_216E06B5C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip **)(*(void *)a1 + 72);
  if (!v2) {
    return 0;
  }
  LODWORD(v7) = 1;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216E10D84(v2, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 464), &v7)&& v7 == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamples(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  sub_216D1CEAC((uint64_t)&v8);
  uint64_t v13 = a2;
  sub_216E29A0C((uint64_t)this, a2, &v8, 0, 0, (uint64_t)&v13);
  uint64_t NumTimeSamplesFromResolveInfo = pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamplesFromResolveInfo((uint64_t)this, (uint64_t)&v8, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(&v11);
  uint64_t v5 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return NumTimeSamplesFromResolveInfo;
}

void sub_216E06CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamplesFromResolveInfo(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4 = *(_DWORD *)(a2 + 72);
  if (v4 == 4)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    unint64_t v9 = 0xFFF0000000000000;
    char v10 = 0;
    uint64_t v11 = 0x7FF0000000000000;
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(a1, a2, (uint64_t)a3, (uint64_t)&v9, (uint64_t)&v13);
    uint64_t NumTimeSamplesForPath = (v14 - v13) >> 3;
    if (v13)
    {
      int v14 = v13;
      operator delete(v13);
    }
  }
  else if (v4 == 3)
  {
    uint64_t v5 = sub_216D563F8(a3);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64), v5, (int *)&v9);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)(a2 + 16));
    uint64_t NumTimeSamplesForPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
    sub_21697C414(&v9);
  }
  else
  {
    return 0;
  }
  return NumTimeSamplesForPath;
}

void sub_216E06DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, double a3, char a4, double *a5, double *a6, BOOL *a7)
{
  BOOL v30 = *(void **)&a3;
  sub_216D1CEAC((uint64_t)&v23);
  double v22 = 0;
  memset(v21, 0, sizeof(v21));
  *(void *)&long long v20 = a2;
  sub_216E29A0C((uint64_t)this, a2, &v23, &v30, v21, (uint64_t)&v20);
  if (v29 == 4)
  {
    uint64_t v15 = *((void *)&v21[0] + 1);
    *a5 = *(double *)v21;
    *(void *)a6 = v15;
LABEL_6:
    BOOL BracketingTimeSamplesFromResolveInfo = 1;
    *a7 = 1;
    goto LABEL_8;
  }
  if (v29 == 3)
  {
    uint64_t v14 = *((void *)&v21[0] + 1);
    *a5 = *(double *)v21;
    *(void *)a6 = v14;
    long long v20 = v26;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v20))
    {
      *a5 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)&v20, *a5);
      *a6 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)&v20, *a6);
    }
    goto LABEL_6;
  }
  BOOL BracketingTimeSamplesFromResolveInfo = pxrInternal__aapl__pxrReserved__::UsdStage::_GetBracketingTimeSamplesFromResolveInfo((uint64_t)this, (uint64_t)&v23, a2, a4, a5, a6, a7, a3);
LABEL_8:
  if (v22) {
    sub_216784EC4(v22);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_21697C414(&v27);
  uint64_t v17 = v25;
  if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = v24;
  if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  return BracketingTimeSamplesFromResolveInfo;
}

void sub_216E06FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, ...)
{
  va_start(va, a8);
  if (a8) {
    sub_216784EC4(a8);
  }
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetBracketingTimeSamplesFromResolveInfo(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdAttribute *this, char a4, double *a5, double *a6, unsigned char *a7, double a8)
{
  switch(*(_DWORD *)(a2 + 72))
  {
    case 1:
      BOOL result = 0;
      *a7 = 0;
      if ((a4 & 1) == 0)
      {
        if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasFallbackValue(this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))return 0; {
        goto LABEL_4;
        }
      }
      return result;
    case 2:
LABEL_4:
      *a7 = 0;
      return 1;
    case 3:
      uint64_t v15 = sub_216D563F8(this);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64), v15, &v36);
      double v16 = (double *)(a2 + 48);
      double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 48));
      int v32 = v17;
      double v18 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, a8);
      long long v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)(a2 + 16));
      int BracketingTimeSamplesForPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36, v18, a5, a6);
      char v21 = BracketingTimeSamplesForPath;
      if (BracketingTimeSamplesForPath)
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v16))
        {
          *a5 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(v16, *a5);
          *a6 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(v16, *a6);
        }
        *a7 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
      sub_21697C414(&v36);
      return (v21 & 1) != 0;
    case 4:
      int v23 = sub_216D563F8(this);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64), v23, &v36);
      sub_216D16CFC((uint64_t)&Inverse, (uint64_t *)this + 1, (_DWORD *)this + 4);
      uint64_t v24 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136);
      sub_216D0162C((uint64_t)&Inverse, &v29);
      ClipsForPriuint64_t m = pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(v24, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      sub_21697C414(&v29);
      long long v26 = (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)*ClipsForPrim;
      int v27 = (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)ClipsForPrim[1];
      break;
    default:
      return 0;
  }
  while (1)
  {
    if (v26 == v27)
    {
      char v28 = 1;
      goto LABEL_18;
    }
    if (sub_216E06ADC(v26, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64))
      && sub_216E06B5C((uint64_t)v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36)
      && (pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(*v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36, a8, a5, a6) & 1) != 0)
    {
      break;
    }
    v26 += 2;
  }
  char v28 = 0;
  *a7 = 1;
LABEL_18:
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_21697C414(&v33);
  if (v32) {
    sub_216D16E0C(v32);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
  sub_21697C414(&v36);
  return (v28 & 1) == 0;
}

void sub_216E07294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  sub_216D1CEAC((uint64_t)&v13);
  char v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  double v18 = a2;
  sub_216E29A0C((uint64_t)this, a2, &v13, 0, &v10, (uint64_t)&v18);
  if (v17[1] == 4)
  {
    int v4 = sub_216D563F8(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, v4, (int *)&v18);
    uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(*((void *)&v11 + 1) + 88);
    BOOL v6 = *(void *)(*((void *)&v11 + 1) + 96) - (void)v5 != 16
      || (unint64_t)pxrInternal__aapl__pxrReserved__::Usd_Clip::GetNumTimeSamplesForPath(*v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18) > 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_21697C414(&v18);
  }
  else
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::UsdStage::_ValueMightBeTimeVaryingFromResolveInfo((uint64_t)this, (uint64_t)&v13, (uint64_t)a2);
  }
  if (v12) {
    sub_216784EC4(v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v17);
  sub_21697C414(&v16);
  uint64_t v7 = v15;
  if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return v6;
}

void sub_216E07470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  sub_21697B754((_DWORD *)(v6 - 24));
  if (a6) {
    sub_216784EC4(a6);
  }
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_ValueMightBeTimeVaryingFromResolveInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 72) != 4) {
    return (unint64_t)pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamplesFromResolveInfo(a1, a2, (_DWORD *)a3) > 1;
  }
  uint64_t v6 = sub_216D563F8((_DWORD *)a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64), v6, &v21);
  uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136);
  sub_216D16CFC((uint64_t)&v14, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  sub_216D0162C((uint64_t)&v14, &v19);
  ClipsForPriuint64_t m = pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  long long v10 = (void *)*ClipsForPrim;
  unint64_t v9 = (void *)ClipsForPrim[1];
  while (1)
  {
    if (v10 == v9)
    {
      BOOL v11 = 0;
      goto LABEL_13;
    }
    if (sub_216E06ADC(v10, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64))
      && sub_216E06B5C((uint64_t)v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21))
    {
      break;
    }
    v10 += 2;
  }
  int v13 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(*v10 + 88);
  BOOL v11 = *(void *)(*v10 + 96) - (void)v13 != 16
     || (unint64_t)pxrInternal__aapl__pxrReserved__::Usd_Clip::GetNumTimeSamplesForPath(*v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21) > 1;
LABEL_13:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  return v11;
}

void sub_216E0762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E07674(pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double *a3, double *a4, double *a5)
{
  uint64_t result = sub_216E06B5C((uint64_t)a1, a2);
  if (result)
  {
    if (a3)
    {
      BOOL v11 = *a1;
      double v12 = *a3;
      return pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(v11, a2, v12, a4, a5);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if (a3)
  {
    uint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!v6) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v6, a2, 7u);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v18);
      Metastd::string::pointer data = pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v18, a2, a3);
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
      sub_21697C414(&v20);
      if (v19) {
        sub_216D16E0C(v19);
      }
      if (Metadata)
      {
        if (sub_2168EC434(a3))
        {
          unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
          if (!v9) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
          }
          Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v9, a2);
          BOOL v11 = (const char **)sub_2168EF25C(Fallback);
          uint64_t v18 = 0;
          double v12 = (uint64_t *)sub_2168EEFE0((const void *****)a3);
          pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v12, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v18);
          pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)&v18, v11, 0);
          int v13 = (uint64_t *)sub_2168EEFE0((const void *****)a3);
          pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v13, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v18);
          sub_2168EBBB8((void ***)&v18, 0);
        }
      }
      else
      {
        int v16 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        if (!v16) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
        }
        int v17 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v16, a2);
        sub_2168EC6DC(a3, v17);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v18 = "usd/stage.cpp";
    int v19 = (atomic_ullong *)"GetMetadata";
    uint64_t v20 = 9231;
    unint64_t v21 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(const TfToken &, VtValue *) const";
    char v22 = 0;
    unint64_t v14 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      uint64_t v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        uint64_t v15 = *(const char **)v15;
      }
    }
    else
    {
      uint64_t v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Null out-param 'value' for UsdStage::GetMetadata(\"%s\")", v15);
    return 0;
  }
  return result;
}

void sub_216E078DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec((uint64_t)v4, a2, 7u)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v7);
  BOOL v5 = (pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, a2) & 1) != 0|| pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v4, a2)[1] != 0;
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return v5;
}

void sub_216E079F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v4, a2, 7u)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v7);
  HasAuthoredMetastd::string::pointer data = pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return HasAuthoredMetadata;
}

void sub_216E07AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v4 = 0;
  uint64_t result = sub_216E07B34((uint64_t *)this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4, a3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_216E07B34(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  sub_216ABBA60(&v39, a1 + 4);
  sub_216ABBA60(&v37, a1 + 5);
  uint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v8, a2, 7u) & 1) == 0)
  {
    int v32 = "usd/stage.cpp";
    int v33 = "_SetStageMetadataOrDictKey";
    uint64_t v34 = 9316;
    uint64_t v35 = "BOOL pxrInternal__aapl__pxrReserved__::_SetStageMetadataOrDictKey(const UsdStage &, const TfToken &, const TfT"
          "oken &, const VtValue &)";
    char v36 = 0;
    unint64_t v14 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      uint64_t v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        uint64_t v15 = *(const char **)v15;
      }
    }
    else
    {
      uint64_t v15 = "";
    }
    int v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v39);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v19);
    if (*(char *)(Identifier + 23) >= 0) {
      unint64_t v21 = (const char *)Identifier;
    }
    else {
      unint64_t v21 = *(const char **)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Metadata '%s' is not registered as valid Layer metadata, and cannot be set on UsdStage %s.", v15, v21);
    goto LABEL_29;
  }
  int v9 = a1 + 6;
  uint64_t v10 = sub_216851B24((uint64_t)v9);
  if (v10 != sub_216851B24((uint64_t)&v39))
  {
    uint64_t v11 = sub_216851B24((uint64_t)v9);
    if (v11 != sub_216851B24((uint64_t)&v37))
    {
      int v32 = "usd/stage.cpp";
      int v33 = "_SetStageMetadataOrDictKey";
      uint64_t v34 = 9329;
      uint64_t v35 = "BOOL pxrInternal__aapl__pxrReserved__::_SetStageMetadataOrDictKey(const UsdStage &, const TfToken &, const T"
            "fToken &, const VtValue &)";
      char v36 = 0;
      unint64_t v12 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
      {
        int v13 = (const char *)(v12 + 16);
        if (*(char *)(v12 + 39) < 0) {
          int v13 = *(const char **)v13;
        }
      }
      else
      {
        int v13 = "";
      }
      int v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v9);
      uint64_t v24 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v23);
      if (*(char *)(v24 + 23) >= 0) {
        uint64_t v25 = (const char *)v24;
      }
      else {
        uint64_t v25 = *(const char **)v24;
      }
      long long v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v39);
      uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v26);
      if (*(char *)(v27 + 23) >= 0) {
        char v28 = (const char *)v27;
      }
      else {
        char v28 = *(const char **)v27;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set layer metadata '%s' in current edit target \"%s\", as it is not the root layer or session layer of stage \"%s\".", v13, v25, v28);
LABEL_29:
      uint64_t v22 = 0;
      goto LABEL_30;
    }
  }
  uint64_t v16 = *(void *)a3;
  int v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169791E0(v9);
  uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v17);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey((const char **)v17, v18, a2, a3, a4);
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v17, v18, a2, a4);
  }
  uint64_t v22 = 1;
LABEL_30:
  uint64_t v29 = v38;
  if (v38 && atomic_fetch_add_explicit((atomic_uint *volatile)(v38 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = v40;
  if (v40 && atomic_fetch_add_explicit((atomic_uint *volatile)(v40 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  return v22;
}

void sub_216E07E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, atomic_uint *a18)
{
  if (a18 && atomic_fetch_add_explicit(a18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a18 + 8))(a18);
  }
  uint64_t v20 = *(atomic_uint **)(v18 - 56);
  if (v20)
  {
    if (atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = 0;
  uint64_t result = sub_216E07EFC((uint64_t *)this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_216E07EFC(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216ABBA60(&v37, a1 + 4);
  sub_216ABBA60(&v35, a1 + 5);
  uint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v6, a2, 7u) & 1) == 0)
  {
    uint64_t v30 = "usd/stage.cpp";
    double v31 = "_ClearStageMetadataOrDictKey";
    uint64_t v32 = 9356;
    int v33 = "BOOL pxrInternal__aapl__pxrReserved__::_ClearStageMetadataOrDictKey(const UsdStage &, const TfToken &, const TfToken &)";
    char v34 = 0;
    unint64_t v12 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      int v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0) {
        int v13 = *(const char **)v13;
      }
    }
    else
    {
      int v13 = "";
    }
    int v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v37);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v17);
    if (*(char *)(Identifier + 23) >= 0) {
      int v19 = (const char *)Identifier;
    }
    else {
      int v19 = *(const char **)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 1, (pxrInternal__aapl__pxrReserved__ *)"Metadata '%s' is not registered as valid Layer metadata, and cannot be cleared on UsdStage %s.", v13, v19);
    goto LABEL_29;
  }
  uint64_t v7 = a1 + 6;
  uint64_t v8 = sub_216851B24((uint64_t)v7);
  if (v8 != sub_216851B24((uint64_t)&v37))
  {
    uint64_t v9 = sub_216851B24((uint64_t)v7);
    if (v9 != sub_216851B24((uint64_t)&v35))
    {
      uint64_t v30 = "usd/stage.cpp";
      double v31 = "_ClearStageMetadataOrDictKey";
      uint64_t v32 = 9369;
      int v33 = "BOOL pxrInternal__aapl__pxrReserved__::_ClearStageMetadataOrDictKey(const UsdStage &, const TfToken &, const TfToken &)";
      char v34 = 0;
      unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
      {
        uint64_t v11 = (const char *)(v10 + 16);
        if (*(char *)(v10 + 39) < 0) {
          uint64_t v11 = *(const char **)v11;
        }
      }
      else
      {
        uint64_t v11 = "";
      }
      unint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v7);
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v21);
      if (*(char *)(v22 + 23) >= 0) {
        int v23 = (const char *)v22;
      }
      else {
        int v23 = *(const char **)v22;
      }
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v37);
      uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v24);
      if (*(char *)(v25 + 23) >= 0) {
        long long v26 = (const char *)v25;
      }
      else {
        long long v26 = *(const char **)v25;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot clear layer metadata '%s' in current edit target \"%s\", as it is not the root layer or session layer of stage \"%s\".", v11, v23, v26);
LABEL_29:
      uint64_t v20 = 0;
      goto LABEL_30;
    }
  }
  uint64_t v14 = *(void *)a3;
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169791E0(v7);
  uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v15);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseFieldDictValueByKey(v15, v16, a2, a3);
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v15, v16, a2);
  }
  uint64_t v20 = 1;
LABEL_30:
  uint64_t v27 = v36;
  if (v36 && atomic_fetch_add_explicit((atomic_uint *volatile)(v36 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = v38;
  if (v38 && atomic_fetch_add_explicit((atomic_uint *volatile)(v38 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  return v20;
}

void sub_216E081B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, atomic_uint *a18)
{
  if (a18 && atomic_fetch_add_explicit(a18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a18 + 8))(a18);
  }
  uint64_t v20 = *(atomic_uint **)(v18 - 40);
  if (v20)
  {
    if (atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4 = *(void *)a3;
  if (!*(void *)a3) {
    return 0;
  }
  if (!a4)
  {
    uint64_t v32 = "usd/stage.cpp";
    int v33 = (atomic_ullong *)"GetMetadataByDictKey";
    uint64_t v34 = 9393;
    unint64_t v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(const TfToken &, const"
                            " TfToken &, VtValue *) const";
    char v36 = 0;
    unint64_t v17 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v17)
    {
      uint64_t v18 = (const char *)(v17 + 16);
      if (*(char *)(v17 + 39) < 0) {
        uint64_t v18 = *(const char **)v18;
      }
    }
    else
    {
      uint64_t v18 = "";
    }
    unint64_t v24 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v25 = (const char *)(v24 + 16);
      if (*(char *)(v24 + 39) < 0) {
        uint64_t v25 = *(const char **)v25;
      }
    }
    else
    {
      uint64_t v25 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Null out-param 'value' for UsdStage::GetMetadataByDictKey(\"%s\", \"%s\")", v18, v25);
    return 0;
  }
  uint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v9, a2, 7u);
  if (!result) {
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v32);
  char MetadataByDictKey = pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v32, a2, a3, a4);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_21697C414(&v34);
  if (v33) {
    sub_216D16E0C(v33);
  }
  if (MetadataByDictKey)
  {
    if (sub_2168EC434(a4))
    {
      unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
      if (!v12) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
      }
      Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v12, a2);
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168EF25C(Fallback);
      uint64_t v15 = (uint64_t *)v14;
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (std::string *)((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v15, EmptyString, ":");
      if (ValueAtPath)
      {
        uint64_t v27 = ValueAtPath;
        if (sub_2168EC434(ValueAtPath))
        {
          uint64_t v32 = 0;
          uint64_t v28 = (uint64_t *)sub_2168EEFE0((const void *****)a4);
          pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v28, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v32);
          uint64_t v29 = *((void *)v27 + 1);
          if ((v29 & 4) != 0) {
            uint64_t v30 = (const char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(v27);
          }
          else {
            uint64_t v30 = *(const char ***)v27;
          }
          pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)&v32, v30, 0);
          double v31 = (uint64_t *)sub_2168EEFE0((const void *****)a4);
          pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v31, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v32);
          sub_2168EBBB8((void ***)&v32, 0);
        }
      }
    }
    return 1;
  }
  int v19 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v19, a2);
  if (!*((void *)v20 + 1)) {
    return 0;
  }
  unint64_t v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168EF25C(v20);
  uint64_t v22 = (uint64_t *)v21;
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v23 = (std::string *)((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v23 = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v22, v23, ":");
  if (result)
  {
    sub_2168EC6DC(a4, (void *)result);
    return 1;
  }
  return result;
}

void sub_216E08500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if (!*(void *)a3) {
    return 0;
  }
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec((uint64_t)v6, a2, 7u);
  if (!result) {
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v13);
  char HasAuthoredMetadataDictKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13, a2, a3);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  if (HasAuthoredMetadataDictKey) {
    return 1;
  }
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v6, a2);
  if (!*((void *)Fallback + 1)) {
    return 0;
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168EF25C(Fallback);
  uint64_t v11 = (uint64_t *)v10;
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (std::string *)((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  }
  return pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v11, EmptyString, ":") != 0;
}

void sub_216E08668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!*(void *)a3) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v7);
  uint64_t HasAuthoredMetadataDictKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadataDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, a2, a3);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return HasAuthoredMetadataDictKey;
}

void sub_216E08714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (*(void *)a3) {
    return sub_216E07B34((uint64_t *)this, a2, a3, a4);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::ClearMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (*(void *)a3) {
    return sub_216E07EFC((uint64_t *)this, a2, a3);
  }
  else {
    return 0;
  }
}

double pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  sub_216ABBA60(&v24, (uint64_t *)this + 5);
  uint64_t v22 = v24;
  int v23 = v25;
  if (v25)
  {
    atomic_fetch_add_explicit(v25 + 2, 1u, memory_order_relaxed);
    uint64_t v2 = v25;
    if (v25)
    {
      if (atomic_fetch_add_explicit(v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
      }
    }
  }
  uint64_t v3 = sub_216E08AA8(&v22);
  if (v4 & 1 | (unint64_t)v3)
  {
    BOOL v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(&v22);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(v5))
    {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_216E08B08(&v22);
      double StartTimeCode = pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(v6);
LABEL_10:
      double v8 = StartTimeCode;
      goto LABEL_25;
    }
    if (sub_216E08BB0(&v22))
    {
      double StartTimeCode = sub_216E08C3C(&v22);
      goto LABEL_10;
    }
  }
  int v9 = (uint64_t *)((char *)this + 32);
  sub_216ABBA60(&v24, v9);
  int v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v24);
  Hasdouble StartTimeCode = pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(v10);
  unint64_t v12 = v25;
  if (v25 && atomic_fetch_add_explicit(v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
  }
  if (HasStartTimeCode)
  {
    sub_216ABBA60(&v24, v9);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_2169791E0(&v24);
    double v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(v13);
    uint64_t v14 = v25;
    if (!v25) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  sub_216ABBA60(&v18, v9);
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 2, 1u, memory_order_relaxed);
  }
  double v8 = sub_216E08C3C(&v20);
  int v15 = v21;
  if (v21 && atomic_fetch_add_explicit(v21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
  }
  uint64_t v14 = v19;
  if (v19)
  {
LABEL_23:
    if (atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
    }
  }
LABEL_25:
  int v16 = v23;
  if (v23 && atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
  }
  return v8;
}

void sub_216E089D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, _Unwind_Exception *exception_object, uint64_t a16)
{
  if (a12) {
    sub_217324208(a12);
  }
  sub_217325050(v16);
  if (a14)
  {
    if (atomic_fetch_add_explicit(a14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 8))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*sub_216E08AA8(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216E2B530;
  }
}

uint64_t sub_216E08B08(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), uint64_t result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    uint64_t v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, con"
            "st pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrRese"
            "rved__::TfWeakPtr, Type = const pxrInternal__aapl__pxrReserved__::SdfLayer]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000021749F86CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_216E08BB0(uint64_t *a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v1, &v7);
  uint64_t v2 = sub_216A663FC(&v7);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t HasInfo = pxrInternal__aapl__pxrReserved__::SdfSpec::HasInfo((pxrInternal__aapl__pxrReserved__::SdfSpec *)v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 488));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  return HasInfo;
}

void sub_216E08C28(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

double sub_216E08C3C(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v1, &v8);
  double v3 = 0.0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v8) & 1) == 0)
  {
    int v4 = sub_216A663FC(&v8);
    BOOL v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      BOOL v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v4, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 488), &v9);
    if (sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v9))
    {
      if ((v10 & 4) != 0) {
        BOOL v6 = (double *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(&v9);
      }
      else {
        BOOL v6 = (double *)&v9;
      }
      double v3 = *v6;
    }
    sub_2168EE084((uint64_t)&v9);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
  return v3;
}

void sub_216E08D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_2168EE084((uint64_t)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  double v5 = a2;
  double v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    double v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216E08DBC(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 320), &v5);
}

uint64_t sub_216E08DBC(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3)
{
  void v5[2] = *MEMORY[0x263EF8340];
  v5[1] = &unk_26C750B03;
  v5[0] = *a3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  sub_2168EE084((uint64_t)v5);
  return v3;
}

void sub_216E08E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  sub_216ABBA60(&v24, (uint64_t *)this + 5);
  uint64_t v22 = v24;
  int v23 = v25;
  if (v25)
  {
    atomic_fetch_add_explicit(v25 + 2, 1u, memory_order_relaxed);
    uint64_t v2 = v25;
    if (v25)
    {
      if (atomic_fetch_add_explicit(v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
      }
    }
  }
  uint64_t v3 = sub_216E08AA8(&v22);
  if (v4 & 1 | (unint64_t)v3)
  {
    double v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(&v22);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(v5))
    {
      BOOL v6 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_216E08B08(&v22);
      double EndTimeCode = pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(v6);
LABEL_10:
      double v8 = EndTimeCode;
      goto LABEL_25;
    }
    if (sub_216E091A8(&v22))
    {
      double EndTimeCode = sub_216E09234(&v22);
      goto LABEL_10;
    }
  }
  uint64_t v9 = (uint64_t *)((char *)this + 32);
  sub_216ABBA60(&v24, v9);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v24);
  Hasdouble EndTimeCode = pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(v10);
  unint64_t v12 = v25;
  if (v25 && atomic_fetch_add_explicit(v25 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
  }
  if (HasEndTimeCode)
  {
    sub_216ABBA60(&v24, v9);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_2169791E0(&v24);
    double v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(v13);
    uint64_t v14 = v25;
    if (!v25) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  sub_216ABBA60(&v18, v9);
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 2, 1u, memory_order_relaxed);
  }
  double v8 = sub_216E09234(&v20);
  int v15 = v21;
  if (v21 && atomic_fetch_add_explicit(v21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
  }
  uint64_t v14 = v19;
  if (v19)
  {
LABEL_23:
    if (atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
    }
  }
LABEL_25:
  uint64_t v16 = v23;
  if (v23 && atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 8))(v16);
  }
  return v8;
}

void sub_216E090D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, _Unwind_Exception *exception_object, uint64_t a16)
{
  if (a12) {
    sub_217324208(a12);
  }
  sub_217325050(v16);
  if (a14)
  {
    if (atomic_fetch_add_explicit(a14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 8))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216E091A8(uint64_t *a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v1, &v7);
  uint64_t v2 = sub_216A663FC(&v7);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t HasInfo = pxrInternal__aapl__pxrReserved__::SdfSpec::HasInfo((pxrInternal__aapl__pxrReserved__::SdfSpec *)v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 480));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  return HasInfo;
}

void sub_216E09220(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

double sub_216E09234(uint64_t *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v1, &v8);
  double v3 = 0.0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v8) & 1) == 0)
  {
    char v4 = sub_216A663FC(&v8);
    double v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      double v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v4, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 480), &v9);
    if (sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v9))
    {
      if ((v10 & 4) != 0) {
        BOOL v6 = (double *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(&v9);
      }
      else {
        BOOL v6 = (double *)&v9;
      }
      double v3 = *v6;
    }
    sub_2168EE084((uint64_t)&v9);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
  return v3;
}

void sub_216E09328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_2168EE084((uint64_t)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v11, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  double v5 = a2;
  double v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    double v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216E08DBC(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 144), &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  sub_216ABBA60(&v31, (uint64_t *)this + 4);
  sub_216ABBA60(&v29, (uint64_t *)this + 5);
  uint64_t v2 = sub_21697CF14(&v29);
  unint64_t v4 = v3 & 1 | (unint64_t)v2;
  if (!v4) {
    goto LABEL_12;
  }
  double v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v29);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(v5))
  {
    BOOL v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v29);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(v6))
    {
      uint64_t v7 = 1;
      goto LABEL_38;
    }
  }
  uint64_t v27 = v29;
  uint64_t v28 = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 + 8), 1u, memory_order_relaxed);
  }
  if (sub_216E08BB0(&v27))
  {
    uint64_t v25 = v29;
    uint64_t v26 = v30;
    if (v30) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 + 8), 1u, memory_order_relaxed);
    }
    int v8 = 1;
    uint64_t v7 = 1;
    if (sub_216E091A8(&v25)) {
      goto LABEL_31;
    }
  }
  else
  {
LABEL_12:
    int v8 = 0;
  }
  uint64_t v9 = sub_21697CF14(&v31);
  unint64_t v11 = v10 & 1 | (unint64_t)v9;
  uint64_t v7 = v11 != 0;
  if (v11)
  {
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v31);
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(v12)
      || (uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v31),
          (pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(v13) & 1) == 0))
    {
      uint64_t v23 = v31;
      uint64_t v24 = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 1u, memory_order_relaxed);
      }
      if (sub_216E08BB0(&v23))
      {
        uint64_t v21 = v31;
        uint64_t v22 = v32;
        if (v32) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 1u, memory_order_relaxed);
        }
        uint64_t v7 = sub_216E091A8(&v21);
        uint64_t v14 = v22;
        if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v15 = v24;
      if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      if ((v8 & 1) == 0) {
        goto LABEL_34;
      }
      goto LABEL_31;
    }
  }
  if (v8)
  {
LABEL_31:
    uint64_t v16 = v26;
    if (v26 && atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
LABEL_34:
  if (v4)
  {
    uint64_t v17 = v28;
    if (v28)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
  }
LABEL_38:
  uint64_t v18 = v30;
  if (v30 && atomic_fetch_add_explicit((atomic_uint *volatile)(v30 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v32;
  if (v32 && atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  return v7;
}

void sub_216E096B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12, uint64_t a13, atomic_uint *a14, uint64_t a15, atomic_uint *a16, uint64_t a17, atomic_uint *a18)
{
  if (a10) {
    sub_217324208(a10);
  }
  if (a12 && atomic_fetch_add_explicit(a12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a12 + 8))(a12);
  }
  if ((v19 & 1) != 0 && a14 && atomic_fetch_add_explicit(a14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 8))(a14);
  }
  if (v18 && a16 && atomic_fetch_add_explicit(a16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a16 + 8))(a16);
  }
  if (a18 && atomic_fetch_add_explicit(a18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a18 + 8))(a18);
  }
  uint64_t v22 = *(atomic_uint **)(v20 - 40);
  if (v22)
  {
    if (atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v22 + 8))(v22);
    }
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::PcpCache **this)
{
  pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(this[16], &v4);
  double v1 = *(double *)(sub_216BBCEA8(&v4) + 168);
  uint64_t v2 = v5;
  if (v5 && atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return v1;
}

void sub_216E098D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  double v5 = a2;
  char v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    char v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216E08DBC(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 440), &v5);
}

double pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  double v4 = 0.0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216E099A8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 168), &v4);
  return v4;
}

uint64_t sub_216E099A8(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v20) & 1) == 0)
  {
LABEL_19:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  if (!sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v20))
  {
    v18[0] = "usd/stage.h";
    v18[1] = "GetMetadata";
    double v18[2] = 2410;
    _OWORD v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(const TfToken &, T *) const [T = double]";
    char v19 = 0;
    uint64_t v7 = v16;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
    if (v17 < 0) {
      uint64_t v7 = (void **)v16[0];
    }
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      unint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        unint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      unint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v20, v8, v9, (uint64_t)__p);
    if (v15 >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Requested type %s for stage metadatum %s does not match retrieved type %s", (const char *)v7, v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    goto LABEL_19;
  }
  if ((v21 & 4) != 0) {
    double v5 = (void *)(*(uint64_t (**)(unsigned char *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v20);
  }
  else {
    double v5 = v20;
  }
  *a3 = *v5;
  uint64_t v6 = 1;
LABEL_20:
  sub_2168EE084((uint64_t)v20);
  return v6;
}

void sub_216E09B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2168EE084(v24 - 56);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetFramesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  double v5 = a2;
  char v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    char v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216E08DBC(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 168), &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  double v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    double v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216E09C40(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 24), (long long *)a2);
}

uint64_t sub_216E09C40(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, long long *a3)
{
  void v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C755A30;
  sub_2169B3DA8(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216E09CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfiguration(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v10);
  double v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    double v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216E09E18(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 24), &v10);
  std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v10.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v6 = &v10;
    if ((*((unsigned char *)&v10.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_7:
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v6->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v7;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = (std::string *)sub_216E0A00C();
    if ((*((unsigned char *)&v6->__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_7;
    }
  }
  sub_216778F24((unsigned char *)a2, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
LABEL_10:
  int v8 = (unsigned char *)(a2 + 24);
  if (SHIBYTE(v6[1].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_216778F24(v8, v6[1].__r_.__value_.__l.__data_, v6[1].__r_.__value_.__l.__size_);
  }
  else
  {
    long long v9 = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
    *(void *)(a2 + 40) = *((void *)&v6[1].__r_.__value_.__l + 2);
    *(_OWORD *)int v8 = v9;
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_216E09DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  sub_21682E578((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216E09E18(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, std::string *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v20) & 1) == 0)
  {
LABEL_19:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  if (!sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    v18[0] = "usd/stage.h";
    v18[1] = "GetMetadata";
    double v18[2] = 2410;
    _OWORD v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(const TfToken &, T *) const [T = pxrInternal__"
             "aapl__pxrReserved__::SdfAssetPath]";
    char v19 = 0;
    long long v7 = v16;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021746880ALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
    if (v17 < 0) {
      long long v7 = (void **)v16[0];
    }
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      unint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        unint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      unint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v8, v9, (uint64_t)__p);
    if (v15 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Requested type %s for stage metadatum %s does not match retrieved type %s", (const char *)v7, v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    goto LABEL_19;
  }
  if ((v21 & 4) != 0) {
    uint64_t v5 = (const std::string *)(*(uint64_t (**)(const std::string **))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  }
  else {
    uint64_t v5 = v20;
  }
  std::string::operator=(a3, v5);
  std::string::operator=(a3 + 1, v5 + 1);
  uint64_t v6 = 1;
LABEL_20:
  sub_2168EE084((uint64_t)&v20);
  return v6;
}

void sub_216E09FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2168EE084(v24 - 56);
  _Unwind_Resume(a1);
}

unint64_t sub_216E0A00C()
{
  unint64_t v0 = (void **)atomic_load((unint64_t *)&qword_267B91DD0);
  if (v0) {
    return (unint64_t)v0;
  }
  unint64_t v0 = (void **)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v0);
  v0[6] = 0;
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v2);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v49, Instance);
  double v4 = v49;
  uint64_t v5 = v50;
  if (v49 != v50)
  {
    uint64_t v6 = v0 + 3;
    uint64_t v37 = v50;
    do
    {
      long long v7 = (const void ***)sub_2168E5D78(v4);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v7, v48);
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v46);
      if (sub_216E2B574((uint64_t)v48, "UsdColorConfigFallbacks", &v46))
      {
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v46))
        {
          JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v46);
          sub_2168BB7AC((uint64_t *)&v44, JsObject);
          uint64_t v9 = v44;
          if (v44 != v45)
          {
            do
            {
              unint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v10) {
                unint64_t v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              unint64_t v11 = (const char *)(v9 + 4);
              if (pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 24), (unsigned __int8 *)v9 + 32))
              {
                if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v9 + 7)))
                {
                  __p[0] = "usd/stage.cpp";
                  __p[1] = "_colorConfigurationFallbacks_Tf_StaticDataFactoryImpl";
                  uint64_t v39 = 148;
                  *(void *)&long long v40 = "void pxrInternal__aapl__pxrReserved__::_colorConfigurationFallbacks_Tf_StaticDataFac"
                                    "toryImpl(std::remove_const_t<_ColorConfigurationFallbacks> *)";
                  BYTE8(v40) = 0;
                  uint64_t v17 = sub_2168E5D78(v4);
                  uint64_t v18 = (const char *)(v17 + 8);
                  if (*(char *)(v17 + 31) < 0) {
                    uint64_t v18 = *(const char **)v18;
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'colorConfiguration' value in %s[UsdColorConfigFallbacks] must be a string.", v18);
                  goto LABEL_54;
                }
                unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v9 + 7));
                if (*(char *)(String + 23) < 0)
                {
                  sub_216778F24(&__dst, *(void **)String, *(void *)(String + 8));
                }
                else
                {
                  long long v13 = *(_OWORD *)String;
                  uint64_t v43 = *(void *)(String + 16);
                  long long __dst = v13;
                }
                uint64_t v23 = HIBYTE(v43);
                char v24 = HIBYTE(v43);
                if (v43 < 0) {
                  uint64_t v23 = *((void *)&__dst + 1);
                }
                if (v23)
                {
                  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p);
                  if (*((char *)v0 + 23) < 0) {
                    operator delete(*v0);
                  }
                  *(_OWORD *)unint64_t v0 = *(_OWORD *)__p;
                  v0[2] = (void *)v39;
                  HIBYTE(v39) = 0;
                  LOBYTE(__p[0]) = 0;
                  if (*((char *)v0 + 47) < 0)
                  {
                    operator delete(*v6);
                    int v25 = SHIBYTE(v39);
                    *(_OWORD *)uint64_t v6 = v40;
                    v0[5] = v41;
                    HIBYTE(v41) = 0;
                    LOBYTE(v40) = 0;
                    if (v25 < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  else
                  {
                    *(_OWORD *)uint64_t v6 = v40;
                    v0[5] = v41;
                  }
                  char v24 = HIBYTE(v43);
                }
                if (v24 < 0)
                {
                  uint64_t v26 = (void *)__dst;
LABEL_53:
                  operator delete(v26);
                }
              }
              else
              {
                uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v14) {
                  uint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                if (!pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 32), (unsigned __int8 *)v9 + 32))
                {
                  __p[0] = "usd/stage.cpp";
                  __p[1] = "_colorConfigurationFallbacks_Tf_StaticDataFactoryImpl";
                  uint64_t v39 = 170;
                  *(void *)&long long v40 = "void pxrInternal__aapl__pxrReserved__::_colorConfigurationFallbacks_Tf_StaticDataFac"
                                    "toryImpl(std::remove_const_t<_ColorConfigurationFallbacks> *)";
                  BYTE8(v40) = 0;
                  if (*((char *)v9 + 55) < 0) {
                    unint64_t v11 = *(const char **)v11;
                  }
                  uint64_t v19 = sub_2168E5D78(v4);
                  uint64_t v20 = (const char *)(v19 + 8);
                  if (*(char *)(v19 + 31) < 0) {
                    uint64_t v20 = *(const char **)v20;
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown key '%s' found in %s[UsdColorConfigFallbacks].", v11, v20);
                  goto LABEL_54;
                }
                if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v9 + 7)))
                {
                  __p[0] = "usd/stage.cpp";
                  __p[1] = "_colorConfigurationFallbacks_Tf_StaticDataFactoryImpl";
                  uint64_t v39 = 160;
                  *(void *)&long long v40 = "void pxrInternal__aapl__pxrReserved__::_colorConfigurationFallbacks_Tf_StaticDataFac"
                                    "toryImpl(std::remove_const_t<_ColorConfigurationFallbacks> *)";
                  BYTE8(v40) = 0;
                  uint64_t v21 = sub_2168E5D78(v4);
                  uint64_t v22 = (const char *)(v21 + 8);
                  if (*(char *)(v21 + 31) < 0) {
                    uint64_t v22 = *(const char **)v22;
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'colorManagementSystem' value in %s[UsdColorConfigFallbacks] must be a string.", v22);
                  goto LABEL_54;
                }
                unint64_t v15 = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v9 + 7));
                if (*(char *)(v15 + 23) < 0)
                {
                  sub_216778F24(__p, *(void **)v15, *(void *)(v15 + 8));
                }
                else
                {
                  long long v16 = *(_OWORD *)v15;
                  uint64_t v39 = *(void *)(v15 + 16);
                  *(_OWORD *)std::string __p = v16;
                }
                uint64_t v27 = (void *)HIBYTE(v39);
                char v28 = HIBYTE(v39);
                if (v39 < 0) {
                  uint64_t v27 = __p[1];
                }
                if (v27)
                {
                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__dst);
                  unint64_t v29 = (unint64_t)v0[6];
                  if ((v29 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  v0[6] = (void *)__dst;
                  char v28 = HIBYTE(v39);
                }
                if (v28 < 0)
                {
                  uint64_t v26 = __p[0];
                  goto LABEL_53;
                }
              }
LABEL_54:
              uint64_t v30 = v9[1];
              if (v30)
              {
                do
                {
                  uint64_t v31 = (void **)v30;
                  uint64_t v30 = (void *)*v30;
                }
                while (v30);
              }
              else
              {
                do
                {
                  uint64_t v31 = (void **)v9[2];
                  BOOL v32 = *v31 == v9;
                  uint64_t v9 = v31;
                }
                while (!v32);
              }
              uint64_t v9 = v31;
            }
            while (v31 != v45);
          }
          sub_216812ED4((uint64_t)&v44, v45[0]);
          uint64_t v5 = v37;
        }
        else
        {
          __p[0] = "usd/stage.cpp";
          __p[1] = "_colorConfigurationFallbacks_Tf_StaticDataFactoryImpl";
          uint64_t v39 = 137;
          *(void *)&long long v40 = "void pxrInternal__aapl__pxrReserved__::_colorConfigurationFallbacks_Tf_StaticDataFactoryImpl"
                            "(std::remove_const_t<_ColorConfigurationFallbacks> *)";
          BYTE8(v40) = 0;
          uint64_t v33 = sub_2168E5D78(v4);
          uint64_t v34 = (const char *)(v33 + 8);
          if (*(char *)(v33 + 31) < 0) {
            uint64_t v34 = *(const char **)v34;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdColorConfigFallbacks] was not a dictionary.", v34);
        }
      }
      if (v47) {
        sub_216784EC4(v47);
      }
      sub_216812ED4((uint64_t)v48, (void *)v48[1]);
      v4 += 2;
    }
    while (v4 != v5);
  }
  __p[0] = &v49;
  sub_216850BF4((void ***)__p);
  uint64_t v35 = 0;
  atomic_compare_exchange_strong(&qword_267B91DD0, (unint64_t *)&v35, (unint64_t)v0);
  if (v35)
  {
    unint64_t v36 = (unint64_t)v0[6];
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (*((char *)v0 + 47) < 0) {
      operator delete(v0[3]);
    }
    if (*((char *)v0 + 23) < 0) {
      operator delete(*v0);
    }
    operator delete(v0);
    return atomic_load((unint64_t *)&qword_267B91DD0);
  }
  return (unint64_t)v0;
}

void sub_216E0A500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  operator delete(v33);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  double v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    double v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216E0A610(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 32), (uint64_t *)a2);
}

uint64_t sub_216E0A610(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3)
{
  void v7[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  v7[0] = v3;
  v7[1] = (char *)&off_26C750C70 + 1;
  if ((v3 & 7) != 0)
  {
    double v4 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      v7[0] = v4;
    }
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216E0A6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetColorManagementSystem@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X0>, atomic_uint **a2@<X8>)
{
  int v8 = 0;
  double v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    double v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t result = sub_216E0A780(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 32), &v8);
  uint64_t v6 = v8;
  if (!v8)
  {
    uint64_t result = sub_216E0A00C();
    uint64_t v6 = *(atomic_uint **)(result + 48);
  }
  *a2 = v6;
  if ((v6 & 7) != 0)
  {
    long long v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v7;
    }
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_216E0A780(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v20) & 1) == 0)
  {
LABEL_19:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  if (!sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v20))
  {
    v18[0] = "usd/stage.h";
    v18[1] = "GetMetadata";
    double v18[2] = 2410;
    _OWORD v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(const TfToken &, T *) const [T = pxrInternal__"
             "aapl__pxrReserved__::TfToken]";
    char v19 = 0;
    long long v7 = v16;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
    if (v17 < 0) {
      long long v7 = (void **)v16[0];
    }
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      unint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        unint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      unint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v20, v8, v9, (uint64_t)__p);
    if (v15 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Requested type %s for stage metadatum %s does not match retrieved type %s", (const char *)v7, v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    goto LABEL_19;
  }
  if ((v21 & 4) != 0) {
    uint64_t v5 = (void *)(*(uint64_t (**)(unsigned char *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v20);
  }
  else {
    uint64_t v5 = v20;
  }
  sub_2168D2318(a3, v5);
  uint64_t v6 = 1;
LABEL_20:
  sub_2168EE084((uint64_t)v20);
  return v6;
}

void sub_216E0A91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2168EE084(v24 - 56);
  _Unwind_Resume(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfigFallbacks(std::string *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (this)
  {
    double v4 = this;
    uint64_t v5 = (const std::string *)sub_216E0A00C();
    std::string::operator=(v4, v5);
    this = std::string::operator=(v4 + 1, v5 + 1);
  }
  if (a2)
  {
    uint64_t v6 = (void *)(sub_216E0A00C() + 48);
    return (std::string *)sub_2168D2318(a2, v6);
  }
  return this;
}

std::string *pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfigFallbacks(std::string *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v5 = this;
    uint64_t v6 = (std::string *)sub_216E0A00C();
    std::string::operator=(v6, v5);
    this = std::string::operator=(v6 + 1, v5 + 1);
  }
  if (*(void *)a2)
  {
    long long v7 = (void *)(sub_216E0A00C() + 48);
    return (std::string *)sub_2168D2318(v7, a2);
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::UsdStage::ResolveIdentifierToEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  v26[5] = *(void **)MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(a2))
  {
    v26[0] = 0;
    v26[1] = 0;
    int v25 = v26;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find((uint64_t)v3, (uint64_t)&v25, &v22);
    sub_2167877AC((uint64_t)&v25, v26[0]);
    uint64_t v6 = sub_21697CF14(&v22);
    if (v7 & 1 | (unint64_t)v6)
    {
      if (sub_216C4B19C(7))
      {
        if (*((char *)v3 + 23) >= 0) {
          unint64_t v10 = v3;
        }
        else {
          unint64_t v10 = (unint64_t *)*v3;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Resolved identifier %s because it was anonymous\n", v8, v9, v10);
      }
      if (*((char *)v3 + 23) < 0)
      {
        sub_216778F24((unsigned char *)a3, (void *)*v3, v3[1]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)v3;
        *(void *)(a3 + 16) = v3[2];
      }
    }
    else
    {
      if (sub_216C4B19C(7))
      {
        if (*((char *)v3 + 23) >= 0) {
          uint64_t v20 = v3;
        }
        else {
          uint64_t v20 = (unint64_t *)*v3;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Resolved identifier %s to \"\" because it was anonymous but no layer is open with that identifier\n", v18, v19, v20);
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    uint64_t v21 = v23;
    if (v23)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext(a1, &v22);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v25, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)&v22);
    unint64_t v11 = (uint64_t *)((char *)a1 + 48);
    uint64_t v24 = (void **)&v22;
    sub_216787968(&v24);
    sub_216E0AD48(v11, (uint64_t)v3, a3);
    if (sub_216C4B19C(7))
    {
      if (*((char *)v3 + 23) < 0) {
        uint64_t v3 = (unint64_t *)*v3;
      }
      char v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v11);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v16 = Identifier;
      }
      else {
        uint64_t v16 = *(void *)Identifier;
      }
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v17 = a3;
      }
      else {
        uint64_t v17 = *(void *)a3;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Resolved identifier \"%s\" against layer @%s@ to: \"%s\"\n", v14, v15, v3, v16, v17);
    }
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v25);
  }
}

void sub_216E0AC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216E0AD48(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_216E0B12C(a1, a2, (uint64_t)__p);
  if (SHIBYTE(v10) < 0)
  {
    if (!__p[1])
    {
      sub_216778F24((unsigned char *)a3, __p[0], 0);
      goto LABEL_8;
    }
  }
  else if (!HIBYTE(v10))
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    uint64_t v5 = v10;
LABEL_7:
    *(void *)(a3 + 16) = v5;
    goto LABEL_8;
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)v7;
    uint64_t v5 = v8;
    goto LABEL_7;
  }
  sub_216778F24((unsigned char *)a3, v7[0], (unint64_t)v7[1]);
  operator delete(v7[0]);
LABEL_8:
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216E0AE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdStage::SetInterpolationType(_DWORD *result, int a2)
{
  if (result[196] != a2)
  {
    result[196] = a2;
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D61884(&v6, (uint64_t)result);
    v5[0] = 0;
    v5[1] = 0;
    double v4 = (uint64_t *)v5;
    v3[0] = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v2);
    sub_216E1B264(&v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)v3[0], (uint64_t)&unk_2174BFD90, v3);
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v3, &v6, (uint64_t)&v4);
    sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v3, &v6);
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::~ObjectsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *)v3);
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageNotice::StageNotice(v3, &v6);
    v3[0] = &unk_26C768CE0;
    sub_216DF334C((pxrInternal__aapl__pxrReserved__::TfNotice *)v3, &v6);
    pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)v3);
    sub_216D5FE08((uint64_t)&v4, v5[0]);
    uint64_t result = v7;
    if (v7)
    {
      if (atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_216E0AF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
  pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged::~StageContentsChanged((pxrInternal__aapl__pxrReserved__::UsdNotice::StageContentsChanged *)&a9);
  sub_216D5FE08((uint64_t)&a15, a16);
  uint64_t v18 = *(atomic_uint **)(v16 - 32);
  if (v18)
  {
    if (atomic_fetch_add_explicit(v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v18 + 8))(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetInterpolationType(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return *((unsigned int *)this + 196);
}

void *pxrInternal__aapl__pxrReserved__::UsdDescribe@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  double v4 = (uint64_t *)(a1 + 8);
  if (v5)
  {
    if (*(unsigned char *)(sub_216850B68(v4) + 14)) {
      uint64_t v6 = *(pxrInternal__aapl__pxrReserved__ **)a1;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdDescribe(v6, a2);
}

void *pxrInternal__aapl__pxrReserved__::UsdDescribe@<X0>(pxrInternal__aapl__pxrReserved__ **a1@<X0>, void *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::UsdDescribe(*a1, a2);
}

void sub_216E0B05C(uint64_t *a1, uint64_t **a2)
{
  double v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1 + 1);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v6 = Identifier;
  }
  else {
    uint64_t v6 = *(void *)Identifier;
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"resolving asset path at @%s@<%s>", v8, v9, v6, Text);
  uint64_t v10 = *a1;
  memset(v11, 0, sizeof(v11));
  pxrInternal__aapl__pxrReserved__::UsdStage::_ReportErrors(v10, v11, a2, (uint64_t *)&__p);
  uint64_t v14 = (void **)v11;
  sub_216787968(&v14);
  if (v13 < 0) {
    operator delete(__p);
  }
}

void sub_216E0B104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v21 - 40) = v20;
  sub_216787968((void ***)(v21 - 40));
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216E0B12C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  char v6 = v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5) {
    goto LABEL_6;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymousLayerIdentifier(a2))
  {
    char v6 = *(unsigned char *)(a2 + 23);
LABEL_6:
    if (v6 < 0)
    {
      uint64_t v8 = *(void **)a2;
      unint64_t v9 = *(void *)(a2 + 8);
      sub_216778F24((unsigned char *)a3, v8, v9);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
    }
    return;
  }

  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a1, a2, a3);
}

void sub_216E0B1F0(uint64_t a1)
{
  v20[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = **(void **)(a1 + 8);
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v18);
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = v19;
  uint64_t v2 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v15, 0x18uLL);
  *((unsigned char *)v2 - 11) = 1;
  *uint64_t v2 = &unk_26C7698E0;
  v2[1] = v1;
  v2[2] = v20;
  (**(void (***)(void, void *, uint64_t))*(v2 - 5))(*(v2 - 5), v2, (uint64_t)(v2 - 1));
  if (*(void *)(v1 + 24))
  {
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetAllPrototypes(*(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)(v1 + 144), (uint64_t *)&v15);
    sub_216981200(&v12);
    long long v12 = v15;
    uint64_t v13 = v16[0];
    uint64_t v14 = (void **)&v15;
    v16[0] = 0;
    long long v15 = 0uLL;
    sub_216981168(&v14);
    *(void *)&long long v15 = 0;
    *((void *)&v15 + 1) = v19;
    uint64_t v3 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v15, 0x20uLL);
    *((unsigned char *)v3 - 11) = 1;
    void *v3 = &unk_26C769928;
    v3[1] = v1;
    void v3[2] = &v12;
    v3[3] = v20;
    (**(void (***)(void))*(v3 - 5))();
  }
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = v19;
  double v4 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v15, 0x18uLL);
  *((unsigned char *)v4 - 11) = 1;
  *double v4 = &unk_26C769970;
  v4[1] = v1;
  void v4[2] = v20;
  (**(void (***)(void))*(v4 - 5))();
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = v19;
  uint64_t v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v15, 0x18uLL);
  *((unsigned char *)v5 - 11) = 1;
  *uint64_t v5 = &unk_26C7699B8;
  v5[1] = v1;
  void v5[2] = v20;
  (**(void (***)(void))*(v5 - 5))();
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = v19;
  char v6 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v15, 0x18uLL);
  *((unsigned char *)v6 - 11) = 1;
  *char v6 = &unk_26C769A00;
  v6[1] = v1;
  v6[2] = v20;
  (**(void (***)(void))*(v6 - 5))();
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = v19;
  char v7 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v15, 0x18uLL);
  *((unsigned char *)v7 - 11) = 1;
  *char v7 = &unk_26C769A48;
  v7[1] = v1;
  void v7[2] = v20;
  (**(void (***)(void))*(v7 - 5))();
  *(void *)&long long v15 = 0;
  *((void *)&v15 + 1) = v19;
  uint64_t v8 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v15, 0x18uLL);
  *((unsigned char *)v8 - 11) = 1;
  *uint64_t v8 = &unk_26C769A90;
  v8[1] = v1;
  uint64_t v8[2] = v20;
  (**(void (***)(void))*(v8 - 5))();
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)&v15);
  unint64_t v9 = *(atomic_uint **)(v1 + 56);
  *(_OWORD *)(v1 + 48) = v15;
  *((void *)&v15 + 1) = 0;
  if (v9 && atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
  }
  *(void *)&long long v15 = 0;
  if ((long long *)(v1 + 48) != &v15)
  {
    uint64_t v10 = (_DWORD *)sub_216BBED8C(v1 + 64);
    sub_216BBFB70(v10, (uint64_t)v16);
  }
  *(_OWORD *)(v1 + 104) = v17;
  sub_216BBED8C((uint64_t)v16);
  uint64_t v11 = *((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v18);
  v18[0] = (void **)&v12;
  sub_216981168(v18);
}

void sub_216E0B718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = (void **)&a9;
  sub_216981168(&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0B770(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v9);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = v2[99];
  uint64_t v4 = v2[100];
  while (v3 != v4)
  {
    pxrInternal__aapl__pxrReserved__::TfNotice::Revoke((uint64_t *)(v3 + 16));
    v3 += 32;
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::Revoke(v2 + 103);
  unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v6 = v9;
  unint64_t v7 = atomic_load((unint64_t *)(v5 + 144));
  if (v6 < v7
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v9, (atomic_ullong *)v5))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v9, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v9);
  return 0;
}

void sub_216E0B82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0B84C(void *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  uint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)a1[2];
  unint64_t v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v2);
  unint64_t v6 = v4[1];
  if (v6 >= v4[2])
  {
    uint64_t v8 = sub_216981B30(v4, v5);
  }
  else
  {
    sub_216981010((_DWORD *)v4[1], v5);
    sub_21698105C((_DWORD *)(v6 + 4), v5 + 1);
    uint64_t v8 = v6 + 8;
  }
  v4[1] = v8;
  pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrimsInParallel(v3, a1[2], v7);
  *(void *)(v3 + 24) = 0;
  sub_216C6A68C((pxrInternal__aapl__pxrReserved__ *)a1[2]);
  unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v10 = v13;
  unint64_t v11 = atomic_load((unint64_t *)(v9 + 144));
  if (v10 < v11
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13, (atomic_ullong *)v9))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v13, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  return 0;
}

void sub_216E0B944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0B960(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216E0BA0C((pxrInternal__aapl__pxrReserved__::PcpCache **)(*(void *)(a1 + 8) + 128), 0);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216E0B9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216E0BA0C(pxrInternal__aapl__pxrReserved__::PcpCache **a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  unint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::~PcpCache(v3);
    operator delete(v4);
  }
}

uint64_t sub_216E0BA54(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216E0BB00((pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(*(void *)(a1 + 8) + 136), 0);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216E0BAEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216E0BB00(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **a1, pxrInternal__aapl__pxrReserved__::Usd_ClipCache *a2)
{
  unint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Usd_ClipCache::~Usd_ClipCache(v3);
    operator delete(v4);
  }
}

uint64_t sub_216E0BB48(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v5 = *(void ***)(v2 + 144);
  unint64_t v3 = (void *)(v2 + 144);
  unint64_t v4 = v5;
  void *v3 = 0;
  if (v5) {
    sub_216E0BBF8((uint64_t)v3, v4);
  }
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v7 = v10;
  unint64_t v8 = atomic_load((unint64_t *)(v6 + 144));
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (atomic_ullong *)v6))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v10, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  return 0;
}

void sub_216E0BBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216E0BBF8(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_216E0BC84((uint64_t)(a2 + 28));
    sub_216E0BC84((uint64_t)(a2 + 23));
    sub_21698F21C((uint64_t)(a2 + 20), a2[21]);
    sub_216E0BCC0((uint64_t)(a2 + 17), a2[18]);
    sub_21698F21C((uint64_t)(a2 + 14), a2[15]);
    sub_21698F21C((uint64_t)(a2 + 11), a2[12]);
    sub_216E0BD1C((uint64_t)(a2 + 6));
    sub_216E0BD9C((uint64_t)(a2 + 1));
    operator delete(a2);
  }
}

uint64_t sub_216E0BC84(uint64_t a1)
{
  sub_216CF4978(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216E0BCC0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216E0BCC0(a1, *a2);
    sub_216E0BCC0(a1, a2[1]);
    sub_216CF611C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_216E0BD1C(uint64_t a1)
{
  sub_216E0BD58(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216E0BD58(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216CF4A40((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216E0BD9C(uint64_t a1)
{
  sub_216E0BDD8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216E0BDD8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216CF4ACC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216E0BE24(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216BDC8D4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(void *)(a1 + 8) + 40));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216E0BEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0BED4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216BDC8D4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(void *)(a1 + 8) + 32));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216E0BF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0BF7C(pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *a1, pxrInternal__aapl__pxrReserved__::ArResolverContext *a2)
{
  if (*((unsigned char *)a1 + 48))
  {
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder(a1);
    *((unsigned char *)a1 + 48) = 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder(a1, a2);
  *(unsigned char *)(result + 48) = 1;
  return result;
}

double sub_216E0BFBC@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)&long long v9 = a1;
  unint64_t v10 = (_DWORD *)tbb::internal::concurrent_vector_base_v3::internal_push_back((atomic_ullong *)(a1 + 8), 8, (unint64_t *)&v9 + 1, a3);
  unint64_t v6 = sub_216981010(v10, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  unint64_t v7 = v10;
  double result = *(double *)&v9;
  *(_OWORD *)a4 = v9;
  *(void *)(a4 + 16) = v7;
  return result;
}

double sub_216E0C028@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)&long long v9 = a1;
  unint64_t v10 = (_DWORD *)tbb::internal::concurrent_vector_base_v3::internal_push_back((atomic_ullong *)(a1 + 8), 8, (unint64_t *)&v9 + 1, a3);
  unint64_t v6 = sub_21697D878(v10, a2);
  sub_21697D8B4(v6 + 1, a2 + 1);
  unint64_t v7 = v10;
  double result = *(double *)&v9;
  *(_OWORD *)a4 = v9;
  *(void *)(a4 + 16) = v7;
  return result;
}

void sub_216E0C098(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *v1;
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(*v1 + 848);
  sub_216E0C274(v3);
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *)v11, *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(v2 + 136));
  uint64_t v4 = *(void *)v1[1];
  if (*(void *)(v1[1] + 8) != v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v4 + 8 * v5);
      uint64_t v7 = v1[2];
      uint64_t v8 = *(void *)(v2 + 1104);
      v10[0] = 0;
      v10[1] = v8;
      long long v9 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x30uLL);
      *((unsigned char *)v9 - 11) = 1;
      *long long v9 = &unk_26C769B18;
      v9[1] = v2;
      void v9[2] = v6;
      void v9[3] = v7;
      void v9[4] = v5;
      v9[5] = v2 + 1112;
      (**(void (***)(void))*(v9 - 5))();
      ++v5;
      uint64_t v4 = *(void *)v1[1];
    }
    while (v5 != (*(void *)(v1[1] + 8) - v4) >> 3);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(v3);
  if (*(unsigned char *)(v2 + 1184))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v3);
    *(unsigned char *)(v2 + 1184) = 0;
  }
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::~ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *)v11);
}

void sub_216E0C200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::~ConcurrentPopulationContext((pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0C274(pxrInternal__aapl__pxrReserved__::WorkDispatcher *a1)
{
  if (*((unsigned char *)a1 + 336))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(a1);
    *((unsigned char *)a1 + 336) = 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher(a1);
  *(unsigned char *)(result + 336) = 1;
  return result;
}

uint64_t sub_216E0C2AC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16);
  Parent = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(v3);
  uint64_t v5 = **(void ***)(a1 + 24);
  if (v5) {
    uint64_t v6 = (_DWORD *)(*v5 + 8 * *(void *)(a1 + 32));
  }
  else {
    uint64_t v6 = (_DWORD *)(*(void *)(a1 + 16) + 16);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeSubtreeImpl((pxrInternal__aapl__pxrReserved__ *)v2, (uint64_t)v3, Parent, (const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)(v2 + 1208), v6);
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v8 = v11;
  unint64_t v9 = atomic_load((unint64_t *)(v7 + 144));
  if (v8 < v9
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11, (atomic_ullong *)v7))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v11, *(void *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v11);
  return 0;
}

void sub_216E0C380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_216E0C394(unint64_t *a1)
{
  return a1;
}

uint64_t sub_216E0C3C0(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 528);
  for (uint64_t i = 536; i != 584; i += 24)
    *(void *)(a1 + i) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  __dmb(0xBu);
  *(void *)a1 = 0;
  __dmb(0xBu);
  *(void *)(a1 + 520) = 0;
  *uint64_t v2 = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(void *)(a1 + 8) = v2;
  __dmb(0xBu);
  *(void *)a1 = 1;
  *(void *)(a1 + 584) = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::GetEmptyPrimType((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)a1);
  return a1;
}

void sub_216E0C494(_Unwind_Exception *a1)
{
  sub_216E0C4AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0C4AC(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = (void *)(v9 + 16);
      unint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *unint64_t v11 = *v10;
          sub_216D12628((uint64_t)a1, (uint64_t)v10);
          unint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216E0C57C((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216E0C57C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *unint64_t v4 = 0;
  return result;
}

void sub_216E0C5CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 <= 0x1AF286BCA1AF286)
  {
    uint64_t v5 = (uint64_t)(a1 + 2);
    unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v2) >> 3);
    if (2 * v6 > v4) {
      unint64_t v4 = 2 * v6;
    }
    if (v6 >= 0xD79435E50D7943) {
      unint64_t v7 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v7 = v4;
    }
    unint64_t v13 = a1 + 2;
    if (v7) {
      char v8 = (char *)sub_216E0C754(v5, v7);
    }
    else {
      char v8 = 0;
    }
    unint64_t v9 = v8;
    unint64_t v10 = &v8[152 * v3];
    unint64_t v11 = v10;
    unint64_t v12 = &v8[152 * v7];
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  sub_21677CB10();
}

void sub_216E0C6C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E0CA38((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0C6DC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E0C7A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216E0C754(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_21677CA1C();
  }
  return operator new(152 * a2);
}

uint64_t sub_216E0C7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 152;
      sub_216E0C858(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216E0C924((uint64_t)v13);
  return v11;
}

__n128 sub_216E0C858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a3 + 104);
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  __n128 result = *(__n128 *)(a3 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a3 + 144);
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  return result;
}

uint64_t sub_216E0C924(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E0C95C((uint64_t *)a1);
  }
  return a1;
}

void sub_216E0C95C(uint64_t *a1)
{
  uint64_t v1 = *(void ***)(a1[2] + 8);
  uint64_t v2 = *(void ***)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216E0C9B0(v3, v1);
      v1 += 19;
    }
    while (v1 != v2);
  }
}

void sub_216E0C9B0(uint64_t a1, void **a2)
{
  uint64_t v3 = a2 + 16;
  sub_216889A04(&v3);
  uint64_t v3 = a2 + 13;
  sub_216889A04(&v3);
  uint64_t v3 = a2 + 10;
  sub_216889A04(&v3);
  uint64_t v3 = a2 + 7;
  sub_216889A04(&v3);
  uint64_t v3 = a2 + 4;
  sub_216889A04(&v3);
  uint64_t v3 = a2 + 1;
  sub_216889A04(&v3);
}

void **sub_216E0CA38(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216E0CA6C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    sub_216E0C9B0(v4, (void **)(i - 152));
  }
}

void sub_216E0CAB4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 19;
        sub_216E0C9B0((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216E0CB50(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(*v1 + 848);
  sub_216E0C274(v3);
  uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)v1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      uint64_t PrimDataAtPath = pxrInternal__aapl__pxrReserved__::UsdStage::_GetPrimDataAtPath((pxrInternal__aapl__pxrReserved__::UsdStage *)v2, v5);
      if (PrimDataAtPath
        || (unint64_t v10 = "usd/stage.cpp",
            uint64_t v11 = "operator()",
            uint64_t v12 = 3447,
            unint64_t v13 = "auto pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrimsInParallel(const vector<SdfPath> &)::(an"
                  "onymous class)::operator()() const",
            char v14 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "prim", 0) & 1) != 0))
      {
        uint64_t v8 = *(const char **)(v2 + 1104);
        unint64_t v10 = 0;
        uint64_t v11 = v8;
        uint64_t v9 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v10, 0x20uLL);
        *((unsigned char *)v9 - 11) = 1;
        *uint64_t v9 = &unk_26C769BA0;
        v9[1] = v2;
        void v9[2] = PrimDataAtPath;
        void v9[3] = v2 + 1112;
        (**(void (***)(void))*(v9 - 5))();
      }
      uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    }
    while (v5 != v6);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(v3);
  if (*(unsigned char *)(v2 + 1184))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v3);
    *(unsigned char *)(v2 + 1184) = 0;
  }
}

uint64_t sub_216E0CCD0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrim(*(pxrInternal__aapl__pxrReserved__::UsdStage **)(a1 + 8), *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 16));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216E0CD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0CD74(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  *(void *)(a1 + 16) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 24), (_DWORD *)(a3 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 28), (_DWORD *)(a3 + 20));
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  return a1;
}

uint64_t sub_216E0CDDC(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a3 + 16));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a3 + 20));
  uint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a1 + 32) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

uint64_t sub_216E0CE70(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 5;
    if ((unint64_t)(v11 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      long long v15 = (char *)sub_2168707F4(v6, v14);
    }
    else {
      long long v15 = 0;
    }
    long long v17 = v15;
    uint64_t v18 = &v15[32 * v11];
    uint64_t v20 = &v15[32 * v14];
    sub_216E0CF94((uint64_t)v18, a2, a3);
    uint64_t v19 = v18 + 32;
    sub_216E0D084(a1, &v17);
    uint64_t v10 = a1[1];
    sub_216E0D2D8(&v17);
  }
  else
  {
    sub_216E0CF94(*(void *)(v6 - 8), a2, a3);
    uint64_t v10 = v9 + 32;
    a1[1] = v9 + 32;
  }
  a1[1] = v10;
  return v10 - 32;
}

void sub_216E0CF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216E0CF94(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_21697D878((_DWORD *)a1, a2);
  sub_21697D8B4(v6 + 1, a2 + 1);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_216E0D008((void *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  return a1;
}

void sub_216E0CFF4(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void *sub_216E0D008(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216E0D068(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216E0D084(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E0D0FC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216E0D0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216E0D1A4(v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216E0D1FC((uint64_t)v12);
  return v10;
}

uint64_t sub_216E0D1A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sub_216E0D1FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E0D234((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216E0D234(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216E0D288(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

_DWORD *sub_216E0D288(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    operator delete(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void **sub_216E0D2D8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216E0D30C(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 32;
      uint64_t result = sub_216E0D288(v4, v1 - 32);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_216E0D354(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216E0D288((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_216E0D3EC(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7 = (void **)sub_216981754((uint64_t)a1, &v13, a2);
  uint64_t v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (uint64_t **)v7;
    uint64_t v8 = (uint64_t *)operator new(0x30uLL);
    v11[1] = a1 + 1;
    sub_2169D36F0((_DWORD *)v8 + 7, a3, a4);
    char v12 = 1;
    sub_21677B358(a1, v13, v9, v8);
    v11[0] = 0;
    sub_21698F170((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t sub_216E0D4A4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *sub_216981754(a1, &v4, a2);
  if (!v2) {
    sub_216855AEC("map::at:  key not found");
  }
  return v2 + 36;
}

uint64_t sub_216E0D4E4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (unint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
    unint64_t v3 = *(void *)(v2 + 56);
  }
  return (v3 >> 8) & 1;
}

void sub_216E0D520(uint64_t *a1, unsigned __int8 *a2)
{
  if (sub_216ABDD60((uint64_t)a1) && ((*(uint64_t (**)(void))(*(void *)*a1 + 24))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))())
    {
      sub_216E0D6A8(a1, 0, a2);
    }
    else
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[1];
      uint64_t v5 = *a1;
      uint64_t v6 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 2;
      sub_216D83ABC((unsigned int *)&v5, a2);
      if (v6) {
        sub_216784EC4(v6);
      }
      sub_216E0D6A8(a1, 1, a2);
    }
  }
}

void sub_216E0D620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216E0D638(pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  v4[0] = 0;
  v4[1] = 0;
  unint64_t v3 = v4;
  sub_216E0D9B8(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3);
  sub_216E0DA60(a2, &v3);
  sub_216D61968((uint64_t)&v3, v4[0]);
}

void sub_216E0D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_216E0D6A8(uint64_t *a1, int a2, unsigned __int8 *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v14 = *a1;
  long long v15 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = a2;
  uint64_t v5 = (void *)sub_216D833EC((uint64_t)&v14, a3);
  if (v5 == (void *)-1)
  {
    sub_216D83C38((unsigned int *)&v14, (long long *)a3);
    goto LABEL_16;
  }
  if (sub_216D836C4((uint64_t)&v14)) {
    uint64_t v6 = (unsigned int *)&v14;
  }
  else {
    uint64_t v6 = 0;
  }
  sub_216E0D874(v6, (uint64_t)v5, (char *)__p);
  char v7 = pxrInternal__aapl__pxrReserved__::SdfReference::operator==(a3, (unsigned __int8 *)__p);
  sub_2168EBBB8(&v13, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(&v11);
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      goto LABEL_16;
    }
  }
  else if (v7)
  {
    goto LABEL_16;
  }
  if (sub_216D836C4((uint64_t)&v14)) {
    uint64_t v8 = &v14;
  }
  else {
    uint64_t v8 = 0;
  }
  __p[0] = v8;
  __p[1] = v5;
  sub_216E0D7F0((uint64_t)__p, (long long *)a3);
LABEL_16:
  if (v15) {
    sub_216784EC4(v15);
  }
}

void sub_216E0D7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216E0D7F0(uint64_t a1, long long *a2)
{
  unint64_t v3 = *(unsigned int **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  sub_216D8373C(v6, 1uLL, a2);
  sub_216D83528(v3, v4, 1, v6);
  char v7 = (void **)v6;
  sub_2169CC68C(&v7);
  return a1;
}

void sub_216E0D85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216E0D874(unsigned int *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  if (sub_216D837E8((uint64_t)a1))
  {
    uint64_t v6 = (void *)(*(uint64_t (**)(void, void))(**(void **)a1 + 112))(*(void *)a1, a1[4]);
    sub_2169D5338(a3, (long long *)(*v6 + 56 * a2));
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v9 + 1);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v8, 0.0, 1.0);
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(a3, __p, &v9, v8, &v7);
    sub_2168EBBB8(&v7, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
    sub_21697C414(&v9);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216E0D980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, int a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216E0D9B8(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, a2, &v6);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v6);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetAllMetadata(v4, a1, 0, (uint64_t **)a2, 1);
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216E0DA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216E0DA60(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, void *a2)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    uint64_t v31 = (void **)"usd/stage.cpp";
    BOOL v32 = "_CopyMetadata";
    uint64_t v33 = 5349;
    uint64_t v34 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyMetadata(const SdfSpecHandle &, const UsdMe"
          "tadataValueMap &)";
    char v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid destination spec, unable to copy metadata");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
    uint64_t v27 = 0;
    char v28 = 0;
    unint64_t v29 = 0;
    uint64_t v6 = (void *)*a2;
    uint64_t v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      do
      {
        uint64_t v7 = sub_21697F2E0(a1);
        pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 4), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 5));
        unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v8) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v9 = v30;
        unint64_t v10 = atomic_load((unint64_t *)(v8 + 144));
        if (v9 < v10
          && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (atomic_ullong *)v8))
        {
          uint64_t v11 = v27;
          for (uint64_t i = v28; i != v11; --i)
          {
            if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(i[-1].__r_.__value_.__l.__data_);
            }
          }
          char v28 = v11;
          for (uint64_t j = sub_216862604(&v30, 0); j != (void *)sub_216878D10(); uint64_t j = (void *)j[1])
          {
            uint64_t v14 = (long long *)(j + 7);
            long long v15 = (long long *)v28;
            if ((unint64_t)v28 >= v29)
            {
              long long v17 = (std::string *)sub_2167E9A44((uint64_t *)&v27, v14);
            }
            else
            {
              if (*((char *)j + 79) < 0)
              {
                sub_216778F24(v28, (void *)j[7], j[8]);
              }
              else
              {
                long long v16 = *v14;
                v28->__r_.__value_.__r.__words[2] = j[9];
                *long long v15 = v16;
              }
              long long v17 = (std::string *)((char *)v15 + 24);
            }
            char v28 = v17;
          }
          uint64_t v18 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v18) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
          uint64_t v19 = sub_216862604(&v30, 0);
          __p.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v20 = (void *)sub_2168520EC(v18 + 19, &__p);
          if (v20 != v19) {
            pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v18, v19, v20);
          }
          uint64_t v31 = (void **)"usd/stage.cpp";
          BOOL v32 = "_CopyMetadata";
          uint64_t v33 = 5363;
          uint64_t v34 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyMetadata(const SdfSpecHandle &, const"
                " UsdMetadataValueMap &)";
          char v35 = 0;
          pxrInternal__aapl__pxrReserved__::TfStringJoin(" ", &v27, &__p);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"Failed copying metadata: %s", v21, p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v23 = (void *)v5[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v5[2];
            BOOL v25 = *v24 == (void)v5;
            uint64_t v5 = v24;
          }
          while (!v25);
        }
        uint64_t v5 = v24;
      }
      while (v24 != v4);
    }
    uint64_t v31 = (void **)&v27;
    sub_216782F20(&v31);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
  }
}

void sub_216E0DD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a21 = &a17;
  sub_216782F20((void ***)&a21);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0DD6C(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t **a3)
{
  v19[2] = *(long long **)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)v16, a1);
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t TimeSamples = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamples((uint64_t)v16, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&__p);
  uint64_t v7 = (double *)__p;
  if (TimeSamples)
  {
    unint64_t v8 = v14;
    if (__p != v14)
    {
      do
      {
        v19[1] = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::Get(v16, v19, *v7))
        {
          sub_216E0DF6C(a1, a2, v19, *v7);
          double v17 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a2, *v7);
          v18[0] = (uint64_t *)&v17;
          unint64_t v9 = sub_216A9E780(a3, &v17, (uint64_t)&unk_2174BFD90, v18);
          sub_21697DC0C(v9 + 5, v19);
        }
        else
        {
          v18[1] = (uint64_t *)((char *)&off_26C75B258 + 3);
          double v12 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a2, *v7);
          double v17 = COERCE_DOUBLE(&v12);
          unint64_t v10 = sub_216A9E780(a3, &v12, (uint64_t)&unk_2174BFD90, (uint64_t **)&v17);
          sub_2168ED33C(v10 + 5, v18);
          sub_2168EE084((uint64_t)v18);
        }
        sub_2168EE084((uint64_t)v19);
        ++v7;
      }
      while (v7 != v8);
      uint64_t v7 = (double *)__p;
    }
  }
  if (v7)
  {
    uint64_t v14 = v7;
    operator delete(v7);
  }
  sub_216D2FE74((uint64_t)v16);
  return TimeSamples;
}

void sub_216E0DF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_216D2FE74((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_216E0DF6C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, long long **a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, a2, &v11);
  unint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v11);
  pxrInternal__aapl__pxrReserved__::UsdStage::_MakeResolvedAssetPathsValue(v8, a1, a3, 1, a4);
  uint64_t v9 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(a2)) {
    pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue((const void *****)a3, a2, v10);
  }
}

void sub_216E0E02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

int **sub_216E0E044(int **result, void *a2)
{
  if (a2[2])
  {
    uint64_t v2 = *result;
    unint64_t v3 = result[1];
    if (*result != v3)
    {
      uint64_t v5 = (int **)(a2 + 1);
      do
      {
        uint64_t result = (int **)sub_216AFBFC0(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v2, 0, (uint64_t)&v7);
        if (v5 != result)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)v2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)result + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)result + 36), 1);
          sub_21697DE94(v2, (int *)&v6);
          sub_21697DEEC(v2 + 1, (int *)&v6 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
          uint64_t result = (int **)sub_21697C414(&v6);
        }
        v2 += 2;
      }
      while (v2 != v3);
    }
  }
  return result;
}

int *sub_216E0E108(int *a1, int **a2)
{
  uint64_t result = sub_216E0E374(*a2, a2[1], (uint64_t (*)(int *))pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype);
  if (a2[1] != result)
  {
    uint64_t v5 = result;
    v12[0] = "usd/stage.cpp";
    v12[1] = "_RemovePrototypeTargetPaths";
    void v12[2] = 5299;
    void v12[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_RemovePrototypeTargetPaths(const UsdProperty"
             " &, SdfPathVector *)";
    char v13 = 0;
    int v6 = *a1;
    sub_216D0162C((uint64_t)a1, &v10);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    uint64_t v9 = "relationship target";
    if (v6 == 3) {
      uint64_t v9 = "attribute connection";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v12, (pxrInternal__aapl__pxrReserved__ *)"Some %s paths from <%s> could not be flattened because they targeted objects within an instancing prototype.", v8, v9, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    return sub_216AD6870((uint64_t)a2, v5, a2[1]);
  }
  return result;
}

void sub_216E0E1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216E0E20C()
{
}

void sub_216E0E280()
{
}

uint64_t sub_216E0E2CC(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

int *sub_216E0E374(int *a1, int *a2, uint64_t (*a3)(int *))
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while ((a3(v5) & 1) == 0)
  {
    v5 += 2;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 != a2 && v5 + 2 != a2)
  {
    char v7 = v5 + 3;
    do
    {
      if ((a3(v7 - 1) & 1) == 0)
      {
        sub_21697DE94(v5, v7 - 1);
        sub_21697DEEC(v5 + 1, v7);
        v5 += 2;
      }
      unint64_t v8 = v7 + 1;
      v7 += 2;
    }
    while (v8 != a2);
  }
  return v5;
}

void sub_216E0E42C()
{
}

void sub_216E0E4A0()
{
}

uint64_t sub_216E0E4EC(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_216E0E594(const pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v2 + 17) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    unint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 6) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 11) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }

  return sub_216E053B8(a1);
}

uint64_t sub_216E0E678(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsDisallowedField(this, this)) {
    return 0;
  }
  char v7 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)(a1 + 8);
  int v10 = *v7;
  uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 1);
  unint64_t v8 = v10;

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v8, v9, this, a3);
}

uint64_t sub_216E0E6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)(a3 + 16));
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)(a3 + 20));
  uint64_t v6 = *(void *)(a3 + 24);
  *(void *)(a1 + 32) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_WORD *)(a1 + 40) = 0;
  return a1;
}

void sub_216E0E77C(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  if (*(void *)a2)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = v5;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v9);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, a2, a3);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = v7;
    unint64_t v8 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v9);
    sub_216981010(a3, v8);
    sub_21698105C(a3 + 1, v8 + 1);
  }
}

void *sub_216E0E800()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v0) {
    unint64_t v0 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v0 + 24, (uint64_t *)v0 + 24);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v1) {
    uint64_t v1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v1 + 30, (uint64_t *)v1 + 30);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v2 + 35, (uint64_t *)v2 + 35);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    unint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v3 + 38, (uint64_t *)v3 + 38);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v4 + 45, (uint64_t *)v4 + 45);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5) {
    uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v5 + 46, (uint64_t *)v5 + 46);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v6 + 57, (uint64_t *)v6 + 57);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v7 + 59, (uint64_t *)v7 + 59);
  pxrInternal__aapl__pxrReserved__::UsdGetClipRelatedFields(&v13);
  unint64_t v8 = v13;
  for (uint64_t i = v14; v8 != i; ++v8)
    sub_2168D4AAC((uint64_t)&xmmword_267B92040, v8, v8);
  uint64_t v15 = (void **)&v13;
  sub_216889A04(&v15);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10) {
    uint64_t v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v10 + 11, (uint64_t *)v10 + 11);
  int v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11) {
    int v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_2168D4AAC((uint64_t)&xmmword_267B92040, (void *)v11 + 54, (uint64_t *)v11 + 54);
}

void sub_216E0EA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0EA58(uint64_t a1, _DWORD *a2, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), pxrInternal__aapl__pxrReserved__::VtValue *a4, double a5)
{
  double v27 = a5;
  sub_216D1CEAC((uint64_t)&v21);
  long long v18 = 0u;
  uint64_t v20 = 0;
  long long v19 = (unint64_t)a4;
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17);
  char v28 = a2;
  sub_216E0F0B8(a1, a2, &v21, (void **)&v27, &v18, (uint64_t)&v28);
  if (v26 == 4)
  {
    uint64_t IsCleanImpl = sub_216E0EF10(a2, (uint64_t)&v21, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)&v19 + 1, (unint64_t *)&v18, (double *)&v18 + 1, (uint64_t)a3, v27);
    goto LABEL_5;
  }
  if (v26 == 3)
  {
    uint64_t IsCleanImpl = sub_216E0EC7C(a2, &v21, (double *)&v18, (double *)&v18 + 1, a3, a4, v27);
LABEL_5:
    uint64_t v10 = IsCleanImpl;
    goto LABEL_6;
  }
  if ((v26 - 1) > 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v14) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v15 = v17;
    unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
    if (v15 < v16)
    {
      uint64_t IsCleanImpl = pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17, (atomic_ullong *)v14);
      goto LABEL_5;
    }
    uint64_t v10 = 1;
  }
LABEL_6:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17);
  if (v20) {
    sub_216784EC4(v20);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  uint64_t v11 = v23;
  if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v22;
  if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return v10;
}

void sub_216E0EC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0EC7C(_DWORD *a1, uint64_t *a2, double *a3, double *a4, uint64_t (***a5)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), pxrInternal__aapl__pxrReserved__::VtValue *a6, double a7)
{
  double v48 = a7;
  char v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8);
  unint64_t v14 = sub_216D563F8(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v13, v14, &v46);
  double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 6));
  long long v40 = v15;
  double v16 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(&Inverse, a7);
  unint64_t v17 = a2 + 2;
  double v45 = 0.0;
  double v44 = 0.0;
  if (a3 && a4)
  {
    double v44 = *a3;
    double v45 = *a4;
  }
  else
  {
    long long v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, v16, &v44, &v45) & 1) == 0)
    {
      double Inverse = COERCE_DOUBLE("usd/stage.cpp");
      long long v40 = "_GetTimeSampleValue";
      uint64_t v41 = 8116;
      int v42 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdStage_ResolveInfoAccess::_GetTimeSampleValue(UsdTimeCode, c"
            "onst UsdAttribute &, const UsdResolveInfo &, const double *, const double *, Usd_InterpolatorBase *, T *) [T"
            " = pxrInternal__aapl__pxrReserved__::VtValue]";
      char v43 = 0;
      unint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v17);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
      int v32 = *(char *)(Identifier + 23);
      uint64_t v33 = *(void *)Identifier;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
      uint64_t v37 = v32 >= 0 ? Identifier : v33;
      uint64_t v38 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No bracketing time samples for %s on <%s> for time %g between %g and %g", v35, v36, v37, Text, *(void *)&v16, *(void *)&v44, *(void *)&v45);
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&Inverse, "layer->GetBracketingTimeSamplesForPath( specPath, localTime, &lower, &upper)", v38) & 1) == 0)
      {
        uint64_t v28 = 0;
        goto LABEL_17;
      }
    }
  }
  if (sub_216C4B19C(15))
  {
    long long v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20) {
      uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unint64_t v21 = *((void *)v20 + 54) & 0xFFFFFFFFFFFFFFF8;
    if (v21)
    {
      uint64_t v22 = (const char *)(v21 + 16);
      if (*(char *)(v21 + 39) < 0) {
        uint64_t v22 = *(const char **)v22;
      }
    }
    else
    {
      uint64_t v22 = "";
    }
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v17);
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v23);
    if (*(char *)(v24 + 23) >= 0) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = *(void *)v24;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"RESOLVE: reading field %s:%s from @%s@, with requested time = %.3f (local time = %.3f) reading from sample %.3f \n", v25, v26, v19, v22, v27, *(void *)&v48, *(void *)&v16, *(void *)&v44);
  }
  uint64_t v28 = sub_216E101E8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, a5, a6, v16, v44, v45);
LABEL_17:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  sub_21697C414(&v46);
  return v28;
}

void sub_216E0EEEC(_Unwind_Exception *a1)
{
  sub_21697B754((_DWORD *)(v1 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_216E0EF10(_DWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a3, unint64_t *a4, double *a5, uint64_t a6, double a7)
{
  double v31 = a7;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 64);
  char v13 = sub_216D563F8(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v12, v13, &v29);
  double v28 = a7;
  unint64_t v26 = 0;
  double v27 = 0.0;
  if (a4 && a5)
  {
    double v14 = *a5;
    unint64_t v26 = *a4;
    double v27 = v14;
  }
  else
  {
    sub_216E07674(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v28, (double *)&v26, &v27);
  }
  if (sub_216C4B19C(15))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20) {
      uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unint64_t v21 = *((void *)v20 + 54) & 0xFFFFFFFFFFFFFFF8;
    if (v21)
    {
      uint64_t v22 = (const char *)(v21 + 16);
      if (*(char *)(v21 + 39) < 0) {
        uint64_t v22 = *(const char **)v22;
      }
    }
    else
    {
      uint64_t v22 = "";
    }
    uint64_t v23 = *a3;
    if (*((char *)*a3 + 23) < 0) {
      uint64_t v23 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)v23;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"RESOLVE: reading field %s:%s from clip set %s, with requested time = %.3f reading from sample %.3f \n", v17, v18, Text, v22, v23, *(void *)&v28, v26);
  }
  v15.n128_f64[0] = v28;
  v16.n128_u64[0] = v26;
  uint64_t v24 = sub_216E103A0(a3, (uint64_t)&v29, a6, v15, v16, v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_21697C414(&v29);
  return v24;
}

void sub_216E0F098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216E0F0B8(uint64_t a1, _DWORD *a2, _DWORD *a3, void **a4, _DWORD *a5, uint64_t a6)
{
  long long v18 = 0;
  memset(v17, 0, sizeof(v17));
  unint64_t v8 = v17;
  if (a5) {
    unint64_t v8 = a5;
  }
  v16[0] = a2;
  v16[1] = a3;
  void v16[2] = v8;
  if (a4)
  {
    __p[0] = *a4;
    sub_216E0F210(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, v16, (double *)__p, a6);
  }
  else
  {
    sub_216E0F210(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2, v16, 0, a6);
  }
  BOOL v9 = sub_216C4B19C(16);
  if (v9
    && (a3[18] - 3) <= 1
    && pxrInternal__aapl__pxrReserved__::UsdStage::_GetVariability((pxrInternal__aapl__pxrReserved__::UsdStage *)v9, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)a2) == 1&& sub_216C4B19C(16))
  {
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)a2, v10);
    char v13 = v15 >= 0 ? __p : (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Warning: detected time sample value on uniform attribute <%s>\n", v11, v12, v13);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v18) {
    sub_216784EC4(v18);
  }
}

void sub_216E0F1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a24) {
    sub_216784EC4(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_216E0F210(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, _DWORD **a3, double *a4, uint64_t a5)
{
  uint64_t v10 = (atomic_ullong *)*((void *)a2 + 1);
  if (!v10 || (atomic_fetch_add_explicit(v10 + 6, 1uLL, memory_order_relaxed), atomic_ullong v11 = v10[7], (v11 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v10, a2);
    atomic_ullong v11 = v10[7];
  }
  if ((v11 & 0x400) == 0)
  {
    uint64_t v12 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(*(void *)a5 + 8);
    if (!v12 || (*((unsigned char *)v12 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(*(void *)a5 + 8), a2);
    }
    PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v12);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v34, PrimIndex, 1);
    double v14 = sub_216D563F8(a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v41 + 1);
    for (BOOL i = 1;
          ;
          BOOL i = pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v34))
    {
      unint64_t v17 = v35;
      long long v18 = v36;
      if (v35 == v37 && v36 == v38) {
        break;
      }
      if (i)
      {
        sub_216E0E77C((uint64_t)v34, v14, (int *)&v43);
        sub_21697DE94((int *)&v41, (int *)&v43);
        sub_21697DEEC((int *)&v41 + 1, (int *)&v43 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
        sub_21697C414(&v43);
        unint64_t v17 = v35;
        long long v18 = v36;
      }
      uint64_t v43 = (uint64_t)v17;
      double v44 = v18;
      if (sub_216E0F7F4((uint64_t)a3, v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v43, a4))goto LABEL_27; {
    }
      }
    sub_216E0FCD8(a3, v15);
LABEL_27:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
    int v29 = (int *)&v41;
    goto LABEL_28;
  }
  uint64_t v20 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136);
  if ((v11 & 0x800) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v10, a2);
  }
  ClipsForPriuint64_t m = pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 2));
  uint64_t v23 = *(pxrInternal__aapl__pxrReserved__ **)(*(void *)a5 + 8);
  if (!v23 || (*((unsigned char *)v23 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v23, v21);
  }
  uint64_t v24 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v23);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v34, v24, 0);
  int v25 = sub_216D563F8(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v47);
  uint64_t v43 = 0;
  double v44 = 0;
  uint64_t v45 = 0;
  double v27 = v36;
  double v28 = v35;
  if (v35 != v37 || v36 != v38)
  {
    char v30 = 0;
    BOOL Layer = 1;
    do
    {
      if (Layer)
      {
        sub_216E0E77C((uint64_t)v34, v25, (int *)&v41);
        sub_21697DE94(&v46, (int *)&v41);
        sub_21697DEEC(&v47, (int *)&v41 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
        sub_21697C414(&v41);
        uint64_t v41 = v35;
        int v42 = v36;
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41))
        {
          char v30 = 0;
          goto LABEL_40;
        }
        double v28 = v35;
        double v27 = v36;
      }
      else if ((v30 & 1) == 0)
      {
        goto LABEL_43;
      }
      uint64_t v41 = v28;
      int v42 = v27;
      if (sub_216E0F7F4((uint64_t)a3, v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, a4))goto LABEL_25; {
      char v30 = 1;
      }
      if (!Layer) {
        goto LABEL_44;
      }
LABEL_40:
      v40[0] = v35;
      v40[1] = v36;
      sub_216E0FA94((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v40, (void **)ClipsForPrim, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (uint64_t *)&v41);
      sub_216C4CE90((uint64_t)&v43, (uint64_t *)v41, v42, ((char *)v42 - (char *)v41) >> 4);
      double v48 = &v41;
      sub_216787968((void ***)&v48);
      if (v30)
      {
        char v30 = 1;
        goto LABEL_44;
      }
      if ((uint64_t *)v43 != v44)
      {
LABEL_43:
        char v30 = 0;
LABEL_44:
        uint64_t v32 = v43;
        uint64_t v33 = v44;
        while ((uint64_t *)v32 != v33)
        {
          if (sub_216ABA3A0((uint64_t *)(*(void *)v32 + 48), v39))
          {
            uint64_t v41 = v35;
            int v42 = v36;
            if (sub_216E0FB5C((uint64_t)a3, v32, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, a4))goto LABEL_25; {
          }
            }
          v32 += 16;
        }
        BOOL Layer = pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v34);
        goto LABEL_50;
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextNode((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v34);
      char v30 = 0;
      BOOL Layer = 1;
LABEL_50:
      double v27 = v36;
      double v28 = v35;
    }
    while (v35 != v37 || v36 != v38);
  }
  sub_216E0FCD8(a3, v26);
LABEL_25:
  uint64_t v41 = (void **)&v43;
  sub_216787968(&v41);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  int v29 = &v46;
LABEL_28:
  sub_21697C414(v29);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216E0F5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_21697B754(va);
  if (v12) {
    sub_216D16E0C(v12);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_216E0F698(uint64_t a1, _DWORD *a2, _DWORD **a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
  unint64_t v8 = *(pxrInternal__aapl__pxrReserved__ **)(*(void *)a4 + 8);
  if (!v8 || (*((unsigned char *)v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v8, v7);
  }
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v8);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v18, PrimIndex, 1);
  for (BOOL i = 1;
        ;
        BOOL i = pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v18))
  {
    uint64_t v12 = v19;
    uint64_t v13 = v20;
    if (v19 == v21 && v20 == v22) {
      break;
    }
    if (i)
    {
      char v15 = sub_216D563F8(a2);
      sub_216E0E77C((uint64_t)v18, v15, (int *)v17);
      sub_21697DE94(&v24, (int *)v17);
      sub_21697DEEC(&v25, (int *)v17 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v17 + 1);
      sub_21697C414(v17);
      uint64_t v12 = v19;
      uint64_t v13 = v20;
    }
    v17[0] = v12;
    v17[1] = v13;
    if (sub_216E0FF9C((uint64_t)a3, v23, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v17))goto LABEL_14; {
  }
    }
  sub_216E0FCD8(a3, v10);
LABEL_14:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  return sub_21697C414(&v24);
}

void sub_216E0F7D0(_Unwind_Exception *a1)
{
  sub_21697B754((_DWORD *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216E0F7F4(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a4, double *a5)
{
  *(void *)&long long v29 = sub_216E06358(a4, a2);
  *((void *)&v29 + 1) = v10;
  LOBYTE(v27) = 0;
  char v28 = 0;
  if (a5)
  {
    *(void *)&long long v26 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v29);
    *((void *)&v26 + 1) = v11;
    double v27 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)&v26, *a5);
    char v28 = 1;
    uint64_t v12 = &v27;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (sub_216E0FD54(a2, a3, v12, *(double **)(a1 + 16), (double *)(*(void *)(a1 + 16) + 8)))
  {
    int v13 = 3;
LABEL_10:
    *(_DWORD *)(*(void *)(a1 + 8) + 72) = v13;
    goto LABEL_11;
  }
  int v14 = sub_216E0FDD0(a2, a3, *(pxrInternal__aapl__pxrReserved__::VtValue **)(*(void *)(a1 + 16) + 16));
  if (v14 == 1)
  {
    int v13 = 2;
    goto LABEL_10;
  }
  if (v14 == 2)
  {
    *(unsigned char *)(*(void *)(a1 + 8) + 76) = 1;
    return sub_216E0FCD8((_DWORD **)a1, v15);
  }
  if (!*(_DWORD *)(*(void *)(a1 + 8) + 72)) {
    return 0;
  }
LABEL_11:
  uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a4);
  sub_216BC11A8((uint64_t *)&v26, LayerStack);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = *(atomic_uint **)(v18 + 8);
  *(_OWORD *)uint64_t v18 = v26;
  *((void *)&v26 + 1) = 0;
  if (v19)
  {
    if (atomic_fetch_add_explicit(v19 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = *((void *)&v26 + 1);
    *(void *)&long long v26 = 0;
    if (*((void *)&v26 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  sub_216ABBA60((uint64_t *)&v26, a2);
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v22 = *(atomic_uint **)(v21 + 24);
  *(_OWORD *)(v21 + 16) = v26;
  *((void *)&v26 + 1) = 0;
  if (v22)
  {
    if (atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = *((void *)&v26 + 1);
    *(void *)&long long v26 = 0;
    if (*((void *)&v26 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v23 + 8))(v23); {
    }
      }
  }
  Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a4);
  uint64_t v25 = *(void *)(a1 + 8);
  sub_2169C487C((int *)(v25 + 64), Path);
  sub_2169C48D4((int *)(v25 + 68), Path + 1);
  *(_OWORD *)(*(void *)(a1 + 8) + 48) = v29;
  *(_OWORD *)(*(void *)(a1 + 8) + 32) = *(_OWORD *)a4;
  return 1;
}

void **sub_216E0FA94@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X1>, void **result@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = (long long *)*result;
  uint64_t v5 = (long long *)result[1];
  if (*result != v5)
  {
    do
    {
      uint64_t LayerStack = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
      uint64_t result = (void **)sub_216ABA3A0((uint64_t *)(*(void *)v4 + 24), LayerStack);
      if (result)
      {
        Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
        uint64_t result = (void **)pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(Path, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)v4 + 40));
        if (result)
        {
          uint64_t result = (void **)sub_216E06B5C((uint64_t)v4, a3);
          if (result) {
            uint64_t result = sub_216C4AC9C(a4, v4);
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_216E0FB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216787968((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E0FB5C(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a4, double *a5)
{
  uint64_t v8 = sub_216E07674((pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a5, *(double **)(a1 + 16), (double *)(*(void *)(a1 + 16) + 8));
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v11 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(v9 + 32);
    *(void *)(v9 + 24) = v11;
    *(void *)(v9 + 32) = v10;
    if (v12) {
      sub_216784EC4(v12);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 72) = 4;
    uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a4);
    sub_216BC11A8((uint64_t *)&v20, LayerStack);
    uint64_t v14 = *(void *)(a1 + 8);
    char v15 = *(atomic_uint **)(v14 + 8);
    *(_OWORD *)uint64_t v14 = v20;
    *((void *)&v20 + 1) = 0;
    if (v15)
    {
      if (atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
      }
      uint64_t v16 = *((void *)&v20 + 1);
      *(void *)&long long v20 = 0;
      if (*((void *)&v20 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a4);
    uint64_t v18 = *(void *)(a1 + 8);
    sub_2169C487C((int *)(v18 + 64), Path);
    sub_2169C48D4((int *)(v18 + 68), Path + 1);
    *(_OWORD *)(*(void *)(a1 + 8) + 32) = *(_OWORD *)a4;
  }
  return v8;
}

uint64_t sub_216E0FCD8(_DWORD **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)*a1 + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)*a1 + 1), a2);
  }
  uint64_t v4 = *(atomic_ullong **)(v3 + 24);
  uint64_t explicit = atomic_load_explicit(v4 + 7, memory_order_acquire);
  if (!explicit) {
    uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v4);
  }
  uint64_t v6 = sub_216D563F8(*a1);
  a1[1][18] = sub_216E0FF2C(explicit, v6, *((pxrInternal__aapl__pxrReserved__::VtValue **)a1[2] + 2));
  return 1;
}

uint64_t sub_216E0FD54(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double *a3, double *a4, double *a5)
{
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
  if (!a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v9, a2) != 0;
  }
  double v10 = *a3;

  return pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v9, a2, v10, a4, a5);
}

uint64_t sub_216E0FDD0(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)sub_216AA5ECC(a1);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v6) {
      uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v5, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88), a3);
    if (result)
    {
      if (sub_216A5F85C(a3))
      {
        v11[1] = 0;
        sub_2168ED33C(a3, v11);
        sub_2168EE084((uint64_t)v11);
        return 2;
      }
      else
      {
        return 1;
      }
    }
  }
  else
  {
    if (!v6) {
      uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = (char *)v6 + 88;
    uint64_t v9 = sub_216A5B7B0(v5 + 14);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, char *))(*(void *)v9 + 144))(v9, a2, v8);
    if (sub_21677EC50(v10, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v10, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void *sub_216E0FF2C(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216D801A4(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88), a3);
}

uint64_t sub_216E0FF9C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a4)
{
  int v7 = sub_216E0FDD0(a2, a3, *(pxrInternal__aapl__pxrReserved__::VtValue **)(*(void *)(a1 + 16) + 16));
  if (v7 == 2)
  {
    *(unsigned char *)(*(void *)(a1 + 8) + 76) = 1;
    return sub_216E0FCD8((_DWORD **)a1, v8);
  }
  else if (v7 == 1)
  {
    *(_DWORD *)(*(void *)(a1 + 8) + 72) = 2;
    uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a4);
    sub_216BC11A8((uint64_t *)&v22, LayerStack);
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(atomic_uint **)(v10 + 8);
    *(_OWORD *)uint64_t v10 = v22;
    *((void *)&v22 + 1) = 0;
    if (v11)
    {
      if (atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
      }
      uint64_t v12 = *((void *)&v22 + 1);
      *(void *)&long long v22 = 0;
      if (*((void *)&v22 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    sub_216ABBA60((uint64_t *)&v22, a2);
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = *(atomic_uint **)(v13 + 24);
    *(_OWORD *)(v13 + 16) = v22;
    *((void *)&v22 + 1) = 0;
    if (v14)
    {
      if (atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
      }
      uint64_t v15 = *((void *)&v22 + 1);
      *(void *)&long long v22 = 0;
      if (*((void *)&v22 + 1))
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v15 + 8))(v15); {
      }
        }
    }
    Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a4);
    uint64_t v17 = *(void *)(a1 + 8);
    sub_2169C487C((int *)(v17 + 64), Path);
    sub_2169C48D4((int *)(v17 + 68), Path + 1);
    double v18 = sub_216E06358(a4, a2);
    uint64_t v19 = *(void *)(a1 + 8);
    *(double *)(v19 + 48) = v18;
    *(void *)(v19 + 56) = v20;
    *(_OWORD *)(v19 + 32) = *(_OWORD *)a4;
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_216E101E8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), pxrInternal__aapl__pxrReserved__::VtValue *a4, double a5, double a6, double a7)
{
  void v20[2] = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)MEMORY[0x263EF8340];
  uint64_t v11 = (uint64_t *)(a1 + 1);
  if (vabdd_f64(a6, a7) >= 0.000001)
  {
    double v18 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v11;
    if (*v11)
    {
      if (*(unsigned char *)(sub_216850B68(v11) + 14)) {
        double v18 = *a1;
      }
      else {
        double v18 = 0;
      }
    }
    v20[0] = v18;
    sub_2168BD80C((uint64_t *)v20);
    uint64_t TimeSample = (**a3)(a3, v20, a2, a5, a6, a7);
    sub_216ABB798(v20);
  }
  else
  {
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v11;
    if (*v11)
    {
      if (*(unsigned char *)(sub_216850B68(v11) + 14)) {
        uint64_t v13 = *a1;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    v20[0] = v13;
    sub_2168BD80C((uint64_t *)v20);
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)v20);
    uint64_t TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v14, a2, a6, a4);
    sub_216ABB798(v20);
    if (TimeSample)
    {
      if (a4 && sub_216A5F85C(a4))
      {
        v20[1] = 0;
        sub_2168ED33C(a4, v20);
        sub_2168EE084((uint64_t)v20);
        return 0;
      }
      else
      {
        return 1;
      }
    }
  }
  return TimeSample;
}

void sub_216E10380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E103A0(pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, double a6)
{
  if (vabdd_f64(a5.n128_f64[0], a6) < 0.000001)
  {
    pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a1, a5.n128_f64[0]);
    pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **, uint64_t, __n128, __n128))(*(void *)a3 + 8);

  return v6(a3, a1, a2, a4, a5);
}

void *sub_216E10514(uint64_t a1, uint64_t *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  int v4 = *((_DWORD *)a2 + 18);
  if (!v4) {
    return 0;
  }
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      uint64_t v8 = sub_216D563F8((_DWORD *)a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), v8, (int *)v33);
      uint64_t v9 = a2 + 2;
      if (sub_216C4B19C(15))
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v33);
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v11) {
          uint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v12 = *((void *)v11 + 11) & 0xFFFFFFFFFFFFFFF8;
        if (v12)
        {
          uint64_t v13 = (const char *)(v12 + 16);
          if (*(char *)(v12 + 39) < 0) {
            uint64_t v13 = *(const char **)v13;
          }
        }
        else
        {
          uint64_t v13 = "";
        }
        long long v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v9);
        uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v22);
        if (*(char *)(Identifier + 23) >= 0) {
          uint64_t v26 = Identifier;
        }
        else {
          uint64_t v26 = *(void *)Identifier;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"RESOLVE: reading field %s:%s from @%s@\n", v24, v25, Text, v13, v26);
      }
      double v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v9);
      char v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v28) {
        char v28 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v33, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 88), a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v33 + 1);
      sub_21697C414(v33);
      return (void *)HasField;
    }
    v33[0] = "usd/stage.cpp";
    v33[1] = "_GetDefaultValueFromResolveInfoImpl";
    v33[2] = 8884;
    uint64_t v33[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::_GetDefaultValueFromResolveInfoImpl(const UsdResolveInfo &"
             ", const UsdAttribute &, T *) const [T = pxrInternal__aapl__pxrReserved__::VtValue]";
    char v34 = 0;
    sub_216D0162C(a3, &v31);
    uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C7696F0, *((unsigned int *)a2 + 18), (uint64_t)__p);
    if (v30 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      uint64_t v20 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v33, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid resolve info used for getting the value at default time for attr '%s'. Resolve info source must be Default, Fallback, or None. Got %s", v19, (const char *)v20);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_21697C414(&v31);
    return 0;
  }
  uint64_t v14 = *(void *)(a3 + 8);
  if (!v14 || (*(unsigned char *)(v14 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a3 + 8), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
  }
  uint64_t v15 = *(atomic_ullong **)(v14 + 24);
  uint64_t explicit = atomic_load_explicit(v15 + 7, memory_order_acquire);
  if (!explicit) {
    uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v15);
  }
  uint64_t v17 = sub_216D563F8((_DWORD *)a3);

  return sub_216E0FF2C(explicit, v17, a4);
}

void sub_216E10790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, int a19, __int16 a20,char a21,char a22)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a18);
  _Unwind_Resume(a1);
}

void *sub_216E107D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (***a4)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double), pxrInternal__aapl__pxrReserved__::VtValue *a5, double a6)
{
  double v46 = a6;
  uint64_t v6 = a5;
  switch(*((_DWORD *)a2 + 18))
  {
    case 1:
      uint64_t v11 = *(void *)(a3 + 8);
      if (!v11 || (*(unsigned char *)(v11 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a3 + 8), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
      }
      unint64_t v12 = *(atomic_ullong **)(v11 + 24);
      uint64_t explicit = atomic_load_explicit(v12 + 7, memory_order_acquire);
      if (!explicit) {
        uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v12);
      }
      uint64_t v14 = sub_216D563F8((_DWORD *)a3);
      return sub_216E0FF2C(explicit, v14, v6);
    case 2:
      uint64_t v16 = sub_216D563F8((_DWORD *)a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), v16, &v38);
      uint64_t v17 = a2 + 2;
      if (sub_216C4B19C(15))
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v19) {
          uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v20 = *((void *)v19 + 54) & 0xFFFFFFFFFFFFFFF8;
        if (v20)
        {
          uint64_t v21 = (const char *)(v20 + 16);
          if (*(char *)(v20 + 39) < 0) {
            uint64_t v21 = *(const char **)v21;
          }
        }
        else
        {
          uint64_t v21 = "";
        }
        long long v29 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v17);
        uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v29);
        if (*(char *)(Identifier + 23) >= 0) {
          uint64_t v33 = Identifier;
        }
        else {
          uint64_t v33 = *(void *)Identifier;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"RESOLVE: reading field %s:%s from @%s@, with t = %.3f as default\n", v31, v32, Text, v21, v33, *(void *)&v46);
      }
      char v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v17);
      char v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v35) {
        char v35 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      LOBYTE(v6) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v35 + 88), v6);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_21697C414(&v38);
      return (void *)(v6 & 1);
    case 3:
      return (void *)sub_216E0EC7C((_DWORD *)a3, a2, 0, 0, a4, a5, a6);
    case 4:
      uint64_t v23 = sub_216D563F8((_DWORD *)a3);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), v23, &v44);
      sub_216D16CFC((uint64_t)&v38, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
      int v24 = *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136);
      sub_216D0162C((uint64_t)&v38, &v36);
      ClipsForPriuint64_t m = pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(v24, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
      sub_21697C414(&v36);
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)*ClipsForPrim;
      double v27 = (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)ClipsForPrim[1];
      break;
    default:
      goto LABEL_31;
  }
  while (1)
  {
    if (v26 == v27)
    {
      char v28 = 1;
      goto LABEL_26;
    }
    if (sub_216E06ADC(v26, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8))
      && sub_216E06B5C((uint64_t)v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44))
    {
      break;
    }
    v26 += 2;
  }
  LOBYTE(v6) = sub_216E0EF10((_DWORD *)a3, (uint64_t)a2, v26, 0, 0, (uint64_t)a4, a6);
  char v28 = 0;
LABEL_26:
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
  sub_21697C414(&v41);
  if (v40) {
    sub_216D16E0C(v40);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_21697C414(&v44);
  if (v28) {
LABEL_31:
  }
    LOBYTE(v6) = 0;
  return (void *)(v6 & 1);
}

void sub_216E10B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_21697B754((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216E10BD4(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)result;
  double v3 = *(double *)a2;
  double v4 = *(double *)result * *(double *)a2;
  unsigned int v5 = *(unsigned __int8 *)(result + 8);
  unsigned int v6 = *(unsigned __int8 *)(a2 + 8);
  *(void *)&double v7 = (fabs(v4) != INFINITY) & v6 & v5;
  v33[0] = v4;
  v33[1] = v7;
  double v8 = *(double *)(a2 + 16);
  double v9 = v2 * v8;
  unsigned int v10 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v11 = (fabs(v2 * v8) != INFINITY) & v10 & v5;
  *(double *)int v32 = v9;
  v32[1] = v11;
  double v12 = *(double *)(result + 16);
  double v13 = v3 * v12;
  int v14 = *(unsigned __int8 *)(result + 24);
  *(void *)&double v15 = (fabs(v3 * v12) != INFINITY) & v14 & v6;
  v31[0] = v3 * v12;
  v31[1] = v15;
  double v16 = v8 * v12;
  *(void *)&double v17 = (fabs(v8 * v12) != INFINITY) & v14 & v10;
  v30[0] = v8 * v12;
  v30[1] = v17;
  double v18 = (double *)v32;
  if (v4 >= v9)
  {
    int v19 = v4 == v9 ? LODWORD(v7) : 1;
    if (v19 | v11 ^ 1) {
      double v18 = v33;
    }
  }
  unint64_t v20 = v30;
  double v21 = v8 * v12;
  if (v13 >= v16)
  {
    if (v13 == v16) {
      int v22 = LODWORD(v15);
    }
    else {
      int v22 = 1;
    }
    if (v22 | LODWORD(v17) ^ 1) {
      unint64_t v20 = v31;
    }
    double v21 = *v20;
  }
  if (*v18 >= v21)
  {
    if (*((unsigned char *)v20 + 8)) {
      BOOL v23 = *((unsigned char *)v18 + 8) == 0;
    }
    else {
      BOOL v23 = 0;
    }
    if (!v23 || *v18 != v21) {
      unint64_t v20 = v18;
    }
    double v21 = *v20;
  }
  *(double *)(result + 16) = v21;
  *(unsigned char *)(result + 24) = *((unsigned char *)v20 + 8);
  uint64_t v25 = v33;
  if (v4 >= v9)
  {
    if (v4 != v9) {
      LODWORD(v7) = 0;
    }
    if ((LODWORD(v7) & (v11 ^ 1)) == 0) {
      uint64_t v25 = (double *)v32;
    }
  }
  uint64_t v26 = v31;
  if (v13 >= v16)
  {
    if (v13 != v16) {
      LODWORD(v15) = 0;
    }
    if ((LODWORD(v15) & (LODWORD(v17) ^ 1)) == 0) {
      uint64_t v26 = v30;
    }
    double v13 = *v26;
  }
  double v27 = *v25;
  if (*v25 >= v13)
  {
    if (*((unsigned char *)v26 + 8)) {
      BOOL v28 = 1;
    }
    else {
      BOOL v28 = *((unsigned char *)v25 + 8) == 0;
    }
    if (v28 || v27 != v13) {
      uint64_t v25 = v26;
    }
    double v27 = *v25;
  }
  *(double *)uint64_t result = v27;
  *(unsigned char *)(result + 8) = *((unsigned char *)v25 + 8);
  return result;
}

uint64_t sub_216E10D84(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  double v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216E00200(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216E10E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

void sub_216E10E50(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216E10EF0(uint64_t a1, uint64_t a2)
{
  int v3 = **(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = (char *)&off_26C758118 + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t sub_216E10F54(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t result = sub_216A94450(a2);
  if (result)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216E10FB8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

BOOL sub_216E10FE8(uint64_t a1, char *a2, void *a3)
{
  sub_216779094(__p, a2);
  uint64_t v5 = sub_21678C2D8(a1, (const void **)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = a1 + 8;
  if (v6 != v5)
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a3[1];
    *a3 = v8;
    a3[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  return v6 != v5;
}

void sub_216E1107C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216E11098(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216E11144((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216BE0950((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_216E11144@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216E111C4(_Unwind_Exception *a1)
{
  sub_216BE0950(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216E111DC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a2, int a3)
{
  if (a2)
  {
    if (a3 != 2) {
      return;
    }
    uint64_t v5 = *(void *)(*a1 + 8);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)(v5 - 96);
    uint64_t v26 = *(void *)(v5 - 80);
    *(void *)(v5 - 96) = 0;
    *(void *)(v5 - 88) = 0;
    *(void *)(v5 - 80) = 0;
    long long v27 = *(_OWORD *)(v5 - 72);
    uint64_t v28 = *(void *)(v5 - 56);
    *(void *)(v5 - 72) = 0;
    *(void *)(v5 - 64) = 0;
    *(void *)(v5 - 56) = 0;
    long long v29 = *(_OWORD *)(v5 - 48);
    uint64_t v30 = *(void *)(v5 - 32);
    *(void *)(v5 - 48) = 0;
    *(void *)(v5 - 40) = 0;
    *(void *)(v5 - 32) = 0;
    long long v6 = *(_OWORD *)(v5 - 24);
    uint64_t v32 = *(void *)(v5 - 8);
    long long v31 = v6;
    *(void *)(v5 - 16) = 0;
    *(void *)(v5 - 8) = 0;
    *(void *)(v5 - 24) = 0;
    uint64_t v7 = *a1;
    uint64_t v8 = *(void *)(*a1 + 8) - 96;
    sub_216B02BDC(*a1 + 16, v8);
    *(void *)(v7 + 8) = v8;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(a2, (void *)(*(void *)(*a1 + 8) - 96), (uint64_t)v25, (uint64_t)__p);
    uint64_t v9 = *(void *)(*a1 + 8);
    unsigned int v10 = *(void **)(v9 - 96);
    if (v10)
    {
      *(void *)(v9 - 88) = v10;
      operator delete(v10);
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
    }
    *(_OWORD *)(v9 - 96) = *(_OWORD *)__p;
    *(void *)(v9 - 80) = v18;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    sub_2169B59AC((void **)(v9 - 72));
    *(_OWORD *)(v9 - 72) = v19;
    *(void *)(v9 - 56) = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    sub_2169B5A6C((void **)(v9 - 48));
    *(_OWORD *)(v9 - 48) = v21;
    *(void *)(v9 - 32) = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    uint64_t v11 = (void **)(v9 - 24);
    if (*(char *)(v9 - 1) < 0) {
      operator delete(*v11);
    }
    long long v12 = v23;
    *(void *)(v9 - 8) = v24;
    *(_OWORD *)uint64_t v11 = v12;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    uint64_t v33 = (void **)&v21;
    sub_2169B81EC(&v33);
    uint64_t v33 = (void **)&v19;
    sub_2169B74B8(&v33);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    __p[0] = &v29;
    sub_2169B81EC((void ***)__p);
    __p[0] = &v27;
  }
  else
  {
    if (a3 != 1) {
      return;
    }
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(*(void *)(*a1 + 8) - 96, (uint64_t)v25);
    uint64_t v13 = *(void *)(*a1 + 8);
    int v14 = *(void **)(v13 - 96);
    if (v14)
    {
      *(void *)(v13 - 88) = v14;
      operator delete(v14);
      *(void *)(v13 - 96) = 0;
      *(void *)(v13 - 88) = 0;
      *(void *)(v13 - 80) = 0;
    }
    *(_OWORD *)(v13 - 96) = *(_OWORD *)v25;
    *(void *)(v13 - 80) = v26;
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v26 = 0;
    sub_2169B59AC((void **)(v13 - 72));
    *(_OWORD *)(v13 - 72) = v27;
    *(void *)(v13 - 56) = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    sub_2169B5A6C((void **)(v13 - 48));
    *(_OWORD *)(v13 - 48) = v29;
    *(void *)(v13 - 32) = v30;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    double v15 = (void **)(v13 - 24);
    if (*(char *)(v13 - 1) < 0) {
      operator delete(*v15);
    }
    long long v16 = v31;
    *(void *)(v13 - 8) = v32;
    *(_OWORD *)double v15 = v16;
    HIBYTE(v32) = 0;
    LOBYTE(v31) = 0;
    __p[0] = &v29;
    sub_2169B81EC((void ***)__p);
    __p[0] = &v27;
  }
  sub_2169B74B8((void ***)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_216E114D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_2169B81EC((void ***)&a9);
  sub_2169B74B8((void ***)&a9);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_216E11518(uint64_t a1, uint64_t a2)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2))
  {
    sub_216E1194C(*(void *)(a1 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v24);
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    if (v4)
    {
      uint64_t v5 = *(uint64_t **)a1;
      sub_216981010(&v21, &v24);
      sub_21698105C((_DWORD *)&v21 + 1, &v25);
      if (*(char *)(a2 + 31) < 0)
      {
        sub_216778F24(&v22, *(void **)(a2 + 8), *(void *)(a2 + 16));
      }
      else
      {
        long long v22 = *(_OWORD *)(a2 + 8);
        uint64_t v23 = *(void *)(a2 + 24);
      }
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v21, (char **)v26);
      unint64_t v13 = v5[1];
      if (v13 >= v5[2])
      {
        uint64_t v15 = sub_216B02D70(v5, (uint64_t)v26);
        int v16 = SHIBYTE(v33);
        v5[1] = v15;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(void *)unint64_t v13 = 0;
        *(void *)(v13 + 8) = 0;
        *(_OWORD *)unint64_t v13 = *(_OWORD *)v26;
        *(void *)(v13 + 16) = v27;
        v26[0] = 0;
        v26[1] = 0;
        *(void *)(v13 + 32) = 0;
        *(void *)(v13 + 40) = 0;
        *(_OWORD *)(v13 + 24) = v28;
        *(void *)(v13 + 40) = v29;
        *(void *)(v13 + 48) = 0;
        uint64_t v27 = 0;
        long long v28 = 0uLL;
        uint64_t v29 = 0;
        *(void *)(v13 + 56) = 0;
        *(void *)(v13 + 64) = 0;
        *(_OWORD *)(v13 + 48) = v30;
        *(void *)(v13 + 64) = v31;
        long long v30 = 0uLL;
        long long v14 = *(_OWORD *)__p;
        *(void *)(v13 + 88) = v33;
        *(_OWORD *)(v13 + 72) = v14;
        uint64_t v31 = 0;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v33 = 0;
        v5[1] = v13 + 96;
      }
      char v34 = (void **)&v30;
      sub_2169B81EC(&v34);
      char v34 = (void **)&v28;
      sub_2169B74B8(&v34);
      if (v26[0])
      {
        v26[1] = v26[0];
        operator delete(v26[0]);
      }
      if (SHIBYTE(v23) < 0) {
        operator delete((void *)v22);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_21697C414(&v21);
    }
    else
    {
      uint64_t v11 = **(uint64_t ***)(a1 + 16);
      if (v11)
      {
        unint64_t v12 = v11[1];
        if (v12 >= v11[2])
        {
          uint64_t v4 = sub_216C11F10(v11, a2);
        }
        else
        {
          sub_216C12000((uint64_t)(v11 + 2), v11[1], a2);
          uint64_t v4 = v12 + 32;
          v11[1] = v12 + 32;
        }
        v11[1] = v4;
      }
      double v17 = *(uint64_t **)a1;
      uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v4);
      unint64_t v19 = v17[1];
      if (v19 >= v17[2])
      {
        uint64_t v20 = sub_216C12094(v17, v18);
      }
      else
      {
        sub_2169B70E4((void *)v17[1], v18);
        uint64_t v20 = v19 + 96;
        v17[1] = v19 + 96;
      }
      v17[1] = v20;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_21697C414(&v24);
  }
  else
  {
    long long v6 = *(uint64_t **)a1;
    sub_216AFF334(a2, (char **)v26);
    unint64_t v7 = v6[1];
    if (v7 >= v6[2])
    {
      uint64_t v9 = sub_216B02D70(v6, (uint64_t)v26);
      int v10 = SHIBYTE(v33);
      v6[1] = v9;
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)unint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v26;
      *(void *)(v7 + 16) = v27;
      v26[0] = 0;
      v26[1] = 0;
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 40) = 0;
      *(_OWORD *)(v7 + 24) = v28;
      *(void *)(v7 + 40) = v29;
      *(void *)(v7 + 48) = 0;
      uint64_t v27 = 0;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(void *)(v7 + 56) = 0;
      *(void *)(v7 + 64) = 0;
      *(_OWORD *)(v7 + 48) = v30;
      *(void *)(v7 + 64) = v31;
      long long v30 = 0uLL;
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 88) = v33;
      *(_OWORD *)(v7 + 72) = v8;
      uint64_t v31 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v33 = 0;
      v6[1] = v7 + 96;
    }
    long long v21 = (void **)&v30;
    sub_2169B81EC(&v21);
    long long v21 = (void **)&v28;
    sub_2169B74B8(&v21);
    if (v26[0])
    {
      v26[1] = v26[0];
      operator delete(v26[0]);
    }
  }
}

void sub_216E11850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v35 = v33;
  *(void *)(v35 + 8) = v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_21697C414(&a17);
  _Unwind_Resume(a1);
}

_DWORD *sub_216E1194C@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(*(pxrInternal__aapl__pxrReserved__::PcpMapFunction **)a1, a2, &v8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v8))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::_ProtoToInstancePathMap::MapProtoToInstance(*(char ***)(a1 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, &v6);
    sub_21697DE94(&v8, &v6);
    sub_21697DEEC(&v9, &v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
  }
  sub_21697D878(a3, &v8);
  sub_21697D8B4(a3 + 1, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_216E11A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216E11A2C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_216E1194C(*(void *)(a1 + 8), a2, &v27);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
  {
    sub_2169B76F8((uint64_t)&v23, (uint64_t)a2);
    sub_216B053D0((uint64_t)&v23, &v27);
    uint64_t v4 = *(uint64_t **)a1;
    sub_216B0325C((uint64_t)&v23, (char **)v15);
    unint64_t v5 = v4[1];
    if (v5 >= v4[2])
    {
      uint64_t v12 = sub_216B02D70(v4, (uint64_t)v15);
      int v13 = SHIBYTE(v22);
      v4[1] = v12;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 24) = 0;
      *(void *)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(_OWORD *)unint64_t v5 = *(_OWORD *)v15;
      *(void *)(v5 + 16) = v16;
      v15[0] = 0;
      v15[1] = 0;
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 40) = 0;
      *(_OWORD *)(v5 + 24) = v17;
      *(void *)(v5 + 40) = v18;
      *(void *)(v5 + 48) = 0;
      uint64_t v16 = 0;
      long long v17 = 0uLL;
      uint64_t v18 = 0;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 64) = 0;
      *(_OWORD *)(v5 + 48) = v19;
      *(void *)(v5 + 64) = v20;
      long long v19 = 0uLL;
      long long v6 = *(_OWORD *)__p;
      *(void *)(v5 + 88) = v22;
      *(_OWORD *)(v5 + 72) = v6;
      uint64_t v20 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v22 = 0;
      v4[1] = v5 + 96;
    }
    uint64_t v29 = (void **)&v19;
    sub_2169B81EC(&v29);
    uint64_t v29 = (void **)&v17;
    sub_2169B74B8(&v29);
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
    v15[0] = &v26;
    sub_2169B5B38((void ***)v15);
    v15[0] = &v25;
    sub_2168706D8((void ***)v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
  }
  else
  {
    int v7 = **(uint64_t ***)(a1 + 16);
    if (v7) {
      int v7 = (uint64_t *)sub_216C12470(v7, (uint64_t)a2);
    }
    int v8 = *(uint64_t **)a1;
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v7);
    unint64_t v10 = v8[1];
    if (v10 >= v8[2])
    {
      uint64_t v11 = sub_216C12094(v8, v9);
    }
    else
    {
      sub_2169B70E4((void *)v8[1], v9);
      uint64_t v11 = v10 + 96;
      v8[1] = v10 + 96;
    }
    v8[1] = v11;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  return sub_21697C414(&v27);
}

void sub_216E11C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  *(void *)(v29 - 24) = &a15;
  sub_2169B81EC((void ***)(v29 - 24));
  *(void *)(v29 - 24) = &a12;
  sub_2169B74B8((void ***)(v29 - 24));
  if (a9)
  {
    a10 = (uint64_t)a9;
    operator delete(a9);
  }
  a9 = &a29;
  sub_2169B5B38((void ***)&a9);
  a9 = &a26;
  sub_2168706D8((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a25);
  sub_21697C414(&a24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v29 - 28));
  sub_21697C414((_DWORD *)(v29 - 32));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *sub_216E11CD8(atomic_ullong *a1)
{
  uint64_t result = sub_216E11D20();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType::~UsdUsdFileFormatTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *sub_216E11D20()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType::UsdUsdFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_216E11D50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216E11D64(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (void *)(v9 + 16);
      unint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *uint64_t v11 = *v10;
          sub_216E11E34((uint64_t)a1, (uint64_t)v10);
          unint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216E11E68((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216E11E34(uint64_t a1, uint64_t a2)
{
  sub_216E11EB8(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_216E11E68(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *unint64_t v4 = 0;
  return result;
}

_DWORD *sub_216E11EB8(uint64_t a1)
{
  uint64_t v2 = *(atomic_ullong **)(a1 + 8);
  if (v2) {
    sub_216D16E0C(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void sub_216E11F04(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216E11F9C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

atomic_uint *sub_216E11F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(atomic_uint **)(a2 + 24);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(atomic_uint **)(a2 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v5();
  }
  return result;
}

void sub_216E12054(int a1, void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 23) < 0) {
      operator delete(*__p);
    }
    operator delete(__p);
  }
}

uint64_t sub_216E120A0(uint64_t *a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)sub_216E121E8((uint64_t)v7, a1);
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v4 = sub_216E122DC(DetachedDispatcher, (uint64_t *)v7);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void, void *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_216E12148();
  }
  return sub_216E11D64(v7);
}

void sub_216E12130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E11D64((unint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216E12148()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  unint64_t v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  uint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216E121D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216E121E8(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = (_OWORD *)(a1 + 528);
  for (uint64_t i = 536; i != 584; i += 24)
    *(void *)(a1 + i) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  __dmb(0xBu);
  *(void *)a1 = 0;
  __dmb(0xBu);
  *(void *)(a1 + 520) = 0;
  _OWORD *v3 = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(void *)(a1 + 8) = v3;
  __dmb(0xBu);
  *(void *)a1 = 1;
  if ((uint64_t *)a1 != a2) {
    sub_216873CA8((uint64_t *)a1, a2);
  }
  return a1;
}

void sub_216E122C4(_Unwind_Exception *a1)
{
  sub_216E11D64(v1);
  _Unwind_Resume(a1);
}

void *sub_216E122DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x258uLL);
  *((unsigned char *)v5 - 11) = 1;
  *uint64_t v5 = &unk_26C769C20;
  sub_216E121E8((uint64_t)(v5 + 1), a2);
  v5[74] = a1 + 264;
  return v5;
}

void sub_216E12360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

void *sub_216E1237C(void *a1)
{
  *a1 = &unk_26C769C20;
  sub_216E11D64(a1 + 1);
  return a1;
}

void sub_216E123C4(unint64_t *a1)
{
  *a1 = (unint64_t)&unk_26C769C20;
  sub_216E11D64(a1 + 1);

  operator delete(a1);
}

uint64_t sub_216E1241C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216E12148();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 592));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216E124AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216E124C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v6 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24);
  unint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = v6;
  int v7 = v4 - 1;
  if (v6)
  {
    if (*(unsigned char *)(sub_216850B68(v4) + 14)) {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v7;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  long long v14 = v5;
  sub_2168BD80C((uint64_t *)&v14);
  if (*(unsigned char *)(a1 + 48))
  {
    char v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40);
    if (v8)
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)(a1 + 40)) + 14)) {
        char v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32);
      }
      else {
        char v8 = 0;
      }
    }
    int v13 = v8;
    sub_2168BD80C((uint64_t *)&v13);
  }
  else
  {
    sub_216DE9288(v7, (uint64_t *)&v13);
  }
  if (*(unsigned char *)(a1 + 80))
  {
    memset(v12, 0, sizeof(v12));
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21695F340(v12, *(void **)(a1 + 56), *(void **)(a1 + 64), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4);
  }
  else
  {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216DEC0D4(v7);
  }
  sub_216CF86BC(v9, v11);
  pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiateStage((uint64_t *)&v14, &v13, (uint64_t)v12, v11, *(_DWORD *)(a1 + 88), a2);
  uint64_t v15 = (void **)v11;
  sub_216981168(&v15);
  v11[0] = v12;
  sub_216787968((void ***)v11);
  sub_216ABB798(&v13);
  return sub_216ABB798(&v14);
}

void sub_216E125EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  *(void *)(v3 - 40) = v2;
  sub_216981168((void ***)(v3 - 40));
  va_copy((va_list)v5, va1);
  sub_216787968((void ***)va);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v3 - 48));
  _Unwind_Resume(a1);
}

void sub_216E12640(pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *a1)
{
  sub_216E12A0C(a1);

  operator delete(v1);
}

uint64_t sub_216E12668(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = sub_216D57D70(a2);
  sub_216ABBA60(&v18, (uint64_t *)(v5 + 32));
  uint64_t v6 = sub_216851B24(v4);
  if (v6 != sub_216851B24((uint64_t)&v18))
  {
    uint64_t v7 = 0;
    goto LABEL_3;
  }
  int v10 = *(unsigned __int8 *)(a1 + 48);
  if (!*(unsigned char *)(a1 + 48))
  {
    if (!*(unsigned char *)(a1 + 80))
    {
      uint64_t v7 = 1;
      goto LABEL_3;
    }
    goto LABEL_13;
  }
  uint64_t v11 = sub_216D57D70(a2);
  sub_216ABBA60(&v16, (uint64_t *)(v11 + 40));
  uint64_t v12 = sub_216851B24(a1 + 32);
  if (v12 == sub_216851B24((uint64_t)&v16))
  {
    if (!*(unsigned char *)(a1 + 80))
    {
      uint64_t v7 = 1;
      goto LABEL_16;
    }
LABEL_13:
    int v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPathResolverContext(v13, v15);
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==((uint64_t *)(a1 + 56), v15);
    uint64_t v20 = (void **)v15;
    sub_216787968(&v20);
    if (!v10) {
      goto LABEL_3;
    }
    goto LABEL_16;
  }
  uint64_t v7 = 0;
LABEL_16:
  uint64_t v14 = v17;
  if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
LABEL_3:
  uint64_t v8 = v19;
  if (v19 && atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return v7;
}

void sub_216E127F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, uint64_t a14, atomic_uint *a15)
{
  *(void *)(v17 - 40) = v15;
  sub_216787968((void ***)(v17 - 40));
  if (v16 && a13 && atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
  }
  if (a15)
  {
    if (atomic_fetch_add_explicit(a15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a15 + 8))(a15);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216E128B0(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = sub_216851B24(a1 + 16);
    if (v5 != sub_216851B24(v4 + 16)) {
      return 0;
    }
    if (!*(unsigned char *)(a1 + 48) || (uint64_t result = sub_216E129A4(a1 + 32, v4 + 32), result))
    {
      if (!*(unsigned char *)(a1 + 80)) {
        return 1;
      }
      if (!*(unsigned char *)(v4 + 80)) {
        return 0;
      }
      return pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==((uint64_t *)(a1 + 56), (uint64_t *)(v4 + 56));
    }
  }
  return result;
}

BOOL sub_216E129A4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v2 = *(unsigned char *)(a2 + 16) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 16) != 0) == (*(unsigned char *)(a2 + 16) != 0);
  }
  uint64_t v4 = sub_216851B24(a1);
  return v4 == sub_216851B24(a2);
}

void sub_216E12A0C(pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest *this)
{
  *(void *)this = &unk_26C769C68;
  if (*((unsigned char *)this + 80))
  {
    uint64_t v4 = (void **)((char *)this + 56);
    sub_216787968(&v4);
  }
  if (*((unsigned char *)this + 48))
  {
    BOOL v2 = (atomic_uint *)*((void *)this + 5);
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
      }
    }
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 3);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest::~UsdStageCacheRequest(this);
}

uint64_t sub_216E12AF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    BOOL v2 = *(atomic_uint **)(a1 + 8);
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
      }
    }
  }
  return a1;
}

uint64_t sub_216E12B64(uint64_t result, int a2, void *a3, void *a4)
{
  *(void *)uint64_t result = &unk_26C769C68;
  *(void *)(result + 8) = 0;
  uint64_t v4 = a3[1];
  *(void *)(result + 16) = *a3;
  *(void *)(result + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = a4[1];
  *(void *)(result + 32) = *a4;
  *(void *)(result + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  *(unsigned char *)(result + 48) = 1;
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_216E12BC8(uint64_t a1, int a2, void *a3, void **a4)
{
  *(void *)a1 = &unk_26C769C68;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  sub_21695F340((void *)(a1 + 56), *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  *(unsigned char *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = a2;
  return a1;
}

void sub_216E12C60(_Unwind_Exception *a1)
{
  sub_216E12AF8(v2);
  uint64_t v4 = *((void *)v1 + 3);
  if (v4) {
    sub_217324248(v4);
  }
  pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest::~UsdStageCacheRequest(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216E12C88(uint64_t a1, int a2, void *a3, void *a4, void **a5)
{
  *(void *)a1 = &unk_26C769C68;
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v8 = a4[1];
  *(void *)(a1 + 32) = *a4;
  *(void *)(a1 + 40) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_21695F340((void *)(a1 + 56), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(unsigned char *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = a2;
  return a1;
}

void sub_216E12D34(_Unwind_Exception *a1)
{
  sub_216E12AF8(v2);
  uint64_t v4 = *((void *)v1 + 3);
  if (v4) {
    sub_217324248(v4);
  }
  pxrInternal__aapl__pxrReserved__::UsdStageCacheRequest::~UsdStageCacheRequest(v1);
  _Unwind_Resume(a1);
}

void sub_216E12D5C(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, void *a4@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t v8 = sub_216A64148(a3);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(v8);
  uint64_t v9 = sub_216A64148(a3);
  int Variability = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(v9);
  uint64_t v11 = sub_216A64148(a3);
  IsCustouint64_t m = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(v11);
  pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1, (uint64_t)EmptyString, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName, Variability, IsCustom, a4);
}

void sub_216E12E00(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, void *a4@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t v8 = sub_216A67AC0(a3);
  IsCustouint64_t m = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(v8);
  int v10 = sub_216A67AC0(a3);
  int Variability = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(v10);

  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1, (uint64_t)EmptyString, IsCustom, Variability, a4);
}

BOOL sub_216E12E94(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, uint64_t (****a5)(void, uint64_t))
{
  int v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v133);
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 >= 2)
  {
    if (v12 == 3)
    {
      int v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v13) {
        int v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v146);
        uint64_t v33 = *((void *)&v146 + 1);
        if (!*((void *)&v146 + 1) || (*(unsigned char *)(*((void *)&v146 + 1) + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v146 + 1), v32);
        }
        uint64_t v34 = *(atomic_ullong **)(v33 + 24);
        uint64_t explicit = atomic_load_explicit(v34 + 7, memory_order_acquire);
        if (!explicit) {
          uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v34);
        }
        int v36 = sub_216D563F8(&v146);
        *(void *)&long long v152 = 0;
        unsigned int v37 = sub_216E156AC(explicit, v36, a3, &v152, *a5);
        *((unsigned char *)a5 + 40) = v37;
        if ((v152 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v37 = *((unsigned __int8 *)a5 + 40);
        }
        if (!v37)
        {
          *(void *)&long long v152 = 0;
          sub_216E13F00((uint64_t)&v146, a3, (uint64_t *)&v152, a5);
          if ((v152 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((BYTE8(v147) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v147 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
        sub_21697C414(&v147);
        int v38 = (atomic_ullong *)*((void *)&v146 + 1);
        if (!*((void *)&v146 + 1))
        {
LABEL_158:
          if (*((unsigned char *)a5 + 40))
          {
            unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v24) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            goto LABEL_185;
          }
          goto LABEL_187;
        }
LABEL_157:
        sub_216D16E0C(v38);
        goto LABEL_158;
      }
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v14) {
        uint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 58) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B7B4(a2, (uint64_t)&v134);
        long long v40 = v135;
        if (!v135 || (*((unsigned char *)v135 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v135, v39);
        }
        int v41 = (atomic_ullong *)*((void *)v40 + 3);
        uint64_t PrimDefinition = atomic_load_explicit(v41 + 7, memory_order_acquire);
        if (!PrimDefinition) {
          uint64_t PrimDefinition = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v41);
        }
        uint64_t v43 = sub_216D563F8(&v134);
        int v44 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v44) {
          int v44 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        *(void *)&long long v146 = 0;
        unsigned int v45 = sub_216E156AC(PrimDefinition, v43, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v44 + 464), &v146, *a5);
        *((unsigned char *)a5 + 40) = v45;
        if ((v146 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          unsigned int v45 = *((unsigned __int8 *)a5 + 40);
        }
        if (!v45)
        {
          double v46 = sub_216D563F8(&v134);
          sub_216D16CFC((uint64_t)&v141, (uint64_t *)&v135, &v136);
          double v48 = (uint64_t *)sub_216D240F8((uint64_t)&v141, v47);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v48, 6u, (uint64_t *)&v152);
          long long v151 = v153;
          long long v150 = v152;
          long long v146 = v153;
          long long v147 = v153;
          long long v148 = v152;
          long long v149 = v152;
          if ((v145 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v145 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v144);
          sub_21697C414(&v143);
          if (v142) {
            sub_216D16E0C(v142);
          }
          if (v147 != v149)
          {
            while (1)
            {
              uint64_t v51 = sub_216DFFC94(&v146, v49, v50);
              uint64_t v52 = v51[3] - 1;
              *(void *)&long long v152 = v51[2];
              *((void *)&v152 + 1) = v52;
              if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152) & 1) == 0)
              {
                char v55 = sub_216DFFC94(&v146, v53, v54);
                long long v56 = (atomic_ullong *)(v55[3] - 1);
                uint64_t v141 = v55[2];
                uint64_t v142 = v56;
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141)) {
                  break;
                }
              }
LABEL_82:
              sub_216DFFD8C(&v146);
              if (v147 == v149) {
                goto LABEL_154;
              }
            }
            uint64_t v59 = sub_216DFFC94(&v146, v57, v58);
            uint64_t v60 = v59[3] - 1;
            *(void *)&long long v152 = v59[2];
            *((void *)&v152 + 1) = v60;
            Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v46, &v139);
            uint64_t v64 = sub_216DFFC94(&v146, v62, v63);
            int v65 = (atomic_ullong *)(v64[3] - 1);
            uint64_t v141 = v64[2];
            uint64_t v142 = v65;
            uint64_t LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141);
            uint64_t v67 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v67);
            *(void *)&long long v152 = Layers[1];
            *((void *)&v152 + 1) = v152;
            *(void *)&long long v153 = *Layers;
            *((void *)&v153 + 1) = v153;
            while (1)
            {
              if (*((void *)&v152 + 1) == *((void *)&v153 + 1))
              {
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v140);
                sub_21697C414(&v139);
                goto LABEL_82;
              }
              sub_216E15794(&v146, v69, v70);
              uint64_t v73 = (uint64_t *)sub_216BEF334((uint64_t)&v152, v71, v72);
              uint64_t v74 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v74) {
                uint64_t v74 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              uint64_t v141 = 0;
              if (sub_216E15820(a5, v73, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v139, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v74 + 464), &v141))*((unsigned char *)a5 + 40) = 1; {
              if ((v141 & 7) != 0)
              }
                atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              if (*((unsigned char *)a5 + 40)) {
                break;
              }
              sub_216BEF4DC((uint64_t)&v152);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v140);
            sub_21697C414(&v139);
          }
        }
LABEL_154:
        if ((v138 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_156:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v137);
        sub_21697C414(&v136);
        int v38 = (atomic_ullong *)v135;
        if (!v135) {
          goto LABEL_158;
        }
        goto LABEL_157;
      }
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v15) {
      uint64_t v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B6A8(a2, (uint64_t)&v134);
      pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaProperty((const pxrInternal__aapl__pxrReserved__::UsdProperty *)&v134, (uint64_t)&v146);
      uint64_t v16 = *((void *)&v146 + 1);
      if ((v146 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v16)
      {
        LOBYTE(v146) = 0;
        sub_216E158B4((uint64_t)*a5, &v146);
        *((unsigned char *)a5 + 40) = 1;
      }
      else
      {
        uint64_t v75 = sub_216D563F8(&v134);
        sub_216D16CFC((uint64_t)&v141, (uint64_t *)&v135, &v136);
        uint64_t v77 = (uint64_t *)sub_216D240F8((uint64_t)&v141, v76);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v77, 6u, (uint64_t *)&v152);
        long long v151 = v153;
        long long v150 = v152;
        long long v146 = v153;
        long long v147 = v153;
        long long v148 = v152;
        long long v149 = v152;
        if ((v145 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v145 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v144);
        sub_21697C414(&v143);
        if (v142) {
          sub_216D16E0C(v142);
        }
        if (v147 != v149)
        {
          while (1)
          {
            uint64_t v80 = sub_216DFFC94(&v146, v78, v79);
            uint64_t v81 = v80[3] - 1;
            *(void *)&long long v152 = v80[2];
            *((void *)&v152 + 1) = v81;
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152) & 1) == 0)
            {
              uint64_t v84 = sub_216DFFC94(&v146, v82, v83);
              uint64_t v85 = (atomic_ullong *)(v84[3] - 1);
              uint64_t v141 = v84[2];
              uint64_t v142 = v85;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141)) {
                break;
              }
            }
LABEL_102:
            sub_216DFFD8C(&v146);
            if (v147 == v149) {
              goto LABEL_135;
            }
          }
          uint64_t v88 = sub_216DFFC94(&v146, v86, v87);
          uint64_t v89 = v88[3] - 1;
          *(void *)&long long v152 = v88[2];
          *((void *)&v152 + 1) = v89;
          uint64_t v90 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v90, v75, &v139);
          uint64_t v93 = sub_216DFFC94(&v146, v91, v92);
          size_t v94 = (atomic_ullong *)(v93[3] - 1);
          uint64_t v141 = v93[2];
          uint64_t v142 = v94;
          uint64_t v95 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v141);
          uint64_t v96 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v95);
          uint64_t v97 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v96);
          *(void *)&long long v152 = v97[1];
          *((void *)&v152 + 1) = v152;
          *(void *)&long long v153 = *v97;
          *((void *)&v153 + 1) = v153;
          while (1)
          {
            if (*((void *)&v152 + 1) == *((void *)&v153 + 1))
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v140);
              sub_21697C414(&v139);
              goto LABEL_102;
            }
            sub_216E15794(&v146, v98, v99);
            uint64_t v102 = (uint64_t *)sub_216BEF334((uint64_t)&v152, v100, v101);
            int v103 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v103) {
              int v103 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v141 = 0;
            if (sub_216E15820(a5, v102, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v139, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v103 + 64), &v141))*((unsigned char *)a5 + 40) = 1; {
            if ((v141 & 7) != 0)
            }
              atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            if (*((unsigned char *)a5 + 40)) {
              break;
            }
            sub_216BEF4DC((uint64_t)&v152);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v140);
          sub_21697C414(&v139);
        }
      }
LABEL_135:
      if ((v138 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_156;
    }
LABEL_33:
    if (sub_216E13F00(a2, a3, a4, a5))
    {
      unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v24) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      goto LABEL_185;
    }
    goto LABEL_187;
  }
  if (v12 != 1) {
    goto LABEL_33;
  }
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17 || (uint64_t v18 = *(void *)(v17 + 56), (v18 & 0x800) != 0))
  {
    int v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a2 + 8), v11);
    uint64_t v18 = *(void *)(v17 + 56);
  }
  uint64_t v19 = *(unsigned char **)(a2 + 8);
  if ((v18 & 0x4000) != 0)
  {
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10);
    PrimIndex = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(PrimIndex);
    *(void *)&long long v146 = v27;
    *((void *)&v146 + 1) = v28;
    if (*(void *)(a1 + 40))
    {
      uint64_t v29 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v146);
      long long v30 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v29);
      if (**(void **)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v30) == *(void *)(a1 + 40))
      {
        char v118 = sub_216E15820(a5, (uint64_t *)(a1 + 40), v25, a3, a4);
        uint64_t v31 = a5 + 5;
        if (v118)
        {
LABEL_131:
          *uint64_t v31 = 1;
LABEL_132:
          unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v24) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
LABEL_185:
          unint64_t v129 = v133;
          unint64_t v130 = atomic_load((unint64_t *)(v24 + 144));
          BOOL v131 = v129 >= v130
              || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v133, (atomic_ullong *)v24);
          goto LABEL_189;
        }
        if (*v31) {
          goto LABEL_132;
        }
      }
    }
    if (!sub_216E15820(a5, (uint64_t *)(a1 + 32), v25, a3, a4)) {
      goto LABEL_187;
    }
    uint64_t v31 = a5 + 5;
    goto LABEL_131;
  }
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20) {
    uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v104 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v146, v104, 1);
    if (v147 == v148) {
      goto LABEL_182;
    }
    while (1)
    {
      uint64_t v141 = 0;
      __int16 v105 = (void *)sub_216AA5ECC((uint64_t *)v149);
      long long v152 = v147;
      uint64_t v106 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
      BOOL v107 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v107) {
        BOOL v107 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      *((void *)&v152 + 1) = &v141;
      *(void *)&long long v153 = &stru_26C74C2C0;
      WORD4(v153) = 0;
      *(void *)&long long v152 = &unk_26C758B08;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v105, v106, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v107 + 448), (uint64_t (***)(void, uint64_t))&v152);
      uint64_t v109 = v141;
      BOOL v110 = HasField && BYTE8(v153) == 0;
      if (v110 && v141 != 0)
      {
        BOOL v112 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!v112) {
          BOOL v112 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
        uint64_t v109 = v141;
        if ((v141 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v112 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v113 = (uint64_t *)v149;
          long long v152 = v147;
          int v114 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
          unint64_t v115 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v115) {
            unint64_t v115 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          *(void *)&long long v152 = 0;
          if (sub_216E15820(a5, v113, v114, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v115 + 448), (uint64_t *)&v152))*((unsigned char *)a5 + 40) = 1; {
          if ((v152 & 7) != 0)
          }
            atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          uint64_t v109 = v141;
          if (*((unsigned char *)a5 + 40)) {
            goto LABEL_151;
          }
        }
      }
      if ((v109 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v146);
      if (v147 == v148) {
        goto LABEL_182;
      }
    }
  }
  long long v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21) {
    long long v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v21 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22) {
      uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216DFF548((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19, 1, a5);
      goto LABEL_182;
    }
    int v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v23) {
      int v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v23 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_33;
    }
    int v121 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v146, v121, 1);
    *(void *)&long long v152 = 0;
    uint64_t v122 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v122) {
      uint64_t v122 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v141 = 0;
    sub_216E15990((uint64_t)v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v152, v122, &v141, 1, (uint64_t)&v146, a5);
    if ((v141 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v109 = v152;
LABEL_151:
    if ((v109 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_182;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 16))
    || (v19[57] & 0x10) != 0
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 16)))
  {
LABEL_129:
    long long v116 = a5;
    int v117 = 0;
    goto LABEL_181;
  }
  unint64_t v119 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v19);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v146, v119, 1);
  if ((void)v147 == (void)v148)
  {
    int v120 = 1;
    if (*((void *)&v147 + 1) == *((void *)&v148 + 1))
    {
LABEL_143:
      long long v116 = a5;
      int v117 = v120;
      goto LABEL_181;
    }
  }
  int v120 = 1;
  while (1)
  {
    LODWORD(v141) = 1;
    int v123 = (void *)sub_216AA5ECC((uint64_t *)v149);
    long long v152 = v147;
    uint64_t v124 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
    int v125 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v125) {
      int v125 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    *((void *)&v152 + 1) = &v141;
    *(void *)&long long v153 = &stru_26C758108;
    WORD4(v153) = 0;
    *(void *)&long long v152 = &unk_26C76A080;
    int v126 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v123, v124, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v125 + 312), (uint64_t (***)(void, uint64_t))&v152);
    int v127 = BYTE8(v153) ? 0 : v126;
    if (v127 == 1 && v141 != 1) {
      break;
    }
LABEL_178:
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&v146);
    if (v147 == v148) {
      goto LABEL_143;
    }
  }
  if (!v141) {
    goto LABEL_129;
  }
  long long v152 = v147;
  if ((void)v147 && *((void *)&v147 + 1) != -1)
  {
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152) != 1
         || pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152))
    {
      *(void *)&long long v152 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v152);
      *((void *)&v152 + 1) = v128;
      if (!(void)v152 || v128 == -1) {
        goto LABEL_180;
      }
    }
    int v120 = 2;
    goto LABEL_178;
  }
LABEL_180:
  long long v116 = a5;
  int v117 = 2;
LABEL_181:
  sub_216E1591C(v116, v117);
LABEL_182:
  if (*((unsigned char *)a5 + 40))
  {
    unint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v24) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    goto LABEL_185;
  }
LABEL_187:
  BOOL v131 = 0;
LABEL_189:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v133);
  return v131;
}

void sub_216E13CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 120);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216E13E8C(double *a1, pxrInternal__aapl__pxrReserved__::UsdTimeCode *this)
{
  return *a1 != *(double *)this;
}

uint64_t sub_216E13F00(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3, uint64_t (****a4)(void, uint64_t))
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92080))
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B92078, &dword_216758000);
    __cxa_guard_release(&qword_267B92080);
  }
  if (*(int *)a1 < 2) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)&unk_267B92078;
  }
  else {
    uint64_t v9 = sub_216D563F8((_DWORD *)a1);
  }
  PrimIndex = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v8);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v18, PrimIndex, 1);
  if (!sub_216E15990((uint64_t)v8, v9, a2, a3, 1, (uint64_t)v18, a4)) {
    return 0;
  }
  uint64_t v11 = (uint64_t)(*a4)[2];
  if (sub_21677EC50(v11, (uint64_t)&stru_26C755180))
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
    if (v19 != v21 || v20 != v22)
    {
      sub_216E0E77C((uint64_t)v18, v9, &v28);
      sub_21697DE94(&v23, &v28);
      sub_21697DEEC(&v24, &v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_21697C414(&v28);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
  }
  if (sub_21677EC50(v11, (uint64_t)&stru_26C755190))
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
    if (v19 != v21 || v20 != v22)
    {
      sub_216E0E77C((uint64_t)v18, v9, &v28);
      sub_21697DE94(&v23, &v28);
      sub_21697DEEC(&v24, &v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_21697C414(&v28);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
  }
  if (sub_21677EC50(v11, (uint64_t)&stru_26C7551A0))
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
    if (v19 != v21 || v20 != v22)
    {
      sub_216E0E77C((uint64_t)v18, v9, &v28);
      sub_21697DE94(&v23, &v28);
      sub_21697DEEC(&v24, &v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_21697C414(&v28);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
  }
  if (sub_21677EC50(v11, (uint64_t)&stru_26C7551B0))
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
    if (v19 != v21 || v20 != v22)
    {
      sub_216E0E77C((uint64_t)v18, v9, &v28);
      sub_21697DE94(&v23, &v28);
      sub_21697DEEC(&v24, &v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
      sub_21697C414(&v28);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
  }
  if (sub_21677EC50(v11, (uint64_t)&stru_26C7551C0)) {
    sub_216E15B38((uint64_t)v8, v9, (uint64_t)a2, v18);
  }
  if (sub_21677EC50(v11, (uint64_t)&stru_26C7551D0)) {
    sub_216E16154((uint64_t)v8, v9, (uint64_t)a2, v18);
  }
  return 1;
}

void sub_216E15324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,__int16 a48,char a49,char a50,uint64_t a51)
{
  sub_216E17D60((uint64_t)&a19);
  sub_2169DD2C4((void *)(v51 - 248));
  sub_21697B754(&a46);
  *(void *)(v51 - 248) = &a48;
  sub_216E16FC0((void ***)(v51 - 248));
  _Unwind_Resume(a1);
}

void *sub_216E156AC(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, void *a4, uint64_t (***a5)(void, uint64_t))
{
  if (*a4) {
    return sub_216E15720(a1, a2, a3, a4, a5);
  }
  else {
    return sub_216E156C0(a1, a2, a3, a5);
  }
}

void *sub_216E156C0(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(void, uint64_t))
{
  uint64_t result = sub_2168CB120((void *)(a1 + 16), a2);
  if (result)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4);
    uint64_t v8 = (void *)result[3];
    return (void *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v8, v7, a3, a4);
  }
  return result;
}

void *sub_216E15720(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, void *a4, uint64_t (***a5)(void, uint64_t))
{
  uint64_t result = sub_2168CB120((void *)(a1 + 16), a2);
  if (result)
  {
    uint64_t v9 = (uint64_t)(result + 4);
    uint64_t v10 = result[3];
    return (void *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(v10, v9, a3, a4, a5);
  }
  return result;
}

uint64_t sub_216E15794(void *a1, uint64_t a2, char *a3)
{
  uint64_t result = a1[2];
  if (result == a1[6] && a1[3] == a1[7])
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator*";
    v6[2] = 271;
    void v6[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpNodeIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, true>::operator*() [T = std::pair<pxrInternal__a"
            "apl__pxrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = true]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216E15818()
{
}

uint64_t sub_216E15820(uint64_t (****a1)(void, uint64_t), uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = (void *)sub_216AA5ECC(a2);
  uint64_t v11 = *a1;
  if (v9)
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey((uint64_t)v10, (uint64_t)a3, a4, a5, v11);
  }
  else
  {
    int v13 = *a1;
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v10, a3, a4, v13);
  }
}

BOOL sub_216E158B4(uint64_t a1, unsigned char *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(unsigned char **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

uint64_t sub_216E1591C(unsigned char *a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t result = strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*(void *)a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (result) {
    *(unsigned char *)(v4 + 25) = 1;
  }
  else {
    **(_DWORD **)(v4 + 8) = a2;
  }
  a1[40] = 1;
  return result;
}

BOOL sub_216E15990(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, int a5, uint64_t a6, uint64_t (****a7)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v23);
  for (BOOL i = 1;
        *(void *)(a6 + 16) != *(void *)(a6 + 32) || *(void *)(a6 + 24) != *(void *)(a6 + 40);
        BOOL i = pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)a6))
  {
    if (i)
    {
      sub_216E0E77C(a6, a2, &v20);
      sub_21697DE94(&v22, &v20);
      sub_21697DEEC(&v23, &v21);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_21697C414(&v20);
    }
    if (sub_216E15820(a7, *(uint64_t **)(a6 + 48), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, a3, a4))
    {
      BOOL v18 = 1;
      *((unsigned char *)a7 + 40) = 1;
      goto LABEL_19;
    }
    if (*((unsigned char *)a7 + 40))
    {
      BOOL v18 = 1;
      goto LABEL_19;
    }
  }
  if (a5)
  {
    uint64_t v16 = *(atomic_ullong **)(a1 + 24);
    uint64_t explicit = atomic_load_explicit(v16 + 7, memory_order_acquire);
    if (!explicit) {
      uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v16);
    }
    *((unsigned char *)a7 + 40) = sub_216E156AC(explicit, a2, a3, a4, *a7);
  }
  BOOL v18 = *((unsigned char *)a7 + 40) != 0;
LABEL_19:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_21697C414(&v22);
  return v18;
}

void sub_216E15B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216E15B38(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  if (a4[2] != a4[4] || a4[3] != a4[5])
  {
    sub_216E0E77C((uint64_t)a4, a2, &v12);
    sub_21697DE94(&v7, &v12);
    sub_21697DEEC(&v8, v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
    sub_21697C414(&v12);
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

void sub_216E16068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,char a48)
{
  sub_216E183E4((uint64_t)&a36);
  sub_2169CBCC8((void **)(v48 - 248));
  sub_21697B754(&a46);
  *(void *)(v48 - 248) = &a48;
  sub_216E18898((void ***)(v48 - 248));
  _Unwind_Resume(a1);
}

void sub_216E16154(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  if (a4[2] != a4[4] || a4[3] != a4[5])
  {
    sub_216E0E77C((uint64_t)a4, a2, &v12);
    sub_21697DE94(&v7, &v12);
    sub_21697DEEC(&v8, v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
    sub_21697C414(&v12);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
}

void sub_216E16684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,char a48)
{
  sub_216E18930((uint64_t)&a36);
  sub_2169E0B70((void **)(v48 - 248));
  sub_21697B754(&a46);
  *(void *)(v48 - 248) = &a48;
  sub_216E0CAB4((void ***)(v48 - 248));
  _Unwind_Resume(a1);
}

void *sub_216E16770(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(atomic_ullong **)(a1 + 24);
  uint64_t explicit = atomic_load_explicit(v9 + 7, memory_order_acquire);
  if (!explicit) {
    uint64_t explicit = pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v9);
  }
  uint64_t result = sub_216E156AC(explicit, a2, a3, a4, *(uint64_t (****)(void, uint64_t))a5);
  *(unsigned char *)(a5 + 40) = (_BYTE)result;
  return result;
}

uint64_t sub_216E167D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216E16830(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216E0C754(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  uint64_t v14 = &v10[152 * v4];
  uint64_t v16 = &v10[152 * v9];
  sub_2169DD444((uint64_t)v14, a2);
  uint64_t v15 = v14 + 152;
  sub_216E16950(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216E16BA4(&v13);
  return v11;
}

void sub_216E1693C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E16BA4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E16950(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E169C8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216E169C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 152;
      sub_216E0C858(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216E16A80((uint64_t)v13);
  return v11;
}

uint64_t sub_216E16A80(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E16AB8((uint64_t *)a1);
  }
  return a1;
}

void sub_216E16AB8(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216E16B0C(v3, v1);
      v1 += 19;
    }
    while (v1 != v2);
  }
}

void sub_216E16B0C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[16];
  if (v3)
  {
    a2[17] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[13];
  if (v4)
  {
    a2[14] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a2[10];
  if (v5)
  {
    a2[11] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a2[7];
  if (v6)
  {
    a2[8] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a2[4];
  if (v7)
  {
    a2[5] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a2[1];
  if (v8)
  {
    a2[2] = v8;
    operator delete(v8);
  }
}

void **sub_216E16BA4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216E16BD8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    sub_216E16B0C(v4, (void *)(i - 152));
  }
}

uint64_t sub_216E16C20(uint64_t a1, uint64_t *a2)
{
  if (sub_21698F4F4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216CD6EB4(*(char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216E16CA4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698F4F4(a2)) {
    sub_216E16ED0();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

void sub_216E16ED0()
{
}

void sub_216E16F34(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_216E16F48(uint64_t a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x80000002174686FFLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216CD6EB4(*(char **)(a1 + 8), a2);
  }
  return v4 == 0;
}

void sub_216E16FC0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 19;
        sub_216E16B0C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216E17058(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216E170B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216E0C754(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  char v14 = &v10[152 * v4];
  long long v16 = &v10[152 * v9];
  sub_2169DE38C((uint64_t)v14, a2);
  long long v15 = v14 + 152;
  sub_216E171D4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216E16BA4(&v13);
  return v11;
}

void sub_216E171C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E16BA4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E171D4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E1724C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216E1724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 152;
      sub_216E0C858(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216E17304((uint64_t)v13);
  return v11;
}

uint64_t sub_216E17304(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E16AB8((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_216E1733C(uint64_t a1, uint64_t *a2)
{
  if (sub_21698F580((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216CD891C(*(char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216E173C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698F580(a2)) {
    sub_216E175EC();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

void sub_216E175EC()
{
}

void sub_216E17650(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_216E17664(uint64_t a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x8000000217478D2CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216CD891C(*(char **)(a1 + 8), a2);
  }
  return v4 == 0;
}

uint64_t sub_216E176DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216E17738(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216E0C754(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  char v14 = &v10[152 * v4];
  long long v16 = &v10[152 * v9];
  sub_2169DEF68((uint64_t)v14, a2);
  long long v15 = v14 + 152;
  sub_216E17858(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216E16BA4(&v13);
  return v11;
}

void sub_216E17844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E16BA4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E17858(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E178D0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216E178D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 152;
      sub_216E0C858(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216E17988((uint64_t)v13);
  return v11;
}

uint64_t sub_216E17988(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E16AB8((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_216E179C0(uint64_t a1, uint64_t *a2)
{
  if (sub_21698F60C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216CD6EB4(*(char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216E17A44(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698F60C(a2)) {
    sub_216E17C70();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

void sub_216E17C70()
{
}

void sub_216E17CD4(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_216E17CE8(uint64_t a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x8000000217469618 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216CD6EB4(*(char **)(a1 + 8), a2);
  }
  return v4 == 0;
}

uint64_t sub_216E17D60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216E17DBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216E0C754(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  char v14 = &v10[152 * v4];
  long long v16 = &v10[152 * v9];
  sub_2169DFB7C((uint64_t)v14, a2);
  long long v15 = v14 + 152;
  sub_216E17EDC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216E16BA4(&v13);
  return v11;
}

void sub_216E17EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E16BA4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E17EDC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E17F54((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216E17F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 152;
      sub_216E0C858(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216E1800C((uint64_t)v13);
  return v11;
}

uint64_t sub_216E1800C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E16AB8((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_216E18044(uint64_t a1, uint64_t *a2)
{
  if (sub_21698F698((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216CD891C(*(char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216E180C8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698F698(a2)) {
    sub_216E182F4();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

void sub_216E182F4()
{
}

void sub_216E18358(_Unwind_Exception *a1)
{
  sub_2169DD2C4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_216E1836C(uint64_t a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x8000000217478D90 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216CD891C(*(char **)(a1 + 8), a2);
  }
  return v4 == 0;
}

uint64_t sub_216E183E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216E18440(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216E0C754(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  char v14 = &v10[152 * v4];
  long long v16 = &v10[152 * v9];
  sub_2169DAE8C((uint64_t)v14, a2);
  long long v15 = v14 + 152;
  sub_216E18560(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216E187A4(&v13);
  return v11;
}

void sub_216E1854C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E187A4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E18560(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E185D8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216E185D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 152;
      sub_216E0C858(a1, v7 - 152, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 152;
      *((void *)&v16 + 1) -= 152;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216E18690((uint64_t)v13);
  return v11;
}

uint64_t sub_216E18690(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E186C8((uint64_t *)a1);
  }
  return a1;
}

void sub_216E186C8(uint64_t *a1)
{
  uint64_t v1 = *(void ***)(a1[2] + 8);
  uint64_t v2 = *(void ***)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216E1871C(v3, v1);
      v1 += 19;
    }
    while (v1 != v2);
  }
}

void sub_216E1871C(uint64_t a1, void **a2)
{
  uint64_t v3 = a2 + 16;
  sub_216782F20(&v3);
  uint64_t v3 = a2 + 13;
  sub_216782F20(&v3);
  uint64_t v3 = a2 + 10;
  sub_216782F20(&v3);
  uint64_t v3 = a2 + 7;
  sub_216782F20(&v3);
  uint64_t v3 = a2 + 4;
  sub_216782F20(&v3);
  uint64_t v3 = a2 + 1;
  sub_216782F20(&v3);
}

void **sub_216E187A4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216E187D8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 152;
    sub_216E1871C(v4, (void **)(i - 152));
  }
}

BOOL sub_216E18820(uint64_t a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x8000000217474036 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216BF42B4(*(unsigned char **)(a1 + 8), a2);
  }
  return v4 == 0;
}

void sub_216E18898(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 19;
        sub_216E1871C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216E18930(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216E1898C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xD79435E50D7943) {
    unint64_t v9 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216E0C754(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  char v14 = &v10[152 * v4];
  long long v16 = &v10[152 * v9];
  sub_2169E21E0((uint64_t)v14, a2);
  long long v15 = v14 + 152;
  sub_216E0C6DC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216E0CA38(&v13);
  return v11;
}

void sub_216E18A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E0CA38((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_216E18AAC(uint64_t a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x8000000217478DC2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216CCF480(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

uint64_t sub_216E18B24(uint64_t *a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned int *, uint64_t), void *a8)
{
  unint64_t v29 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55* (a3[1]+ ((a3[1] + (unint64_t)*a3 + (a3[1] + (unint64_t)*a3) * (a3[1] + (unint64_t)*a3)) >> 1)));
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v28 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216E18FDC((uint64_t)&v31, (uint64_t)a1, v14 & v13, 0);
    long long v15 = (void *)(v33 + 16);
    do
      long long v15 = (void *)*v15;
    while ((unint64_t)v15 >= 0x40 && *(void *)a3 != v15[2]);
    if (a2) {
      break;
    }
    if (v15)
    {
      uint64_t v16 = 1;
LABEL_10:
      uint64_t v17 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_46;
      }
      goto LABEL_11;
    }
    unint64_t v24 = *a1;
    __dmb(0xBu);
    if (v14 == v24 || !sub_21686CF40((uint64_t)a1, v13, v14, v24))
    {
      sub_21685C048(&v31);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v31);
    uint64_t v14 = v24;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (!a8) {
    a8 = (void *)a7(v28, a3, a4);
  }
  if (!v32)
  {
    char v32 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v31) & 1) == 0)
    {
      long long v15 = (void *)(v33 + 16);
      while (1)
      {
        long long v15 = (void *)*v15;
        if ((unint64_t)v15 < 0x40) {
          break;
        }
        if (*(void *)a3 == v15[2])
        {
          if (!v32) {
            goto LABEL_7;
          }
          uint64_t v16 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v31, 3uLL);
          char v32 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v24 = *a1;
  __dmb(0xBu);
  if (v14 != v24)
  {
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v24)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v24 = v14;
LABEL_33:
  unint64_t v29 = sub_21686C9CC((uint64_t)a1, v33, a8, v24);
  uint64_t v17 = 0;
  uint64_t v16 = 1;
  long long v15 = a8;
  if (!a5)
  {
LABEL_46:
    sub_21685C048(&v31);
    goto LABEL_41;
  }
LABEL_11:
  if ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
  {
    sched_yield();
    int v18 = 2;
    while ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
    {
      sched_yield();
      BOOL v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        int v20 = (atomic_ullong *)v31;
        uint64_t v31 = 0;
        if (v32)
        {
LABEL_16:
          atomic_ullong v21 = *v20;
          unint64_t v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v23 = v21;
            atomic_compare_exchange_strong(v20, (unint64_t *)&v23, v22);
            if (v23 == v21) {
              break;
            }
            if (atomic_fetch_add_explicit(v20, 0, memory_order_relaxed) != v21)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v20, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v24 = *a1;
        __dmb(0xBu);
        a8 = (void *)v17;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v31);
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v13;
LABEL_41:
  if (v29) {
    sub_216E18E44(a1, v29, v28, 0);
  }
  if (v17) {
    sub_216E11E34((uint64_t)a1, v17);
  }
  return v16;
}

void sub_216E18E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E18E3C()
{
  return 0;
}

void sub_216E18E44(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    unint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        long long v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    int v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    uint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    unint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      int v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *int v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216E18FCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216E18FDC(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_216E190B8(a2, v11, a3);
    }
  }
  else
  {
    int v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_216E190A4(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216E190B8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216E18FDC(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v17 + 16);
  unint64_t v12 = *(void *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while ((bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(v12 + 20)+ ((*(unsigned int *)(v12 + 20)+ (unint64_t)*(unsigned int *)(v12 + 16)+ (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))* (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))) >> 1))) & v13) == a3)
    {
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216E19250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E19264(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 8, 0, a4);
}

unint64_t *sub_216E19274(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  uint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::SdfPath,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

_DWORD *tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::SdfPath,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::destroy_array(_DWORD *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = &result[2 * a2 - 1];
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
      --v2;
      uint64_t result = sub_21697C414(v3 - 1);
      v3 -= 2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_216E1932C(uint64_t a1, tbb::task *a2)
{
  *(void *)a1 = &unk_26C769D98;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

void sub_216E19378(uint64_t a1, tbb::task *a2)
{
  uint64_t v2 = (void *)sub_216E1932C(a1, a2);

  operator delete(v2);
}

uint64_t sub_216E193A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v10[0] = 0;
  v10[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x30uLL);
  uint64_t v6 = v5;
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C769DE0;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(v5 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(v5 + 24), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(v6 + 28), (_DWORD *)(a2 + 20));
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(v6 + 32) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(v6 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 40) = a1;
  return (***(uint64_t (****)(void, uint64_t, uint64_t))(v6 - 40))(*(void *)(v6 - 40), v6, v6 - 8);
}

uint64_t sub_216E194A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x30uLL);
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C769DE0;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a2;
  *(void *)(v5 + 16) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(v5 + 24), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(v5 + 28), (_DWORD *)(a2 + 20));
  *(void *)(v5 + 32) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(v5 + 40) = a1;
  return (***(uint64_t (****)(void))(v5 - 40))();
}

uint64_t sub_216E19598(uint64_t a1)
{
  *(void *)a1 = &unk_26C769DE0;
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_216E19610(void *a1)
{
  *(void *)a1 = &unk_26C769DE0;
  uint64_t v2 = *((void *)a1 + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_21697C414((_DWORD *)a1 + 6);
  uint64_t v3 = (atomic_ullong *)*((void *)a1 + 2);
  if (v3) {
    sub_216D16E0C(v3);
  }

  operator delete(a1);
}

uint64_t sub_216E19698(uint64_t a1)
{
  return 0;
}

void sub_216E196C4(uint64_t **a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (atomic_ullong *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  int v6 = a2[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2 + 4);
  int v7 = a2[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 5);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  sub_216DF1FC0(*a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216E19790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_ullong *a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(v12);
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216E197DC(uint64_t a1)
{
  *(void *)a1 = &unk_26C769E28;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  return a1;
}

void sub_216E19840(_DWORD *a1)
{
  *(void *)a1 = &unk_26C769E28;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_21697C414(a1 + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_21697C414(a1 + 6);

  operator delete(a1);
}

uint64_t sub_216E198B4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  long long v14 = *(_OWORD *)(a1 + 8);
  sub_216981010(&v15, (_DWORD *)(a1 + 24));
  sub_21698105C(&v16, (_DWORD *)(a1 + 28));
  uint64_t v3 = 0;
  int v17 = *(_DWORD *)(a1 + 32);
  __int16 v18 = *(_WORD *)(a1 + 36);
  while (*(void *)(a1 + 16) != *(void *)(a1 + 48)
       || *(void *)(a1 + 8) != *(void *)(a1 + 40)
       || *(void *)(a1 + 24) != *(void *)(a1 + 56)
       || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a1 + 64)
       || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a1 + 68)
       || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a1 + 69))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(v2);
    if (++v3 == 4)
    {
      if (*(void *)(a1 + 16) != *(void *)(a1 + 48)
        || *(void *)(a1 + 8) != *(void *)(a1 + 40)
        || *(void *)(a1 + 24) != *(void *)(a1 + 56)
        || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a1 + 64)
        || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a1 + 68)
        || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a1 + 69))
      {
        *(unsigned char *)(a1 - 12) = 1;
      }
      uint64_t v3 = 4;
      goto LABEL_17;
    }
  }
  if (v3)
  {
LABEL_17:
    uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 16);
    v13[0] = 0;
    v13[1] = v4;
    uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v13, 0x38uLL);
    long long v8 = v14;
    sub_216981010(&v9, &v15);
    sub_21698105C(&v10, &v16);
    __int16 v12 = v18;
    int v11 = v17;
    uint64_t v6 = *(void *)(a1 + 72);
    *(unsigned char *)(v5 - 11) = 1;
    *(void *)uint64_t v5 = &unk_26C769E70;
    *(void *)(v5 + 8) = v6;
    *(_OWORD *)(v5 + 16) = v8;
    sub_216981010((_DWORD *)(v5 + 32), &v9);
    sub_21698105C((_DWORD *)(v5 + 36), &v10);
    *(_DWORD *)(v5 + 40) = v11;
    *(_WORD *)(v5 + 44) = v12;
    *(void *)(v5 + 48) = v3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    goto LABEL_18;
  }
  uint64_t v5 = 0;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  return v5;
}

void sub_216E19B08(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216E19B2C(uint64_t a1)
{
  *(void *)a1 = &unk_26C769E70;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  return a1;
}

void sub_216E19B7C(_DWORD *a1)
{
  *(void *)a1 = &unk_26C769E70;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 9);
  sub_21697C414(a1 + 8);

  operator delete(a1);
}

uint64_t sub_216E19BDC(tbb::internal::allocate_child_proxy *this)
{
  uint64_t v2 = (_OWORD *)((char *)this + 16);
  uint64_t v13 = 0;
  uint64_t v3 = (_DWORD *)((char *)this + 32);
  uint64_t v4 = (_DWORD *)((char *)this + 36);
  uint64_t v5 = (char *)this + 40;
  uint64_t v6 = &v13;
  uint64_t v7 = 0x200000000;
  for (uint64_t i = 1; ; ++i)
  {
    long long v14 = v6;
    uint64_t v9 = tbb::internal::allocate_child_proxy::allocate(this, 0x30uLL);
    uint64_t v10 = *((void *)this + 1);
    *(unsigned char *)(v9 - 11) = 1;
    *(void *)uint64_t v9 = &unk_26C769EB8;
    *(_OWORD *)(v9 + 8) = *v2;
    sub_216981010((_DWORD *)(v9 + 24), v3);
    sub_21698105C((_DWORD *)(v9 + 28), v4);
    int v11 = *(_DWORD *)v5;
    *(_WORD *)(v9 + 36) = *((_WORD *)v5 + 2);
    *(_DWORD *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v2);
    if (i == *((void *)this + 6)) {
      break;
    }
    *(void *)(v9 - 8) = 0;
    uint64_t v6 = (uint64_t *)(v9 - 8);
    *long long v14 = v9;
    v7 += 0x100000000;
  }
  *((void *)this - 3) = v7 >> 32;
  if (v13)
  {
    (***(void (****)(void, uint64_t, uint64_t *))(v13 - 40))(*(void *)(v13 - 40), v13, v14);
    uint64_t v13 = 0;
    long long v14 = &v13;
  }
  (*(void (**)(void, tbb::internal::allocate_child_proxy *, uint64_t))(**((void **)this - 5) + 8))(*((void *)this - 5), this, v9);
  return 0;
}

uint64_t sub_216E19D60(uint64_t a1)
{
  *(void *)a1 = &unk_26C769EB8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  return a1;
}

void sub_216E19DB0(_DWORD *a1)
{
  *(void *)a1 = &unk_26C769EB8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_21697C414(a1 + 6);

  operator delete(a1);
}

uint64_t sub_216E19E10(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(*(void *)(a1 + 40) + 8);
  sub_216D3AE90(a1 + 8, (uint64_t)&v3);
  sub_216E196C4(v1, &v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return 0;
}

void sub_216E19E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216E19EA8(uint64_t *a1)
{
  uint64_t result = a1[2];
  if (!result)
  {
    uint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    unint64_t v5 = sub_216851020(v3);
    uint64_t v6 = *(void *)(v4 + 32);
    __dmb(0xBu);
    uint64_t result = *(void *)(v6 + 8 * v5) + 8 * (v3 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL));
    a1[2] = result;
  }
  return result;
}

uint64_t sub_216E19F08(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v4)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(void *)a1 = v7;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(*(char **)a3, v7, v8);
      int v5 = 2;
    }
    else
    {
      int v5 = 0;
    }
  }
  else
  {
    int v5 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_216E19F7C(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned __int8 v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2169814FC((uint64_t **)a1, v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 2), (_DWORD *)v6 + 4);
      uint64_t v6 = (void *)*v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216E19FE8(_Unwind_Exception *a1)
{
  sub_216981EE8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_216E1A000(void *a1, void *a2)
{
  sub_216779180(a1, (uint64_t)"( ", 2);
  uint64_t v6 = (void *)*a2;
  unsigned __int8 v4 = a2 + 1;
  int v5 = v6;
  if (v6 != v4)
  {
    do
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::operator<<(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28));
      sub_216779180(v7, (uint64_t)" ", 1);
      long long v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          int v5 = v9;
        }
        while (!v10);
      }
      int v5 = v9;
    }
    while (v9 != v4);
  }
  sub_216779180(a1, (uint64_t)")", 1);
  return a1;
}

void sub_216E1A0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    sub_216DFBBD8((uint64_t *)a2);
    pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::Lifeboat((pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat *)v79, *(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136));
    uint64_t j = (unsigned int *)(a2 + 8);
    int v5 = *(void **)a2;
    if (*(void *)a2 != a2 + 8)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Usd_ClipCache::InvalidateClipsForPrim(*(pxrInternal__aapl__pxrReserved__::Usd_ClipCache **)(a1 + 136), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4), v4);
        uint64_t v7 = (unsigned int *)v5[1];
        if (v7)
        {
          do
          {
            long long v8 = v7;
            uint64_t v7 = *(unsigned int **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            long long v8 = (unsigned int *)v5[2];
            BOOL v9 = *(void *)v8 == (void)v5;
            int v5 = v8;
          }
          while (!v9);
        }
        int v5 = v8;
      }
      while (v8 != j);
    }
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    unint64_t v78 = 0;
    sub_216A6E72C(&v76, *(void *)(a2 + 16));
    uint64_t v10 = *(void *)a2;
    if (*(unsigned int **)a2 != j)
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 32))
          && (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 32)) & 1) == 0)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathDescendantToAnInstance(*(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)(a1 + 144), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 32))&& (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::PrototypeUsesPrimIndexPath(*(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)(a1 + 144), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 32)) & 1) == 0)
          {
            if (sub_216C4B19C(1))
            {
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 32));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Ignoring elided prim <%s>\n", v17, v18, Text);
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::UnregisterInstancePrimIndexesUnder(*(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)(a1 + 144), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 32), v11);
            __int16 v12 = v77;
            if ((unint64_t)v77 >= v78)
            {
              uint64_t v13 = (_DWORD *)sub_216981B30(&v76, (_DWORD *)(v10 + 32));
            }
            else
            {
              sub_216981010(v77, (_DWORD *)(v10 + 32));
              sub_21698105C(v12 + 1, (_DWORD *)(v10 + 36));
              uint64_t v13 = v12 + 2;
            }
            uint64_t v77 = v13;
          }
        }
        long long v14 = *(unsigned int **)(v10 + 8);
        if (v14)
        {
          do
          {
            int v15 = v14;
            long long v14 = *(unsigned int **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int v15 = *(unsigned int **)(v10 + 16);
            BOOL v9 = *(void *)v15 == v10;
            uint64_t v10 = (uint64_t)v15;
          }
          while (!v9);
        }
        uint64_t v10 = (uint64_t)v15;
      }
      while (v15 != j);
    }
    pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v82);
    uint64_t v75 = 0;
    long long v74 = 0u;
    memset(v73, 0, sizeof(v73));
    memset(v72, 0, sizeof(v72));
    sub_216779094(__p, "recomposing stage");
    pxrInternal__aapl__pxrReserved__::UsdStage::_ComposePrimIndexesInParallel(a1, (uint64_t)&v76, (uint64_t *)__p, (uint64_t)v72);
    if (SBYTE7(v70) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = 0u;
    long long v70 = 0u;
    int v71 = 1065353216;
    uint64_t v20 = *(void *)a2;
    int8x16_t v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v19);
    uint64_t v22 = *(void *)(v20 + 32);
    uint64_t v23 = *v21;
    uint64_t v24 = *(void *)(a2 + 16);
    if (v22 == *v21 && v24 != 1)
    {
      uint64_t v64 = "usd/stage.cpp";
      int v65 = (void **)"_RecomposePrims";
      uint64_t v66 = 4831;
      uint64_t v67 = "void pxrInternal__aapl__pxrReserved__::UsdStage::_RecomposePrims(T *) [T = std::map<pxrInternal__aapl__pxrRe"
            "served__::SdfPath, std::vector<const pxrInternal__aapl__pxrReserved__::SdfChangeList::Entry *>>]";
      char v68 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "!pathsContainsAbsRoot || pathsToRecompose->size() == 1", 0);
      uint64_t v24 = *(void *)(a2 + 16);
    }
    uint64_t v56 = v24;
    uint64_t v57 = v22;
    uint64_t v25 = *(void *)a2;
    if (*(unsigned int **)a2 != j)
    {
      do
      {
        uint64_t v26 = j;
        uint64_t v27 = a1;
        pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrimsInPrototypesUsingPrimIndexPath(*(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)(a1 + 144), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 32), (uint64_t *)&v64);
        unint64_t v29 = v64;
        for (uint64_t i = v65; v29 != (char *)i; v29 += 8)
        {
          uint64_t v58 = v29;
          uint64_t v30 = (int *)sub_216CF7BD4((uint64_t)__p, (unsigned int *)v29, (uint64_t)&unk_2174BFD90, (_DWORD **)&v58);
          sub_2169C487C(v30 + 6, (_DWORD *)(v25 + 32));
          sub_2169C48D4(v30 + 7, (_DWORD *)(v25 + 36));
          uint64_t v58 = v29;
          sub_216E1B264((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v29, (uint64_t)&unk_2174BFD90, (_DWORD **)&v58);
        }
        int v61 = &v64;
        sub_216981168((void ***)&v61);
        a1 = v27;
        pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypesUsingPrimIndexPathOrDescendents(*(void *)(v27 + 144), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 32), (uint64_t *)&v64);
        char v32 = v64;
        uint64_t v31 = v65;
        for (uint64_t j = v26; v32 != (char *)v31; v32 += 16)
        {
          uint64_t v58 = v32;
          uint64_t v33 = (int *)sub_216CF7BD4((uint64_t)__p, (unsigned int *)v32, (uint64_t)&unk_2174BFD90, (_DWORD **)&v58);
          sub_2169C487C(v33 + 6, (_DWORD *)v32 + 2);
          sub_2169C48D4(v33 + 7, (_DWORD *)v32 + 3);
          uint64_t v58 = v32;
          sub_216E1B264((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v32, (uint64_t)&unk_2174BFD90, (_DWORD **)&v58);
        }
        int v61 = &v64;
        sub_216BECE18((void ***)&v61);
        uint64_t v34 = *(unsigned int **)(v25 + 8);
        if (v34)
        {
          do
          {
            uint64_t v35 = v34;
            uint64_t v34 = *(unsigned int **)v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            uint64_t v35 = *(unsigned int **)(v25 + 16);
            BOOL v9 = *(void *)v35 == v25;
            uint64_t v25 = (uint64_t)v35;
          }
          while (!v9);
        }
        uint64_t v25 = (uint64_t)v35;
      }
      while (v35 != v26);
    }
    int v36 = (char *)a1;
    unsigned int v37 = v72[0];
    if (v72[1] != v72[0])
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      do
      {
        long long v40 = v72[3];
        uint64_t v64 = (char *)&v37[v38];
        int v41 = (int *)sub_216CF7BD4((uint64_t)__p, (unsigned int *)&v37[v38], (uint64_t)&unk_2174BFD90, (_DWORD **)&v64);
        sub_2169C487C(v41 + 6, &v40[v38]);
        sub_2169C48D4(v41 + 7, (_DWORD *)&v40[v38] + 1);
        uint64_t v64 = (char *)&v72[0][v38];
        sub_216E1B264((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v72[0][v38], (uint64_t)&unk_2174BFD90, (_DWORD **)&v64);
        ++v39;
        unsigned int v37 = v72[0];
        ++v38;
      }
      while (v39 != v72[1] - v72[0]);
    }
    uint64_t v42 = v73[0];
    if (v73[1] != v73[0])
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      do
      {
        uint64_t v45 = v73[3];
        uint64_t v64 = (char *)(v42 + v43);
        double v46 = (int *)sub_216CF7BD4((uint64_t)__p, (unsigned int *)(v42 + v43), (uint64_t)&unk_2174BFD90, (_DWORD **)&v64);
        sub_2169C487C(v46 + 6, (_DWORD *)(v45 + v43));
        sub_2169C48D4(v46 + 7, (_DWORD *)(v45 + v43 + 4));
        uint64_t v64 = (char *)(v73[0] + v43);
        sub_216E1B264((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v73[0] + v43), (uint64_t)&unk_2174BFD90, (_DWORD **)&v64);
        ++v44;
        uint64_t v42 = v73[0];
        v43 += 8;
      }
      while (v44 != (uint64_t)(v73[1] - v73[0]) >> 3);
    }
    if (v57 != v23 && *(void *)(a2 + 16) != v56) {
      sub_216DFBBD8((uint64_t *)a2);
    }
    int v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    sub_216E1AA08(v36, *(unsigned int **)a2, j, &v61);
    if (*((void *)&v70 + 1))
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      unint64_t v60 = 0;
      sub_216A6E72C((uint64_t *)&v58, (v62 - (unsigned char *)v61) >> 3);
      int v47 = (char *)v61;
      uint64_t v48 = v62;
      if (v61 != v62)
      {
        do
        {
          sub_216E1B1F0(__p, (unsigned int *)(*(void *)v47 + 16), (_DWORD *)(*(void *)v47 + 16), &v64);
          uint64_t v49 = v59;
          if ((unint64_t)v59 >= v60)
          {
            uint64_t v50 = (char **)sub_216981B30((uint64_t *)&v58, &v64);
          }
          else
          {
            sub_216981010(v59, &v64);
            sub_21698105C((_DWORD *)v49 + 1, (_DWORD *)&v64 + 1);
            uint64_t v50 = v49 + 1;
          }
          uint64_t v59 = v50;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
          sub_21697C414(&v64);
          v47 += 8;
        }
        while (v47 != v48);
      }
      uint64_t v64 = v36;
      int v65 = &v61;
      uint64_t v66 = (uint64_t)&v80;
      uint64_t v80 = &v58;
      v81[0] = (uint64_t (**)(void))&unk_26C769AD8;
      v81[1] = (uint64_t (**)(void))&v64;
      tbb::interface7::internal::isolate_within_arena(v81, 0);
      uint64_t v64 = (char *)&v58;
      sub_216981168((void ***)&v64);
    }
    else
    {
      v81[0] = 0;
      uint64_t v64 = v36;
      int v65 = &v61;
      uint64_t v66 = (uint64_t)v81;
      uint64_t v58 = (char *)&unk_26C769AD8;
      uint64_t v59 = &v64;
      tbb::interface7::internal::isolate_within_arena((uint64_t (***)(void))&v58, 0);
    }
    double v54 = (char *)*((void *)&v74 + 1);
    for (k = (char *)v74; k != v54; k += 8)
    {
      uint64_t v64 = k;
      sub_216E1B264((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)k, (uint64_t)&unk_2174BFD90, (_DWORD **)&v64);
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::_DestroyPrimsInParallel((uint64_t)v36, (uint64_t)&v74, v51);
    if (v61)
    {
      uint64_t v62 = (char *)v61;
      operator delete(v61);
    }
    sub_216CF65DC((uint64_t)__p);
    __p[0] = &v74;
    sub_216981168((void ***)__p);
    __p[0] = &v73[3];
    sub_216981168((void ***)__p);
    __p[0] = v73;
    sub_216981168((void ***)__p);
    __p[0] = &v72[3];
    sub_216981168((void ***)__p);
    __p[0] = v72;
    sub_216981168((void ***)__p);
    pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v82);
    v72[0] = (void **)&v76;
    sub_216981168(v72);
    pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::~Lifeboat(v79);
  }
  else if (sub_216C4B19C(1))
  {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Nothing to recompose in cache changes\n", v52, v53);
  }
}

void sub_216E1A8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  sub_216CF65DC((uint64_t)&__p);
  sub_216DE8BFC((void **)&a34);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v34 - 120));
  a34 = v34 - 192;
  sub_216981168((void ***)&a34);
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::~Lifeboat((void ***)(v34 - 168));
  _Unwind_Resume(a1);
}

void sub_216E1AA08(void *a1, unsigned int *a2, unsigned int *a3, void **a4)
{
  unint64_t v6 = ((unsigned char *)a4[1] - (unsigned char *)*a4) >> 3;
  if (a2 == a3)
  {
    sub_2168265D4(a4, v6);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = a2;
    do
    {
      int v11 = (unsigned int *)*((void *)v10 + 1);
      if (v11)
      {
        do
        {
          __int16 v12 = v11;
          int v11 = *(unsigned int **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          __int16 v12 = (unsigned int *)*((void *)v10 + 2);
          BOOL v13 = *(void *)v12 == (void)v10;
          uint64_t v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      uint64_t v10 = v12;
    }
    while (v12 != a3);
    sub_2168265D4(a4, v9 + v6);
    if (a2 != a3)
    {
      do
      {
        if (sub_216C4B19C(1))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8));
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Recomposing: %s\n", v15, v16, Text);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8))
          && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8)))
        {
          long long v101 = 0;
          char v102 = 0;
          uint64_t v103 = 0;
          if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPrototypePath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)(a2 + 8), v17))
          {
            if (sub_216DF0FF4(a1 + 25, (uint64_t)&v101, a2 + 8))
            {
              uint64_t v24 = *(void *)(v103 + 24);
              uint64_t v25 = v101;
              long long v101 = 0;
              if (v102)
              {
LABEL_25:
                atomic_ullong v26 = *v25;
                unint64_t v27 = *v25 & 0xFFFFFFFFFFFFFFFCLL;
                while (1)
                {
                  atomic_ullong v28 = v26;
                  atomic_compare_exchange_strong(v25, (unint64_t *)&v28, v27);
                  if (v28 == v26) {
                    break;
                  }
                  if (atomic_fetch_add_explicit(v25, 0, memory_order_relaxed) != v26)
                  {
                    sched_yield();
                    goto LABEL_25;
                  }
                }
              }
              else
              {
                atomic_fetch_add(v25, 0xFFFFFFFFFFFFFFFCLL);
              }
              uint64_t v103 = 0;
            }
            else
            {
              uint64_t v34 = pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), v23);
              uint64_t v24 = v34;
              if (v34) {
                *(void *)(v34 + 40) = a1[3] | 1;
              }
            }
            long long v40 = (uint64_t *)a4[1];
            unint64_t v39 = (unint64_t)a4[2];
            if ((unint64_t)v40 >= v39)
            {
              uint64_t v42 = ((char *)v40 - (unsigned char *)*a4) >> 3;
              if ((unint64_t)(v42 + 1) >> 61) {
                sub_21677CB10();
              }
              uint64_t v43 = v39 - (void)*a4;
              uint64_t v44 = v43 >> 2;
              if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
                uint64_t v44 = v42 + 1;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v44;
              }
              if (v45) {
                double v46 = (char *)sub_21677CB28((uint64_t)(a4 + 2), v45);
              }
              else {
                double v46 = 0;
              }
              uint64_t v84 = (uint64_t *)&v46[8 * v42];
              *uint64_t v84 = v24;
              int v41 = (char *)(v84 + 1);
              uint64_t v86 = (char *)*a4;
              uint64_t v85 = (char *)a4[1];
              if (v85 != *a4)
              {
                do
                {
                  uint64_t v87 = *((void *)v85 - 1);
                  v85 -= 8;
                  *--uint64_t v84 = v87;
                }
                while (v85 != v86);
                uint64_t v85 = (char *)*a4;
              }
              *a4 = v84;
              a4[1] = v41;
              a4[2] = &v46[8 * v45];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              uint64_t *v40 = v24;
              int v41 = (char *)(v40 + 1);
            }
            a4[1] = v41;
            uint64_t v88 = (unsigned int *)*((void *)a2 + 1);
            if (v88)
            {
              do
              {
                uint64_t v22 = v88;
                uint64_t v88 = *(unsigned int **)v88;
              }
              while (v88);
            }
            else
            {
              do
              {
                uint64_t v22 = (unsigned int *)*((void *)a2 + 2);
                BOOL v13 = *(void *)v22 == (void)a2;
                a2 = v22;
              }
              while (!v13);
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), &v100);
            if (sub_216DF0FF4(a1 + 25, (uint64_t)&v101, (unsigned int *)&v100))
            {
              unint64_t v29 = *(void *)(v103 + 24);
              uint64_t v30 = v101;
              long long v101 = 0;
              if (v102)
              {
LABEL_31:
                atomic_ullong v31 = *v30;
                unint64_t v32 = *v30 & 0xFFFFFFFFFFFFFFFCLL;
                while (1)
                {
                  atomic_ullong v33 = v31;
                  atomic_compare_exchange_strong(v30, (unint64_t *)&v33, v32);
                  if (v33 == v31) {
                    break;
                  }
                  if (atomic_fetch_add_explicit(v30, 0, memory_order_relaxed) != v31)
                  {
                    sched_yield();
                    goto LABEL_31;
                  }
                }
              }
              else
              {
                atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFCLL);
              }
              uint64_t v103 = 0;
              if ((*(void *)(v29 + 56) & 0x1000) != 0) {
                int v47 = 0;
              }
              else {
                int v47 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 151);
              }
              pxrInternal__aapl__pxrReserved__::UsdStage::_ComposeChildren((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, v29, v47, 0);
              while (1)
              {
                if (sub_216DF0FF4(a1 + 25, (uint64_t)&v101, a2 + 8))
                {
                  uint64_t v49 = *(void *)(v103 + 24);
                  uint64_t v51 = (char *)a4[1];
                  unint64_t v50 = (unint64_t)a4[2];
                  if ((unint64_t)v51 >= v50)
                  {
                    uint64_t v59 = (v51 - (unsigned char *)*a4) >> 3;
                    if ((unint64_t)(v59 + 1) >> 61) {
                      sub_21677CB10();
                    }
                    uint64_t v60 = v50 - (void)*a4;
                    uint64_t v61 = v60 >> 2;
                    if (v60 >> 2 <= (unint64_t)(v59 + 1)) {
                      uint64_t v61 = v59 + 1;
                    }
                    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v62 = v61;
                    }
                    if (v62) {
                      uint64_t v63 = (char *)sub_21677CB28((uint64_t)(a4 + 2), v62);
                    }
                    else {
                      uint64_t v63 = 0;
                    }
                    uint64_t v69 = &v63[8 * v59];
                    *(void *)uint64_t v69 = v49;
                    uint64_t v52 = v69 + 8;
                    int v71 = (char *)*a4;
                    long long v70 = (char *)a4[1];
                    if (v70 != *a4)
                    {
                      do
                      {
                        uint64_t v72 = *((void *)v70 - 1);
                        v70 -= 8;
                        *((void *)v69 - 1) = v72;
                        v69 -= 8;
                      }
                      while (v70 != v71);
                      long long v70 = (char *)*a4;
                    }
                    *a4 = v69;
                    a4[1] = v52;
                    a4[2] = &v63[8 * v62];
                    if (v70) {
                      operator delete(v70);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v51 = v49;
                    uint64_t v52 = v51 + 8;
                  }
                  a4[1] = v52;
                  if (v103)
                  {
                    uint64_t v73 = v101;
                    long long v101 = 0;
                    if (v102)
                    {
LABEL_95:
                      atomic_ullong v74 = *v73;
                      unint64_t v75 = *v73 & 0xFFFFFFFFFFFFFFFCLL;
                      while (1)
                      {
                        atomic_ullong v76 = v74;
                        atomic_compare_exchange_strong(v73, (unint64_t *)&v76, v75);
                        if (v76 == v74) {
                          break;
                        }
                        if (atomic_fetch_add_explicit(v73, 0, memory_order_relaxed) != v74)
                        {
                          sched_yield();
                          goto LABEL_95;
                        }
                      }
                    }
                    else
                    {
                      atomic_fetch_add(v73, 0xFFFFFFFFFFFFFFFCLL);
                    }
                    uint64_t v103 = 0;
                  }
                }
                else if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPrototypePath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)(a2 + 8), v48))
                {
                  uint64_t v54 = pxrInternal__aapl__pxrReserved__::UsdStage::_InstantiatePrim((pxrInternal__aapl__pxrReserved__::UsdStage *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8), v53);
                  uint64_t v55 = v54;
                  if (v54) {
                    *(void *)(v54 + 40) = a1[3] | 1;
                  }
                  uint64_t v57 = (uint64_t *)a4[1];
                  unint64_t v56 = (unint64_t)a4[2];
                  if ((unint64_t)v57 >= v56)
                  {
                    uint64_t v64 = ((char *)v57 - (unsigned char *)*a4) >> 3;
                    if ((unint64_t)(v64 + 1) >> 61) {
                      sub_21677CB10();
                    }
                    uint64_t v65 = v56 - (void)*a4;
                    uint64_t v66 = v65 >> 2;
                    if (v65 >> 2 <= (unint64_t)(v64 + 1)) {
                      uint64_t v66 = v64 + 1;
                    }
                    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v67 = v66;
                    }
                    if (v67) {
                      char v68 = (char *)sub_21677CB28((uint64_t)(a4 + 2), v67);
                    }
                    else {
                      char v68 = 0;
                    }
                    uint64_t v77 = (uint64_t *)&v68[8 * v64];
                    uint64_t *v77 = v55;
                    uint64_t v58 = (char *)(v77 + 1);
                    uint64_t v79 = (char *)*a4;
                    unint64_t v78 = (char *)a4[1];
                    if (v78 != *a4)
                    {
                      do
                      {
                        uint64_t v80 = *((void *)v78 - 1);
                        v78 -= 8;
                        *--uint64_t v77 = v80;
                      }
                      while (v78 != v79);
                      unint64_t v78 = (char *)*a4;
                    }
                    *a4 = v77;
                    a4[1] = v58;
                    a4[2] = &v68[8 * v67];
                    if (v78) {
                      operator delete(v78);
                    }
                  }
                  else
                  {
                    uint64_t *v57 = v54;
                    uint64_t v58 = (char *)(v57 + 1);
                  }
                  a4[1] = v58;
                }
                uint64_t v81 = (unsigned int *)*((void *)a2 + 1);
                if (v81)
                {
                  do
                  {
                    uint64_t v22 = v81;
                    uint64_t v81 = *(unsigned int **)v81;
                  }
                  while (v81);
                }
                else
                {
                  do
                  {
                    uint64_t v22 = (unsigned int *)*((void *)a2 + 2);
                    BOOL v13 = *(void *)v22 == (void)a2;
                    a2 = v22;
                  }
                  while (!v13);
                }
                if (v22 == a3) {
                  break;
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + 8), &v99);
                uint64_t v83 = v99;
                uint64_t v82 = v100;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v99 + 1);
                sub_21697C414(&v99);
                a2 = v22;
                if (v83 != v82) {
                  goto LABEL_148;
                }
              }
              uint64_t v22 = a3;
            }
            else if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v100))
            {
              uint64_t v35 = (unsigned int *)*((void *)a2 + 1);
              if (v35)
              {
                do
                {
                  uint64_t v22 = v35;
                  uint64_t v35 = *(unsigned int **)v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  uint64_t v22 = (unsigned int *)*((void *)a2 + 2);
                  BOOL v13 = *(void *)v22 == (void)a2;
                  a2 = v22;
                }
                while (!v13);
              }
            }
            else
            {
              unsigned int v37 = (char *)a4[1];
              unint64_t v36 = (unint64_t)a4[2];
              if ((unint64_t)v37 >= v36)
              {
                uint64_t v89 = (v37 - (unsigned char *)*a4) >> 3;
                if ((unint64_t)(v89 + 1) >> 61) {
                  sub_21677CB10();
                }
                uint64_t v90 = v36 - (void)*a4;
                uint64_t v91 = v90 >> 2;
                if (v90 >> 2 <= (unint64_t)(v89 + 1)) {
                  uint64_t v91 = v89 + 1;
                }
                if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v92 = v91;
                }
                if (v92) {
                  uint64_t v93 = (char *)sub_21677CB28((uint64_t)(a4 + 2), v92);
                }
                else {
                  uint64_t v93 = 0;
                }
                size_t v94 = &v93[8 * v89];
                *(void *)size_t v94 = a1[3];
                uint64_t v38 = v94 + 8;
                uint64_t v96 = (char *)*a4;
                uint64_t v95 = (char *)a4[1];
                if (v95 != *a4)
                {
                  do
                  {
                    uint64_t v97 = *((void *)v95 - 1);
                    v95 -= 8;
                    *((void *)v94 - 1) = v97;
                    v94 -= 8;
                  }
                  while (v95 != v96);
                  uint64_t v95 = (char *)*a4;
                }
                *a4 = v94;
                a4[1] = v38;
                a4[2] = &v93[8 * v92];
                if (v95) {
                  operator delete(v95);
                }
              }
              else
              {
                *(void *)unsigned int v37 = a1[3];
                uint64_t v38 = v37 + 8;
              }
              a4[1] = v38;
              uint64_t v98 = (unsigned int *)*((void *)a2 + 1);
              if (v98)
              {
                do
                {
                  uint64_t v22 = v98;
                  uint64_t v98 = *(unsigned int **)v98;
                }
                while (v98);
              }
              else
              {
                do
                {
                  uint64_t v22 = (unsigned int *)*((void *)a2 + 2);
                  BOOL v13 = *(void *)v22 == (void)a2;
                  a2 = v22;
                }
                while (!v13);
              }
            }
LABEL_148:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
            sub_21697C414(&v100);
          }
          uint64_t v103 = 0;
          sub_21685C048(&v101);
        }
        else
        {
          if (sub_216C4B19C(1))
          {
            __int16 v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8));
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Skipping non-prim: %s\n", v19, v20, v18);
          }
          int8x16_t v21 = (unsigned int *)*((void *)a2 + 1);
          if (v21)
          {
            do
            {
              uint64_t v22 = v21;
              int8x16_t v21 = *(unsigned int **)v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              uint64_t v22 = (unsigned int *)*((void *)a2 + 2);
              BOOL v13 = *(void *)v22 == (void)a2;
              a2 = v22;
            }
            while (!v13);
          }
        }
        a2 = v22;
      }
      while (v22 != a3);
    }
  }
}

void sub_216E1B184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a17 = 0;
  sub_21685C048(&a15);
  _Unwind_Resume(a1);
}

_DWORD *sub_216E1B1F0@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X2>, _DWORD *a4@<X8>)
{
  unint64_t v6 = sub_216A9DB14(a1, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    sub_216981010(a4, (_DWORD *)v6 + 6);
    long long v8 = a4 + 1;
    uint64_t v9 = (_DWORD *)v7 + 7;
  }
  else
  {
    sub_216981010(a4, a3);
    long long v8 = a4 + 1;
    uint64_t v9 = a3 + 1;
  }

  return sub_21698105C(v8, v9);
}

_DWORD *sub_216E1B264(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = (void **)sub_216AF190C((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    uint64_t v9 = *a4;
    sub_216981010(v7 + 8, v9);
    sub_21698105C(v7 + 9, v9 + 1);
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    char v12 = 1;
    sub_21677B358(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_216E1B32C((uint64_t)v11, 0);
  }
  return v7;
}

void sub_216E1B32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216D5FE64((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216E1B384(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216E1B41C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216E1B41C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

uint64_t sub_216E1B48C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  int v15 = a1 + 2;
  if (v7) {
    long long v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    long long v8 = 0;
  }
  int v11 = v8;
  char v12 = &v8[32 * v3];
  long long v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  sub_216E1B57C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216E1B738(&v11);
  return v9;
}

void sub_216E1B568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E1B738((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216E1B57C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216E1B5F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216E1B5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216D6C860(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216E1B6AC((uint64_t)v13);
  return v11;
}

uint64_t sub_216E1B6AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216E1B6E4((uint64_t *)a1);
  }
  return a1;
}

void sub_216E1B6E4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216E1B41C(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_216E1B738(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216E1B76C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_216E1B41C(v4, i - 32);
  }
}