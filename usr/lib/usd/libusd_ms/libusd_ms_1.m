void sub_2167C3A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t (*v11)();
  unsigned char v12[13];
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v21[13];
  void *__p;
  void *v23;
  uint64_t v24;
  int v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;

  v4 = a1 + 24;
  v30 = a1 + 24;
  v31 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set(v4);
    if (*(unsigned char *)(a1 + 120)) {
      Alembic::Abc::v12::OArrayProperty::set(a1 + 72);
    }
    return;
  }
  v25 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_216778F24(&v26, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    v26 = *(_OWORD *)(a1 + 32);
    v27 = *(void *)(a1 + 48);
  }
  v5 = *(void *)(a1 + 64);
  v28 = *(void *)(a1 + 56);
  v29 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  v6 = *(void *)(a2 + 5);
  *(void *)v21 = *(void *)a2;
  *(void *)&v21[5] = v6;
  __p = 0;
  v23 = 0;
  v24 = 0;
  sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v27) < 0)
  {
    if (*((void *)&v26 + 1)) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(v27))
  {
LABEL_11:
    v7 = 0;
    goto LABEL_16;
  }
  if (v28) {
    v7 = nullsub_7;
  }
  else {
    v7 = 0;
  }
LABEL_16:
  if (v7)
  {
    if (*(_DWORD *)&v21[8] == 127 || !*(void *)v21 && v23 == __p) {
      v8 = 0;
    }
    else {
      v8 = nullsub_9;
    }
    if (v8) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v25);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v25);
    }
  }
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v25);
  if (*(unsigned char *)(a1 + 120))
  {
    v16 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_216778F24(&v17, *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      v17 = *(_OWORD *)(a1 + 80);
      v18 = *(void *)(a1 + 96);
    }
    v9 = *(void *)(a1 + 112);
    v19 = *(void *)(a1 + 104);
    v20 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)v12 = *(void *)(a2 + 40);
    *(void *)&v12[5] = *(void *)(a2 + 45);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    sub_21677EA60(&v13, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    if (SHIBYTE(v18) < 0)
    {
      if (*((void *)&v17 + 1)) {
        goto LABEL_35;
      }
    }
    else if (HIBYTE(v18))
    {
LABEL_35:
      v10 = 0;
LABEL_40:
      if (v10)
      {
        if (*(_DWORD *)&v12[8] == 127 || !*(void *)v12 && v14 == v13) {
          v11 = 0;
        }
        else {
          v11 = nullsub_21;
        }
        if (v11) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v16);
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v16);
        }
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v16);
      return;
    }
    if (v19) {
      v10 = nullsub_7;
    }
    else {
      v10 = 0;
    }
    goto LABEL_40;
  }
}

void sub_2167C3D38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v28 = (uint64_t)v27;
    sub_2167C5E20(v23);
    sub_21679FA64(v24 - 48, v28);
  }
  else
  {
    sub_2167C5E20(v23);
    sub_21679F9F4(v24 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C3D24);
}

void sub_2167C3DE4(_Unwind_Exception *a1)
{
}

void sub_2167C3E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 24;
  uint64_t v30 = a1 + 24;
  v31 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set(v4);
    if (*(unsigned char *)(a1 + 120)) {
      Alembic::Abc::v12::OArrayProperty::set(a1 + 72);
    }
    return;
  }
  int v25 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_216778F24(&v26, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long v26 = *(_OWORD *)(a1 + 32);
    uint64_t v27 = *(void *)(a1 + 48);
  }
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v28 = *(void *)(a1 + 56);
  uint64_t v29 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 5);
  *(void *)v21 = *(void *)a2;
  *(void *)&v21[5] = v6;
  __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v27) < 0)
  {
    if (*((void *)&v26 + 1)) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(v27))
  {
LABEL_11:
    v7 = 0;
    goto LABEL_16;
  }
  if (v28) {
    v7 = nullsub_7;
  }
  else {
    v7 = 0;
  }
LABEL_16:
  if (v7)
  {
    if (*(_DWORD *)&v21[8] == 127 || !*(void *)v21 && v23 == __p) {
      v8 = 0;
    }
    else {
      v8 = nullsub_13;
    }
    if (v8) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v25);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v25);
    }
  }
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v25);
  if (*(unsigned char *)(a1 + 120))
  {
    int v16 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_216778F24(&v17, *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v17 = *(_OWORD *)(a1 + 80);
      uint64_t v18 = *(void *)(a1 + 96);
    }
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v20 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)v12 = *(void *)(a2 + 40);
    *(void *)&v12[5] = *(void *)(a2 + 45);
    v13 = 0;
    v14 = 0;
    uint64_t v15 = 0;
    sub_21677EA60(&v13, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    if (SHIBYTE(v18) < 0)
    {
      if (*((void *)&v17 + 1)) {
        goto LABEL_35;
      }
    }
    else if (HIBYTE(v18))
    {
LABEL_35:
      v10 = 0;
LABEL_40:
      if (v10)
      {
        if (*(_DWORD *)&v12[8] == 127 || !*(void *)v12 && v14 == v13) {
          v11 = 0;
        }
        else {
          v11 = nullsub_21;
        }
        if (v11) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v16);
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v16);
        }
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v16);
      return;
    }
    if (v19) {
      v10 = nullsub_7;
    }
    else {
      v10 = 0;
    }
    goto LABEL_40;
  }
}

void sub_2167C4110(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  uint64_t v27 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v28 = (uint64_t)v27;
    sub_2167C5E20(v23);
    sub_21679FA64(v24 - 48, v28);
  }
  else
  {
    sub_2167C5E20(v23);
    sub_21679F9F4(v24 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C40FCLL);
}

void sub_2167C41BC(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OCurvesSchema::createPositionProperty(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  v26[0] = 0;
  v26[1] = 0;
  int v25 = (uint64_t *)v26;
  sub_2167C4D74(&v25, 3);
  uint64_t v2 = *((void *)this + 5);
  v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = v3;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v19 = v2;
  sub_216779094(__p, "P");
  LODWORD(v13) = 3;
  v14 = &v25;
  int v4 = *((_DWORD *)this + 90);
  v18[0] = 2;
  v18[2] = v4;
  v17[0] = 0;
  v17[2] = 0;
  v16[0] = 0;
  v16[2] = 0;
  sub_2167C5E88((uint64_t)&v21, &v19, (uint64_t)__p, &v13, v18, v17, v16);
  *((_DWORD *)this + 62) = v21;
  std::string::operator=((std::string *)((char *)this + 256), &v22);
  uint64_t v6 = v23;
  uint64_t v5 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  v7 = (std::__shared_weak_count *)*((void *)this + 36);
  *((void *)this + 35) = v6;
  *((void *)this + 36) = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v21);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v20) {
    sub_216784EC4(v20);
  }
  v13 = 0;
  v14 = 0;
  uint64_t v15 = 0;
  sub_2167C6418(&v21, (uint64_t *)&v13);
  if (*((void *)this + 44))
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C64C8(__p, &v21);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v11)
      {
        v12 = v11;
        operator delete(v11);
      }
      ++v8;
      unint64_t v9 = *((void *)this + 44);
    }
    while (v8 < v9);
  }
  else
  {
    unint64_t v9 = 0;
  }
  sub_2167C4FF0((uint64_t)this, *((_DWORD *)this + 90), v9);
  if (v22.__r_.__value_.__l.__size_)
  {
    v22.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__l.__size_;
    operator delete((void *)v22.__r_.__value_.__l.__size_);
  }
  if (v13)
  {
    v14 = (uint64_t **)v13;
    operator delete(v13);
  }
  if (v3) {
    sub_216784EC4(v3);
  }
  sub_2167877AC((uint64_t)&v25, v26[0]);
}

void sub_2167C43C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  v31 = *(void **)(v29 - 104);
  if (v31)
  {
    *(void *)(v29 - 96) = v31;
    operator delete(v31);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    sub_216784EC4(v28);
  }
  sub_2167877AC(v29 - 72, *(void **)(v29 - 64));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OCurvesSchema::createVertexProperties(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  v35[0] = 0;
  v35[1] = 0;
  v34 = (uint64_t *)v35;
  sub_2167C4D74(&v34, 3);
  uint64_t v3 = *((void *)this + 5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v29 = v2;
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v29 = 0;
  }
  uint64_t v28 = v3;
  sub_216779094(&__p, "nVertices");
  int v4 = *((_DWORD *)this + 90);
  int v23 = 2;
  int v24 = v4;
  int v21 = 0;
  int v22 = 0;
  int v19 = 0;
  int v20 = 0;
  int v17 = 0;
  int v18 = 0;
  sub_2167C6640((uint64_t)&v30, &v28, (uint64_t)&__p, &v23, &v21, &v19, &v17);
  *((_DWORD *)this + 74) = v30;
  std::string::operator=((std::string *)((char *)this + 304), &v31);
  uint64_t v6 = v32;
  uint64_t v5 = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  v7 = (std::__shared_weak_count *)*((void *)this + 42);
  *((void *)this + 41) = v6;
  *((void *)this + 42) = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v30);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  if (v29) {
    sub_216784EC4(v29);
  }
  uint64_t v15 = v3;
  int v16 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, "curveBasisAndType");
  int v13 = 1;
  char v14 = 4;
  int v8 = *((_DWORD *)this + 90);
  int v23 = 2;
  int v24 = v8;
  int v21 = 0;
  int v22 = 0;
  int v19 = 0;
  int v20 = 0;
  int v17 = 0;
  int v18 = 0;
  Alembic::Abc::v12::OScalarProperty::OScalarProperty(&v30, &v15, &__p, &v13, &v23, &v21, &v19, &v17);
  *((_DWORD *)this + 272) = v30;
  std::string::operator=((std::string *)((char *)this + 1096), &v31);
  uint64_t v10 = v32;
  uint64_t v9 = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 140) = v10;
  v11 = (std::__shared_weak_count *)*((void *)this + 141);
  *((void *)this + 141) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v30);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  int v23 = 0;
  __p = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  sub_2167C6B1C(&v30, (uint64_t *)&__p);
  if (*((void *)this + 44))
  {
    unint64_t v12 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088), &v23);
      ++v12;
    }
    while (v12 < *((void *)this + 44));
  }
  if (v31.__r_.__value_.__l.__size_)
  {
    v31.__r_.__value_.__r.__words[2] = v31.__r_.__value_.__l.__size_;
    operator delete((void *)v31.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_2167877AC((uint64_t)&v34, v35[0]);
}

void sub_2167C4710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    sub_216784EC4(v28);
  }
  sub_2167877AC(v29 - 72, *(void **)(v29 - 64));
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OCurvesSchema::setFromPrevious(Alembic::AbcGeom::v12::OCurvesSchema *this)
{
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    uint64_t v2 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    uint64_t v2 = nullsub_7;
  }
  else {
    uint64_t v2 = 0;
  }
LABEL_8:
  if (v2) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 248));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_12:
    uint64_t v3 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 41)) {
    uint64_t v3 = nullsub_7;
  }
  else {
    uint64_t v3 = 0;
  }
LABEL_17:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 296));
  }
  if (*((char *)this + 1119) < 0)
  {
    if (*((void *)this + 138)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 1119))
  {
LABEL_21:
    int v4 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 140)) {
    int v4 = nullsub_6;
  }
  else {
    int v4 = 0;
  }
LABEL_26:
  if (v4) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_30:
    uint64_t v5 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 11)) {
    uint64_t v5 = nullsub_6;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_35:
  if (v5) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56));
  }
  if (*((char *)this + 927) < 0)
  {
    if (*((void *)this + 114)) {
      goto LABEL_39;
    }
  }
  else if (*((unsigned char *)this + 927))
  {
LABEL_39:
    uint64_t v6 = 0;
    goto LABEL_44;
  }
  if (*((void *)this + 116)) {
    uint64_t v6 = nullsub_7;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_44:
  if (v6) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 896));
  }
  if (sub_2167C5D84((uint64_t)this + 368)) {
    v7 = nullsub_16;
  }
  else {
    v7 = 0;
  }
  if (v7) {
    sub_2167C4B94((unsigned char *)this + 368);
  }
  if (sub_2167C5D84((uint64_t)this + 544)) {
    int v8 = nullsub_17;
  }
  else {
    int v8 = 0;
  }
  if (v8) {
    sub_2167C4C34((unsigned char *)this + 544);
  }
  uint64_t result = sub_2167C5D84((uint64_t)this + 720);
  if (result) {
    uint64_t v10 = nullsub_18;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10) {
    uint64_t result = sub_2167C4CD4((unsigned char *)this + 720);
  }
  if (*((char *)this + 975) < 0)
  {
    if (*((void *)this + 120)) {
      goto LABEL_63;
    }
  }
  else if (*((unsigned char *)this + 975))
  {
LABEL_63:
    v11 = 0;
    goto LABEL_68;
  }
  if (*((void *)this + 122)) {
    v11 = nullsub_7;
  }
  else {
    v11 = 0;
  }
LABEL_68:
  if (v11) {
    uint64_t result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 944));
  }
  if (*((char *)this + 1023) < 0)
  {
    if (*((void *)this + 126)) {
      goto LABEL_72;
    }
  }
  else if (*((unsigned char *)this + 1023))
  {
LABEL_72:
    unint64_t v12 = 0;
    goto LABEL_77;
  }
  if (*((void *)this + 128)) {
    unint64_t v12 = nullsub_7;
  }
  else {
    unint64_t v12 = 0;
  }
LABEL_77:
  if (v12) {
    uint64_t result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 992));
  }
  if (*((char *)this + 1071) < 0)
  {
    if (*((void *)this + 132)) {
      goto LABEL_81;
    }
LABEL_83:
    if (*((void *)this + 134)) {
      int v13 = nullsub_7;
    }
    else {
      int v13 = 0;
    }
    goto LABEL_86;
  }
  if (!*((unsigned char *)this + 1071)) {
    goto LABEL_83;
  }
LABEL_81:
  int v13 = 0;
LABEL_86:
  if (v13) {
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1040));
  }
  return result;
}

void sub_2167C4B40(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C4B30);
}

void sub_2167C4B74(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C4B94(unsigned char *a1)
{
  uint64_t result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120]) {
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  }
  return result;
}

void sub_2167C4BE0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C4BD0);
}

void sub_2167C4C14(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C4C34(unsigned char *a1)
{
  uint64_t result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120]) {
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  }
  return result;
}

void sub_2167C4C80(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C4C70);
}

void sub_2167C4CB4(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C4CD4(unsigned char *a1)
{
  uint64_t result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120]) {
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  }
  return result;
}

void sub_2167C4D20(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C4D10);
}

void sub_2167C4D54(_Unwind_Exception *a1)
{
}

void sub_2167C4D74(uint64_t **a1, int a2)
{
  switch(a2)
  {
    case 0:
      sub_216779094(v9, "geoScope");
      sub_216779094(&__p, "con");
      v11 = v9;
      uint64_t v3 = sub_21677B174(a1, (const void **)v9, (uint64_t)&unk_21740A02C, (long long **)&v11);
      std::string::operator=((std::string *)(v3 + 7), &__p);
      goto LABEL_7;
    case 1:
      sub_216779094(v9, "geoScope");
      sub_216779094(&__p, "uni");
      v11 = v9;
      v7 = sub_21677B174(a1, (const void **)v9, (uint64_t)&unk_21740A02C, (long long **)&v11);
      std::string::operator=((std::string *)(v7 + 7), &__p);
      goto LABEL_7;
    case 2:
      sub_216779094(v9, "geoScope");
      sub_216779094(&__p, "var");
      v11 = v9;
      int v4 = sub_21677B174(a1, (const void **)v9, (uint64_t)&unk_21740A02C, (long long **)&v11);
      std::string::operator=((std::string *)(v4 + 7), &__p);
      goto LABEL_7;
    case 3:
      sub_216779094(v9, "geoScope");
      sub_216779094(&__p, "vtx");
      v11 = v9;
      uint64_t v5 = sub_21677B174(a1, (const void **)v9, (uint64_t)&unk_21740A02C, (long long **)&v11);
      std::string::operator=((std::string *)(v5 + 7), &__p);
      goto LABEL_7;
    case 4:
      sub_216779094(v9, "geoScope");
      sub_216779094(&__p, "fvr");
      v11 = v9;
      uint64_t v6 = sub_21677B174(a1, (const void **)v9, (uint64_t)&unk_21740A02C, (long long **)&v11);
      std::string::operator=((std::string *)(v6 + 7), &__p);
LABEL_7:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      break;
    default:
      return;
  }
}

void sub_2167C4F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2167C4FF0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v20 = a1 + 8;
  int v21 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
LABEL_5:
    if (*(void *)(a1 + 88)) {
      return;
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  int v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".selfBnds");
  v13[0] = 2;
  v13[2] = a2;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167B9640((uint64_t)v18, &v16, (uint64_t)__p, v13, v12, v11, v10);
  *(_DWORD *)(a1 + 56) = v18[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v18 + 8));
  int64x2_t v7 = v19;
  if (v19.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(int64x2_t *)(a1 + 88) = v7;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  v18[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v18[1] = xmmword_217409FA0;
  int64x2_t v19 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    uint64_t v9 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v9, v18);
      --a3;
    }
    while (a3);
  }
}

void sub_2167C5160(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 96));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  uint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v25 - 48, (uint64_t)v28);
  }
  else {
    sub_21679F9F4(v25 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C514CLL);
}

void sub_2167C51E4(_Unwind_Exception *a1)
{
}

void *sub_2167C5204(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2167C5248(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 279) < 0)
  {
    if (!*(void *)(a1 + 264)) {
      goto LABEL_5;
    }
LABEL_8:
    sub_2167B7AC8((int *)(a1 + 8), (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v6, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return;
  }
  if (*(unsigned char *)(a1 + 279)) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*(void *)(a1 + 280)) {
    goto LABEL_8;
  }
  uint64_t v3 = sub_2167C5C4C(a1 + 248);
  uint64_t v4 = *(void *)(v3 + 72);
  *a2 = *(void *)(v3 + 64);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2167C52EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2167C5310(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 2));
  uint64_t v6 = *((void *)a2 + 7);
  uint64_t v5 = *((void *)a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 5));
  uint64_t v9 = *((void *)a2 + 13);
  uint64_t v8 = *((void *)a2 + 14);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)((char *)a2 + 136));
  uint64_t v12 = *((void *)a2 + 20);
  uint64_t v11 = *((void *)a2 + 21);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v12;
  *(void *)(a1 + 168) = v11;
  if (v13) {
    sub_216784EC4(v13);
  }
  return a1;
}

uint64_t sub_2167C5410(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling(Alembic::AbcGeom::v12::OCurvesSchema *this, int a2)
{
  *((_DWORD *)this + 90) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    uint64_t v3 = nullsub_7;
  }
  else {
    uint64_t v3 = 0;
  }
LABEL_8:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 248));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_12:
    long long v4 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 41)) {
    long long v4 = nullsub_7;
  }
  else {
    long long v4 = 0;
  }
LABEL_17:
  if (v4) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 296));
  }
  if (*((char *)this + 1119) < 0)
  {
    if (*((void *)this + 138)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 1119))
  {
LABEL_21:
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 140)) {
    uint64_t v5 = nullsub_6;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_26:
  if (v5) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1088));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_30:
    uint64_t v6 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 11)) {
    uint64_t v6 = nullsub_6;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_35:
  if (v6) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 56));
  }
  if (*((char *)this + 927) < 0)
  {
    if (*((void *)this + 114)) {
      goto LABEL_39;
    }
  }
  else if (*((unsigned char *)this + 927))
  {
LABEL_39:
    uint64_t v7 = 0;
    goto LABEL_44;
  }
  if (*((void *)this + 116)) {
    uint64_t v7 = nullsub_7;
  }
  else {
    uint64_t v7 = 0;
  }
LABEL_44:
  if (v7) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 896));
  }
  if (sub_2167C5D84((uint64_t)this + 368)) {
    uint64_t v8 = nullsub_16;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8) {
    sub_2167C5854((unsigned char *)this + 368);
  }
  if (sub_2167C5D84((uint64_t)this + 544)) {
    uint64_t v9 = nullsub_17;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9) {
    sub_2167C58FC((unsigned char *)this + 544);
  }
  uint64_t result = sub_2167C5D84((uint64_t)this + 720);
  if (result) {
    uint64_t v11 = nullsub_18;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11) {
    uint64_t result = sub_2167C59A4((unsigned char *)this + 720);
  }
  if (*((char *)this + 975) < 0)
  {
    if (*((void *)this + 120)) {
      goto LABEL_63;
    }
  }
  else if (*((unsigned char *)this + 975))
  {
LABEL_63:
    uint64_t v12 = 0;
    goto LABEL_68;
  }
  if (*((void *)this + 122)) {
    uint64_t v12 = nullsub_7;
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_68:
  if (v12) {
    uint64_t result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 944));
  }
  if (*((char *)this + 1023) < 0)
  {
    if (*((void *)this + 126)) {
      goto LABEL_72;
    }
  }
  else if (*((unsigned char *)this + 1023))
  {
LABEL_72:
    int v13 = 0;
    goto LABEL_77;
  }
  if (*((void *)this + 128)) {
    int v13 = nullsub_7;
  }
  else {
    int v13 = 0;
  }
LABEL_77:
  if (v13) {
    uint64_t result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 992));
  }
  if (*((char *)this + 1071) < 0)
  {
    if (*((void *)this + 132)) {
      goto LABEL_81;
    }
LABEL_83:
    if (*((void *)this + 134)) {
      char v14 = nullsub_7;
    }
    else {
      char v14 = 0;
    }
    goto LABEL_86;
  }
  if (!*((unsigned char *)this + 1071)) {
    goto LABEL_83;
  }
LABEL_81:
  char v14 = 0;
LABEL_86:
  if (v14) {
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)((char *)this + 1040));
  }
  return result;
}

void sub_2167C5800(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C57ECLL);
}

void sub_2167C5834(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C5854(unsigned char *a1)
{
  uint64_t result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120]) {
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  }
  return result;
}

void sub_2167C58A8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C5898);
}

void sub_2167C58DC(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C58FC(unsigned char *a1)
{
  uint64_t result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120]) {
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  }
  return result;
}

void sub_2167C5950(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C5940);
}

void sub_2167C5984(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C59A4(unsigned char *a1)
{
  uint64_t result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 24));
  if (a1[120]) {
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)(a1 + 72));
  }
  return result;
}

void sub_2167C59F8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C59E8);
}

void sub_2167C5A2C(_Unwind_Exception *a1)
{
}

int *Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling(Alembic::AbcGeom::v12::OCurvesSchema *a1, void *a2)
{
  uint64_t result = (int *)((char *)a1 + 8);
  uint64_t v7 = result;
  uint64_t v8 = "OCurvesSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_2167B7AC8(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    int v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_2167C5AD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  int64x2_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C5AC0);
}

void sub_2167C5B38(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OCurvesSchema::init(Alembic::AbcGeom::v12::OCurvesSchema *this, int a2, char a3)
{
  *((unsigned char *)this + 344) = a3;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 90) = a2;
  if ((a3 & 1) == 0)
  {
    Alembic::AbcGeom::v12::OCurvesSchema::createPositionProperty(this);
    Alembic::AbcGeom::v12::OCurvesSchema::createVertexProperties(this);
  }
}

void sub_2167C5BB4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C5BA0);
}

void sub_2167C5C24(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C5C4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_2167C5CA4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  {
    {
      uint64_t v11 = operator new(0x50uLL);
      void *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      *((_DWORD *)v11 + 6) = 1;
      v11[6] = 0;
      v11[5] = 0;
      _DWORD v11[4] = v11 + 5;
      *((_DWORD *)v11 + 14) = 127;
      *((unsigned char *)v11 + 60) = 0;
      v11[8] = 0;
      v11[9] = 0;
      Alembic::Abc::v12::OBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::ArrayPropertyWriter>>::getHeader(void)const::g_phd = (uint64_t)v11;
    }
  }
  JUMPOUT(0x2167C5C94);
}

void sub_2167C5D4C(_Unwind_Exception *a1)
{
}

uint64_t sub_2167C5D84(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    if (!*(void *)(a1 + 40)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 55)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 56)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 120)) {
    return 1;
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (*(void *)(a1 + 88)) {
      goto LABEL_9;
    }
LABEL_13:
    if (*(void *)(a1 + 104)) {
      v1 = nullsub_7;
    }
    else {
      v1 = 0;
    }
    return v1 != 0;
  }
  if (!*(unsigned char *)(a1 + 103)) {
    goto LABEL_13;
  }
LABEL_9:
  v1 = 0;
  return v1 != 0;
}

void sub_2167C5E20(uint64_t a1)
{
  *(_DWORD *)(a1 + 124) = 127;
  *(unsigned char *)(a1 + 120) = 0;
}

uint64_t sub_2167C5E88(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  char v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167C5F60(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167C5F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167C5F60(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v25 = 0;
  v26[0] = 0;
  int v24 = (uint64_t *)&v25;
  int v27 = 2;
  sub_2167898D0((uint64_t *)v28, (const void ***)&v24);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v32 = 1;
  sub_2167877AC((uint64_t)&v24, v25);
  sub_2167A030C(a4, (uint64_t)&v27);
  sub_2167A030C(a5, (uint64_t)&v27);
  sub_2167A030C(a6, (uint64_t)&v27);
  sub_2167A030C(a7, (uint64_t)&v27);
  *(_DWORD *)a1 = v27;
  v26[33] = a1;
  v26[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v24);
    sub_216779180(v26, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v20 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v24, v28);
  sub_216779094(__p, "interpretation");
  sub_216779094(&__str, "point");
  uint64_t v33 = __p;
  uint64_t v13 = sub_21677B174(&v24, (const void **)__p, (uint64_t)&unk_21740A02C, (long long **)&v33);
  std::string::operator=((std::string *)(v13 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = v29;
  char v14 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a2;
  if (v15)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v16 + 24))(&__str);
    (*(void (**)(void **__return_ptr))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__p);
    (*(void (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    if (__str.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    uint64_t v16 = *a2;
  }
  __str.__r_.__value_.__r.__words[0] = 0x30000000ALL;
  (*(void (**)(void **__return_ptr))(*(void *)v16 + 104))(__p);
  long long v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)&v24, v25);
  if (v30) {
    sub_216784EC4(v30);
  }
  sub_2167877AC((uint64_t)v28, v28[1]);
}

void sub_2167C62AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C61F8);
}

void sub_2167C63E0()
{
  sub_2167A03C4(v0 - 160);
  JUMPOUT(0x2167C6410);
}

void *sub_2167C6418(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2167C64AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2167C64C8(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)((char *)a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_21677EA60(a1 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  int v6 = *((_DWORD *)a2 + 2);
  unint64_t v5 = a2 + 1;
  if (v6 != 10 || *((unsigned char *)v5 + 4) != 3)
  {
    sub_216778A5C((uint64_t)v16);
    uint64_t v8 = sub_216779180(v17, (uint64_t)"Invalid DataType in TypedArraySample. Expected: ", 48);
    *(void *)uint64_t v15 = 0x30000000ALL;
    uint64_t v9 = sub_21677D5B0(v8, v15);
    uint64_t v10 = sub_216779180(v9, (uint64_t)", but got: ", 11);
    sub_21677D5B0(v10, (int *)v5);
    std::stringbuf::str();
    sub_216778E70(v15, &__p);
    if (v14 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v12 = sub_216779038(exception, (uint64_t)v15);
    __cxa_throw(v12, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  return a1;
}

void sub_2167C65FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v8.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v4 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2167C6640(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  char v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  long long v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167C6718(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167C66F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167C6718(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v24 = 0;
  v25[0] = 0;
  char v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64x2_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  uint64_t v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000006;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 104))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  long long v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167C69F4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C6940);
}

void sub_2167C6AD0(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

void *sub_2167C6B1C(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 2;
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000006;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2167C6BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2167C6BC0(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167C6C98(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167C6C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167C6C98(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v25 = 0;
  v26[0] = 0;
  int v24 = (uint64_t *)&v25;
  int v27 = 2;
  sub_2167898D0((uint64_t *)v28, (const void ***)&v24);
  uint64_t v29 = 0;
  int v30 = 0;
  int v31 = 0;
  uint64_t v32 = 1;
  sub_2167877AC((uint64_t)&v24, v25);
  sub_2167A030C(a4, (uint64_t)&v27);
  sub_2167A030C(a5, (uint64_t)&v27);
  sub_2167A030C(a6, (uint64_t)&v27);
  sub_2167A030C(a7, (uint64_t)&v27);
  *(_DWORD *)a1 = v27;
  v26[33] = a1;
  v26[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v24);
    sub_216779180(v26, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v20 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v24, v28);
  sub_216779094(__p, "interpretation");
  sub_216779094(&__str, "vector");
  uint64_t v33 = __p;
  uint64_t v13 = sub_21677B174(&v24, (const void **)__p, (uint64_t)&unk_21740A02C, (long long **)&v33);
  std::string::operator=((std::string *)(v13 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = v29;
  uint64_t v14 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a2;
  if (v15)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v16 + 24))(&__str);
    (*(void (**)(void **__return_ptr))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__p);
    (*(void (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    if (__str.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    uint64_t v16 = *a2;
  }
  __str.__r_.__value_.__r.__words[0] = 0x30000000ALL;
  (*(void (**)(void **__return_ptr))(*(void *)v16 + 104))(__p);
  long long v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)&v24, v25);
  if (v30) {
    sub_216784EC4(v30);
  }
  sub_2167877AC((uint64_t)v28, v28[1]);
}

void sub_2167C6FE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C6F30);
}

void sub_2167C7118()
{
  sub_2167A03C4(v0 - 160);
  JUMPOUT(0x2167C7148);
}

void *sub_2167C7154(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 3;
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x20000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2167C71DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2167C71F8(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 2;
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000005;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2167C7280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2167C729C(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_21677EA60((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v9;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_21677EA60((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_2167C7334(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2167C7350(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    *((void *)__dst + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v51 = __dst + 24;
  v50 = (std::string *)sub_216779094((void *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_216779094((void *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  long long v17 = (long long *)(__dst + 136);
  sub_216779094((void *)__dst + 17, "");
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  int v18 = (std::__shared_weak_count *)a2[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v85 = 0;
  v84 = 0;
  long long __p = &v84;
  int v91 = 2;
  sub_2167898D0((uint64_t *)v92, (const void ***)&__p);
  uint64_t v93 = 0;
  v94 = 0;
  int v95 = 0;
  uint64_t v96 = 1;
  sub_2167877AC((uint64_t)&__p, v84);
  if (v18) {
    sub_216784EC4(v18);
  }
  sub_2167A030C(a7, (uint64_t)&v91);
  sub_2167A030C(a8, (uint64_t)&v91);
  sub_2167A030C(a9, (uint64_t)&v91);
  int64x2_t v19 = sub_2167898D0((uint64_t *)v90, v92);
  sub_2167C4D74((uint64_t **)v19, a5);
  sub_216779094(&__p, "isGeomParam");
  sub_216779094(&__str, "true");
  p_p = &__p;
  uint64_t v20 = sub_21677B174(v90, (const void **)&__p, (uint64_t)&unk_21740A02C, (long long **)&p_p);
  std::string::operator=((std::string *)(v20 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  sub_216779094(&v89, "float32_t");
  sub_216779094(&__p, "podName");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  char v21 = sub_21677B174(v90, (const void **)&__p, (uint64_t)&unk_21740A02C, (long long **)&__str);
  std::string::operator=((std::string *)(v21 + 7), &v89);
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  sub_21677B834((uint64_t)&__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_216779094(&__str, "podExtent");
  p_p = &__str;
  int v22 = sub_21677B174(v90, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_21740A02C, (long long **)&p_p);
  std::string::operator=((std::string *)(v22 + 7), &v82);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_21677B834((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_216779094(&p_p, "arrayExtent");
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  char v23 = sub_21677B174(v90, (const void **)&p_p, (uint64_t)&unk_21740A02C, (long long **)&v76);
  std::string::operator=((std::string *)(v23 + 7), &v77);
  if (v73.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(p_p);
  }
  sub_216779094(&p_p, "interpretation");
  sub_216779094(&v76, "vector");
  p_p_p = &p_p;
  int v24 = sub_21677B174(v90, (const void **)&p_p, (uint64_t)&unk_21740A02C, (long long **)&p_p_p);
  std::string::operator=((std::string *)(v24 + 7), &v76);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v73.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(p_p);
  }
  int v25 = v91;
  uint64_t v26 = v93;
  int v27 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v26)
  {
    uint64_t v28 = *a2;
    uint64_t v29 = (std::__shared_weak_count *)a2[1];
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v28 + 24))(&v76);
    (*(void (**)(void **__return_ptr))(*(void *)v76.__r_.__value_.__l.__data_ + 24))(&p_p);
    int v30 = (*(uint64_t (**)(void *, uint64_t))(*(void *)p_p + 48))(p_p, v26);
    if (v73.__r_.__value_.__r.__words[0]) {
      sub_216784EC4((std::__shared_weak_count *)v73.__r_.__value_.__l.__data_);
    }
    if (v76.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
    }
    if (v29) {
      sub_216784EC4(v29);
    }
  }
  else
  {
    int v30 = v95;
  }
  if (__dst[120])
  {
    int v31 = (std::__shared_weak_count *)a2[1];
    uint64_t v70 = *a2;
    v71 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 3;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
    LODWORD(p_p_p) = 1;
    LODWORD(v69) = v25;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&p_p, &v70, a3, &v76, &p_p_p);
    *((_DWORD *)__dst + 32) = p_p;
    std::string::operator=((std::string *)(__dst + 136), &v73);
    uint64_t v33 = v74;
    uint64_t v32 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v34 = (std::__shared_weak_count *)*((void *)__dst + 21);
    *((void *)__dst + 20) = v33;
    *((void *)__dst + 21) = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&p_p);
    if (v71) {
      sub_216784EC4(v71);
    }
    int v63 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_216778F24(&v64, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v64 = *v17;
      uint64_t v65 = *((void *)__dst + 19);
    }
    uint64_t v39 = *((void *)__dst + 21);
    uint64_t v66 = *((void *)__dst + 20);
    uint64_t v67 = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v76, ".vals");
    LODWORD(p_p_p) = 3;
    v69 = v90;
    int v61 = 1;
    int v62 = v25;
    int v59 = 2;
    int v60 = v30;
    sub_2167C7FD0((uint64_t)&p_p, &v63, (uint64_t)&v76, &p_p_p, &v61, &v59);
    _DWORD *v51 = p_p;
    std::string::operator=(v50, &v73);
    uint64_t v41 = v74;
    uint64_t v40 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v42 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v41;
    *((void *)__dst + 8) = v40;
    if (v42) {
      sub_216784EC4(v42);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v63);
    int v54 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_216778F24(&v55, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v55 = *v17;
      uint64_t v56 = *((void *)__dst + 19);
    }
    uint64_t v43 = *((void *)__dst + 21);
    uint64_t v57 = *((void *)__dst + 20);
    uint64_t v58 = v43;
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v76, ".indices");
    LODWORD(p_p_p) = 2;
    LODWORD(v69) = v30;
    int v61 = 0;
    int v62 = 0;
    int v59 = 0;
    int v60 = 0;
    sub_2167C8564((uint64_t)&p_p, &v54, (uint64_t)&v76, &p_p_p, &v61, &v59);
    *((_DWORD *)__dst + 18) = p_p;
    std::string::operator=((std::string *)(__dst + 80), &v73);
    uint64_t v45 = v74;
    uint64_t v44 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v46 = (std::__shared_weak_count *)*((void *)__dst + 14);
    *((void *)__dst + 13) = v45;
    *((void *)__dst + 14) = v44;
    if (v46) {
      sub_216784EC4(v46);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v54);
  }
  else
  {
    v35 = (std::__shared_weak_count *)a2[1];
    uint64_t v52 = *a2;
    v53 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 3;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
    LODWORD(p_p_p) = 1;
    LODWORD(v69) = v25;
    int v61 = 2;
    int v62 = v30;
    int v59 = 0;
    int v60 = 0;
    sub_2167C8A44((uint64_t)&p_p, &v52, a3, &v76, &p_p_p, &v61, &v59);
    _DWORD *v51 = p_p;
    std::string::operator=(v50, &v73);
    uint64_t v37 = v74;
    uint64_t v36 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v38 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v37;
    *((void *)__dst + 8) = v36;
    if (v38) {
      sub_216784EC4(v38);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (v53) {
      sub_216784EC4(v53);
    }
  }
  if (v27) {
    sub_216784EC4(v27);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
  v47 = (void *)__str.__r_.__value_.__r.__words[0];
  v48 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                            + *(void *)(__str.__r_.__value_.__r.__words[0] - 24)) = (std::string::size_type)v48;
  __str.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
  if (v80 < 0) {
    operator delete(v79);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v81);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  long long __p = v47;
  *(void **)((char *)&__p + *((void *)v47 - 3)) = v48;
  v84 = (void *)(MEMORY[0x263F8C318] + 16);
  if (v87 < 0) {
    operator delete(v86);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v88);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)v90, v90[1]);
  if (v94) {
    sub_216784EC4(v94);
  }
  sub_2167877AC((uint64_t)v92, v92[1]);
  return __dst;
}

void sub_2167C7D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Alembic::Abc::v12::OArrayProperty *a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (v54) {
    sub_216784EC4(v54);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_21677B9CC((uint64_t)&a52);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  sub_21677B9CC((uint64_t)&STACK[0x260]);
  if (*(char *)(v55 - 177) < 0) {
    operator delete(*(void **)(v55 - 200));
  }
  sub_2167877AC(v55 - 176, *(void **)(v55 - 168));
  sub_2167A03C4(v55 - 152);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  if (*(char *)(v52 + 23) < 0) {
    operator delete(*(void **)v52);
  }
  _Unwind_Resume(a1);
}

void sub_2167C7F74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2167C7F08);
}

void sub_2167C7F8C()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x2167C7F20);
}

void sub_2167C7FA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    JUMPOUT(0x2167C7F2CLL);
  }
  JUMPOUT(0x2167C7F30);
}

uint64_t sub_2167C7FD0(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::exception v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  long long v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_2167C80AC(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167C808C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_2167C80AC(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v25 = 0;
  v26[0] = 0;
  int v24 = (uint64_t *)&v25;
  int v27 = 2;
  sub_2167898D0((uint64_t *)v28, (const void ***)&v24);
  uint64_t v29 = 0;
  int v30 = 0;
  int v31 = 0;
  uint64_t v32 = 1;
  sub_2167877AC((uint64_t)&v24, v25);
  sub_2167A030C(a4, (uint64_t)&v27);
  sub_2167A030C(a5, (uint64_t)&v27);
  sub_2167A030C(a6, (uint64_t)&v27);
  sub_2167A030C(a7, (uint64_t)&v27);
  *(_DWORD *)a1 = v27;
  v26[33] = a1;
  v26[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v24);
    sub_216779180(v26, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v20 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v24, v28);
  sub_216779094(__p, "interpretation");
  sub_216779094(&__str, "vector");
  uint64_t v33 = __p;
  int v13 = sub_21677B174(&v24, (const void **)__p, (uint64_t)&unk_21740A02C, (long long **)&v33);
  std::string::operator=((std::string *)(v13 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = v29;
  uint64_t v14 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a2;
  if (v15)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v16 + 24))(&__str);
    (*(void (**)(void **__return_ptr))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__p);
    (*(void (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    if (__str.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    uint64_t v16 = *a2;
  }
  __str.__r_.__value_.__r.__words[0] = 0x20000000ALL;
  (*(void (**)(void **__return_ptr))(*(void *)v16 + 104))(__p);
  long long v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)&v24, v25);
  if (v30) {
    sub_216784EC4(v30);
  }
  sub_2167877AC((uint64_t)v28, v28[1]);
}

void sub_2167C83F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C8344);
}

void sub_2167C852C()
{
  sub_2167A03C4(v0 - 160);
  JUMPOUT(0x2167C855CLL);
}

uint64_t sub_2167C8564(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::exception v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  long long v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_2167C8640(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167C8620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_2167C8640(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v24 = 0;
  v25[0] = 0;
  char v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64x2_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  int v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000005;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 104))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  long long v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167C891C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C8868);
}

void sub_2167C89F8(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2167C8A44(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167C80AC(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167C8AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void *sub_2167C8B1C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)((char *)a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_21677EA60(a1 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2 + 1;
  if (v6 != 10 || *((unsigned char *)v5 + 4) != 3)
  {
    sub_216778A5C((uint64_t)v16);
    uint64_t v8 = sub_216779180(v17, (uint64_t)"Invalid DataType in TypedArraySample. Expected: ", 48);
    *(void *)uint64_t v15 = 0x30000000ALL;
    uint64_t v9 = sub_21677D5B0(v8, v15);
    uint64_t v10 = sub_216779180(v9, (uint64_t)", but got: ", 11);
    sub_21677D5B0(v10, (int *)v5);
    std::stringbuf::str();
    sub_216778E70(v15, &__p);
    if (v14 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::exception v12 = sub_216779038(exception, (uint64_t)v15);
    __cxa_throw(v12, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  return a1;
}

void sub_2167C8C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v8.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v4 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2167C8C94(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_21677EA60((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v9;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_21677EA60((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_2167C8D2C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2167C8D48(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    *((void *)__dst + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v51 = __dst + 24;
  v50 = (std::string *)sub_216779094((void *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_216779094((void *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  uint64_t v17 = (long long *)(__dst + 136);
  sub_216779094((void *)__dst + 17, "");
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  int v18 = (std::__shared_weak_count *)a2[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v85 = 0;
  v84 = 0;
  long long __p = &v84;
  int v91 = 2;
  sub_2167898D0((uint64_t *)v92, (const void ***)&__p);
  uint64_t v93 = 0;
  v94 = 0;
  int v95 = 0;
  uint64_t v96 = 1;
  sub_2167877AC((uint64_t)&__p, v84);
  if (v18) {
    sub_216784EC4(v18);
  }
  sub_2167A030C(a7, (uint64_t)&v91);
  sub_2167A030C(a8, (uint64_t)&v91);
  sub_2167A030C(a9, (uint64_t)&v91);
  int64x2_t v19 = sub_2167898D0((uint64_t *)v90, v92);
  sub_2167C4D74((uint64_t **)v19, a5);
  sub_216779094(&__p, "isGeomParam");
  sub_216779094(&__str, "true");
  p_p = &__p;
  uint64_t v20 = sub_21677B174(v90, (const void **)&__p, (uint64_t)&unk_21740A02C, (long long **)&p_p);
  std::string::operator=((std::string *)(v20 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  sub_216779094(&v89, "float32_t");
  sub_216779094(&__p, "podName");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  char v21 = sub_21677B174(v90, (const void **)&__p, (uint64_t)&unk_21740A02C, (long long **)&__str);
  std::string::operator=((std::string *)(v21 + 7), &v89);
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  sub_21677B834((uint64_t)&__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_216779094(&__str, "podExtent");
  p_p = &__str;
  int v22 = sub_21677B174(v90, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_21740A02C, (long long **)&p_p);
  std::string::operator=((std::string *)(v22 + 7), &v82);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_21677B834((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_216779094(&p_p, "arrayExtent");
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  char v23 = sub_21677B174(v90, (const void **)&p_p, (uint64_t)&unk_21740A02C, (long long **)&v76);
  std::string::operator=((std::string *)(v23 + 7), &v77);
  if (v73.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(p_p);
  }
  sub_216779094(&p_p, "interpretation");
  sub_216779094(&v76, "normal");
  p_p_p = &p_p;
  int v24 = sub_21677B174(v90, (const void **)&p_p, (uint64_t)&unk_21740A02C, (long long **)&p_p_p);
  std::string::operator=((std::string *)(v24 + 7), &v76);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v73.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(p_p);
  }
  int v25 = v91;
  uint64_t v26 = v93;
  int v27 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v26)
  {
    uint64_t v28 = *a2;
    uint64_t v29 = (std::__shared_weak_count *)a2[1];
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v28 + 24))(&v76);
    (*(void (**)(void **__return_ptr))(*(void *)v76.__r_.__value_.__l.__data_ + 24))(&p_p);
    int v30 = (*(uint64_t (**)(void *, uint64_t))(*(void *)p_p + 48))(p_p, v26);
    if (v73.__r_.__value_.__r.__words[0]) {
      sub_216784EC4((std::__shared_weak_count *)v73.__r_.__value_.__l.__data_);
    }
    if (v76.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
    }
    if (v29) {
      sub_216784EC4(v29);
    }
  }
  else
  {
    int v30 = v95;
  }
  if (__dst[120])
  {
    uint64_t v31 = (std::__shared_weak_count *)a2[1];
    uint64_t v70 = *a2;
    v71 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 3;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
    LODWORD(p_p_p) = 1;
    LODWORD(v69) = v25;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&p_p, &v70, a3, &v76, &p_p_p);
    *((_DWORD *)__dst + 32) = p_p;
    std::string::operator=((std::string *)(__dst + 136), &v73);
    uint64_t v33 = v74;
    uint64_t v32 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v34 = (std::__shared_weak_count *)*((void *)__dst + 21);
    *((void *)__dst + 20) = v33;
    *((void *)__dst + 21) = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&p_p);
    if (v71) {
      sub_216784EC4(v71);
    }
    int v63 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_216778F24(&v64, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v64 = *v17;
      uint64_t v65 = *((void *)__dst + 19);
    }
    uint64_t v39 = *((void *)__dst + 21);
    uint64_t v66 = *((void *)__dst + 20);
    uint64_t v67 = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v76, ".vals");
    LODWORD(p_p_p) = 3;
    v69 = v90;
    int v61 = 1;
    int v62 = v25;
    int v59 = 2;
    int v60 = v30;
    sub_2167C99C8((uint64_t)&p_p, &v63, (uint64_t)&v76, &p_p_p, &v61, &v59);
    _DWORD *v51 = p_p;
    std::string::operator=(v50, &v73);
    uint64_t v41 = v74;
    uint64_t v40 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v42 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v41;
    *((void *)__dst + 8) = v40;
    if (v42) {
      sub_216784EC4(v42);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v63);
    int v54 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_216778F24(&v55, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v55 = *v17;
      uint64_t v56 = *((void *)__dst + 19);
    }
    uint64_t v43 = *((void *)__dst + 21);
    uint64_t v57 = *((void *)__dst + 20);
    uint64_t v58 = v43;
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v76, ".indices");
    LODWORD(p_p_p) = 2;
    LODWORD(v69) = v30;
    int v61 = 0;
    int v62 = 0;
    int v59 = 0;
    int v60 = 0;
    sub_2167C8564((uint64_t)&p_p, &v54, (uint64_t)&v76, &p_p_p, &v61, &v59);
    *((_DWORD *)__dst + 18) = p_p;
    std::string::operator=((std::string *)(__dst + 80), &v73);
    uint64_t v45 = v74;
    uint64_t v44 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v46 = (std::__shared_weak_count *)*((void *)__dst + 14);
    *((void *)__dst + 13) = v45;
    *((void *)__dst + 14) = v44;
    if (v46) {
      sub_216784EC4(v46);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v54);
  }
  else
  {
    v35 = (std::__shared_weak_count *)a2[1];
    uint64_t v52 = *a2;
    v53 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 3;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
    LODWORD(p_p_p) = 1;
    LODWORD(v69) = v25;
    int v61 = 2;
    int v62 = v30;
    int v59 = 0;
    int v60 = 0;
    sub_2167C9F5C((uint64_t)&p_p, &v52, a3, &v76, &p_p_p, &v61, &v59);
    _DWORD *v51 = p_p;
    std::string::operator=(v50, &v73);
    uint64_t v37 = v74;
    uint64_t v36 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v38 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v37;
    *((void *)__dst + 8) = v36;
    if (v38) {
      sub_216784EC4(v38);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (v53) {
      sub_216784EC4(v53);
    }
  }
  if (v27) {
    sub_216784EC4(v27);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
  v47 = (void *)__str.__r_.__value_.__r.__words[0];
  v48 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                            + *(void *)(__str.__r_.__value_.__r.__words[0] - 24)) = (std::string::size_type)v48;
  __str.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
  if (v80 < 0) {
    operator delete(v79);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v81);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  long long __p = v47;
  *(void **)((char *)&__p + *((void *)v47 - 3)) = v48;
  v84 = (void *)(MEMORY[0x263F8C318] + 16);
  if (v87 < 0) {
    operator delete(v86);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v88);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)v90, v90[1]);
  if (v94) {
    sub_216784EC4(v94);
  }
  sub_2167877AC((uint64_t)v92, v92[1]);
  return __dst;
}

void sub_2167C9728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Alembic::Abc::v12::OArrayProperty *a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (v54) {
    sub_216784EC4(v54);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_21677B9CC((uint64_t)&a52);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  sub_21677B9CC((uint64_t)&STACK[0x260]);
  if (*(char *)(v55 - 177) < 0) {
    operator delete(*(void **)(v55 - 200));
  }
  sub_2167877AC(v55 - 176, *(void **)(v55 - 168));
  sub_2167A03C4(v55 - 152);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  if (*(char *)(v52 + 23) < 0) {
    operator delete(*(void **)v52);
  }
  _Unwind_Resume(a1);
}

void sub_2167C996C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2167C9900);
}

void sub_2167C9984()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x2167C9918);
}

void sub_2167C999C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    JUMPOUT(0x2167C9924);
  }
  JUMPOUT(0x2167C9928);
}

uint64_t sub_2167C99C8(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_2167C9AA4(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167C9A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_2167C9AA4(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v25 = 0;
  v26[0] = 0;
  int v24 = (uint64_t *)&v25;
  int v27 = 2;
  sub_2167898D0((uint64_t *)v28, (const void ***)&v24);
  uint64_t v29 = 0;
  int v30 = 0;
  int v31 = 0;
  uint64_t v32 = 1;
  sub_2167877AC((uint64_t)&v24, v25);
  sub_2167A030C(a4, (uint64_t)&v27);
  sub_2167A030C(a5, (uint64_t)&v27);
  sub_2167A030C(a6, (uint64_t)&v27);
  sub_2167A030C(a7, (uint64_t)&v27);
  *(_DWORD *)a1 = v27;
  v26[33] = a1;
  v26[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v24);
    sub_216779180(v26, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v20 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v24, v28);
  sub_216779094(__p, "interpretation");
  sub_216779094(&__str, "normal");
  uint64_t v33 = __p;
  int v13 = sub_21677B174(&v24, (const void **)__p, (uint64_t)&unk_21740A02C, (long long **)&v33);
  std::string::operator=((std::string *)(v13 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = v29;
  char v14 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a2;
  if (v15)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v16 + 24))(&__str);
    (*(void (**)(void **__return_ptr))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__p);
    (*(void (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    if (__str.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    uint64_t v16 = *a2;
  }
  __str.__r_.__value_.__r.__words[0] = 0x30000000ALL;
  (*(void (**)(void **__return_ptr))(*(void *)v16 + 104))(__p);
  long long v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)&v24, v25);
  if (v30) {
    sub_216784EC4(v30);
  }
  sub_2167877AC((uint64_t)v28, v28[1]);
}

void sub_2167C9DF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167C9D3CLL);
}

void sub_2167C9F24()
{
  sub_2167A03C4(v0 - 160);
  JUMPOUT(0x2167C9F54);
}

uint64_t sub_2167C9F5C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  char v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  long long v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167C9AA4(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167CA014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void *sub_2167CA034(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 2;
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x10000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2167CA0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2167CA0D8(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_21677EA60((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v9;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_21677EA60((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_2167CA170(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2167CA18C(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    *((void *)__dst + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v51 = __dst + 24;
  v50 = (std::string *)sub_216779094((void *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_216779094((void *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  long long v17 = (long long *)(__dst + 136);
  sub_216779094((void *)__dst + 17, "");
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  int v18 = (std::__shared_weak_count *)a2[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v85 = 0;
  v84 = 0;
  long long __p = &v84;
  int v91 = 2;
  sub_2167898D0((uint64_t *)v92, (const void ***)&__p);
  uint64_t v93 = 0;
  v94 = 0;
  int v95 = 0;
  uint64_t v96 = 1;
  sub_2167877AC((uint64_t)&__p, v84);
  if (v18) {
    sub_216784EC4(v18);
  }
  sub_2167A030C(a7, (uint64_t)&v91);
  sub_2167A030C(a8, (uint64_t)&v91);
  sub_2167A030C(a9, (uint64_t)&v91);
  int64x2_t v19 = sub_2167898D0((uint64_t *)v90, v92);
  sub_2167C4D74((uint64_t **)v19, a5);
  sub_216779094(&__p, "isGeomParam");
  sub_216779094(&__str, "true");
  p_p = &__p;
  uint64_t v20 = sub_21677B174(v90, (const void **)&__p, (uint64_t)&unk_21740A02C, (long long **)&p_p);
  std::string::operator=((std::string *)(v20 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  sub_216779094(&v89, "float32_t");
  sub_216779094(&__p, "podName");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  char v21 = sub_21677B174(v90, (const void **)&__p, (uint64_t)&unk_21740A02C, (long long **)&__str);
  std::string::operator=((std::string *)(v21 + 7), &v89);
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  sub_21677B834((uint64_t)&__p);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_216779094(&__str, "podExtent");
  p_p = &__str;
  int v22 = sub_21677B174(v90, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_21740A02C, (long long **)&p_p);
  std::string::operator=((std::string *)(v22 + 7), &v82);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_21677B834((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_216779094(&p_p, "arrayExtent");
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  char v23 = sub_21677B174(v90, (const void **)&p_p, (uint64_t)&unk_21740A02C, (long long **)&v76);
  std::string::operator=((std::string *)(v23 + 7), &v77);
  if (v73.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(p_p);
  }
  sub_216779094(&p_p, "interpretation");
  sub_216779094(&v76, "");
  p_p_p = &p_p;
  int v24 = sub_21677B174(v90, (const void **)&p_p, (uint64_t)&unk_21740A02C, (long long **)&p_p_p);
  std::string::operator=((std::string *)(v24 + 7), &v76);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v73.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(p_p);
  }
  int v25 = v91;
  uint64_t v26 = v93;
  int v27 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v26)
  {
    uint64_t v28 = *a2;
    uint64_t v29 = (std::__shared_weak_count *)a2[1];
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v28 + 24))(&v76);
    (*(void (**)(void **__return_ptr))(*(void *)v76.__r_.__value_.__l.__data_ + 24))(&p_p);
    int v30 = (*(uint64_t (**)(void *, uint64_t))(*(void *)p_p + 48))(p_p, v26);
    if (v73.__r_.__value_.__r.__words[0]) {
      sub_216784EC4((std::__shared_weak_count *)v73.__r_.__value_.__l.__data_);
    }
    if (v76.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
    }
    if (v29) {
      sub_216784EC4(v29);
    }
  }
  else
  {
    int v30 = v95;
  }
  if (__dst[120])
  {
    int v31 = (std::__shared_weak_count *)a2[1];
    uint64_t v70 = *a2;
    v71 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 3;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
    LODWORD(p_p_p) = 1;
    LODWORD(v69) = v25;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&p_p, &v70, a3, &v76, &p_p_p);
    *((_DWORD *)__dst + 32) = p_p;
    std::string::operator=((std::string *)(__dst + 136), &v73);
    uint64_t v33 = v74;
    uint64_t v32 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v34 = (std::__shared_weak_count *)*((void *)__dst + 21);
    *((void *)__dst + 20) = v33;
    *((void *)__dst + 21) = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&p_p);
    if (v71) {
      sub_216784EC4(v71);
    }
    int v63 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_216778F24(&v64, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v64 = *v17;
      uint64_t v65 = *((void *)__dst + 19);
    }
    uint64_t v39 = *((void *)__dst + 21);
    uint64_t v66 = *((void *)__dst + 20);
    uint64_t v67 = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v76, ".vals");
    LODWORD(p_p_p) = 3;
    v69 = v90;
    int v61 = 1;
    int v62 = v25;
    int v59 = 2;
    int v60 = v30;
    sub_2167CB2E8((uint64_t)&p_p, &v63, (uint64_t)&v76, &p_p_p, &v61, &v59);
    _DWORD *v51 = p_p;
    std::string::operator=(v50, &v73);
    uint64_t v41 = v74;
    uint64_t v40 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v42 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v41;
    *((void *)__dst + 8) = v40;
    if (v42) {
      sub_216784EC4(v42);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v63);
    int v54 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_216778F24(&v55, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v55 = *v17;
      uint64_t v56 = *((void *)__dst + 19);
    }
    uint64_t v43 = *((void *)__dst + 21);
    uint64_t v57 = *((void *)__dst + 20);
    uint64_t v58 = v43;
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v76, ".indices");
    LODWORD(p_p_p) = 2;
    LODWORD(v69) = v30;
    int v61 = 0;
    int v62 = 0;
    int v59 = 0;
    int v60 = 0;
    sub_2167C8564((uint64_t)&p_p, &v54, (uint64_t)&v76, &p_p_p, &v61, &v59);
    *((_DWORD *)__dst + 18) = p_p;
    std::string::operator=((std::string *)(__dst + 80), &v73);
    uint64_t v45 = v74;
    uint64_t v44 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v46 = (std::__shared_weak_count *)*((void *)__dst + 14);
    *((void *)__dst + 13) = v45;
    *((void *)__dst + 14) = v44;
    if (v46) {
      sub_216784EC4(v46);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v54);
  }
  else
  {
    v35 = (std::__shared_weak_count *)a2[1];
    uint64_t v52 = *a2;
    v53 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v76.__r_.__value_.__l.__data_) = 3;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
    LODWORD(p_p_p) = 1;
    LODWORD(v69) = v25;
    int v61 = 2;
    int v62 = v30;
    int v59 = 0;
    int v60 = 0;
    sub_2167CAE0C((uint64_t)&p_p, &v52, a3, &v76, &p_p_p, &v61, &v59);
    _DWORD *v51 = p_p;
    std::string::operator=(v50, &v73);
    uint64_t v37 = v74;
    uint64_t v36 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    v38 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v37;
    *((void *)__dst + 8) = v36;
    if (v38) {
      sub_216784EC4(v38);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&p_p);
    if (v53) {
      sub_216784EC4(v53);
    }
  }
  if (v27) {
    sub_216784EC4(v27);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
  v47 = (void *)__str.__r_.__value_.__r.__words[0];
  v48 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                            + *(void *)(__str.__r_.__value_.__r.__words[0] - 24)) = (std::string::size_type)v48;
  __str.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
  if (v80 < 0) {
    operator delete(v79);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v81);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  long long __p = v47;
  *(void **)((char *)&__p + *((void *)v47 - 3)) = v48;
  v84 = (void *)(MEMORY[0x263F8C318] + 16);
  if (v87 < 0) {
    operator delete(v86);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v88);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)v90, v90[1]);
  if (v94) {
    sub_216784EC4(v94);
  }
  sub_2167877AC((uint64_t)v92, v92[1]);
  return __dst;
}

void sub_2167CAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Alembic::Abc::v12::OArrayProperty *a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (v54) {
    sub_216784EC4(v54);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_21677B9CC((uint64_t)&a52);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  sub_21677B9CC((uint64_t)&STACK[0x260]);
  if (*(char *)(v55 - 177) < 0) {
    operator delete(*(void **)(v55 - 200));
  }
  sub_2167877AC(v55 - 176, *(void **)(v55 - 168));
  sub_2167A03C4(v55 - 152);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  if (*(char *)(v52 + 23) < 0) {
    operator delete(*(void **)v52);
  }
  _Unwind_Resume(a1);
}

void sub_2167CADB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2167CAD44);
}

void sub_2167CADC8()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x2167CAD5CLL);
}

void sub_2167CADE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    JUMPOUT(0x2167CAD68);
  }
  JUMPOUT(0x2167CAD6CLL);
}

uint64_t sub_2167CAE0C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  char v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  long long v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167CAEE4(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167CAEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167CAEE4(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v24 = 0;
  v25[0] = 0;
  char v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64x2_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  int v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x10000000ALL;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 104))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  long long v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167CB1C0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CB10CLL);
}

void sub_2167CB29C(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2167CB2E8(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::exception v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_2167CAEE4(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167CB3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_2167CB3C4(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::exception v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_2167CB4A0(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167CB480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_2167CB4A0(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v24 = 0;
  v25[0] = 0;
  char v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64x2_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  int v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000001;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 104))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167CB778(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CB6C4);
}

void sub_2167CB854(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

void *sub_2167CB8A0(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = a2[1] - *a2;
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000001;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2167CB920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::OFaceSetSchema(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v18 = *a2;
  int64x2_t v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167CBAC0(a1, &v18, a3, a4, a5, a6, a7);
  if (v19) {
    sub_216784EC4(v19);
  }
  *(void *)a1 = &unk_26C749A40;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v14 = *a2;
  uint64_t v15 = (std::__shared_weak_count *)a2[1];
  v17[0] = v14;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::AbcGeom::v12::OFaceSetSchema::init(a1, (uint64_t)v17, a4, a5, a6, a7);
  if (v15) {
    sub_216784EC4(v15);
  }
  return a1;
}

void sub_2167CBA6C(_Unwind_Exception *a1)
{
  if (v3) {
    sub_216784EC4(v3);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_2167CC114(v1);
  _Unwind_Resume(a1);
}

void sub_2167CBAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  JUMPOUT(0x2167CBAA4);
}

uint64_t sub_2167CBAC0(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  int v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167CCF20(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C749AF8;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  sub_2167CD01C(a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167CBD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::OScalarProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v21);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v18 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OFaceSetSchema::init(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v34 = a1 + 8;
  v35 = "OFaceSetSchema::init()";
  sub_2167CC320(a3, a4, a5, a6, &v32);
  int v12 = sub_2167CC43C(a3, a4, a5, a6);
  if (v32)
  {
    (*(void (**)(void **__return_ptr))(**(void **)a2 + 24))(&__p);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)__p + 24))(&v28);
    int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 48))(v28, v32);
    if (v29.__r_.__value_.__r.__words[0]) {
      sub_216784EC4((std::__shared_weak_count *)v29.__r_.__value_.__l.__data_);
    }
    if (v24) {
      sub_216784EC4(v24);
    }
  }
  else
  {
    int v13 = v12;
  }
  uint64_t v14 = *(void *)(a1 + 40);
  int v15 = *(std::__shared_weak_count **)(a1 + 48);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    int v27 = v15;
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int v27 = 0;
  }
  uint64_t v26 = v14;
  sub_216779094(&__p, ".faces");
  v22[0] = 2;
  _OWORD v22[2] = v13;
  v21[0] = 0;
  v21[2] = 0;
  v20[0] = 0;
  v20[2] = 0;
  v19[0] = 0;
  v19[2] = 0;
  sub_2167C6640((uint64_t)&v28, &v26, (uint64_t)&__p, v22, v21, v20, v19);
  *(_DWORD *)(a1 + 248) = v28;
  std::string::operator=((std::string *)(a1 + 256), &v29);
  uint64_t v17 = v30;
  uint64_t v16 = v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v17;
  *(void *)(a1 + 288) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v27) {
    sub_216784EC4(v27);
  }
  *(_DWORD *)(a1 + 344) = 0;
  if (v15) {
    sub_216784EC4(v15);
  }
  if (v33) {
    sub_216784EC4(v33);
  }
}

void sub_2167CBFE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,std::__shared_weak_count *a27)
{
  if (a27) {
    sub_216784EC4(a27);
  }
  if (a19) {
    sub_216784EC4(a19);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v28 - 88);
  if (v31) {
    sub_216784EC4(v31);
  }
  uint64_t v32 = __cxa_begin_catch(a1);
  uint64_t v33 = *(void (**)(uint64_t))(*(void *)v27 + 16);
  if (a2 == 2)
  {
    uint64_t v34 = (uint64_t)v32;
    v33(v27);
    sub_21679FA64(v28 - 80, v34);
  }
  else
  {
    v33(v27);
    sub_21679F9F4(v28 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CBFC4);
}

void sub_2167CC0F4(_Unwind_Exception *a1)
{
}

void *sub_2167CC114(void *a1)
{
  *a1 = &unk_26C749AF8;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::OFaceSetSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v19 = *((void *)a2 + 4);
  uint64_t v20 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *a2;
  int v17 = 1;
  int v18 = v12;
  sub_2167CBAC0(a1, &v19, a3, &v17, a4, a5, a6);
  if (v20) {
    sub_216784EC4(v20);
  }
  *(void *)a1 = &unk_26C749A40;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v13 = *((void *)a2 + 4);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a2 + 5);
  v16[0] = v13;
  v16[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = 0;
  int v18 = 0;
  Alembic::AbcGeom::v12::OFaceSetSchema::init(a1, (uint64_t)v16, a4, a5, a6, &v17);
  if (v14) {
    sub_216784EC4(v14);
  }
  return a1;
}

void sub_2167CC2C8(_Unwind_Exception *a1)
{
  if (v3) {
    sub_216784EC4(v3);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_2167CC114(v1);
  _Unwind_Resume(a1);
}

void sub_2167CC308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  JUMPOUT(0x2167CC300);
}

void sub_2167CC320(_DWORD *a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = (const void **)v12;
  int v13 = 2;
  sub_2167898D0(v14, &v11);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 1;
  sub_2167877AC((uint64_t)&v11, v12[0]);
  sub_2167A030C(a1, (uint64_t)&v13);
  sub_2167A030C(a2, (uint64_t)&v13);
  sub_2167A030C(a3, (uint64_t)&v13);
  sub_2167A030C(a4, (uint64_t)&v13);
  uint64_t v10 = v16;
  *a5 = v15;
  a5[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  sub_2167877AC((uint64_t)v14, (void *)v14[1]);
}

void sub_2167CC414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_2167CC43C(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (const void **)v11;
  int v12 = 2;
  sub_2167898D0(v13, &v10);
  v13[3] = 0;
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  uint64_t v16 = 1;
  sub_2167877AC((uint64_t)&v10, v11[0]);
  sub_2167A030C(a1, (uint64_t)&v12);
  sub_2167A030C(a2, (uint64_t)&v12);
  sub_2167A030C(a3, (uint64_t)&v12);
  sub_2167A030C(a4, (uint64_t)&v12);
  uint64_t v8 = v15;
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)v13, (void *)v13[1]);
  return v8;
}

void sub_2167CC51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling(Alembic::AbcGeom::v12::OFaceSetSchema *this)
{
  return Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OFaceSetSchema *)((char *)this + 56));
}

void sub_2167CC594(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CC584);
}

void sub_2167CC5C8(_Unwind_Exception *a1)
{
}

int *Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling(Alembic::AbcGeom::v12::OFaceSetSchema *a1, void *a2)
{
  uint64_t result = (int *)((char *)a1 + 8);
  uint64_t v6 = result;
  uint64_t v7 = "OFaceSetSchema::setTimeSampling( AbcA::TimeSamplingPtr iTimeSampling)";
  if (*a2)
  {
    sub_2167B7AC8(result, (uint64_t)v4);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v4, (uint64_t)v5);
    Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v5);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v5);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v4);
    return (int *)Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling(a1);
  }
  return result;
}

void sub_2167CC66C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CC65CLL);
}

void sub_2167CC6D4(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::set(uint64_t a1, uint64_t a2)
{
  v24[33] = a1 + 8;
  v24[34] = "OFaceSetSchema::set()";
  uint64_t v4 = a1 + 248;
  if (Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 248)))
  {
    int v15 = *(_DWORD *)(a1 + 248);
    if (*(char *)(a1 + 279) < 0)
    {
      sub_216778F24(&v16, *(void **)(a1 + 256), *(void *)(a1 + 264));
    }
    else
    {
      long long v16 = *(_OWORD *)(a1 + 256);
      uint64_t v17 = *(void *)(a1 + 272);
    }
    uint64_t v5 = *(void *)(a1 + 288);
    uint64_t v18 = *(void *)(a1 + 280);
    uint64_t v19 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)uint64_t v11 = *(void *)a2;
    *(void *)&v11[5] = *(void *)(a2 + 5);
    long long __p = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    if (SHIBYTE(v17) < 0)
    {
      if (*((void *)&v16 + 1)) {
        goto LABEL_13;
      }
    }
    else if (HIBYTE(v17))
    {
LABEL_13:
      uint64_t v6 = 0;
LABEL_18:
      if (v6)
      {
        if (*(_DWORD *)&v11[8] == 127 || !*(void *)v11 && v13 == __p) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = nullsub_20;
        }
        if (v7) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v15);
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v15);
        }
      }
      if (__p)
      {
        int v13 = __p;
        operator delete(__p);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v15);
      goto LABEL_30;
    }
    if (v18) {
      uint64_t v6 = nullsub_7;
    }
    else {
      uint64_t v6 = 0;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16))
  {
    sub_216778A5C((uint64_t)v23);
    sub_216779180(v24, (uint64_t)"Sample 0 must provide the faces that make up the faceset.", 57);
    std::stringbuf::str();
    sub_216778E70(v22, &v20);
    if (v21 < 0) {
      operator delete((void *)v20);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v10 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v10, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::Abc::v12::OArrayProperty::set(v4);
LABEL_30:
  uint64_t result = Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)(a1 + 56), (const void *)(a2 + 40));
  if (*(_DWORD *)(a1 + 344)) {
    return Alembic::AbcGeom::v12::OFaceSetSchema::_recordExclusivityHint((Alembic::AbcGeom::v12::OFaceSetSchema *)a1);
  }
  return result;
}

void sub_2167CC958(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::exception a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_216779148(&a24);
  sub_216778D38((uint64_t)&a28);
  uint64_t v31 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v28 - 48, (uint64_t)v31);
  }
  else {
    sub_21679F9F4(v28 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CC8C8);
}

void sub_2167CC9F4(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OFaceSetSchema::_recordExclusivityHint(Alembic::AbcGeom::v12::OFaceSetSchema *this)
{
  if (*((char *)this + 327) < 0)
  {
    if (!*((void *)this + 39)) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)this + 327))
  {
LABEL_5:
    if (*((void *)this + 41)) {
      goto LABEL_20;
    }
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v18 = *((void *)this + 5);
  uint64_t v19 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".facesExclusive");
  uint64_t v3 = sub_2167C5C4C((uint64_t)this + 248);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 72);
  uint64_t v12 = *(void *)(v3 + 64);
  int v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = 4;
  int v15 = &v12;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  sub_2167CD928((uint64_t)&v20, &v18, (uint64_t)__p, &v14, v11, v10, v9);
  *((_DWORD *)this + 74) = v20;
  std::string::operator=((std::string *)((char *)this + 304), &v21);
  uint64_t v6 = v22;
  uint64_t v5 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 42);
  *((void *)this + 41) = v6;
  *((void *)this + 42) = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v20);
  if (v13) {
    sub_216784EC4(v13);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
LABEL_20:
  int v20 = *((_DWORD *)this + 86);
  return Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OFaceSetSchema *)((char *)this + 296), &v20);
}

void sub_2167CCB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 64));
  if (a17) {
    sub_216784EC4(a17);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 - 72);
  if (v27) {
    sub_216784EC4(v27);
  }
  _Unwind_Resume(a1);
}

Alembic::AbcGeom::v12::OFaceSetSchema *Alembic::AbcGeom::v12::OFaceSetSchema::setFaceExclusivity(Alembic::AbcGeom::v12::OFaceSetSchema *result, int a2)
{
  if (*((_DWORD *)result + 86) != a2)
  {
    *((_DWORD *)result + 86) = a2;
    return (Alembic::AbcGeom::v12::OFaceSetSchema *)Alembic::AbcGeom::v12::OFaceSetSchema::_recordExclusivityHint(result);
  }
  return result;
}

void *sub_2167CCBD8(void *a1)
{
  *a1 = &unk_26C749A40;
  uint64_t v2 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 31));
  *a1 = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));
  return a1;
}

void sub_2167CCC7C(void *a1)
{
  *a1 = &unk_26C749A40;
  uint64_t v2 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 31));
  *a1 = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));

  operator delete(a1);
}

void sub_2167CCD30(uint64_t a1)
{
  sub_2167A13A4(a1 + 248);

  sub_2167CCEA0(a1);
}

BOOL sub_2167CCD6C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 39)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  if (*(char *)(a1 + 279) < 0)
  {
    if (*(void *)(a1 + 264)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 279))
  {
    return 0;
  }
  return *(void *)(a1 + 280) != 0;
}

void *sub_2167CCDB8(void *a1)
{
  *a1 = &unk_26C749AF8;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_2167CCE24(void *a1)
{
  *a1 = &unk_26C749AF8;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  operator delete(a1);
}

void sub_2167CCEA0(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_2167CCEF4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_2167CCF20(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749B28;
  int v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  char v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167CD208(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167CCFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167CD01C(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0) {
    sub_2167CD698(a1, a2, 0);
  }
}

void sub_2167CD068(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CD054);
}

void sub_2167CD0D8(_Unwind_Exception *a1)
{
}

BOOL sub_2167CD0F8(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (const void **)v11;
  int v12 = 2;
  sub_2167898D0(v13, &v10);
  v13[3] = 0;
  int v14 = 0;
  int v15 = 0;
  uint64_t v16 = 1;
  sub_2167877AC((uint64_t)&v10, v11[0]);
  sub_2167A030C(a1, (uint64_t)&v12);
  sub_2167A030C(a2, (uint64_t)&v12);
  sub_2167A030C(a3, (uint64_t)&v12);
  sub_2167A030C(a4, (uint64_t)&v12);
  int v8 = HIDWORD(v16);
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)v13, (void *)v13[1]);
  return v8 == 1;
}

void sub_2167CD1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_2167CD208(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v23 = 0;
  v24[0] = 0;
  uint64_t v22 = (uint64_t *)&v23;
  int v25 = 2;
  sub_2167898D0((uint64_t *)v26, (const void ***)&v22);
  v26[3] = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = 1;
  sub_2167877AC((uint64_t)&v22, v23);
  sub_2167A030C(a4, (uint64_t)&v25);
  sub_2167A030C(a5, (uint64_t)&v25);
  sub_2167A030C(a6, (uint64_t)&v25);
  sub_2167A030C(a7, (uint64_t)&v25);
  *(_DWORD *)(a1 + 8) = v25;
  v24[33] = a1 + 8;
  v24[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v22);
    sub_216779180(v24, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v22, v26);
  if (HIDWORD(v29) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_FaceSet_v1");
    uint64_t v30 = __p;
    uint64_t v13 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A054, (long long **)&v30);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (HIDWORD(v29) != 1)
    {
      sub_216779094(__p, "schemaBaseType");
      sub_216779094(&__str, "AbcGeom_GeomBase_v1");
      uint64_t v30 = __p;
      int v14 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A054, (long long **)&v30);
      std::string::operator=((std::string *)(v14 + 7), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v15;
  if (v16)
  {
    sub_216784EC4(v16);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v22, v23);
  if (v27) {
    sub_216784EC4(v27);
  }
  sub_2167877AC((uint64_t)v26, v26[1]);
}

void sub_2167CD500(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CD44CLL);
}

void sub_2167CD5E4(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2167CD630(uint64_t a1)
{
  return a1;
}

void sub_2167CD65C(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2167CD698(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v20 = a1 + 8;
  char v21 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
LABEL_5:
    if (*(void *)(a1 + 88)) {
      return;
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  char v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".selfBnds");
  v13[0] = 2;
  v13[2] = a2;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167B9640((uint64_t)v18, &v16, (uint64_t)__p, v13, v12, v11, v10);
  *(_DWORD *)(a1 + 56) = v18[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v18 + 8));
  int64x2_t v7 = v19;
  if (v19.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(int64x2_t *)(a1 + 88) = v7;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  v18[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v18[1] = xmmword_217409FA0;
  int64x2_t v19 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    uint64_t v9 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v9, v18);
      --a3;
    }
    while (a3);
  }
}

void sub_2167CD808(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 96));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  int v28 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v25 - 48, (uint64_t)v28);
  }
  else {
    sub_21679F9F4(v25 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CD7F4);
}

void sub_2167CD88C(_Unwind_Exception *a1)
{
}

void *sub_2167CD8AC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2167CD90C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2167CD928(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  char v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167CDA00(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167CD9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167CDA00(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v24 = 0;
  v25[0] = 0;
  uint64_t v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64x2_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  uint64_t v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000005;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 96))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  char v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167CDCDC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CDC28);
}

void sub_2167CDDB8(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcGeom::v12::IFaceSetSchema::getNumSamples(Alembic::AbcGeom::v12::IFaceSetSchema *this)
{
  uint64_t v2 = (Alembic::AbcGeom::v12::IFaceSetSchema *)((char *)this + 8);
  if (Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcGeom::v12::IFaceSetSchema *)((char *)this + 8)))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    while (1)
    {
      uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v2);
      int v6 = *(_DWORD *)(PropertyHeader + 24);
      if (v6 == 1)
      {
        uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 6);
        uint64_t v15 = *((void *)this + 5);
        uint64_t v16 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v22 = 0;
        int v23 = 0;
        int v20 = 0;
        int v21 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v26, &v15, &v22, &v20);
        int v18 = 0;
        int v19 = 0;
        std::exception v12 = (Alembic::Abc::v12::IScalarProperty *)Alembic::Abc::v12::IScalarProperty::IScalarProperty(v27, v26, PropertyHeader, &v18);
        unint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v12);
        if (v4 <= NumSamples) {
          unint64_t v4 = NumSamples;
        }
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v27);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v26);
        uint64_t v10 = v16;
        if (!v16) {
          goto LABEL_11;
        }
      }
      else
      {
        if (v6 != 2) {
          goto LABEL_11;
        }
        uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 6);
        uint64_t v24 = *((void *)this + 5);
        uint64_t v25 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v22 = 0;
        int v23 = 0;
        int v20 = 0;
        int v21 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v26, &v24, &v22, &v20);
        int v18 = 0;
        int v19 = 0;
        v17[0] = 0;
        void v17[2] = 0;
        size_t v8 = (Alembic::Abc::v12::IArrayProperty *)Alembic::Abc::v12::IArrayProperty::IArrayProperty(v27, v26, PropertyHeader, &v18, v17);
        unint64_t v9 = Alembic::Abc::v12::IArrayProperty::getNumSamples(v8);
        if (v4 <= v9) {
          unint64_t v4 = v9;
        }
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v27);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v26);
        uint64_t v10 = v25;
        if (!v25) {
          goto LABEL_11;
        }
      }
      sub_216784EC4(v10);
LABEL_11:
      if (++v3 >= (unint64_t)Alembic::Abc::v12::ICompoundProperty::getNumProperties(v2)) {
        return v4;
      }
    }
  }
  return 0;
}

void sub_2167CDFA8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v13 - 112));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  if (a3) {
    sub_216784EC4(a3);
  }
  _Unwind_Resume(a1);
}

void sub_2167CDFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v12 - 112));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  if (!a12) {
    JUMPOUT(0x2167CDFD8);
  }
  JUMPOUT(0x2167CDFD4);
}

void Alembic::AbcGeom::v12::IFaceSetSchema::get(uint64_t a1, void *a2, uint64_t a3)
{
}

void sub_2167CE04C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CE03CLL);
}

void sub_2167CE080(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::IFaceSetSchema::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v22 = a1 + 8;
  int v23 = "IFaceSetSchema::init()";
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v15 = v6;
  v14[0] = 0;
  v14[2] = 0;
  v13[0] = 0;
  v13[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v17, &v15, v14, v13);
  sub_216779094(__p, ".faces");
  sub_2167BB37C((uint64_t)&v18, v17, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 248) = v18;
  std::string::operator=((std::string *)(a1 + 256), &v19);
  uint64_t v9 = v20;
  uint64_t v8 = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v9;
  *(void *)(a1 + 288) = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v18);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v17);
  if (v16) {
    sub_216784EC4(v16);
  }
  if (v7) {
    sub_216784EC4(v7);
  }
}

void sub_2167CE1D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v24 - 112));
  if (a15 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a22);
  if (a21) {
    sub_216784EC4(a21);
  }
  if (v22) {
    sub_216784EC4(v22);
  }
  uint64_t v27 = __cxa_begin_catch(a1);
  uint64_t v28 = *(void (**)(uint64_t))(*(void *)v23 + 16);
  if (a2 == 2)
  {
    uint64_t v29 = (uint64_t)v27;
    v28(v23);
    sub_21679FA64(v24 - 64, v29);
  }
  else
  {
    v28(v23);
    sub_21679F9F4(v24 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CE1C0);
}

void sub_2167CE2AC(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::IFaceSetSchema::getFaceExclusivity(Alembic::AbcGeom::v12::IFaceSetSchema *this)
{
  std::string v19 = (char *)this + 8;
  uint64_t v20 = "IFaceSetSchema::getFaceExclusivity";
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v11 = *((void *)this + 5);
  char v12 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v13, &v11, v10, v9);
  sub_216779094(__p, ".facesExclusive");
  v6[0] = 1;
  v6[2] = 0;
  v5[0] = 0;
  v5[2] = 0;
  sub_2167CE4F0((uint64_t)v15, (int *)v13, (uint64_t)__p, v6, v5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v13);
  if (v12) {
    sub_216784EC4(v12);
  }
  if (v17 < 0)
  {
    if (v16) {
      goto LABEL_9;
    }
LABEL_11:
    if (v18) {
      uint64_t v2 = nullsub_4;
    }
    else {
      uint64_t v2 = 0;
    }
    goto LABEL_14;
  }
  if (!v17) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v2 = 0;
LABEL_14:
  if (v2)
  {
    v13[0] = Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)v15) - 1;
    v13[1] = 0;
    int v14 = 2;
    LODWORD(__p[0]) = 0;
    Alembic::Abc::v12::IScalarProperty::get((uint64_t)v15, (uint64_t)__p, (uint64_t)v13, 4);
    uint64_t v3 = LODWORD(__p[0]);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v15);
  }
  else
  {
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v15);
    return 0;
  }
  return v3;
}

void sub_2167CE440(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v26 - 96));
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v26 - 48, (uint64_t)v29);
  }
  else {
    sub_21679F9F4(v26 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CE424);
}

void sub_2167CE4D0(_Unwind_Exception *a1)
{
}

uint64_t sub_2167CE4F0(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v10 = *a2;
  *((void *)&v45 + 1) = 0;
  v46[0] = 0;
  *(void *)&long long v45 = (char *)&v45 + 8;
  int v47 = v10;
  sub_2167898D0(v48, (const void ***)&v45);
  v48[3] = 0;
  v49 = 0;
  int v50 = 0;
  uint64_t v51 = 1;
  sub_2167877AC((uint64_t)&v45, *((void **)&v45 + 1));
  sub_2167A030C(a4, (uint64_t)&v47);
  sub_2167A030C(a5, (uint64_t)&v47);
  *(_DWORD *)a1 = v47;
  v46[34] = a1;
  v46[35] = "ITypedScalarProperty::ITypedScalarProperty()";
  uint64_t v12 = *((void *)a2 + 4);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v31 = sub_216779180(v46, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v31, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v33 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v33, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  uint64_t v14 = v13;
  if (!v13)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v34 = sub_216779180(v46, (uint64_t)"Nonexistent scalar property: ", 29);
    int v35 = *(char *)(a3 + 23);
    if (v35 >= 0) {
      uint64_t v36 = a3;
    }
    else {
      uint64_t v36 = *(void *)a3;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v37 = *(void *)(a3 + 8);
    }
    sub_216779180(v34, v36, v37);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    v38 = __cxa_allocate_exception(0x20uLL);
    uint64_t v39 = sub_216779038(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  BOOL v16 = *(_DWORD *)(v13 + 56) == 5 && *(unsigned char *)(v13 + 60) == 1 && *(_DWORD *)(v13 + 24) == 1;
  if (!v16 || (sub_2167CEA74(v13 + 32, v51) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v20 = sub_216779180(v46, (uint64_t)"Incorrect match of header datatype: ", 36);
    uint64_t v21 = sub_21677D5B0(v20, (int *)(v14 + 56));
    uint64_t v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    uint64_t v40 = 0x100000005;
    uint64_t v23 = sub_21677D5B0(v22, (int *)&v40);
    uint64_t v24 = sub_216779180(v23, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_216779094(v41, "interpretation");
    sub_21679F2AC(v14 + 32, (const void **)v41, __p);
    if ((v44 & 0x80u) == 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v26 = v44;
    }
    else {
      uint64_t v26 = (uint64_t)__p[1];
    }
    uint64_t v27 = sub_216779180(v24, (uint64_t)v25, v26);
    uint64_t v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"", 0);
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v29 = __cxa_allocate_exception(0x20uLL);
    int v30 = sub_216779038(v29, (uint64_t)__p);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 88))(&v45, v12, a3);
  long long v17 = v45;
  long long v45 = 0uLL;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v49) {
    sub_216784EC4(v49);
  }
  sub_2167877AC((uint64_t)v48, (void *)v48[1]);
  return a1;
}

void sub_2167CE92C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CE690);
}

void sub_2167CEA34()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2167CEA64);
}

uint64_t sub_2167CEA74(uint64_t a1, int a2)
{
  if (a2) {
    return 1;
  }
  sub_216779094(__p, "interpretation");
  sub_21679F2AC(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    BOOL v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    BOOL v2 = v8 == 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2167CEB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::OLightSchema(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v18 = *a2;
  std::string v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167CED04(a1, &v18, a3, a4, a5, a6, a7);
  if (v19) {
    sub_216784EC4(v19);
  }
  *(void *)a1 = &unk_26C749B48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  sub_216779094((void *)(a1 + 80), "");
  *(_DWORD *)(a1 + 120) = 2;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_216779094((void *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  sub_216779094((void *)(a1 + 176), "");
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_2167D02FC((int64x2_t *)(a1 + 216));
  uint64_t v14 = *a2;
  uint64_t v15 = (std::__shared_weak_count *)a2[1];
  v17[0] = v14;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::AbcGeom::v12::OLightSchema::init(a1, (uint64_t)v17, a4, a5, a6, a7);
  if (v15) {
    sub_216784EC4(v15);
  }
  return a1;
}

void sub_2167CEC84(_Unwind_Exception *a1)
{
  if (v4) {
    sub_216784EC4(v4);
  }
  sub_2167CF080(v6);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v5);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  char v8 = *(std::__shared_weak_count **)(v1 + 64);
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_2167CECF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  JUMPOUT(0x2167CECE8);
}

uint64_t sub_2167CED04(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749C28;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  long long v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167D0EE0(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167CEDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OLightSchema::init(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  sub_2167CC320(a3, a4, a5, a6, &v22);
  sub_2167CC43C(a3, a4, a5, a6);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 24))(&v19);
    (*(void (**)(long long *__return_ptr))(*(void *)v19 + 24))(&v21);
    (*(void (**)(void, uint64_t))(*(void *)v21 + 48))(v21, v22);
    if (*((void *)&v21 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v21 + 1));
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    uint64_t v13 = v22;
    uint64_t v12 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 64);
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v12;
    if (v14) {
LABEL_9:
    }
      sub_216784EC4(v14);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 24))(&v17);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v17 + 24))(&v19);
    (*(void (**)(long long *__return_ptr))(*(void *)v19 + 56))(&v21);
    long long v15 = v21;
    long long v21 = 0uLL;
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 64);
    *(_OWORD *)(a1 + 56) = v15;
    if (v16)
    {
      sub_216784EC4(v16);
      if (*((void *)&v21 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v21 + 1));
      }
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    uint64_t v14 = v18;
    if (v18) {
      goto LABEL_9;
    }
  }
  if (v23) {
    sub_216784EC4(v23);
  }
}

void sub_2167CF014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2167CF080(uint64_t a1)
{
  *(void *)a1 = &unk_26C749BA8;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 8);
  unint64_t v4 = (void **)(a1 + 520);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::OLightSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v19 = *((void *)a2 + 4);
  uint64_t v20 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *a2;
  int v17 = 1;
  int v18 = v12;
  sub_2167CED04(a1, &v19, a3, &v17, a4, a5, a6);
  if (v20) {
    sub_216784EC4(v20);
  }
  *(void *)a1 = &unk_26C749B48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  sub_216779094((void *)(a1 + 80), "");
  *(_DWORD *)(a1 + 120) = 2;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_216779094((void *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  sub_216779094((void *)(a1 + 176), "");
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_2167D02FC((int64x2_t *)(a1 + 216));
  uint64_t v13 = *((void *)a2 + 4);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a2 + 5);
  v16[0] = v13;
  v16[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = 0;
  int v18 = 0;
  Alembic::AbcGeom::v12::OLightSchema::init(a1, (uint64_t)v16, a4, a5, a6, &v17);
  if (v14) {
    sub_216784EC4(v14);
  }
  return a1;
}

void sub_2167CF294(_Unwind_Exception *a1)
{
  if (v4) {
    sub_216784EC4(v4);
  }
  sub_2167CF080(v6);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v5);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  char v8 = *(std::__shared_weak_count **)(v1 + 64);
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_2167CF300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  JUMPOUT(0x2167CF2F8);
}

void Alembic::AbcGeom::v12::OLightSchema::setCameraSample(Alembic::AbcGeom::v12::OLightSchema *this, const Alembic::AbcGeom::v12::CameraSample *a2)
{
  v32[4] = (char *)this + 8;
  v32[5] = "OLightSchema::setCameraSample";
  unint64_t v4 = (Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 216);
  if (!sub_2167CF5D8((uint64_t)this + 216))
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 6);
    uint64_t v20 = *((void *)this + 5);
    long long v21 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".camera");
    int v16 = 4;
    int v17 = (char *)this + 56;
    v15[0] = 0;
    v15[2] = 0;
    v14[0] = 0;
    v14[2] = 0;
    v13[0] = 0;
    void v13[2] = 0;
    sub_2167D064C(v22, &v20, (uint64_t)__p, &v16, v15, v14, v13);
    sub_2167CF624((uint64_t)v4, (uint64_t)v22);
    v22[0].i64[0] = (uint64_t)&unk_26C749BA8;
    uint64_t v33 = (void **)v32;
    sub_2167D05B4(&v33);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v31);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v30);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v29);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)((char *)&v26 + 8));
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)((char *)v24 + 8));
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)((char *)v23 + 8));
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v22[0].u64[1]);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
  long long v6 = *((_OWORD *)a2 + 5);
  v23[1] = *((_OWORD *)a2 + 4);
  v23[2] = v6;
  long long v7 = *((_OWORD *)a2 + 7);
  v24[0] = *((_OWORD *)a2 + 6);
  v24[1] = v7;
  int64x2_t v8 = *((int64x2_t *)a2 + 1);
  v22[0] = *(int64x2_t *)a2;
  v22[1] = v8;
  long long v9 = *((_OWORD *)a2 + 3);
  _OWORD v22[2] = *((int64x2_t *)a2 + 2);
  v23[0] = v9;
  long long v10 = *((_OWORD *)a2 + 9);
  int64x2_t v25 = *((int64x2_t *)a2 + 8);
  long long v26 = v10;
  int64x2_t v27 = *((int64x2_t *)a2 + 10);
  uint64_t v11 = *((void *)a2 + 22);
  uint64_t v12 = *((void *)a2 + 23);
  memset(v28, 0, sizeof(v28));
  sub_2167D0E54(v28, v11, v12, 0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 3));
  int64x2_t v25 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  long long v26 = xmmword_217409FA0;
  int64x2_t v27 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  Alembic::AbcGeom::v12::OCameraSchema::set(v4, (uint64_t **)v22);
  __p[0] = v28;
  sub_2167D05B4((void ***)__p);
}

void sub_2167CF518(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,char a26)
{
  sub_2167CF080((uint64_t)&a26);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v26 - 72, (uint64_t)v29);
  }
  else {
    sub_21679F9F4(v26 - 72, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CF500);
}

void sub_2167CF5B8(_Unwind_Exception *a1)
{
}

BOOL sub_2167CF5D8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 39)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(void *)(a1 + 72)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    return 0;
  }
  return *(void *)(a1 + 88) != 0;
}

uint64_t sub_2167CF624(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  uint64_t v11 = *(void *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 144);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v11;
  *(void *)(a1 + 144) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  uint64_t v14 = *(void *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 192);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v14;
  *(void *)(a1 + 192) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  uint64_t v17 = *(void *)(a2 + 232);
  uint64_t v16 = *(void *)(a2 + 240);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  int v18 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v17;
  *(void *)(a1 + 240) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v20 = *(void *)(a2 + 280);
  uint64_t v19 = *(void *)(a2 + 288);
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v21 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v20;
  *(void *)(a1 + 288) = v19;
  if (v21) {
    sub_216784EC4(v21);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v23 = *(void *)(a2 + 328);
  uint64_t v22 = *(void *)(a2 + 336);
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v23;
  *(void *)(a1 + 336) = v22;
  if (v24) {
    sub_216784EC4(v24);
  }
  long long v25 = *(_OWORD *)(a2 + 344);
  long long v26 = *(_OWORD *)(a2 + 360);
  long long v27 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v27;
  *(_OWORD *)(a1 + 344) = v25;
  *(_OWORD *)(a1 + 360) = v26;
  long long v28 = *(_OWORD *)(a2 + 408);
  long long v29 = *(_OWORD *)(a2 + 424);
  long long v30 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v30;
  *(_OWORD *)(a1 + 408) = v28;
  *(_OWORD *)(a1 + 424) = v29;
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  sub_2167B86F0((void **)(a1 + 520));
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a2 + 528) = 0;
  *(void *)(a2 + 520) = 0;
  *(void *)(a2 + 536) = 0;
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::setFromPrevious(Alembic::AbcGeom::v12::OLightSchema *this)
{
  uint64_t v1 = (Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 216);
  uint64_t result = sub_2167CF5D8((uint64_t)this + 216);
  if (result) {
    uint64_t v3 = nullsub_22;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return Alembic::AbcGeom::v12::OCameraSchema::setFromPrevious(v1);
  }
  return result;
}

void sub_2167CF8AC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CF89CLL);
}

void sub_2167CF8E0(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OLightSchema::setTimeSampling(Alembic::AbcGeom::v12::OLightSchema *this)
{
  BOOL v2 = (int *)((char *)this + 8);
  uint64_t v10 = (char *)this + 8;
  uint64_t v11 = "OLightSchema::setTimeSampling( uint32_t)";
  uint64_t v3 = (Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 216);
  if (sub_2167CF5D8((uint64_t)this + 216)) {
    uint64_t v4 = nullsub_22;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4) {
    Alembic::AbcGeom::v12::OCameraSchema::setTimeSampling(v3);
  }
  sub_2167B7AC8(v2, (uint64_t)v7);
  Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v7, (uint64_t)v8);
  Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v8, &v9);
  long long v5 = v9;
  long long v9 = 0uLL;
  long long v6 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + 56) = v5;
  if (v6)
  {
    sub_216784EC4(v6);
    if (*((void *)&v9 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v8);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v7);
}

void sub_2167CF9D4(void *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  long long v6 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v3 - 48, (uint64_t)v6);
  }
  else {
    sub_21679F9F4(v3 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CF9C0);
}

void sub_2167CFA3C(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OLightSchema::setTimeSampling(Alembic::AbcGeom::v12::OLightSchema *a1, void *a2)
{
  uint64_t v3 = (int *)((char *)a1 + 8);
  long long v6 = v3;
  uint64_t v7 = "OLightSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_2167B7AC8(v3, (uint64_t)v4);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v4, (uint64_t)v5);
    Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v5);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v5);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v4);
    Alembic::AbcGeom::v12::OLightSchema::setTimeSampling(a1);
  }
}

void sub_2167CFAE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167CFAD0);
}

void sub_2167CFB48(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OLightSchema::getNumSamples(Alembic::AbcGeom::v12::OLightSchema *this)
{
  if (*((char *)this + 103) < 0)
  {
    if (*((void *)this + 11)) {
      goto LABEL_3;
    }
LABEL_5:
    if (*((void *)this + 13)) {
      uint64_t v1 = nullsub_6;
    }
    else {
      uint64_t v1 = 0;
    }
    goto LABEL_8;
  }
  if (!*((unsigned char *)this + 103)) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v1 = 0;
LABEL_8:
  if (v1) {
    return Alembic::Abc::v12::OScalarProperty::getNumSamples((Alembic::AbcGeom::v12::OLightSchema *)((char *)this + 72));
  }
  else {
    return 0;
  }
}

void sub_2167CFC28(_Unwind_Exception *a1)
{
}

unsigned char *Alembic::AbcGeom::v12::OLightSchema::getArbGeomParams@<X0>(Alembic::AbcGeom::v12::OLightSchema *this@<X0>, uint64_t a2@<X8>)
{
  long long v21 = (char *)this + 8;
  uint64_t v22 = "OLightSchema::getArbGeomParams()";
  int v4 = *((char *)this + 199);
  if (v4 < 0)
  {
    if (!*((void *)this + 23)) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)this + 199))
  {
LABEL_5:
    if (*((void *)this + 25)) {
      goto LABEL_17;
    }
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 5);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *((_DWORD *)this + 42) = v17;
  std::string::operator=((std::string *)((char *)this + 176), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 26);
  *((void *)this + 25) = v7;
  *((void *)this + 26) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *((unsigned char *)this + 199);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 42);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)this + 22), *((void *)this + 23));
  }
  else
  {
    *(_OWORD *)uint64_t result = *((_OWORD *)this + 11);
    *(void *)(a2 + 24) = *((void *)this + 24);
  }
  uint64_t v10 = *((void *)this + 26);
  *(void *)(a2 + 32) = *((void *)this + 25);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2167CFDA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  long long v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x2167CFD94);
}

void sub_2167CFE48(_Unwind_Exception *a1)
{
}

unsigned char *Alembic::AbcGeom::v12::OLightSchema::getUserProperties@<X0>(Alembic::AbcGeom::v12::OLightSchema *this@<X0>, uint64_t a2@<X8>)
{
  long long v21 = (char *)this + 8;
  uint64_t v22 = "OLightSchema::getUserProperties()";
  int v4 = *((char *)this + 151);
  if (v4 < 0)
  {
    if (!*((void *)this + 17)) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)this + 151))
  {
LABEL_5:
    if (*((void *)this + 19)) {
      goto LABEL_17;
    }
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 5);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".userProperties");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *((_DWORD *)this + 30) = v17;
  std::string::operator=((std::string *)((char *)this + 128), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 20);
  *((void *)this + 19) = v7;
  *((void *)this + 20) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *((unsigned char *)this + 151);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 30);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)this + 16), *((void *)this + 17));
  }
  else
  {
    *(_OWORD *)uint64_t result = *((_OWORD *)this + 8);
    *(void *)(a2 + 24) = *((void *)this + 18);
  }
  uint64_t v10 = *((void *)this + 20);
  *(void *)(a2 + 32) = *((void *)this + 19);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2167CFFC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  long long v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x2167CFFB4);
}

void sub_2167D0068(_Unwind_Exception *a1)
{
}

unsigned char *Alembic::AbcGeom::v12::OLightSchema::getChildBoundsProperty@<X0>(Alembic::AbcGeom::v12::OLightSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = (char *)this + 8;
  long long v25 = "OLightSchema::getChildBoundsProperty()";
  if (*((char *)this + 103) < 0)
  {
    if (!*((void *)this + 11)) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)this + 103))
  {
LABEL_5:
    if (*((void *)this + 13)) {
      goto LABEL_19;
    }
  }
  uint64_t v4 = *((void *)this + 5);
  long long v5 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v19 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v18 = v4;
  sub_216779094(__p, ".childBnds");
  int v14 = 4;
  uint64_t v15 = (char *)this + 56;
  v13[0] = 0;
  void v13[2] = 0;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  sub_2167B9640((uint64_t)&v20, &v18, (uint64_t)__p, &v14, v13, v12, v11);
  *((_DWORD *)this + 18) = v20;
  std::string::operator=((std::string *)((char *)this + 80), &v21);
  uint64_t v7 = v22;
  uint64_t v6 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = v7;
  *((void *)this + 14) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v20);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
  if (v5) {
    sub_216784EC4(v5);
  }
LABEL_19:
  *(_DWORD *)a2 = *((_DWORD *)this + 18);
  uint64_t result = (unsigned char *)(a2 + 8);
  if (*((char *)this + 103) < 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)this + 10), *((void *)this + 11));
  }
  else
  {
    *(_OWORD *)uint64_t result = *((_OWORD *)this + 5);
    *(void *)(a2 + 24) = *((void *)this + 12);
  }
  uint64_t v10 = *((void *)this + 14);
  *(void *)(a2 + 32) = *((void *)this + 13);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2167D022C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,char a26)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&a26);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  if (v26) {
    sub_216784EC4(v26);
  }
  long long v30 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v27 - 64, (uint64_t)v30);
  }
  else {
    sub_21679F9F4(v27 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D01C8);
}

void sub_2167D02B0(_Unwind_Exception *a1)
{
}

void sub_2167D02D4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2167D12E8(a1);

  operator delete(v1);
}

int64x2_t *sub_2167D02FC(int64x2_t *a1)
{
  a1->i32[2] = 2;
  sub_216779094((int64x2_t *)a1[1].i64, "");
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0;
  a1->i64[0] = (uint64_t)&unk_26C749BA8;
  a1[3].i32[2] = 2;
  sub_216779094((int64x2_t *)a1[4].i64, "");
  a1[6].i32[2] = 2;
  a1[5].i64[1] = 0;
  a1[6].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[7].i64, "");
  a1[9].i32[2] = 2;
  a1[8].i64[1] = 0;
  a1[9].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[10].i64, "");
  a1[12].i32[2] = 2;
  a1[11].i64[1] = 0;
  a1[12].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[13].i64, "");
  a1[15].i32[2] = 2;
  a1[14].i64[1] = 0;
  a1[15].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[16].i64, "");
  a1[17].i64[1] = 0;
  a1[18].i64[0] = 0;
  a1[18].i32[2] = 2;
  sub_216779094((int64x2_t *)a1[19].i64, "");
  a1[20].i64[1] = 0;
  a1[21].i64[0] = 0;
  a1[29].i64[1] = 0x7FEFFFFFFFFFFFFFLL;
  a1[30] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[31] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  a1[32].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  a1[32].i64[1] = 0;
  a1[33].i64[1] = 0;
  a1[33].i64[0] = 0;
  sub_2167B3334((uint64_t)&a1[21].i64[1]);
  return a1;
}

void sub_2167D0450(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v6);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v5);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_2167D04AC()
{
}

void sub_2167D04B4(char *a1)
{
  *(void *)a1 = &unk_26C749BA8;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 520);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

uint64_t sub_2167D054C(uint64_t a1)
{
  return a1;
}

void sub_2167D0578(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2167D05B4(void ***a1)
{
  uint64_t v1 = *a1;
  BOOL v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_2167B3F88((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

int64x2_t *sub_2167D064C(int64x2_t *a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v23 = *a2;
  uint64_t v24 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167D09B8((uint64_t)a1, &v23, a3, a4, a5, a6, a7);
  if (v24) {
    sub_216784EC4(v24);
  }
  a1->i64[0] = (uint64_t)&unk_26C749BA8;
  a1[3].i32[2] = 2;
  sub_216779094((int64x2_t *)a1[4].i64, "");
  a1[6].i32[2] = 2;
  a1[5].i64[1] = 0;
  a1[6].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[7].i64, "");
  a1[9].i32[2] = 2;
  a1[8].i64[1] = 0;
  a1[9].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[10].i64, "");
  a1[12].i32[2] = 2;
  a1[11].i64[1] = 0;
  a1[12].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[13].i64, "");
  a1[15].i32[2] = 2;
  a1[14].i64[1] = 0;
  a1[15].i64[0] = 0;
  sub_216779094((int64x2_t *)a1[16].i64, "");
  a1[17].i64[1] = 0;
  a1[18].i64[0] = 0;
  a1[18].i32[2] = 2;
  sub_216779094((int64x2_t *)a1[19].i64, "");
  a1[20].i64[1] = 0;
  a1[21].i64[0] = 0;
  a1[29].i64[1] = 0x7FEFFFFFFFFFFFFFLL;
  a1[30] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[31] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  a1[32].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  a1[32].i64[1] = 0;
  a1[33].i64[1] = 0;
  a1[33].i64[0] = 0;
  sub_2167B3334((uint64_t)&a1[21].i64[1]);
  sub_2167CC320(a4, a5, a6, a7, &v21);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v21)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v17);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v17 + 24))(&v19);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 48))(v19, v21);
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  else
  {
    int v15 = v14;
  }
  Alembic::AbcGeom::v12::OCameraSchema::init((Alembic::AbcGeom::v12::OCameraSchema *)a1, v15);
  if (v22) {
    sub_216784EC4(v22);
  }
  return a1;
}

void sub_2167D08DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Alembic::Abc::v12::OScalarProperty *a9, Alembic::Abc::v12::OScalarProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  a15 = v18 + 520;
  sub_2167D05B4((void ***)&a15);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v18 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v21);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a9);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v18 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_2167D09B8(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749C08;
  int v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167D0AB4(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167D0A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167D0AB4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v22 = 0;
  v23[0] = 0;
  uint64_t v21 = (uint64_t *)&v22;
  int v24 = 2;
  sub_2167898D0((uint64_t *)v25, (const void ***)&v21);
  v25[3] = 0;
  long long v26 = 0;
  int v27 = 0;
  uint64_t v28 = 1;
  sub_2167877AC((uint64_t)&v21, v22);
  sub_2167A030C(a4, (uint64_t)&v24);
  sub_2167A030C(a5, (uint64_t)&v24);
  sub_2167A030C(a6, (uint64_t)&v24);
  sub_2167A030C(a7, (uint64_t)&v24);
  *(_DWORD *)(a1 + 8) = v24;
  v23[33] = a1 + 8;
  v23[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v21);
    sub_216779180(v23, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v21, v25);
  if (HIDWORD(v28) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Camera_v1");
    long long v29 = __p;
    uint64_t v13 = sub_21677B174(&v21, (const void **)__p, (uint64_t)&unk_21740A11D, (long long **)&v29);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v14 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v21, v22);
  if (v26) {
    sub_216784EC4(v26);
  }
  sub_2167877AC((uint64_t)v25, v25[1]);
}

void sub_2167D0D30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  long long v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D0C7CLL);
}

void sub_2167D0E08(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

void *sub_2167D0E54(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2167B8760(result, a4);
    uint64_t result = (void *)sub_2167B87B8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2167D0EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2167D05B4(&a9);
  _Unwind_Resume(a1);
}

void sub_2167D0EE0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v22 = 0;
  v23[0] = 0;
  uint64_t v21 = (uint64_t *)&v22;
  int v24 = 2;
  sub_2167898D0((uint64_t *)v25, (const void ***)&v21);
  v25[3] = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v28 = 1;
  sub_2167877AC((uint64_t)&v21, v22);
  sub_2167A030C(a4, (uint64_t)&v24);
  sub_2167A030C(a5, (uint64_t)&v24);
  sub_2167A030C(a6, (uint64_t)&v24);
  sub_2167A030C(a7, (uint64_t)&v24);
  *(_DWORD *)(a1 + 8) = v24;
  v23[33] = a1 + 8;
  v23[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v21);
    sub_216779180(v23, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v21, v25);
  if (HIDWORD(v28) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Light_v1");
    long long v29 = __p;
    uint64_t v13 = sub_21677B174(&v21, (const void **)__p, (uint64_t)&unk_21740A11D, (long long **)&v29);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v14 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v21, v22);
  if (v26) {
    sub_216784EC4(v26);
  }
  sub_2167877AC((uint64_t)v25, v25[1]);
}

void sub_2167D115C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  long long v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D10A8);
}

void sub_2167D1234(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2167D1280(uint64_t a1)
{
  return a1;
}

void sub_2167D12AC(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2167D12E8(uint64_t a1)
{
  *(void *)a1 = &unk_26C749B48;
  *(void *)(a1 + 216) = &unk_26C749BA8;
  uint64_t v4 = (void **)(a1 + 736);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 512));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 464));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 416));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 368));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 320));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 272));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 224));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 168));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 120));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 72));
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

void Alembic::AbcGeom::v12::ILightSchema::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  uint64_t v59 = a1 + 8;
  int v60 = "ILightSchema::init()";
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = 0uLL;
  long long __p = &v44;
  int v54 = 2;
  sub_2167898D0(v55, (const void ***)&__p);
  v55[3] = 0;
  uint64_t v56 = 0;
  int v57 = 0;
  uint64_t v58 = 1;
  sub_2167877AC((uint64_t)&__p, v44.__r_.__value_.__l.__data_);
  sub_2167A030C(a2, (uint64_t)&v54);
  sub_2167A030C(a3, (uint64_t)&v54);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".camera");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v10 = PropertyHeader;
  if (v44.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v10) {
      goto LABEL_13;
    }
  }
  else if (!PropertyHeader)
  {
    goto LABEL_13;
  }
  uint64_t v40 = v8;
  uint64_t v41 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v38 = 0;
  int v39 = 0;
  int v36 = 0;
  int v37 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v42, &v40, &v38, &v36);
  sub_216779094(v34, ".camera");
  sub_2167D20C8((uint64_t)&__p, (uint64_t)v42, (uint64_t)v34, a2, a3);
  sub_2167D1B58(a1 + 200, (uint64_t)&__p);
  long long __p = &unk_26C749C48;
  uint64_t v28 = (void **)&v53;
  sub_2167D05B4(&v28);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v52);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v51);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v50);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v49);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v48);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v47);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v44);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v42);
  if (v41) {
    sub_216784EC4(v41);
  }
LABEL_13:
  sub_216779094(&__p, ".childBnds");
  uint64_t v11 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v12 = v11;
  if (v44.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v12) {
      goto LABEL_27;
    }
  }
  else if (!v11)
  {
    goto LABEL_27;
  }
  uint64_t v32 = v8;
  uint64_t v33 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v38 = 0;
  int v39 = 0;
  int v36 = 0;
  int v37 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v42, &v32, &v38, &v36);
  sub_216779094(v34, ".childBnds");
  sub_2167B10BC((uint64_t)&__p, v42, (uint64_t)v34, a2, a3);
  *(_DWORD *)(a1 + 56) = __p;
  std::string::operator=((std::string *)(a1 + 64), &v44);
  uint64_t v14 = v45;
  uint64_t v13 = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  int v15 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&__p);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v42);
  if (v33) {
    sub_216784EC4(v33);
  }
LABEL_27:
  sub_216779094(&__p, ".arbGeomParams");
  uint64_t v16 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v17 = v16;
  if (v44.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v17) {
      goto LABEL_41;
    }
  }
  else if (!v16)
  {
    goto LABEL_41;
  }
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v38 = 0;
  int v39 = 0;
  int v36 = 0;
  int v37 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v42, &v30, &v38, &v36);
  sub_216779094(v34, ".arbGeomParams");
  LODWORD(v28) = 1;
  int v29 = v54;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, v42, v34, &v28);
  *(_DWORD *)(a1 + 104) = __p;
  std::string::operator=((std::string *)(a1 + 112), &v44);
  uint64_t v19 = v45;
  uint64_t v18 = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  char v20 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v19;
  *(void *)(a1 + 144) = v18;
  if (v20) {
    sub_216784EC4(v20);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v42);
  if (v31) {
    sub_216784EC4(v31);
  }
LABEL_41:
  sub_216779094(&__p, ".userProperties");
  uint64_t v21 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v22 = v21;
  if (v44.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (!v22) {
      goto LABEL_55;
    }
  }
  else if (!v21)
  {
    goto LABEL_55;
  }
  uint64_t v26 = v8;
  int v27 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v38 = 0;
  int v39 = 0;
  int v36 = 0;
  int v37 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v42, &v26, &v38, &v36);
  sub_216779094(v34, ".userProperties");
  LODWORD(v28) = 1;
  int v29 = v54;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, v42, v34, &v28);
  *(_DWORD *)(a1 + 152) = __p;
  std::string::operator=((std::string *)(a1 + 160), &v44);
  uint64_t v24 = v45;
  uint64_t v23 = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v24;
  *(void *)(a1 + 192) = v23;
  if (v25) {
    sub_216784EC4(v25);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v42);
  if (v27) {
    sub_216784EC4(v27);
  }
LABEL_55:
  if (v7) {
    sub_216784EC4(v7);
  }
  if (v56) {
    sub_216784EC4(v56);
  }
  sub_2167877AC((uint64_t)v55, (void *)v55[1]);
}

void sub_2167D1918(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a36);
  if (a23 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a30);
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v42) {
    sub_216784EC4(v42);
  }
  sub_2167A03C4(v43 - 160);
  uint64_t v46 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v47 = (uint64_t)v46;
    sub_2167D1DBC(v41);
    sub_21679FA64(v43 - 96, v47);
  }
  else
  {
    sub_2167D1DBC(v41);
    sub_21679F9F4(v43 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D18F8);
}

void sub_2167D1B14(_Unwind_Exception *a1)
{
}

void sub_2167D1B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
}

void sub_2167D1B4C()
{
}

uint64_t sub_2167D1B58(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  uint64_t v11 = *(void *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 144);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v11;
  *(void *)(a1 + 144) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  uint64_t v14 = *(void *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 192);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  int v15 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v14;
  *(void *)(a1 + 192) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  uint64_t v17 = *(void *)(a2 + 232);
  uint64_t v16 = *(void *)(a2 + 240);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v17;
  *(void *)(a1 + 240) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v20 = *(void *)(a2 + 280);
  uint64_t v19 = *(void *)(a2 + 288);
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v20;
  *(void *)(a1 + 288) = v19;
  if (v21) {
    sub_216784EC4(v21);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v23 = *(void *)(a2 + 328);
  uint64_t v22 = *(void *)(a2 + 336);
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v23;
  *(void *)(a1 + 336) = v22;
  if (v24) {
    sub_216784EC4(v24);
  }
  sub_2167B86F0((void **)(a1 + 344));
  uint64_t v25 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v25;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  return a1;
}

uint64_t sub_2167D1D28(uint64_t a1)
{
  *(void *)a1 = &unk_26C749C48;
  BOOL v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 344);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 248));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_2167D1DBC(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167B5494(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

uint64_t Alembic::AbcGeom::v12::ILightSchema::getTimeSampling@<X0>(Alembic::AbcGeom::v12::ILightSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 56);
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_3:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 11)) {
    uint64_t v5 = nullsub_4;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_8:
  if (v5) {
    return Alembic::Abc::v12::IScalarProperty::getTimeSampling(v4, a2);
  }
  uint64_t result = sub_2167CF5D8((uint64_t)this + 200);
  if (result) {
    uint64_t v7 = nullsub_23;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v4 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 256);
    return Alembic::Abc::v12::IScalarProperty::getTimeSampling(v4, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_2167D1F04(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcGeom::v12::ILightSchema::isConstant(Alembic::AbcGeom::v12::ILightSchema *this)
{
  return (unint64_t)Alembic::AbcGeom::v12::ILightSchema::getNumSamples(this) < 2;
}

void sub_2167D1F64(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D1F54);
}

void sub_2167D1F9C(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::ILightSchema::getNumSamples(Alembic::AbcGeom::v12::ILightSchema *this)
{
  BOOL v2 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 56);
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_3:
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 11)) {
    uint64_t v3 = nullsub_4;
  }
  else {
    uint64_t v3 = 0;
  }
LABEL_8:
  if (v3) {
    return Alembic::Abc::v12::IScalarProperty::getNumSamples(v2);
  }
  if (sub_2167CF5D8((uint64_t)this + 200)) {
    uint64_t v4 = nullsub_23;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    BOOL v2 = (Alembic::AbcGeom::v12::ILightSchema *)((char *)this + 256);
    return Alembic::Abc::v12::IScalarProperty::getNumSamples(v2);
  }
  return 0;
}

void sub_2167D20A8(_Unwind_Exception *a1)
{
}

uint64_t sub_2167D20C8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v8 = sub_2167D228C(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_26C749C48;
  *(_DWORD *)(v8 + 56) = 2;
  sub_216779094((void *)(v8 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(_DWORD *)(a1 + 248) = 2;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  Alembic::AbcGeom::v12::ICameraSchema::init(a1, a4, a5);
  return a1;
}

void sub_2167D2208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 344);
  sub_2167D05B4(&a10);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v16);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v15);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v14);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v12);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v11);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 8));
  _Unwind_Resume(a1);
}

void sub_2167D227C()
{
}

void sub_2167D2284()
{
}

uint64_t sub_2167D228C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749CD8;
  sub_2167D23D0(a1, a2, a3, a4, a5);
  return a1;
}

void sub_2167D2324(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_2167D2338(char *a1)
{
  *(void *)a1 = &unk_26C749C48;
  BOOL v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 344);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 248));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  operator delete(a1);
}

void sub_2167D23D0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *((void *)&v35 + 1) = 0;
  v36[0] = 0;
  *(void *)&long long v35 = (char *)&v35 + 8;
  int v37 = 2;
  sub_2167898D0(v38, (const void ***)&v35);
  v38[3] = 0;
  int v39 = 0;
  int v40 = 0;
  uint64_t v41 = 1;
  sub_2167877AC((uint64_t)&v35, *((void **)&v35 + 1));
  sub_2167A030C(a4, (uint64_t)&v37);
  sub_2167A030C(a5, (uint64_t)&v37);
  *(_DWORD *)(a1 + 8) = v37;
  v36[34] = a1 + 8;
  v36[35] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(void *)(a2 + 16)) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a2 + 31))
  {
LABEL_18:
    sub_216778A5C((uint64_t)&v35);
    sub_216779180(v36, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)v33);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 40);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 80))(v10, a3);
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v35);
    uint64_t v18 = sub_216779180(v36, (uint64_t)"Nonexistent compound property: ", 31);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    sub_216779180(v18, v20, v21);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v22 = __cxa_allocate_exception(0x20uLL);
    uint64_t v23 = sub_216779038(v22, (uint64_t)v33);
    __cxa_throw(v23, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = v12 + 32;
  if ((sub_2167D2970(v12 + 32, v41) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v35);
    uint64_t v24 = sub_216779180(v36, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(__p, "schema");
    sub_21679F2AC(v13, (const void **)__p, v33);
    if ((v34 & 0x80u) == 0) {
      uint64_t v25 = v33;
    }
    else {
      uint64_t v25 = (void **)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v26 = v34;
    }
    else {
      uint64_t v26 = (uint64_t)v33[1];
    }
    int v27 = sub_216779180(v24, (uint64_t)v25, v26);
    uint64_t v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"AbcGeom_Camera_v1", 17);
    if ((char)v34 < 0) {
      operator delete(v33[0]);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    int v29 = __cxa_allocate_exception(0x20uLL);
    uint64_t v30 = sub_216779038(v29, (uint64_t)v33);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 104))(&v35, v10, a3);
  long long v14 = v35;
  long long v35 = 0uLL;
  int v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (*((void *)&v35 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v39) {
    sub_216784EC4(v39);
  }
  sub_2167877AC((uint64_t)v38, (void *)v38[1]);
}

void sub_2167D27A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  int v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D2558);
}

void sub_2167D28D0()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2167D2900);
}

uint64_t sub_2167D2908(uint64_t a1)
{
  return a1;
}

void sub_2167D2934(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2167D2970(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  if ((a2 & 0xFFFFFFFD) != 0) {
    return 0;
  }
  sub_216779094(__p, "schema");
  sub_21679F2AC(a1, (const void **)__p, &v11);
  if (v14 < 0)
  {
    BOOL v2 = v12 == 17 && *v11 == 0x5F6D6F6547636241 && v11[1] == 0x765F6172656D6143 && *((unsigned char *)v11 + 16) == 49;
    operator delete(v11);
  }
  else
  {
    BOOL v2 = v14 == 17 && v11 == (void *)0x5F6D6F6547636241 && v12 == 0x765F6172656D6143 && v13 == 49;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2167D2A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::ONuPatchSchema(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  char v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167D305C(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C749CF8;
  *(_DWORD *)(a1 + 272) = 2;
  sub_216779094((void *)(a1 + 280), "");
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 2;
  sub_216779094((void *)(a1 + 328), "");
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 2;
  sub_216779094((void *)(a1 + 376), "");
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 2;
  sub_216779094((void *)(a1 + 424), "");
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 2;
  sub_216779094((void *)(a1 + 472), "");
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 2;
  sub_216779094((void *)(a1 + 520), "");
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 2;
  sub_216779094((void *)(a1 + 568), "");
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 608) = 2;
  sub_216779094((void *)(a1 + 616), "");
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  sub_2167DB374(a1 + 656);
  sub_2167DB444(a1 + 832);
  *(_DWORD *)(a1 + 1008) = 2;
  sub_216779094((void *)(a1 + 1016), "");
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 1056) = 2;
  sub_216779094((void *)(a1 + 1064), "");
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1104) = 2;
  sub_216779094((void *)(a1 + 1112), "");
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1136) = 0;
  *(_DWORD *)(a1 + 1152) = 2;
  sub_216779094((void *)(a1 + 1160), "");
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 2;
  sub_216779094((void *)(a1 + 1208), "");
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1248) = 2;
  sub_216779094((void *)(a1 + 1256), "");
  *(void *)(a1 + 1288) = 0;
  *(void *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1296) = 2;
  sub_216779094((void *)(a1 + 1304), "");
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1344) = 2;
  sub_216779094((void *)(a1 + 1352), "");
  *(void *)(a1 + 1384) = 0;
  *(void *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1392) = 2;
  sub_216779094((void *)(a1 + 1400), "");
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1440) = 2;
  sub_216779094((void *)(a1 + 1448), "");
  *(void *)(a1 + 1480) = 0;
  *(void *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1488) = 2;
  sub_216779094((void *)(a1 + 1496), "");
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  unsigned int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    unsigned int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::ONuPatchSchema::init((Alembic::AbcGeom::v12::ONuPatchSchema *)a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167D2EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 186));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 180));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 174));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 168));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 162));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 156));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 150));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 144));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 138));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 132));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 126));
  sub_2167C5410(v16);
  sub_2167C5410(v15);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 76));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 70));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 64));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 58));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 52));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 46));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 40));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 34));
  sub_2167D342C(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2167D305C(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  char v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167DB514(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C749D80;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  sub_2167DB610(a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167D329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::OScalarProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v21);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v18 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::init(Alembic::AbcGeom::v12::ONuPatchSchema *this, uint64_t a2, char a3)
{
  *((unsigned char *)this + 248) = a3;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = a2;
  if ((a3 & 1) == 0)
  {
    Alembic::AbcGeom::v12::ONuPatchSchema::createPositionProperties(this);
    Alembic::AbcGeom::v12::ONuPatchSchema::createKnotProperties(this);
  }
}

void sub_2167D339C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D3388);
}

void sub_2167D340C(_Unwind_Exception *a1)
{
}

void *sub_2167D342C(void *a1)
{
  *a1 = &unk_26C749D80;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::ONuPatchSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v25 = *((void *)a2 + 4);
  uint64_t v26 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *a2;
  LODWORD(v23) = 1;
  LODWORD(v24) = v12;
  sub_2167D305C(a1, &v25, a3, &v23, a4, a5, a6);
  if (v26) {
    sub_216784EC4(v26);
  }
  *(void *)a1 = &unk_26C749CF8;
  *(_DWORD *)(a1 + 272) = 2;
  sub_216779094((void *)(a1 + 280), "");
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 2;
  sub_216779094((void *)(a1 + 328), "");
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 2;
  sub_216779094((void *)(a1 + 376), "");
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 2;
  sub_216779094((void *)(a1 + 424), "");
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 2;
  sub_216779094((void *)(a1 + 472), "");
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 2;
  sub_216779094((void *)(a1 + 520), "");
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 2;
  sub_216779094((void *)(a1 + 568), "");
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 608) = 2;
  sub_216779094((void *)(a1 + 616), "");
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  sub_2167DB374(a1 + 656);
  sub_2167DB444(a1 + 832);
  *(_DWORD *)(a1 + 1008) = 2;
  sub_216779094((void *)(a1 + 1016), "");
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 1056) = 2;
  sub_216779094((void *)(a1 + 1064), "");
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1104) = 2;
  sub_216779094((void *)(a1 + 1112), "");
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1136) = 0;
  *(_DWORD *)(a1 + 1152) = 2;
  sub_216779094((void *)(a1 + 1160), "");
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 2;
  sub_216779094((void *)(a1 + 1208), "");
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1248) = 2;
  sub_216779094((void *)(a1 + 1256), "");
  *(void *)(a1 + 1288) = 0;
  *(void *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1296) = 2;
  sub_216779094((void *)(a1 + 1304), "");
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1344) = 2;
  sub_216779094((void *)(a1 + 1352), "");
  *(void *)(a1 + 1384) = 0;
  *(void *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1392) = 2;
  sub_216779094((void *)(a1 + 1400), "");
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1440) = 2;
  sub_216779094((void *)(a1 + 1448), "");
  *(void *)(a1 + 1480) = 0;
  *(void *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1488) = 2;
  sub_216779094((void *)(a1 + 1496), "");
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  sub_2167CC320(a4, a5, a6, &v21, &v23);
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  unsigned int v13 = sub_2167CC43C(a4, a5, a6, &v21);
  if (v23)
  {
    uint64_t v14 = *((void *)a2 + 4);
    int v15 = (std::__shared_weak_count *)*((void *)a2 + 5);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 24))(&v19);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 24))(&v21);
    unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v23);
    if (v22) {
      sub_216784EC4(v22);
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v15) {
      sub_216784EC4(v15);
    }
  }
  else
  {
    unsigned int v16 = v13;
  }
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  char v17 = sub_2167CD0F8(a4, a5, a6, &v21);
  Alembic::AbcGeom::v12::ONuPatchSchema::init((Alembic::AbcGeom::v12::ONuPatchSchema *)a1, v16, v17);
  if (v24) {
    sub_216784EC4(v24);
  }
  return a1;
}

void sub_2167D38C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 186));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 180));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 174));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 168));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 162));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 156));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 150));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 144));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 138));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 132));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 126));
  sub_2167C5410(v16);
  sub_2167C5410(v15);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 76));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 70));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 64));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 58));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 52));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 46));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 40));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 34));
  sub_2167D342C(v14);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::set(Alembic::AbcGeom::v12::ONuPatchSchema *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 248) && !sub_2167D5C18(a2))
  {
    v248[33] = (char *)this + 8;
    v248[34] = "ONuPatchSchema::set()";
    uint64_t v4 = (void *)(a2 + 40);
    if (*(_DWORD *)(a2 + 48) == 127 || !*v4 && *(void *)(a2 + 64) == *(void *)(a2 + 56)) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = nullsub_10;
    }
    if (!v5) {
      goto LABEL_18;
    }
    if (*((char *)this + 1039) < 0)
    {
      if (!*((void *)this + 128)) {
        goto LABEL_16;
      }
    }
    else if (!*((unsigned char *)this + 1039))
    {
LABEL_16:
      if (!*((void *)this + 130)) {
        goto LABEL_17;
      }
LABEL_18:
      if (*(_DWORD *)(a2 + 312) == 127 || !*(void *)(a2 + 304) && *(void *)(a2 + 328) == *(void *)(a2 + 320)) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = nullsub_8;
      }
      if (v6) {
        uint64_t v7 = nullsub_11;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7 && (sub_2167C5D84((uint64_t)this + 832) & 1) == 0) {
        Alembic::AbcGeom::v12::ONuPatchSchema::createUVsProperty(this, a2);
      }
      if (*(_DWORD *)(a2 + 224) == 127 || !*(void *)(a2 + 216) && *(void *)(a2 + 240) == *(void *)(a2 + 232)) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = nullsub_9;
      }
      if (v8) {
        uint64_t v9 = nullsub_12;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v9 && (sub_2167C5D84((uint64_t)this + 656) & 1) == 0) {
        Alembic::AbcGeom::v12::ONuPatchSchema::createNormalsProperty(this, a2);
      }
      char v10 = (void *)(a2 + 176);
      if (*(_DWORD *)(a2 + 184) == 127 || !*v10 && *(void *)(a2 + 200) == *(void *)(a2 + 192)) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = nullsub_13;
      }
      if (!v11)
      {
LABEL_52:
        if (!*(unsigned char *)(a2 + 760)) {
          goto LABEL_59;
        }
        if (*((char *)this + 1087) < 0)
        {
          if (!*((void *)this + 134)) {
            goto LABEL_57;
          }
        }
        else if (!*((unsigned char *)this + 1087))
        {
LABEL_57:
          if (*((void *)this + 136)) {
            goto LABEL_59;
          }
        }
        Alembic::AbcGeom::v12::ONuPatchSchema::createTrimPropreties(this);
LABEL_59:
        if (*((void *)this + 32))
        {
          int v239 = *((_DWORD *)this + 68);
          if (*((char *)this + 303) < 0)
          {
            sub_216778F24(&v240, *((void **)this + 35), *((void *)this + 36));
          }
          else
          {
            long long v240 = *(_OWORD *)((char *)this + 280);
            uint64_t v241 = *((void *)this + 37);
          }
          uint64_t v13 = *((void *)this + 39);
          uint64_t v242 = *((void *)this + 38);
          uint64_t v243 = v13;
          if (v13) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v14 = *(void *)(a2 + 5);
          *(void *)v235 = *(void *)a2;
          *(void *)&v235[5] = v14;
          long long __p = 0;
          uint64_t v238 = 0;
          v237 = 0;
          sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
          if (SHIBYTE(v241) < 0)
          {
            if (*((void *)&v240 + 1)) {
              goto LABEL_73;
            }
          }
          else if (HIBYTE(v241))
          {
LABEL_73:
            uint64_t v15 = 0;
            goto LABEL_78;
          }
          if (v242) {
            uint64_t v15 = nullsub_7;
          }
          else {
            uint64_t v15 = 0;
          }
LABEL_78:
          if (v15)
          {
            if (*(_DWORD *)&v235[8] == 127 || !*(void *)v235 && v237 == __p) {
              uint64_t v16 = 0;
            }
            else {
              uint64_t v16 = nullsub_19;
            }
            if (v16) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v239);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v239);
            }
          }
          if (__p)
          {
            v237 = __p;
            operator delete(__p);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v239);
          int v230 = *((_DWORD *)this + 80);
          if (*((char *)this + 351) < 0)
          {
            sub_216778F24(&v231, *((void **)this + 41), *((void *)this + 42));
          }
          else
          {
            long long v231 = *(_OWORD *)((char *)this + 328);
            uint64_t v232 = *((void *)this + 43);
          }
          uint64_t v17 = *((void *)this + 45);
          uint64_t v233 = *((void *)this + 44);
          uint64_t v234 = v17;
          if (v17) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
          }
          int v18 = *(_DWORD *)(a2 + 80);
          v247[0] = v18;
          if (SHIBYTE(v232) < 0)
          {
            if (*((void *)&v231 + 1)) {
              goto LABEL_140;
            }
          }
          else if (HIBYTE(v232))
          {
            goto LABEL_140;
          }
          if (v233)
          {
            if (v18 == -536870912) {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v230);
            }
            else {
              Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v230, v247);
            }
          }
LABEL_140:
          Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v230);
          int v225 = *((_DWORD *)this + 92);
          if (*((char *)this + 399) < 0)
          {
            sub_216778F24(&v226, *((void **)this + 47), *((void *)this + 48));
          }
          else
          {
            long long v226 = *(_OWORD *)((char *)this + 376);
            uint64_t v227 = *((void *)this + 49);
          }
          uint64_t v23 = *((void *)this + 51);
          uint64_t v228 = *((void *)this + 50);
          uint64_t v229 = v23;
          if (v23) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
          }
          int v24 = *(_DWORD *)(a2 + 84);
          v247[0] = v24;
          if (SHIBYTE(v227) < 0)
          {
            if (*((void *)&v226 + 1)) {
              goto LABEL_153;
            }
          }
          else if (HIBYTE(v227))
          {
            goto LABEL_153;
          }
          if (v228)
          {
            if (v24 == -536870912) {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v225);
            }
            else {
              Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v225, v247);
            }
          }
LABEL_153:
          Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v225);
          int v220 = *((_DWORD *)this + 104);
          if (*((char *)this + 447) < 0)
          {
            sub_216778F24(&v221, *((void **)this + 53), *((void *)this + 54));
          }
          else
          {
            long long v221 = *(_OWORD *)((char *)this + 424);
            uint64_t v222 = *((void *)this + 55);
          }
          uint64_t v25 = *((void *)this + 57);
          uint64_t v223 = *((void *)this + 56);
          uint64_t v224 = v25;
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
          int v26 = *(_DWORD *)(a2 + 88);
          v247[0] = v26;
          if (SHIBYTE(v222) < 0)
          {
            if (*((void *)&v221 + 1)) {
              goto LABEL_166;
            }
          }
          else if (HIBYTE(v222))
          {
            goto LABEL_166;
          }
          if (v223)
          {
            if (v26 == -536870912) {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v220);
            }
            else {
              Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v220, v247);
            }
          }
LABEL_166:
          Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v220);
          int v215 = *((_DWORD *)this + 116);
          if (*((char *)this + 495) < 0)
          {
            sub_216778F24(&v216, *((void **)this + 59), *((void *)this + 60));
          }
          else
          {
            long long v216 = *(_OWORD *)((char *)this + 472);
            uint64_t v217 = *((void *)this + 61);
          }
          uint64_t v27 = *((void *)this + 63);
          uint64_t v218 = *((void *)this + 62);
          uint64_t v219 = v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          int v28 = *(_DWORD *)(a2 + 92);
          v247[0] = v28;
          if (SHIBYTE(v217) < 0)
          {
            if (*((void *)&v216 + 1)) {
              goto LABEL_179;
            }
          }
          else if (HIBYTE(v217))
          {
            goto LABEL_179;
          }
          if (v218)
          {
            if (v28 == -536870912) {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v215);
            }
            else {
              Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v215, v247);
            }
          }
LABEL_179:
          Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v215);
          int v210 = *((_DWORD *)this + 128);
          if (*((char *)this + 543) < 0)
          {
            sub_216778F24(&v211, *((void **)this + 65), *((void *)this + 66));
          }
          else
          {
            long long v211 = *(_OWORD *)((char *)this + 520);
            uint64_t v212 = *((void *)this + 67);
          }
          uint64_t v29 = *((void *)this + 69);
          uint64_t v213 = *((void *)this + 68);
          uint64_t v214 = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = *(void *)(a2 + 101);
          *(void *)v206 = *(void *)(a2 + 96);
          *(void *)&v206[5] = v30;
          v207 = 0;
          uint64_t v209 = 0;
          v208 = 0;
          sub_21677EA60(&v207, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
          if (SHIBYTE(v212) < 0)
          {
            if (*((void *)&v211 + 1)) {
              goto LABEL_186;
            }
          }
          else if (HIBYTE(v212))
          {
LABEL_186:
            uint64_t v31 = 0;
            goto LABEL_191;
          }
          if (v213) {
            uint64_t v31 = nullsub_7;
          }
          else {
            uint64_t v31 = 0;
          }
LABEL_191:
          if (v31)
          {
            if (*(_DWORD *)&v206[8] == 127 || !*(void *)v206 && v208 == v207) {
              char v32 = 0;
            }
            else {
              char v32 = nullsub_13;
            }
            if (v32) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v210);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v210);
            }
          }
          if (v207)
          {
            v208 = v207;
            operator delete(v207);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v210);
          int v201 = *((_DWORD *)this + 140);
          if (*((char *)this + 591) < 0)
          {
            sub_216778F24(&v202, *((void **)this + 71), *((void *)this + 72));
          }
          else
          {
            long long v202 = *(_OWORD *)((char *)this + 568);
            uint64_t v203 = *((void *)this + 73);
          }
          uint64_t v33 = *((void *)this + 75);
          uint64_t v204 = *((void *)this + 74);
          uint64_t v205 = v33;
          if (v33) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v34 = *(void *)(a2 + 141);
          *(void *)v197 = *(void *)(a2 + 136);
          *(void *)&v197[5] = v34;
          v198 = 0;
          uint64_t v200 = 0;
          v199 = 0;
          sub_21677EA60(&v198, *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
          if (SHIBYTE(v203) < 0)
          {
            if (*((void *)&v202 + 1)) {
              goto LABEL_209;
            }
          }
          else if (HIBYTE(v203))
          {
LABEL_209:
            long long v35 = 0;
            goto LABEL_214;
          }
          if (v204) {
            long long v35 = nullsub_7;
          }
          else {
            long long v35 = 0;
          }
LABEL_214:
          if (v35)
          {
            if (*(_DWORD *)&v197[8] == 127 || !*(void *)v197 && v199 == v198) {
              int v36 = 0;
            }
            else {
              int v36 = nullsub_13;
            }
            if (v36) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v201);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v201);
            }
          }
          if (v198)
          {
            v199 = v198;
            operator delete(v198);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v201);
          if (sub_2167C5D84((uint64_t)this + 832)) {
            int v37 = nullsub_16;
          }
          else {
            int v37 = 0;
          }
          if (v37) {
            sub_2167C3654((uint64_t)this + 832, a2 + 304);
          }
          if (sub_2167C5D84((uint64_t)this + 656)) {
            int v38 = nullsub_17;
          }
          else {
            int v38 = 0;
          }
          if (v38) {
            sub_2167C3A2C((uint64_t)this + 656, a2 + 216);
          }
          int v39 = *((char *)this + 639);
          if (v39 < 0)
          {
            if (*((void *)this + 78)) {
              goto LABEL_267;
            }
          }
          else if (*((unsigned char *)this + 639))
          {
            goto LABEL_267;
          }
          if (*((void *)this + 80)) {
            int v40 = nullsub_7;
          }
          else {
            int v40 = 0;
          }
          if (!v40)
          {
LABEL_267:
            int v45 = *((char *)this + 1039);
            if (v45 < 0)
            {
              if (*((void *)this + 128)) {
                goto LABEL_299;
              }
            }
            else if (*((unsigned char *)this + 1039))
            {
              goto LABEL_299;
            }
            if (*((void *)this + 130)) {
              uint64_t v46 = nullsub_7;
            }
            else {
              uint64_t v46 = 0;
            }
            if (!v46)
            {
LABEL_299:
              int v51 = *((char *)this + 1087);
              if (v51 < 0)
              {
                if (*((void *)this + 134)) {
                  goto LABEL_528;
                }
              }
              else if (*((unsigned char *)this + 1087))
              {
                goto LABEL_528;
              }
              if (*((void *)this + 136)) {
                uint64_t v52 = nullsub_6;
              }
              else {
                uint64_t v52 = 0;
              }
              if (!v52)
              {
LABEL_528:
                if (*(double *)(a2 + 792) <= *(double *)(a2 + 768)
                  || *(double *)(a2 + 800) <= *(double *)(a2 + 776)
                  || *(double *)(a2 + 808) <= *(double *)(a2 + 784))
                {
                  if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
                    v90 = 0;
                  }
                  else {
                    v90 = nullsub_19;
                  }
                  if (v90)
                  {
                    sub_2167C354C((void *)a2, (uint64_t)v247);
                    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), v247);
                  }
                  else
                  {
                    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56));
                  }
                  goto LABEL_540;
                }
                goto LABEL_531;
              }
              int v174 = *((_DWORD *)this + 264);
              if (v51 < 0)
              {
                sub_216778F24(&v175, *((void **)this + 133), *((void *)this + 134));
              }
              else
              {
                long long v175 = *(_OWORD *)((char *)this + 1064);
                uint64_t v176 = *((void *)this + 135);
              }
              uint64_t v53 = *((void *)this + 137);
              uint64_t v177 = *((void *)this + 136);
              uint64_t v178 = v53;
              if (v53) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
              }
              int v54 = *(_DWORD *)(a2 + 392);
              v247[0] = v54;
              if (SHIBYTE(v176) < 0)
              {
                if (*((void *)&v175 + 1)) {
                  goto LABEL_320;
                }
              }
              else if (HIBYTE(v176))
              {
                goto LABEL_320;
              }
              if (v177)
              {
                if (v54 == -536870912) {
                  Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v174);
                }
                else {
                  Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v174, v247);
                }
              }
LABEL_320:
              Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v174);
              int v169 = *((_DWORD *)this + 276);
              if (*((char *)this + 1135) < 0)
              {
                sub_216778F24(&v170, *((void **)this + 139), *((void *)this + 140));
              }
              else
              {
                long long v170 = *(_OWORD *)((char *)this + 1112);
                uint64_t v171 = *((void *)this + 141);
              }
              uint64_t v55 = *((void *)this + 143);
              uint64_t v172 = *((void *)this + 142);
              uint64_t v173 = v55;
              if (v55) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v56 = *(void *)(a2 + 405);
              *(void *)v165 = *(void *)(a2 + 400);
              *(void *)&v165[5] = v56;
              v166 = 0;
              uint64_t v168 = 0;
              v167 = 0;
              sub_21677EA60(&v166, *(const void **)(a2 + 416), *(void *)(a2 + 424), (uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 3);
              if (SHIBYTE(v171) < 0)
              {
                if (*((void *)&v170 + 1)) {
                  goto LABEL_327;
                }
              }
              else if (HIBYTE(v171))
              {
LABEL_327:
                int v57 = 0;
                goto LABEL_332;
              }
              if (v172) {
                int v57 = nullsub_7;
              }
              else {
                int v57 = 0;
              }
LABEL_332:
              if (v57)
              {
                if (*(_DWORD *)&v165[8] == 127 || !*(void *)v165 && v167 == v166) {
                  uint64_t v58 = 0;
                }
                else {
                  uint64_t v58 = nullsub_20;
                }
                if (v58) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v169);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v169);
                }
              }
              if (v166)
              {
                v167 = v166;
                operator delete(v166);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v169);
              int v160 = *((_DWORD *)this + 288);
              if (*((char *)this + 1183) < 0)
              {
                sub_216778F24(&v161, *((void **)this + 145), *((void *)this + 146));
              }
              else
              {
                long long v161 = *(_OWORD *)((char *)this + 1160);
                uint64_t v162 = *((void *)this + 147);
              }
              uint64_t v59 = *((void *)this + 149);
              uint64_t v163 = *((void *)this + 148);
              uint64_t v164 = v59;
              if (v59) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v60 = *(void *)(a2 + 445);
              *(void *)v156 = *(void *)(a2 + 440);
              *(void *)&v156[5] = v60;
              v157 = 0;
              uint64_t v159 = 0;
              v158 = 0;
              sub_21677EA60(&v157, *(const void **)(a2 + 456), *(void *)(a2 + 464), (uint64_t)(*(void *)(a2 + 464) - *(void *)(a2 + 456)) >> 3);
              if (SHIBYTE(v162) < 0)
              {
                if (*((void *)&v161 + 1)) {
                  goto LABEL_350;
                }
              }
              else if (HIBYTE(v162))
              {
LABEL_350:
                int v61 = 0;
                goto LABEL_355;
              }
              if (v163) {
                int v61 = nullsub_7;
              }
              else {
                int v61 = 0;
              }
LABEL_355:
              if (v61)
              {
                if (*(_DWORD *)&v156[8] == 127 || !*(void *)v156 && v158 == v157) {
                  int v62 = 0;
                }
                else {
                  int v62 = nullsub_20;
                }
                if (v62) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v160);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v160);
                }
              }
              if (v157)
              {
                v158 = v157;
                operator delete(v157);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v160);
              int v151 = *((_DWORD *)this + 300);
              if (*((char *)this + 1231) < 0)
              {
                sub_216778F24(&v152, *((void **)this + 151), *((void *)this + 152));
              }
              else
              {
                long long v152 = *(_OWORD *)((char *)this + 1208);
                uint64_t v153 = *((void *)this + 153);
              }
              uint64_t v63 = *((void *)this + 155);
              uint64_t v154 = *((void *)this + 154);
              uint64_t v155 = v63;
              if (v63) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v64 = *(void *)(a2 + 485);
              *(void *)v147 = *(void *)(a2 + 480);
              *(void *)&v147[5] = v64;
              v148 = 0;
              uint64_t v150 = 0;
              v149 = 0;
              sub_21677EA60(&v148, *(const void **)(a2 + 496), *(void *)(a2 + 504), (uint64_t)(*(void *)(a2 + 504) - *(void *)(a2 + 496)) >> 3);
              if (SHIBYTE(v153) < 0)
              {
                if (*((void *)&v152 + 1)) {
                  goto LABEL_373;
                }
              }
              else if (HIBYTE(v153))
              {
LABEL_373:
                uint64_t v65 = 0;
                goto LABEL_378;
              }
              if (v154) {
                uint64_t v65 = nullsub_7;
              }
              else {
                uint64_t v65 = 0;
              }
LABEL_378:
              if (v65)
              {
                if (*(_DWORD *)&v147[8] == 127 || !*(void *)v147 && v149 == v148) {
                  uint64_t v66 = 0;
                }
                else {
                  uint64_t v66 = nullsub_20;
                }
                if (v66) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v151);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v151);
                }
              }
              if (v148)
              {
                v149 = v148;
                operator delete(v148);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v151);
              int v142 = *((_DWORD *)this + 312);
              if (*((char *)this + 1279) < 0)
              {
                sub_216778F24(&v143, *((void **)this + 157), *((void *)this + 158));
              }
              else
              {
                long long v143 = *(_OWORD *)((char *)this + 1256);
                uint64_t v144 = *((void *)this + 159);
              }
              uint64_t v67 = *((void *)this + 161);
              uint64_t v145 = *((void *)this + 160);
              uint64_t v146 = v67;
              if (v67) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v68 = *(void *)(a2 + 525);
              *(void *)v138 = *(void *)(a2 + 520);
              *(void *)&v138[5] = v68;
              v139 = 0;
              v140 = 0;
              uint64_t v141 = 0;
              sub_21677EA60(&v139, *(const void **)(a2 + 536), *(void *)(a2 + 544), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
              if (SHIBYTE(v144) < 0)
              {
                if (*((void *)&v143 + 1)) {
                  goto LABEL_396;
                }
              }
              else if (HIBYTE(v144))
              {
LABEL_396:
                v69 = 0;
                goto LABEL_401;
              }
              if (v145) {
                v69 = nullsub_7;
              }
              else {
                v69 = 0;
              }
LABEL_401:
              if (v69)
              {
                if (*(_DWORD *)&v138[8] == 127 || !*(void *)v138 && v140 == v139) {
                  uint64_t v70 = 0;
                }
                else {
                  uint64_t v70 = nullsub_13;
                }
                if (v70) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v142);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v142);
                }
              }
              if (v139)
              {
                v140 = v139;
                operator delete(v139);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v142);
              int v133 = *((_DWORD *)this + 324);
              if (*((char *)this + 1327) < 0)
              {
                sub_216778F24(&v134, *((void **)this + 163), *((void *)this + 164));
              }
              else
              {
                long long v134 = *(_OWORD *)((char *)this + 1304);
                uint64_t v135 = *((void *)this + 165);
              }
              uint64_t v71 = *((void *)this + 167);
              uint64_t v136 = *((void *)this + 166);
              uint64_t v137 = v71;
              if (v71) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v72 = *(void *)(a2 + 565);
              *(void *)v129 = *(void *)(a2 + 560);
              *(void *)&v129[5] = v72;
              v130 = 0;
              v131 = 0;
              uint64_t v132 = 0;
              sub_21677EA60(&v130, *(const void **)(a2 + 576), *(void *)(a2 + 584), (uint64_t)(*(void *)(a2 + 584) - *(void *)(a2 + 576)) >> 3);
              if (SHIBYTE(v135) < 0)
              {
                if (*((void *)&v134 + 1)) {
                  goto LABEL_419;
                }
              }
              else if (HIBYTE(v135))
              {
LABEL_419:
                std::string v73 = 0;
                goto LABEL_424;
              }
              if (v136) {
                std::string v73 = nullsub_7;
              }
              else {
                std::string v73 = 0;
              }
LABEL_424:
              if (v73)
              {
                if (*(_DWORD *)&v129[8] == 127 || !*(void *)v129 && v131 == v130) {
                  uint64_t v74 = 0;
                }
                else {
                  uint64_t v74 = nullsub_13;
                }
                if (v74) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v133);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v133);
                }
              }
              if (v130)
              {
                v131 = v130;
                operator delete(v130);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v133);
              int v124 = *((_DWORD *)this + 336);
              if (*((char *)this + 1375) < 0)
              {
                sub_216778F24(&v125, *((void **)this + 169), *((void *)this + 170));
              }
              else
              {
                long long v125 = *(_OWORD *)((char *)this + 1352);
                uint64_t v126 = *((void *)this + 171);
              }
              uint64_t v75 = *((void *)this + 173);
              uint64_t v127 = *((void *)this + 172);
              uint64_t v128 = v75;
              if (v75) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v76 = *(void *)(a2 + 605);
              *(void *)v120 = *(void *)(a2 + 600);
              *(void *)&v120[5] = v76;
              v121 = 0;
              v122 = 0;
              uint64_t v123 = 0;
              sub_21677EA60(&v121, *(const void **)(a2 + 616), *(void *)(a2 + 624), (uint64_t)(*(void *)(a2 + 624) - *(void *)(a2 + 616)) >> 3);
              if (SHIBYTE(v126) < 0)
              {
                if (*((void *)&v125 + 1)) {
                  goto LABEL_442;
                }
              }
              else if (HIBYTE(v126))
              {
LABEL_442:
                std::string v77 = 0;
                goto LABEL_447;
              }
              if (v127) {
                std::string v77 = nullsub_7;
              }
              else {
                std::string v77 = 0;
              }
LABEL_447:
              if (v77)
              {
                if (*(_DWORD *)&v120[8] == 127 || !*(void *)v120 && v122 == v121) {
                  v78 = 0;
                }
                else {
                  v78 = nullsub_13;
                }
                if (v78) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v124);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v124);
                }
              }
              if (v121)
              {
                v122 = v121;
                operator delete(v121);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v124);
              int v115 = *((_DWORD *)this + 348);
              if (*((char *)this + 1423) < 0)
              {
                sub_216778F24(&v116, *((void **)this + 175), *((void *)this + 176));
              }
              else
              {
                long long v116 = *(_OWORD *)((char *)this + 1400);
                uint64_t v117 = *((void *)this + 177);
              }
              uint64_t v79 = *((void *)this + 179);
              uint64_t v118 = *((void *)this + 178);
              uint64_t v119 = v79;
              if (v79) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v80 = *(void *)(a2 + 645);
              *(void *)v111 = *(void *)(a2 + 640);
              *(void *)&v111[5] = v80;
              v112 = 0;
              v113 = 0;
              uint64_t v114 = 0;
              sub_21677EA60(&v112, *(const void **)(a2 + 656), *(void *)(a2 + 664), (uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 3);
              if (SHIBYTE(v117) < 0)
              {
                if (*((void *)&v116 + 1)) {
                  goto LABEL_465;
                }
              }
              else if (HIBYTE(v117))
              {
LABEL_465:
                uint64_t v81 = 0;
                goto LABEL_470;
              }
              if (v118) {
                uint64_t v81 = nullsub_7;
              }
              else {
                uint64_t v81 = 0;
              }
LABEL_470:
              if (v81)
              {
                if (*(_DWORD *)&v111[8] == 127 || !*(void *)v111 && v113 == v112) {
                  std::string v82 = 0;
                }
                else {
                  std::string v82 = nullsub_13;
                }
                if (v82) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v115);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v115);
                }
              }
              if (v112)
              {
                v113 = v112;
                operator delete(v112);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v115);
              int v106 = *((_DWORD *)this + 360);
              if (*((char *)this + 1471) < 0)
              {
                sub_216778F24(&v107, *((void **)this + 181), *((void *)this + 182));
              }
              else
              {
                long long v107 = *(_OWORD *)((char *)this + 1448);
                uint64_t v108 = *((void *)this + 183);
              }
              uint64_t v83 = *((void *)this + 185);
              uint64_t v109 = *((void *)this + 184);
              uint64_t v110 = v83;
              if (v83) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v84 = *(void *)(a2 + 685);
              *(void *)v102 = *(void *)(a2 + 680);
              *(void *)&v102[5] = v84;
              v103 = 0;
              v104 = 0;
              uint64_t v105 = 0;
              sub_21677EA60(&v103, *(const void **)(a2 + 696), *(void *)(a2 + 704), (uint64_t)(*(void *)(a2 + 704) - *(void *)(a2 + 696)) >> 3);
              if (SHIBYTE(v108) < 0)
              {
                if (*((void *)&v107 + 1)) {
                  goto LABEL_488;
                }
              }
              else if (HIBYTE(v108))
              {
LABEL_488:
                uint64_t v85 = 0;
                goto LABEL_493;
              }
              if (v109) {
                uint64_t v85 = nullsub_7;
              }
              else {
                uint64_t v85 = 0;
              }
LABEL_493:
              if (v85)
              {
                if (*(_DWORD *)&v102[8] == 127 || !*(void *)v102 && v104 == v103) {
                  v86 = 0;
                }
                else {
                  v86 = nullsub_13;
                }
                if (v86) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v106);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v106);
                }
              }
              if (v103)
              {
                v104 = v103;
                operator delete(v103);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v106);
              int v97 = *((_DWORD *)this + 372);
              if (*((char *)this + 1519) < 0)
              {
                sub_216778F24(&v98, *((void **)this + 187), *((void *)this + 188));
              }
              else
              {
                long long v98 = *(_OWORD *)((char *)this + 1496);
                uint64_t v99 = *((void *)this + 189);
              }
              uint64_t v87 = *((void *)this + 191);
              uint64_t v100 = *((void *)this + 190);
              uint64_t v101 = v87;
              if (v87) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)uint64_t v93 = *(void *)(a2 + 720);
              *(void *)&v93[5] = *(void *)(a2 + 725);
              v94 = 0;
              int v95 = 0;
              uint64_t v96 = 0;
              sub_21677EA60(&v94, *(const void **)(a2 + 736), *(void *)(a2 + 744), (uint64_t)(*(void *)(a2 + 744) - *(void *)(a2 + 736)) >> 3);
              if (SHIBYTE(v99) < 0)
              {
                if (*((void *)&v98 + 1)) {
                  goto LABEL_511;
                }
              }
              else if (HIBYTE(v99))
              {
LABEL_511:
                uint64_t v88 = 0;
LABEL_516:
                if (v88)
                {
                  if (*(_DWORD *)&v93[8] == 127 || !*(void *)v93 && v95 == v94) {
                    std::string v89 = 0;
                  }
                  else {
                    std::string v89 = nullsub_13;
                  }
                  if (v89) {
                    Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v97);
                  }
                  else {
                    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v97);
                  }
                }
                if (v94)
                {
                  int v95 = v94;
                  operator delete(v94);
                }
                Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v97);
                goto LABEL_528;
              }
              if (v100) {
                uint64_t v88 = nullsub_7;
              }
              else {
                uint64_t v88 = 0;
              }
              goto LABEL_516;
            }
            int v183 = *((_DWORD *)this + 252);
            if (v45 < 0)
            {
              sub_216778F24(&v184, *((void **)this + 127), *((void *)this + 128));
            }
            else
            {
              long long v184 = *(_OWORD *)((char *)this + 1016);
              uint64_t v185 = *((void *)this + 129);
            }
            uint64_t v47 = *((void *)this + 131);
            uint64_t v186 = *((void *)this + 130);
            uint64_t v187 = v47;
            if (v47) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v48 = *(void *)(a2 + 45);
            *(void *)v179 = *v4;
            *(void *)&v179[5] = v48;
            v180 = 0;
            uint64_t v182 = 0;
            v181 = 0;
            sub_21677EA60(&v180, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
            if (SHIBYTE(v185) < 0)
            {
              if (*((void *)&v184 + 1)) {
                goto LABEL_282;
              }
            }
            else if (HIBYTE(v185))
            {
LABEL_282:
              uint64_t v49 = 0;
LABEL_287:
              if (v49)
              {
                if (*(_DWORD *)&v179[8] == 127 || !*(void *)v179 && v181 == v180) {
                  uint64_t v50 = 0;
                }
                else {
                  uint64_t v50 = nullsub_10;
                }
                if (v50) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v183);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v183);
                }
              }
              if (v180)
              {
                v181 = v180;
                operator delete(v180);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v183);
              goto LABEL_299;
            }
            if (v186) {
              uint64_t v49 = nullsub_7;
            }
            else {
              uint64_t v49 = 0;
            }
            goto LABEL_287;
          }
          int v192 = *((_DWORD *)this + 152);
          if (v39 < 0)
          {
            sub_216778F24(&v193, *((void **)this + 77), *((void *)this + 78));
          }
          else
          {
            long long v193 = *(_OWORD *)((char *)this + 616);
            uint64_t v194 = *((void *)this + 79);
          }
          uint64_t v41 = *((void *)this + 81);
          uint64_t v195 = *((void *)this + 80);
          uint64_t v196 = v41;
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v42 = *(void *)(a2 + 181);
          *(void *)v188 = *v10;
          *(void *)&v188[5] = v42;
          v189 = 0;
          uint64_t v191 = 0;
          v190 = 0;
          sub_21677EA60(&v189, *(const void **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
          if (SHIBYTE(v194) < 0)
          {
            if (*((void *)&v193 + 1)) {
              goto LABEL_250;
            }
          }
          else if (HIBYTE(v194))
          {
LABEL_250:
            uint64_t v43 = 0;
LABEL_255:
            if (v43)
            {
              if (*(_DWORD *)&v188[8] == 127 || !*(void *)v188 && v190 == v189) {
                std::string v44 = 0;
              }
              else {
                std::string v44 = nullsub_13;
              }
              if (v44) {
                Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v192);
              }
              else {
                Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v192);
              }
            }
            if (v189)
            {
              v190 = v189;
              operator delete(v189);
            }
            Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v192);
            goto LABEL_267;
          }
          if (v195) {
            uint64_t v43 = nullsub_7;
          }
          else {
            uint64_t v43 = 0;
          }
          goto LABEL_255;
        }
        if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16))
        {
          sub_216778A5C((uint64_t)v247);
          sub_216779180(v248, (uint64_t)"Sample 0 must have valid data for all mesh components", 53);
          std::stringbuf::str();
          sub_216778E70(v246, &v244);
          if (v245 < 0) {
            operator delete((void *)v244);
          }
          exception = __cxa_allocate_exception(0x20uLL);
          v92 = sub_216779038(exception, (uint64_t)v246);
          __cxa_throw(v92, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
        }
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 272);
        v247[0] = *(_DWORD *)(a2 + 80);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320), v247);
        v247[0] = *(_DWORD *)(a2 + 84);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368), v247);
        v247[0] = *(_DWORD *)(a2 + 88);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416), v247);
        v247[0] = *(_DWORD *)(a2 + 92);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464), v247);
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 512);
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 560);
        if (*((char *)this + 1087) < 0)
        {
          if (*((void *)this + 134)) {
            goto LABEL_67;
          }
        }
        else if (*((unsigned char *)this + 1087))
        {
LABEL_67:
          int v12 = 0;
          goto LABEL_105;
        }
        if (*((void *)this + 136)) {
          int v12 = nullsub_6;
        }
        else {
          int v12 = 0;
        }
LABEL_105:
        if (v12)
        {
          v247[0] = *(_DWORD *)(a2 + 392);
          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056), v247);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1104);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1152);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1200);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1248);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1296);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1344);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1392);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1440);
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1488);
        }
        if (*((char *)this + 639) < 0)
        {
          if (*((void *)this + 78)) {
            goto LABEL_109;
          }
        }
        else if (*((unsigned char *)this + 639))
        {
LABEL_109:
          uint64_t v19 = 0;
          goto LABEL_114;
        }
        if (*((void *)this + 80)) {
          uint64_t v19 = nullsub_7;
        }
        else {
          uint64_t v19 = 0;
        }
LABEL_114:
        if (v19) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 608);
        }
        if (*((char *)this + 1039) < 0)
        {
          if (*((void *)this + 128)) {
            goto LABEL_118;
          }
        }
        else if (*((unsigned char *)this + 1039))
        {
LABEL_118:
          uint64_t v20 = 0;
          goto LABEL_123;
        }
        if (*((void *)this + 130)) {
          uint64_t v20 = nullsub_7;
        }
        else {
          uint64_t v20 = 0;
        }
LABEL_123:
        if (v20) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1008);
        }
        if (sub_2167C5D84((uint64_t)this + 832)) {
          uint64_t v21 = nullsub_16;
        }
        else {
          uint64_t v21 = 0;
        }
        if (v21) {
          sub_2167C3654((uint64_t)this + 832, a2 + 304);
        }
        if (sub_2167C5D84((uint64_t)this + 656)) {
          uint64_t v22 = nullsub_17;
        }
        else {
          uint64_t v22 = 0;
        }
        if (v22) {
          sub_2167C3A2C((uint64_t)this + 656, a2 + 216);
        }
        if (*(double *)(a2 + 792) < *(double *)(a2 + 768)
          || *(double *)(a2 + 800) < *(double *)(a2 + 776)
          || *(double *)(a2 + 808) < *(double *)(a2 + 784))
        {
          sub_2167C354C((void *)a2, (uint64_t)v247);
          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), v247);
LABEL_540:
          ++*((void *)this + 32);
          return;
        }
LABEL_531:
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), (const void *)(a2 + 768));
        goto LABEL_540;
      }
      if (*((char *)this + 639) < 0)
      {
        if (!*((void *)this + 78)) {
          goto LABEL_50;
        }
      }
      else if (!*((unsigned char *)this + 639))
      {
LABEL_50:
        if (*((void *)this + 80)) {
          goto LABEL_52;
        }
      }
      Alembic::AbcGeom::v12::ONuPatchSchema::createPositionWeightsProperty(this);
      goto LABEL_52;
    }
LABEL_17:
    Alembic::AbcGeom::v12::ONuPatchSchema::createVelocityProperty(this);
    goto LABEL_18;
  }

  Alembic::AbcGeom::v12::ONuPatchSchema::selectiveSet(this, a2);
}

void sub_2167D58B0(void *a1, int a2)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&STACK[0x318]);
  uint64_t v5 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v2 - 80, (uint64_t)v5);
  }
  else {
    sub_21679F9F4(v2 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D5818);
}

void sub_2167D5BF8(_Unwind_Exception *a1)
{
}

BOOL sub_2167D5C18(uint64_t a1)
{
  BOOL result = 0;
  if (!*(void *)a1)
  {
    if (*(_DWORD *)(a1 + 312) == 127 || !*(void *)(a1 + 304) && *(void *)(a1 + 328) == *(void *)(a1 + 320)
       ? 0
       : nullsub_8)
    {
      return 1;
    }
    uint64_t v3 = *(_DWORD *)(a1 + 224) == 127 || !*(void *)(a1 + 216) && *(void *)(a1 + 240) == *(void *)(a1 + 232)
       ? 0
       : nullsub_9;
    if (v3 || *(void *)(a1 + 40)) {
      return 1;
    }
  }
  return result;
}

void Alembic::AbcGeom::v12::ONuPatchSchema::selectiveSet(Alembic::AbcGeom::v12::ONuPatchSchema *this, uint64_t a2)
{
  v258 = (char *)this + 8;
  v259 = "ONuPatchSchema::selectiveSet()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_19;
  }
  if (v4)
  {
    if (*((char *)this + 303) < 0)
    {
      if (!*((void *)this + 36)) {
        goto LABEL_11;
      }
    }
    else if (!*((unsigned char *)this + 303))
    {
LABEL_11:
      if (*((void *)this + 38)) {
        goto LABEL_13;
      }
    }
    Alembic::AbcGeom::v12::ONuPatchSchema::createPositionProperties(this);
  }
LABEL_13:
  if (!sub_2167D9C58(a2)) {
    goto LABEL_20;
  }
  if (*((char *)this + 351) < 0)
  {
    if (!*((void *)this + 42)) {
      goto LABEL_18;
    }
  }
  else if (!*((unsigned char *)this + 351))
  {
LABEL_18:
    if (*((void *)this + 44)) {
      goto LABEL_20;
    }
  }
  Alembic::AbcGeom::v12::ONuPatchSchema::createKnotProperties(this);
LABEL_20:
  int v5 = *((char *)this + 303);
  if (v5 < 0)
  {
    if (*((void *)this + 36)) {
      goto LABEL_62;
    }
  }
  else if (*((unsigned char *)this + 303))
  {
    goto LABEL_62;
  }
  if (*((void *)this + 38)) {
    uint64_t v6 = nullsub_7;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    int v253 = *((_DWORD *)this + 68);
    if (v5 < 0)
    {
      sub_216778F24(&v254, *((void **)this + 35), *((void *)this + 36));
    }
    else
    {
      long long v254 = *(_OWORD *)((char *)this + 280);
      uint64_t v255 = *((void *)this + 37);
    }
    uint64_t v7 = *((void *)this + 39);
    uint64_t v256 = *((void *)this + 38);
    uint64_t v257 = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a2 + 5);
    *(void *)v249 = *(void *)a2;
    *(void *)&v249[5] = v8;
    v250 = 0;
    v251 = 0;
    uint64_t v252 = 0;
    sub_21677EA60(&v250, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    if (SHIBYTE(v255) < 0)
    {
      if (*((void *)&v254 + 1)) {
        goto LABEL_35;
      }
    }
    else if (HIBYTE(v255))
    {
LABEL_35:
      uint64_t v9 = 0;
LABEL_40:
      if (v9)
      {
        if (*(_DWORD *)&v249[8] == 127 || !*(void *)v249 && v251 == v250) {
          char v10 = 0;
        }
        else {
          char v10 = nullsub_19;
        }
        if (v10) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v253);
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v253);
        }
      }
      if (v250)
      {
        v251 = v250;
        operator delete(v250);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v253);
      if (*(double *)(a2 + 792) <= *(double *)(a2 + 768)
        || *(double *)(a2 + 800) <= *(double *)(a2 + 776)
        || *(double *)(a2 + 808) <= *(double *)(a2 + 784))
      {
        if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = nullsub_19;
        }
        if (v11)
        {
          sub_2167C354C((void *)a2, (uint64_t)v248);
          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), v248);
        }
      }
      else
      {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56), (const void *)(a2 + 768));
      }
      goto LABEL_62;
    }
    if (v256) {
      uint64_t v9 = nullsub_7;
    }
    else {
      uint64_t v9 = 0;
    }
    goto LABEL_40;
  }
LABEL_62:
  int v12 = *((char *)this + 351);
  if (v12 < 0)
  {
    if (*((void *)this + 42)) {
      goto LABEL_169;
    }
  }
  else if (*((unsigned char *)this + 351))
  {
    goto LABEL_169;
  }
  if (*((void *)this + 44)) {
    uint64_t v13 = nullsub_6;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_169;
  }
  int v243 = *((_DWORD *)this + 80);
  if (v12 < 0)
  {
    sub_216778F24(&v244, *((void **)this + 41), *((void *)this + 42));
  }
  else
  {
    long long v244 = *(_OWORD *)((char *)this + 328);
    uint64_t v245 = *((void *)this + 43);
  }
  uint64_t v14 = *((void *)this + 45);
  uint64_t v246 = *((void *)this + 44);
  uint64_t v247 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  int v15 = *(_DWORD *)(a2 + 80);
  v248[0] = v15;
  if (SHIBYTE(v245) < 0)
  {
    if (*((void *)&v244 + 1)) {
      goto LABEL_83;
    }
  }
  else if (HIBYTE(v245))
  {
    goto LABEL_83;
  }
  if (v246)
  {
    if (v15 == -536870912) {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v243);
    }
    else {
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v243, v248);
    }
  }
LABEL_83:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v243);
  int v238 = *((_DWORD *)this + 92);
  if (*((char *)this + 399) < 0)
  {
    sub_216778F24(&v239, *((void **)this + 47), *((void *)this + 48));
  }
  else
  {
    long long v239 = *(_OWORD *)((char *)this + 376);
    uint64_t v240 = *((void *)this + 49);
  }
  uint64_t v16 = *((void *)this + 51);
  uint64_t v241 = *((void *)this + 50);
  uint64_t v242 = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  int v17 = *(_DWORD *)(a2 + 84);
  v248[0] = v17;
  if (SHIBYTE(v240) < 0)
  {
    if (*((void *)&v239 + 1)) {
      goto LABEL_96;
    }
  }
  else if (HIBYTE(v240))
  {
    goto LABEL_96;
  }
  if (v241)
  {
    if (v17 == -536870912) {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v238);
    }
    else {
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v238, v248);
    }
  }
LABEL_96:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v238);
  int v233 = *((_DWORD *)this + 104);
  if (*((char *)this + 447) < 0)
  {
    sub_216778F24(&v234, *((void **)this + 53), *((void *)this + 54));
  }
  else
  {
    long long v234 = *(_OWORD *)((char *)this + 424);
    uint64_t v235 = *((void *)this + 55);
  }
  uint64_t v18 = *((void *)this + 57);
  uint64_t v236 = *((void *)this + 56);
  uint64_t v237 = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  int v19 = *(_DWORD *)(a2 + 88);
  v248[0] = v19;
  if (SHIBYTE(v235) < 0)
  {
    if (*((void *)&v234 + 1)) {
      goto LABEL_109;
    }
  }
  else if (HIBYTE(v235))
  {
    goto LABEL_109;
  }
  if (v236)
  {
    if (v19 == -536870912) {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v233);
    }
    else {
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v233, v248);
    }
  }
LABEL_109:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v233);
  int v228 = *((_DWORD *)this + 116);
  if (*((char *)this + 495) < 0)
  {
    sub_216778F24(&v229, *((void **)this + 59), *((void *)this + 60));
  }
  else
  {
    long long v229 = *(_OWORD *)((char *)this + 472);
    uint64_t v230 = *((void *)this + 61);
  }
  uint64_t v20 = *((void *)this + 63);
  uint64_t v231 = *((void *)this + 62);
  uint64_t v232 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  int v21 = *(_DWORD *)(a2 + 92);
  v248[0] = v21;
  if (SHIBYTE(v230) < 0)
  {
    if (*((void *)&v229 + 1)) {
      goto LABEL_122;
    }
  }
  else if (HIBYTE(v230))
  {
    goto LABEL_122;
  }
  if (v231)
  {
    if (v21 == -536870912) {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v228);
    }
    else {
      Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v228, v248);
    }
  }
LABEL_122:
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v228);
  int v223 = *((_DWORD *)this + 128);
  if (*((char *)this + 543) < 0)
  {
    sub_216778F24(&v224, *((void **)this + 65), *((void *)this + 66));
  }
  else
  {
    long long v224 = *(_OWORD *)((char *)this + 520);
    uint64_t v225 = *((void *)this + 67);
  }
  uint64_t v22 = *((void *)this + 69);
  uint64_t v226 = *((void *)this + 68);
  uint64_t v227 = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *(void *)(a2 + 101);
  *(void *)uint64_t v219 = *(void *)(a2 + 96);
  *(void *)&v219[5] = v23;
  long long __p = 0;
  uint64_t v222 = 0;
  long long v221 = 0;
  sub_21677EA60(&__p, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  if (SHIBYTE(v225) < 0)
  {
    if (*((void *)&v224 + 1)) {
      goto LABEL_129;
    }
  }
  else if (HIBYTE(v225))
  {
LABEL_129:
    int v24 = 0;
    goto LABEL_134;
  }
  if (v226) {
    int v24 = nullsub_7;
  }
  else {
    int v24 = 0;
  }
LABEL_134:
  if (v24)
  {
    if (*(_DWORD *)&v219[8] == 127 || !*(void *)v219 && v221 == __p) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = nullsub_13;
    }
    if (v25) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v223);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v223);
    }
  }
  if (__p)
  {
    long long v221 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v223);
  int v214 = *((_DWORD *)this + 140);
  if (*((char *)this + 591) < 0)
  {
    sub_216778F24(&v215, *((void **)this + 71), *((void *)this + 72));
  }
  else
  {
    long long v215 = *(_OWORD *)((char *)this + 568);
    uint64_t v216 = *((void *)this + 73);
  }
  uint64_t v26 = *((void *)this + 75);
  uint64_t v217 = *((void *)this + 74);
  uint64_t v218 = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *(void *)(a2 + 141);
  *(void *)int v210 = *(void *)(a2 + 136);
  *(void *)&v210[5] = v27;
  long long v211 = 0;
  uint64_t v213 = 0;
  uint64_t v212 = 0;
  sub_21677EA60(&v211, *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
  if (SHIBYTE(v216) < 0)
  {
    if (*((void *)&v215 + 1)) {
      goto LABEL_152;
    }
LABEL_154:
    if (v217) {
      int v28 = nullsub_7;
    }
    else {
      int v28 = 0;
    }
    goto LABEL_157;
  }
  if (!HIBYTE(v216)) {
    goto LABEL_154;
  }
LABEL_152:
  int v28 = 0;
LABEL_157:
  if (v28)
  {
    if (*(_DWORD *)&v210[8] == 127 || !*(void *)v210 && v212 == v211) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = nullsub_13;
    }
    if (v29) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v214);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v214);
    }
  }
  if (v211)
  {
    uint64_t v212 = v211;
    operator delete(v211);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v214);
LABEL_169:
  uint64_t v30 = (void *)(a2 + 40);
  if (*(_DWORD *)(a2 + 48) == 127 || !*v30 && *(void *)(a2 + 64) == *(void *)(a2 + 56)) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = nullsub_10;
  }
  if (v31)
  {
    if (*((char *)this + 1039) < 0)
    {
      if (!*((void *)this + 128)) {
        goto LABEL_179;
      }
    }
    else if (!*((unsigned char *)this + 1039))
    {
LABEL_179:
      if (*((void *)this + 130)) {
        goto LABEL_181;
      }
    }
    Alembic::AbcGeom::v12::ONuPatchSchema::createVelocityProperty(this);
  }
LABEL_181:
  int v32 = *((unsigned __int8 *)this + 1039);
  if (*((char *)this + 1039) < 0)
  {
    if (*((void *)this + 128)) {
      goto LABEL_218;
    }
  }
  else if (*((unsigned char *)this + 1039))
  {
    char v33 = 0;
LABEL_219:
    int v39 = 0;
    goto LABEL_220;
  }
  if (*((void *)this + 130)) {
    uint64_t v34 = nullsub_7;
  }
  else {
    uint64_t v34 = 0;
  }
  if (!v34) {
    goto LABEL_213;
  }
  int v205 = *((_DWORD *)this + 252);
  if ((v32 & 0x80) != 0)
  {
    sub_216778F24(&v206, *((void **)this + 127), *((void *)this + 128));
  }
  else
  {
    long long v206 = *(_OWORD *)((char *)this + 1016);
    uint64_t v207 = *((void *)this + 129);
  }
  uint64_t v35 = *((void *)this + 131);
  uint64_t v208 = *((void *)this + 130);
  uint64_t v209 = v35;
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = *(void *)(a2 + 45);
  *(void *)int v201 = *v30;
  *(void *)&v201[5] = v36;
  long long v202 = 0;
  uint64_t v204 = 0;
  uint64_t v203 = 0;
  sub_21677EA60(&v202, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  if (SHIBYTE(v207) < 0)
  {
    if (*((void *)&v206 + 1)) {
      goto LABEL_196;
    }
LABEL_198:
    if (v208) {
      int v37 = nullsub_7;
    }
    else {
      int v37 = 0;
    }
    goto LABEL_201;
  }
  if (!HIBYTE(v207)) {
    goto LABEL_198;
  }
LABEL_196:
  int v37 = 0;
LABEL_201:
  if (v37)
  {
    if (*(_DWORD *)&v201[8] == 127 || !*(void *)v201 && v203 == v202) {
      int v38 = 0;
    }
    else {
      int v38 = nullsub_10;
    }
    if (v38) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v205);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v205);
    }
  }
  if (v202)
  {
    uint64_t v203 = v202;
    operator delete(v202);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v205);
  int v32 = *((unsigned __int8 *)this + 1039);
LABEL_213:
  if ((v32 & 0x80) != 0)
  {
LABEL_218:
    char v33 = 1;
    if (*((void *)this + 128)) {
      goto LABEL_219;
    }
    goto LABEL_215;
  }
  char v33 = 0;
  if (v32) {
    goto LABEL_219;
  }
LABEL_215:
  if (*((void *)this + 130)) {
    int v39 = nullsub_7;
  }
  else {
    int v39 = 0;
  }
LABEL_220:
  if (!v39) {
    goto LABEL_245;
  }
  int v196 = *((_DWORD *)this + 252);
  if (v33)
  {
    sub_216778F24(&v197, *((void **)this + 127), *((void *)this + 128));
  }
  else
  {
    long long v197 = *(_OWORD *)((char *)this + 1016);
    uint64_t v198 = *((void *)this + 129);
  }
  uint64_t v40 = *((void *)this + 131);
  uint64_t v199 = *((void *)this + 130);
  uint64_t v200 = v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v41 = *(void *)(a2 + 45);
  *(void *)int v192 = *v30;
  *(void *)&v192[5] = v41;
  long long v193 = 0;
  uint64_t v195 = 0;
  uint64_t v194 = 0;
  sub_21677EA60(&v193, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  if (SHIBYTE(v198) < 0)
  {
    if (*((void *)&v197 + 1)) {
      goto LABEL_228;
    }
LABEL_230:
    if (v199) {
      uint64_t v42 = nullsub_7;
    }
    else {
      uint64_t v42 = 0;
    }
    goto LABEL_233;
  }
  if (!HIBYTE(v198)) {
    goto LABEL_230;
  }
LABEL_228:
  uint64_t v42 = 0;
LABEL_233:
  if (v42)
  {
    if (*(_DWORD *)&v192[8] == 127 || !*(void *)v192 && v194 == v193) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = nullsub_10;
    }
    if (v43) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v196);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v196);
    }
  }
  if (v193)
  {
    uint64_t v194 = v193;
    operator delete(v193);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v196);
LABEL_245:
  if (*(_DWORD *)(a2 + 312) == 127 || !*(void *)(a2 + 304) && *(void *)(a2 + 328) == *(void *)(a2 + 320)) {
    std::string v44 = 0;
  }
  else {
    std::string v44 = nullsub_8;
  }
  if (v44) {
    int v45 = nullsub_11;
  }
  else {
    int v45 = 0;
  }
  if (v45 && (sub_2167C5D84((uint64_t)this + 832) & 1) == 0) {
    Alembic::AbcGeom::v12::ONuPatchSchema::createUVsProperty(this, a2);
  }
  if (sub_2167C5D84((uint64_t)this + 832)) {
    uint64_t v46 = nullsub_16;
  }
  else {
    uint64_t v46 = 0;
  }
  if (v46) {
    sub_2167C3654((uint64_t)this + 832, a2 + 304);
  }
  if (*(_DWORD *)(a2 + 224) == 127 || !*(void *)(a2 + 216) && *(void *)(a2 + 240) == *(void *)(a2 + 232)) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = nullsub_9;
  }
  if (v47) {
    uint64_t v48 = nullsub_12;
  }
  else {
    uint64_t v48 = 0;
  }
  if (v48 && (sub_2167C5D84((uint64_t)this + 656) & 1) == 0) {
    Alembic::AbcGeom::v12::ONuPatchSchema::createNormalsProperty(this, a2);
  }
  if (sub_2167C5D84((uint64_t)this + 656)) {
    uint64_t v49 = nullsub_17;
  }
  else {
    uint64_t v49 = 0;
  }
  if (v49) {
    sub_2167C3A2C((uint64_t)this + 656, a2 + 216);
  }
  uint64_t v50 = (void *)(a2 + 176);
  if (*(_DWORD *)(a2 + 184) == 127 || !*v50 && *(void *)(a2 + 200) == *(void *)(a2 + 192)) {
    int v51 = 0;
  }
  else {
    int v51 = nullsub_13;
  }
  if (v51)
  {
    if (*((char *)this + 639) < 0)
    {
      if (!*((void *)this + 78)) {
        goto LABEL_287;
      }
    }
    else if (!*((unsigned char *)this + 639))
    {
LABEL_287:
      if (*((void *)this + 80)) {
        goto LABEL_289;
      }
    }
    Alembic::AbcGeom::v12::ONuPatchSchema::createPositionWeightsProperty(this);
  }
LABEL_289:
  int v52 = *((char *)this + 639);
  if (v52 < 0)
  {
    if (*((void *)this + 78)) {
      goto LABEL_321;
    }
  }
  else if (*((unsigned char *)this + 639))
  {
    goto LABEL_321;
  }
  if (*((void *)this + 80)) {
    uint64_t v53 = nullsub_7;
  }
  else {
    uint64_t v53 = 0;
  }
  if (v53)
  {
    int v187 = *((_DWORD *)this + 152);
    if (v52 < 0)
    {
      sub_216778F24(&v188, *((void **)this + 77), *((void *)this + 78));
    }
    else
    {
      long long v188 = *(_OWORD *)((char *)this + 616);
      uint64_t v189 = *((void *)this + 79);
    }
    uint64_t v54 = *((void *)this + 81);
    uint64_t v190 = *((void *)this + 80);
    uint64_t v191 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v55 = *(void *)(a2 + 181);
    *(void *)int v183 = *v50;
    *(void *)&v183[5] = v55;
    long long v184 = 0;
    uint64_t v186 = 0;
    uint64_t v185 = 0;
    sub_21677EA60(&v184, *(const void **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
    if (SHIBYTE(v189) < 0)
    {
      if (*((void *)&v188 + 1)) {
        goto LABEL_304;
      }
    }
    else if (HIBYTE(v189))
    {
LABEL_304:
      uint64_t v56 = 0;
LABEL_309:
      if (v56)
      {
        if (*(_DWORD *)&v183[8] == 127 || !*(void *)v183 && v185 == v184) {
          int v57 = 0;
        }
        else {
          int v57 = nullsub_13;
        }
        if (v57) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v187);
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v187);
        }
      }
      if (v184)
      {
        uint64_t v185 = v184;
        operator delete(v184);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v187);
      goto LABEL_321;
    }
    if (v190) {
      uint64_t v56 = nullsub_7;
    }
    else {
      uint64_t v56 = 0;
    }
    goto LABEL_309;
  }
LABEL_321:
  if (!*(unsigned char *)(a2 + 760)) {
    goto LABEL_328;
  }
  if (*((char *)this + 1087) < 0)
  {
    if (!*((void *)this + 134)) {
      goto LABEL_326;
    }
  }
  else if (!*((unsigned char *)this + 1087))
  {
LABEL_326:
    if (*((void *)this + 136)) {
      goto LABEL_328;
    }
  }
  Alembic::AbcGeom::v12::ONuPatchSchema::createTrimPropreties(this);
LABEL_328:
  int v58 = *((char *)this + 1087);
  if (v58 < 0)
  {
    if (*((void *)this + 134)) {
      goto LABEL_557;
    }
  }
  else if (*((unsigned char *)this + 1087))
  {
    goto LABEL_557;
  }
  if (*((void *)this + 136)) {
    uint64_t v59 = nullsub_6;
  }
  else {
    uint64_t v59 = 0;
  }
  if (v59)
  {
    int v178 = *((_DWORD *)this + 264);
    if (v58 < 0)
    {
      sub_216778F24(&v179, *((void **)this + 133), *((void *)this + 134));
    }
    else
    {
      long long v179 = *(_OWORD *)((char *)this + 1064);
      uint64_t v180 = *((void *)this + 135);
    }
    uint64_t v60 = *((void *)this + 137);
    uint64_t v181 = *((void *)this + 136);
    uint64_t v182 = v60;
    if (v60) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
    }
    int v61 = *(_DWORD *)(a2 + 392);
    v248[0] = v61;
    if (SHIBYTE(v180) < 0)
    {
      if (*((void *)&v179 + 1)) {
        goto LABEL_349;
      }
    }
    else if (HIBYTE(v180))
    {
      goto LABEL_349;
    }
    if (v181)
    {
      if (v61 == -536870912) {
        Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v178);
      }
      else {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v178, v248);
      }
    }
LABEL_349:
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v178);
    int v173 = *((_DWORD *)this + 276);
    if (*((char *)this + 1135) < 0)
    {
      sub_216778F24(&v174, *((void **)this + 139), *((void *)this + 140));
    }
    else
    {
      long long v174 = *(_OWORD *)((char *)this + 1112);
      uint64_t v175 = *((void *)this + 141);
    }
    uint64_t v62 = *((void *)this + 143);
    uint64_t v176 = *((void *)this + 142);
    uint64_t v177 = v62;
    if (v62) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v63 = *(void *)(a2 + 405);
    *(void *)int v169 = *(void *)(a2 + 400);
    *(void *)&v169[5] = v63;
    long long v170 = 0;
    uint64_t v172 = 0;
    uint64_t v171 = 0;
    sub_21677EA60(&v170, *(const void **)(a2 + 416), *(void *)(a2 + 424), (uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 3);
    if (SHIBYTE(v175) < 0)
    {
      if (*((void *)&v174 + 1)) {
        goto LABEL_356;
      }
    }
    else if (HIBYTE(v175))
    {
LABEL_356:
      uint64_t v64 = 0;
      goto LABEL_361;
    }
    if (v176) {
      uint64_t v64 = nullsub_7;
    }
    else {
      uint64_t v64 = 0;
    }
LABEL_361:
    if (v64)
    {
      if (*(_DWORD *)&v169[8] == 127 || !*(void *)v169 && v171 == v170) {
        uint64_t v65 = 0;
      }
      else {
        uint64_t v65 = nullsub_20;
      }
      if (v65) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v173);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v173);
      }
    }
    if (v170)
    {
      uint64_t v171 = v170;
      operator delete(v170);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v173);
    int v164 = *((_DWORD *)this + 288);
    if (*((char *)this + 1183) < 0)
    {
      sub_216778F24(&v165, *((void **)this + 145), *((void *)this + 146));
    }
    else
    {
      long long v165 = *(_OWORD *)((char *)this + 1160);
      uint64_t v166 = *((void *)this + 147);
    }
    uint64_t v66 = *((void *)this + 149);
    uint64_t v167 = *((void *)this + 148);
    uint64_t v168 = v66;
    if (v66) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v67 = *(void *)(a2 + 445);
    *(void *)int v160 = *(void *)(a2 + 440);
    *(void *)&v160[5] = v67;
    long long v161 = 0;
    uint64_t v163 = 0;
    uint64_t v162 = 0;
    sub_21677EA60(&v161, *(const void **)(a2 + 456), *(void *)(a2 + 464), (uint64_t)(*(void *)(a2 + 464) - *(void *)(a2 + 456)) >> 3);
    if (SHIBYTE(v166) < 0)
    {
      if (*((void *)&v165 + 1)) {
        goto LABEL_379;
      }
    }
    else if (HIBYTE(v166))
    {
LABEL_379:
      uint64_t v68 = 0;
      goto LABEL_384;
    }
    if (v167) {
      uint64_t v68 = nullsub_7;
    }
    else {
      uint64_t v68 = 0;
    }
LABEL_384:
    if (v68)
    {
      if (*(_DWORD *)&v160[8] == 127 || !*(void *)v160 && v162 == v161) {
        v69 = 0;
      }
      else {
        v69 = nullsub_20;
      }
      if (v69) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v164);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v164);
      }
    }
    if (v161)
    {
      uint64_t v162 = v161;
      operator delete(v161);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v164);
    int v155 = *((_DWORD *)this + 300);
    if (*((char *)this + 1231) < 0)
    {
      sub_216778F24(&v156, *((void **)this + 151), *((void *)this + 152));
    }
    else
    {
      long long v156 = *(_OWORD *)((char *)this + 1208);
      uint64_t v157 = *((void *)this + 153);
    }
    uint64_t v70 = *((void *)this + 155);
    uint64_t v158 = *((void *)this + 154);
    uint64_t v159 = v70;
    if (v70) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v71 = *(void *)(a2 + 485);
    *(void *)int v151 = *(void *)(a2 + 480);
    *(void *)&v151[5] = v71;
    long long v152 = 0;
    uint64_t v154 = 0;
    uint64_t v153 = 0;
    sub_21677EA60(&v152, *(const void **)(a2 + 496), *(void *)(a2 + 504), (uint64_t)(*(void *)(a2 + 504) - *(void *)(a2 + 496)) >> 3);
    if (SHIBYTE(v157) < 0)
    {
      if (*((void *)&v156 + 1)) {
        goto LABEL_402;
      }
    }
    else if (HIBYTE(v157))
    {
LABEL_402:
      uint64_t v72 = 0;
      goto LABEL_407;
    }
    if (v158) {
      uint64_t v72 = nullsub_7;
    }
    else {
      uint64_t v72 = 0;
    }
LABEL_407:
    if (v72)
    {
      if (*(_DWORD *)&v151[8] == 127 || !*(void *)v151 && v153 == v152) {
        std::string v73 = 0;
      }
      else {
        std::string v73 = nullsub_20;
      }
      if (v73) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v155);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v155);
      }
    }
    if (v152)
    {
      uint64_t v153 = v152;
      operator delete(v152);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v155);
    int v146 = *((_DWORD *)this + 312);
    if (*((char *)this + 1279) < 0)
    {
      sub_216778F24(&v147, *((void **)this + 157), *((void *)this + 158));
    }
    else
    {
      long long v147 = *(_OWORD *)((char *)this + 1256);
      uint64_t v148 = *((void *)this + 159);
    }
    uint64_t v74 = *((void *)this + 161);
    uint64_t v149 = *((void *)this + 160);
    uint64_t v150 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v75 = *(void *)(a2 + 525);
    *(void *)int v142 = *(void *)(a2 + 520);
    *(void *)&v142[5] = v75;
    long long v143 = 0;
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    sub_21677EA60(&v143, *(const void **)(a2 + 536), *(void *)(a2 + 544), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
    if (SHIBYTE(v148) < 0)
    {
      if (*((void *)&v147 + 1)) {
        goto LABEL_425;
      }
    }
    else if (HIBYTE(v148))
    {
LABEL_425:
      uint64_t v76 = 0;
      goto LABEL_430;
    }
    if (v149) {
      uint64_t v76 = nullsub_7;
    }
    else {
      uint64_t v76 = 0;
    }
LABEL_430:
    if (v76)
    {
      if (*(_DWORD *)&v142[8] == 127 || !*(void *)v142 && v144 == v143) {
        std::string v77 = 0;
      }
      else {
        std::string v77 = nullsub_13;
      }
      if (v77) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v146);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v146);
      }
    }
    if (v143)
    {
      uint64_t v144 = v143;
      operator delete(v143);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v146);
    int v137 = *((_DWORD *)this + 324);
    if (*((char *)this + 1327) < 0)
    {
      sub_216778F24(&v138, *((void **)this + 163), *((void *)this + 164));
    }
    else
    {
      long long v138 = *(_OWORD *)((char *)this + 1304);
      uint64_t v139 = *((void *)this + 165);
    }
    uint64_t v78 = *((void *)this + 167);
    uint64_t v140 = *((void *)this + 166);
    uint64_t v141 = v78;
    if (v78) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v79 = *(void *)(a2 + 565);
    *(void *)int v133 = *(void *)(a2 + 560);
    *(void *)&v133[5] = v79;
    long long v134 = 0;
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    sub_21677EA60(&v134, *(const void **)(a2 + 576), *(void *)(a2 + 584), (uint64_t)(*(void *)(a2 + 584) - *(void *)(a2 + 576)) >> 3);
    if (SHIBYTE(v139) < 0)
    {
      if (*((void *)&v138 + 1)) {
        goto LABEL_448;
      }
    }
    else if (HIBYTE(v139))
    {
LABEL_448:
      uint64_t v80 = 0;
      goto LABEL_453;
    }
    if (v140) {
      uint64_t v80 = nullsub_7;
    }
    else {
      uint64_t v80 = 0;
    }
LABEL_453:
    if (v80)
    {
      if (*(_DWORD *)&v133[8] == 127 || !*(void *)v133 && v135 == v134) {
        uint64_t v81 = 0;
      }
      else {
        uint64_t v81 = nullsub_13;
      }
      if (v81) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v137);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v137);
      }
    }
    if (v134)
    {
      uint64_t v135 = v134;
      operator delete(v134);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v137);
    int v128 = *((_DWORD *)this + 336);
    if (*((char *)this + 1375) < 0)
    {
      sub_216778F24(&v129, *((void **)this + 169), *((void *)this + 170));
    }
    else
    {
      long long v129 = *(_OWORD *)((char *)this + 1352);
      uint64_t v130 = *((void *)this + 171);
    }
    uint64_t v82 = *((void *)this + 173);
    uint64_t v131 = *((void *)this + 172);
    uint64_t v132 = v82;
    if (v82) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v83 = *(void *)(a2 + 605);
    *(void *)int v124 = *(void *)(a2 + 600);
    *(void *)&v124[5] = v83;
    long long v125 = 0;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    sub_21677EA60(&v125, *(const void **)(a2 + 616), *(void *)(a2 + 624), (uint64_t)(*(void *)(a2 + 624) - *(void *)(a2 + 616)) >> 3);
    if (SHIBYTE(v130) < 0)
    {
      if (*((void *)&v129 + 1)) {
        goto LABEL_471;
      }
    }
    else if (HIBYTE(v130))
    {
LABEL_471:
      uint64_t v84 = 0;
      goto LABEL_476;
    }
    if (v131) {
      uint64_t v84 = nullsub_7;
    }
    else {
      uint64_t v84 = 0;
    }
LABEL_476:
    if (v84)
    {
      if (*(_DWORD *)&v124[8] == 127 || !*(void *)v124 && v126 == v125) {
        uint64_t v85 = 0;
      }
      else {
        uint64_t v85 = nullsub_13;
      }
      if (v85) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v128);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v128);
      }
    }
    if (v125)
    {
      uint64_t v126 = v125;
      operator delete(v125);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v128);
    int v119 = *((_DWORD *)this + 348);
    if (*((char *)this + 1423) < 0)
    {
      sub_216778F24(&v120, *((void **)this + 175), *((void *)this + 176));
    }
    else
    {
      long long v120 = *(_OWORD *)((char *)this + 1400);
      uint64_t v121 = *((void *)this + 177);
    }
    uint64_t v86 = *((void *)this + 179);
    uint64_t v122 = *((void *)this + 178);
    uint64_t v123 = v86;
    if (v86) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v87 = *(void *)(a2 + 645);
    *(void *)int v115 = *(void *)(a2 + 640);
    *(void *)&v115[5] = v87;
    long long v116 = 0;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    sub_21677EA60(&v116, *(const void **)(a2 + 656), *(void *)(a2 + 664), (uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 3);
    if (SHIBYTE(v121) < 0)
    {
      if (*((void *)&v120 + 1)) {
        goto LABEL_494;
      }
    }
    else if (HIBYTE(v121))
    {
LABEL_494:
      uint64_t v88 = 0;
      goto LABEL_499;
    }
    if (v122) {
      uint64_t v88 = nullsub_7;
    }
    else {
      uint64_t v88 = 0;
    }
LABEL_499:
    if (v88)
    {
      if (*(_DWORD *)&v115[8] == 127 || !*(void *)v115 && v117 == v116) {
        std::string v89 = 0;
      }
      else {
        std::string v89 = nullsub_13;
      }
      if (v89) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v119);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v119);
      }
    }
    if (v116)
    {
      uint64_t v117 = v116;
      operator delete(v116);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v119);
    int v110 = *((_DWORD *)this + 360);
    if (*((char *)this + 1471) < 0)
    {
      sub_216778F24(&v111, *((void **)this + 181), *((void *)this + 182));
    }
    else
    {
      long long v111 = *(_OWORD *)((char *)this + 1448);
      uint64_t v112 = *((void *)this + 183);
    }
    uint64_t v90 = *((void *)this + 185);
    uint64_t v113 = *((void *)this + 184);
    uint64_t v114 = v90;
    if (v90) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v91 = *(void *)(a2 + 685);
    *(void *)int v106 = *(void *)(a2 + 680);
    *(void *)&v106[5] = v91;
    long long v107 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    sub_21677EA60(&v107, *(const void **)(a2 + 696), *(void *)(a2 + 704), (uint64_t)(*(void *)(a2 + 704) - *(void *)(a2 + 696)) >> 3);
    if (SHIBYTE(v112) < 0)
    {
      if (*((void *)&v111 + 1)) {
        goto LABEL_517;
      }
    }
    else if (HIBYTE(v112))
    {
LABEL_517:
      v92 = 0;
      goto LABEL_522;
    }
    if (v113) {
      v92 = nullsub_7;
    }
    else {
      v92 = 0;
    }
LABEL_522:
    if (v92)
    {
      if (*(_DWORD *)&v106[8] == 127 || !*(void *)v106 && v108 == v107) {
        uint64_t v93 = 0;
      }
      else {
        uint64_t v93 = nullsub_13;
      }
      if (v93) {
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v110);
      }
      else {
        Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v110);
      }
    }
    if (v107)
    {
      uint64_t v108 = v107;
      operator delete(v107);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v110);
    int v101 = *((_DWORD *)this + 372);
    if (*((char *)this + 1519) < 0)
    {
      sub_216778F24(&v102, *((void **)this + 187), *((void *)this + 188));
    }
    else
    {
      long long v102 = *(_OWORD *)((char *)this + 1496);
      uint64_t v103 = *((void *)this + 189);
    }
    uint64_t v94 = *((void *)this + 191);
    uint64_t v104 = *((void *)this + 190);
    uint64_t v105 = v94;
    if (v94) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)int v97 = *(void *)(a2 + 720);
    *(void *)&v97[5] = *(void *)(a2 + 725);
    long long v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    sub_21677EA60(&v98, *(const void **)(a2 + 736), *(void *)(a2 + 744), (uint64_t)(*(void *)(a2 + 744) - *(void *)(a2 + 736)) >> 3);
    if (SHIBYTE(v103) < 0)
    {
      if (*((void *)&v102 + 1)) {
        goto LABEL_540;
      }
    }
    else if (HIBYTE(v103))
    {
LABEL_540:
      int v95 = 0;
LABEL_545:
      if (v95)
      {
        if (*(_DWORD *)&v97[8] == 127 || !*(void *)v97 && v99 == v98) {
          uint64_t v96 = 0;
        }
        else {
          uint64_t v96 = nullsub_13;
        }
        if (v96) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v101);
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v101);
        }
      }
      if (v98)
      {
        uint64_t v99 = v98;
        operator delete(v98);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v101);
      goto LABEL_557;
    }
    if (v104) {
      int v95 = nullsub_7;
    }
    else {
      int v95 = 0;
    }
    goto LABEL_545;
  }
LABEL_557:
  ++*((void *)this + 32);
}

void sub_2167D79FC(void *a1, int a2)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&STACK[0x320]);
  int v5 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v2 - 64, (uint64_t)v5);
  }
  else {
    sub_21679F9F4(v2 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167D79E4);
}

void sub_2167D7D28(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createVelocityProperty(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 5);
  uint64_t v16 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".velocities");
  uint64_t v3 = *((void *)this + 33);
  v11[0] = 2;
  v11[2] = v3;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  sub_2167C6BC0((uint64_t)&v17, &v15, (uint64_t)&__p, v11, v10, v9, v8);
  *((_DWORD *)this + 252) = v17;
  std::string::operator=((std::string *)((char *)this + 1016), &v18);
  uint64_t v5 = v19;
  uint64_t v4 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 130) = v5;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 131);
  *((void *)this + 131) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v17);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  long long __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_2167C6418(&v17, (uint64_t *)&__p);
  if (*((void *)this + 32))
  {
    unint64_t v7 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 1008);
      ++v7;
    }
    while (v7 < *((void *)this + 32));
  }
  if (v18.__r_.__value_.__l.__size_)
  {
    v18.__r_.__value_.__r.__words[2] = v18.__r_.__value_.__l.__size_;
    operator delete((void *)v18.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_2167D7EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createUVsProperty(void *a1, uint64_t a2)
{
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = 0x20000000ALL;
  long long v39 = 0u;
  *(_OWORD *)uint64_t v40 = 0u;
  *(void *)&v40[16] = 0x100000005;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 127;
  if (*(_DWORD *)(a2 + 352) == 127 || !*(void *)(a2 + 344) && *(void *)(a2 + 368) == *(void *)(a2 + 360)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_21;
  }
  if (v4)
  {
    sub_2167C7154(v35, (uint64_t *)&v48);
    sub_2167C71F8(&v31, (uint64_t *)&v45);
    sub_2167C729C((uint64_t)&__dst, (uint64_t *)v35, &v31, *(_DWORD *)(a2 + 384));
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v23, v24[0], (v24[0] - (uint64_t)v23) >> 3);
    *(void *)&v40[8] = v25;
    *(void *)&v40[13] = *(void *)((char *)&v25 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 3);
    int v44 = v29;
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v24[0] = (uint64_t)v23;
      operator delete(v23);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      int v37 = v36;
      operator delete(v36);
    }
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    uint64_t v20 = a1[5];
    int v21 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, "uv");
    int v6 = v44;
    sub_2167DA6E8((uint64_t)a1, &v18);
    LODWORD(v31) = 4;
    int v32 = &v18;
    int v16 = 0;
    int v17 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167C7350((char *)&__dst, &v20, (uint64_t)v35, 1, v6, 1, &v31, &v16, &v14);
    sub_2167C5310((uint64_t)(a1 + 104), &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v30);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v24);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    unint64_t v7 = v21;
    if (v21) {
LABEL_24:
    }
      sub_216784EC4(v7);
  }
  else
  {
    sub_2167C7154(v35, (uint64_t *)&v48);
    int v9 = *(_DWORD *)(a2 + 384);
    *(void *)&long long __dst = *(void *)v35;
    *(void *)((char *)&__dst + 5) = *(void *)&v35[5];
    uint64_t v23 = 0;
    v24[0] = 0;
    v24[1] = 0;
    sub_21677EA60(&v23, v36, (uint64_t)v37, (v37 - v36) >> 3);
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = 0x100000005;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long __p = 0;
    int v29 = v9;
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v23, v24[0], (v24[0] - (uint64_t)v23) >> 3);
    *(void *)&v40[8] = v25;
    *(void *)&v40[13] = *(void *)((char *)&v25 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 3);
    int v44 = v29;
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v24[0] = (uint64_t)v23;
      operator delete(v23);
    }
    if (v36)
    {
      int v37 = v36;
      operator delete(v36);
    }
    char v10 = (std::__shared_weak_count *)a1[6];
    uint64_t v12 = a1[5];
    uint64_t v13 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, "uv");
    int v11 = v44;
    sub_2167DA6E8((uint64_t)a1, &v18);
    LODWORD(v31) = 4;
    int v32 = &v18;
    int v16 = 0;
    int v17 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167C7350((char *)&__dst, &v12, (uint64_t)v35, 0, v11, 1, &v31, &v16, &v14);
    sub_2167C5310((uint64_t)(a1 + 104), &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v30);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v24);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    unint64_t v7 = v13;
    if (v13) {
      goto LABEL_24;
    }
  }
  if (a1[32])
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C3654((uint64_t)(a1 + 104), (uint64_t)&v38);
      ++v8;
    }
    while (v8 < a1[32]);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if ((void)v39)
  {
    *((void *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_2167D83C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  sub_2167C5410((uint64_t)&a20);
  if (a17) {
    sub_216784EC4(a17);
  }
  if (*(char *)(v45 - 217) < 0) {
    operator delete(*(void **)(v45 - 240));
  }
  if (a11) {
    sub_216784EC4(a11);
  }
  sub_2167C5204((void *)(v45 - 200));
  uint64_t v47 = *(void **)(v45 - 112);
  if (v47)
  {
    *(void *)(v45 - 104) = v47;
    operator delete(v47);
  }
  uint64_t v48 = *(void **)(v45 - 88);
  if (v48)
  {
    *(void *)(v45 - 80) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createNormalsProperty(void *a1, uint64_t a2)
{
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  *(void *)&long long v40 = 0;
  *((void *)&v40 + 1) = 0x30000000ALL;
  long long v41 = 0u;
  *(_OWORD *)uint64_t v42 = 0u;
  *(void *)&v42[16] = 0x100000005;
  uint64_t v43 = 0;
  int v44 = 0;
  uint64_t v45 = 0;
  int v46 = 127;
  if (*(_DWORD *)(a2 + 264) == 127 || !*(void *)(a2 + 256) && *(void *)(a2 + 280) == *(void *)(a2 + 272)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_21;
  }
  if (v4)
  {
    sub_2167C6418(&v33, (uint64_t *)&v50);
    sub_2167C8B1C(v37, &v33);
    sub_2167C71F8(&v29, (uint64_t *)&v47);
    sub_2167C8C94((uint64_t)&__dst, (uint64_t *)v37, &v29, *(_DWORD *)(a2 + 296));
    *(void *)&long long v40 = __dst;
    *(void *)((char *)&v40 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v41, (char *)v21, v22[0], (v22[0] - (uint64_t)v21) >> 3);
    *(void *)&v42[8] = v23;
    *(void *)&v42[13] = *(void *)((char *)&v23 + 5);
    sub_21677CC7C((char *)&v43, (char *)__p, (uint64_t)v25, (v25 - (unsigned char *)__p) >> 3);
    int v46 = v27;
    if (__p)
    {
      long long v25 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22[0] = (uint64_t)v21;
      operator delete(v21);
    }
    if (v31)
    {
      int v32 = v31;
      operator delete(v31);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v35)
    {
      uint64_t v36 = v35;
      operator delete(v35);
    }
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    uint64_t v18 = a1[5];
    uint64_t v19 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v37, "N");
    int v6 = v46;
    sub_2167DA6E8((uint64_t)a1, &v29);
    LODWORD(v33) = 4;
    uint64_t v34 = &v29;
    int v16 = 0;
    int v17 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167C8D48((char *)&__dst, &v18, (uint64_t)v37, 1, v6, 1, &v33, &v16, &v14);
    sub_2167C5310((uint64_t)(a1 + 82), &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v26);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v22);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)__dst);
    }
    if (v30) {
      sub_216784EC4(v30);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)v37);
    }
    unint64_t v7 = v19;
    if (v19) {
LABEL_26:
    }
      sub_216784EC4(v7);
  }
  else
  {
    sub_2167C6418(&v33, (uint64_t *)&v50);
    sub_2167C8B1C(v37, &v33);
    int v9 = *(_DWORD *)(a2 + 296);
    *(void *)&long long __dst = *(void *)v37;
    *(void *)((char *)&__dst + 5) = *(void *)&v37[5];
    int v21 = 0;
    v22[0] = 0;
    v22[1] = 0;
    sub_21677EA60(&v21, v38, (uint64_t)v39, (v39 - v38) >> 3);
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = 0x100000005;
    long long v25 = 0;
    uint64_t v26 = 0;
    long long __p = 0;
    int v27 = v9;
    *(void *)&long long v40 = __dst;
    *(void *)((char *)&v40 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v41, (char *)v21, v22[0], (v22[0] - (uint64_t)v21) >> 3);
    *(void *)&v42[8] = v23;
    *(void *)&v42[13] = *(void *)((char *)&v23 + 5);
    sub_21677CC7C((char *)&v43, (char *)__p, (uint64_t)v25, (v25 - (unsigned char *)__p) >> 3);
    int v46 = v27;
    if (__p)
    {
      long long v25 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22[0] = (uint64_t)v21;
      operator delete(v21);
    }
    if (v38)
    {
      long long v39 = v38;
      operator delete(v38);
    }
    if (v35)
    {
      uint64_t v36 = v35;
      operator delete(v35);
    }
    char v10 = (std::__shared_weak_count *)a1[6];
    uint64_t v12 = a1[5];
    uint64_t v13 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v37, "N");
    int v11 = v46;
    sub_2167DA6E8((uint64_t)a1, &v29);
    LODWORD(v33) = 4;
    uint64_t v34 = &v29;
    int v16 = 0;
    int v17 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167C8D48((char *)&__dst, &v12, (uint64_t)v37, 0, v11, 1, &v33, &v16, &v14);
    sub_2167C5310((uint64_t)(a1 + 82), &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v26);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v22);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)__dst);
    }
    if (v30) {
      sub_216784EC4(v30);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)v37);
    }
    unint64_t v7 = v13;
    if (v13) {
      goto LABEL_26;
    }
  }
  if (a1[32])
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C3A2C((uint64_t)(a1 + 82), (uint64_t)&v40);
      ++v8;
    }
    while (v8 < a1[32]);
  }
  if (v43)
  {
    int v44 = v43;
    operator delete(v43);
  }
  if ((void)v41)
  {
    *((void *)&v41 + 1) = v41;
    operator delete((void *)v41);
  }
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  if (v50)
  {
    int v51 = v50;
    operator delete(v50);
  }
}

void sub_2167D89C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  sub_2167C5410((uint64_t)&a19);
  if (a42) {
    sub_216784EC4(a42);
  }
  if (*(char *)(v49 - 217) < 0) {
    operator delete(*(void **)(v49 - 240));
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  sub_2167C5204((void *)(v49 - 200));
  int v51 = *(void **)(v49 - 112);
  if (v51)
  {
    *(void *)(v49 - 104) = v51;
    operator delete(v51);
  }
  uint64_t v52 = *(void **)(v49 - 88);
  if (v52)
  {
    *(void *)(v49 - 80) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createPositionWeightsProperty(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  int v16 = *((_DWORD *)this + 2);
  if (*((char *)this + 39) < 0)
  {
    sub_216778F24(&v17, *((void **)this + 2), *((void *)this + 3));
  }
  else
  {
    long long v17 = *((_OWORD *)this + 1);
    uint64_t v18 = *((void *)this + 4);
  }
  uint64_t v2 = *((void *)this + 6);
  uint64_t v19 = *((void *)this + 5);
  uint64_t v20 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, "w");
  sub_2167DA6E8((uint64_t)this, &v9);
  int v11 = 4;
  uint64_t v12 = &v9;
  v8[0] = 0;
  v8[2] = 0;
  v7[0] = 0;
  v7[2] = 0;
  sub_2167CB2E8((uint64_t)&v21, &v16, (uint64_t)&__p, &v11, v8, v7);
  *((_DWORD *)this + 152) = v21;
  std::string::operator=((std::string *)((char *)this + 616), &v22);
  uint64_t v4 = v23;
  uint64_t v3 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 80) = v4;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 81);
  *((void *)this + 81) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v21);
  if (v10) {
    sub_216784EC4(v10);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v16);
  long long __p = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  sub_2167CA034(&v21, (uint64_t *)&__p);
  if (*((void *)this + 32))
  {
    unint64_t v6 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 608);
      ++v6;
    }
    while (v6 < *((void *)this + 32));
  }
  if (v22.__r_.__value_.__l.__size_)
  {
    v22.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__l.__size_;
    operator delete((void *)v22.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    int v14 = __p;
    operator delete(__p);
  }
}

void sub_2167D8CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createTrimPropreties(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  sub_2167C6B1C(&v79, (uint64_t *)&v85);
  sub_2167CA034(&v76, (uint64_t *)&v82);
  sub_2167DA6E8((uint64_t)this, &v74);
  uint64_t v68 = v2;
  v69 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v37 = v3;
  sub_216779094(__p, "trim_nloops");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167DBB7C((uint64_t)&v70, &v68, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 264) = v70;
  std::string::operator=((std::string *)((char *)this + 1064), &v71);
  uint64_t v5 = v72;
  uint64_t v4 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 136) = v5;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 137);
  *((void *)this + 137) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v69) {
    sub_216784EC4(v69);
  }
  uint64_t v56 = v2;
  int v57 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_ncurves");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167C6640((uint64_t)&v70, &v56, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 276) = v70;
  std::string::operator=((std::string *)((char *)this + 1112), &v71);
  uint64_t v8 = v72;
  uint64_t v7 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 142) = v8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 143);
  *((void *)this + 143) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v57) {
    sub_216784EC4(v57);
  }
  uint64_t v54 = v2;
  uint64_t v55 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_n");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167C6640((uint64_t)&v70, &v54, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 288) = v70;
  std::string::operator=((std::string *)((char *)this + 1160), &v71);
  uint64_t v11 = v72;
  uint64_t v10 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 148) = v11;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 149);
  *((void *)this + 149) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v55) {
    sub_216784EC4(v55);
  }
  uint64_t v52 = v2;
  uint64_t v53 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_order");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167C6640((uint64_t)&v70, &v52, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 300) = v70;
  std::string::operator=((std::string *)((char *)this + 1208), &v71);
  uint64_t v14 = v72;
  uint64_t v13 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 154) = v14;
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 155);
  *((void *)this + 155) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v53) {
    sub_216784EC4(v53);
  }
  uint64_t v50 = v2;
  int v51 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_knot");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167CAE0C((uint64_t)&v70, &v50, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 312) = v70;
  std::string::operator=((std::string *)((char *)this + 1256), &v71);
  uint64_t v17 = v72;
  uint64_t v16 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 160) = v17;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 161);
  *((void *)this + 161) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v51) {
    sub_216784EC4(v51);
  }
  uint64_t v48 = v2;
  uint64_t v49 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_min");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167CAE0C((uint64_t)&v70, &v48, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 324) = v70;
  std::string::operator=((std::string *)((char *)this + 1304), &v71);
  uint64_t v20 = v72;
  uint64_t v19 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 166) = v20;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 167);
  *((void *)this + 167) = v19;
  if (v21) {
    sub_216784EC4(v21);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v49) {
    sub_216784EC4(v49);
  }
  uint64_t v46 = v2;
  uint64_t v47 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_max");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167CAE0C((uint64_t)&v70, &v46, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 336) = v70;
  std::string::operator=((std::string *)((char *)this + 1352), &v71);
  uint64_t v23 = v72;
  uint64_t v22 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 172) = v23;
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 173);
  *((void *)this + 173) = v22;
  if (v24) {
    sub_216784EC4(v24);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v47) {
    sub_216784EC4(v47);
  }
  uint64_t v44 = v2;
  uint64_t v45 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_u");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167CAE0C((uint64_t)&v70, &v44, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 348) = v70;
  std::string::operator=((std::string *)((char *)this + 1400), &v71);
  uint64_t v26 = v72;
  uint64_t v25 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 178) = v26;
  int v27 = (std::__shared_weak_count *)*((void *)this + 179);
  *((void *)this + 179) = v25;
  if (v27) {
    sub_216784EC4(v27);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v45) {
    sub_216784EC4(v45);
  }
  uint64_t v42 = v2;
  uint64_t v43 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_v");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167CAE0C((uint64_t)&v70, &v42, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 360) = v70;
  std::string::operator=((std::string *)((char *)this + 1448), &v71);
  uint64_t v29 = v72;
  uint64_t v28 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 184) = v29;
  uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 185);
  *((void *)this + 185) = v28;
  if (v30) {
    sub_216784EC4(v30);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v43) {
    sub_216784EC4(v43);
  }
  uint64_t v40 = v2;
  long long v41 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "trim_w");
  int v64 = 4;
  uint64_t v65 = &v74;
  int v62 = 0;
  int v63 = 0;
  int v60 = 0;
  int v61 = 0;
  int v58 = 0;
  int v59 = 0;
  sub_2167CAE0C((uint64_t)&v70, &v40, (uint64_t)__p, &v64, &v62, &v60, &v58);
  *((_DWORD *)this + 372) = v70;
  std::string::operator=((std::string *)((char *)this + 1496), &v71);
  uint64_t v32 = v72;
  uint64_t v31 = v73;
  if (v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 190) = v32;
  uint64_t v33 = (std::__shared_weak_count *)*((void *)this + 191);
  *((void *)this + 191) = v31;
  if (v33) {
    sub_216784EC4(v33);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v70);
  if (v67 < 0) {
    operator delete(__p[0]);
  }
  if (v41) {
    sub_216784EC4(v41);
  }
  if (*((void *)this + 32))
  {
    uint64_t v34 = this;
    unint64_t v35 = 0;
    long long v38 = (char *)this + 1104;
    long long v39 = (Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056);
    uint64_t v36 = (char *)this + 1152;
    do
    {
      int v70 = 0;
      Alembic::Abc::v12::OScalarProperty::set(v39, &v70);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v38);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v36);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v34 + 1200);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v34 + 1248);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v34 + 1296);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v34 + 1344);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v34 + 1392);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v34 + 1440);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)v34 + 1488);
      ++v35;
    }
    while (v35 < *((void *)v34 + 32));
  }
  if (v75) {
    sub_216784EC4(v75);
  }
  if (v77)
  {
    uint64_t v78 = v77;
    operator delete(v77);
  }
  if (v80)
  {
    uint64_t v81 = v80;
    operator delete(v80);
  }
  if (v82)
  {
    uint64_t v83 = v82;
    operator delete(v82);
  }
  if (v85)
  {
    uint64_t v86 = v85;
    operator delete(v85);
  }
  if (v37) {
    sub_216784EC4(v37);
  }
}

void sub_2167D9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,char a47)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a47);
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  uint64_t v49 = *(std::__shared_weak_count **)(v47 - 224);
  if (v49) {
    sub_216784EC4(v49);
  }
  uint64_t v50 = *(void **)(v47 - 200);
  if (v50)
  {
    *(void *)(v47 - 192) = v50;
    operator delete(v50);
  }
  int v51 = *(void **)(v47 - 160);
  if (v51)
  {
    *(void *)(v47 - 152) = v51;
    operator delete(v51);
  }
  uint64_t v52 = *(void **)(v47 - 136);
  if (v52)
  {
    *(void *)(v47 - 128) = v52;
    operator delete(v52);
  }
  uint64_t v53 = *(void **)(v47 - 112);
  if (v53)
  {
    *(void *)(v47 - 104) = v53;
    operator delete(v53);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createPositionProperties(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v25 = (uint64_t *)v26;
  sub_2167C4D74(&v25, 3);
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = v3;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v19 = v2;
  sub_216779094(__p, "P");
  LODWORD(v13) = 3;
  uint64_t v14 = &v25;
  uint64_t v4 = *((void *)this + 33);
  v18[0] = 2;
  _OWORD v18[2] = v4;
  v17[0] = 0;
  void v17[2] = 0;
  v16[0] = 0;
  void v16[2] = 0;
  sub_2167C5E88((uint64_t)&v21, &v19, (uint64_t)__p, &v13, v18, v17, v16);
  *((_DWORD *)this + 68) = v21;
  std::string::operator=((std::string *)((char *)this + 280), &v22);
  uint64_t v6 = v23;
  uint64_t v5 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 39);
  *((void *)this + 38) = v6;
  *((void *)this + 39) = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v21);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (v20) {
    sub_216784EC4(v20);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_2167C6418(&v21, (uint64_t *)&v13);
  if (*((void *)this + 32))
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C64C8(__p, &v21);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 272);
      if (v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
      ++v8;
      unint64_t v9 = *((void *)this + 32);
    }
    while (v8 < v9);
  }
  else
  {
    unint64_t v9 = 0;
  }
  sub_2167DA4D4((uint64_t)this, *((_DWORD *)this + 66), v9);
  if (v22.__r_.__value_.__l.__size_)
  {
    v22.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__l.__size_;
    operator delete((void *)v22.__r_.__value_.__l.__size_);
  }
  if (v13)
  {
    uint64_t v14 = (uint64_t **)v13;
    operator delete(v13);
  }
  if (v3) {
    sub_216784EC4(v3);
  }
  sub_2167877AC((uint64_t)&v25, v26[0]);
}

void sub_2167D9BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v31 = *(void **)(v29 - 104);
  if (v31)
  {
    *(void *)(v29 - 96) = v31;
    operator delete(v31);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    sub_216784EC4(v28);
  }
  sub_2167877AC(v29 - 72, *(void **)(v29 - 64));
  _Unwind_Resume(a1);
}

BOOL sub_2167D9C58(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) != -536870912
    || *(_DWORD *)(a1 + 84) != -536870912
    || *(_DWORD *)(a1 + 88) != -536870912
    || *(_DWORD *)(a1 + 92) != -536870912)
  {
    return 1;
  }
  if (*(_DWORD *)(a1 + 104) == 127 || !*(void *)(a1 + 96) && *(void *)(a1 + 120) == *(void *)(a1 + 112)
     ? 0
     : nullsub_13)
  {
    return 1;
  }
  if (*(_DWORD *)(a1 + 144) == 127 || !*(void *)(a1 + 136) && *(void *)(a1 + 160) == *(void *)(a1 + 152)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = nullsub_13;
  }
  return v3 != 0;
}

void Alembic::AbcGeom::v12::ONuPatchSchema::createKnotProperties(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  v56[0] = 0;
  v56[1] = 0;
  uint64_t v55 = (uint64_t *)v56;
  sub_2167C4D74(&v55, 3);
  uint64_t v3 = *((void *)this + 5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v50 = v2;
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v50 = 0;
  }
  uint64_t v49 = v3;
  sub_216779094(__p, "nu");
  uint64_t v4 = *((void *)this + 33);
  int v45 = 2;
  int v46 = v4;
  int v43 = 0;
  int v44 = 0;
  int v41 = 0;
  int v42 = 0;
  int v39 = 0;
  int v40 = 0;
  sub_2167DBB7C((uint64_t)&v51, &v49, (uint64_t)__p, &v45, &v43, &v41, &v39);
  *((_DWORD *)this + 80) = v51;
  std::string::operator=((std::string *)((char *)this + 328), &v52);
  uint64_t v6 = v53;
  uint64_t v5 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 45);
  *((void *)this + 44) = v6;
  *((void *)this + 45) = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v51);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v50) {
    sub_216784EC4(v50);
  }
  uint64_t v37 = v3;
  long long v38 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "nv");
  uint64_t v8 = *((void *)this + 33);
  int v45 = 2;
  int v46 = v8;
  int v43 = 0;
  int v44 = 0;
  int v41 = 0;
  int v42 = 0;
  int v39 = 0;
  int v40 = 0;
  sub_2167DBB7C((uint64_t)&v51, &v37, (uint64_t)__p, &v45, &v43, &v41, &v39);
  *((_DWORD *)this + 92) = v51;
  std::string::operator=((std::string *)((char *)this + 376), &v52);
  uint64_t v10 = v53;
  uint64_t v9 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = v10;
  *((void *)this + 51) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v51);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    sub_216784EC4(v38);
  }
  uint64_t v35 = v3;
  uint64_t v36 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "uOrder");
  uint64_t v12 = *((void *)this + 33);
  int v45 = 2;
  int v46 = v12;
  int v43 = 0;
  int v44 = 0;
  int v41 = 0;
  int v42 = 0;
  int v39 = 0;
  int v40 = 0;
  sub_2167DBB7C((uint64_t)&v51, &v35, (uint64_t)__p, &v45, &v43, &v41, &v39);
  *((_DWORD *)this + 104) = v51;
  std::string::operator=((std::string *)((char *)this + 424), &v52);
  uint64_t v14 = v53;
  uint64_t v13 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = v14;
  *((void *)this + 57) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v51);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v36) {
    sub_216784EC4(v36);
  }
  uint64_t v33 = v3;
  uint64_t v34 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "vOrder");
  uint64_t v16 = *((void *)this + 33);
  int v45 = 2;
  int v46 = v16;
  int v43 = 0;
  int v44 = 0;
  int v41 = 0;
  int v42 = 0;
  int v39 = 0;
  int v40 = 0;
  sub_2167DBB7C((uint64_t)&v51, &v33, (uint64_t)__p, &v45, &v43, &v41, &v39);
  *((_DWORD *)this + 116) = v51;
  std::string::operator=((std::string *)((char *)this + 472), &v52);
  uint64_t v18 = v53;
  uint64_t v17 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 63);
  *((void *)this + 62) = v18;
  *((void *)this + 63) = v17;
  if (v19) {
    sub_216784EC4(v19);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v51);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v34) {
    sub_216784EC4(v34);
  }
  uint64_t v31 = v3;
  uint64_t v32 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "uKnot");
  uint64_t v20 = *((void *)this + 33);
  int v45 = 2;
  int v46 = v20;
  int v43 = 0;
  int v44 = 0;
  int v41 = 0;
  int v42 = 0;
  int v39 = 0;
  int v40 = 0;
  sub_2167CAE0C((uint64_t)&v51, &v31, (uint64_t)__p, &v45, &v43, &v41, &v39);
  *((_DWORD *)this + 128) = v51;
  std::string::operator=((std::string *)((char *)this + 520), &v52);
  uint64_t v22 = v53;
  uint64_t v21 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 68) = v22;
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 69);
  *((void *)this + 69) = v21;
  if (v23) {
    sub_216784EC4(v23);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v51);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v32) {
    sub_216784EC4(v32);
  }
  uint64_t v29 = v3;
  uint64_t v30 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "vKnot");
  uint64_t v24 = *((void *)this + 33);
  int v45 = 2;
  int v46 = v24;
  int v43 = 0;
  int v44 = 0;
  int v41 = 0;
  int v42 = 0;
  int v39 = 0;
  int v40 = 0;
  sub_2167CAE0C((uint64_t)&v51, &v29, (uint64_t)__p, &v45, &v43, &v41, &v39);
  *((_DWORD *)this + 140) = v51;
  std::string::operator=((std::string *)((char *)this + 568), &v52);
  uint64_t v26 = v53;
  uint64_t v25 = v54;
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 74) = v26;
  int v27 = (std::__shared_weak_count *)*((void *)this + 75);
  *((void *)this + 75) = v25;
  if (v27) {
    sub_216784EC4(v27);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v51);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  if (v30) {
    sub_216784EC4(v30);
  }
  uint64_t v51 = 0;
  v52.__r_.__value_.__r.__words[0] = 0x10000000ALL;
  uint64_t v53 = 0;
  *(_OWORD *)&v52.__r_.__value_.__r.__words[1] = 0uLL;
  if (*((void *)this + 32))
  {
    unint64_t v28 = 0;
    do
    {
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320), __p);
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368), __p);
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416), __p);
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464), __p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 512);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 560);
      ++v28;
    }
    while (v28 < *((void *)this + 32));
    if (v52.__r_.__value_.__l.__size_)
    {
      v52.__r_.__value_.__r.__words[2] = v52.__r_.__value_.__l.__size_;
      operator delete((void *)v52.__r_.__value_.__l.__size_);
    }
  }
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_2167877AC((uint64_t)&v55, v56[0]);
}

void sub_2167DA334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v35 - 152));
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v34) {
    sub_216784EC4(v34);
  }
  sub_2167877AC(v35 - 104, *(void **)(v35 - 96));
  _Unwind_Resume(a1);
}

void sub_2167DA4D4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v20 = a1 + 8;
  uint64_t v21 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
LABEL_5:
    if (*(void *)(a1 + 88)) {
      return;
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".selfBnds");
  v13[0] = 2;
  void v13[2] = a2;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167B9640((uint64_t)v18, &v16, (uint64_t)__p, v13, v12, v11, v10);
  *(_DWORD *)(a1 + 56) = v18[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v18 + 8));
  int64x2_t v7 = v19;
  if (v19.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(int64x2_t *)(a1 + 88) = v7;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  v18[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v18[1] = xmmword_217409FA0;
  int64x2_t v19 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    uint64_t v9 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v9, v18);
      --a3;
    }
    while (a3);
  }
}

void sub_2167DA644(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 96));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  unint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v25 - 48, (uint64_t)v28);
  }
  else {
    sub_21679F9F4(v25 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DA630);
}

void sub_2167DA6C8(_Unwind_Exception *a1)
{
}

void sub_2167DA6E8(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 303) < 0)
  {
    if (!*(void *)(a1 + 288)) {
      goto LABEL_5;
    }
LABEL_8:
    sub_2167B7AC8((int *)(a1 + 8), (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v6, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return;
  }
  if (*(unsigned char *)(a1 + 303)) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*(void *)(a1 + 304)) {
    goto LABEL_8;
  }
  uint64_t v3 = sub_2167C5C4C(a1 + 272);
  uint64_t v4 = *(void *)(v3 + 72);
  *a2 = *(void *)(v3 + 64);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2167DA78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::setFromPrevious(Alembic::AbcGeom::v12::ONuPatchSchema *this)
{
  if (*((char *)this + 303) < 0)
  {
    if (*((void *)this + 36)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 303))
  {
LABEL_3:
    uint64_t v2 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 38)) {
    uint64_t v2 = nullsub_7;
  }
  else {
    uint64_t v2 = 0;
  }
LABEL_8:
  if (v2) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 272));
  }
  if (*((char *)this + 351) < 0)
  {
    if (*((void *)this + 42)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 351))
  {
LABEL_12:
    uint64_t v3 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 44)) {
    uint64_t v3 = nullsub_6;
  }
  else {
    uint64_t v3 = 0;
  }
LABEL_17:
  if (v3) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320));
  }
  if (*((char *)this + 399) < 0)
  {
    if (*((void *)this + 48)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 399))
  {
LABEL_21:
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 50)) {
    uint64_t v4 = nullsub_6;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_26:
  if (v4) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368));
  }
  if (*((char *)this + 447) < 0)
  {
    if (*((void *)this + 54)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 447))
  {
LABEL_30:
    uint64_t v5 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 56)) {
    uint64_t v5 = nullsub_6;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_35:
  if (v5) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416));
  }
  if (*((char *)this + 495) < 0)
  {
    if (*((void *)this + 60)) {
      goto LABEL_39;
    }
  }
  else if (*((unsigned char *)this + 495))
  {
LABEL_39:
    uint64_t v6 = 0;
    goto LABEL_44;
  }
  if (*((void *)this + 62)) {
    uint64_t v6 = nullsub_6;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_44:
  if (v6) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464));
  }
  if (*((char *)this + 543) < 0)
  {
    if (*((void *)this + 66)) {
      goto LABEL_48;
    }
  }
  else if (*((unsigned char *)this + 543))
  {
LABEL_48:
    uint64_t v7 = 0;
    goto LABEL_53;
  }
  if (*((void *)this + 68)) {
    uint64_t v7 = nullsub_7;
  }
  else {
    uint64_t v7 = 0;
  }
LABEL_53:
  if (v7) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 512));
  }
  if (*((char *)this + 591) < 0)
  {
    if (*((void *)this + 72)) {
      goto LABEL_57;
    }
  }
  else if (*((unsigned char *)this + 591))
  {
LABEL_57:
    uint64_t v8 = 0;
    goto LABEL_62;
  }
  if (*((void *)this + 74)) {
    uint64_t v8 = nullsub_7;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_62:
  if (v8) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 560));
  }
  Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56));
  if (*((char *)this + 1039) < 0)
  {
    if (*((void *)this + 128)) {
      goto LABEL_66;
    }
  }
  else if (*((unsigned char *)this + 1039))
  {
LABEL_66:
    uint64_t v9 = 0;
    goto LABEL_71;
  }
  if (*((void *)this + 130)) {
    uint64_t v9 = nullsub_7;
  }
  else {
    uint64_t v9 = 0;
  }
LABEL_71:
  if (v9) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1008));
  }
  if (sub_2167C5D84((uint64_t)this + 832)) {
    uint64_t v10 = nullsub_16;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10) {
    sub_2167C4B94((unsigned char *)this + 832);
  }
  uint64_t result = sub_2167C5D84((uint64_t)this + 656);
  if (result) {
    uint64_t v12 = nullsub_17;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12) {
    uint64_t result = sub_2167C4C34((unsigned char *)this + 656);
  }
  if (*((char *)this + 639) < 0)
  {
    if (*((void *)this + 78)) {
      goto LABEL_85;
    }
  }
  else if (*((unsigned char *)this + 639))
  {
LABEL_85:
    uint64_t v13 = 0;
    goto LABEL_90;
  }
  if (*((void *)this + 80)) {
    uint64_t v13 = nullsub_7;
  }
  else {
    uint64_t v13 = 0;
  }
LABEL_90:
  if (v13) {
    uint64_t result = Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 608));
  }
  if (*((char *)this + 1087) < 0)
  {
    if (*((void *)this + 134)) {
      goto LABEL_94;
    }
LABEL_96:
    if (*((void *)this + 136)) {
      uint64_t v14 = nullsub_6;
    }
    else {
      uint64_t v14 = 0;
    }
    goto LABEL_99;
  }
  if (!*((unsigned char *)this + 1087)) {
    goto LABEL_96;
  }
LABEL_94:
  uint64_t v14 = 0;
LABEL_99:
  if (v14)
  {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1104));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1152));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1200));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1248));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1296));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1344));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1392));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1440));
    return Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1488));
  }
  return result;
}

void sub_2167DABE0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DABD0);
}

void sub_2167DAC14(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::ONuPatchSchema::setTimeSampling(Alembic::AbcGeom::v12::ONuPatchSchema *this, unsigned int a2)
{
  *((void *)this + 33) = a2;
  if (*((char *)this + 303) < 0)
  {
    if (*((void *)this + 36)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 303))
  {
LABEL_3:
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 38)) {
    uint64_t v3 = nullsub_7;
  }
  else {
    uint64_t v3 = 0;
  }
LABEL_8:
  if (v3)
  {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 272));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 320));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 368));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 416));
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 464));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 512));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 560));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_12:
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 11)) {
    uint64_t v4 = nullsub_6;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_17:
  if (v4) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 56));
  }
  if (*((char *)this + 1039) < 0)
  {
    if (*((void *)this + 128)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 1039))
  {
LABEL_21:
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 130)) {
    uint64_t v5 = nullsub_7;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_26:
  if (v5) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1008));
  }
  if (sub_2167C5D84((uint64_t)this + 832)) {
    uint64_t v6 = nullsub_16;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    sub_2167C5854((unsigned char *)this + 832);
  }
  uint64_t result = sub_2167C5D84((uint64_t)this + 656);
  if (result) {
    uint64_t v8 = nullsub_17;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8) {
    uint64_t result = sub_2167C58FC((unsigned char *)this + 656);
  }
  if (*((char *)this + 639) < 0)
  {
    if (*((void *)this + 78)) {
      goto LABEL_40;
    }
  }
  else if (*((unsigned char *)this + 639))
  {
LABEL_40:
    uint64_t v9 = 0;
    goto LABEL_45;
  }
  if (*((void *)this + 80)) {
    uint64_t v9 = nullsub_7;
  }
  else {
    uint64_t v9 = 0;
  }
LABEL_45:
  if (v9) {
    uint64_t result = Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 608));
  }
  if (*((char *)this + 1087) < 0)
  {
    if (*((void *)this + 134)) {
      goto LABEL_49;
    }
LABEL_51:
    if (*((void *)this + 136)) {
      uint64_t v10 = nullsub_6;
    }
    else {
      uint64_t v10 = 0;
    }
    goto LABEL_54;
  }
  if (!*((unsigned char *)this + 1087)) {
    goto LABEL_51;
  }
LABEL_49:
  uint64_t v10 = 0;
LABEL_54:
  if (v10)
  {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1056));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1104));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1152));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1200));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1248));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1296));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1344));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1392));
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1440));
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::ONuPatchSchema *)((char *)this + 1488));
  }
  return result;
}

void sub_2167DAF54(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DAF40);
}

void sub_2167DAF88(_Unwind_Exception *a1)
{
}

int *Alembic::AbcGeom::v12::ONuPatchSchema::setTimeSampling(Alembic::AbcGeom::v12::ONuPatchSchema *a1, void *a2)
{
  uint64_t result = (int *)((char *)a1 + 8);
  uint64_t v7 = result;
  uint64_t v8 = "ONuPatchSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_2167B7AC8(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    unsigned int v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::ONuPatchSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_2167DB02C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  int64x2_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DB01CLL);
}

void sub_2167DB094(_Unwind_Exception *a1)
{
}

void sub_2167DB0B8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2167DC058(a1);

  operator delete(v1);
}

void sub_2167DB0E0(uint64_t a1)
{
  sub_2167A13A4(a1 + 272);
  sub_2167A13A4(a1 + 608);
  sub_2167A13A4(a1 + 1008);
  sub_2167A13A4(a1 + 320);
  sub_2167A13A4(a1 + 368);
  sub_2167A13A4(a1 + 416);
  sub_2167A13A4(a1 + 464);
  sub_2167A13A4(a1 + 512);
  sub_2167A13A4(a1 + 560);
  sub_2167C5E20(a1 + 656);
  sub_2167C5E20(a1 + 832);
  sub_2167A13A4(a1 + 1056);
  sub_2167A13A4(a1 + 1152);
  sub_2167A13A4(a1 + 1200);
  sub_2167A13A4(a1 + 1248);
  sub_2167A13A4(a1 + 1296);
  sub_2167A13A4(a1 + 1344);
  sub_2167A13A4(a1 + 1392);
  sub_2167A13A4(a1 + 1440);
  sub_2167A13A4(a1 + 1488);

  sub_2167DB2F4(a1);
}

uint64_t sub_2167DB1B4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return *(unsigned char *)(a1 + 248) != 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return *(unsigned char *)(a1 + 248) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (*(char *)(a1 + 303) < 0)
    {
      if (*(void *)(a1 + 288)) {
        return *(unsigned char *)(a1 + 248) != 0;
      }
    }
    else if (*(unsigned char *)(a1 + 303))
    {
      return *(unsigned char *)(a1 + 248) != 0;
    }
    if (*(void *)(a1 + 304)) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 248) != 0;
}

void *sub_2167DB20C(void *a1)
{
  *a1 = &unk_26C749D80;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_2167DB278(void *a1)
{
  *a1 = &unk_26C749D80;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  operator delete(a1);
}

void sub_2167DB2F4(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_2167DB348(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_2167DB374(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_216779094((void *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_216779094((void *)(a1 + 80), "");
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x20000007FLL;
  sub_216779094((void *)(a1 + 136), "");
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_2167DB408(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2167DB444(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_216779094((void *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_216779094((void *)(a1 + 80), "");
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x20000007FLL;
  sub_216779094((void *)(a1 + 136), "");
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_2167DB4D8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2167DB514(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749DB0;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167DB6EC(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167DB5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167DB610(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0) {
    sub_2167DA4D4(a1, a2, 0);
  }
}

void sub_2167DB65C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DB648);
}

void sub_2167DB6CC(_Unwind_Exception *a1)
{
}

void sub_2167DB6EC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v23 = 0;
  v24[0] = 0;
  uint64_t v22 = (uint64_t *)&v23;
  int v25 = 2;
  sub_2167898D0((uint64_t *)v26, (const void ***)&v22);
  v26[3] = 0;
  int v27 = 0;
  int v28 = 0;
  uint64_t v29 = 1;
  sub_2167877AC((uint64_t)&v22, v23);
  sub_2167A030C(a4, (uint64_t)&v25);
  sub_2167A030C(a5, (uint64_t)&v25);
  sub_2167A030C(a6, (uint64_t)&v25);
  sub_2167A030C(a7, (uint64_t)&v25);
  *(_DWORD *)(a1 + 8) = v25;
  v24[33] = a1 + 8;
  v24[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v22);
    sub_216779180(v24, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v22, v26);
  if (HIDWORD(v29) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_NuPatch_v2");
    uint64_t v30 = __p;
    uint64_t v13 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A2C9, (long long **)&v30);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (HIDWORD(v29) != 1)
    {
      sub_216779094(__p, "schemaBaseType");
      sub_216779094(&__str, "AbcGeom_GeomBase_v1");
      uint64_t v30 = __p;
      uint64_t v14 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A2C9, (long long **)&v30);
      std::string::operator=((std::string *)(v14 + 7), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v15;
  if (v16)
  {
    sub_216784EC4(v16);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v22, v23);
  if (v27) {
    sub_216784EC4(v27);
  }
  sub_2167877AC((uint64_t)v26, v26[1]);
}

void sub_2167DB9E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DB930);
}

void sub_2167DBAC8(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2167DBB14(uint64_t a1)
{
  return a1;
}

void sub_2167DBB40(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2167DBB7C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167DBC54(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167DBC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167DBC54(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v24 = 0;
  v25[0] = 0;
  uint64_t v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64x2_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  uint64_t v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000006;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 96))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167DBF30(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DBE7CLL);
}

void sub_2167DC00C(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2167DC058(uint64_t a1)
{
  *(void *)a1 = &unk_26C749CF8;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1488));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1440));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1248));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1200));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1152));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 1056));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1008));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 960));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 904));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 856));
  if (*(char *)(a1 + 855) < 0) {
    operator delete(*(void **)(a1 + 832));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 784));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 680));
  if (*(char *)(a1 + 679) < 0) {
    operator delete(*(void **)(a1 + 656));
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 608));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 560));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 512));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 464));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 416));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 368));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 320));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 272));
  *(void *)a1 = &unk_26C749D80;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

uint64_t Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsConstant(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  if (!*((unsigned char *)this + 1464)
    || !Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 984))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1032))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1080))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1128))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1176))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1224))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1272))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1320))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1368)))
  {
    return 0;
  }

  return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1416));
}

uint64_t Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsHomogenous(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  if (!*((unsigned char *)this + 1464)
    || !Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 984))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1032))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1080))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1128))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1224)))
  {
    return 0;
  }

  return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 1272));
}

uint64_t Alembic::AbcGeom::v12::INuPatchSchema::getTopologyVariance(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 248)))
  {
    if (*((char *)this + 663) < 0)
    {
      if (*((void *)this + 81)) {
        goto LABEL_9;
      }
    }
    else if (*((unsigned char *)this + 663))
    {
      goto LABEL_9;
    }
    if (*((void *)this + 83))
    {
      int isConstant = Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 632));
      goto LABEL_10;
    }
LABEL_9:
    int isConstant = 1;
    goto LABEL_10;
  }
  int isConstant = 0;
LABEL_10:
  if (!Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 392))
    || !Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 440))
    || !Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 488)))
  {
    return 2;
  }
  int v3 = Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::INuPatchSchema *)((char *)this + 536));
  if ((isConstant & v3) != 1)
  {
    if (v3)
    {
      if (!*((unsigned char *)this + 1464)) {
        return 1;
      }
      goto LABEL_19;
    }
    return 2;
  }
  if (!*((unsigned char *)this + 1464) || (Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsConstant(this) & 1) != 0) {
    return 0;
  }
LABEL_19:
  if (Alembic::AbcGeom::v12::INuPatchSchema::trimCurveTopologyIsHomogenous(this)) {
    return 1;
  }
  else {
    return 2;
  }
}

void sub_2167DC44C(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcGeom::v12::INuPatchSchema::hasTrimProps(Alembic::AbcGeom::v12::INuPatchSchema *this)
{
  uint64_t v1 = (char *)this + 8;
  sub_216779094(&v20, "trim_nloops");
  if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
  {
    sub_216779094(&v18, "trim_n");
    if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
    {
      sub_216779094(&v16, "trim_order");
      if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
      {
        sub_216779094(&v14, "trim_knot");
        if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
        {
          sub_216779094(&v12, "trim_min");
          if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
          {
            sub_216779094(&v10, "trim_max");
            if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
            {
              sub_216779094(&v8, "trim_u");
              if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
              {
                sub_216779094(&v6, "trim_v");
                if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1))
                {
                  sub_216779094(&__p, "trim_w");
                  BOOL v2 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v1) != 0;
                  if (v5 < 0) {
                    operator delete(__p);
                  }
                }
                else
                {
                  BOOL v2 = 0;
                }
                if (v7 < 0) {
                  operator delete(v6);
                }
              }
              else
              {
                BOOL v2 = 0;
              }
              if (v9 < 0) {
                operator delete(v8);
              }
            }
            else
            {
              BOOL v2 = 0;
            }
            if (v11 < 0) {
              operator delete(v10);
            }
          }
          else
          {
            BOOL v2 = 0;
          }
          if (v13 < 0) {
            operator delete(v12);
          }
        }
        else
        {
          BOOL v2 = 0;
        }
        if (v15 < 0) {
          operator delete(v14);
        }
      }
      else
      {
        BOOL v2 = 0;
      }
      if (v17 < 0) {
        operator delete(v16);
      }
    }
    else
    {
      BOOL v2 = 0;
    }
    if (v19 < 0) {
      operator delete(v18);
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  return v2;
}

void sub_2167DC68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (*(char *)(v39 - 65) < 0) {
    operator delete(*(void **)(v39 - 88));
  }
  if (*(char *)(v39 - 41) < 0) {
    operator delete(*(void **)(v39 - 64));
  }
  if (*(char *)(v39 - 17) < 0) {
    operator delete(*(void **)(v39 - 40));
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::INuPatchSchema::get(uint64_t a1, void *a2, uint64_t a3)
{
  sub_2167BAA94(a1 + 248, a2, a3);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 296, (uint64_t)(a2 + 4), a3, 4);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 344, (uint64_t)a2 + 36, a3, 4);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 392, (uint64_t)(a2 + 5), a3, 4);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 440, (uint64_t)a2 + 44, a3, 4);
  sub_2167BAB8C(a1 + 488, a2 + 6, a3);
  sub_2167BAB8C(a1 + 536, a2 + 8, a3);
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(void *)(a1 + 72)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
LABEL_3:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  if (*(void *)(a1 + 88)) {
    uint64_t v6 = nullsub_4;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_8:
  if (v6) {
    Alembic::Abc::v12::IScalarProperty::get(a1 + 56, (uint64_t)(a2 + 32), a3, 48);
  }
  if (*(char *)(a1 + 615) < 0)
  {
    if (*(void *)(a1 + 600)) {
      goto LABEL_12;
    }
  }
  else if (*(unsigned char *)(a1 + 615))
  {
LABEL_12:
    char v7 = 0;
    goto LABEL_17;
  }
  if (*(void *)(a1 + 616)) {
    char v7 = nullsub_5;
  }
  else {
    char v7 = 0;
  }
LABEL_17:
  if (v7 && Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)(a1 + 584))) {
    sub_2167BAC84(a1 + 584, a2 + 2, a3);
  }
  if (*(char *)(a1 + 663) < 0)
  {
    if (*(void *)(a1 + 648)) {
      goto LABEL_22;
    }
  }
  else if (*(unsigned char *)(a1 + 663))
  {
LABEL_22:
    uint64_t v8 = 0;
    goto LABEL_27;
  }
  if (*(void *)(a1 + 664)) {
    uint64_t v8 = nullsub_5;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_27:
  if (v8) {
    sub_2167BAB8C(a1 + 632, a2 + 10, a3);
  }
  if (*(unsigned char *)(a1 + 1464))
  {
    Alembic::Abc::v12::IScalarProperty::get(a1 + 984, (uint64_t)(a2 + 12), a3, 4);
    sub_2167BAB10(a1 + 1080, a2 + 13, a3);
    sub_2167BAB10(a1 + 1032, a2 + 15, a3);
    sub_2167BAB10(a1 + 1128, a2 + 17, a3);
    sub_2167BAB8C(a1 + 1176, a2 + 19, a3);
    sub_2167BAB8C(a1 + 1224, a2 + 21, a3);
    sub_2167BAB8C(a1 + 1272, a2 + 23, a3);
    sub_2167BAB8C(a1 + 1320, a2 + 25, a3);
    sub_2167BAB8C(a1 + 1368, a2 + 27, a3);
    sub_2167BAB8C(a1 + 1416, a2 + 29, a3);
  }
}

void sub_2167DCA1C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DCA08);
}

void sub_2167DCA50(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::INuPatchSchema::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  uint64_t v137 = a1 + 8;
  long long v138 = "INuPatchSchema::init()";
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = 0uLL;
  long long v98 = &v99;
  int v132 = 2;
  sub_2167898D0(v133, (const void ***)&v98);
  v133[3] = 0;
  long long v134 = 0;
  int v135 = 0;
  uint64_t v136 = 1;
  sub_2167877AC((uint64_t)&v98, v99.__r_.__value_.__l.__data_);
  sub_2167A030C(a2, (uint64_t)&v132);
  sub_2167A030C(a3, (uint64_t)&v132);
  *(unsigned char *)(a1 + 1464) = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  char v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v129 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v129 = 0;
  }
  uint64_t v128 = v8;
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v128, &v126, &v124);
  sub_216779094(__p, "P");
  v121[0] = 5;
  v121[2] = 1;
  v120[0] = 1;
  v120[2] = v132;
  sub_2167BAD00((uint64_t)&v98, (int *)v130, (uint64_t)__p, v121, v120);
  *(_DWORD *)(a1 + 248) = v98;
  std::string::operator=((std::string *)(a1 + 256), &v99);
  uint64_t v10 = v100;
  uint64_t v9 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  char v11 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v10;
  *(void *)(a1 + 288) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v129) {
    sub_216784EC4(v129);
  }
  uint64_t v118 = v8;
  int v119 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v118, &v126, &v124);
  sub_216779094(__p, "nu");
  sub_2167DE4D4((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = v98;
  std::string::operator=((std::string *)(a1 + 304), &v99);
  uint64_t v13 = v100;
  uint64_t v12 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v13;
  *(void *)(a1 + 336) = v12;
  if (v14) {
    sub_216784EC4(v14);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v119) {
    sub_216784EC4(v119);
  }
  uint64_t v116 = v8;
  uint64_t v117 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v116, &v126, &v124);
  sub_216779094(__p, "nv");
  sub_2167DE4D4((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = v98;
  std::string::operator=((std::string *)(a1 + 352), &v99);
  uint64_t v16 = v100;
  uint64_t v15 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  char v17 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v16;
  *(void *)(a1 + 384) = v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v117) {
    sub_216784EC4(v117);
  }
  uint64_t v114 = v8;
  int v115 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v114, &v126, &v124);
  sub_216779094(__p, "uOrder");
  sub_2167DE4D4((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 392) = v98;
  std::string::operator=((std::string *)(a1 + 400), &v99);
  uint64_t v19 = v100;
  uint64_t v18 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v19;
  *(void *)(a1 + 432) = v18;
  if (v20) {
    sub_216784EC4(v20);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v115) {
    sub_216784EC4(v115);
  }
  uint64_t v112 = v8;
  uint64_t v113 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v112, &v126, &v124);
  sub_216779094(__p, "vOrder");
  sub_2167DE4D4((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 440) = v98;
  std::string::operator=((std::string *)(a1 + 448), &v99);
  uint64_t v22 = v100;
  uint64_t v21 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 480);
  *(void *)(a1 + 472) = v22;
  *(void *)(a1 + 480) = v21;
  if (v23) {
    sub_216784EC4(v23);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v113) {
    sub_216784EC4(v113);
  }
  uint64_t v110 = v8;
  long long v111 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v110, &v126, &v124);
  sub_216779094(__p, "uKnot");
  sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 488) = v98;
  std::string::operator=((std::string *)(a1 + 496), &v99);
  uint64_t v25 = v100;
  uint64_t v24 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 520) = v25;
  int v26 = *(std::__shared_weak_count **)(a1 + 528);
  *(void *)(a1 + 528) = v24;
  if (v26) {
    sub_216784EC4(v26);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v111) {
    sub_216784EC4(v111);
  }
  uint64_t v108 = v8;
  uint64_t v109 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v108, &v126, &v124);
  sub_216779094(__p, "vKnot");
  sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 536) = v98;
  std::string::operator=((std::string *)(a1 + 544), &v99);
  uint64_t v28 = v100;
  uint64_t v27 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 568) = v28;
  uint64_t v29 = *(std::__shared_weak_count **)(a1 + 576);
  *(void *)(a1 + 576) = v27;
  if (v29) {
    sub_216784EC4(v29);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v109) {
    sub_216784EC4(v109);
  }
  sub_216779094(&v98, "w");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v31 = PropertyHeader;
  if (v99.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v98);
    if (!v31) {
      goto LABEL_86;
    }
  }
  else if (!PropertyHeader)
  {
    goto LABEL_86;
  }
  uint64_t v106 = v8;
  long long v107 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v106, &v126, &v124);
  sub_216779094(__p, "w");
  sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 632) = v98;
  std::string::operator=((std::string *)(a1 + 640), &v99);
  uint64_t v33 = v100;
  uint64_t v32 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 664) = v33;
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 672);
  *(void *)(a1 + 672) = v32;
  if (v34) {
    sub_216784EC4(v34);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v107) {
    sub_216784EC4(v107);
  }
LABEL_86:
  sub_216779094(&v98, ".velocities");
  uint64_t v35 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v36 = v35;
  if (v99.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v98);
    if (!v36) {
      goto LABEL_100;
    }
  }
  else if (!v35)
  {
    goto LABEL_100;
  }
  uint64_t v104 = v8;
  uint64_t v105 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v126 = 0;
  int v127 = 0;
  int v124 = 0;
  int v125 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v104, &v126, &v124);
  sub_216779094(__p, ".velocities");
  sub_2167BE97C((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 584) = v98;
  std::string::operator=((std::string *)(a1 + 592), &v99);
  uint64_t v38 = v100;
  uint64_t v37 = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 616) = v38;
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 624);
  *(void *)(a1 + 624) = v37;
  if (v39) {
    sub_216784EC4(v39);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
  if (v123 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
  if (v105) {
    sub_216784EC4(v105);
  }
LABEL_100:
  sub_216779094(&v98, "N");
  uint64_t v40 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v41 = v40;
  if (v99.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v98);
    if (!v41) {
      goto LABEL_110;
    }
  }
  else if (!v40)
  {
    goto LABEL_110;
  }
  uint64_t v96 = v8;
  int v97 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v130, "N");
  sub_2167BD348((uint64_t)&v98, &v96, (uint64_t)v130, a2, a3);
  sub_2167BA690(a1 + 680, (uint64_t)&v98);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v103);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v102);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
  if (v131 < 0) {
    operator delete(v130[0]);
  }
  if (v97) {
    sub_216784EC4(v97);
  }
LABEL_110:
  sub_216779094(&v98, "uv");
  uint64_t v42 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v43 = v42;
  if (v99.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v98);
    if (!v43) {
      goto LABEL_120;
    }
  }
  else if (!v42)
  {
    goto LABEL_120;
  }
  uint64_t v94 = v8;
  int v95 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v130, "uv");
  sub_2167BBFC4((uint64_t)&v98, &v94, (uint64_t)v130, a2, a3);
  sub_2167BA690(a1 + 832, (uint64_t)&v98);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v103);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v102);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
  if (v131 < 0) {
    operator delete(v130[0]);
  }
  if (v95) {
    sub_216784EC4(v95);
  }
LABEL_120:
  if (Alembic::AbcGeom::v12::INuPatchSchema::hasTrimProps((Alembic::AbcGeom::v12::INuPatchSchema *)a1))
  {
    uint64_t v92 = v8;
    uint64_t v93 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v92, &v126, &v124);
    sub_216779094(__p, "trim_nloops");
    sub_2167DE4D4((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 984) = v98;
    std::string::operator=((std::string *)(a1 + 992), &v99);
    uint64_t v45 = v100;
    uint64_t v44 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1016) = v45;
    int v46 = *(std::__shared_weak_count **)(a1 + 1024);
    *(void *)(a1 + 1024) = v44;
    if (v46) {
      sub_216784EC4(v46);
    }
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v93) {
      sub_216784EC4(v93);
    }
    uint64_t v90 = v8;
    uint64_t v91 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v90, &v126, &v124);
    sub_216779094(__p, "trim_ncurves");
    sub_2167BB37C((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1080) = v98;
    std::string::operator=((std::string *)(a1 + 1088), &v99);
    uint64_t v48 = v100;
    uint64_t v47 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1112) = v48;
    uint64_t v49 = *(std::__shared_weak_count **)(a1 + 1120);
    *(void *)(a1 + 1120) = v47;
    if (v49) {
      sub_216784EC4(v49);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v91) {
      sub_216784EC4(v91);
    }
    uint64_t v88 = v8;
    std::string v89 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v88, &v126, &v124);
    sub_216779094(__p, "trim_n");
    sub_2167BB37C((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1032) = v98;
    std::string::operator=((std::string *)(a1 + 1040), &v99);
    uint64_t v51 = v100;
    uint64_t v50 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1064) = v51;
    std::string v52 = *(std::__shared_weak_count **)(a1 + 1072);
    *(void *)(a1 + 1072) = v50;
    if (v52) {
      sub_216784EC4(v52);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v89) {
      sub_216784EC4(v89);
    }
    uint64_t v86 = v8;
    uint64_t v87 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v86, &v126, &v124);
    sub_216779094(__p, "trim_order");
    sub_2167BB37C((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1128) = v98;
    std::string::operator=((std::string *)(a1 + 1136), &v99);
    uint64_t v54 = v100;
    uint64_t v53 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1160) = v54;
    uint64_t v55 = *(std::__shared_weak_count **)(a1 + 1168);
    *(void *)(a1 + 1168) = v53;
    if (v55) {
      sub_216784EC4(v55);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v87) {
      sub_216784EC4(v87);
    }
    uint64_t v84 = v8;
    uint64_t v85 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v84, &v126, &v124);
    sub_216779094(__p, "trim_knot");
    sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1176) = v98;
    std::string::operator=((std::string *)(a1 + 1184), &v99);
    uint64_t v57 = v100;
    uint64_t v56 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1208) = v57;
    int v58 = *(std::__shared_weak_count **)(a1 + 1216);
    *(void *)(a1 + 1216) = v56;
    if (v58) {
      sub_216784EC4(v58);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v85) {
      sub_216784EC4(v85);
    }
    uint64_t v82 = v8;
    uint64_t v83 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v82, &v126, &v124);
    sub_216779094(__p, "trim_min");
    sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1224) = v98;
    std::string::operator=((std::string *)(a1 + 1232), &v99);
    uint64_t v60 = v100;
    uint64_t v59 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1256) = v60;
    int v61 = *(std::__shared_weak_count **)(a1 + 1264);
    *(void *)(a1 + 1264) = v59;
    if (v61) {
      sub_216784EC4(v61);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v83) {
      sub_216784EC4(v83);
    }
    uint64_t v80 = v8;
    uint64_t v81 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v80, &v126, &v124);
    sub_216779094(__p, "trim_max");
    sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1272) = v98;
    std::string::operator=((std::string *)(a1 + 1280), &v99);
    uint64_t v63 = v100;
    uint64_t v62 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1304) = v63;
    int v64 = *(std::__shared_weak_count **)(a1 + 1312);
    *(void *)(a1 + 1312) = v62;
    if (v64) {
      sub_216784EC4(v64);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v81) {
      sub_216784EC4(v81);
    }
    uint64_t v78 = v8;
    uint64_t v79 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v78, &v126, &v124);
    sub_216779094(__p, "trim_u");
    sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1320) = v98;
    std::string::operator=((std::string *)(a1 + 1328), &v99);
    uint64_t v66 = v100;
    uint64_t v65 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1352) = v66;
    char v67 = *(std::__shared_weak_count **)(a1 + 1360);
    *(void *)(a1 + 1360) = v65;
    if (v67) {
      sub_216784EC4(v67);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v79) {
      sub_216784EC4(v79);
    }
    uint64_t v76 = v8;
    std::string v77 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v76, &v126, &v124);
    sub_216779094(__p, "trim_v");
    sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1368) = v98;
    std::string::operator=((std::string *)(a1 + 1376), &v99);
    uint64_t v69 = v100;
    uint64_t v68 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1400) = v69;
    int v70 = *(std::__shared_weak_count **)(a1 + 1408);
    *(void *)(a1 + 1408) = v68;
    if (v70) {
      sub_216784EC4(v70);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v77) {
      sub_216784EC4(v77);
    }
    uint64_t v74 = v8;
    uint64_t v75 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v126 = 0;
    int v127 = 0;
    int v124 = 0;
    int v125 = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v130, &v74, &v126, &v124);
    sub_216779094(__p, "trim_w");
    sub_2167BB9A0((uint64_t)&v98, (int *)v130, (uint64_t)__p, a2, a3);
    *(_DWORD *)(a1 + 1416) = v98;
    std::string::operator=((std::string *)(a1 + 1424), &v99);
    uint64_t v72 = v100;
    uint64_t v71 = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1448) = v72;
    uint64_t v73 = *(std::__shared_weak_count **)(a1 + 1456);
    *(void *)(a1 + 1456) = v71;
    if (v73) {
      sub_216784EC4(v73);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v130);
    if (v75) {
      sub_216784EC4(v75);
    }
    *(unsigned char *)(a1 + 1464) = Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)(a1 + 984)) != 0;
  }
  if (v7) {
    sub_216784EC4(v7);
  }
  if (v134) {
    sub_216784EC4(v134);
  }
  sub_2167877AC((uint64_t)v133, (void *)v133[1]);
}

void sub_2167DDCB0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a33);
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v73 - 208));
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v72) {
    sub_216784EC4(v72);
  }
  sub_2167A03C4(v73 - 160);
  uint64_t v76 = __cxa_begin_catch(a1);
  std::string v77 = *(void (**)(uint64_t))(*(void *)v71 + 16);
  if (a2 == 2)
  {
    uint64_t v78 = (uint64_t)v76;
    v77(v71);
    sub_21679FA64(v73 - 96, v78);
  }
  else
  {
    v77(v71);
    sub_21679F9F4(v73 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DDC90);
}

void sub_2167DE480(_Unwind_Exception *a1)
{
}

void sub_2167DE4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
}

void sub_2167DE4C8()
{
}

uint64_t sub_2167DE4D4(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v10 = *a2;
  *((void *)&v45 + 1) = 0;
  v46[0] = 0;
  *(void *)&long long v45 = (char *)&v45 + 8;
  int v47 = v10;
  sub_2167898D0(v48, (const void ***)&v45);
  v48[3] = 0;
  uint64_t v49 = 0;
  int v50 = 0;
  uint64_t v51 = 1;
  sub_2167877AC((uint64_t)&v45, *((void **)&v45 + 1));
  sub_2167A030C(a4, (uint64_t)&v47);
  sub_2167A030C(a5, (uint64_t)&v47);
  *(_DWORD *)a1 = v47;
  v46[34] = a1;
  v46[35] = "ITypedScalarProperty::ITypedScalarProperty()";
  uint64_t v12 = *((void *)a2 + 4);
  char v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v31 = sub_216779180(v46, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v31, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v33 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v33, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  uint64_t v14 = v13;
  if (!v13)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v34 = sub_216779180(v46, (uint64_t)"Nonexistent scalar property: ", 29);
    int v35 = *(char *)(a3 + 23);
    if (v35 >= 0) {
      uint64_t v36 = a3;
    }
    else {
      uint64_t v36 = *(void *)a3;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v37 = *(void *)(a3 + 8);
    }
    sub_216779180(v34, v36, v37);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v38 = __cxa_allocate_exception(0x20uLL);
    uint64_t v39 = sub_216779038(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  BOOL v16 = *(_DWORD *)(v13 + 56) == 6 && *(unsigned char *)(v13 + 60) == 1 && *(_DWORD *)(v13 + 24) == 1;
  if (!v16 || (sub_2167DEA58(v13 + 32, v51) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v20 = sub_216779180(v46, (uint64_t)"Incorrect match of header datatype: ", 36);
    uint64_t v21 = sub_21677D5B0(v20, (int *)(v14 + 56));
    uint64_t v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    uint64_t v40 = 0x100000006;
    uint64_t v23 = sub_21677D5B0(v22, (int *)&v40);
    uint64_t v24 = sub_216779180(v23, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_216779094(v41, "interpretation");
    sub_21679F2AC(v14 + 32, (const void **)v41, __p);
    if ((v44 & 0x80u) == 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v26 = v44;
    }
    else {
      uint64_t v26 = (uint64_t)__p[1];
    }
    uint64_t v27 = sub_216779180(v24, (uint64_t)v25, v26);
    uint64_t v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"", 0);
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v29 = __cxa_allocate_exception(0x20uLL);
    int v30 = sub_216779038(v29, (uint64_t)__p);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 88))(&v45, v12, a3);
  long long v17 = v45;
  long long v45 = 0uLL;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v49) {
    sub_216784EC4(v49);
  }
  sub_2167877AC((uint64_t)v48, (void *)v48[1]);
  return a1;
}

void sub_2167DE910(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DE674);
}

void sub_2167DEA18()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2167DEA48);
}

uint64_t sub_2167DEA58(uint64_t a1, int a2)
{
  if (a2) {
    return 1;
  }
  sub_216779094(__p, "interpretation");
  sub_21679F2AC(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    BOOL v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    BOOL v2 = v8 == 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2167DEAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::OPointsSchema(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167DEDD0(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C749DD0;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  sub_2167E1CE0(a1 + 392);
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OPointsSchema::init((Alembic::AbcGeom::v12::OPointsSchema *)a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167DED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  sub_2167C5410(v16);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15);
  sub_2167DF1A4(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2167DEDD0(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167E1DB0(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C749E58;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  sub_2167E1EAC(a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167DF010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::OScalarProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v21);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v18 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::init(Alembic::AbcGeom::v12::OPointsSchema *this, int a2, char a3)
{
  *((unsigned char *)this + 568) = a3;
  *((void *)this + 72) = 0;
  *((_DWORD *)this + 146) = a2;
  if ((a3 & 1) == 0)
  {
    Alembic::AbcGeom::v12::OPointsSchema::createPositionProperty(this);
    Alembic::AbcGeom::v12::OPointsSchema::createIdProperty(this);
  }
}

void sub_2167DF114(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DF100);
}

void sub_2167DF184(_Unwind_Exception *a1)
{
}

void *sub_2167DF1A4(void *a1)
{
  *a1 = &unk_26C749E58;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::OPointsSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  char v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v25 = *((void *)a2 + 4);
  uint64_t v26 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *a2;
  LODWORD(v23) = 1;
  LODWORD(v24) = v12;
  sub_2167DEDD0(a1, &v25, a3, &v23, a4, a5, a6);
  if (v26) {
    sub_216784EC4(v26);
  }
  *(void *)a1 = &unk_26C749DD0;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  sub_2167E1CE0(a1 + 392);
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  sub_2167CC320(a4, a5, a6, &v21, &v23);
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  int v13 = sub_2167CC43C(a4, a5, a6, &v21);
  if (v23)
  {
    uint64_t v14 = *((void *)a2 + 4);
    int v15 = (std::__shared_weak_count *)*((void *)a2 + 5);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 24))(&v19);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 24))(&v21);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v23);
    if (v22) {
      sub_216784EC4(v22);
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v15) {
      sub_216784EC4(v15);
    }
  }
  else
  {
    int v16 = v13;
  }
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  char v17 = sub_2167CD0F8(a4, a5, a6, &v21);
  Alembic::AbcGeom::v12::OPointsSchema::init((Alembic::AbcGeom::v12::OPointsSchema *)a1, v16, v17);
  if (v24) {
    sub_216784EC4(v24);
  }
  return a1;
}

void sub_2167DF474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  sub_2167C5410(v16);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15);
  sub_2167DF1A4(v14);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::set(Alembic::AbcGeom::v12::OPointsSchema *this, uint64_t a2)
{
  if (*((unsigned char *)this + 568)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(void *)a2 == 0;
  }
  if (!v4)
  {
    v59[33] = (char *)this + 8;
    v59[34] = "OPointsSchema::set()";
    char v5 = (void *)(a2 + 40);
    if (*(_DWORD *)(a2 + 48) == 127 || !*v5 && *(void *)(a2 + 64) == *(void *)(a2 + 56)) {
      char v6 = 0;
    }
    else {
      char v6 = nullsub_10;
    }
    if (!v6) {
      goto LABEL_21;
    }
    if (*((char *)this + 375) < 0)
    {
      if (!*((void *)this + 45)) {
        goto LABEL_19;
      }
    }
    else if (!*((unsigned char *)this + 375))
    {
LABEL_19:
      if (!*((void *)this + 47)) {
        goto LABEL_20;
      }
LABEL_21:
      if (*(_DWORD *)(a2 + 128) == 127 || !*(void *)(a2 + 120) && *(void *)(a2 + 144) == *(void *)(a2 + 136)) {
        char v7 = 0;
      }
      else {
        char v7 = nullsub_13;
      }
      if (v7) {
        char v8 = nullsub_15;
      }
      else {
        char v8 = 0;
      }
      if (v8 && (sub_2167C5D84((uint64_t)this + 392) & 1) == 0) {
        Alembic::AbcGeom::v12::OPointsSchema::createWidthsProperty(this, a2);
      }
      if (*((void *)this + 72))
      {
        int v50 = *((_DWORD *)this + 62);
        if (*((char *)this + 279) < 0)
        {
          sub_216778F24(&v51, *((void **)this + 32), *((void *)this + 33));
        }
        else
        {
          long long v51 = *((_OWORD *)this + 16);
          uint64_t v52 = *((void *)this + 34);
        }
        uint64_t v10 = *((void *)this + 36);
        uint64_t v53 = *((void *)this + 35);
        uint64_t v54 = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = *(void *)(a2 + 5);
        *(void *)int v46 = *(void *)a2;
        *(void *)&v46[5] = v11;
        long long __p = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
        if (SHIBYTE(v52) < 0)
        {
          if (*((void *)&v51 + 1)) {
            goto LABEL_42;
          }
        }
        else if (HIBYTE(v52))
        {
LABEL_42:
          int v12 = 0;
          goto LABEL_47;
        }
        if (v53) {
          int v12 = nullsub_7;
        }
        else {
          int v12 = 0;
        }
LABEL_47:
        if (v12)
        {
          if (*(_DWORD *)&v46[8] == 127 || !*(void *)v46 && v48 == __p) {
            int v13 = 0;
          }
          else {
            int v13 = nullsub_19;
          }
          if (v13) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v50);
          }
          else {
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v50);
          }
        }
        if (__p)
        {
          uint64_t v48 = __p;
          operator delete(__p);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v50);
        int v41 = *((_DWORD *)this + 74);
        if (*((char *)this + 327) < 0)
        {
          sub_216778F24(&v42, *((void **)this + 38), *((void *)this + 39));
        }
        else
        {
          long long v42 = *((_OWORD *)this + 19);
          uint64_t v43 = *((void *)this + 40);
        }
        uint64_t v16 = *((void *)this + 42);
        uint64_t v44 = *((void *)this + 41);
        uint64_t v45 = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *(void *)(a2 + 85);
        *(void *)uint64_t v37 = *(void *)(a2 + 80);
        *(void *)&v37[5] = v17;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        sub_21677EA60(&v38, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
        if (SHIBYTE(v43) < 0)
        {
          if (*((void *)&v42 + 1)) {
            goto LABEL_78;
          }
        }
        else if (HIBYTE(v43))
        {
LABEL_78:
          uint64_t v18 = 0;
          goto LABEL_83;
        }
        if (v44) {
          uint64_t v18 = nullsub_7;
        }
        else {
          uint64_t v18 = 0;
        }
LABEL_83:
        if (v18)
        {
          if (*(_DWORD *)&v37[8] == 127 || !*(void *)v37 && v39 == v38) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = nullsub_24;
          }
          if (v19) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v41);
          }
          else {
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v41);
          }
        }
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v41);
        int v32 = *((_DWORD *)this + 86);
        if (*((char *)this + 375) < 0)
        {
          sub_216778F24(&v33, *((void **)this + 44), *((void *)this + 45));
        }
        else
        {
          long long v33 = *((_OWORD *)this + 22);
          uint64_t v34 = *((void *)this + 46);
        }
        uint64_t v20 = *((void *)this + 48);
        uint64_t v35 = *((void *)this + 47);
        uint64_t v36 = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)uint64_t v28 = *v5;
        *(void *)&v28[5] = *(void *)(a2 + 45);
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        sub_21677EA60(&v29, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
        if (SHIBYTE(v34) < 0)
        {
          if (*((void *)&v33 + 1)) {
            goto LABEL_101;
          }
        }
        else if (HIBYTE(v34))
        {
LABEL_101:
          uint64_t v21 = 0;
LABEL_106:
          if (v21)
          {
            if (*(_DWORD *)&v28[8] == 127 || !*(void *)v28 && v30 == v29) {
              uint64_t v22 = 0;
            }
            else {
              uint64_t v22 = nullsub_10;
            }
            if (v22) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v32);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v32);
            }
          }
          if (v29)
          {
            uint64_t v30 = v29;
            operator delete(v29);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v32);
          if (*(double *)(a2 + 232) <= *(double *)(a2 + 208)
            || *(double *)(a2 + 240) <= *(double *)(a2 + 216)
            || *(double *)(a2 + 248) <= *(double *)(a2 + 224))
          {
            if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
              uint64_t v23 = 0;
            }
            else {
              uint64_t v23 = nullsub_19;
            }
            if (v23)
            {
              sub_2167C354C((void *)a2, (uint64_t)v58);
              Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), v58);
            }
            else
            {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
            }
          }
          else
          {
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), (const void *)(a2 + 208));
          }
          if (sub_2167C5D84((uint64_t)this + 392)) {
            uint64_t v24 = nullsub_18;
          }
          else {
            uint64_t v24 = 0;
          }
          if (v24) {
            sub_2167C3E04((uint64_t)this + 392, a2 + 120);
          }
LABEL_149:
          ++*((void *)this + 72);
          return;
        }
        if (v35) {
          uint64_t v21 = nullsub_7;
        }
        else {
          uint64_t v21 = 0;
        }
        goto LABEL_106;
      }
      if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = nullsub_19;
      }
      if (!v9
        || (*(_DWORD *)(a2 + 88) == 127 || !*(void *)(a2 + 80) && *(void *)(a2 + 104) == *(void *)(a2 + 96)
          ? (uint64_t v14 = 0)
          : (uint64_t v14 = nullsub_24),
            !v14))
      {
        sub_216778A5C((uint64_t)v58);
        sub_216779180(v59, (uint64_t)"Sample 0 must have valid data for points and ids", 48);
        std::stringbuf::str();
        sub_216778E70(v57, &v55);
        if (v56 < 0) {
          operator delete((void *)v55);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        uint64_t v27 = sub_216779038(exception, (uint64_t)v57);
        __cxa_throw(v27, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
      }
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
      if (*((char *)this + 375) < 0)
      {
        if (*((void *)this + 45)) {
          goto LABEL_67;
        }
      }
      else if (*((unsigned char *)this + 375))
      {
LABEL_67:
        int v15 = 0;
LABEL_138:
        if (v15) {
          Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
        }
        if (sub_2167C5D84((uint64_t)this + 392)) {
          uint64_t v25 = nullsub_18;
        }
        else {
          uint64_t v25 = 0;
        }
        if (v25) {
          sub_2167C3E04((uint64_t)this + 392, a2 + 120);
        }
        if (*(double *)(a2 + 232) >= *(double *)(a2 + 208)
          && *(double *)(a2 + 240) >= *(double *)(a2 + 216)
          && *(double *)(a2 + 248) >= *(double *)(a2 + 224))
        {
          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), (const void *)(a2 + 208));
        }
        else
        {
          sub_2167C354C((void *)a2, (uint64_t)v58);
          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), v58);
        }
        goto LABEL_149;
      }
      if (*((void *)this + 47)) {
        int v15 = nullsub_7;
      }
      else {
        int v15 = 0;
      }
      goto LABEL_138;
    }
LABEL_20:
    Alembic::AbcGeom::v12::OPointsSchema::createVelocityProperty(this);
    goto LABEL_21;
  }

  Alembic::AbcGeom::v12::OPointsSchema::selectiveSet(this, a2);
}

void sub_2167DFDA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::exception a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_216779148(&a46);
  sub_216778D38((uint64_t)&a50);
  uint64_t v53 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v50 - 64, (uint64_t)v53);
  }
  else {
    sub_21679F9F4(v50 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167DFD04);
}

void sub_2167DFEA0(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OPointsSchema::selectiveSet(Alembic::AbcGeom::v12::OPointsSchema *this, uint64_t a2)
{
  uint64_t v43 = (char *)this + 8;
  uint64_t v44 = "OPointsSchema::set()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = nullsub_19;
  }
  if (v4)
  {
    if (*((char *)this + 279) < 0)
    {
      if (!*((void *)this + 33)) {
        goto LABEL_11;
      }
    }
    else if (!*((unsigned char *)this + 279))
    {
LABEL_11:
      if (*((void *)this + 35)) {
        goto LABEL_13;
      }
    }
    Alembic::AbcGeom::v12::OPointsSchema::createPositionProperty(this);
  }
LABEL_13:
  int v5 = *((char *)this + 279);
  if (v5 < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_56;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
    goto LABEL_56;
  }
  if (*((void *)this + 35)) {
    char v6 = nullsub_7;
  }
  else {
    char v6 = 0;
  }
  if (!v6) {
    goto LABEL_56;
  }
  int v38 = *((_DWORD *)this + 62);
  if (v5 < 0)
  {
    sub_216778F24(&v39, *((void **)this + 32), *((void *)this + 33));
  }
  else
  {
    long long v39 = *((_OWORD *)this + 16);
    uint64_t v40 = *((void *)this + 34);
  }
  uint64_t v7 = *((void *)this + 36);
  uint64_t v41 = *((void *)this + 35);
  uint64_t v42 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a2 + 5);
  *(void *)uint64_t v34 = *(void *)a2;
  *(void *)&v34[5] = v8;
  long long __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v40) < 0)
  {
    if (*((void *)&v39 + 1)) {
      goto LABEL_28;
    }
LABEL_30:
    if (v41) {
      uint64_t v9 = nullsub_7;
    }
    else {
      uint64_t v9 = 0;
    }
    goto LABEL_33;
  }
  if (!HIBYTE(v40)) {
    goto LABEL_30;
  }
LABEL_28:
  uint64_t v9 = 0;
LABEL_33:
  if (v9)
  {
    if (*(_DWORD *)&v34[8] == 127 || !*(void *)v34 && v36 == __p) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = nullsub_19;
    }
    if (v10) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v38);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v38);
    }
  }
  if (__p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v38);
  if (*(double *)(a2 + 232) <= *(double *)(a2 + 208)
    || *(double *)(a2 + 240) <= *(double *)(a2 + 216)
    || *(double *)(a2 + 248) <= *(double *)(a2 + 224))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = nullsub_19;
    }
    if (v11)
    {
      sub_2167C354C((void *)a2, (uint64_t)v33);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), v33);
    }
    else
    {
      Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56), (const void *)(a2 + 208));
  }
LABEL_56:
  int v12 = (void *)(a2 + 80);
  if (*(_DWORD *)(a2 + 88) == 127 || !*v12 && *(void *)(a2 + 104) == *(void *)(a2 + 96)) {
    int v13 = 0;
  }
  else {
    int v13 = nullsub_24;
  }
  if (v13)
  {
    if (*((char *)this + 327) < 0)
    {
      if (!*((void *)this + 39)) {
        goto LABEL_66;
      }
    }
    else if (!*((unsigned char *)this + 327))
    {
LABEL_66:
      if (*((void *)this + 41)) {
        goto LABEL_68;
      }
    }
    Alembic::AbcGeom::v12::OPointsSchema::createIdProperty(this);
  }
LABEL_68:
  int v14 = *((char *)this + 327);
  if (v14 < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_100;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
    goto LABEL_100;
  }
  if (*((void *)this + 41)) {
    int v15 = nullsub_7;
  }
  else {
    int v15 = 0;
  }
  if (!v15) {
    goto LABEL_100;
  }
  int v28 = *((_DWORD *)this + 74);
  if (v14 < 0)
  {
    sub_216778F24(&v29, *((void **)this + 38), *((void *)this + 39));
  }
  else
  {
    long long v29 = *((_OWORD *)this + 19);
    uint64_t v30 = *((void *)this + 40);
  }
  uint64_t v16 = *((void *)this + 42);
  uint64_t v31 = *((void *)this + 41);
  uint64_t v32 = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v24 = *v12;
  *(void *)&v24[5] = *(void *)(a2 + 85);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_21677EA60(&v25, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
  if (SHIBYTE(v30) < 0)
  {
    if (*((void *)&v29 + 1)) {
      goto LABEL_83;
    }
LABEL_85:
    if (v31) {
      uint64_t v17 = nullsub_7;
    }
    else {
      uint64_t v17 = 0;
    }
    goto LABEL_88;
  }
  if (!HIBYTE(v30)) {
    goto LABEL_85;
  }
LABEL_83:
  uint64_t v17 = 0;
LABEL_88:
  if (v17)
  {
    if (*(_DWORD *)&v24[8] == 127 || !*(void *)v24 && v26 == v25) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = nullsub_24;
    }
    if (v18) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v28);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v28);
    }
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
LABEL_100:
  if (*(_DWORD *)(a2 + 48) == 127 || !*(void *)(a2 + 40) && *(void *)(a2 + 64) == *(void *)(a2 + 56)) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = nullsub_10;
  }
  if (v19)
  {
    if (*((char *)this + 375) < 0)
    {
      if (!*((void *)this + 45)) {
        goto LABEL_110;
      }
    }
    else if (!*((unsigned char *)this + 375))
    {
LABEL_110:
      if (*((void *)this + 47)) {
        goto LABEL_112;
      }
    }
    Alembic::AbcGeom::v12::OPointsSchema::createVelocityProperty(this);
  }
LABEL_112:
  if (*((char *)this + 375) < 0)
  {
    if (*((void *)this + 45)) {
      goto LABEL_114;
    }
  }
  else if (*((unsigned char *)this + 375))
  {
LABEL_114:
    uint64_t v20 = 0;
    goto LABEL_119;
  }
  if (*((void *)this + 47)) {
    uint64_t v20 = nullsub_7;
  }
  else {
    uint64_t v20 = 0;
  }
LABEL_119:
  if (v20) {
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
  }
  if (*(_DWORD *)(a2 + 128) == 127 || !*(void *)(a2 + 120) && *(void *)(a2 + 144) == *(void *)(a2 + 136)) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = nullsub_13;
  }
  if (v21) {
    uint64_t v22 = nullsub_15;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v22 && (sub_2167C5D84((uint64_t)this + 392) & 1) == 0) {
    Alembic::AbcGeom::v12::OPointsSchema::createWidthsProperty(this, a2);
  }
  if (sub_2167C5D84((uint64_t)this + 392)) {
    uint64_t v23 = nullsub_18;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23) {
    sub_2167C3E04((uint64_t)this + 392, a2 + 120);
  }
  ++*((void *)this + 72);
}

void sub_2167E0528(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v31 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v29 - 48, (uint64_t)v31);
  }
  else {
    sub_21679F9F4(v29 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E0514);
}

void sub_2167E05C4(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OPointsSchema::createVelocityProperty(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v17 = *((void *)this + 5);
  uint64_t v18 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".velocities");
  sub_2167E19B8((uint64_t)this, &v10);
  int v12 = 4;
  int v13 = &v10;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  v7[0] = 0;
  v7[2] = 0;
  sub_2167C6BC0((uint64_t)&v19, &v17, (uint64_t)&__p, &v12, v9, v8, v7);
  *((_DWORD *)this + 86) = v19;
  std::string::operator=((std::string *)((char *)this + 352), &v20);
  uint64_t v4 = v21;
  uint64_t v3 = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 48);
  *((void *)this + 47) = v4;
  *((void *)this + 48) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v19);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  long long __p = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  sub_2167C6418(&v19, (uint64_t *)&__p);
  if (*((void *)this + 72))
  {
    unint64_t v6 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
      ++v6;
    }
    while (v6 < *((void *)this + 72));
  }
  if (v20.__r_.__value_.__l.__size_)
  {
    v20.__r_.__value_.__r.__words[2] = v20.__r_.__value_.__l.__size_;
    operator delete((void *)v20.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    int v15 = __p;
    operator delete(__p);
  }
}

void sub_2167E075C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OPointsSchema::createWidthsProperty(void *a1, uint64_t a2)
{
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v45 = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = 0x10000000ALL;
  long long v39 = 0u;
  *(_OWORD *)uint64_t v40 = 0u;
  *(void *)&v40[16] = 0x100000005;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 127;
  if (*(_DWORD *)(a2 + 168) == 127 || !*(void *)(a2 + 160) && *(void *)(a2 + 184) == *(void *)(a2 + 176)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_21;
  }
  if (v4)
  {
    sub_2167CA034(v35, (uint64_t *)&v48);
    sub_2167C71F8(&v31, (uint64_t *)&v45);
    sub_2167CA0D8((uint64_t)&__dst, (uint64_t *)v35, &v31, *(_DWORD *)(a2 + 200));
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v23, v24[0], (v24[0] - (uint64_t)v23) >> 3);
    *(void *)&v40[8] = v25;
    *(void *)&v40[13] = *(void *)((char *)&v25 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 3);
    int v44 = v29;
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v24[0] = (uint64_t)v23;
      operator delete(v23);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    int v5 = (std::__shared_weak_count *)a1[6];
    uint64_t v20 = a1[5];
    uint64_t v21 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, ".widths");
    int v6 = *(_DWORD *)(a2 + 200);
    sub_2167E19B8((uint64_t)a1, &v18);
    LODWORD(v31) = 4;
    uint64_t v32 = &v18;
    int v16 = 0;
    int v17 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167CA18C((char *)&__dst, &v20, (uint64_t)v35, 1, v6, 1, &v31, &v16, &v14);
    sub_2167C5310((uint64_t)(a1 + 49), &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v30);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v24);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    uint64_t v7 = v21;
    if (v21) {
LABEL_24:
    }
      sub_216784EC4(v7);
  }
  else
  {
    sub_2167CA034(v35, (uint64_t *)&v48);
    int v9 = *(_DWORD *)(a2 + 200);
    *(void *)&long long __dst = *(void *)v35;
    *(void *)((char *)&__dst + 5) = *(void *)&v35[5];
    uint64_t v23 = 0;
    v24[0] = 0;
    v24[1] = 0;
    sub_21677EA60(&v23, v36, (uint64_t)v37, (v37 - v36) >> 3);
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = 0x100000005;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long __p = 0;
    int v29 = v9;
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v23, v24[0], (v24[0] - (uint64_t)v23) >> 3);
    *(void *)&v40[8] = v25;
    *(void *)&v40[13] = *(void *)((char *)&v25 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 3);
    int v44 = v29;
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v24[0] = (uint64_t)v23;
      operator delete(v23);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    uint64_t v10 = (std::__shared_weak_count *)a1[6];
    uint64_t v12 = a1[5];
    int v13 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, ".widths");
    int v11 = *(_DWORD *)(a2 + 200);
    sub_2167E19B8((uint64_t)a1, &v18);
    LODWORD(v31) = 4;
    uint64_t v32 = &v18;
    int v16 = 0;
    int v17 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167CA18C((char *)&__dst, &v12, (uint64_t)v35, 0, v11, 1, &v31, &v16, &v14);
    sub_2167C5310((uint64_t)(a1 + 49), &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v30);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v24);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    uint64_t v7 = v13;
    if (v13) {
      goto LABEL_24;
    }
  }
  if (a1[72])
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C3E04((uint64_t)(a1 + 49), (uint64_t)&v38);
      ++v8;
    }
    while (v8 < a1[72]);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if ((void)v39)
  {
    *((void *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  if (v45)
  {
    int v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_2167E0C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  sub_2167C5410((uint64_t)&a20);
  if (a17) {
    sub_216784EC4(a17);
  }
  if (*(char *)(v45 - 233) < 0) {
    operator delete(*(void **)(v45 - 256));
  }
  if (a11) {
    sub_216784EC4(a11);
  }
  sub_2167C5204((void *)(v45 - 216));
  uint64_t v47 = *(void **)(v45 - 128);
  if (v47)
  {
    *(void *)(v45 - 120) = v47;
    operator delete(v47);
  }
  uint64_t v48 = *(void **)(v45 - 104);
  if (v48)
  {
    *(void *)(v45 - 96) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::createPositionProperty(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = (uint64_t *)v25;
  sub_2167C4D74(&v24, 2);
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v18 = *((void *)this + 5);
  uint64_t v19 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "P");
  LODWORD(v12) = 3;
  int v13 = &v24;
  int v3 = *((_DWORD *)this + 146);
  v17[0] = 2;
  void v17[2] = v3;
  v16[0] = 0;
  void v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  sub_2167C5E88((uint64_t)&v20, &v18, (uint64_t)__p, &v12, v17, v16, v15);
  *((_DWORD *)this + 62) = v20;
  std::string::operator=((std::string *)((char *)this + 256), &v21);
  uint64_t v5 = v22;
  uint64_t v4 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 36);
  *((void *)this + 35) = v5;
  *((void *)this + 36) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v20);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  sub_2167C6418(&v20, (uint64_t *)&v12);
  if (*((void *)this + 72))
  {
    unint64_t v7 = 0;
    do
    {
      sub_2167C64C8(__p, &v20);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v10)
      {
        int v11 = v10;
        operator delete(v10);
      }
      ++v7;
      unint64_t v8 = *((void *)this + 72);
    }
    while (v7 < v8);
  }
  else
  {
    unint64_t v8 = 0;
  }
  sub_2167E17A4((uint64_t)this, *((_DWORD *)this + 146), v8);
  if (v21.__r_.__value_.__l.__size_)
  {
    v21.__r_.__value_.__r.__words[2] = v21.__r_.__value_.__l.__size_;
    operator delete((void *)v21.__r_.__value_.__l.__size_);
  }
  if (v12)
  {
    int v13 = (uint64_t **)v12;
    operator delete(v12);
  }
  sub_2167877AC((uint64_t)&v24, v25[0]);
}

void sub_2167E0F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v30 = *(void **)(v28 - 88);
  if (v30)
  {
    *(void *)(v28 - 80) = v30;
    operator delete(v30);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_2167877AC(v28 - 56, *(void **)(v28 - 48));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPointsSchema::createIdProperty(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v23 = (uint64_t *)v24;
  sub_2167C4D74(&v23, 2);
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v17 = *((void *)this + 5);
  uint64_t v18 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".pointIds");
  LODWORD(v11) = 3;
  uint64_t v12 = &v23;
  int v3 = *((_DWORD *)this + 146);
  v16[0] = 2;
  void v16[2] = v3;
  v15[0] = 0;
  v15[2] = 0;
  v14[0] = 0;
  v14[2] = 0;
  sub_2167E241C((uint64_t)&v19, &v17, (uint64_t)__p, &v11, v16, v15, v14);
  *((_DWORD *)this + 74) = v19;
  std::string::operator=((std::string *)((char *)this + 304), &v20);
  uint64_t v5 = v21;
  uint64_t v4 = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 42);
  *((void *)this + 41) = v5;
  *((void *)this + 42) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v19);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_2167E28F8(&v19, (uint64_t *)&v11);
  if (*((void *)this + 72))
  {
    unint64_t v7 = 0;
    do
    {
      sub_2167E299C(__p, &v19);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
      if (v9)
      {
        uint64_t v10 = v9;
        operator delete(v9);
      }
      ++v7;
    }
    while (v7 < *((void *)this + 72));
  }
  if (v20.__r_.__value_.__l.__size_)
  {
    v20.__r_.__value_.__r.__words[2] = v20.__r_.__value_.__l.__size_;
    operator delete((void *)v20.__r_.__value_.__l.__size_);
  }
  if (v11)
  {
    uint64_t v12 = (uint64_t **)v11;
    operator delete(v11);
  }
  sub_2167877AC((uint64_t)&v23, v24[0]);
}

void sub_2167E11C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2167877AC(v28 - 56, *(void **)(v28 - 48));
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::setFromPrevious(Alembic::AbcGeom::v12::OPointsSchema *this)
{
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    BOOL v2 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    BOOL v2 = nullsub_7;
  }
  else {
    BOOL v2 = 0;
  }
LABEL_8:
  if (v2) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 248));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_12:
    int v3 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 41)) {
    int v3 = nullsub_7;
  }
  else {
    int v3 = 0;
  }
LABEL_17:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 296));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_21:
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 11)) {
    uint64_t v4 = nullsub_6;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_26:
  if (v4) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
  }
  if (*((char *)this + 375) < 0)
  {
    if (*((void *)this + 45)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 375))
  {
LABEL_30:
    uint64_t v5 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 47)) {
    uint64_t v5 = nullsub_7;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_35:
  if (v5) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 344));
  }
  int v6 = (char *)this + 392;
  uint64_t result = sub_2167C5D84((uint64_t)v6);
  if (result) {
    unint64_t v8 = nullsub_18;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8) {
    return sub_2167C4CD4(v6);
  }
  return result;
}

void sub_2167E1414(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E1404);
}

void sub_2167E1448(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling(Alembic::AbcGeom::v12::OPointsSchema *this, int a2)
{
  *((_DWORD *)this + 146) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    int v3 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    int v3 = nullsub_7;
  }
  else {
    int v3 = 0;
  }
LABEL_8:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 248));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_12:
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 41)) {
    uint64_t v4 = nullsub_7;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_17:
  if (v4) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 296));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_21:
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 11)) {
    uint64_t v5 = nullsub_6;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_26:
  if (v5) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 56));
  }
  uint64_t result = sub_2167C5D84((uint64_t)this + 392);
  if (result) {
    unint64_t v7 = nullsub_18;
  }
  else {
    unint64_t v7 = 0;
  }
  if (v7) {
    uint64_t result = sub_2167C59A4((unsigned char *)this + 392);
  }
  if (*((char *)this + 375) < 0)
  {
    if (*((void *)this + 45)) {
      goto LABEL_35;
    }
LABEL_37:
    if (*((void *)this + 47)) {
      unint64_t v8 = nullsub_7;
    }
    else {
      unint64_t v8 = 0;
    }
    goto LABEL_40;
  }
  if (!*((unsigned char *)this + 375)) {
    goto LABEL_37;
  }
LABEL_35:
  unint64_t v8 = 0;
LABEL_40:
  if (v8) {
    return Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)((char *)this + 344));
  }
  return result;
}

void sub_2167E1644(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E1630);
}

void sub_2167E1678(_Unwind_Exception *a1)
{
}

int *Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling(Alembic::AbcGeom::v12::OPointsSchema *a1, void *a2)
{
  uint64_t result = (int *)((char *)a1 + 8);
  unint64_t v7 = result;
  unint64_t v8 = "OPointsSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_2167B7AC8(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    int v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_2167E171C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E170CLL);
}

void sub_2167E1784(_Unwind_Exception *a1)
{
}

void sub_2167E17A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v20 = a1 + 8;
  uint64_t v21 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
LABEL_5:
    if (*(void *)(a1 + 88)) {
      return;
    }
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".selfBnds");
  v13[0] = 2;
  void v13[2] = a2;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167B9640((uint64_t)v18, &v16, (uint64_t)__p, v13, v12, v11, v10);
  *(_DWORD *)(a1 + 56) = v18[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v18 + 8));
  int64x2_t v7 = v19;
  if (v19.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(int64x2_t *)(a1 + 88) = v7;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  v18[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v18[1] = xmmword_217409FA0;
  int64x2_t v19 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    int v9 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v9, v18);
      --a3;
    }
    while (a3);
  }
}

void sub_2167E1914(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 96));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  uint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v25 - 48, (uint64_t)v28);
  }
  else {
    sub_21679F9F4(v25 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E1900);
}

void sub_2167E1998(_Unwind_Exception *a1)
{
}

void sub_2167E19B8(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 279) < 0)
  {
    if (!*(void *)(a1 + 264)) {
      goto LABEL_5;
    }
LABEL_8:
    sub_2167B7AC8((int *)(a1 + 8), (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v6, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return;
  }
  if (*(unsigned char *)(a1 + 279)) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*(void *)(a1 + 280)) {
    goto LABEL_8;
  }
  uint64_t v3 = sub_2167C5C4C(a1 + 248);
  uint64_t v4 = *(void *)(v3 + 72);
  *a2 = *(void *)(v3 + 64);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2167E1A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

void sub_2167E1A84(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2167E2B14(a1);

  operator delete(v1);
}

void sub_2167E1AAC(uint64_t a1)
{
  sub_2167A13A4(a1 + 248);
  sub_2167A13A4(a1 + 296);
  sub_2167A13A4(a1 + 344);
  sub_2167C5E20(a1 + 392);

  sub_2167E1C60(a1);
}

uint64_t sub_2167E1B00(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return *(unsigned char *)(a1 + 568) != 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return *(unsigned char *)(a1 + 568) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return *(unsigned char *)(a1 + 568) != 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return *(unsigned char *)(a1 + 568) != 0;
    }
    if (*(void *)(a1 + 280))
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(void *)(a1 + 312)) {
          return *(unsigned char *)(a1 + 568) != 0;
        }
      }
      else if (*(unsigned char *)(a1 + 327))
      {
        return *(unsigned char *)(a1 + 568) != 0;
      }
      if (*(void *)(a1 + 328)) {
        return 1;
      }
    }
  }
  return *(unsigned char *)(a1 + 568) != 0;
}

void *sub_2167E1B78(void *a1)
{
  *a1 = &unk_26C749E58;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_2167E1BE4(void *a1)
{
  *a1 = &unk_26C749E58;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  operator delete(a1);
}

void sub_2167E1C60(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_2167E1CB4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_2167E1CE0(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_216779094((void *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_216779094((void *)(a1 + 80), "");
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x20000007FLL;
  sub_216779094((void *)(a1 + 136), "");
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_2167E1D74(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2167E1DB0(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749E88;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167E1F88(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167E1E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167E1EAC(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0) {
    sub_2167E17A4(a1, a2, 0);
  }
}

void sub_2167E1EF8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E1EE4);
}

void sub_2167E1F68(_Unwind_Exception *a1)
{
}

void sub_2167E1F88(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v23 = 0;
  v24[0] = 0;
  uint64_t v22 = (uint64_t *)&v23;
  int v25 = 2;
  sub_2167898D0((uint64_t *)v26, (const void ***)&v22);
  v26[3] = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = 1;
  sub_2167877AC((uint64_t)&v22, v23);
  sub_2167A030C(a4, (uint64_t)&v25);
  sub_2167A030C(a5, (uint64_t)&v25);
  sub_2167A030C(a6, (uint64_t)&v25);
  sub_2167A030C(a7, (uint64_t)&v25);
  *(_DWORD *)(a1 + 8) = v25;
  v24[33] = a1 + 8;
  v24[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v22);
    sub_216779180(v24, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v22, v26);
  if (HIDWORD(v29) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Points_v1");
    uint64_t v30 = __p;
    uint64_t v13 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A331, (long long **)&v30);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (HIDWORD(v29) != 1)
    {
      sub_216779094(__p, "schemaBaseType");
      sub_216779094(&__str, "AbcGeom_GeomBase_v1");
      uint64_t v30 = __p;
      uint64_t v14 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A331, (long long **)&v30);
      std::string::operator=((std::string *)(v14 + 7), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v15;
  if (v16)
  {
    sub_216784EC4(v16);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v22, v23);
  if (v27) {
    sub_216784EC4(v27);
  }
  sub_2167877AC((uint64_t)v26, v26[1]);
}

void sub_2167E2280(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E21CCLL);
}

void sub_2167E2364(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E23B0(uint64_t a1)
{
  return a1;
}

void sub_2167E23DC(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2167E241C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167E24F4(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167E24D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167E24F4(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v24 = 0;
  v25[0] = 0;
  uint64_t v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64x2_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  uint64_t v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000007;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 104))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167E27D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E271CLL);
}

void sub_2167E28AC(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

void *sub_2167E28F8(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 3;
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000008;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_2167E2980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2167E299C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)((char *)a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_21677EA60(a1 + 2, (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2 + 1;
  if (v6 != 7 || *((unsigned char *)v5 + 4) != 1)
  {
    sub_216778A5C((uint64_t)v16);
    uint64_t v8 = sub_216779180(v17, (uint64_t)"Invalid DataType in TypedArraySample. Expected: ", 48);
    *(void *)uint64_t v15 = 0x100000007;
    uint64_t v9 = sub_21677D5B0(v8, v15);
    uint64_t v10 = sub_216779180(v9, (uint64_t)", but got: ", 11);
    sub_21677D5B0(v10, (int *)v5);
    std::stringbuf::str();
    sub_216778E70(v15, &__p);
    if (v14 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::exception v12 = sub_216779038(exception, (uint64_t)v15);
    __cxa_throw(v12, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  return a1;
}

void sub_2167E2AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v8.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v4 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2167E2B14(uint64_t a1)
{
  *(void *)a1 = &unk_26C749DD0;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 520));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 464));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 416));
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(void *)a1 = &unk_26C749E58;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

void Alembic::AbcGeom::v12::IPointsSchema::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v50 = a1 + 8;
  long long v51 = "IPointsSchema::init()";
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v23 = &v24;
  int v45 = 2;
  sub_2167898D0(v46, (const void ***)&v23);
  v46[3] = 0;
  uint64_t v47 = 0;
  int v48 = 0;
  uint64_t v49 = 1;
  sub_2167877AC((uint64_t)&v23, v24.__r_.__value_.__l.__data_);
  sub_2167A030C(a2, (uint64_t)&v45);
  sub_2167A030C(a3, (uint64_t)&v45);
  uint64_t v7 = *(void *)(a1 + 40);
  int v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v42 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v42 = 0;
  }
  uint64_t v41 = v7;
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v41, &v39, &v37);
  sub_216779094(__p, "P");
  v34[0] = 5;
  v34[2] = 1;
  v33[0] = 1;
  v33[2] = v45;
  sub_2167BAD00((uint64_t)&v23, (int *)v43, (uint64_t)__p, v34, v33);
  *(_DWORD *)(a1 + 248) = v23;
  std::string::operator=((std::string *)(a1 + 256), &v24);
  uint64_t v9 = v25;
  uint64_t v8 = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v9;
  *(void *)(a1 + 288) = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v42) {
    sub_216784EC4(v42);
  }
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v31, &v39, &v37);
  sub_216779094(__p, ".pointIds");
  sub_2167E32C0((uint64_t)&v23, (int *)v43, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = v23;
  std::string::operator=((std::string *)(a1 + 304), &v24);
  uint64_t v12 = v25;
  uint64_t v11 = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v12;
  *(void *)(a1 + 336) = v11;
  if (v13) {
    sub_216784EC4(v13);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v32) {
    sub_216784EC4(v32);
  }
  sub_216779094(&v23, ".velocities");
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, &v23);
  uint64_t v15 = v14;
  if (v24.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v23);
    if (!v15) {
      goto LABEL_36;
    }
  }
  else if (!v14)
  {
    goto LABEL_36;
  }
  uint64_t v29 = v7;
  int v30 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v29, &v39, &v37);
  sub_216779094(__p, ".velocities");
  sub_2167BE97C((uint64_t)&v23, (int *)v43, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = v23;
  std::string::operator=((std::string *)(a1 + 352), &v24);
  uint64_t v17 = v25;
  uint64_t v16 = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v17;
  *(void *)(a1 + 384) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v30) {
    sub_216784EC4(v30);
  }
LABEL_36:
  sub_216779094(&v23, ".widths");
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, &v23);
  uint64_t v20 = v19;
  if (v24.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v23);
    if (!v20) {
      goto LABEL_46;
    }
  }
  else if (!v19)
  {
    goto LABEL_46;
  }
  uint64_t v21 = v7;
  uint64_t v22 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v43, ".widths");
  sub_2167BE1A0((uint64_t)&v23, &v21, (uint64_t)v43, a2, a3);
  sub_2167BA690(a1 + 392, (uint64_t)&v23);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v28);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v27);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v22) {
    sub_216784EC4(v22);
  }
LABEL_46:
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v47) {
    sub_216784EC4(v47);
  }
  sub_2167877AC((uint64_t)v46, (void *)v46[1]);
}

void sub_2167E307C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  sub_2167BA760((uint64_t)&a11);
  if (*(char *)(v48 - 169) < 0) {
    operator delete(*(void **)(v48 - 192));
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v47) {
    sub_216784EC4(v47);
  }
  sub_2167A03C4(v48 - 144);
  long long v51 = __cxa_begin_catch(a1);
  uint64_t v52 = *(void (**)(uint64_t))(*(void *)v46 + 16);
  if (a2 == 2)
  {
    uint64_t v53 = (uint64_t)v51;
    v52(v46);
    sub_21679FA64(v48 - 80, v53);
  }
  else
  {
    v52(v46);
    sub_21679F9F4(v48 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E3060);
}

void sub_2167E327C(_Unwind_Exception *a1)
{
}

void sub_2167E329C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void sub_2167E32B4()
{
}

uint64_t sub_2167E32C0(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v10 = *a2;
  *((void *)&v44 + 1) = 0;
  v45[0] = 0;
  *(void *)&long long v44 = (char *)&v44 + 8;
  int v46 = v10;
  sub_2167898D0(v47, (const void ***)&v44);
  v47[3] = 0;
  uint64_t v48 = 0;
  int v49 = 0;
  uint64_t v50 = 1;
  sub_2167877AC((uint64_t)&v44, *((void **)&v44 + 1));
  sub_2167A030C(a4, (uint64_t)&v46);
  sub_2167A030C(a5, (uint64_t)&v46);
  *(_DWORD *)a1 = v46;
  v45[34] = a1;
  v45[35] = "ITypedArrayProperty::ITypedArrayProperty()";
  uint64_t v12 = *((void *)a2 + 4);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v44);
    int v30 = sub_216779180(v45, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v30, (uint64_t)"ITypedArrayProperty ctor", 24);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v40);
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v32 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v32, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  uint64_t v14 = v13;
  if (!v13)
  {
    sub_216778A5C((uint64_t)&v44);
    long long v33 = sub_216779180(v45, (uint64_t)"Nonexistent array property: ", 28);
    int v34 = *(char *)(a3 + 23);
    if (v34 >= 0) {
      uint64_t v35 = a3;
    }
    else {
      uint64_t v35 = *(void *)a3;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v36 = *(void *)(a3 + 8);
    }
    sub_216779180(v33, v35, v36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v40);
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    int v37 = __cxa_allocate_exception(0x20uLL);
    int v38 = sub_216779038(v37, (uint64_t)__p);
    __cxa_throw(v38, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  BOOL v15 = *(_DWORD *)(v13 + 56) == 7 && *(_DWORD *)(v13 + 24) == 2;
  if (!v15 || (sub_2167E383C(v13 + 32, v50) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v44);
    uint64_t v19 = sub_216779180(v45, (uint64_t)"Incorrect match of header datatype: ", 36);
    uint64_t v20 = sub_21677D5B0(v19, (int *)(v14 + 56));
    uint64_t v21 = sub_216779180(v20, (uint64_t)" to expected: ", 14);
    uint64_t v39 = 0x100000007;
    uint64_t v22 = sub_21677D5B0(v21, (int *)&v39);
    uint64_t v23 = sub_216779180(v22, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_216779094(v40, "interpretation");
    sub_21679F2AC(v14 + 32, (const void **)v40, __p);
    if ((v43 & 0x80u) == 0) {
      std::string v24 = __p;
    }
    else {
      std::string v24 = (void **)__p[0];
    }
    if ((v43 & 0x80u) == 0) {
      uint64_t v25 = v43;
    }
    else {
      uint64_t v25 = (uint64_t)__p[1];
    }
    uint64_t v26 = sub_216779180(v23, (uint64_t)v24, v25);
    uint64_t v27 = sub_216779180(v26, (uint64_t)" to expected: ", 14);
    sub_216779180(v27, (uint64_t)"", 0);
    if ((char)v43 < 0) {
      operator delete(__p[0]);
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v40);
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    uint64_t v28 = __cxa_allocate_exception(0x20uLL);
    uint64_t v29 = sub_216779038(v28, (uint64_t)__p);
    __cxa_throw(v29, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 96))(&v44, v12, a3);
  long long v16 = v44;
  long long v44 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v44 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v44 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v48) {
    sub_216784EC4(v48);
  }
  sub_2167877AC((uint64_t)v47, (void *)v47[1]);
  return a1;
}

void sub_2167E36F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E3458);
}

void sub_2167E37FC()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2167E382CLL);
}

uint64_t sub_2167E383C(uint64_t a1, int a2)
{
  if (a2) {
    return 1;
  }
  sub_216779094(__p, "interpretation");
  sub_21679F2AC(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    BOOL v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    BOOL v2 = v8 == 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2167E38C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::OPolyMeshSchema(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167E3C38(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C749EA8;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  sub_2167DB444(a1 + 464);
  sub_2167DB374(a1 + 640);
  *(void *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OPolyMeshSchema::init((Alembic::AbcGeom::v12::OPolyMeshSchema *)a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167E3B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  if (*(char *)(v16 + 839) < 0) {
    operator delete(*(void **)(v16 + 816));
  }
  sub_2167C5410(v19);
  sub_2167C5410(v18);
  sub_2167E8494(v16 + 440, *a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v17);
  sub_2167E4260((void *)v16);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E3C38(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167E85C8(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C749F30;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  sub_2167E86C4(a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167E3E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::OScalarProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v21);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v18 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::init(Alembic::AbcGeom::v12::OPolyMeshSchema *this, int a2, char a3)
{
  uint64_t v32 = (char *)this + 8;
  long long v33 = "OPolyMeshSchema::init()";
  *((unsigned char *)this + 840) = a3;
  *((void *)this + 106) = 0;
  *((_DWORD *)this + 214) = a2;
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Alembic::AbcGeom::v12::OPolyMeshSchema::createPositionsProperty(this);
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".faceIndices");
    int v6 = *((_DWORD *)this + 214);
    int v22 = 2;
    int v23 = v6;
    int v20 = 0;
    int v21 = 0;
    int v18 = 0;
    int v19 = 0;
    int v16 = 0;
    int v17 = 0;
    sub_2167C6640((uint64_t)&v28, &v26, (uint64_t)__p, &v22, &v20, &v18, &v16);
    *((_DWORD *)this + 86) = v28;
    std::string::operator=((std::string *)((char *)this + 352), &v29);
    uint64_t v8 = v30;
    uint64_t v7 = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 48);
    *((void *)this + 47) = v8;
    *((void *)this + 48) = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27) {
      sub_216784EC4(v27);
    }
    uint64_t v14 = v5;
    int v15 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".faceCounts");
    int v10 = *((_DWORD *)this + 214);
    int v22 = 2;
    int v23 = v10;
    int v20 = 0;
    int v21 = 0;
    int v18 = 0;
    int v19 = 0;
    int v16 = 0;
    int v17 = 0;
    sub_2167C6640((uint64_t)&v28, &v14, (uint64_t)__p, &v22, &v20, &v18, &v16);
    *((_DWORD *)this + 98) = v28;
    std::string::operator=((std::string *)((char *)this + 400), &v29);
    uint64_t v12 = v30;
    uint64_t v11 = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 54);
    *((void *)this + 53) = v12;
    *((void *)this + 54) = v11;
    if (v13) {
      sub_216784EC4(v13);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      sub_216784EC4(v15);
    }
    if (v4) {
      sub_216784EC4(v4);
    }
  }
}

void sub_2167E4130(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v29 - 96));
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v27) {
    sub_216784EC4(v27);
  }
  uint64_t v32 = __cxa_begin_catch(a1);
  long long v33 = *(void (**)(uint64_t))(*(void *)v28 + 16);
  if (a2 == 2)
  {
    uint64_t v34 = (uint64_t)v32;
    v33(v28);
    sub_21679FA64(v29 - 48, v34);
  }
  else
  {
    v33(v28);
    sub_21679F9F4(v29 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E411CLL);
}

void sub_2167E4240(_Unwind_Exception *a1)
{
}

void *sub_2167E4260(void *a1)
{
  *a1 = &unk_26C749F30;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::OPolyMeshSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v25 = *((void *)a2 + 4);
  uint64_t v26 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *a2;
  LODWORD(v23) = 1;
  LODWORD(v24) = v12;
  sub_2167E3C38(a1, &v25, a3, &v23, a4, a5, a6);
  if (v26) {
    sub_216784EC4(v26);
  }
  *(void *)a1 = &unk_26C749EA8;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  sub_2167DB444(a1 + 464);
  sub_2167DB374(a1 + 640);
  *(void *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  sub_2167CC320(a4, a5, a6, &v21, &v23);
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  int v13 = sub_2167CC43C(a4, a5, a6, &v21);
  if (v23)
  {
    uint64_t v14 = *((void *)a2 + 4);
    int v15 = (std::__shared_weak_count *)*((void *)a2 + 5);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 24))(&v19);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 24))(&v21);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v23);
    if (v22) {
      sub_216784EC4(v22);
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v15) {
      sub_216784EC4(v15);
    }
  }
  else
  {
    int v16 = v13;
  }
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  char v17 = sub_2167CD0F8(a4, a5, a6, &v21);
  Alembic::AbcGeom::v12::OPolyMeshSchema::init((Alembic::AbcGeom::v12::OPolyMeshSchema *)a1, v16, v17);
  if (v24) {
    sub_216784EC4(v24);
  }
  return a1;
}

void sub_2167E4570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (*(char *)(v14 + 839) < 0) {
    operator delete(*(void **)(v14 + 816));
  }
  sub_2167C5410(v17);
  sub_2167C5410(v16);
  sub_2167E8494(v14 + 440, *v19);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15);
  sub_2167E4260((void *)v14);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::set(Alembic::AbcGeom::v12::OPolyMeshSchema *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 840) && !sub_2167E5498(a2))
  {
    v95[33] = (char *)this + 8;
    v95[34] = "OPolyMeshSchema::set()";
    uint64_t v4 = (void *)(a2 + 168);
    if (*(_DWORD *)(a2 + 176) == 127 || !*v4 && *(void *)(a2 + 192) == *(void *)(a2 + 184)) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = nullsub_10;
    }
    if (!v5) {
      goto LABEL_18;
    }
    if (*((char *)this + 327) < 0)
    {
      if (!*((void *)this + 39)) {
        goto LABEL_16;
      }
    }
    else if (!*((unsigned char *)this + 327))
    {
LABEL_16:
      if (!*((void *)this + 41)) {
        goto LABEL_17;
      }
LABEL_18:
      int v6 = (void *)(a2 + 208);
      if (*(_DWORD *)(a2 + 216) == 127 || !*v6 && *(void *)(a2 + 232) == *(void *)(a2 + 224)) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = nullsub_8;
      }
      if (v7) {
        uint64_t v8 = nullsub_11;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8 && (sub_2167C5D84((uint64_t)this + 464) & 1) == 0) {
        Alembic::AbcGeom::v12::OPolyMeshSchema::createUVsProperty((uint64_t)this, a2);
      }
      uint64_t v9 = (void *)(a2 + 296);
      if (*(_DWORD *)(a2 + 304) == 127 || !*v9 && *(void *)(a2 + 320) == *(void *)(a2 + 312)) {
        int v10 = 0;
      }
      else {
        int v10 = nullsub_9;
      }
      if (v10) {
        uint64_t v11 = nullsub_12;
      }
      else {
        uint64_t v11 = 0;
      }
      if (v11 && (sub_2167C5D84((uint64_t)this + 640) & 1) == 0) {
        Alembic::AbcGeom::v12::OPolyMeshSchema::createNormalsProperty((uint64_t)this, a2);
      }
      if (*((void *)this + 106))
      {
        int v77 = *((_DWORD *)this + 62);
        if (*((char *)this + 279) < 0)
        {
          sub_216778F24(&v78, *((void **)this + 32), *((void *)this + 33));
        }
        else
        {
          long long v78 = *((_OWORD *)this + 16);
          uint64_t v79 = *((void *)this + 34);
        }
        uint64_t v13 = *((void *)this + 36);
        uint64_t v80 = *((void *)this + 35);
        uint64_t v81 = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = *(void *)(a2 + 5);
        *(void *)uint64_t v73 = *(void *)a2;
        *(void *)&v73[5] = v14;
        long long __p = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
        if (SHIBYTE(v79) < 0)
        {
          if (*((void *)&v78 + 1)) {
            goto LABEL_50;
          }
        }
        else if (HIBYTE(v79))
        {
LABEL_50:
          int v15 = 0;
          goto LABEL_55;
        }
        if (v80) {
          int v15 = nullsub_7;
        }
        else {
          int v15 = 0;
        }
LABEL_55:
        if (v15)
        {
          if (*(_DWORD *)&v73[8] == 127 || !*(void *)v73 && v75 == __p) {
            uint64_t v16 = 0;
          }
          else {
            uint64_t v16 = nullsub_19;
          }
          if (v16) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v77);
          }
          else {
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v77);
          }
        }
        if (__p)
        {
          uint64_t v75 = __p;
          operator delete(__p);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v77);
        int v68 = *((_DWORD *)this + 86);
        if (*((char *)this + 375) < 0)
        {
          sub_216778F24(&v69, *((void **)this + 44), *((void *)this + 45));
        }
        else
        {
          long long v69 = *((_OWORD *)this + 22);
          uint64_t v70 = *((void *)this + 46);
        }
        uint64_t v20 = *((void *)this + 48);
        uint64_t v71 = *((void *)this + 47);
        uint64_t v72 = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *(void *)(a2 + 45);
        *(void *)int v64 = *(void *)(a2 + 40);
        *(void *)&v64[5] = v21;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        sub_21677EA60(&v65, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
        if (SHIBYTE(v70) < 0)
        {
          if (*((void *)&v69 + 1)) {
            goto LABEL_92;
          }
        }
        else if (HIBYTE(v70))
        {
LABEL_92:
          int v22 = 0;
          goto LABEL_97;
        }
        if (v71) {
          int v22 = nullsub_7;
        }
        else {
          int v22 = 0;
        }
LABEL_97:
        if (v22)
        {
          if (*(_DWORD *)&v64[8] == 127 || !*(void *)v64 && v66 == v65) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = nullsub_20;
          }
          if (v23) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v68);
          }
          else {
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v68);
          }
        }
        if (v65)
        {
          uint64_t v66 = v65;
          operator delete(v65);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v68);
        int v59 = *((_DWORD *)this + 98);
        if (*((char *)this + 423) < 0)
        {
          sub_216778F24(&v60, *((void **)this + 50), *((void *)this + 51));
        }
        else
        {
          long long v60 = *((_OWORD *)this + 25);
          uint64_t v61 = *((void *)this + 52);
        }
        uint64_t v24 = *((void *)this + 54);
        uint64_t v62 = *((void *)this + 53);
        uint64_t v63 = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = *(void *)(a2 + 85);
        *(void *)long long v55 = *(void *)(a2 + 80);
        *(void *)&v55[5] = v25;
        char v56 = 0;
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        sub_21677EA60(&v56, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
        if (SHIBYTE(v61) < 0)
        {
          if (*((void *)&v60 + 1)) {
            goto LABEL_115;
          }
        }
        else if (HIBYTE(v61))
        {
LABEL_115:
          uint64_t v26 = 0;
          goto LABEL_120;
        }
        if (v62) {
          uint64_t v26 = nullsub_7;
        }
        else {
          uint64_t v26 = 0;
        }
LABEL_120:
        if (v26)
        {
          if (*(_DWORD *)&v55[8] == 127 || !*(void *)v55 && v57 == v56) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = nullsub_20;
          }
          if (v27) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v59);
          }
          else {
            Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v59);
          }
        }
        if (v56)
        {
          uint64_t v57 = v56;
          operator delete(v56);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v59);
        int v28 = *((char *)this + 327);
        if (v28 < 0)
        {
          if (*((void *)this + 39)) {
            goto LABEL_170;
          }
        }
        else if (*((unsigned char *)this + 327))
        {
          goto LABEL_170;
        }
        if (*((void *)this + 41)) {
          uint64_t v29 = nullsub_7;
        }
        else {
          uint64_t v29 = 0;
        }
        if (!v29)
        {
LABEL_170:
          if (*(double *)(a2 + 144) <= *(double *)(a2 + 120)
            || *(double *)(a2 + 152) <= *(double *)(a2 + 128)
            || *(double *)(a2 + 160) <= *(double *)(a2 + 136))
          {
            if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
              uint64_t v34 = 0;
            }
            else {
              uint64_t v34 = nullsub_19;
            }
            if (v34)
            {
              sub_2167C354C((void *)a2, (uint64_t)v94);
              Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), v94);
            }
            else
            {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56));
            }
          }
          else
          {
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), (const void *)(a2 + 120));
          }
          if (sub_2167C5D84((uint64_t)this + 464)) {
            uint64_t v35 = nullsub_16;
          }
          else {
            uint64_t v35 = 0;
          }
          if (v35) {
            sub_2167C3654((uint64_t)this + 464, a2 + 208);
          }
          uint64_t v36 = (char *)this + 640;
          if (sub_2167C5D84((uint64_t)this + 640)) {
            int v37 = nullsub_17;
          }
          else {
            int v37 = 0;
          }
          if (!v37) {
            goto LABEL_233;
          }
          goto LABEL_232;
        }
        int v50 = *((_DWORD *)this + 74);
        if (v28 < 0)
        {
          sub_216778F24(&v51, *((void **)this + 38), *((void *)this + 39));
        }
        else
        {
          long long v51 = *((_OWORD *)this + 19);
          uint64_t v52 = *((void *)this + 40);
        }
        uint64_t v31 = *((void *)this + 42);
        uint64_t v53 = *((void *)this + 41);
        uint64_t v54 = v31;
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)int v46 = *v4;
        *(void *)&v46[5] = *(void *)(a2 + 173);
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        sub_21677EA60(&v47, *(const void **)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 3);
        if (SHIBYTE(v52) < 0)
        {
          if (*((void *)&v51 + 1)) {
            goto LABEL_153;
          }
        }
        else if (HIBYTE(v52))
        {
LABEL_153:
          uint64_t v32 = 0;
LABEL_158:
          if (v32)
          {
            if (*(_DWORD *)&v46[8] == 127 || !*(void *)v46 && v48 == v47) {
              long long v33 = 0;
            }
            else {
              long long v33 = nullsub_10;
            }
            if (v33) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v50);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v50);
            }
          }
          if (v47)
          {
            uint64_t v48 = v47;
            operator delete(v47);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v50);
          goto LABEL_170;
        }
        if (v53) {
          uint64_t v32 = nullsub_7;
        }
        else {
          uint64_t v32 = 0;
        }
        goto LABEL_158;
      }
      if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
        int v12 = 0;
      }
      else {
        int v12 = nullsub_19;
      }
      if (!v12
        || (*(_DWORD *)(a2 + 48) == 127 || !*(void *)(a2 + 40) && *(void *)(a2 + 64) == *(void *)(a2 + 56)
          ? (uint64_t v17 = 0)
          : (uint64_t v17 = nullsub_20),
            !v17
         || (*(_DWORD *)(a2 + 88) == 127 || !*(void *)(a2 + 80) && *(void *)(a2 + 104) == *(void *)(a2 + 96)
           ? (int v18 = 0)
           : (int v18 = nullsub_20),
             !v18)))
      {
        sub_216778A5C((uint64_t)v94);
        sub_216779180(v95, (uint64_t)"Sample 0 must have valid data for all mesh components", 53);
        std::stringbuf::str();
        sub_216778E70(v93, &v91);
        if (v92 < 0) {
          operator delete((void *)v91);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        int v45 = sub_216779038(exception, (uint64_t)v93);
        __cxa_throw(v45, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
      }
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 392);
      int v19 = *((char *)this + 327);
      if (v19 < 0)
      {
        if (*((void *)this + 39)) {
          goto LABEL_214;
        }
      }
      else if (*((unsigned char *)this + 327))
      {
        goto LABEL_214;
      }
      if (*((void *)this + 41)) {
        uint64_t v30 = nullsub_7;
      }
      else {
        uint64_t v30 = 0;
      }
      if (v30)
      {
        int v86 = *((_DWORD *)this + 74);
        if (v19 < 0)
        {
          sub_216778F24(&v87, *((void **)this + 38), *((void *)this + 39));
        }
        else
        {
          long long v87 = *((_OWORD *)this + 19);
          uint64_t v88 = *((void *)this + 40);
        }
        uint64_t v38 = *((void *)this + 42);
        uint64_t v89 = *((void *)this + 41);
        uint64_t v90 = v38;
        if (v38) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v39 = *(void *)(a2 + 173);
        *(void *)uint64_t v82 = *v4;
        *(void *)&v82[5] = v39;
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        sub_21677EA60(&v83, *(const void **)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 3);
        if (SHIBYTE(v88) < 0)
        {
          if (*((void *)&v87 + 1)) {
            goto LABEL_197;
          }
        }
        else if (HIBYTE(v88))
        {
LABEL_197:
          int v40 = 0;
LABEL_202:
          if (v40)
          {
            if (*(_DWORD *)&v82[8] == 127 || !*(void *)v82 && v84 == v83) {
              char v41 = 0;
            }
            else {
              char v41 = nullsub_10;
            }
            if (v41) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v86);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v86);
            }
          }
          if (v83)
          {
            uint64_t v84 = v83;
            operator delete(v83);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v86);
          goto LABEL_214;
        }
        if (v89) {
          int v40 = nullsub_7;
        }
        else {
          int v40 = 0;
        }
        goto LABEL_202;
      }
LABEL_214:
      if (*(double *)(a2 + 144) >= *(double *)(a2 + 120)
        && *(double *)(a2 + 152) >= *(double *)(a2 + 128)
        && *(double *)(a2 + 160) >= *(double *)(a2 + 136))
      {
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), (const void *)(a2 + 120));
      }
      else
      {
        sub_2167C354C((void *)a2, (uint64_t)v94);
        Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), v94);
      }
      if (*(_DWORD *)(a2 + 216) == 127 || !*v6 && *(void *)(a2 + 232) == *(void *)(a2 + 224)) {
        uint64_t v42 = 0;
      }
      else {
        uint64_t v42 = nullsub_8;
      }
      if (v42) {
        sub_2167C3654((uint64_t)this + 464, a2 + 208);
      }
      if (*(_DWORD *)(a2 + 304) == 127 || !*v9 && *(void *)(a2 + 320) == *(void *)(a2 + 312)) {
        unsigned __int8 v43 = 0;
      }
      else {
        unsigned __int8 v43 = nullsub_9;
      }
      if (!v43) {
        goto LABEL_233;
      }
      uint64_t v36 = (char *)this + 640;
LABEL_232:
      sub_2167C3A2C((uint64_t)v36, (uint64_t)v9);
LABEL_233:
      ++*((void *)this + 106);
      return;
    }
LABEL_17:
    Alembic::AbcGeom::v12::OPolyMeshSchema::createVelocitiesProperty(this);
    goto LABEL_18;
  }

  Alembic::AbcGeom::v12::OPolyMeshSchema::selectiveSet(this, a2);
}

void sub_2167E5324(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a59);
  uint64_t v62 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v59 - 96, (uint64_t)v62);
  }
  else {
    sub_21679F9F4(v59 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E527CLL);
}

void sub_2167E5478(_Unwind_Exception *a1)
{
}

BOOL sub_2167E5498(uint64_t a1)
{
  BOOL result = 0;
  if (!*(void *)a1 && !*(void *)(a1 + 40) && !*(void *)(a1 + 80))
  {
    if (*(_DWORD *)(a1 + 216) == 127 || !*(void *)(a1 + 208) && *(void *)(a1 + 232) == *(void *)(a1 + 224)
       ? 0
       : nullsub_8)
    {
      return 1;
    }
    uint64_t v3 = *(_DWORD *)(a1 + 304) == 127 || !*(void *)(a1 + 296) && *(void *)(a1 + 320) == *(void *)(a1 + 312)
       ? 0
       : nullsub_9;
    if (v3 || *(void *)(a1 + 168)) {
      return 1;
    }
  }
  return result;
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::selectiveSet(Alembic::AbcGeom::v12::OPolyMeshSchema *this, uint64_t a2)
{
  int v40 = (char *)this + 8;
  char v41 = "OPolyMeshSchema::selectiveSet()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_19;
  }
  if (v4)
  {
    if (*((char *)this + 279) < 0)
    {
      if (!*((void *)this + 33)) {
        goto LABEL_11;
      }
    }
    else if (!*((unsigned char *)this + 279))
    {
LABEL_11:
      if (*((void *)this + 35)) {
        goto LABEL_13;
      }
    }
    Alembic::AbcGeom::v12::OPolyMeshSchema::createPositionsProperty(this);
  }
LABEL_13:
  int v5 = *((char *)this + 279);
  if (v5 < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_55;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
    goto LABEL_55;
  }
  if (*((void *)this + 35)) {
    int v6 = nullsub_7;
  }
  else {
    int v6 = 0;
  }
  if (!v6) {
    goto LABEL_55;
  }
  int v35 = *((_DWORD *)this + 62);
  if (v5 < 0)
  {
    sub_216778F24(&v36, *((void **)this + 32), *((void *)this + 33));
  }
  else
  {
    long long v36 = *((_OWORD *)this + 16);
    uint64_t v37 = *((void *)this + 34);
  }
  uint64_t v7 = *((void *)this + 36);
  uint64_t v38 = *((void *)this + 35);
  uint64_t v39 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a2 + 5);
  *(void *)uint64_t v31 = *(void *)a2;
  *(void *)&v31[5] = v8;
  long long __p = 0;
  long long v33 = 0;
  uint64_t v34 = 0;
  sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v37) < 0)
  {
    if (*((void *)&v36 + 1)) {
      goto LABEL_28;
    }
LABEL_30:
    if (v38) {
      uint64_t v9 = nullsub_7;
    }
    else {
      uint64_t v9 = 0;
    }
    goto LABEL_33;
  }
  if (!HIBYTE(v37)) {
    goto LABEL_30;
  }
LABEL_28:
  uint64_t v9 = 0;
LABEL_33:
  if (v9)
  {
    if (*(_DWORD *)&v31[8] == 127 || !*(void *)v31 && v33 == __p) {
      int v10 = 0;
    }
    else {
      int v10 = nullsub_19;
    }
    if (v10) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v35);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v35);
    }
  }
  if (__p)
  {
    long long v33 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v35);
  if (*(double *)(a2 + 144) <= *(double *)(a2 + 120)
    || *(double *)(a2 + 152) <= *(double *)(a2 + 128)
    || *(double *)(a2 + 160) <= *(double *)(a2 + 136))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = nullsub_19;
    }
    if (v11)
    {
      sub_2167C354C((void *)a2, (uint64_t)v30);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), v30);
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56), (const void *)(a2 + 120));
  }
LABEL_55:
  int v12 = (void *)(a2 + 168);
  if (*(_DWORD *)(a2 + 176) == 127 || !*v12 && *(void *)(a2 + 192) == *(void *)(a2 + 184)) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = nullsub_10;
  }
  if (v13)
  {
    if (*((char *)this + 327) < 0)
    {
      if (!*((void *)this + 39)) {
        goto LABEL_65;
      }
    }
    else if (!*((unsigned char *)this + 327))
    {
LABEL_65:
      if (*((void *)this + 41)) {
        goto LABEL_67;
      }
    }
    Alembic::AbcGeom::v12::OPolyMeshSchema::createVelocitiesProperty(this);
  }
LABEL_67:
  int v14 = *((char *)this + 327);
  if (v14 < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_99;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
    goto LABEL_99;
  }
  if (*((void *)this + 41)) {
    int v15 = nullsub_7;
  }
  else {
    int v15 = 0;
  }
  if (!v15) {
    goto LABEL_99;
  }
  int v25 = *((_DWORD *)this + 74);
  if (v14 < 0)
  {
    sub_216778F24(&v26, *((void **)this + 38), *((void *)this + 39));
  }
  else
  {
    long long v26 = *((_OWORD *)this + 19);
    uint64_t v27 = *((void *)this + 40);
  }
  uint64_t v16 = *((void *)this + 42);
  uint64_t v28 = *((void *)this + 41);
  uint64_t v29 = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v21 = *v12;
  *(void *)&v21[5] = *(void *)(a2 + 173);
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_21677EA60(&v22, *(const void **)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 3);
  if (SHIBYTE(v27) < 0)
  {
    if (*((void *)&v26 + 1)) {
      goto LABEL_82;
    }
LABEL_84:
    if (v28) {
      uint64_t v17 = nullsub_7;
    }
    else {
      uint64_t v17 = 0;
    }
    goto LABEL_87;
  }
  if (!HIBYTE(v27)) {
    goto LABEL_84;
  }
LABEL_82:
  uint64_t v17 = 0;
LABEL_87:
  if (v17)
  {
    if (*(_DWORD *)&v21[8] == 127 || !*(void *)v21 && v23 == v22) {
      int v18 = 0;
    }
    else {
      int v18 = nullsub_10;
    }
    if (v18) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v25);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v25);
    }
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v25);
LABEL_99:
  if (*(_DWORD *)(a2 + 216) == 127 || !*(void *)(a2 + 208) && *(void *)(a2 + 232) == *(void *)(a2 + 224)) {
    int v19 = 0;
  }
  else {
    int v19 = nullsub_8;
  }
  if (v19)
  {
    if ((sub_2167C5D84((uint64_t)this + 464) & 1) == 0) {
      Alembic::AbcGeom::v12::OPolyMeshSchema::createUVsProperty((uint64_t)this, a2);
    }
    sub_2167C3654((uint64_t)this + 464, a2 + 208);
  }
  if (*(_DWORD *)(a2 + 304) == 127 || !*(void *)(a2 + 296) && *(void *)(a2 + 320) == *(void *)(a2 + 312)) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = nullsub_9;
  }
  if (v20)
  {
    if ((sub_2167C5D84((uint64_t)this + 640) & 1) == 0) {
      Alembic::AbcGeom::v12::OPolyMeshSchema::createNormalsProperty((uint64_t)this, a2);
    }
    sub_2167C3A2C((uint64_t)this + 640, a2 + 296);
  }
  ++*((void *)this + 106);
}

void sub_2167E5B30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v31 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v29 - 64, (uint64_t)v31);
  }
  else {
    sub_21679F9F4(v29 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E5B18);
}

void sub_2167E5BCC(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createVelocitiesProperty(Alembic::AbcGeom::v12::OPolyMeshSchema *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 5);
  uint64_t v16 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".velocities");
  int v3 = *((_DWORD *)this + 214);
  v11[0] = 2;
  v11[2] = v3;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  sub_2167C6BC0((uint64_t)&v17, &v15, (uint64_t)&__p, v11, v10, v9, v8);
  *((_DWORD *)this + 74) = v17;
  std::string::operator=((std::string *)((char *)this + 304), &v18);
  uint64_t v5 = v19;
  uint64_t v4 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 42);
  *((void *)this + 41) = v5;
  *((void *)this + 42) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v17);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  long long __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_2167C6418(&v17, (uint64_t *)&__p);
  if (*((void *)this + 106))
  {
    unint64_t v7 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
      ++v7;
    }
    while (v7 < *((void *)this + 106));
  }
  if (v18.__r_.__value_.__l.__size_)
  {
    v18.__r_.__value_.__r.__words[2] = v18.__r_.__value_.__l.__size_;
    operator delete((void *)v18.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_2167E5D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createUVsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v45 = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = 0x20000000ALL;
  long long v39 = 0u;
  *(_OWORD *)int v40 = 0u;
  *(void *)&v40[16] = 0x100000005;
  char v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 127;
  long long v36 = (uint64_t *)v37;
  v37[0] = 0;
  v37[1] = 0;
  Alembic::Abc::v12::SetSourceName(&v36, (const std::string *)(a1 + 816));
  if (*(_DWORD *)(a2 + 256) == 127 || !*(void *)(a2 + 248) && *(void *)(a2 + 272) == *(void *)(a2 + 264)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_21;
  }
  if (v4)
  {
    sub_2167C7154(v33, (uint64_t *)&v48);
    sub_2167C71F8(&v29, (uint64_t *)&v45);
    sub_2167C729C((uint64_t)&__dst, (uint64_t *)v33, &v29, *(_DWORD *)(a2 + 288));
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v21, v22[0], (v22[0] - (uint64_t)v21) >> 3);
    *(void *)&v40[8] = v23;
    *(void *)&v40[13] = *(void *)((char *)&v23 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v25, (v25 - (unsigned char *)__p) >> 3);
    int v44 = v27;
    if (__p)
    {
      int v25 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22[0] = (uint64_t)v21;
      operator delete(v21);
    }
    if (v31)
    {
      uint64_t v32 = v31;
      operator delete(v31);
    }
    if (v34)
    {
      int v35 = v34;
      operator delete(v34);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v33, "uv");
    int v6 = *(_DWORD *)(a1 + 856);
    LODWORD(v29) = 2;
    int v30 = v6;
    int v16 = 3;
    uint64_t v17 = &v36;
    int v14 = 0;
    int v15 = 0;
    sub_2167C7350((char *)&__dst, &v18, (uint64_t)v33, 1, v44, 1, &v29, &v16, &v14);
    sub_2167C5310(a1 + 464, &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v26);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v22);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(*(void **)v33);
    }
    unint64_t v7 = v19;
    if (v19) {
LABEL_22:
    }
      sub_216784EC4(v7);
  }
  else
  {
    sub_2167C7154(v33, (uint64_t *)&v48);
    int v9 = *(_DWORD *)(a2 + 288);
    *(void *)&long long __dst = *(void *)v33;
    *(void *)((char *)&__dst + 5) = *(void *)&v33[5];
    uint64_t v21 = 0;
    v22[0] = 0;
    v22[1] = 0;
    sub_21677EA60(&v21, v34, (uint64_t)v35, (v35 - (unsigned char *)v34) >> 3);
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = 0x100000005;
    int v25 = 0;
    uint64_t v26 = 0;
    long long __p = 0;
    int v27 = v9;
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v21, v22[0], (v22[0] - (uint64_t)v21) >> 3);
    *(void *)&v40[8] = v23;
    *(void *)&v40[13] = *(void *)((char *)&v23 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v25, (v25 - (unsigned char *)__p) >> 3);
    int v44 = v27;
    if (__p)
    {
      int v25 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22[0] = (uint64_t)v21;
      operator delete(v21);
    }
    if (v34)
    {
      int v35 = v34;
      operator delete(v34);
    }
    int v10 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v33, "uv");
    int v11 = *(_DWORD *)(a1 + 856);
    LODWORD(v29) = 2;
    int v30 = v11;
    int v16 = 3;
    uint64_t v17 = &v36;
    int v14 = 0;
    int v15 = 0;
    sub_2167C7350((char *)&__dst, &v12, (uint64_t)v33, 0, v44, 1, &v29, &v16, &v14);
    sub_2167C5310(a1 + 464, &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v26);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v22);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(*(void **)v33);
    }
    unint64_t v7 = v13;
    if (v13) {
      goto LABEL_22;
    }
  }
  if (*(void *)(a1 + 848))
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C3654(a1 + 464, (uint64_t)&v38);
      ++v8;
    }
    while (v8 < *(void *)(a1 + 848));
  }
  sub_2167877AC((uint64_t)&v36, v37[0]);
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if ((void)v39)
  {
    *((void *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  if (v45)
  {
    int v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_2167E625C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  sub_2167C5410((uint64_t)&a19);
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  sub_2167877AC(v52 - 224, *(void **)(v52 - 216));
  sub_2167C5204((void *)(v52 - 200));
  uint64_t v54 = *(void **)(v52 - 112);
  if (v54)
  {
    *(void *)(v52 - 104) = v54;
    operator delete(v54);
  }
  long long v55 = *(void **)(v52 - 88);
  if (v55)
  {
    *(void *)(v52 - 80) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createNormalsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v45 = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = 0x30000000ALL;
  long long v39 = 0u;
  *(_OWORD *)int v40 = 0u;
  *(void *)&v40[16] = 0x100000005;
  char v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 127;
  if (*(_DWORD *)(a2 + 344) == 127 || !*(void *)(a2 + 336) && *(void *)(a2 + 360) == *(void *)(a2 + 352)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_21;
  }
  if (v4)
  {
    sub_2167C6418(&v31, (uint64_t *)&v48);
    sub_2167C8B1C(v35, &v31);
    sub_2167C71F8(&v27, (uint64_t *)&v45);
    sub_2167C8C94((uint64_t)&__dst, (uint64_t *)v35, &v27, *(_DWORD *)(a2 + 376));
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v19, v20[0], (v20[0] - (uint64_t)v19) >> 3);
    *(void *)&v40[8] = v21;
    *(void *)&v40[13] = *(void *)((char *)&v21 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v23, (v23 - (unsigned char *)__p) >> 3);
    int v44 = v25;
    if (__p)
    {
      long long v23 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      v20[0] = (uint64_t)v19;
      operator delete(v19);
    }
    if (v29)
    {
      int v30 = v29;
      operator delete(v29);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, "N");
    int v6 = *(_DWORD *)(a1 + 856);
    LODWORD(v31) = 2;
    int v32 = v6;
    LODWORD(v27) = 0;
    int v28 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167C8D48((char *)&__dst, &v16, (uint64_t)v35, 1, v44, 1, &v31, &v27, &v14);
    sub_2167C5310(a1 + 640, &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v26);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v20);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    unint64_t v7 = v17;
    if (v17) {
LABEL_24:
    }
      sub_216784EC4(v7);
  }
  else
  {
    sub_2167C6418(&v31, (uint64_t *)&v48);
    sub_2167C8B1C(v35, &v31);
    int v9 = *(_DWORD *)(a2 + 376);
    *(void *)&long long __dst = *(void *)v35;
    *(void *)((char *)&__dst + 5) = *(void *)&v35[5];
    uint64_t v19 = 0;
    v20[0] = 0;
    v20[1] = 0;
    sub_21677EA60(&v19, v36, (uint64_t)v37, (v37 - v36) >> 3);
    *(void *)&long long v21 = 0;
    *((void *)&v21 + 1) = 0x100000005;
    long long v23 = 0;
    uint64_t v24 = 0;
    long long __p = 0;
    int v25 = v9;
    *(void *)&long long v38 = __dst;
    *(void *)((char *)&v38 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v39, (char *)v19, v20[0], (v20[0] - (uint64_t)v19) >> 3);
    *(void *)&v40[8] = v21;
    *(void *)&v40[13] = *(void *)((char *)&v21 + 5);
    sub_21677CC7C((char *)&v41, (char *)__p, (uint64_t)v23, (v23 - (unsigned char *)__p) >> 3);
    int v44 = v25;
    if (__p)
    {
      long long v23 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      v20[0] = (uint64_t)v19;
      operator delete(v19);
    }
    if (v36)
    {
      uint64_t v37 = v36;
      operator delete(v36);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    int v10 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, "N");
    int v11 = *(_DWORD *)(a1 + 856);
    LODWORD(v31) = 2;
    int v32 = v11;
    LODWORD(v27) = 0;
    int v28 = 0;
    int v14 = 0;
    int v15 = 0;
    sub_2167C8D48((char *)&__dst, &v12, (uint64_t)v35, 0, v44, 1, &v31, &v27, &v14);
    sub_2167C5310(a1 + 640, &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v26);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v20);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    unint64_t v7 = v13;
    if (v13) {
      goto LABEL_24;
    }
  }
  if (*(void *)(a1 + 848))
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C3A2C(a1 + 640, (uint64_t)&v38);
      ++v8;
    }
    while (v8 < *(void *)(a1 + 848));
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if ((void)v39)
  {
    *((void *)&v39 + 1) = v39;
    operator delete((void *)v39);
  }
  if (v45)
  {
    int v46 = v45;
    operator delete(v45);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_2167E6814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  sub_2167C5410((uint64_t)&a17);
  if (*(char *)(v47 - 217) < 0) {
    operator delete(*(void **)(v47 - 240));
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  sub_2167C5204((void *)(v47 - 200));
  uint64_t v49 = *(void **)(v47 - 112);
  if (v49)
  {
    *(void *)(v47 - 104) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(v47 - 88);
  if (v50)
  {
    *(void *)(v47 - 80) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OPolyMeshSchema::createPositionsProperty(Alembic::AbcGeom::v12::OPolyMeshSchema *this)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = (uint64_t *)v25;
  sub_2167C4D74(&v24, 3);
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v18 = *((void *)this + 5);
  uint64_t v19 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "P");
  LODWORD(v12) = 3;
  uint64_t v13 = &v24;
  int v3 = *((_DWORD *)this + 214);
  v17[0] = 2;
  void v17[2] = v3;
  v16[0] = 0;
  void v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  sub_2167C5E88((uint64_t)&v20, &v18, (uint64_t)__p, &v12, v17, v16, v15);
  *((_DWORD *)this + 62) = v20;
  std::string::operator=((std::string *)((char *)this + 256), &v21);
  uint64_t v5 = v22;
  uint64_t v4 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 36);
  *((void *)this + 35) = v5;
  *((void *)this + 36) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v20);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_2167C6418(&v20, (uint64_t *)&v12);
  if (*((void *)this + 106))
  {
    unint64_t v7 = 0;
    do
    {
      sub_2167C64C8(__p, &v20);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v10)
      {
        int v11 = v10;
        operator delete(v10);
      }
      ++v7;
      unint64_t v8 = *((void *)this + 106);
    }
    while (v7 < v8);
  }
  else
  {
    unint64_t v8 = 0;
  }
  sub_2167E6B94((uint64_t)this, *((_DWORD *)this + 214), v8);
  if (v21.__r_.__value_.__l.__size_)
  {
    v21.__r_.__value_.__r.__words[2] = v21.__r_.__value_.__l.__size_;
    operator delete((void *)v21.__r_.__value_.__l.__size_);
  }
  if (v12)
  {
    uint64_t v13 = (uint64_t **)v12;
    operator delete(v12);
  }
  sub_2167877AC((uint64_t)&v24, v25[0]);
}

void sub_2167E6AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v30 = *(void **)(v28 - 88);
  if (v30)
  {
    *(void *)(v28 - 80) = v30;
    operator delete(v30);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_2167877AC(v28 - 56, *(void **)(v28 - 48));
  _Unwind_Resume(a1);
}

void sub_2167E6B94(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v20 = a1 + 8;
  std::string v21 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
LABEL_5:
    if (*(void *)(a1 + 88)) {
      return;
    }
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".selfBnds");
  v13[0] = 2;
  void v13[2] = a2;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167B9640((uint64_t)v18, &v16, (uint64_t)__p, v13, v12, v11, v10);
  *(_DWORD *)(a1 + 56) = v18[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v18 + 8));
  int64x2_t v7 = v19;
  if (v19.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(int64x2_t *)(a1 + 88) = v7;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  v18[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v18[1] = xmmword_217409FA0;
  int64x2_t v19 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    int v9 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v9, v18);
      --a3;
    }
    while (a3);
  }
}

void sub_2167E6D04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 96));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  uint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v25 - 48, (uint64_t)v28);
  }
  else {
    sub_21679F9F4(v25 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E6CF0);
}

void sub_2167E6D88(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::setFromPrevious(Alembic::AbcGeom::v12::OPolyMeshSchema *this)
{
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    BOOL v2 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    BOOL v2 = nullsub_7;
  }
  else {
    BOOL v2 = 0;
  }
LABEL_8:
  if (v2) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 248));
  }
  if (*((char *)this + 375) < 0)
  {
    if (*((void *)this + 45)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 375))
  {
LABEL_12:
    int v3 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 47)) {
    int v3 = nullsub_7;
  }
  else {
    int v3 = 0;
  }
LABEL_17:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 344));
  }
  if (*((char *)this + 423) < 0)
  {
    if (*((void *)this + 51)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 423))
  {
LABEL_21:
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 53)) {
    uint64_t v4 = nullsub_7;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_26:
  if (v4) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 392));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_30:
    uint64_t v5 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 11)) {
    uint64_t v5 = nullsub_6;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_35:
  if (v5) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_39;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_39:
    int v6 = 0;
    goto LABEL_44;
  }
  if (*((void *)this + 41)) {
    int v6 = nullsub_7;
  }
  else {
    int v6 = 0;
  }
LABEL_44:
  if (v6) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 296));
  }
  if (sub_2167C5D84((uint64_t)this + 464)) {
    int64x2_t v7 = nullsub_16;
  }
  else {
    int64x2_t v7 = 0;
  }
  if (v7) {
    sub_2167C4B94((unsigned char *)this + 464);
  }
  unint64_t v8 = (char *)this + 640;
  uint64_t result = sub_2167C5D84((uint64_t)v8);
  if (result) {
    int v10 = nullsub_17;
  }
  else {
    int v10 = 0;
  }
  if (v10) {
    return sub_2167C4C34(v8);
  }
  return result;
}

void sub_2167E6FE4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E6FD4);
}

void sub_2167E7018(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling(Alembic::AbcGeom::v12::OPolyMeshSchema *this, int a2)
{
  *((_DWORD *)this + 214) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    int v3 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    int v3 = nullsub_7;
  }
  else {
    int v3 = 0;
  }
LABEL_8:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 248));
  }
  if (*((char *)this + 375) < 0)
  {
    if (*((void *)this + 45)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 375))
  {
LABEL_12:
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 47)) {
    uint64_t v4 = nullsub_7;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_17:
  if (v4) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 344));
  }
  if (*((char *)this + 423) < 0)
  {
    if (*((void *)this + 51)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 423))
  {
LABEL_21:
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 53)) {
    uint64_t v5 = nullsub_7;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_26:
  if (v5) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 392));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_30:
    int v6 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 11)) {
    int v6 = nullsub_6;
  }
  else {
    int v6 = 0;
  }
LABEL_35:
  if (v6) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 56));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_39;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_39:
    int64x2_t v7 = 0;
    goto LABEL_44;
  }
  if (*((void *)this + 41)) {
    int64x2_t v7 = nullsub_7;
  }
  else {
    int64x2_t v7 = 0;
  }
LABEL_44:
  if (v7) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)((char *)this + 296));
  }
  if (sub_2167C5D84((uint64_t)this + 464)) {
    unint64_t v8 = nullsub_16;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8) {
    sub_2167C5854((unsigned char *)this + 464);
  }
  int v9 = (char *)this + 640;
  uint64_t result = sub_2167C5D84((uint64_t)v9);
  if (result) {
    int v11 = nullsub_17;
  }
  else {
    int v11 = 0;
  }
  if (v11) {
    return sub_2167C58FC(v9);
  }
  return result;
}

void sub_2167E72A0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E728CLL);
}

void sub_2167E72D4(_Unwind_Exception *a1)
{
}

int *Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling(Alembic::AbcGeom::v12::OPolyMeshSchema *a1, void *a2)
{
  uint64_t result = (int *)((char *)a1 + 8);
  int64x2_t v7 = result;
  unint64_t v8 = "OPolyMeshSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_2167B7AC8(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    int v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_2167E7378(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  int64x2_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E7368);
}

void sub_2167E73E0(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcGeom::v12::OPolyMeshSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  return a1 + 448 != sub_21678C2D8(a1 + 440, a2);
}

void sub_2167E744C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E743CLL);
}

void sub_2167E7484(_Unwind_Exception *a1)
{
}

uint64_t *Alembic::AbcGeom::v12::OPolyMeshSchema::createFaceSet(uint64_t a1, const void **a2)
{
  int v3 = (int *)(a1 + 8);
  uint64_t v36 = a1 + 8;
  uint64_t v37 = "OPolyMeshSchema::createFaceSet ()";
  int v4 = (uint64_t **)(a1 + 440);
  if (a1 + 448 != sub_21678C2D8(a1 + 440, a2))
  {
    sub_216778A5C((uint64_t)v18);
    sub_216779180(v19, (uint64_t)"faceSet has already been created in polymesh.", 45);
    std::stringbuf::str();
    sub_216778E70(&v28, &v34);
    if (v35 < 0) {
      operator delete((void *)v34);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int v9 = sub_216779038(exception, (uint64_t)&v28);
    __cxa_throw(v9, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167B7AC8(v3, (uint64_t)&v28);
  int v13 = v29;
  if (SHIBYTE(v31) < 0)
  {
    sub_216778F24(&v14, (void *)v30, *((unint64_t *)&v30 + 1));
  }
  else
  {
    long long v14 = v30;
    uint64_t v15 = v31;
  }
  uint64_t v12 = &unk_26C7495D0;
  uint64_t v16 = v32;
  uint64_t v17 = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v34) = 0;
  DWORD2(v34) = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167E8E14((uint64_t)v18, (uint64_t)&v12, (long long *)a2, &v34, v11, v10);
  long long v38 = a2;
  uint64_t v5 = sub_2167E8C30(v4, a2, (uint64_t)&unk_21740A39D, (long long **)&v38);
  sub_2167E7878((uint64_t)(v5 + 7), (uint64_t)v18);
  v18[0] = (long long *)&unk_26C749F60;
  uint64_t v20 = &unk_26C749A40;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v27);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v26);
  uint64_t v20 = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v25);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v23);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v22);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v18);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v12);
  v18[0] = (long long *)a2;
  int v6 = sub_2167E8C30(v4, a2, (uint64_t)&unk_21740A39D, v18) + 7;
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v28);
  return v6;
}

void sub_2167E7738(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_216779148((std::exception *)(v13 - 160));
  sub_216778D38((uint64_t)va);
  uint64_t v16 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v13 - 80, (uint64_t)v16);
  }
  else {
    sub_21679F9F4(v13 - 80, 0);
  }
  __cxa_end_catch();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E148, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26798E148))
    {
      uint64_t v17 = operator new(0x198uLL);
      sub_2167E996C((uint64_t)v17);
      qword_26798E140 = (uint64_t)v17;
      __cxa_guard_release(&qword_26798E148);
    }
  }
  JUMPOUT(0x2167E76A0);
}

void sub_2167E7834(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_26798E148);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E7878(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  sub_2167E7F50(a1 + 56, a2 + 56);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  uint64_t v8 = *(void *)(a2 + 336);
  uint64_t v7 = *(void *)(a2 + 344);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 344);
  *(void *)(a1 + 336) = v8;
  *(void *)(a1 + 344) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  std::string::operator=((std::string *)(a1 + 360), (const std::string *)(a2 + 360));
  uint64_t v11 = *(void *)(a2 + 384);
  uint64_t v10 = *(void *)(a2 + 392);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 392);
  *(void *)(a1 + 384) = v11;
  *(void *)(a1 + 392) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  return a1;
}

void sub_2167E795C(void *a1)
{
  *a1 = &unk_26C749F60;
  a1[7] = &unk_26C749A40;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 44));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 38));
  a1[7] = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 26));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 14));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::getFaceSetNames(uint64_t result, uint64_t *a2)
{
  BOOL v2 = *(void **)(result + 440);
  int v3 = (void *)(result + 448);
  if (v2 != (void *)(result + 448))
  {
    unint64_t v5 = a2[1];
    do
    {
      int v6 = (long long *)(v2 + 4);
      if (v5 >= a2[2])
      {
        uint64_t result = sub_2167E9A44(a2, v6);
        unint64_t v5 = result;
      }
      else
      {
        uint64_t result = (uint64_t)sub_2167E99E4(a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      uint64_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          BOOL v2 = v8;
        }
        while (!v9);
      }
      BOOL v2 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

void sub_2167E7ADC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E7AC8);
}

void sub_2167E7B10(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::getFaceSet@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v9 = a2;
  uint64_t v4 = sub_2167E8C30((uint64_t **)(a1 + 440), (const void **)a2, (uint64_t)&unk_21740A39D, &v9);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 16);
  unint64_t v5 = (unsigned char *)(a3 + 16);
  if (*((char *)v4 + 95) < 0)
  {
    sub_216778F24(v5, (void *)v4[9], v4[10]);
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 9);
    *(void *)(a3 + 32) = v4[11];
    *(_OWORD *)unint64_t v5 = v6;
  }
  *(void *)a3 = &unk_26C7495D0;
  *(void *)(a3 + 40) = v4[12];
  uint64_t v7 = v4[13];
  *(void *)(a3 + 48) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a3 = &unk_26C749F60;
  return sub_2167E8158(a3 + 56, (uint64_t)(v4 + 14));
}

void sub_2167E7C28(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OObject::~OObject(v9);
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v12);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  sub_2167E996C((uint64_t)v9);
  JUMPOUT(0x2167E7C14);
}

void sub_2167E7C80(_Unwind_Exception *a1)
{
}

std::string *Alembic::AbcGeom::v12::OPolyMeshSchema::setUVSourceName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 34, a2);
}

void sub_2167E7CAC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2167E9B68(a1);

  operator delete(v1);
}

void sub_2167E7CD4(uint64_t a1)
{
  sub_2167A13A4(a1 + 248);
  sub_2167A13A4(a1 + 296);
  sub_2167A13A4(a1 + 344);
  sub_2167A13A4(a1 + 392);
  sub_2167C5E20(a1 + 464);
  sub_2167C5E20(a1 + 640);
  sub_2167E8494(a1 + 440, *(void **)(a1 + 448));
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = a1 + 448;

  sub_2167E7ED0(a1);
}

uint64_t sub_2167E7D50(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return *(unsigned char *)(a1 + 840) != 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return *(unsigned char *)(a1 + 840) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return *(unsigned char *)(a1 + 840) != 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return *(unsigned char *)(a1 + 840) != 0;
    }
    if (*(void *)(a1 + 280))
    {
      if (*(char *)(a1 + 375) < 0)
      {
        if (*(void *)(a1 + 360)) {
          return *(unsigned char *)(a1 + 840) != 0;
        }
      }
      else if (*(unsigned char *)(a1 + 375))
      {
        return *(unsigned char *)(a1 + 840) != 0;
      }
      if (*(void *)(a1 + 376))
      {
        if (*(char *)(a1 + 423) < 0)
        {
          if (*(void *)(a1 + 408)) {
            return *(unsigned char *)(a1 + 840) != 0;
          }
        }
        else if (*(unsigned char *)(a1 + 423))
        {
          return *(unsigned char *)(a1 + 840) != 0;
        }
        if (*(void *)(a1 + 424)) {
          return 1;
        }
      }
    }
  }
  return *(unsigned char *)(a1 + 840) != 0;
}

void *sub_2167E7DE8(void *a1)
{
  *a1 = &unk_26C749F30;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_2167E7E54(void *a1)
{
  *a1 = &unk_26C749F30;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  operator delete(a1);
}

void sub_2167E7ED0(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_2167E7F24(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_2167E7F50(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v9 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  uint64_t v11 = *(void *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 144);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v11;
  *(void *)(a1 + 144) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  uint64_t v14 = *(void *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 192);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v14;
  *(void *)(a1 + 192) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  uint64_t v17 = *(void *)(a2 + 232);
  uint64_t v16 = *(void *)(a2 + 240);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v17;
  *(void *)(a1 + 240) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  return a1;
}

void sub_2167E8090(void *a1)
{
  *a1 = &unk_26C749F60;
  a1[7] = &unk_26C749A40;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 44));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 38));
  a1[7] = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 26));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 14));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);

  operator delete(v2);
}

uint64_t sub_2167E8158(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2167E8270(a1, a2);
  *(void *)uint64_t v4 = &unk_26C749A40;
  *(_DWORD *)(v4 + 248) = *(_DWORD *)(a2 + 248);
  uint64_t v5 = v4 + 256;
  if (*(char *)(a2 + 279) < 0)
  {
    sub_216778F24((unsigned char *)v5, *(void **)(a2 + 256), *(void *)(a2 + 264));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 256);
    *(void *)(v5 + 16) = *(void *)(a2 + 272);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  uint64_t v8 = (unsigned char *)(a1 + 304);
  if (*(char *)(a2 + 327) < 0)
  {
    sub_216778F24(v8, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 304);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(_OWORD *)uint64_t v8 = v9;
  }
  uint64_t v10 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  return a1;
}

void sub_2167E824C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_2167CC114(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E8270(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C749AF8;
  uint64_t v7 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v10 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  uint64_t v13 = (unsigned char *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_216778F24(v13, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)uint64_t v13 = v14;
  }
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  uint64_t v16 = (unsigned char *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_216778F24(v16, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)uint64_t v16 = v17;
  }
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_2167E8450(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_2167E8494(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2167E8494(a1, *a2);
    sub_2167E8494(a1, a2[1]);
    sub_2167E84F0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_2167E84F0(uint64_t a1)
{
  BOOL v2 = (Alembic::Abc::v12::OObject *)(a1 + 24);
  *(void *)(a1 + 24) = &unk_26C749F60;
  *(void *)(a1 + 80) = &unk_26C749A40;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 376));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 328));
  *(void *)(a1 + 80) = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 280));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 232));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 184));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 136));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 88));
  Alembic::Abc::v12::OObject::~OObject(v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2167E85C8(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749F98;
  long long v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  long long v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167E87A0(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167E86A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167E86C4(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0) {
    sub_2167E6B94(a1, a2, 0);
  }
}

void sub_2167E8710(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E86FCLL);
}

void sub_2167E8780(_Unwind_Exception *a1)
{
}

void sub_2167E87A0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v23 = 0;
  v24[0] = 0;
  uint64_t v22 = (uint64_t *)&v23;
  int v25 = 2;
  sub_2167898D0((uint64_t *)v26, (const void ***)&v22);
  v26[3] = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = 1;
  sub_2167877AC((uint64_t)&v22, v23);
  sub_2167A030C(a4, (uint64_t)&v25);
  sub_2167A030C(a5, (uint64_t)&v25);
  sub_2167A030C(a6, (uint64_t)&v25);
  sub_2167A030C(a7, (uint64_t)&v25);
  *(_DWORD *)(a1 + 8) = v25;
  v24[33] = a1 + 8;
  v24[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v22);
    sub_216779180(v24, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v22, v26);
  if (HIDWORD(v29) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_PolyMesh_v1");
    long long v30 = __p;
    uint64_t v13 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A39D, (long long **)&v30);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (HIDWORD(v29) != 1)
    {
      sub_216779094(__p, "schemaBaseType");
      sub_216779094(&__str, "AbcGeom_GeomBase_v1");
      long long v30 = __p;
      long long v14 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A39D, (long long **)&v30);
      std::string::operator=((std::string *)(v14 + 7), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v15;
  if (v16)
  {
    sub_216784EC4(v16);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v22, v23);
  if (v27) {
    sub_216784EC4(v27);
  }
  sub_2167877AC((uint64_t)v26, v26[1]);
}

void sub_2167E8A98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E89E4);
}

void sub_2167E8B7C(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E8BC8(uint64_t a1)
{
  return a1;
}

void sub_2167E8BF4(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t *sub_2167E8C30(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    sub_2167E8CDC((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2167E8DBC((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_2167E8CDC@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x1D0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2167E8D48(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2167E8D30(_Unwind_Exception *a1)
{
  sub_2167E8DBC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_2167E8D48(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  sub_2167E996C((uint64_t)(__dst + 3));
  return __dst;
}

void sub_2167E8DA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2167E8DBC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2167E84F0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_2167E8E14(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v12 = (_DWORD *)(a1 + 8);
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749F60;
  sub_2167E97A0(a1 + 56);
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  uint64_t v45 = 0;
  __p[0] = &__p[1];
  int v69 = v13;
  sub_2167898D0((uint64_t *)v70, (const void ***)__p);
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  int v73 = 0;
  uint64_t v74 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a4, (uint64_t)&v69);
  sub_2167A030C(a5, (uint64_t)&v69);
  sub_2167A030C(a6, (uint64_t)&v69);
  _DWORD *v12 = v69;
  uint64_t v67 = v12;
  int v68 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  long long v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    sub_216778A5C((uint64_t)__p);
    sub_216779180(&v45, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_216778E70(&__str, &v65);
    if (v66 < 0) {
      operator delete((void *)v65);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    long long v34 = sub_216779038(exception, (uint64_t)&__str);
    __cxa_throw(v34, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v65, v70);
  if (HIDWORD(v74) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_FaceSet_v1");
    uint64_t v59 = __p;
    long long v17 = sub_21677B174((uint64_t **)&v65, (const void **)__p, (uint64_t)&unk_21740A39D, (long long **)&v59);
    std::string::operator=((std::string *)(v17 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaObjTitle");
    sub_2167E9678(&__str);
    uint64_t v59 = __p;
    uint64_t v18 = sub_21677B174((uint64_t **)&v65, (const void **)__p, (uint64_t)&unk_21740A39D, (long long **)&v59);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaBaseType");
    sub_216779094(&__str, "AbcGeom_GeomBase_v1");
    uint64_t v59 = __p;
    int64x2_t v19 = sub_21677B174((uint64_t **)&v65, (const void **)__p, (uint64_t)&unk_21740A39D, (long long **)&v59);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  sub_2167A94C0(&__str, a3, (const void ***)&v65);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  char v21 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v20;
  if (v21)
  {
    sub_216784EC4(v21);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v23 = v71;
  uint64_t v22 = v72;
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v23)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v24 = (*(uint64_t (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v23);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v24 = v73;
  }
  v60[0] = 0;
  v60[1] = 0;
  uint64_t v59 = (void **)v60;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v42);
  sub_216779094(v40, ".faceset");
  int v25 = *v12;
  v39[0] = 1;
  v39[2] = v25;
  v38[0] = 2;
  v38[2] = v24;
  int v36 = 3;
  uint64_t v37 = (long long **)&v59;
  v35[0] = 6;
  v35[2] = v16;
  Alembic::AbcGeom::v12::OFaceSetSchema::OFaceSetSchema(__p, &v42, v40, v39, v38, &v36, v35);
  sub_2167E7F50(a1 + 56, (uint64_t)__p);
  *(_DWORD *)(a1 + 304) = v50;
  std::string::operator=((std::string *)(a1 + 312), &v51);
  uint64_t v27 = v52;
  uint64_t v26 = v53;
  if (v53) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
  }
  int v28 = *(std::__shared_weak_count **)(a1 + 344);
  *(void *)(a1 + 336) = v27;
  *(void *)(a1 + 344) = v26;
  if (v28) {
    sub_216784EC4(v28);
  }
  *(_DWORD *)(a1 + 352) = v54;
  std::string::operator=((std::string *)(a1 + 360), &v55);
  uint64_t v30 = v56;
  uint64_t v29 = v57;
  if (v57) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(a1 + 392);
  *(void *)(a1 + 384) = v30;
  *(void *)(a1 + 392) = v29;
  if (v31) {
    sub_216784EC4(v31);
  }
  *(_DWORD *)(a1 + 400) = v58;
  __p[0] = &unk_26C749A40;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v54);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v50);
  __p[0] = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v49);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v48);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v47);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v46);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p[1]);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43) {
    sub_216784EC4(v43);
  }
  sub_2167877AC((uint64_t)&v59, v60[0]);
  if (v22) {
    sub_216784EC4(v22);
  }
  sub_2167877AC((uint64_t)v64, v64[1]);
  if (v63 < 0) {
    operator delete(v62);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v65, *((void **)&v65 + 1));
  if (v14) {
    sub_216784EC4(v14);
  }
  if (v72) {
    sub_216784EC4(v72);
  }
  sub_2167877AC((uint64_t)v70, v70[1]);
  return a1;
}

void sub_2167E9474(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_216779148((std::exception *)&a70);
  sub_216778D38((uint64_t)&__p);
  if (v71) {
    sub_216784EC4(v71);
  }
  uint64_t v75 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v76 = (uint64_t)v75;
    sub_2167E9758(v70);
    sub_21679FA64(v72 - 168, v76);
  }
  else
  {
    sub_2167E9758(v70);
    sub_21679F9F4(v72 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E93BCLL);
}

void sub_2167E9630()
{
  sub_2167A03C4(v0 - 152);
  JUMPOUT(0x2167E9660);
}

void sub_2167E9678(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  BOOL v2 = std::string::insert(&v5, 0, "AbcGeom_FaceSet_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".faceset");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_2167E9724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2167E9758(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_2167A13A4(a1 + 304);
  sub_2167CCEA0(v2);

  sub_2167A9424(a1);
}

uint64_t sub_2167E97A0(uint64_t a1)
{
  uint64_t v2 = sub_2167E9848(a1);
  *(void *)uint64_t v2 = &unk_26C749A40;
  *(_DWORD *)(v2 + 248) = 2;
  sub_216779094((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  return a1;
}

void sub_2167E9824(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_2167CC114(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E9848(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749AF8;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_2167E9928(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E996C(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749F60;
  sub_2167E97A0(a1 + 56);
  return a1;
}

void sub_2167E99D0(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void *sub_2167E99E4(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_2167E9A3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2167E9A44(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  int v16 = v11;
  long long v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  int v16 = v11 + 24;
  sub_216790CCC(a1, v15);
  uint64_t v13 = a1[1];
  sub_216790E64((uint64_t)v15);
  return v13;
}

void sub_2167E9B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2167E9B68(uint64_t a1)
{
  *(void *)a1 = &unk_26C749EA8;
  if (*(char *)(a1 + 839) < 0) {
    operator delete(*(void **)(a1 + 816));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 768));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 712));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 664));
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 592));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 536));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 488));
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  sub_2167E8494(a1 + 440, *(void **)(a1 + 448));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(void *)a1 = &unk_26C749F30;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::getTopologyVariance(Alembic::AbcGeom::v12::IPolyMeshSchema *this)
{
  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::IPolyMeshSchema *)((char *)this + 344))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::IPolyMeshSchema *)((char *)this + 392)))
  {
    return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::IPolyMeshSchema *)((char *)this + 248)) ^ 1;
  }
  else
  {
    return 2;
  }
}

void sub_2167E9CDC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167E9CCCLL);
}

void sub_2167E9D14(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::IPolyMeshSchema::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  uint64_t v60 = a1 + 8;
  uint64_t v61 = "IPolyMeshSchema::init()";
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v33 = &v34;
  int v55 = 2;
  sub_2167898D0(v56, (const void ***)&v33);
  v56[3] = 0;
  uint64_t v57 = 0;
  int v58 = 0;
  uint64_t v59 = 1;
  sub_2167877AC((uint64_t)&v33, v34.__r_.__value_.__l.__data_);
  sub_2167A030C(a2, (uint64_t)&v55);
  sub_2167A030C(a3, (uint64_t)&v55);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v52 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v52 = 0;
  }
  uint64_t v51 = v8;
  int v49 = 0;
  int v50 = 0;
  int v47 = 0;
  int v48 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v53, &v51, &v49, &v47);
  sub_216779094(__p, "P");
  v44[0] = 5;
  v44[2] = 1;
  v43[0] = 1;
  v43[2] = v55;
  sub_2167BAD00((uint64_t)&v33, (int *)v53, (uint64_t)__p, v44, v43);
  *(_DWORD *)(a1 + 248) = v33;
  std::string::operator=((std::string *)(a1 + 256), &v34);
  uint64_t v10 = v35;
  uint64_t v9 = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v10;
  *(void *)(a1 + 288) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v33);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v53);
  if (v52) {
    sub_216784EC4(v52);
  }
  uint64_t v41 = v8;
  uint64_t v42 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v49 = 0;
  int v50 = 0;
  int v47 = 0;
  int v48 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v53, &v41, &v49, &v47);
  sub_216779094(__p, ".faceIndices");
  sub_2167BB37C((uint64_t)&v33, (int *)v53, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = v33;
  std::string::operator=((std::string *)(a1 + 352), &v34);
  uint64_t v13 = v35;
  uint64_t v12 = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  long long v14 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v13;
  *(void *)(a1 + 384) = v12;
  if (v14) {
    sub_216784EC4(v14);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v33);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v53);
  if (v42) {
    sub_216784EC4(v42);
  }
  uint64_t v39 = v8;
  int v40 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v49 = 0;
  int v50 = 0;
  int v47 = 0;
  int v48 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v53, &v39, &v49, &v47);
  sub_216779094(__p, ".faceCounts");
  sub_2167BB37C((uint64_t)&v33, (int *)v53, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 392) = v33;
  std::string::operator=((std::string *)(a1 + 400), &v34);
  uint64_t v16 = v35;
  uint64_t v15 = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  long long v17 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v16;
  *(void *)(a1 + 432) = v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v33);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v53);
  if (v40) {
    sub_216784EC4(v40);
  }
  sub_216779094(&v33, "uv");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v19 = PropertyHeader;
  if (v34.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v33);
    if (!v19) {
      goto LABEL_42;
    }
  }
  else if (!PropertyHeader)
  {
    goto LABEL_42;
  }
  uint64_t v31 = v8;
  uint64_t v32 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v53, "uv");
  sub_2167BBFC4((uint64_t)&v33, &v31, (uint64_t)v53, a2, a3);
  sub_2167BA690(a1 + 440, (uint64_t)&v33);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v38);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v37);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v33);
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v32) {
    sub_216784EC4(v32);
  }
LABEL_42:
  sub_216779094(&v33, "N");
  uint64_t v20 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v21 = v20;
  if (v34.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v33);
    if (!v21) {
      goto LABEL_52;
    }
  }
  else if (!v20)
  {
    goto LABEL_52;
  }
  uint64_t v29 = v8;
  uint64_t v30 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v53, "N");
  sub_2167BD348((uint64_t)&v33, &v29, (uint64_t)v53, a2, a3);
  sub_2167BA690(a1 + 592, (uint64_t)&v33);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v38);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v37);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v33);
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v30) {
    sub_216784EC4(v30);
  }
LABEL_52:
  sub_216779094(&v33, ".velocities");
  uint64_t v22 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v23 = v22;
  if (v34.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v33);
    if (!v23) {
      goto LABEL_66;
    }
  }
  else if (!v22)
  {
    goto LABEL_66;
  }
  uint64_t v27 = v8;
  int v28 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v49 = 0;
  int v50 = 0;
  int v47 = 0;
  int v48 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v53, &v27, &v49, &v47);
  sub_216779094(__p, ".velocities");
  sub_2167BE97C((uint64_t)&v33, (int *)v53, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = v33;
  std::string::operator=((std::string *)(a1 + 304), &v34);
  uint64_t v25 = v35;
  uint64_t v24 = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v25;
  *(void *)(a1 + 336) = v24;
  if (v26) {
    sub_216784EC4(v26);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v33);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v53);
  if (v28) {
    sub_216784EC4(v28);
  }
LABEL_66:
  *(unsigned char *)(a1 + 744) = 0;
  if (v7) {
    sub_216784EC4(v7);
  }
  if (v57) {
    sub_216784EC4(v57);
  }
  sub_2167877AC((uint64_t)v56, (void *)v56[1]);
}

void sub_2167EA324(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a15);
  if (a50 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v52 - 208));
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v51) {
    sub_216784EC4(v51);
  }
  sub_2167A03C4(v52 - 160);
  int v55 = __cxa_begin_catch(a1);
  uint64_t v56 = *(void (**)(uint64_t))(*(void *)v50 + 16);
  if (a2 == 2)
  {
    uint64_t v57 = (uint64_t)v55;
    v56(v50);
    sub_21679FA64(v52 - 96, v57);
  }
  else
  {
    v56(v50);
    sub_21679F9F4(v52 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167EA304);
}

void sub_2167EA5C8(_Unwind_Exception *a1)
{
}

void sub_2167EA5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void sub_2167EA600()
{
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::operator=(uint64_t a1, uint64_t a2)
{
  sub_2167E7F50(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v8 = *(void *)(a2 + 328);
  uint64_t v7 = *(void *)(a2 + 336);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v8;
  *(void *)(a1 + 336) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v11 = *(void *)(a2 + 376);
  uint64_t v10 = *(void *)(a2 + 384);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v11;
  *(void *)(a1 + 384) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v14 = *(void *)(a2 + 424);
  uint64_t v13 = *(void *)(a2 + 432);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v14;
  *(void *)(a1 + 432) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  sub_2167BA690(a1 + 440, a2 + 440);
  sub_2167BA690(a1 + 592, a2 + 592);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  *(unsigned char *)(a1 + 744) = 0;
  sub_2167EBA80(a1 + 752, *(void **)(a1 + 760));
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 776));
  return a1;
}

void Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames(Alembic::AbcGeom::v12::IPolyMeshSchema *this)
{
  uint64_t v2 = (int *)((char *)this + 8);
  long long v17 = v2;
  uint64_t v18 = "IPolyMeshSchema::loadFaceSetNames()";
  if (!*((unsigned char *)this + 744))
  {
    sub_2167EA9AC(v2, (uint64_t)v16);
    uint64_t v7 = this;
    uint64_t NumChildren = Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)v16);
    if (NumChildren)
    {
      for (uint64_t i = 0; i != NumChildren; ++i)
      {
        ChildHeader = (long long *)Alembic::Abc::v12::IObject::getChildHeader((Alembic::Abc::v12::IObject *)v16);
        if (sub_2167EBBC4((uint64_t)(ChildHeader + 3), 0))
        {
          sub_2167EC1FC((uint64_t)v8);
          uint64_t v19 = ChildHeader;
          uint64_t v6 = sub_2167EC018((uint64_t **)v7 + 94, (const void **)ChildHeader, (uint64_t)&unk_21740A4CF, &v19);
          sub_2167EAB00((uint64_t)(v6 + 7), (uint64_t)v8);
          v8[0] = &unk_26C749FB8;
          uint64_t v9 = &unk_26C749FF0;
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v15);
          uint64_t v9 = &unk_26C74A078;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v14);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v13);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v12);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v11);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v10);
          Alembic::Abc::v12::IObject::~IObject(v8);
        }
      }
    }
    *((unsigned char *)v7 + 744) = 1;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v16);
  }
}

void sub_2167EA920(void *a1, int a2)
{
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)(v2 - 216));
  uint64_t v5 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v2 - 120, (uint64_t)v5);
  }
  else {
    sub_21679F9F4(v2 - 120, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167EA900);
}

void sub_2167EA98C(_Unwind_Exception *a1)
{
}

void sub_2167EA9AC(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v9 = "IBasePropertyT::getObject()";
  (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 4) + 24))(&v6);
  int v4 = *a1;
  v5[0] = 1;
  v5[2] = v4;
  sub_2167A0084(a2, &v6, v5);
  if (v7) {
    sub_216784EC4(v7);
  }
}

void sub_2167EAA44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  uint64_t v16 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a13, (uint64_t)v16);
  }
  else {
    sub_21679F9F4((uint64_t)&a13, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)(v13 + 8) = 2;
  sub_216779094((void *)(v13 + 16), "");
  *(void *)uint64_t v13 = &unk_26C749578;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(void *)(v13 + 88) = 0;
  JUMPOUT(0x2167EAA30);
}

void sub_2167EAAE0(_Unwind_Exception *a1)
{
}

uint64_t sub_2167EAB00(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  sub_2167E7F50(a1 + 96, a2 + 96);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v11 = *(void *)(a2 + 376);
  uint64_t v10 = *(void *)(a2 + 384);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v11;
  *(void *)(a1 + 384) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  return a1;
}

void sub_2167EABD4(uint64_t a1)
{
  *(void *)a1 = &unk_26C749FB8;
  *(void *)(a1 + 96) = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 344));
  *(void *)(a1 + 96) = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));

  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::getFaceSetNames(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 776);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames((Alembic::AbcGeom::v12::IPolyMeshSchema *)a1);
  uint64_t v5 = *(void **)(a1 + 752);
  uint64_t v6 = (void *)(a1 + 760);
  if (v5 != (void *)(a1 + 760))
  {
    unint64_t v7 = a2[1];
    do
    {
      uint64_t v8 = (long long *)(v5 + 4);
      if (v7 >= a2[2])
      {
        unint64_t v7 = sub_2167E9A44(a2, v8);
      }
      else
      {
        sub_2167E99E4(a2, v8);
        v7 += 24;
      }
      a2[1] = v7;
      uint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v11);
      }
      uint64_t v5 = v10;
    }
    while (v10 != v6);
  }
  return pthread_mutex_unlock(v4);
}

void sub_2167EAD78(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(v9);
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v12);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167EAD5CLL);
}

void sub_2167EADCC(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcGeom::v12::IPolyMeshSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 776);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  if (!*(unsigned char *)(a1 + 744)) {
    Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames((Alembic::AbcGeom::v12::IPolyMeshSchema *)a1);
  }
  uint64_t v5 = sub_21678C2D8(a1 + 752, a2);
  pthread_mutex_unlock(v4);
  return a1 + 760 != v5;
}

void sub_2167EAE74(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(v9);
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v12);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167EAE60);
}

void sub_2167EAED4(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::IPolyMeshSchema::getFaceSet@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (int *)(a1 + 8);
  uint64_t v27 = a1 + 8;
  int v28 = "IPolyMeshSchema::getFaceSet()";
  unint64_t v7 = (pthread_mutex_t *)(a1 + 776);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 776));
  if (!*(unsigned char *)(a1 + 744)) {
    Alembic::AbcGeom::v12::IPolyMeshSchema::loadFaceSetNames((Alembic::AbcGeom::v12::IPolyMeshSchema *)a1);
  }
  if (a1 + 760 == sub_21678C2D8(a1 + 752, a2))
  {
    sub_216778A5C((uint64_t)v15);
    sub_216779180(v16, (uint64_t)"The requested FaceSet name can't be found in PolyMesh.", 54);
    std::stringbuf::str();
    sub_216778E70(v24, &v25);
    if (v26 < 0) {
      operator delete((void *)v25);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v13 = sub_216779038(exception, (uint64_t)v24);
    __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  v15[0] = a2;
  uint64_t v8 = sub_2167EC018((uint64_t **)(a1 + 752), a2, (uint64_t)&unk_21740A4CF, (long long **)v15);
  if (!sub_2167EC41C((uint64_t)(v8 + 7)))
  {
    sub_2167EA9AC(v6, (uint64_t)v24);
    LODWORD(v25) = 0;
    DWORD2(v25) = 0;
    v14[0] = 0;
    v14[2] = 0;
    sub_2167EC44C((uint64_t)v15, (uint64_t)v24, (uint64_t)a2, &v25, v14);
    uint64_t v29 = a2;
    uint64_t v9 = sub_2167EC018((uint64_t **)(a1 + 752), a2, (uint64_t)&unk_21740A4CF, (long long **)&v29);
    sub_2167EAB00((uint64_t)(v9 + 7), (uint64_t)v15);
    v15[0] = &unk_26C749FB8;
    long long v17 = &unk_26C749FF0;
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
    long long v17 = &unk_26C74A078;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v22);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v21);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v20);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v19);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v18);
    Alembic::Abc::v12::IObject::~IObject(v15);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v24);
  }
  v15[0] = a2;
  uint64_t v10 = sub_2167EC018((uint64_t **)(a1 + 752), a2, (uint64_t)&unk_21740A4CF, (long long **)v15);
  sub_2167A2320((uint64_t)a3, (uint64_t)(v10 + 7));
  *a3 = &unk_26C749FB8;
  sub_2167EB704((uint64_t)(a3 + 12), (uint64_t)(v10 + 19));
  return pthread_mutex_unlock(v7);
}

void sub_2167EB188(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216779148((std::exception *)(v6 - 216));
  sub_216778D38((uint64_t)va);
  pthread_mutex_unlock(v5);
  uint64_t v9 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v6 - 96, (uint64_t)v9);
  }
  else {
    sub_21679F9F4(v6 - 96, 0);
  }
  __cxa_end_catch();
  sub_2167EC1FC(v4);
  JUMPOUT(0x2167EB0F0);
}

void sub_2167EB258(_Unwind_Exception *a1)
{
}

void *sub_2167EB27C(void *a1)
{
  *a1 = &unk_26C749FF0;
  uint64_t v2 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 31));
  *a1 = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 1));
  return a1;
}

void sub_2167EB318(uint64_t a1)
{
  *(void *)a1 = &unk_26C749FB8;
  *(void *)(a1 + 96) = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 344));
  *(void *)(a1 + 96) = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);

  operator delete(v2);
}

void *sub_2167EB3D8(void *a1)
{
  *a1 = &unk_26C74A078;
  uint64_t v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_2167EB444(void *a1)
{
  *a1 = &unk_26C749FF0;
  uint64_t v2 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 31));
  *a1 = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 1));

  operator delete(a1);
}

void sub_2167EB4F0(uint64_t a1)
{
  sub_2167A13A4(a1 + 248);

  sub_2167EB664(a1);
}

BOOL sub_2167EB52C(uint64_t a1)
{
  BOOL result = sub_2167EB6B8(a1);
  if (result)
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return 0;
    }
    return *(void *)(a1 + 280) != 0;
  }
  return result;
}

void *sub_2167EB57C(void *a1)
{
  *a1 = &unk_26C74A078;
  uint64_t v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_2167EB5E8(void *a1)
{
  *a1 = &unk_26C74A078;
  uint64_t v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);

  operator delete(a1);
}

void sub_2167EB664(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_2167EB6B8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 39)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(void *)(a1 + 72)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    return 0;
  }
  return *(void *)(a1 + 88) != 0;
}

uint64_t sub_2167EB704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2167EB7F4(a1, a2);
  *(void *)uint64_t v4 = &unk_26C749FF0;
  *(_DWORD *)(v4 + 248) = *(_DWORD *)(a2 + 248);
  uint64_t v5 = v4 + 256;
  if (*(char *)(a2 + 279) < 0)
  {
    sub_216778F24((unsigned char *)v5, *(void **)(a2 + 256), *(void *)(a2 + 264));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 256);
    *(void *)(v5 + 16) = *(void *)(a2 + 272);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_2167EB7A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 1));
  _Unwind_Resume(a1);
}

uint64_t sub_2167EB7F4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C74A078;
  uint64_t v7 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v10 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  uint64_t v13 = (unsigned char *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_216778F24(v13, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)uint64_t v13 = v14;
  }
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  uint64_t v16 = (unsigned char *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_216778F24(v16, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)uint64_t v16 = v17;
  }
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_2167EB9D4(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2167EBA18(uint64_t a1)
{
  return a1;
}

void sub_2167EBA44(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2167EBA80(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2167EBA80(a1, *a2);
    sub_2167EBA80(a1, a2[1]);
    sub_2167EBADC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_2167EBADC(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  *(void *)(a1 + 24) = &unk_26C749FB8;
  *(void *)(a1 + 120) = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 368));
  *(void *)(a1 + 120) = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 320));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 272));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 224));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 176));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 128));
  Alembic::Abc::v12::IObject::~IObject(v2);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_2167EBBC4(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v36, "schema");
    sub_21679F2AC(a1, v36, &v38);
    if (((char)v41 & 0x80000000) == 0)
    {
      BOOL v11 = v41 == 18 && v38 == (void *)0x5F6D6F6547636241 && v39 == 0x5F74655365636146 && v40 == 12662;
      goto LABEL_78;
    }
    uint64_t v12 = v38;
    BOOL v11 = v39 == 18 && *v38 == 0x5F6D6F6547636241 && v38[1] == 0x5F74655365636146 && *((_WORD *)v38 + 8) == 12662;
    goto LABEL_77;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v36, "schemaObjTitle");
  sub_21679F2AC(a1, v36, &v38);
  sub_2167EBF38(&v35);
  uint64_t v3 = v41;
  if ((v41 & 0x80u) == 0) {
    size_t v4 = v41;
  }
  else {
    size_t v4 = v39;
  }
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_45:
    sub_216779094(v30, "schema");
    sub_21679F2AC(a1, (const void **)v30, &__s1);
    sub_2167EBF38(&__p);
    unsigned __int8 v15 = v34;
    if ((v34 & 0x80u) == 0) {
      size_t v16 = v34;
    }
    else {
      size_t v16 = __n;
    }
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    if (v16 != v17)
    {
      BOOL v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v34 < 0)
    {
      BOOL v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        BOOL v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v31 < 0) {
            operator delete(v30[0]);
          }
          if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v15 = v34;
        goto LABEL_69;
      }
      uint64_t v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        int v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v22 = v23;
        int v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v24 = v25;
        BOOL v27 = v20-- != 0;
        BOOL v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v35;
  }
  else {
    uint64_t v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v41 & 0x80) != 0)
  {
    if (memcmp(v38, v7, v39)) {
      goto LABEL_45;
    }
  }
  else if (v41)
  {
    long long v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      uint64_t v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_65;
      }
    }
    goto LABEL_45;
  }
LABEL_65:
  BOOL v11 = 1;
  if (v6 < 0) {
LABEL_74:
  }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v41 & 0x80000000) == 0) {
    goto LABEL_78;
  }
  uint64_t v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0) {
    operator delete((void *)v36[0]);
  }
  return v11;
}

void sub_2167EBEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_2167EBF38(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_FaceSet_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  size_t v4 = std::string::append(&v6, ".faceset");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_2167EBFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2167EC018(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  std::string v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    sub_2167EC0C4((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2167EC1A4((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_2167EC0C4@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string v6 = operator new(0x1C0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = sub_2167EC130(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2167EC118(_Unwind_Exception *a1)
{
  sub_2167EC1A4(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_2167EC130(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  sub_2167EC1FC((uint64_t)(__dst + 3));
  return __dst;
}

void sub_2167EC188(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2167EC1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2167EBADC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_2167EC1FC(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)a1 = &unk_26C749FB8;
  sub_2167EC284(a1 + 96);
  return a1;
}

void sub_2167EC270(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2167EC284(uint64_t a1)
{
  uint64_t v2 = sub_2167EC2F8(a1);
  *(void *)uint64_t v2 = &unk_26C749FF0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_216779094((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  return a1;
}

void sub_2167EC2E4(_Unwind_Exception *a1)
{
  sub_2167EB3D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2167EC2F8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A078;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_2167EC3D8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2167EC41C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  if (*(void *)(a1 + 40)) {
    return sub_2167EB52C(a1 + 96);
  }
  return 0;
}

uint64_t sub_2167EC44C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v55 = 0;
  LODWORD(v56[0]) = 0;
  LODWORD(__p) = 0;
  LODWORD(v38) = 0;
  int v10 = sub_2167ECA64(a4, a5, &v55, &__p);
  LODWORD(v40) = 1;
  LODWORD(v41) = v10;
  sub_2167ECB6C(a1, a2, a3, &v40);
  *(void *)a1 = &unk_26C749FB8;
  sub_2167EC284(a1 + 96);
  unsigned __int8 v41 = 0;
  v42[0] = 0;
  __int16 v40 = (const void **)&v41;
  int v55 = 2;
  sub_2167898D0(v56, &v40);
  v56[3] = 0;
  uint64_t v57 = 0;
  int v58 = 0;
  uint64_t v59 = 1;
  sub_2167877AC((uint64_t)&v40, v41);
  sub_2167A030C(a4, (uint64_t)&v55);
  sub_2167A030C(a5, (uint64_t)&v55);
  uint64_t v53 = a1 + 8;
  char v54 = "ISchemaObject::ISchemaObject( IObject)";
  uint64_t v11 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)a1) + 48;
  if ((sub_2167EBBC4(v11, v59) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v40);
    int v18 = sub_216779180(v42, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(&v51, "schema");
    sub_21679F2AC(v11, (const void **)&v51, &__p);
    if ((v39 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v39 & 0x80u) == 0) {
      uint64_t v20 = v39;
    }
    else {
      uint64_t v20 = v38;
    }
    uint64_t v21 = sub_216779180(v18, (uint64_t)p_p, v20);
    int v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    sub_216779180(v22, (uint64_t)"AbcGeom_FaceSet_v1", 18);
    if ((char)v39 < 0) {
      operator delete(__p);
    }
    if (v52 < 0) {
      operator delete((void *)v51);
    }
    std::stringbuf::str();
    sub_216778E70(&__p, &v51);
    if (v52 < 0) {
      operator delete((void *)v51);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int v24 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v24, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v40);
    int v25 = sub_216779180(v42, (uint64_t)"Bad child: ", 11);
    int v26 = *(char *)(a3 + 23);
    if (v26 >= 0) {
      uint64_t v27 = a3;
    }
    else {
      uint64_t v27 = *(void *)a3;
    }
    if (v26 >= 0) {
      uint64_t v28 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v28 = *(void *)(a3 + 8);
    }
    sub_216779180(v25, v27, v28);
    std::stringbuf::str();
    sub_216778E70(&__p, &v51);
    if (v52 < 0) {
      operator delete((void *)v51);
    }
    uint64_t v29 = __cxa_allocate_exception(0x20uLL);
    uint64_t v30 = sub_216779038(v29, (uint64_t)&__p);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 40))(&v35);
  v34[0] = 0;
  v34[2] = 0;
  v33[0] = 0;
  v33[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, &v35, v34, v33);
  sub_216779094(&v51, ".faceset");
  int v13 = *(_DWORD *)(a1 + 8);
  v32[0] = 1;
  v32[2] = v13;
  v31[0] = 5;
  v31[2] = v59;
  sub_2167ECD38((uint64_t)&v40, (uint64_t)&__p, (uint64_t)&v51, v32, v31);
  sub_2167E7F50(a1 + 96, (uint64_t)&v40);
  *(_DWORD *)(a1 + 344) = v47;
  std::string::operator=((std::string *)(a1 + 352), &v48);
  uint64_t v15 = v49;
  uint64_t v14 = v50;
  if (v50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v16 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v15;
  *(void *)(a1 + 384) = v14;
  if (v16) {
    sub_216784EC4(v16);
  }
  __int16 v40 = (const void **)&unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v47);
  __int16 v40 = (const void **)&unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v46);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v45);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v44);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v43);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v41);
  if (v52 < 0) {
    operator delete((void *)v51);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  if (v36) {
    sub_216784EC4(v36);
  }
  if (v57) {
    sub_216784EC4(v57);
  }
  sub_2167877AC((uint64_t)v56, (void *)v56[1]);
  return a1;
}

void sub_2167EC8D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a28);
  uint64_t v33 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v34 = (uint64_t)v33;
    sub_2167ECCF0(v29);
    sub_21679FA64(v30 - 160, v34);
  }
  else
  {
    sub_2167ECCF0(v29);
    sub_21679F9F4(v30 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167EC6F8);
}

void sub_2167ECA1C()
{
  sub_2167A03C4(v0 - 144);
  JUMPOUT(0x2167ECA4CLL);
}

uint64_t sub_2167ECA64(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  v11[0] = 0;
  v11[1] = 0;
  int v10 = (const void **)v11;
  unsigned int v12 = 2;
  sub_2167898D0(v13, &v10);
  v13[3] = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v16 = 1;
  sub_2167877AC((uint64_t)&v10, v11[0]);
  sub_2167A030C(a1, (uint64_t)&v12);
  sub_2167A030C(a2, (uint64_t)&v12);
  sub_2167A030C(a3, (uint64_t)&v12);
  sub_2167A030C(a4, (uint64_t)&v12);
  uint64_t v8 = v12;
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)v13, (void *)v13[1]);
  return v8;
}

void sub_2167ECB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_2167ECB6C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)a1 = &unk_26C749578;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167A2320((uint64_t)v14, a2);
  v13[0] = 0;
  void v13[2] = 0;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  int v9 = sub_2167A2218((uint64_t)v14, a4, v13, v12, v11);
  Alembic::Abc::v12::IObject::init(a1, (uint64_t)&v15, a3, v9);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v14);
  if (v16) {
    sub_216784EC4(v16);
  }
  Alembic::Abc::v12::IObject::initInstance((std::string *)a1);
  return a1;
}

void sub_2167ECC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (*(char *)(v16 + 95) < 0) {
    operator delete(*(void **)(v16 + 72));
  }
  int v18 = *(std::__shared_weak_count **)(v16 + 64);
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v16 + 48);
  if (v19) {
    sub_216784EC4(v19);
  }
  if (*(char *)(v16 + 39) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_2167ECCF0(Alembic::Abc::v12::IObject *a1)
{
  uint64_t v2 = (uint64_t)a1 + 96;
  sub_2167A13A4((uint64_t)a1 + 344);
  sub_2167EB664(v2);

  Alembic::Abc::v12::IObject::reset(a1);
}

uint64_t sub_2167ECD38(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v8 = sub_2167ECDE0(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_26C749FF0;
  *(_DWORD *)(v8 + 248) = 2;
  sub_216779094((void *)(v8 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  Alembic::AbcGeom::v12::IFaceSetSchema::init(a1, a4, a5);
  return a1;
}

void sub_2167ECDBC(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  sub_2167EB3D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2167ECDE0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v8 = sub_2167ECF20(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_26C74A078;
  *(_DWORD *)(v8 + 56) = 2;
  sub_216779094((void *)(v8 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_2167ECFCC(a1, a4, a5);
  return a1;
}

void sub_2167ECECC(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_2167ECF20(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A0A8;
  sub_2167ED6D8(a1, a2, a3, a4, a5);
  return a1;
}

void sub_2167ECFB8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_2167ECFCC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  uint64_t v53 = a1 + 8;
  char v54 = "IGeomBaseSchema::init()";
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v44 = &v45;
  int v48 = 2;
  sub_2167898D0(v49, (const void ***)&v44);
  v49[3] = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 1;
  sub_2167877AC((uint64_t)&v44, v45.__r_.__value_.__l.__data_);
  sub_2167A030C(a2, (uint64_t)&v48);
  sub_2167A030C(a3, (uint64_t)&v48);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v42 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v42 = 0;
  }
  uint64_t v41 = v8;
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v41, &v39, &v37);
  sub_216779094(__p, ".selfBnds");
  sub_2167B10BC((uint64_t)&v44, v43, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 56) = v44;
  std::string::operator=((std::string *)(a1 + 64), &v45);
  uint64_t v10 = v46;
  uint64_t v9 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v42) {
    sub_216784EC4(v42);
  }
  sub_216779094(&v44, ".childBnds");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v13 = PropertyHeader;
  if (v45.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v44);
    if (!v13) {
      goto LABEL_26;
    }
  }
  else if (!PropertyHeader)
  {
    goto LABEL_26;
  }
  uint64_t v33 = v8;
  uint64_t v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v33, &v39, &v37);
  sub_216779094(__p, ".childBnds");
  sub_2167B10BC((uint64_t)&v44, v43, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 104) = v44;
  std::string::operator=((std::string *)(a1 + 112), &v45);
  uint64_t v15 = v46;
  uint64_t v14 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = v14;
  if (v16) {
    sub_216784EC4(v16);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v34) {
    sub_216784EC4(v34);
  }
LABEL_26:
  sub_216779094(&v44, ".arbGeomParams");
  uint64_t v17 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v18 = v17;
  if (v45.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v44);
    if (!v18) {
      goto LABEL_40;
    }
  }
  else if (!v17)
  {
    goto LABEL_40;
  }
  uint64_t v31 = v8;
  uint64_t v32 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v31, &v39, &v37);
  sub_216779094(__p, ".arbGeomParams");
  int v29 = 1;
  int v30 = v48;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v44, v43, __p, &v29);
  *(_DWORD *)(a1 + 152) = v44;
  std::string::operator=((std::string *)(a1 + 160), &v45);
  uint64_t v20 = v46;
  uint64_t v19 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v20;
  *(void *)(a1 + 192) = v19;
  if (v21) {
    sub_216784EC4(v21);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v32) {
    sub_216784EC4(v32);
  }
LABEL_40:
  sub_216779094(&v44, ".userProperties");
  uint64_t v22 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v23 = v22;
  if (v45.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v44);
    if (!v23) {
      goto LABEL_54;
    }
  }
  else if (!v22)
  {
    goto LABEL_54;
  }
  uint64_t v27 = v8;
  uint64_t v28 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v27, &v39, &v37);
  sub_216779094(__p, ".userProperties");
  int v29 = 1;
  int v30 = v48;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v44, v43, __p, &v29);
  *(_DWORD *)(a1 + 200) = v44;
  std::string::operator=((std::string *)(a1 + 208), &v45);
  uint64_t v25 = v46;
  uint64_t v24 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  int v26 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v25;
  *(void *)(a1 + 240) = v24;
  if (v26) {
    sub_216784EC4(v26);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v28) {
    sub_216784EC4(v28);
  }
LABEL_54:
  if (v7) {
    sub_216784EC4(v7);
  }
  if (v50) {
    sub_216784EC4(v50);
  }
  sub_2167877AC((uint64_t)v49, (void *)v49[1]);
}

void sub_2167ED4B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a36);
  if (a23 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a30);
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v41) {
    sub_216784EC4(v41);
  }
  sub_2167A03C4(v42 - 160);
  std::string v45 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v42 - 96, (uint64_t)v45);
  }
  else {
    sub_21679F9F4(v42 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167ED494);
}

void sub_2167ED694(_Unwind_Exception *a1)
{
}

void sub_2167ED6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
}

void sub_2167ED6CC()
{
}

void sub_2167ED6D8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *((void *)&v35 + 1) = 0;
  v36[0] = 0;
  *(void *)&long long v35 = (char *)&v35 + 8;
  int v37 = 2;
  sub_2167898D0(v38, (const void ***)&v35);
  v38[3] = 0;
  int v39 = 0;
  int v40 = 0;
  uint64_t v41 = 1;
  sub_2167877AC((uint64_t)&v35, *((void **)&v35 + 1));
  sub_2167A030C(a4, (uint64_t)&v37);
  sub_2167A030C(a5, (uint64_t)&v37);
  *(_DWORD *)(a1 + 8) = v37;
  v36[34] = a1 + 8;
  v36[35] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(void *)(a2 + 16)) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a2 + 31))
  {
LABEL_18:
    sub_216778A5C((uint64_t)&v35);
    sub_216779180(v36, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)v33);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 40);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 80))(v10, a3);
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v35);
    uint64_t v18 = sub_216779180(v36, (uint64_t)"Nonexistent compound property: ", 31);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    sub_216779180(v18, v20, v21);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v22 = __cxa_allocate_exception(0x20uLL);
    uint64_t v23 = sub_216779038(v22, (uint64_t)v33);
    __cxa_throw(v23, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = v12 + 32;
  if ((sub_2167EDC10(v12 + 32, v41) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v35);
    uint64_t v24 = sub_216779180(v36, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(__p, "schema");
    sub_21679F2AC(v13, (const void **)__p, v33);
    if ((v34 & 0x80u) == 0) {
      uint64_t v25 = v33;
    }
    else {
      uint64_t v25 = (void **)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v26 = v34;
    }
    else {
      uint64_t v26 = (uint64_t)v33[1];
    }
    uint64_t v27 = sub_216779180(v24, (uint64_t)v25, v26);
    uint64_t v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"AbcGeom_FaceSet_v1", 18);
    if ((char)v34 < 0) {
      operator delete(v33[0]);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    int v29 = __cxa_allocate_exception(0x20uLL);
    int v30 = sub_216779038(v29, (uint64_t)v33);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 104))(&v35, v10, a3);
  long long v14 = v35;
  long long v35 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (*((void *)&v35 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v39) {
    sub_216784EC4(v39);
  }
  sub_2167877AC((uint64_t)v38, (void *)v38[1]);
}

void sub_2167EDAAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  int v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167ED860);
}

void sub_2167EDBD8()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2167EDC08);
}

uint64_t sub_2167EDC10(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  if ((a2 & 0xFFFFFFFD) != 0) {
    return 0;
  }
  sub_216779094(__p, "schema");
  sub_21679F2AC(a1, (const void **)__p, &v11);
  if (v14 < 0)
  {
    BOOL v2 = v12 == 18 && *v11 == 0x5F6D6F6547636241 && v11[1] == 0x5F74655365636146 && *((_WORD *)v11 + 8) == 12662;
    operator delete(v11);
  }
  else
  {
    BOOL v2 = v14 == 18 && v11 == (void *)0x5F6D6F6547636241 && v12 == 0x5F74655365636146 && v13 == 12662;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2167EDD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::OSubDSchema(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  __int16 v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167EE23C(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C74A0C8;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_216779094((void *)(a1 + 448), "");
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_216779094((void *)(a1 + 496), "");
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_216779094((void *)(a1 + 544), "");
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_216779094((void *)(a1 + 592), "");
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_216779094((void *)(a1 + 640), "");
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_216779094((void *)(a1 + 688), "");
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_216779094((void *)(a1 + 736), "");
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_216779094((void *)(a1 + 784), "");
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_216779094((void *)(a1 + 832), "");
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_216779094((void *)(a1 + 880), "");
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  sub_2167DB444(a1 + 920);
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(void *)(a1 + 1120) = a1 + 1128;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OSubDSchema::init((Alembic::AbcGeom::v12::OSubDSchema *)a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167EE0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::OArrayProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  sub_2167E8494(v21, *(void **)(v18 + 1128));
  if (*(char *)(v18 + 1119) < 0) {
    operator delete(*v19);
  }
  sub_2167C5410(v20);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v18 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v18 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v18 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v18 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v18 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  sub_2167EE864((void *)v18);
  _Unwind_Resume(a1);
}

uint64_t sub_2167EE23C(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  __int16 v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167F5754(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C74A150;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  sub_2167F5850(a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_2167EE47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::OScalarProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v21);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v18 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::init(Alembic::AbcGeom::v12::OSubDSchema *this, int a2, char a3)
{
  char v32 = (char *)this + 8;
  uint64_t v33 = "OSubDSchema::init()";
  *((unsigned char *)this + 1144) = a3;
  *((void *)this + 144) = 0;
  *((_DWORD *)this + 290) = a2;
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    size_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Alembic::AbcGeom::v12::OSubDSchema::createPositionsProperty(this);
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".faceIndices");
    int v6 = *((_DWORD *)this + 290);
    int v22 = 2;
    int v23 = v6;
    int v20 = 0;
    int v21 = 0;
    int v18 = 0;
    int v19 = 0;
    int v16 = 0;
    int v17 = 0;
    sub_2167C6640((uint64_t)&v28, &v26, (uint64_t)__p, &v22, &v20, &v18, &v16);
    *((_DWORD *)this + 74) = v28;
    std::string::operator=((std::string *)((char *)this + 304), &v29);
    uint64_t v8 = v30;
    uint64_t v7 = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 42);
    *((void *)this + 41) = v8;
    *((void *)this + 42) = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27) {
      sub_216784EC4(v27);
    }
    uint64_t v14 = v5;
    int v15 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".faceCounts");
    int v10 = *((_DWORD *)this + 290);
    int v22 = 2;
    int v23 = v10;
    int v20 = 0;
    int v21 = 0;
    int v18 = 0;
    int v19 = 0;
    int v16 = 0;
    int v17 = 0;
    sub_2167C6640((uint64_t)&v28, &v14, (uint64_t)__p, &v22, &v20, &v18, &v16);
    *((_DWORD *)this + 86) = v28;
    std::string::operator=((std::string *)((char *)this + 352), &v29);
    uint64_t v12 = v30;
    uint64_t v11 = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v13 = (std::__shared_weak_count *)*((void *)this + 48);
    *((void *)this + 47) = v12;
    *((void *)this + 48) = v11;
    if (v13) {
      sub_216784EC4(v13);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      sub_216784EC4(v15);
    }
    if (v4) {
      sub_216784EC4(v4);
    }
  }
}

void sub_2167EE734(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v29 - 96));
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v27) {
    sub_216784EC4(v27);
  }
  char v32 = __cxa_begin_catch(a1);
  uint64_t v33 = *(void (**)(uint64_t))(*(void *)v28 + 16);
  if (a2 == 2)
  {
    uint64_t v34 = (uint64_t)v32;
    v33(v28);
    sub_21679FA64(v29 - 48, v34);
  }
  else
  {
    v33(v28);
    sub_21679F9F4(v29 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167EE720);
}

void sub_2167EE844(_Unwind_Exception *a1)
{
}

void *sub_2167EE864(void *a1)
{
  *a1 = &unk_26C74A150;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::OSubDSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v25 = *((void *)a2 + 4);
  uint64_t v26 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *a2;
  LODWORD(v23) = 1;
  LODWORD(v24) = v12;
  sub_2167EE23C(a1, &v25, a3, &v23, a4, a5, a6);
  if (v26) {
    sub_216784EC4(v26);
  }
  *(void *)a1 = &unk_26C74A0C8;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_216779094((void *)(a1 + 448), "");
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_216779094((void *)(a1 + 496), "");
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_216779094((void *)(a1 + 544), "");
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_216779094((void *)(a1 + 592), "");
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_216779094((void *)(a1 + 640), "");
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_216779094((void *)(a1 + 688), "");
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_216779094((void *)(a1 + 736), "");
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_216779094((void *)(a1 + 784), "");
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_216779094((void *)(a1 + 832), "");
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_216779094((void *)(a1 + 880), "");
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  sub_2167DB444(a1 + 920);
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(void *)(a1 + 1120) = a1 + 1128;
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  sub_2167CC320(a4, a5, a6, &v21, &v23);
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  int v13 = sub_2167CC43C(a4, a5, a6, &v21);
  if (v23)
  {
    uint64_t v14 = *((void *)a2 + 4);
    int v15 = (std::__shared_weak_count *)*((void *)a2 + 5);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 24))(&v19);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 24))(&v21);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v23);
    if (v22) {
      sub_216784EC4(v22);
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v15) {
      sub_216784EC4(v15);
    }
  }
  else
  {
    int v16 = v13;
  }
  LODWORD(v21) = 0;
  LODWORD(v22) = 0;
  char v17 = sub_2167CD0F8(a4, a5, a6, &v21);
  Alembic::AbcGeom::v12::OSubDSchema::init((Alembic::AbcGeom::v12::OSubDSchema *)a1, v16, v17);
  if (v24) {
    sub_216784EC4(v24);
  }
  return a1;
}

void sub_2167EEC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  sub_2167E8494(v18, *(void **)(v14 + 1128));
  if (*(char *)(v14 + 1119) < 0) {
    operator delete(*v19);
  }
  sub_2167C5410(v17);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v14 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v14 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v15);
  sub_2167EE864((void *)v14);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::set(Alembic::AbcGeom::v12::OSubDSchema *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 1144) && !sub_2167F12EC(a2))
  {
    v245[34] = (char *)this + 8;
    v245[35] = "OSubDSchema::set()";
    size_t v4 = (long long *)(a2 + 376);
    if (*(char *)(a2 + 399) < 0)
    {
      sub_216778F24(&__p, *(void **)(a2 + 376), *(void *)(a2 + 384));
    }
    else
    {
      long long __p = *v4;
      v245[0] = *(void *)(a2 + 392);
    }
    if (SHIBYTE(v245[0]) < 0)
    {
      if (*((void *)&__p + 1) == 13
        && *(void *)__p == 0x2D6C6C756D746163
        && *(void *)(__p + 5) == 0x6B72616C632D6C6CLL)
      {
        operator delete((void *)__p);
        goto LABEL_31;
      }
    }
    else if (SHIBYTE(v245[0]) == 13 {
           && (void)__p == 0x2D6C6C756D746163
    }
           && *(void *)((char *)&__p + 5) == 0x6B72616C632D6C6CLL)
    {
LABEL_31:
      if (*((char *)this + 423) < 0)
      {
        if (!*((void *)this + 51)) {
          goto LABEL_35;
        }
      }
      else if (!*((unsigned char *)this + 423))
      {
LABEL_35:
        if (*((void *)this + 53)) {
          goto LABEL_38;
        }
      }
      if (*(_DWORD *)(a2 + 120) != -1073741824) {
        Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingInterpolateBoundaryProperty(this);
      }
LABEL_38:
      if (*((char *)this + 471) < 0)
      {
        if (!*((void *)this + 57)) {
          goto LABEL_42;
        }
      }
      else if (!*((unsigned char *)this + 471))
      {
LABEL_42:
        if (*((void *)this + 59)) {
          goto LABEL_45;
        }
      }
      if (*(_DWORD *)(a2 + 124) != -1073741824) {
        Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingPropagateCornersProperty(this);
      }
LABEL_45:
      if (*((char *)this + 519) < 0)
      {
        if (!*((void *)this + 63)) {
          goto LABEL_49;
        }
      }
      else if (!*((unsigned char *)this + 519))
      {
LABEL_49:
        if (*((void *)this + 65)) {
          goto LABEL_52;
        }
      }
      if (*(_DWORD *)(a2 + 128) != -1073741824) {
        Alembic::AbcGeom::v12::OSubDSchema::createInterpolateBoundaryProperty(this);
      }
LABEL_52:
      uint64_t v8 = (void *)(a2 + 448);
      if (*(_DWORD *)(a2 + 456) == 127 || !*v8 && *(void *)(a2 + 472) == *(void *)(a2 + 464)) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = nullsub_10;
      }
      if (!v9) {
        goto LABEL_64;
      }
      if (*((char *)this + 903) < 0)
      {
        if (!*((void *)this + 111)) {
          goto LABEL_62;
        }
      }
      else if (!*((unsigned char *)this + 903))
      {
LABEL_62:
        if (!*((void *)this + 113)) {
          goto LABEL_63;
        }
LABEL_64:
        int v10 = (void *)(a2 + 488);
        if (*(_DWORD *)(a2 + 496) == 127 || !*v10 && *(void *)(a2 + 512) == *(void *)(a2 + 504)) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = nullsub_8;
        }
        if (v11) {
          int v12 = nullsub_11;
        }
        else {
          int v12 = 0;
        }
        if (v12 && (sub_2167C5D84((uint64_t)this + 920) & 1) == 0) {
          Alembic::AbcGeom::v12::OSubDSchema::createUVsProperty((uint64_t)this, a2);
        }
        if (*((void *)this + 144))
        {
          int v227 = *((_DWORD *)this + 62);
          if (*((char *)this + 279) < 0)
          {
            sub_216778F24(&v228, *((void **)this + 32), *((void *)this + 33));
          }
          else
          {
            long long v228 = *((_OWORD *)this + 16);
            uint64_t v229 = *((void *)this + 34);
          }
          uint64_t v14 = *((void *)this + 36);
          uint64_t v230 = *((void *)this + 35);
          uint64_t v231 = v14;
          if (v14) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v15 = *(void *)(a2 + 5);
          *(void *)int v223 = *(void *)a2;
          *(void *)&v223[5] = v15;
          long long v224 = 0;
          uint64_t v226 = 0;
          uint64_t v225 = 0;
          sub_21677EA60(&v224, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
          if (SHIBYTE(v229) < 0)
          {
            if (*((void *)&v228 + 1)) {
              goto LABEL_85;
            }
          }
          else if (HIBYTE(v229))
          {
LABEL_85:
            int v16 = 0;
            goto LABEL_90;
          }
          if (v230) {
            int v16 = nullsub_7;
          }
          else {
            int v16 = 0;
          }
LABEL_90:
          if (v16)
          {
            if (*(_DWORD *)&v223[8] == 127 || !*(void *)v223 && v225 == v224) {
              uint64_t v17 = 0;
            }
            else {
              uint64_t v17 = nullsub_19;
            }
            if (v17) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v227);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v227);
            }
          }
          if (v224)
          {
            uint64_t v225 = v224;
            operator delete(v224);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v227);
          int v218 = *((_DWORD *)this + 74);
          if (*((char *)this + 327) < 0)
          {
            sub_216778F24(&v219, *((void **)this + 38), *((void *)this + 39));
          }
          else
          {
            long long v219 = *((_OWORD *)this + 19);
            uint64_t v220 = *((void *)this + 40);
          }
          uint64_t v21 = *((void *)this + 42);
          uint64_t v221 = *((void *)this + 41);
          uint64_t v222 = v21;
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v22 = *(void *)(a2 + 45);
          *(void *)int v214 = *(void *)(a2 + 40);
          *(void *)&v214[5] = v22;
          long long v215 = 0;
          uint64_t v217 = 0;
          uint64_t v216 = 0;
          sub_21677EA60(&v215, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
          if (SHIBYTE(v220) < 0)
          {
            if (*((void *)&v219 + 1)) {
              goto LABEL_127;
            }
          }
          else if (HIBYTE(v220))
          {
LABEL_127:
            uint64_t v23 = 0;
            goto LABEL_132;
          }
          if (v221) {
            uint64_t v23 = nullsub_7;
          }
          else {
            uint64_t v23 = 0;
          }
LABEL_132:
          if (v23)
          {
            if (*(_DWORD *)&v214[8] == 127 || !*(void *)v214 && v216 == v215) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = nullsub_20;
            }
            if (v24) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v218);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v218);
            }
          }
          if (v215)
          {
            uint64_t v216 = v215;
            operator delete(v215);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v218);
          int v209 = *((_DWORD *)this + 86);
          if (*((char *)this + 375) < 0)
          {
            sub_216778F24(&v210, *((void **)this + 44), *((void *)this + 45));
          }
          else
          {
            long long v210 = *((_OWORD *)this + 22);
            uint64_t v211 = *((void *)this + 46);
          }
          uint64_t v25 = *((void *)this + 48);
          uint64_t v212 = *((void *)this + 47);
          uint64_t v213 = v25;
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v26 = *(void *)(a2 + 85);
          *(void *)int v205 = *(void *)(a2 + 80);
          *(void *)&v205[5] = v26;
          long long v206 = 0;
          uint64_t v208 = 0;
          uint64_t v207 = 0;
          sub_21677EA60(&v206, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
          if (SHIBYTE(v211) < 0)
          {
            if (*((void *)&v210 + 1)) {
              goto LABEL_150;
            }
          }
          else if (HIBYTE(v211))
          {
LABEL_150:
            uint64_t v27 = 0;
            goto LABEL_155;
          }
          if (v212) {
            uint64_t v27 = nullsub_7;
          }
          else {
            uint64_t v27 = 0;
          }
LABEL_155:
          if (v27)
          {
            if (*(_DWORD *)&v205[8] == 127 || !*(void *)v205 && v207 == v206) {
              uint64_t v28 = 0;
            }
            else {
              uint64_t v28 = nullsub_20;
            }
            if (v28) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v209);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v209);
            }
          }
          if (v206)
          {
            uint64_t v207 = v206;
            operator delete(v206);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v209);
          int v29 = *((char *)this + 423);
          if (v29 < 0)
          {
            if (*((void *)this + 51)) {
              goto LABEL_191;
            }
          }
          else if (*((unsigned char *)this + 423))
          {
            goto LABEL_191;
          }
          if (*((void *)this + 53)) {
            uint64_t v30 = nullsub_6;
          }
          else {
            uint64_t v30 = 0;
          }
          if (v30)
          {
            int v200 = *((_DWORD *)this + 98);
            if (v29 < 0)
            {
              sub_216778F24(&v201, *((void **)this + 50), *((void *)this + 51));
            }
            else
            {
              long long v201 = *((_OWORD *)this + 25);
              uint64_t v202 = *((void *)this + 52);
            }
            uint64_t v32 = *((void *)this + 54);
            uint64_t v203 = *((void *)this + 53);
            uint64_t v204 = v32;
            if (v32) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
            }
            LODWORD(__p) = *(_DWORD *)(a2 + 120);
            if (__p == -1073741824) {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v200);
            }
            else {
              Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v200, &__p);
            }
            Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v200);
          }
LABEL_191:
          int v33 = *((char *)this + 471);
          if (v33 < 0)
          {
            if (*((void *)this + 57)) {
              goto LABEL_208;
            }
          }
          else if (*((unsigned char *)this + 471))
          {
            goto LABEL_208;
          }
          if (*((void *)this + 59)) {
            uint64_t v34 = nullsub_6;
          }
          else {
            uint64_t v34 = 0;
          }
          if (v34)
          {
            int v195 = *((_DWORD *)this + 110);
            if (v33 < 0)
            {
              sub_216778F24(&v196, *((void **)this + 56), *((void *)this + 57));
            }
            else
            {
              long long v196 = *((_OWORD *)this + 28);
              uint64_t v197 = *((void *)this + 58);
            }
            uint64_t v35 = *((void *)this + 60);
            uint64_t v198 = *((void *)this + 59);
            uint64_t v199 = v35;
            if (v35) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
            }
            LODWORD(__p) = *(_DWORD *)(a2 + 124);
            if (__p == -1073741824) {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v195);
            }
            else {
              Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v195, &__p);
            }
            Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v195);
          }
LABEL_208:
          int v36 = *((char *)this + 519);
          if (v36 < 0)
          {
            if (*((void *)this + 63)) {
              goto LABEL_225;
            }
          }
          else if (*((unsigned char *)this + 519))
          {
            goto LABEL_225;
          }
          if (*((void *)this + 65)) {
            int v37 = nullsub_6;
          }
          else {
            int v37 = 0;
          }
          if (v37)
          {
            int v190 = *((_DWORD *)this + 122);
            if (v36 < 0)
            {
              sub_216778F24(&v191, *((void **)this + 62), *((void *)this + 63));
            }
            else
            {
              long long v191 = *((_OWORD *)this + 31);
              uint64_t v192 = *((void *)this + 64);
            }
            uint64_t v38 = *((void *)this + 66);
            uint64_t v193 = *((void *)this + 65);
            uint64_t v194 = v38;
            if (v38) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
            }
            LODWORD(__p) = *(_DWORD *)(a2 + 128);
            if (__p == -1073741824) {
              Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v190);
            }
            else {
              Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v190, &__p);
            }
            Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v190);
          }
LABEL_225:
          int v39 = (void *)(a2 + 136);
          if (*(_DWORD *)(a2 + 144) == 127 || !*v39 && *(void *)(a2 + 160) == *(void *)(a2 + 152)) {
            int v40 = 0;
          }
          else {
            int v40 = nullsub_20;
          }
          if (!v40
            && !(*(_DWORD *)(a2 + 184) == 127
              || !*(void *)(a2 + 176) && *(void *)(a2 + 200) == *(void *)(a2 + 192)
               ? 0
               : nullsub_20)
            && !(*(_DWORD *)(a2 + 224) == 127
              || !*(void *)(a2 + 216) && *(void *)(a2 + 240) == *(void *)(a2 + 232)
               ? 0
               : nullsub_13))
          {
LABEL_249:
            int v43 = *((char *)this + 567);
            if (v43 < 0)
            {
              if (*((void *)this + 69)) {
                goto LABEL_327;
              }
            }
            else if (*((unsigned char *)this + 567))
            {
              goto LABEL_327;
            }
            if (*((void *)this + 71)) {
              uint64_t v44 = nullsub_7;
            }
            else {
              uint64_t v44 = 0;
            }
            if (!v44) {
              goto LABEL_327;
            }
            int v185 = *((_DWORD *)this + 134);
            if (v43 < 0)
            {
              sub_216778F24(&v186, *((void **)this + 68), *((void *)this + 69));
            }
            else
            {
              long long v186 = *((_OWORD *)this + 34);
              uint64_t v187 = *((void *)this + 70);
            }
            uint64_t v45 = *((void *)this + 72);
            uint64_t v188 = *((void *)this + 71);
            uint64_t v189 = v45;
            if (v45) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v46 = *(void *)(a2 + 141);
            *(void *)uint64_t v181 = *v39;
            *(void *)&v181[5] = v46;
            uint64_t v182 = 0;
            uint64_t v184 = 0;
            int v183 = 0;
            sub_21677EA60(&v182, *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
            if (SHIBYTE(v187) < 0)
            {
              if (*((void *)&v186 + 1)) {
                goto LABEL_264;
              }
            }
            else if (HIBYTE(v187))
            {
LABEL_264:
              uint64_t v47 = 0;
              goto LABEL_269;
            }
            if (v188) {
              uint64_t v47 = nullsub_7;
            }
            else {
              uint64_t v47 = 0;
            }
LABEL_269:
            if (v47)
            {
              if (*(_DWORD *)&v181[8] == 127 || !*(void *)v181 && v183 == v182) {
                int v48 = 0;
              }
              else {
                int v48 = nullsub_20;
              }
              if (v48) {
                Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v185);
              }
              else {
                Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v185);
              }
            }
            if (v182)
            {
              int v183 = v182;
              operator delete(v182);
            }
            Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v185);
            int v176 = *((_DWORD *)this + 146);
            if (*((char *)this + 615) < 0)
            {
              sub_216778F24(&v177, *((void **)this + 74), *((void *)this + 75));
            }
            else
            {
              long long v177 = *((_OWORD *)this + 37);
              uint64_t v178 = *((void *)this + 76);
            }
            uint64_t v49 = *((void *)this + 78);
            uint64_t v179 = *((void *)this + 77);
            uint64_t v180 = v49;
            if (v49) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v50 = *(void *)(a2 + 181);
            *(void *)uint64_t v172 = *(void *)(a2 + 176);
            *(void *)&v172[5] = v50;
            int v173 = 0;
            uint64_t v175 = 0;
            long long v174 = 0;
            sub_21677EA60(&v173, *(const void **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
            if (SHIBYTE(v178) < 0)
            {
              if (*((void *)&v177 + 1)) {
                goto LABEL_287;
              }
            }
            else if (HIBYTE(v178))
            {
LABEL_287:
              int v51 = 0;
              goto LABEL_292;
            }
            if (v179) {
              int v51 = nullsub_7;
            }
            else {
              int v51 = 0;
            }
LABEL_292:
            if (v51)
            {
              if (*(_DWORD *)&v172[8] == 127 || !*(void *)v172 && v174 == v173) {
                uint64_t v52 = 0;
              }
              else {
                uint64_t v52 = nullsub_20;
              }
              if (v52) {
                Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v176);
              }
              else {
                Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v176);
              }
            }
            if (v173)
            {
              long long v174 = v173;
              operator delete(v173);
            }
            Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v176);
            int v167 = *((_DWORD *)this + 158);
            if (*((char *)this + 663) < 0)
            {
              sub_216778F24(&v168, *((void **)this + 80), *((void *)this + 81));
            }
            else
            {
              long long v168 = *((_OWORD *)this + 40);
              uint64_t v169 = *((void *)this + 82);
            }
            uint64_t v53 = *((void *)this + 84);
            uint64_t v170 = *((void *)this + 83);
            uint64_t v171 = v53;
            if (v53) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v54 = *(void *)(a2 + 221);
            *(void *)uint64_t v163 = *(void *)(a2 + 216);
            *(void *)&v163[5] = v54;
            int v164 = 0;
            long long v165 = 0;
            uint64_t v166 = 0;
            sub_21677EA60(&v164, *(const void **)(a2 + 232), *(void *)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 3);
            if (SHIBYTE(v169) < 0)
            {
              if (*((void *)&v168 + 1)) {
                goto LABEL_310;
              }
            }
            else if (HIBYTE(v169))
            {
LABEL_310:
              int v55 = 0;
LABEL_315:
              if (v55)
              {
                if (*(_DWORD *)&v163[8] == 127 || !*(void *)v163 && v165 == v164) {
                  uint64_t v56 = 0;
                }
                else {
                  uint64_t v56 = nullsub_13;
                }
                if (v56) {
                  Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v167);
                }
                else {
                  Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v167);
                }
              }
              if (v164)
              {
                long long v165 = v164;
                operator delete(v164);
              }
              Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v167);
LABEL_327:
              uint64_t v57 = (void *)(a2 + 256);
              if (*(_DWORD *)(a2 + 264) == 127 || !*v57 && *(void *)(a2 + 280) == *(void *)(a2 + 272)) {
                int v58 = 0;
              }
              else {
                int v58 = nullsub_20;
              }
              if (!v58
                && !(*(_DWORD *)(a2 + 304) == 127
                  || !*(void *)(a2 + 296) && *(void *)(a2 + 320) == *(void *)(a2 + 312)
                   ? 0
                   : nullsub_13))
              {
LABEL_345:
                int v60 = *((char *)this + 711);
                if (v60 < 0)
                {
                  if (*((void *)this + 87)) {
                    goto LABEL_400;
                  }
                }
                else if (*((unsigned char *)this + 711))
                {
                  goto LABEL_400;
                }
                if (*((void *)this + 89)) {
                  uint64_t v61 = nullsub_7;
                }
                else {
                  uint64_t v61 = 0;
                }
                if (!v61) {
                  goto LABEL_400;
                }
                int v158 = *((_DWORD *)this + 170);
                if (v60 < 0)
                {
                  sub_216778F24(&v159, *((void **)this + 86), *((void *)this + 87));
                }
                else
                {
                  long long v159 = *((_OWORD *)this + 43);
                  uint64_t v160 = *((void *)this + 88);
                }
                uint64_t v62 = *((void *)this + 90);
                uint64_t v161 = *((void *)this + 89);
                uint64_t v162 = v62;
                if (v62) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v63 = *(void *)(a2 + 261);
                *(void *)uint64_t v154 = *v57;
                *(void *)&v154[5] = v63;
                int v155 = 0;
                long long v156 = 0;
                uint64_t v157 = 0;
                sub_21677EA60(&v155, *(const void **)(a2 + 272), *(void *)(a2 + 280), (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3);
                if (SHIBYTE(v160) < 0)
                {
                  if (*((void *)&v159 + 1)) {
                    goto LABEL_360;
                  }
                }
                else if (HIBYTE(v160))
                {
LABEL_360:
                  int v64 = 0;
                  goto LABEL_365;
                }
                if (v161) {
                  int v64 = nullsub_7;
                }
                else {
                  int v64 = 0;
                }
LABEL_365:
                if (v64)
                {
                  if (*(_DWORD *)&v154[8] == 127 || !*(void *)v154 && v156 == v155) {
                    long long v65 = 0;
                  }
                  else {
                    long long v65 = nullsub_20;
                  }
                  if (v65) {
                    Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v158);
                  }
                  else {
                    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v158);
                  }
                }
                if (v155)
                {
                  long long v156 = v155;
                  operator delete(v155);
                }
                Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v158);
                int v149 = *((_DWORD *)this + 182);
                if (*((char *)this + 759) < 0)
                {
                  sub_216778F24(&v150, *((void **)this + 92), *((void *)this + 93));
                }
                else
                {
                  long long v150 = *((_OWORD *)this + 46);
                  uint64_t v151 = *((void *)this + 94);
                }
                uint64_t v66 = *((void *)this + 96);
                uint64_t v152 = *((void *)this + 95);
                uint64_t v153 = v66;
                if (v66) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v67 = *(void *)(a2 + 301);
                *(void *)uint64_t v145 = *(void *)(a2 + 296);
                *(void *)&v145[5] = v67;
                int v146 = 0;
                long long v147 = 0;
                uint64_t v148 = 0;
                sub_21677EA60(&v146, *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 3);
                if (SHIBYTE(v151) < 0)
                {
                  if (*((void *)&v150 + 1)) {
                    goto LABEL_383;
                  }
                }
                else if (HIBYTE(v151))
                {
LABEL_383:
                  int v68 = 0;
LABEL_388:
                  if (v68)
                  {
                    if (*(_DWORD *)&v145[8] == 127 || !*(void *)v145 && v147 == v146) {
                      int v69 = 0;
                    }
                    else {
                      int v69 = nullsub_13;
                    }
                    if (v69) {
                      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v149);
                    }
                    else {
                      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v149);
                    }
                  }
                  if (v146)
                  {
                    long long v147 = v146;
                    operator delete(v146);
                  }
                  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v149);
LABEL_400:
                  uint64_t v70 = (void *)(a2 + 336);
                  if (*(_DWORD *)(a2 + 344) == 127 || !*v70 && *(void *)(a2 + 360) == *(void *)(a2 + 352)) {
                    uint64_t v71 = 0;
                  }
                  else {
                    uint64_t v71 = nullsub_20;
                  }
                  if (!v71)
                  {
LABEL_412:
                    int v72 = *((char *)this + 807);
                    if (v72 < 0)
                    {
                      if (*((void *)this + 99)) {
                        goto LABEL_444;
                      }
                    }
                    else if (*((unsigned char *)this + 807))
                    {
                      goto LABEL_444;
                    }
                    if (*((void *)this + 101)) {
                      int v73 = nullsub_7;
                    }
                    else {
                      int v73 = 0;
                    }
                    if (!v73)
                    {
LABEL_444:
                      int v78 = *((char *)this + 855);
                      if (v78 < 0)
                      {
                        if (*((void *)this + 105)) {
                          goto LABEL_634;
                        }
                      }
                      else if (*((unsigned char *)this + 855))
                      {
                        goto LABEL_634;
                      }
                      if (*((void *)this + 107)) {
                        uint64_t v79 = nullsub_6;
                      }
                      else {
                        uint64_t v79 = 0;
                      }
                      if (!v79)
                      {
LABEL_634:
                        int v111 = *((char *)this + 903);
                        if (v111 < 0)
                        {
                          if (*((void *)this + 111)) {
                            goto LABEL_666;
                          }
                        }
                        else if (*((unsigned char *)this + 903))
                        {
                          goto LABEL_666;
                        }
                        if (*((void *)this + 113)) {
                          uint64_t v112 = nullsub_7;
                        }
                        else {
                          uint64_t v112 = 0;
                        }
                        if (v112)
                        {
                          int v124 = *((_DWORD *)this + 218);
                          if (v111 < 0)
                          {
                            sub_216778F24(&v125, *((void **)this + 110), *((void *)this + 111));
                          }
                          else
                          {
                            long long v125 = *((_OWORD *)this + 55);
                            uint64_t v126 = *((void *)this + 112);
                          }
                          uint64_t v113 = *((void *)this + 114);
                          uint64_t v127 = *((void *)this + 113);
                          uint64_t v128 = v113;
                          if (v113) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
                          }
                          *(void *)long long v120 = *v8;
                          *(void *)&v120[5] = *(void *)(a2 + 453);
                          uint64_t v121 = 0;
                          uint64_t v122 = 0;
                          uint64_t v123 = 0;
                          sub_21677EA60(&v121, *(const void **)(a2 + 464), *(void *)(a2 + 472), (uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 3);
                          if (SHIBYTE(v126) < 0)
                          {
                            if (*((void *)&v125 + 1)) {
                              goto LABEL_649;
                            }
                          }
                          else if (HIBYTE(v126))
                          {
LABEL_649:
                            uint64_t v114 = 0;
LABEL_654:
                            if (v114)
                            {
                              if (*(_DWORD *)&v120[8] == 127 || !*(void *)v120 && v122 == v121) {
                                int v115 = 0;
                              }
                              else {
                                int v115 = nullsub_10;
                              }
                              if (v115) {
                                Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v124);
                              }
                              else {
                                Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v124);
                              }
                            }
                            if (v121)
                            {
                              uint64_t v122 = v121;
                              operator delete(v121);
                            }
                            Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v124);
                            goto LABEL_666;
                          }
                          if (v127) {
                            uint64_t v114 = nullsub_7;
                          }
                          else {
                            uint64_t v114 = 0;
                          }
                          goto LABEL_654;
                        }
LABEL_666:
                        if (*(double *)(a2 + 424) <= *(double *)(a2 + 400)
                          || *(double *)(a2 + 432) <= *(double *)(a2 + 408)
                          || *(double *)(a2 + 440) <= *(double *)(a2 + 416))
                        {
                          if (*(_DWORD *)(a2 + 8) == 127
                            || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16))
                          {
                            uint64_t v116 = 0;
                          }
                          else
                          {
                            uint64_t v116 = nullsub_19;
                          }
                          if (v116)
                          {
                            sub_2167C354C((void *)a2, (uint64_t)&__p);
                            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), &__p);
                          }
                          else
                          {
                            Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56));
                          }
                        }
                        else
                        {
                          Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), (const void *)(a2 + 400));
                        }
                        if (sub_2167C5D84((uint64_t)this + 920)) {
                          uint64_t v117 = nullsub_16;
                        }
                        else {
                          uint64_t v117 = 0;
                        }
                        if (v117) {
                          sub_2167C3654((uint64_t)this + 920, a2 + 488);
                        }
LABEL_683:
                        ++*((void *)this + 144);
                        return;
                      }
                      int v131 = *((_DWORD *)this + 206);
                      if (v78 < 0)
                      {
                        sub_216778F24(&v132, *((void **)this + 104), *((void *)this + 105));
                      }
                      else
                      {
                        long long v132 = *((_OWORD *)this + 52);
                        uint64_t v133 = *((void *)this + 106);
                      }
                      uint64_t v80 = *((void *)this + 108);
                      uint64_t v134 = *((void *)this + 107);
                      uint64_t v135 = v80;
                      if (v80) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
                      }
                      if (*(char *)(a2 + 399) < 0)
                      {
                        sub_216778F24(__dst, *(void **)(a2 + 376), *(void *)(a2 + 384));
                      }
                      else
                      {
                        *(_OWORD *)long long __dst = *v4;
                        uint64_t v130 = *(void *)(a2 + 392);
                      }
                      if (SHIBYTE(v133) < 0)
                      {
                        if (*((void *)&v132 + 1)) {
                          goto LABEL_631;
                        }
                      }
                      else if (HIBYTE(v133))
                      {
                        goto LABEL_631;
                      }
                      if (v134)
                      {
                        if (SHIBYTE(v130) < 0)
                        {
                          if (__dst[1]) {
                            goto LABEL_467;
                          }
                        }
                        else if (HIBYTE(v130))
                        {
LABEL_467:
                          Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v131, __dst);
                          goto LABEL_631;
                        }
                        Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::Abc::v12::OScalarProperty *)&v131);
                      }
LABEL_631:
                      if (SHIBYTE(v130) < 0) {
                        operator delete(__dst[0]);
                      }
                      Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v131);
                      goto LABEL_634;
                    }
                    int v140 = *((_DWORD *)this + 194);
                    if (v72 < 0)
                    {
                      sub_216778F24(&v141, *((void **)this + 98), *((void *)this + 99));
                    }
                    else
                    {
                      long long v141 = *((_OWORD *)this + 49);
                      uint64_t v142 = *((void *)this + 100);
                    }
                    uint64_t v74 = *((void *)this + 102);
                    uint64_t v143 = *((void *)this + 101);
                    uint64_t v144 = v74;
                    if (v74) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
                    }
                    uint64_t v75 = *(void *)(a2 + 341);
                    *(void *)uint64_t v136 = *v70;
                    *(void *)&v136[5] = v75;
                    uint64_t v137 = 0;
                    long long v138 = 0;
                    uint64_t v139 = 0;
                    sub_21677EA60(&v137, *(const void **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 3);
                    if (SHIBYTE(v142) < 0)
                    {
                      if (*((void *)&v141 + 1)) {
                        goto LABEL_427;
                      }
                    }
                    else if (HIBYTE(v142))
                    {
LABEL_427:
                      uint64_t v76 = 0;
LABEL_432:
                      if (v76)
                      {
                        if (*(_DWORD *)&v136[8] == 127 || !*(void *)v136 && v138 == v137) {
                          int v77 = 0;
                        }
                        else {
                          int v77 = nullsub_20;
                        }
                        if (v77) {
                          Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v140);
                        }
                        else {
                          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v140);
                        }
                      }
                      if (v137)
                      {
                        long long v138 = v137;
                        operator delete(v137);
                      }
                      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v140);
                      goto LABEL_444;
                    }
                    if (v143) {
                      uint64_t v76 = nullsub_7;
                    }
                    else {
                      uint64_t v76 = 0;
                    }
                    goto LABEL_432;
                  }
                  if (*((char *)this + 807) < 0)
                  {
                    if (!*((void *)this + 99)) {
                      goto LABEL_410;
                    }
                  }
                  else if (!*((unsigned char *)this + 807))
                  {
LABEL_410:
                    if (*((void *)this + 101)) {
                      goto LABEL_412;
                    }
                  }
                  Alembic::AbcGeom::v12::OSubDSchema::initHoles(this, *((_DWORD *)this + 288) - 1);
                  goto LABEL_412;
                }
                if (v152) {
                  int v68 = nullsub_7;
                }
                else {
                  int v68 = 0;
                }
                goto LABEL_388;
              }
              if (*((char *)this + 711) < 0)
              {
                if (!*((void *)this + 87)) {
                  goto LABEL_343;
                }
              }
              else if (!*((unsigned char *)this + 711))
              {
LABEL_343:
                if (*((void *)this + 89)) {
                  goto LABEL_345;
                }
              }
              Alembic::AbcGeom::v12::OSubDSchema::initCorners(this, *((_DWORD *)this + 288) - 1);
              goto LABEL_345;
            }
            if (v170) {
              int v55 = nullsub_7;
            }
            else {
              int v55 = 0;
            }
            goto LABEL_315;
          }
          if (*((char *)this + 567) < 0)
          {
            if (!*((void *)this + 69)) {
              goto LABEL_247;
            }
          }
          else if (!*((unsigned char *)this + 567))
          {
LABEL_247:
            if (*((void *)this + 71)) {
              goto LABEL_249;
            }
          }
          Alembic::AbcGeom::v12::OSubDSchema::initCreases(this, *((_DWORD *)this + 288) - 1);
          goto LABEL_249;
        }
        if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
          int v13 = 0;
        }
        else {
          int v13 = nullsub_19;
        }
        if (!v13
          || (*(_DWORD *)(a2 + 48) == 127 || !*(void *)(a2 + 40) && *(void *)(a2 + 64) == *(void *)(a2 + 56)
            ? (uint64_t v18 = 0)
            : (uint64_t v18 = nullsub_20),
              !v18
           || (*(_DWORD *)(a2 + 88) == 127 || !*(void *)(a2 + 80) && *(void *)(a2 + 104) == *(void *)(a2 + 96)
             ? (uint64_t v19 = 0)
             : (uint64_t v19 = nullsub_20),
               !v19)))
        {
          sub_216778A5C((uint64_t)&__p);
          sub_216779180(v245, (uint64_t)"Sample 0 must have valid data for all mesh components", 53);
          std::stringbuf::str();
          sub_216778E70(v243, &v241);
          if (v242 < 0) {
            operator delete((void *)v241);
          }
          exception = __cxa_allocate_exception(0x20uLL);
          int v119 = sub_216779038(exception, (uint64_t)v243);
          __cxa_throw(v119, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
        }
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 296);
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 344);
        int v20 = *((char *)this + 903);
        if (v20 < 0)
        {
          if (*((void *)this + 111)) {
            goto LABEL_490;
          }
        }
        else if (*((unsigned char *)this + 903))
        {
          goto LABEL_490;
        }
        if (*((void *)this + 113)) {
          uint64_t v31 = nullsub_7;
        }
        else {
          uint64_t v31 = 0;
        }
        if (!v31) {
          goto LABEL_490;
        }
        int v236 = *((_DWORD *)this + 218);
        if (v20 < 0)
        {
          sub_216778F24(&v237, *((void **)this + 110), *((void *)this + 111));
        }
        else
        {
          long long v237 = *((_OWORD *)this + 55);
          uint64_t v238 = *((void *)this + 112);
        }
        uint64_t v81 = *((void *)this + 114);
        uint64_t v239 = *((void *)this + 113);
        uint64_t v240 = v81;
        if (v81) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v82 = *(void *)(a2 + 453);
        *(void *)uint64_t v232 = *v8;
        *(void *)&v232[5] = v82;
        int v233 = 0;
        uint64_t v235 = 0;
        long long v234 = 0;
        sub_21677EA60(&v233, *(const void **)(a2 + 464), *(void *)(a2 + 472), (uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 3);
        if (SHIBYTE(v238) < 0)
        {
          if (*((void *)&v237 + 1)) {
            goto LABEL_473;
          }
        }
        else if (HIBYTE(v238))
        {
LABEL_473:
          uint64_t v83 = 0;
LABEL_478:
          if (v83)
          {
            if (*(_DWORD *)&v232[8] == 127 || !*(void *)v232 && v234 == v233) {
              uint64_t v84 = 0;
            }
            else {
              uint64_t v84 = nullsub_10;
            }
            if (v84) {
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v236);
            }
            else {
              Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v236);
            }
          }
          if (v233)
          {
            long long v234 = v233;
            operator delete(v233);
          }
          Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v236);
LABEL_490:
          if (*(double *)(a2 + 424) >= *(double *)(a2 + 400)
            && *(double *)(a2 + 432) >= *(double *)(a2 + 408)
            && *(double *)(a2 + 440) >= *(double *)(a2 + 416))
          {
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), (const void *)(a2 + 400));
          }
          else
          {
            sub_2167C354C((void *)a2, (uint64_t)&__p);
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), &__p);
          }
          if (*(_DWORD *)(a2 + 496) == 127 || !*v10 && *(void *)(a2 + 512) == *(void *)(a2 + 504)) {
            uint64_t v85 = 0;
          }
          else {
            uint64_t v85 = nullsub_8;
          }
          if (v85) {
            sub_2167C3654((uint64_t)this + 920, a2 + 488);
          }
          if (*((char *)this + 423) < 0)
          {
            if (*((void *)this + 51)) {
              goto LABEL_503;
            }
          }
          else if (*((unsigned char *)this + 423))
          {
LABEL_503:
            int v86 = 0;
            goto LABEL_508;
          }
          if (*((void *)this + 53)) {
            int v86 = nullsub_6;
          }
          else {
            int v86 = 0;
          }
LABEL_508:
          if (v86)
          {
            int v87 = *(_DWORD *)(a2 + 120);
            if (v87 == -1073741824) {
              int v87 = 0;
            }
            LODWORD(__p) = v87;
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392), &__p);
          }
          if (*((char *)this + 471) < 0)
          {
            if (*((void *)this + 57)) {
              goto LABEL_514;
            }
          }
          else if (*((unsigned char *)this + 471))
          {
LABEL_514:
            uint64_t v88 = 0;
            goto LABEL_519;
          }
          if (*((void *)this + 59)) {
            uint64_t v88 = nullsub_6;
          }
          else {
            uint64_t v88 = 0;
          }
LABEL_519:
          if (v88)
          {
            int v89 = *(_DWORD *)(a2 + 124);
            if (v89 == -1073741824) {
              int v89 = 0;
            }
            LODWORD(__p) = v89;
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440), &__p);
          }
          if (*((char *)this + 519) < 0)
          {
            if (*((void *)this + 63)) {
              goto LABEL_525;
            }
          }
          else if (*((unsigned char *)this + 519))
          {
LABEL_525:
            uint64_t v90 = 0;
            goto LABEL_530;
          }
          if (*((void *)this + 65)) {
            uint64_t v90 = nullsub_6;
          }
          else {
            uint64_t v90 = 0;
          }
LABEL_530:
          if (v90)
          {
            int v91 = *(_DWORD *)(a2 + 128);
            if (v91 == -1073741824) {
              int v91 = 0;
            }
            LODWORD(__p) = v91;
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488), &__p);
          }
          if (*((char *)this + 855) < 0)
          {
            if (*((void *)this + 105)) {
              goto LABEL_536;
            }
          }
          else if (*((unsigned char *)this + 855))
          {
LABEL_536:
            char v92 = 0;
            goto LABEL_541;
          }
          if (*((void *)this + 107)) {
            char v92 = nullsub_6;
          }
          else {
            char v92 = 0;
          }
LABEL_541:
          if (v92)
          {
            if (*(char *)(a2 + 399) < 0)
            {
              sub_216778F24(&__p, *(void **)(a2 + 376), *(void *)(a2 + 384));
            }
            else
            {
              long long __p = *v4;
              v245[0] = *(void *)(a2 + 392);
            }
            Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824), &__p);
            if (SHIBYTE(v245[0]) < 0) {
              operator delete((void *)__p);
            }
          }
          uint64_t v93 = (void *)(a2 + 136);
          int v94 = *(_DWORD *)(a2 + 144);
          if (v94 == 127 || !*v93 && *(void *)(a2 + 160) == *(void *)(a2 + 152)) {
            int v95 = 0;
          }
          else {
            int v95 = nullsub_20;
          }
          if (v95
            || (*(_DWORD *)(a2 + 184) == 127 || !*(void *)(a2 + 176) && *(void *)(a2 + 200) == *(void *)(a2 + 192)
              ? (uint64_t v96 = 0)
              : (uint64_t v96 = nullsub_20),
                v96
             || (*(_DWORD *)(a2 + 224) == 127
              || !*(void *)(a2 + 216) && *(void *)(a2 + 240) == *(void *)(a2 + 232)
               ? (int v97 = 0)
               : (int v97 = nullsub_13),
                 v97)))
          {
            Alembic::AbcGeom::v12::OSubDSchema::initCreases(this, 0);
            int v94 = *(_DWORD *)(a2 + 144);
          }
          if (v94 == 127 || !*v93 && *(void *)(a2 + 160) == *(void *)(a2 + 152)) {
            long long v98 = 0;
          }
          else {
            long long v98 = nullsub_20;
          }
          if (v98) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 536);
          }
          if (*(_DWORD *)(a2 + 184) == 127 || !*(void *)(a2 + 176) && *(void *)(a2 + 200) == *(void *)(a2 + 192)) {
            std::string v99 = 0;
          }
          else {
            std::string v99 = nullsub_20;
          }
          if (v99) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 584);
          }
          if (*(_DWORD *)(a2 + 224) == 127 || !*(void *)(a2 + 216) && *(void *)(a2 + 240) == *(void *)(a2 + 232)) {
            uint64_t v100 = 0;
          }
          else {
            uint64_t v100 = nullsub_13;
          }
          if (v100) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 632);
          }
          uint64_t v101 = (void *)(a2 + 256);
          int v102 = *(_DWORD *)(a2 + 264);
          if (v102 == 127 || !*v101 && *(void *)(a2 + 280) == *(void *)(a2 + 272)) {
            uint64_t v103 = 0;
          }
          else {
            uint64_t v103 = nullsub_20;
          }
          if (v103
            || (*(_DWORD *)(a2 + 304) == 127 || !*(void *)(a2 + 296) && *(void *)(a2 + 320) == *(void *)(a2 + 312)
              ? (uint64_t v104 = 0)
              : (uint64_t v104 = nullsub_13),
                v104))
          {
            Alembic::AbcGeom::v12::OSubDSchema::initCorners(this, 0);
            int v102 = *(_DWORD *)(a2 + 264);
          }
          if (v102 == 127 || !*v101 && *(void *)(a2 + 280) == *(void *)(a2 + 272)) {
            uint64_t v105 = 0;
          }
          else {
            uint64_t v105 = nullsub_20;
          }
          if (v105) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 680);
          }
          if (*(_DWORD *)(a2 + 304) == 127 || !*(void *)(a2 + 296) && *(void *)(a2 + 320) == *(void *)(a2 + 312)) {
            uint64_t v106 = 0;
          }
          else {
            uint64_t v106 = nullsub_13;
          }
          if (v106) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 728);
          }
          long long v107 = (void *)(a2 + 336);
          int v108 = *(_DWORD *)(a2 + 344);
          if (v108 == 127 || !*v107 && *(void *)(a2 + 360) == *(void *)(a2 + 352)) {
            uint64_t v109 = 0;
          }
          else {
            uint64_t v109 = nullsub_20;
          }
          if (v109)
          {
            Alembic::AbcGeom::v12::OSubDSchema::initHoles(this, 0);
            int v108 = *(_DWORD *)(a2 + 344);
          }
          if (v108 == 127 || !*v107 && *(void *)(a2 + 360) == *(void *)(a2 + 352)) {
            uint64_t v110 = 0;
          }
          else {
            uint64_t v110 = nullsub_20;
          }
          if (v110) {
            Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 776);
          }
          goto LABEL_683;
        }
        if (v239) {
          uint64_t v83 = nullsub_7;
        }
        else {
          uint64_t v83 = 0;
        }
        goto LABEL_478;
      }
LABEL_63:
      Alembic::AbcGeom::v12::OSubDSchema::createVelocitiesProperty(this);
      goto LABEL_64;
    }
    if (*((char *)this + 855) < 0)
    {
      if (*((void *)this + 105))
      {
LABEL_24:
        BOOL v7 = 1;
        if ((SHIBYTE(v245[0]) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_29;
      }
    }
    else if (*((unsigned char *)this + 855))
    {
      goto LABEL_24;
    }
    BOOL v7 = *((void *)this + 107) == 0;
    if ((SHIBYTE(v245[0]) & 0x80000000) == 0)
    {
LABEL_25:
      if (!v7) {
        goto LABEL_31;
      }
LABEL_30:
      Alembic::AbcGeom::v12::OSubDSchema::createSubDSchemeProperty(this);
      goto LABEL_31;
    }
LABEL_29:
    operator delete((void *)__p);
    if (!v7) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

  Alembic::AbcGeom::v12::OSubDSchema::selectiveSet(this, a2);
}

void sub_2167F0FE0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,...)
{
  va_start(va, a20);
  if (a20 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)va);
  uint64_t v23 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v20 - 96, (uint64_t)v23);
  }
  else {
    sub_21679F9F4(v20 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F0F44);
}

void sub_2167F12CC(_Unwind_Exception *a1)
{
}

BOOL sub_2167F12EC(uint64_t a1)
{
  BOOL result = 0;
  if (!*(void *)a1 && !*(void *)(a1 + 40) && !*(void *)(a1 + 80))
  {
    BOOL v2 = *(_DWORD *)(a1 + 496) == 127 || !*(void *)(a1 + 488) && *(void *)(a1 + 512) == *(void *)(a1 + 504)
       ? 0
       : nullsub_8;
    if (v2
      || *(void *)(a1 + 448)
      || *(_DWORD *)(a1 + 120) != -1073741824
      || *(_DWORD *)(a1 + 124) != -1073741824
      || *(_DWORD *)(a1 + 128) != -1073741824
      || *(void *)(a1 + 136)
      || *(void *)(a1 + 176)
      || *(void *)(a1 + 216)
      || *(void *)(a1 + 256)
      || *(void *)(a1 + 296)
      || *(void *)(a1 + 336))
    {
      return 1;
    }
  }
  return result;
}

void Alembic::AbcGeom::v12::OSubDSchema::selectiveSet(Alembic::AbcGeom::v12::OSubDSchema *this, uint64_t a2)
{
  int v72 = (char *)this + 8;
  int v73 = "OPolyMeshSchema::selectiveSet()";
  if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
    size_t v4 = 0;
  }
  else {
    size_t v4 = nullsub_19;
  }
  if (v4)
  {
    if (*((char *)this + 279) < 0)
    {
      if (!*((void *)this + 33)) {
        goto LABEL_11;
      }
    }
    else if (!*((unsigned char *)this + 279))
    {
LABEL_11:
      if (*((void *)this + 35)) {
        goto LABEL_13;
      }
    }
    Alembic::AbcGeom::v12::OSubDSchema::createPositionsProperty(this);
  }
LABEL_13:
  int v5 = *((char *)this + 279);
  if (v5 < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_55;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
    goto LABEL_55;
  }
  if (*((void *)this + 35)) {
    int v6 = nullsub_7;
  }
  else {
    int v6 = 0;
  }
  if (!v6) {
    goto LABEL_55;
  }
  int v67 = *((_DWORD *)this + 62);
  if (v5 < 0)
  {
    sub_216778F24(&v68, *((void **)this + 32), *((void *)this + 33));
  }
  else
  {
    long long v68 = *((_OWORD *)this + 16);
    uint64_t v69 = *((void *)this + 34);
  }
  uint64_t v7 = *((void *)this + 36);
  uint64_t v70 = *((void *)this + 35);
  uint64_t v71 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a2 + 5);
  *(void *)uint64_t v63 = *(void *)a2;
  *(void *)&v63[5] = v8;
  long long __p = 0;
  long long v65 = 0;
  uint64_t v66 = 0;
  sub_21677EA60(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v69) < 0)
  {
    if (*((void *)&v68 + 1)) {
      goto LABEL_28;
    }
LABEL_30:
    if (v70) {
      uint64_t v9 = nullsub_7;
    }
    else {
      uint64_t v9 = 0;
    }
    goto LABEL_33;
  }
  if (!HIBYTE(v69)) {
    goto LABEL_30;
  }
LABEL_28:
  uint64_t v9 = 0;
LABEL_33:
  if (v9)
  {
    if (*(_DWORD *)&v63[8] == 127 || !*(void *)v63 && v65 == __p) {
      int v10 = 0;
    }
    else {
      int v10 = nullsub_19;
    }
    if (v10) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v67);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v67);
    }
  }
  if (__p)
  {
    long long v65 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v67);
  if (*(double *)(a2 + 424) <= *(double *)(a2 + 400)
    || *(double *)(a2 + 432) <= *(double *)(a2 + 408)
    || *(double *)(a2 + 440) <= *(double *)(a2 + 416))
  {
    if (*(_DWORD *)(a2 + 8) == 127 || !*(void *)a2 && *(void *)(a2 + 24) == *(void *)(a2 + 16)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = nullsub_19;
    }
    if (v11)
    {
      sub_2167C354C((void *)a2, (uint64_t)__dst);
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), __dst);
    }
  }
  else
  {
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56), (const void *)(a2 + 400));
  }
LABEL_55:
  int v12 = (void *)(a2 + 448);
  if (*(_DWORD *)(a2 + 456) == 127 || !*v12 && *(void *)(a2 + 472) == *(void *)(a2 + 464)) {
    int v13 = 0;
  }
  else {
    int v13 = nullsub_10;
  }
  if (v13)
  {
    if (*((char *)this + 903) < 0)
    {
      if (!*((void *)this + 111)) {
        goto LABEL_65;
      }
    }
    else if (!*((unsigned char *)this + 903))
    {
LABEL_65:
      if (*((void *)this + 113)) {
        goto LABEL_67;
      }
    }
    Alembic::AbcGeom::v12::OSubDSchema::createVelocitiesProperty(this);
  }
LABEL_67:
  int v14 = *((char *)this + 903);
  if (v14 < 0)
  {
    if (*((void *)this + 111)) {
      goto LABEL_99;
    }
  }
  else if (*((unsigned char *)this + 903))
  {
    goto LABEL_99;
  }
  if (*((void *)this + 113)) {
    uint64_t v15 = nullsub_7;
  }
  else {
    uint64_t v15 = 0;
  }
  if (!v15) {
    goto LABEL_99;
  }
  int v56 = *((_DWORD *)this + 218);
  if (v14 < 0)
  {
    sub_216778F24(&v57, *((void **)this + 110), *((void *)this + 111));
  }
  else
  {
    long long v57 = *((_OWORD *)this + 55);
    uint64_t v58 = *((void *)this + 112);
  }
  uint64_t v16 = *((void *)this + 114);
  uint64_t v59 = *((void *)this + 113);
  uint64_t v60 = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v52 = *v12;
  *(void *)&v52[5] = *(void *)(a2 + 453);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  sub_21677EA60(&v53, *(const void **)(a2 + 464), *(void *)(a2 + 472), (uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 3);
  if (SHIBYTE(v58) < 0)
  {
    if (*((void *)&v57 + 1)) {
      goto LABEL_82;
    }
LABEL_84:
    if (v59) {
      uint64_t v17 = nullsub_7;
    }
    else {
      uint64_t v17 = 0;
    }
    goto LABEL_87;
  }
  if (!HIBYTE(v58)) {
    goto LABEL_84;
  }
LABEL_82:
  uint64_t v17 = 0;
LABEL_87:
  if (v17)
  {
    if (*(_DWORD *)&v52[8] == 127 || !*(void *)v52 && v54 == v53) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = nullsub_10;
    }
    if (v18) {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v56);
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v56);
    }
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v56);
LABEL_99:
  if (*(_DWORD *)(a2 + 496) == 127 || !*(void *)(a2 + 488) && *(void *)(a2 + 512) == *(void *)(a2 + 504)) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = nullsub_8;
  }
  if (v19)
  {
    if ((sub_2167C5D84((uint64_t)this + 920) & 1) == 0) {
      Alembic::AbcGeom::v12::OSubDSchema::createUVsProperty((uint64_t)this, a2);
    }
    sub_2167C3654((uint64_t)this + 920, a2 + 488);
  }
  int v20 = *((unsigned __int8 *)this + 423);
  if (*((char *)this + 423) < 0)
  {
    if (!*((void *)this + 51)) {
      goto LABEL_112;
    }
  }
  else if (!*((unsigned char *)this + 423))
  {
LABEL_112:
    if (*((void *)this + 53)) {
      goto LABEL_115;
    }
  }
  if (*(_DWORD *)(a2 + 120) != -1073741824)
  {
    Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingInterpolateBoundaryProperty(this);
    int v20 = *((unsigned __int8 *)this + 423);
  }
LABEL_115:
  if ((v20 & 0x80) != 0)
  {
    if (*((void *)this + 51)) {
      goto LABEL_117;
    }
  }
  else if (v20)
  {
LABEL_117:
    uint64_t v21 = 0;
    goto LABEL_122;
  }
  if (*((void *)this + 53)) {
    uint64_t v21 = nullsub_6;
  }
  else {
    uint64_t v21 = 0;
  }
LABEL_122:
  if (v21)
  {
    int v22 = *(_DWORD *)(a2 + 120);
    if (v22 == -1073741824) {
      int v22 = 0;
    }
    LODWORD(__dst[0]) = v22;
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392), __dst);
  }
  int v23 = *((unsigned __int8 *)this + 471);
  if (*((char *)this + 471) < 0)
  {
    if (!*((void *)this + 57)) {
      goto LABEL_130;
    }
  }
  else if (!*((unsigned char *)this + 471))
  {
LABEL_130:
    if (*((void *)this + 59)) {
      goto LABEL_133;
    }
  }
  if (*(_DWORD *)(a2 + 124) != -1073741824)
  {
    Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingPropagateCornersProperty(this);
    int v23 = *((unsigned __int8 *)this + 471);
  }
LABEL_133:
  if ((v23 & 0x80) != 0)
  {
    if (*((void *)this + 57)) {
      goto LABEL_135;
    }
  }
  else if (v23)
  {
LABEL_135:
    uint64_t v24 = 0;
    goto LABEL_140;
  }
  if (*((void *)this + 59)) {
    uint64_t v24 = nullsub_6;
  }
  else {
    uint64_t v24 = 0;
  }
LABEL_140:
  if (v24)
  {
    int v25 = *(_DWORD *)(a2 + 124);
    if (v25 == -1073741824) {
      int v25 = 0;
    }
    LODWORD(__dst[0]) = v25;
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440), __dst);
  }
  int v26 = *((unsigned __int8 *)this + 519);
  if (*((char *)this + 519) < 0)
  {
    if (!*((void *)this + 63)) {
      goto LABEL_148;
    }
  }
  else if (!*((unsigned char *)this + 519))
  {
LABEL_148:
    if (*((void *)this + 65)) {
      goto LABEL_151;
    }
  }
  if (*(_DWORD *)(a2 + 128) != -1073741824)
  {
    Alembic::AbcGeom::v12::OSubDSchema::createInterpolateBoundaryProperty(this);
    int v26 = *((unsigned __int8 *)this + 519);
  }
LABEL_151:
  if ((v26 & 0x80) != 0)
  {
    if (*((void *)this + 63)) {
      goto LABEL_153;
    }
  }
  else if (v26)
  {
LABEL_153:
    uint64_t v27 = 0;
    goto LABEL_158;
  }
  if (*((void *)this + 65)) {
    uint64_t v27 = nullsub_6;
  }
  else {
    uint64_t v27 = 0;
  }
LABEL_158:
  if (v27)
  {
    int v28 = *(_DWORD *)(a2 + 128);
    if (v28 == -1073741824) {
      int v28 = 0;
    }
    LODWORD(__dst[0]) = v28;
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488), __dst);
  }
  int v29 = (_OWORD *)(a2 + 376);
  if (*(char *)(a2 + 399) < 0)
  {
    sub_216778F24(__dst, *(void **)(a2 + 376), *(void *)(a2 + 384));
  }
  else
  {
    *(_OWORD *)long long __dst = *v29;
    uint64_t v62 = *(void *)(a2 + 392);
  }
  if (SHIBYTE(v62) < 0)
  {
    if (__dst[1] == (void *)13
      && *(void *)__dst[0] == 0x2D6C6C756D746163
      && *(void *)((char *)__dst[0] + 5) == 0x6B72616C632D6C6CLL)
    {
      operator delete(__dst[0]);
      goto LABEL_187;
    }
LABEL_178:
    if (*((char *)this + 855) < 0)
    {
      if (*((void *)this + 105))
      {
LABEL_180:
        BOOL v32 = 1;
        if ((SHIBYTE(v62) & 0x80000000) == 0) {
          goto LABEL_181;
        }
        goto LABEL_185;
      }
    }
    else if (*((unsigned char *)this + 855))
    {
      goto LABEL_180;
    }
    BOOL v32 = *((void *)this + 107) == 0;
    if ((SHIBYTE(v62) & 0x80000000) == 0)
    {
LABEL_181:
      if (!v32) {
        goto LABEL_187;
      }
LABEL_186:
      Alembic::AbcGeom::v12::OSubDSchema::createSubDSchemeProperty(this);
      goto LABEL_187;
    }
LABEL_185:
    operator delete(__dst[0]);
    if (!v32) {
      goto LABEL_187;
    }
    goto LABEL_186;
  }
  if (SHIBYTE(v62) != 13) {
    goto LABEL_178;
  }
  if (__dst[0] != (void *)0x2D6C6C756D746163 || *(void **)((char *)__dst + 5) != (void *)0x6B72616C632D6C6CLL) {
    goto LABEL_178;
  }
LABEL_187:
  if (*((char *)this + 855) < 0)
  {
    if (*((void *)this + 105)) {
      goto LABEL_189;
    }
LABEL_191:
    if (*((void *)this + 107)) {
      int v33 = nullsub_6;
    }
    else {
      int v33 = 0;
    }
    goto LABEL_194;
  }
  if (!*((unsigned char *)this + 855)) {
    goto LABEL_191;
  }
LABEL_189:
  int v33 = 0;
LABEL_194:
  if (v33)
  {
    if (*(char *)(a2 + 399) < 0)
    {
      sub_216778F24(__dst, *(void **)(a2 + 376), *(void *)(a2 + 384));
    }
    else
    {
      *(_OWORD *)long long __dst = *v29;
      uint64_t v62 = *(void *)(a2 + 392);
    }
    Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824), __dst);
    if (SHIBYTE(v62) < 0) {
      operator delete(__dst[0]);
    }
  }
  uint64_t v34 = (void *)(a2 + 136);
  int v35 = *(_DWORD *)(a2 + 144);
  if (v35 == 127 || !*v34 && *(void *)(a2 + 160) == *(void *)(a2 + 152)) {
    int v36 = 0;
  }
  else {
    int v36 = nullsub_20;
  }
  if (!v36
    && !(*(_DWORD *)(a2 + 184) == 127 || !*(void *)(a2 + 176) && *(void *)(a2 + 200) == *(void *)(a2 + 192)
       ? 0
       : nullsub_20)
    && !(*(_DWORD *)(a2 + 224) == 127 || !*(void *)(a2 + 216) && *(void *)(a2 + 240) == *(void *)(a2 + 232)
       ? 0
       : nullsub_13))
  {
    goto LABEL_235;
  }
  if (*((char *)this + 567) < 0)
  {
    if (*((void *)this + 69)) {
      goto LABEL_224;
    }
  }
  else if (*((unsigned char *)this + 567))
  {
    goto LABEL_224;
  }
  if (*((void *)this + 71)) {
    goto LABEL_235;
  }
LABEL_224:
  if (*((char *)this + 615) < 0)
  {
    if (*((void *)this + 75)) {
      goto LABEL_229;
    }
  }
  else if (*((unsigned char *)this + 615))
  {
    goto LABEL_229;
  }
  if (*((void *)this + 77)) {
    goto LABEL_235;
  }
LABEL_229:
  if (*((char *)this + 663) < 0)
  {
    if (!*((void *)this + 81)) {
      goto LABEL_233;
    }
LABEL_234:
    Alembic::AbcGeom::v12::OSubDSchema::initCreases(this, 0);
    int v35 = *(_DWORD *)(a2 + 144);
    goto LABEL_235;
  }
  if (*((unsigned char *)this + 663)) {
    goto LABEL_234;
  }
LABEL_233:
  if (!*((void *)this + 83)) {
    goto LABEL_234;
  }
LABEL_235:
  if (v35 == 127 || !*v34 && *(void *)(a2 + 160) == *(void *)(a2 + 152)) {
    int v39 = 0;
  }
  else {
    int v39 = nullsub_20;
  }
  if (v39) {
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 536);
  }
  if (*(_DWORD *)(a2 + 184) == 127 || !*(void *)(a2 + 176) && *(void *)(a2 + 200) == *(void *)(a2 + 192)) {
    int v40 = 0;
  }
  else {
    int v40 = nullsub_20;
  }
  if (v40) {
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 584);
  }
  if (*(_DWORD *)(a2 + 224) == 127 || !*(void *)(a2 + 216) && *(void *)(a2 + 240) == *(void *)(a2 + 232)) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = nullsub_13;
  }
  if (v41) {
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 632);
  }
  uint64_t v42 = (void *)(a2 + 256);
  int v43 = *(_DWORD *)(a2 + 264);
  if (v43 == 127 || !*v42 && *(void *)(a2 + 280) == *(void *)(a2 + 272)) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = nullsub_20;
  }
  if (!v44
    && !(*(_DWORD *)(a2 + 304) == 127 || !*(void *)(a2 + 296) && *(void *)(a2 + 320) == *(void *)(a2 + 312)
       ? 0
       : nullsub_13))
  {
    goto LABEL_279;
  }
  if (*((char *)this + 711) < 0)
  {
    if (*((void *)this + 87)) {
      goto LABEL_273;
    }
  }
  else if (*((unsigned char *)this + 711))
  {
    goto LABEL_273;
  }
  if (*((void *)this + 89)) {
    goto LABEL_279;
  }
LABEL_273:
  if (*((char *)this + 759) < 0)
  {
    if (!*((void *)this + 93)) {
      goto LABEL_277;
    }
LABEL_278:
    Alembic::AbcGeom::v12::OSubDSchema::initCorners(this, 0);
    int v43 = *(_DWORD *)(a2 + 264);
    goto LABEL_279;
  }
  if (*((unsigned char *)this + 759)) {
    goto LABEL_278;
  }
LABEL_277:
  if (!*((void *)this + 95)) {
    goto LABEL_278;
  }
LABEL_279:
  if (v43 == 127 || !*v42 && *(void *)(a2 + 280) == *(void *)(a2 + 272)) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = nullsub_20;
  }
  if (v46) {
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 680);
  }
  if (*(_DWORD *)(a2 + 304) == 127 || !*(void *)(a2 + 296) && *(void *)(a2 + 320) == *(void *)(a2 + 312)) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = nullsub_13;
  }
  if (v47) {
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 728);
  }
  int v48 = (void *)(a2 + 336);
  int v49 = *(_DWORD *)(a2 + 344);
  if (v49 == 127 || !*v48 && *(void *)(a2 + 360) == *(void *)(a2 + 352)) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = nullsub_20;
  }
  if (!v50) {
    goto LABEL_305;
  }
  if (*((char *)this + 807) < 0)
  {
    if (!*((void *)this + 99)) {
      goto LABEL_303;
    }
LABEL_304:
    Alembic::AbcGeom::v12::OSubDSchema::initHoles(this, 0);
    int v49 = *(_DWORD *)(a2 + 344);
    goto LABEL_305;
  }
  if (*((unsigned char *)this + 807)) {
    goto LABEL_304;
  }
LABEL_303:
  if (!*((void *)this + 101)) {
    goto LABEL_304;
  }
LABEL_305:
  if (v49 == 127 || !*v48 && *(void *)(a2 + 360) == *(void *)(a2 + 352)) {
    int v51 = 0;
  }
  else {
    int v51 = nullsub_20;
  }
  if (v51) {
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 776);
  }
  ++*((void *)this + 144);
}

void sub_2167F217C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  int v36 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v34 - 64, (uint64_t)v36);
  }
  else {
    sub_21679F9F4(v34 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F2164);
}

void sub_2167F2248(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OSubDSchema::createSubDSchemeProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v14 = *((void *)this + 5);
  uint64_t v15 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".scheme");
  int v3 = *((_DWORD *)this + 290);
  v11[0] = 2;
  v11[2] = v3;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  sub_2167F5DBC((uint64_t)&v16, &v14, (uint64_t)__p, v11, v10, v9, v8);
  *((_DWORD *)this + 206) = v16;
  std::string::operator=((std::string *)((char *)this + 832), &v17);
  uint64_t v5 = v18;
  uint64_t v4 = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 107) = v5;
  int v6 = (std::__shared_weak_count *)*((void *)this + 108);
  *((void *)this + 108) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v16);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    sub_216784EC4(v15);
  }
  sub_216779094(&v16, "catmull-clark");
  if (*((void *)this + 144))
  {
    unint64_t v7 = 0;
    do
    {
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824), &v16);
      ++v7;
    }
    while (v7 < *((void *)this + 144));
  }
  if (v17.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v16);
  }
}

void sub_2167F23B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 80));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingInterpolateBoundaryProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v14 = *((void *)this + 5);
  uint64_t v15 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".faceVaryingInterpolateBoundary");
  int v3 = *((_DWORD *)this + 290);
  v11[0] = 2;
  v11[2] = v3;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  sub_2167DBB7C((uint64_t)&v16, &v14, (uint64_t)__p, v11, v10, v9, v8);
  *((_DWORD *)this + 98) = v16;
  std::string::operator=((std::string *)((char *)this + 400), &v17);
  uint64_t v5 = v18;
  uint64_t v4 = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 54);
  *((void *)this + 53) = v5;
  *((void *)this + 54) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v16);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    sub_216784EC4(v15);
  }
  if (*((void *)this + 144))
  {
    unint64_t v7 = 0;
    do
    {
      int v16 = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392), &v16);
      ++v7;
    }
    while (v7 < *((void *)this + 144));
  }
}

void sub_2167F2540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 80));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createFaceVaryingPropagateCornersProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v14 = *((void *)this + 5);
  uint64_t v15 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".faceVaryingPropagateCorners");
  int v3 = *((_DWORD *)this + 290);
  v11[0] = 2;
  v11[2] = v3;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  sub_2167DBB7C((uint64_t)&v16, &v14, (uint64_t)__p, v11, v10, v9, v8);
  *((_DWORD *)this + 110) = v16;
  std::string::operator=((std::string *)((char *)this + 448), &v17);
  uint64_t v5 = v18;
  uint64_t v4 = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 60);
  *((void *)this + 59) = v5;
  *((void *)this + 60) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v16);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    sub_216784EC4(v15);
  }
  if (*((void *)this + 144))
  {
    unint64_t v7 = 0;
    do
    {
      int v16 = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440), &v16);
      ++v7;
    }
    while (v7 < *((void *)this + 144));
  }
}

void sub_2167F26B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 80));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createInterpolateBoundaryProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v14 = *((void *)this + 5);
  uint64_t v15 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".interpolateBoundary");
  int v3 = *((_DWORD *)this + 290);
  v11[0] = 2;
  v11[2] = v3;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  sub_2167DBB7C((uint64_t)&v16, &v14, (uint64_t)__p, v11, v10, v9, v8);
  *((_DWORD *)this + 122) = v16;
  std::string::operator=((std::string *)((char *)this + 496), &v17);
  uint64_t v5 = v18;
  uint64_t v4 = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 65) = v5;
  int v6 = (std::__shared_weak_count *)*((void *)this + 66);
  *((void *)this + 66) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v16);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    sub_216784EC4(v15);
  }
  if (*((void *)this + 144))
  {
    unint64_t v7 = 0;
    do
    {
      int v16 = 0;
      Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488), &v16);
      ++v7;
    }
    while (v7 < *((void *)this + 144));
  }
}

void sub_2167F2824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 80));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createVelocitiesProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 5);
  int v16 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".velocities");
  int v3 = *((_DWORD *)this + 290);
  v11[0] = 2;
  v11[2] = v3;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  sub_2167C6BC0((uint64_t)&v17, &v15, (uint64_t)&__p, v11, v10, v9, v8);
  *((_DWORD *)this + 218) = v17;
  std::string::operator=((std::string *)((char *)this + 880), &v18);
  uint64_t v5 = v19;
  uint64_t v4 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 113) = v5;
  int v6 = (std::__shared_weak_count *)*((void *)this + 114);
  *((void *)this + 114) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v17);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  long long __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  sub_2167C6418(&v17, (uint64_t *)&__p);
  if (*((void *)this + 144))
  {
    unint64_t v7 = 0;
    do
    {
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 872);
      ++v7;
    }
    while (v7 < *((void *)this + 144));
  }
  if (v18.__r_.__value_.__l.__size_)
  {
    v18.__r_.__value_.__r.__words[2] = v18.__r_.__value_.__l.__size_;
    operator delete((void *)v18.__r_.__value_.__l.__size_);
  }
  if (__p)
  {
    char v13 = __p;
    operator delete(__p);
  }
}

void sub_2167F29C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OSubDSchema::createUVsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v47 = 0;
  int v48 = 0;
  uint64_t v49 = 0;
  *(void *)&long long v40 = 0;
  *((void *)&v40 + 1) = 0x20000000ALL;
  long long v41 = 0u;
  *(_OWORD *)uint64_t v42 = 0u;
  *(void *)&v42[16] = 0x100000005;
  int v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v46 = 127;
  uint64_t v38 = (uint64_t *)v39;
  v39[0] = 0;
  v39[1] = 0;
  Alembic::Abc::v12::SetSourceName(&v38, (const std::string *)(a1 + 1096));
  if (*(_DWORD *)(a2 + 536) == 127 || !*(void *)(a2 + 528) && *(void *)(a2 + 552) == *(void *)(a2 + 544)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = nullsub_21;
  }
  if (v4)
  {
    sub_2167C7154(v35, (uint64_t *)&v50);
    sub_2167C71F8(&v31, (uint64_t *)&v47);
    sub_2167C729C((uint64_t)&__dst, (uint64_t *)v35, &v31, *(_DWORD *)(a2 + 568));
    *(void *)&long long v40 = __dst;
    *(void *)((char *)&v40 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v41, (char *)v23, v24[0], (v24[0] - (uint64_t)v23) >> 3);
    *(void *)&v42[8] = v25;
    *(void *)&v42[13] = *(void *)((char *)&v25 + 5);
    sub_21677CC7C((char *)&v43, (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 3);
    int v46 = v29;
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v24[0] = (uint64_t)v23;
      operator delete(v23);
    }
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    if (v36)
    {
      int v37 = v36;
      operator delete(v36);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, "uv");
    int v6 = v46;
    sub_2167F3D20(a1, &v18);
    LODWORD(v31) = 4;
    BOOL v32 = &v18;
    int v16 = 3;
    uint64_t v17 = &v38;
    int v14 = 0;
    int v15 = 0;
    sub_2167C7350((char *)&__dst, &v20, (uint64_t)v35, 1, v6, 1, &v31, &v16, &v14);
    sub_2167C5310(a1 + 920, &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v30);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v24);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    unint64_t v7 = v21;
    if (v21) {
LABEL_24:
    }
      sub_216784EC4(v7);
  }
  else
  {
    sub_2167C7154(v35, (uint64_t *)&v50);
    int v9 = *(_DWORD *)(a2 + 568);
    *(void *)&long long __dst = *(void *)v35;
    *(void *)((char *)&__dst + 5) = *(void *)&v35[5];
    int v23 = 0;
    v24[0] = 0;
    v24[1] = 0;
    sub_21677EA60(&v23, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 3);
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = 0x100000005;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long __p = 0;
    int v29 = v9;
    *(void *)&long long v40 = __dst;
    *(void *)((char *)&v40 + 5) = *(void *)((char *)&__dst + 5);
    sub_21677CC7C((char *)&v41, (char *)v23, v24[0], (v24[0] - (uint64_t)v23) >> 3);
    *(void *)&v42[8] = v25;
    *(void *)&v42[13] = *(void *)((char *)&v25 + 5);
    sub_21677CC7C((char *)&v43, (char *)__p, (uint64_t)v27, (v27 - (unsigned char *)__p) >> 3);
    int v46 = v29;
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v24[0] = (uint64_t)v23;
      operator delete(v23);
    }
    if (v36)
    {
      int v37 = v36;
      operator delete(v36);
    }
    int v10 = *(std::__shared_weak_count **)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40);
    char v13 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(v35, "uv");
    int v11 = v46;
    sub_2167F3D20(a1, &v18);
    LODWORD(v31) = 4;
    BOOL v32 = &v18;
    int v16 = 3;
    uint64_t v17 = &v38;
    int v14 = 0;
    int v15 = 0;
    sub_2167C7350((char *)&__dst, &v12, (uint64_t)v35, 0, v11, 1, &v31, &v16, &v14);
    sub_2167C5310(a1 + 920, &__dst);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v30);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v28);
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v24);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v35);
    }
    unint64_t v7 = v13;
    if (v13) {
      goto LABEL_24;
    }
  }
  if (*(void *)(a1 + 1152))
  {
    unint64_t v8 = 0;
    do
    {
      sub_2167C3654(a1 + 920, (uint64_t)&v40);
      ++v8;
    }
    while (v8 < *(void *)(a1 + 1152));
  }
  sub_2167877AC((uint64_t)&v38, v39[0]);
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  if ((void)v41)
  {
    *((void *)&v41 + 1) = v41;
    operator delete((void *)v41);
  }
  if (v47)
  {
    int v48 = v47;
    operator delete(v47);
  }
  if (v50)
  {
    int v51 = v50;
    operator delete(v50);
  }
}

void sub_2167F2F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54)
{
  sub_2167C5410((uint64_t)&a21);
  if (a18) {
    sub_216784EC4(a18);
  }
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  sub_2167877AC(v54 - 224, *(void **)(v54 - 216));
  sub_2167C5204((void *)(v54 - 200));
  int v56 = *(void **)(v54 - 112);
  if (v56)
  {
    *(void *)(v54 - 104) = v56;
    operator delete(v56);
  }
  long long v57 = *(void **)(v54 - 88);
  if (v57)
  {
    *(void *)(v54 - 80) = v57;
    operator delete(v57);
  }
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::initCreases(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  long long v41 = (char *)this + 8;
  uint64_t v42 = "OSubDSchema::initCreases()";
  uint64_t v5 = *((void *)this + 5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = sub_2167C5C4C((uint64_t)this + 248);
  unint64_t v7 = *(std::__shared_weak_count **)(v6 + 72);
  uint64_t v39 = *(void *)(v6 + 64);
  long long v40 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = v5;
  uint64_t v34 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".creaseIndices");
  LODWORD(v17) = 4;
  uint64_t v18 = &v39;
  int v28 = 0;
  int v29 = 0;
  int v26 = 0;
  int v27 = 0;
  int v24 = 0;
  int v25 = 0;
  sub_2167C6640((uint64_t)&v35, &v33, (uint64_t)&__p, &v17, &v28, &v26, &v24);
  *((_DWORD *)this + 134) = v35;
  std::string::operator=((std::string *)((char *)this + 544), &v36);
  uint64_t v9 = v37;
  uint64_t v8 = v38;
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 71) = v9;
  int v10 = (std::__shared_weak_count *)*((void *)this + 72);
  *((void *)this + 72) = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v35);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  if (v34) {
    sub_216784EC4(v34);
  }
  uint64_t v22 = v5;
  int v23 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".creaseLengths");
  LODWORD(v17) = 4;
  uint64_t v18 = &v39;
  int v28 = 0;
  int v29 = 0;
  int v26 = 0;
  int v27 = 0;
  int v24 = 0;
  int v25 = 0;
  sub_2167C6640((uint64_t)&v35, &v22, (uint64_t)&__p, &v17, &v28, &v26, &v24);
  *((_DWORD *)this + 146) = v35;
  std::string::operator=((std::string *)((char *)this + 592), &v36);
  uint64_t v12 = v37;
  uint64_t v11 = v38;
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 77) = v12;
  char v13 = (std::__shared_weak_count *)*((void *)this + 78);
  *((void *)this + 78) = v11;
  if (v13) {
    sub_216784EC4(v13);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v35);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  if (v23) {
    sub_216784EC4(v23);
  }
  uint64_t v20 = v5;
  uint64_t v21 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".creaseSharpnesses");
  LODWORD(v17) = 4;
  uint64_t v18 = &v39;
  int v28 = 0;
  int v29 = 0;
  int v26 = 0;
  int v27 = 0;
  int v24 = 0;
  int v25 = 0;
  sub_2167CAE0C((uint64_t)&v35, &v20, (uint64_t)&__p, &v17, &v28, &v26, &v24);
  *((_DWORD *)this + 158) = v35;
  std::string::operator=((std::string *)((char *)this + 640), &v36);
  uint64_t v15 = v37;
  uint64_t v14 = v38;
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 83) = v15;
  int v16 = (std::__shared_weak_count *)*((void *)this + 84);
  *((void *)this + 84) = v14;
  if (v16) {
    sub_216784EC4(v16);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v35);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p);
  }
  if (v21) {
    sub_216784EC4(v21);
  }
  long long __p = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (a2)
  {
    do
    {
      sub_2167C6B1C(&v35, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 536);
      if (v36.__r_.__value_.__l.__size_)
      {
        v36.__r_.__value_.__r.__words[2] = v36.__r_.__value_.__l.__size_;
        operator delete((void *)v36.__r_.__value_.__l.__size_);
      }
      sub_2167C6B1C(&v35, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 584);
      if (v36.__r_.__value_.__l.__size_)
      {
        v36.__r_.__value_.__r.__words[2] = v36.__r_.__value_.__l.__size_;
        operator delete((void *)v36.__r_.__value_.__l.__size_);
      }
      sub_2167CA034(&v35, (uint64_t *)&v17);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 632);
      if (v36.__r_.__value_.__l.__size_)
      {
        v36.__r_.__value_.__r.__words[2] = v36.__r_.__value_.__l.__size_;
        operator delete((void *)v36.__r_.__value_.__l.__size_);
      }
      --a2;
    }
    while (a2);
    if (v17)
    {
      uint64_t v18 = (uint64_t *)v17;
      operator delete(v17);
    }
    if (__p)
    {
      uint64_t v31 = __p;
      operator delete(__p);
    }
  }
  if (v40) {
    sub_216784EC4(v40);
  }
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2167F342C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a30);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_216784EC4(a13);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v35 - 88);
  if (v38) {
    sub_216784EC4(v38);
  }
  if (v33) {
    sub_216784EC4(v33);
  }
  uint64_t v39 = __cxa_begin_catch(a1);
  long long v40 = *(void (**)(uint64_t))(*(void *)v34 + 16);
  if (a2 == 2)
  {
    uint64_t v41 = (uint64_t)v39;
    v40(v34);
    sub_21679FA64(v35 - 80, v41);
  }
  else
  {
    v40(v34);
    sub_21679F9F4(v35 - 80, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F3404);
}

void sub_2167F35E4(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OSubDSchema::initCorners(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  std::string v36 = (char *)this + 8;
  uint64_t v37 = "OSubDSchema::initCorners()";
  uint64_t v5 = *((void *)this + 5);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = sub_2167C5C4C((uint64_t)this + 248);
  unint64_t v7 = *(std::__shared_weak_count **)(v6 + 72);
  uint64_t v34 = *(void *)(v6 + 64);
  uint64_t v35 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = v5;
  int v29 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".cornerIndices");
  LODWORD(v14) = 4;
  uint64_t v15 = &v34;
  int v23 = 0;
  int v24 = 0;
  int v21 = 0;
  int v22 = 0;
  int v19 = 0;
  int v20 = 0;
  sub_2167C6640((uint64_t)&v30, &v28, (uint64_t)&__p, &v14, &v23, &v21, &v19);
  *((_DWORD *)this + 170) = v30;
  std::string::operator=((std::string *)((char *)this + 688), &v31);
  uint64_t v9 = v32;
  uint64_t v8 = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 89) = v9;
  int v10 = (std::__shared_weak_count *)*((void *)this + 90);
  *((void *)this + 90) = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v30);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  if (v29) {
    sub_216784EC4(v29);
  }
  uint64_t v17 = v5;
  uint64_t v18 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".cornerSharpnesses");
  LODWORD(v14) = 4;
  uint64_t v15 = &v34;
  int v23 = 0;
  int v24 = 0;
  int v21 = 0;
  int v22 = 0;
  int v19 = 0;
  int v20 = 0;
  sub_2167CAE0C((uint64_t)&v30, &v17, (uint64_t)&__p, &v14, &v23, &v21, &v19);
  *((_DWORD *)this + 182) = v30;
  std::string::operator=((std::string *)((char *)this + 736), &v31);
  uint64_t v12 = v32;
  uint64_t v11 = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 95) = v12;
  char v13 = (std::__shared_weak_count *)*((void *)this + 96);
  *((void *)this + 96) = v11;
  if (v13) {
    sub_216784EC4(v13);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v30);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  long long __p = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (a2)
  {
    do
    {
      sub_2167C6B1C(&v30, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 680);
      if (v31.__r_.__value_.__l.__size_)
      {
        v31.__r_.__value_.__r.__words[2] = v31.__r_.__value_.__l.__size_;
        operator delete((void *)v31.__r_.__value_.__l.__size_);
      }
      sub_2167CA034(&v30, (uint64_t *)&v14);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 728);
      if (v31.__r_.__value_.__l.__size_)
      {
        v31.__r_.__value_.__r.__words[2] = v31.__r_.__value_.__l.__size_;
        operator delete((void *)v31.__r_.__value_.__l.__size_);
      }
      --a2;
    }
    while (a2);
    if (v14)
    {
      uint64_t v15 = (uint64_t *)v14;
      operator delete(v14);
    }
    if (__p)
    {
      int v26 = __p;
      operator delete(__p);
    }
  }
  if (v35) {
    sub_216784EC4(v35);
  }
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2167F38DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a28);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_216784EC4(a13);
  }
  std::string v36 = *(std::__shared_weak_count **)(v33 - 72);
  if (v36) {
    sub_216784EC4(v36);
  }
  if (v31) {
    sub_216784EC4(v31);
  }
  uint64_t v37 = __cxa_begin_catch(a1);
  uint64_t v38 = *(void (**)(uint64_t))(*(void *)v32 + 16);
  if (a2 == 2)
  {
    uint64_t v39 = (uint64_t)v37;
    v38(v32);
    sub_21679FA64(v33 - 64, v39);
  }
  else
  {
    v38(v32);
    sub_21679F9F4(v33 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F38B8);
}

void sub_2167F3A48(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OSubDSchema::initHoles(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  int v26 = (char *)this + 8;
  uint64_t v27 = "OSubDSchema::initHoles()";
  uint64_t v4 = sub_2167C5C4C((uint64_t)this + 248);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 72);
  uint64_t v24 = *(void *)(v4 + 64);
  int v25 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v18 = *((void *)this + 5);
  int v19 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, ".holes");
  int v13 = 4;
  uint64_t v14 = &v24;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167C6640((uint64_t)&v20, &v18, (uint64_t)&__p, &v13, v12, v11, v10);
  *((_DWORD *)this + 194) = v20;
  std::string::operator=((std::string *)((char *)this + 784), &v21);
  uint64_t v8 = v22;
  uint64_t v7 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 101) = v8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 102);
  *((void *)this + 102) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v20);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
  long long __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (a2)
  {
    do
    {
      sub_2167C6B1C(&v20, (uint64_t *)&__p);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 776);
      if (v21.__r_.__value_.__l.__size_)
      {
        v21.__r_.__value_.__r.__words[2] = v21.__r_.__value_.__l.__size_;
        operator delete((void *)v21.__r_.__value_.__l.__size_);
      }
      --a2;
    }
    while (a2);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
  }
  if (v25) {
    sub_216784EC4(v25);
  }
}

void sub_2167F3BFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a26);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    sub_216784EC4(v33);
  }
  uint64_t v34 = __cxa_begin_catch(a1);
  uint64_t v35 = *(void (**)(uint64_t))(*(void *)v29 + 16);
  if (a2 == 2)
  {
    uint64_t v36 = (uint64_t)v34;
    v35(v29);
    sub_21679FA64(v30 - 48, v36);
  }
  else
  {
    v35(v29);
    sub_21679F9F4(v30 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F3BE8);
}

void sub_2167F3D00(_Unwind_Exception *a1)
{
}

void sub_2167F3D20(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 279) < 0)
  {
    if (!*(void *)(a1 + 264)) {
      goto LABEL_5;
    }
LABEL_8:
    sub_2167B7AC8((int *)(a1 + 8), (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v6, a2);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return;
  }
  if (*(unsigned char *)(a1 + 279)) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*(void *)(a1 + 280)) {
    goto LABEL_8;
  }
  uint64_t v3 = sub_2167C5C4C(a1 + 248);
  uint64_t v4 = *(void *)(v3 + 72);
  *a2 = *(void *)(v3 + 64);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2167F3DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OSubDSchema::createPositionsProperty(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = (uint64_t *)v25;
  sub_2167C4D74(&v24, 3);
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v18 = *((void *)this + 5);
  int v19 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, "P");
  LODWORD(v12) = 3;
  int v13 = &v24;
  int v3 = *((_DWORD *)this + 290);
  v17[0] = 2;
  void v17[2] = v3;
  v16[0] = 0;
  void v16[2] = 0;
  v15[0] = 0;
  void v15[2] = 0;
  sub_2167C5E88((uint64_t)&v20, &v18, (uint64_t)__p, &v12, v17, v16, v15);
  *((_DWORD *)this + 62) = v20;
  std::string::operator=((std::string *)((char *)this + 256), &v21);
  uint64_t v5 = v22;
  uint64_t v4 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 36);
  *((void *)this + 35) = v5;
  *((void *)this + 36) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v20);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  sub_2167C6418(&v20, (uint64_t *)&v12);
  if (*((void *)this + 144))
  {
    unint64_t v7 = 0;
    do
    {
      sub_2167C64C8(__p, &v20);
      Alembic::Abc::v12::OArrayProperty::set((uint64_t)this + 248);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      ++v7;
      unint64_t v8 = *((void *)this + 144);
    }
    while (v7 < v8);
  }
  else
  {
    unint64_t v8 = 0;
  }
  sub_2167F4048((uint64_t)this, *((_DWORD *)this + 290), v8);
  if (v21.__r_.__value_.__l.__size_)
  {
    v21.__r_.__value_.__r.__words[2] = v21.__r_.__value_.__l.__size_;
    operator delete((void *)v21.__r_.__value_.__l.__size_);
  }
  if (v12)
  {
    int v13 = (uint64_t **)v12;
    operator delete(v12);
  }
  sub_2167877AC((uint64_t)&v24, v25[0]);
}

void sub_2167F3FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v30 = *(void **)(v28 - 88);
  if (v30)
  {
    *(void *)(v28 - 80) = v30;
    operator delete(v30);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_2167877AC(v28 - 56, *(void **)(v28 - 48));
  _Unwind_Resume(a1);
}

void sub_2167F4048(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v20 = a1 + 8;
  std::string v21 = "OGeomBaseSchema::createSelfBoundsProperty()";
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(void *)(a1 + 72)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 87))
  {
LABEL_5:
    if (*(void *)(a1 + 88)) {
      return;
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".selfBnds");
  v13[0] = 2;
  void v13[2] = a2;
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167B9640((uint64_t)v18, &v16, (uint64_t)__p, v13, v12, v11, v10);
  *(_DWORD *)(a1 + 56) = v18[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)((char *)v18 + 8));
  int64x2_t v7 = v19;
  if (v19.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(int64x2_t *)(a1 + 88) = v7;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  v18[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v18[1] = xmmword_217409FA0;
  int64x2_t v19 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a3)
  {
    uint64_t v9 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 56);
    do
    {
      Alembic::Abc::v12::OScalarProperty::set(v9, v18);
      --a3;
    }
    while (a3);
  }
}

void sub_2167F41B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v25 - 96));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  uint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v25 - 48, (uint64_t)v28);
  }
  else {
    sub_21679F9F4(v25 - 48, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F41A4);
}

void sub_2167F423C(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::setFromPrevious(Alembic::AbcGeom::v12::OSubDSchema *this)
{
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    BOOL v2 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    BOOL v2 = nullsub_7;
  }
  else {
    BOOL v2 = 0;
  }
LABEL_8:
  if (v2) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 248));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_12:
    int v3 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 41)) {
    int v3 = nullsub_7;
  }
  else {
    int v3 = 0;
  }
LABEL_17:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 296));
  }
  if (*((char *)this + 375) < 0)
  {
    if (*((void *)this + 45)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 375))
  {
LABEL_21:
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 47)) {
    uint64_t v4 = nullsub_7;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_26:
  if (v4) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 344));
  }
  if (*((char *)this + 423) < 0)
  {
    if (*((void *)this + 51)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 423))
  {
LABEL_30:
    uint64_t v5 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 53)) {
    uint64_t v5 = nullsub_6;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_35:
  if (v5) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392));
  }
  if (*((char *)this + 471) < 0)
  {
    if (*((void *)this + 57)) {
      goto LABEL_39;
    }
  }
  else if (*((unsigned char *)this + 471))
  {
LABEL_39:
    uint64_t v6 = 0;
    goto LABEL_44;
  }
  if (*((void *)this + 59)) {
    uint64_t v6 = nullsub_6;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_44:
  if (v6) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440));
  }
  if (*((char *)this + 519) < 0)
  {
    if (*((void *)this + 63)) {
      goto LABEL_48;
    }
  }
  else if (*((unsigned char *)this + 519))
  {
LABEL_48:
    int64x2_t v7 = 0;
    goto LABEL_53;
  }
  if (*((void *)this + 65)) {
    int64x2_t v7 = nullsub_6;
  }
  else {
    int64x2_t v7 = 0;
  }
LABEL_53:
  if (v7) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488));
  }
  if (*((char *)this + 567) < 0)
  {
    if (*((void *)this + 69)) {
      goto LABEL_57;
    }
  }
  else if (*((unsigned char *)this + 567))
  {
LABEL_57:
    unint64_t v8 = 0;
    goto LABEL_62;
  }
  if (*((void *)this + 71)) {
    unint64_t v8 = nullsub_7;
  }
  else {
    unint64_t v8 = 0;
  }
LABEL_62:
  if (v8)
  {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 536));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 584));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 632));
  }
  if (*((char *)this + 711) < 0)
  {
    if (*((void *)this + 87)) {
      goto LABEL_66;
    }
  }
  else if (*((unsigned char *)this + 711))
  {
LABEL_66:
    uint64_t v9 = 0;
    goto LABEL_71;
  }
  if (*((void *)this + 89)) {
    uint64_t v9 = nullsub_7;
  }
  else {
    uint64_t v9 = 0;
  }
LABEL_71:
  if (v9)
  {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 680));
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 728));
  }
  if (*((char *)this + 807) < 0)
  {
    if (*((void *)this + 99)) {
      goto LABEL_75;
    }
  }
  else if (*((unsigned char *)this + 807))
  {
LABEL_75:
    uint64_t v10 = 0;
    goto LABEL_80;
  }
  if (*((void *)this + 101)) {
    uint64_t v10 = nullsub_7;
  }
  else {
    uint64_t v10 = 0;
  }
LABEL_80:
  if (v10) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 776));
  }
  if (*((char *)this + 855) < 0)
  {
    if (*((void *)this + 105)) {
      goto LABEL_84;
    }
  }
  else if (*((unsigned char *)this + 855))
  {
LABEL_84:
    uint64_t v11 = 0;
    goto LABEL_89;
  }
  if (*((void *)this + 107)) {
    uint64_t v11 = nullsub_6;
  }
  else {
    uint64_t v11 = 0;
  }
LABEL_89:
  if (v11) {
    Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824));
  }
  Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56));
  if (*((char *)this + 903) < 0)
  {
    if (*((void *)this + 111)) {
      goto LABEL_93;
    }
  }
  else if (*((unsigned char *)this + 903))
  {
LABEL_93:
    uint64_t v12 = 0;
    goto LABEL_98;
  }
  if (*((void *)this + 113)) {
    uint64_t v12 = nullsub_7;
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_98:
  if (v12) {
    Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 872));
  }
  int v13 = (char *)this + 920;
  uint64_t result = sub_2167C5D84((uint64_t)v13);
  if (result) {
    char v15 = nullsub_16;
  }
  else {
    char v15 = 0;
  }
  if (v15) {
    return sub_2167C4B94(v13);
  }
  return result;
}

void sub_2167F4680(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F4670);
}

void sub_2167F46B4(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling(Alembic::AbcGeom::v12::OSubDSchema *this, int a2)
{
  *((_DWORD *)this + 290) = a2;
  if (*((char *)this + 279) < 0)
  {
    if (*((void *)this + 33)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)this + 279))
  {
LABEL_3:
    int v3 = 0;
    goto LABEL_8;
  }
  if (*((void *)this + 35)) {
    int v3 = nullsub_7;
  }
  else {
    int v3 = 0;
  }
LABEL_8:
  if (v3) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 248));
  }
  if (*((char *)this + 327) < 0)
  {
    if (*((void *)this + 39)) {
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)this + 327))
  {
LABEL_12:
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  if (*((void *)this + 41)) {
    uint64_t v4 = nullsub_7;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_17:
  if (v4) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 296));
  }
  if (*((char *)this + 375) < 0)
  {
    if (*((void *)this + 45)) {
      goto LABEL_21;
    }
  }
  else if (*((unsigned char *)this + 375))
  {
LABEL_21:
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  if (*((void *)this + 47)) {
    uint64_t v5 = nullsub_7;
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_26:
  if (v5) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 344));
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((void *)this + 9)) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)this + 87))
  {
LABEL_30:
    uint64_t v6 = 0;
    goto LABEL_35;
  }
  if (*((void *)this + 11)) {
    uint64_t v6 = nullsub_6;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_35:
  if (v6) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 56));
  }
  if (*((char *)this + 423) < 0)
  {
    if (*((void *)this + 51)) {
      goto LABEL_39;
    }
  }
  else if (*((unsigned char *)this + 423))
  {
LABEL_39:
    int64x2_t v7 = 0;
    goto LABEL_44;
  }
  if (*((void *)this + 53)) {
    int64x2_t v7 = nullsub_6;
  }
  else {
    int64x2_t v7 = 0;
  }
LABEL_44:
  if (v7) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 392));
  }
  if (*((char *)this + 471) < 0)
  {
    if (*((void *)this + 57)) {
      goto LABEL_48;
    }
  }
  else if (*((unsigned char *)this + 471))
  {
LABEL_48:
    unint64_t v8 = 0;
    goto LABEL_53;
  }
  if (*((void *)this + 59)) {
    unint64_t v8 = nullsub_6;
  }
  else {
    unint64_t v8 = 0;
  }
LABEL_53:
  if (v8) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 440));
  }
  if (*((char *)this + 519) < 0)
  {
    if (*((void *)this + 63)) {
      goto LABEL_57;
    }
  }
  else if (*((unsigned char *)this + 519))
  {
LABEL_57:
    uint64_t v9 = 0;
    goto LABEL_62;
  }
  if (*((void *)this + 65)) {
    uint64_t v9 = nullsub_6;
  }
  else {
    uint64_t v9 = 0;
  }
LABEL_62:
  if (v9) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 488));
  }
  if (*((char *)this + 855) < 0)
  {
    if (*((void *)this + 105)) {
      goto LABEL_66;
    }
  }
  else if (*((unsigned char *)this + 855))
  {
LABEL_66:
    uint64_t v10 = 0;
    goto LABEL_71;
  }
  if (*((void *)this + 107)) {
    uint64_t v10 = nullsub_6;
  }
  else {
    uint64_t v10 = 0;
  }
LABEL_71:
  if (v10) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 824));
  }
  if (*((char *)this + 567) < 0)
  {
    if (*((void *)this + 69)) {
      goto LABEL_75;
    }
  }
  else if (*((unsigned char *)this + 567))
  {
LABEL_75:
    uint64_t v11 = 0;
    goto LABEL_80;
  }
  if (*((void *)this + 71)) {
    uint64_t v11 = nullsub_7;
  }
  else {
    uint64_t v11 = 0;
  }
LABEL_80:
  if (v11) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 536));
  }
  if (*((char *)this + 615) < 0)
  {
    if (*((void *)this + 75)) {
      goto LABEL_84;
    }
  }
  else if (*((unsigned char *)this + 615))
  {
LABEL_84:
    uint64_t v12 = 0;
    goto LABEL_89;
  }
  if (*((void *)this + 77)) {
    uint64_t v12 = nullsub_7;
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_89:
  if (v12) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 584));
  }
  if (*((char *)this + 663) < 0)
  {
    if (*((void *)this + 81)) {
      goto LABEL_93;
    }
  }
  else if (*((unsigned char *)this + 663))
  {
LABEL_93:
    int v13 = 0;
    goto LABEL_98;
  }
  if (*((void *)this + 83)) {
    int v13 = nullsub_7;
  }
  else {
    int v13 = 0;
  }
LABEL_98:
  if (v13) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 632));
  }
  if (*((char *)this + 711) < 0)
  {
    if (*((void *)this + 87)) {
      goto LABEL_102;
    }
  }
  else if (*((unsigned char *)this + 711))
  {
LABEL_102:
    uint64_t v14 = 0;
    goto LABEL_107;
  }
  if (*((void *)this + 89)) {
    uint64_t v14 = nullsub_7;
  }
  else {
    uint64_t v14 = 0;
  }
LABEL_107:
  if (v14) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 680));
  }
  if (*((char *)this + 759) < 0)
  {
    if (*((void *)this + 93)) {
      goto LABEL_111;
    }
  }
  else if (*((unsigned char *)this + 759))
  {
LABEL_111:
    char v15 = 0;
    goto LABEL_116;
  }
  if (*((void *)this + 95)) {
    char v15 = nullsub_7;
  }
  else {
    char v15 = 0;
  }
LABEL_116:
  if (v15) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 728));
  }
  if (*((char *)this + 807) < 0)
  {
    if (*((void *)this + 99)) {
      goto LABEL_120;
    }
  }
  else if (*((unsigned char *)this + 807))
  {
LABEL_120:
    uint64_t v16 = 0;
    goto LABEL_125;
  }
  if (*((void *)this + 101)) {
    uint64_t v16 = nullsub_7;
  }
  else {
    uint64_t v16 = 0;
  }
LABEL_125:
  if (v16) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 776));
  }
  if (*((char *)this + 903) < 0)
  {
    if (*((void *)this + 111)) {
      goto LABEL_129;
    }
  }
  else if (*((unsigned char *)this + 903))
  {
LABEL_129:
    uint64_t v17 = 0;
    goto LABEL_134;
  }
  if (*((void *)this + 113)) {
    uint64_t v17 = nullsub_7;
  }
  else {
    uint64_t v17 = 0;
  }
LABEL_134:
  if (v17) {
    Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)((char *)this + 872));
  }
  uint64_t v18 = (char *)this + 920;
  uint64_t result = sub_2167C5D84((uint64_t)v18);
  if (result) {
    uint64_t v20 = nullsub_16;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20) {
    return sub_2167C5854(v18);
  }
  return result;
}

void sub_2167F4C70(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F4C60);
}

void sub_2167F4CA4(_Unwind_Exception *a1)
{
}

int *Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling(Alembic::AbcGeom::v12::OSubDSchema *a1, void *a2)
{
  uint64_t result = (int *)((char *)a1 + 8);
  int64x2_t v7 = result;
  unint64_t v8 = "OSubDSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_2167B7AC8(result, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    int v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    return (int *)Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling(a1, v4);
  }
  return result;
}

void sub_2167F4D48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  int64x2_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F4D38);
}

void sub_2167F4DB0(_Unwind_Exception *a1)
{
}

uint64_t *Alembic::AbcGeom::v12::OSubDSchema::createFaceSet(uint64_t a1, const void **a2)
{
  int v3 = (int *)(a1 + 8);
  uint64_t v36 = a1 + 8;
  uint64_t v37 = "OSubDSchema::createFaceSet ()";
  int v4 = (uint64_t **)(a1 + 1120);
  if (a1 + 1128 != sub_21678C2D8(a1 + 1120, a2))
  {
    sub_216778A5C((uint64_t)v18);
    sub_216779180(v19, (uint64_t)"faceSet has already been created in SubD.", 41);
    std::stringbuf::str();
    sub_216778E70(&v28, &v34);
    if (v35 < 0) {
      operator delete((void *)v34);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v9 = sub_216779038(exception, (uint64_t)&v28);
    __cxa_throw(v9, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167B7AC8(v3, (uint64_t)&v28);
  int v13 = v29;
  if (SHIBYTE(v31) < 0)
  {
    sub_216778F24(&v14, (void *)v30, *((unint64_t *)&v30 + 1));
  }
  else
  {
    long long v14 = v30;
    uint64_t v15 = v31;
  }
  uint64_t v12 = &unk_26C7495D0;
  uint64_t v16 = v32;
  uint64_t v17 = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v34) = 0;
  DWORD2(v34) = 0;
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  sub_2167E8E14((uint64_t)v18, (uint64_t)&v12, (long long *)a2, &v34, v11, v10);
  uint64_t v38 = a2;
  uint64_t v5 = sub_2167E8C30(v4, a2, (uint64_t)&unk_21740A533, (long long **)&v38);
  sub_2167E7878((uint64_t)(v5 + 7), (uint64_t)v18);
  v18[0] = (long long *)&unk_26C749F60;
  uint64_t v20 = &unk_26C749A40;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v27);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v26);
  uint64_t v20 = &unk_26C749AF8;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v25);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v24);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v23);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v22);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v18);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v12);
  v18[0] = (long long *)a2;
  uint64_t v6 = sub_2167E8C30(v4, a2, (uint64_t)&unk_21740A533, v18) + 7;
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v28);
  return v6;
}

void sub_2167F5064(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_216779148((std::exception *)(v13 - 160));
  sub_216778D38((uint64_t)va);
  uint64_t v16 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v13 - 80, (uint64_t)v16);
  }
  else {
    sub_21679F9F4(v13 - 80, 0);
  }
  __cxa_end_catch();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E158, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26798E158))
    {
      uint64_t v17 = operator new(0x198uLL);
      sub_2167E996C((uint64_t)v17);
      qword_26798E150 = (uint64_t)v17;
      __cxa_guard_release(&qword_26798E158);
    }
  }
  JUMPOUT(0x2167F4FCCLL);
}

void sub_2167F5160(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_26798E158);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::getFaceSetNames(uint64_t result, uint64_t *a2)
{
  BOOL v2 = *(void **)(result + 1120);
  int v3 = (void *)(result + 1128);
  if (v2 != (void *)(result + 1128))
  {
    unint64_t v5 = a2[1];
    do
    {
      uint64_t v6 = (long long *)(v2 + 4);
      if (v5 >= a2[2])
      {
        uint64_t result = sub_2167E9A44(a2, v6);
        unint64_t v5 = result;
      }
      else
      {
        uint64_t result = (uint64_t)sub_2167E99E4(a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      int64x2_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          int64x2_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          BOOL v2 = v8;
        }
        while (!v9);
      }
      BOOL v2 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

void sub_2167F5260(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F524CLL);
}

void sub_2167F5294(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcGeom::v12::OSubDSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  return a1 + 1128 != sub_21678C2D8(a1 + 1120, a2);
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::getFaceSet@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v9 = a2;
  int v4 = sub_2167E8C30((uint64_t **)(a1 + 1120), (const void **)a2, (uint64_t)&unk_21740A533, &v9);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 16);
  unint64_t v5 = (unsigned char *)(a3 + 16);
  if (*((char *)v4 + 95) < 0)
  {
    sub_216778F24(v5, (void *)v4[9], v4[10]);
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 9);
    *(void *)(a3 + 32) = v4[11];
    *(_OWORD *)unint64_t v5 = v6;
  }
  *(void *)a3 = &unk_26C7495D0;
  *(void *)(a3 + 40) = v4[12];
  uint64_t v7 = v4[13];
  *(void *)(a3 + 48) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a3 = &unk_26C749F60;
  return sub_2167E8158(a3 + 56, (uint64_t)(v4 + 14));
}

void sub_2167F53E0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::OObject::~OObject(v9);
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v12);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  sub_2167E996C((uint64_t)v9);
  JUMPOUT(0x2167F53CCLL);
}

void sub_2167F5438(_Unwind_Exception *a1)
{
}

std::string *Alembic::AbcGeom::v12::OSubDSchema::setUVSourceName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 1096), a2);
}

void sub_2167F5464(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2167F5E94(a1);

  operator delete(v1);
}

void sub_2167F548C(uint64_t a1)
{
  sub_2167A13A4(a1 + 248);
  sub_2167A13A4(a1 + 296);
  sub_2167A13A4(a1 + 344);
  sub_2167A13A4(a1 + 392);
  sub_2167A13A4(a1 + 440);
  sub_2167A13A4(a1 + 488);
  sub_2167A13A4(a1 + 536);
  sub_2167A13A4(a1 + 584);
  sub_2167A13A4(a1 + 632);
  sub_2167A13A4(a1 + 680);
  sub_2167A13A4(a1 + 728);
  sub_2167A13A4(a1 + 776);
  sub_2167A13A4(a1 + 824);
  sub_2167A13A4(a1 + 872);
  sub_2167C5E20(a1 + 920);
  sub_2167E8494(a1 + 1120, *(void **)(a1 + 1128));
  *(void *)(a1 + 1120) = a1 + 1128;
  *(void *)(a1 + 1136) = 0;
  *(void *)(a1 + 1128) = 0;

  sub_2167F56D4(a1);
}

uint64_t sub_2167F5554(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return *(unsigned char *)(a1 + 1144) != 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return *(unsigned char *)(a1 + 1144) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return *(unsigned char *)(a1 + 1144) != 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return *(unsigned char *)(a1 + 1144) != 0;
    }
    if (*(void *)(a1 + 280))
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(void *)(a1 + 312)) {
          return *(unsigned char *)(a1 + 1144) != 0;
        }
      }
      else if (*(unsigned char *)(a1 + 327))
      {
        return *(unsigned char *)(a1 + 1144) != 0;
      }
      if (*(void *)(a1 + 328))
      {
        if (*(char *)(a1 + 375) < 0)
        {
          if (*(void *)(a1 + 360)) {
            return *(unsigned char *)(a1 + 1144) != 0;
          }
        }
        else if (*(unsigned char *)(a1 + 375))
        {
          return *(unsigned char *)(a1 + 1144) != 0;
        }
        if (*(void *)(a1 + 376)) {
          return 1;
        }
      }
    }
  }
  return *(unsigned char *)(a1 + 1144) != 0;
}

void *sub_2167F55EC(void *a1)
{
  *a1 = &unk_26C74A150;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_2167F5658(void *a1)
{
  *a1 = &unk_26C74A150;
  BOOL v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  operator delete(a1);
}

void sub_2167F56D4(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_2167F5728(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_2167F5754(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A180;
  long long v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167F592C(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167F5830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2167F5850(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0) {
    sub_2167F4048(a1, a2, 0);
  }
}

void sub_2167F589C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F5888);
}

void sub_2167F590C(_Unwind_Exception *a1)
{
}

void sub_2167F592C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v23 = 0;
  v24[0] = 0;
  uint64_t v22 = (uint64_t *)&v23;
  int v25 = 2;
  sub_2167898D0((uint64_t *)v26, (const void ***)&v22);
  v26[3] = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = 1;
  sub_2167877AC((uint64_t)&v22, v23);
  sub_2167A030C(a4, (uint64_t)&v25);
  sub_2167A030C(a5, (uint64_t)&v25);
  sub_2167A030C(a6, (uint64_t)&v25);
  sub_2167A030C(a7, (uint64_t)&v25);
  *(_DWORD *)(a1 + 8) = v25;
  v24[33] = a1 + 8;
  v24[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v22);
    sub_216779180(v24, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v22, v26);
  if (HIDWORD(v29) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_SubD_v1");
    long long v30 = __p;
    uint64_t v13 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A533, (long long **)&v30);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (HIDWORD(v29) != 1)
    {
      sub_216779094(__p, "schemaBaseType");
      sub_216779094(&__str, "AbcGeom_GeomBase_v1");
      long long v30 = __p;
      long long v14 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_21740A533, (long long **)&v30);
      std::string::operator=((std::string *)(v14 + 7), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v15;
  if (v16)
  {
    sub_216784EC4(v16);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v22, v23);
  if (v27) {
    sub_216784EC4(v27);
  }
  sub_2167877AC((uint64_t)v26, v26[1]);
}

void sub_2167F5C24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F5B70);
}

void sub_2167F5D08(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2167F5D54(uint64_t a1)
{
  return a1;
}

void sub_2167F5D80(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2167F5DBC(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167A964C(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167F5E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2167F5E94(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A0C8;
  sub_2167E8494(a1 + 1120, *(void **)(a1 + 1128));
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1048));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 992));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 944));
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(void *)a1 = &unk_26C74A150;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::getTopologyVariance(Alembic::AbcGeom::v12::ISubDSchema *this)
{
  if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 296))
    && Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 344)))
  {
    return Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 248)) ^ 1;
  }
  else
  {
    return 2;
  }
}

void sub_2167F6034(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F6024);
}

void sub_2167F606C(_Unwind_Exception *a1)
{
}

unint64_t Alembic::AbcGeom::v12::ISubDSchema::getNumSamples(Alembic::AbcGeom::v12::ISubDSchema *this)
{
  BOOL v2 = (Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 8);
  if (Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcGeom::v12::ISubDSchema *)((char *)this + 8)))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    while (1)
    {
      uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v2);
      int v6 = *(_DWORD *)(PropertyHeader + 24);
      if (v6 == 1)
      {
        uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 6);
        uint64_t v15 = *((void *)this + 5);
        uint64_t v16 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v22 = 0;
        int v23 = 0;
        int v20 = 0;
        int v21 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v26, &v15, &v22, &v20);
        int v18 = 0;
        int v19 = 0;
        uint64_t v12 = (Alembic::Abc::v12::IScalarProperty *)Alembic::Abc::v12::IScalarProperty::IScalarProperty(v27, v26, PropertyHeader, &v18);
        unint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v12);
        if (v4 <= NumSamples) {
          unint64_t v4 = NumSamples;
        }
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v27);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v26);
        uint64_t v10 = v16;
        if (!v16) {
          goto LABEL_11;
        }
      }
      else
      {
        if (v6 != 2) {
          goto LABEL_11;
        }
        uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 6);
        uint64_t v24 = *((void *)this + 5);
        uint64_t v25 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v22 = 0;
        int v23 = 0;
        int v20 = 0;
        int v21 = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v26, &v24, &v22, &v20);
        int v18 = 0;
        int v19 = 0;
        v17[0] = 0;
        void v17[2] = 0;
        unint64_t v8 = (Alembic::Abc::v12::IArrayProperty *)Alembic::Abc::v12::IArrayProperty::IArrayProperty(v27, v26, PropertyHeader, &v18, v17);
        unint64_t v9 = Alembic::Abc::v12::IArrayProperty::getNumSamples(v8);
        if (v4 <= v9) {
          unint64_t v4 = v9;
        }
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v27);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v26);
        uint64_t v10 = v25;
        if (!v25) {
          goto LABEL_11;
        }
      }
      sub_216784EC4(v10);
LABEL_11:
      if (++v3 >= (unint64_t)Alembic::Abc::v12::ICompoundProperty::getNumProperties(v2)) {
        return v4;
      }
    }
  }
  return 0;
}

void sub_2167F6230(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v13 - 112));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  if (a3) {
    sub_216784EC4(a3);
  }
  _Unwind_Resume(a1);
}

void sub_2167F6268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v12 - 112));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  if (!a12) {
    JUMPOUT(0x2167F6260);
  }
  JUMPOUT(0x2167F625CLL);
}

void Alembic::AbcGeom::v12::ISubDSchema::get(uint64_t a1, void *a2, uint64_t a3)
{
  sub_2167BAA94(a1 + 248, a2, a3);
  sub_2167BAB10(a1 + 296, a2 + 4, a3);
  sub_2167BAB10(a1 + 344, a2 + 6, a3);
  if (*(char *)(a1 + 423) < 0)
  {
    if (*(void *)(a1 + 408)) {
      goto LABEL_3;
    }
LABEL_5:
    if (*(void *)(a1 + 424)) {
      int v6 = nullsub_4;
    }
    else {
      int v6 = 0;
    }
    goto LABEL_8;
  }
  if (!*(unsigned char *)(a1 + 423)) {
    goto LABEL_5;
  }
LABEL_3:
  int v6 = 0;
LABEL_8:
  uint64_t v7 = a2 + 8;
  if (v6) {
    Alembic::Abc::v12::IScalarProperty::get(a1 + 392, (uint64_t)v7, a3, 4);
  }
  else {
    _DWORD *v7 = 0;
  }
  if (*(char *)(a1 + 471) < 0)
  {
    if (*(void *)(a1 + 456)) {
      goto LABEL_13;
    }
LABEL_15:
    if (*(void *)(a1 + 472)) {
      unint64_t v8 = nullsub_4;
    }
    else {
      unint64_t v8 = 0;
    }
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a1 + 471)) {
    goto LABEL_15;
  }
LABEL_13:
  unint64_t v8 = 0;
LABEL_18:
  unint64_t v9 = (_DWORD *)a2 + 17;
  if (v8) {
    Alembic::Abc::v12::IScalarProperty::get(a1 + 440, (uint64_t)v9, a3, 4);
  }
  else {
    *unint64_t v9 = 0;
  }
  if (*(char *)(a1 + 519) < 0)
  {
    if (*(void *)(a1 + 504)) {
      goto LABEL_23;
    }
LABEL_25:
    if (*(void *)(a1 + 520)) {
      uint64_t v10 = nullsub_4;
    }
    else {
      uint64_t v10 = 0;
    }
    goto LABEL_28;
  }
  if (!*(unsigned char *)(a1 + 519)) {
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v10 = 0;
LABEL_28:
  uint64_t v11 = a2 + 9;
  if (v10) {
    Alembic::Abc::v12::IScalarProperty::get(a1 + 488, (uint64_t)v11, a3, 4);
  }
  else {
    _DWORD *v11 = 0;
  }
  Alembic::Abc::v12::IScalarProperty::get(a1 + 56, (uint64_t)(a2 + 25), a3, 48);
  if (*(char *)(a1 + 567) < 0)
  {
    if (*(void *)(a1 + 552)) {
      goto LABEL_33;
    }
  }
  else if (*(unsigned char *)(a1 + 567))
  {
LABEL_33:
    uint64_t v12 = 0;
    goto LABEL_38;
  }
  if (*(void *)(a1 + 568)) {
    uint64_t v12 = nullsub_5;
  }
  else {
    uint64_t v12 = 0;
  }
LABEL_38:
  if (v12) {
    sub_2167BAB10(a1 + 536, a2 + 10, a3);
  }
  if (*(char *)(a1 + 615) < 0)
  {
    if (*(void *)(a1 + 600)) {
      goto LABEL_42;
    }
  }
  else if (*(unsigned char *)(a1 + 615))
  {
LABEL_42:
    uint64_t v13 = 0;
    goto LABEL_47;
  }
  if (*(void *)(a1 + 616)) {
    uint64_t v13 = nullsub_5;
  }
  else {
    uint64_t v13 = 0;
  }
LABEL_47:
  if (v13) {
    sub_2167BAB10(a1 + 584, a2 + 12, a3);
  }
  if (*(char *)(a1 + 663) < 0)
  {
    if (*(void *)(a1 + 648)) {
      goto LABEL_51;
    }
  }
  else if (*(unsigned char *)(a1 + 663))
  {
LABEL_51:
    long long v14 = 0;
    goto LABEL_56;
  }
  if (*(void *)(a1 + 664)) {
    long long v14 = nullsub_5;
  }
  else {
    long long v14 = 0;
  }
LABEL_56:
  if (v14) {
    sub_2167BAB8C(a1 + 632, a2 + 14, a3);
  }
  if (*(char *)(a1 + 711) < 0)
  {
    if (*(void *)(a1 + 696)) {
      goto LABEL_60;
    }
  }
  else if (*(unsigned char *)(a1 + 711))
  {
LABEL_60:
    uint64_t v15 = 0;
    goto LABEL_65;
  }
  if (*(void *)(a1 + 712)) {
    uint64_t v15 = nullsub_5;
  }
  else {
    uint64_t v15 = 0;
  }
LABEL_65:
  if (v15) {
    sub_2167BAB10(a1 + 680, a2 + 16, a3);
  }
  if (*(char *)(a1 + 759) < 0)
  {
    if (*(void *)(a1 + 744)) {
      goto LABEL_69;
    }
  }
  else if (*(unsigned char *)(a1 + 759))
  {
LABEL_69:
    uint64_t v16 = 0;
    goto LABEL_74;
  }
  if (*(void *)(a1 + 760)) {
    uint64_t v16 = nullsub_5;
  }
  else {
    uint64_t v16 = 0;
  }
LABEL_74:
  if (v16) {
    sub_2167BAB8C(a1 + 728, a2 + 18, a3);
  }
  if (*(char *)(a1 + 807) < 0)
  {
    if (*(void *)(a1 + 792)) {
      goto LABEL_78;
    }
  }
  else if (*(unsigned char *)(a1 + 807))
  {
LABEL_78:
    uint64_t v17 = 0;
    goto LABEL_83;
  }
  if (*(void *)(a1 + 808)) {
    uint64_t v17 = nullsub_5;
  }
  else {
    uint64_t v17 = 0;
  }
LABEL_83:
  if (v17) {
    sub_2167BAB10(a1 + 776, a2 + 20, a3);
  }
  if (*(char *)(a1 + 855) < 0)
  {
    if (*(void *)(a1 + 840)) {
      goto LABEL_87;
    }
LABEL_89:
    if (*(void *)(a1 + 856)) {
      int v18 = nullsub_4;
    }
    else {
      int v18 = 0;
    }
    goto LABEL_92;
  }
  if (!*(unsigned char *)(a1 + 855)) {
    goto LABEL_89;
  }
LABEL_87:
  int v18 = 0;
LABEL_92:
  if (v18) {
    Alembic::Abc::v12::IScalarProperty::get(a1 + 824, (uint64_t)(a2 + 22), a3, 24);
  }
  else {
    MEMORY[0x21D4477E0](a2 + 22, "catmull-clark");
  }
  if (*(char *)(a1 + 1055) < 0)
  {
    if (*(void *)(a1 + 1040)) {
      goto LABEL_97;
    }
  }
  else if (*(unsigned char *)(a1 + 1055))
  {
LABEL_97:
    int v19 = 0;
    goto LABEL_102;
  }
  if (*(void *)(a1 + 1056)) {
    int v19 = nullsub_5;
  }
  else {
    int v19 = 0;
  }
LABEL_102:
  if (v19)
  {
    int v20 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 1024);
    if (Alembic::Abc::v12::IArrayProperty::getNumSamples(v20)) {
      sub_2167BAC84((uint64_t)v20, a2 + 2, a3);
    }
  }
}

void sub_2167F6760(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F674CLL);
}

void sub_2167F6794(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::operator=(uint64_t a1, uint64_t a2)
{
  sub_2167E7F50(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a2 + 1024);
  std::string::operator=((std::string *)(a1 + 1032), (const std::string *)(a2 + 1032));
  uint64_t v7 = *(void *)(a2 + 1056);
  uint64_t v8 = *(void *)(a2 + 1064);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1056) = v7;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 1064);
  *(void *)(a1 + 1064) = v8;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v11 = *(void *)(a2 + 328);
  uint64_t v10 = *(void *)(a2 + 336);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v11;
  *(void *)(a1 + 336) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v14 = *(void *)(a2 + 376);
  uint64_t v13 = *(void *)(a2 + 384);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v14;
  *(void *)(a1 + 384) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v17 = *(void *)(a2 + 424);
  uint64_t v16 = *(void *)(a2 + 432);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  int v18 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v17;
  *(void *)(a1 + 432) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  uint64_t v20 = *(void *)(a2 + 472);
  uint64_t v19 = *(void *)(a2 + 480);
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  int v21 = *(std::__shared_weak_count **)(a1 + 480);
  *(void *)(a1 + 472) = v20;
  *(void *)(a1 + 480) = v19;
  if (v21) {
    sub_216784EC4(v21);
  }
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  uint64_t v22 = *(void *)(a2 + 520);
  uint64_t v23 = *(void *)(a2 + 528);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 520) = v22;
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 528);
  *(void *)(a1 + 528) = v23;
  if (v24) {
    sub_216784EC4(v24);
  }
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  uint64_t v25 = *(void *)(a2 + 568);
  uint64_t v26 = *(void *)(a2 + 576);
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 568) = v25;
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 576);
  *(void *)(a1 + 576) = v26;
  if (v27) {
    sub_216784EC4(v27);
  }
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  uint64_t v28 = *(void *)(a2 + 616);
  uint64_t v29 = *(void *)(a2 + 624);
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 616) = v28;
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 624);
  *(void *)(a1 + 624) = v29;
  if (v30) {
    sub_216784EC4(v30);
  }
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 640));
  uint64_t v31 = *(void *)(a2 + 664);
  uint64_t v32 = *(void *)(a2 + 672);
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 664) = v31;
  uint64_t v33 = *(std::__shared_weak_count **)(a1 + 672);
  *(void *)(a1 + 672) = v32;
  if (v33) {
    sub_216784EC4(v33);
  }
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  std::string::operator=((std::string *)(a1 + 688), (const std::string *)(a2 + 688));
  uint64_t v34 = *(void *)(a2 + 712);
  uint64_t v35 = *(void *)(a2 + 720);
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 712) = v34;
  uint64_t v36 = *(std::__shared_weak_count **)(a1 + 720);
  *(void *)(a1 + 720) = v35;
  if (v36) {
    sub_216784EC4(v36);
  }
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 736));
  uint64_t v37 = *(void *)(a2 + 760);
  uint64_t v38 = *(void *)(a2 + 768);
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 760) = v37;
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 768);
  *(void *)(a1 + 768) = v38;
  if (v39) {
    sub_216784EC4(v39);
  }
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  uint64_t v40 = *(void *)(a2 + 808);
  uint64_t v41 = *(void *)(a2 + 816);
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 808) = v40;
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 816);
  *(void *)(a1 + 816) = v41;
  if (v42) {
    sub_216784EC4(v42);
  }
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 832));
  uint64_t v43 = *(void *)(a2 + 856);
  uint64_t v44 = *(void *)(a2 + 864);
  if (v44) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 856) = v43;
  uint64_t v45 = *(std::__shared_weak_count **)(a1 + 864);
  *(void *)(a1 + 864) = v44;
  if (v45) {
    sub_216784EC4(v45);
  }
  sub_2167BA690(a1 + 872, a2 + 872);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v47 = *(void *)(a2 + 424);
  uint64_t v46 = *(void *)(a2 + 432);
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  int v48 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v47;
  *(void *)(a1 + 432) = v46;
  if (v48) {
    sub_216784EC4(v48);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  *(unsigned char *)(a1 + 1072) = 0;
  sub_2167EBA80(a1 + 1080, *(void **)(a1 + 1088));
  *(void *)(a1 + 1080) = a1 + 1088;
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1088) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1104));
  return a1;
}

void Alembic::AbcGeom::v12::ISubDSchema::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  uint64_t v126 = a1 + 8;
  uint64_t v127 = "ISubDSchema::init()";
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v79 = &v80;
  int v121 = 2;
  sub_2167898D0(v122, (const void ***)&v79);
  v122[3] = 0;
  uint64_t v123 = 0;
  int v124 = 0;
  uint64_t v125 = 1;
  sub_2167877AC((uint64_t)&v79, v80.__r_.__value_.__l.__data_);
  sub_2167A030C(a2, (uint64_t)&v121);
  sub_2167A030C(a3, (uint64_t)&v121);
  uint64_t v117 = v8;
  uint64_t v118 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v117, &v115, &v113);
  sub_216779094(__p, "P");
  v110[0] = 5;
  v110[2] = 1;
  v109[0] = 1;
  v109[2] = v121;
  sub_2167BAD00((uint64_t)&v79, (int *)v119, (uint64_t)__p, v110, v109);
  *(_DWORD *)(a1 + 248) = v79;
  std::string::operator=((std::string *)(a1 + 256), &v80);
  uint64_t v10 = v81;
  uint64_t v9 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v10;
  *(void *)(a1 + 288) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v118) {
    sub_216784EC4(v118);
  }
  uint64_t v107 = v8;
  int v108 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v107, &v115, &v113);
  sub_216779094(__p, ".faceIndices");
  sub_2167BB37C((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 296) = v79;
  std::string::operator=((std::string *)(a1 + 304), &v80);
  uint64_t v13 = v81;
  uint64_t v12 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v13;
  *(void *)(a1 + 336) = v12;
  if (v14) {
    sub_216784EC4(v14);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v108) {
    sub_216784EC4(v108);
  }
  uint64_t v105 = v8;
  uint64_t v106 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v105, &v115, &v113);
  sub_216779094(__p, ".faceCounts");
  sub_2167BB37C((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 344) = v79;
  std::string::operator=((std::string *)(a1 + 352), &v80);
  uint64_t v16 = v81;
  uint64_t v15 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v16;
  *(void *)(a1 + 384) = v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v106) {
    sub_216784EC4(v106);
  }
  sub_216779094(&v79, ".faceVaryingInterpolateBoundary");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v19 = PropertyHeader;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v19) {
      goto LABEL_47;
    }
  }
  else if (!PropertyHeader)
  {
    goto LABEL_47;
  }
  uint64_t v103 = v8;
  uint64_t v104 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v103, &v115, &v113);
  sub_216779094(__p, ".faceVaryingInterpolateBoundary");
  sub_2167DE4D4((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 392) = v79;
  std::string::operator=((std::string *)(a1 + 400), &v80);
  uint64_t v21 = v81;
  uint64_t v20 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v21;
  *(void *)(a1 + 432) = v20;
  if (v22) {
    sub_216784EC4(v22);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v104) {
    sub_216784EC4(v104);
  }
LABEL_47:
  sub_216779094(&v79, ".faceVaryingPropagateCorners");
  uint64_t v23 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v24 = v23;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v24) {
      goto LABEL_61;
    }
  }
  else if (!v23)
  {
    goto LABEL_61;
  }
  uint64_t v101 = v8;
  int v102 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v101, &v115, &v113);
  sub_216779094(__p, ".faceVaryingPropagateCorners");
  sub_2167DE4D4((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 440) = v79;
  std::string::operator=((std::string *)(a1 + 448), &v80);
  uint64_t v26 = v81;
  uint64_t v25 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 480);
  *(void *)(a1 + 472) = v26;
  *(void *)(a1 + 480) = v25;
  if (v27) {
    sub_216784EC4(v27);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v102) {
    sub_216784EC4(v102);
  }
LABEL_61:
  sub_216779094(&v79, ".interpolateBoundary");
  uint64_t v28 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v29 = v28;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v29) {
      goto LABEL_75;
    }
  }
  else if (!v28)
  {
    goto LABEL_75;
  }
  uint64_t v99 = v8;
  uint64_t v100 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v99, &v115, &v113);
  sub_216779094(__p, ".interpolateBoundary");
  sub_2167DE4D4((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 488) = v79;
  std::string::operator=((std::string *)(a1 + 496), &v80);
  uint64_t v31 = v81;
  uint64_t v30 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 520) = v31;
  uint64_t v32 = *(std::__shared_weak_count **)(a1 + 528);
  *(void *)(a1 + 528) = v30;
  if (v32) {
    sub_216784EC4(v32);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v100) {
    sub_216784EC4(v100);
  }
LABEL_75:
  sub_216779094(&v79, ".creaseIndices");
  uint64_t v33 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v34 = v33;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v34) {
      goto LABEL_89;
    }
  }
  else if (!v33)
  {
    goto LABEL_89;
  }
  uint64_t v97 = v8;
  long long v98 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v97, &v115, &v113);
  sub_216779094(__p, ".creaseIndices");
  sub_2167BB37C((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 536) = v79;
  std::string::operator=((std::string *)(a1 + 544), &v80);
  uint64_t v36 = v81;
  uint64_t v35 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 568) = v36;
  uint64_t v37 = *(std::__shared_weak_count **)(a1 + 576);
  *(void *)(a1 + 576) = v35;
  if (v37) {
    sub_216784EC4(v37);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v98) {
    sub_216784EC4(v98);
  }
LABEL_89:
  sub_216779094(&v79, ".creaseLengths");
  uint64_t v38 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v39 = v38;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v39) {
      goto LABEL_103;
    }
  }
  else if (!v38)
  {
    goto LABEL_103;
  }
  uint64_t v95 = v8;
  uint64_t v96 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v95, &v115, &v113);
  sub_216779094(__p, ".creaseLengths");
  sub_2167BB37C((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 584) = v79;
  std::string::operator=((std::string *)(a1 + 592), &v80);
  uint64_t v41 = v81;
  uint64_t v40 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 616) = v41;
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 624);
  *(void *)(a1 + 624) = v40;
  if (v42) {
    sub_216784EC4(v42);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v96) {
    sub_216784EC4(v96);
  }
LABEL_103:
  sub_216779094(&v79, ".creaseSharpnesses");
  uint64_t v43 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v44 = v43;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v44) {
      goto LABEL_117;
    }
  }
  else if (!v43)
  {
    goto LABEL_117;
  }
  uint64_t v93 = v8;
  int v94 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v93, &v115, &v113);
  sub_216779094(__p, ".creaseSharpnesses");
  sub_2167BB9A0((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 632) = v79;
  std::string::operator=((std::string *)(a1 + 640), &v80);
  uint64_t v46 = v81;
  uint64_t v45 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 664) = v46;
  uint64_t v47 = *(std::__shared_weak_count **)(a1 + 672);
  *(void *)(a1 + 672) = v45;
  if (v47) {
    sub_216784EC4(v47);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v94) {
    sub_216784EC4(v94);
  }
LABEL_117:
  sub_216779094(&v79, ".cornerIndices");
  uint64_t v48 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v49 = v48;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v49) {
      goto LABEL_131;
    }
  }
  else if (!v48)
  {
    goto LABEL_131;
  }
  uint64_t v91 = v8;
  char v92 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v91, &v115, &v113);
  sub_216779094(__p, ".cornerIndices");
  sub_2167BB37C((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 680) = v79;
  std::string::operator=((std::string *)(a1 + 688), &v80);
  uint64_t v51 = v81;
  uint64_t v50 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 712) = v51;
  uint64_t v52 = *(std::__shared_weak_count **)(a1 + 720);
  *(void *)(a1 + 720) = v50;
  if (v52) {
    sub_216784EC4(v52);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v92) {
    sub_216784EC4(v92);
  }
LABEL_131:
  sub_216779094(&v79, ".cornerSharpnesses");
  uint64_t v53 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v54 = v53;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v54) {
      goto LABEL_145;
    }
  }
  else if (!v53)
  {
    goto LABEL_145;
  }
  uint64_t v89 = v8;
  uint64_t v90 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v89, &v115, &v113);
  sub_216779094(__p, ".cornerSharpnesses");
  sub_2167BB9A0((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 728) = v79;
  std::string::operator=((std::string *)(a1 + 736), &v80);
  uint64_t v56 = v81;
  uint64_t v55 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 760) = v56;
  long long v57 = *(std::__shared_weak_count **)(a1 + 768);
  *(void *)(a1 + 768) = v55;
  if (v57) {
    sub_216784EC4(v57);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v90) {
    sub_216784EC4(v90);
  }
LABEL_145:
  sub_216779094(&v79, ".holes");
  uint64_t v58 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v59 = v58;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v59) {
      goto LABEL_159;
    }
  }
  else if (!v58)
  {
    goto LABEL_159;
  }
  uint64_t v87 = v8;
  uint64_t v88 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v87, &v115, &v113);
  sub_216779094(__p, ".holes");
  sub_2167BB37C((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 776) = v79;
  std::string::operator=((std::string *)(a1 + 784), &v80);
  uint64_t v61 = v81;
  uint64_t v60 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 808) = v61;
  uint64_t v62 = *(std::__shared_weak_count **)(a1 + 816);
  *(void *)(a1 + 816) = v60;
  if (v62) {
    sub_216784EC4(v62);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v88) {
    sub_216784EC4(v88);
  }
LABEL_159:
  sub_216779094(&v79, ".scheme");
  uint64_t v63 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v64 = v63;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v64) {
      goto LABEL_173;
    }
  }
  else if (!v63)
  {
    goto LABEL_173;
  }
  uint64_t v85 = v8;
  int v86 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v85, &v115, &v113);
  sub_216779094(__p, ".scheme");
  sub_2167A4730((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 824) = v79;
  std::string::operator=((std::string *)(a1 + 832), &v80);
  uint64_t v66 = v81;
  uint64_t v65 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 856) = v66;
  int v67 = *(std::__shared_weak_count **)(a1 + 864);
  *(void *)(a1 + 864) = v65;
  if (v67) {
    sub_216784EC4(v67);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v86) {
    sub_216784EC4(v86);
  }
LABEL_173:
  sub_216779094(&v79, "uv");
  uint64_t v68 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v69 = v68;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v69) {
      goto LABEL_183;
    }
  }
  else if (!v68)
  {
    goto LABEL_183;
  }
  uint64_t v77 = v8;
  int v78 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v119, "uv");
  sub_2167BBFC4((uint64_t)&v79, &v77, (uint64_t)v119, a2, a3);
  sub_2167BA690(a1 + 872, (uint64_t)&v79);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v84);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v83);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v120 < 0) {
    operator delete(v119[0]);
  }
  if (v78) {
    sub_216784EC4(v78);
  }
LABEL_183:
  sub_216779094(&v79, ".velocities");
  uint64_t v70 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v71 = v70;
  if (v80.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v79);
    if (!v71) {
      goto LABEL_197;
    }
  }
  else if (!v70)
  {
    goto LABEL_197;
  }
  uint64_t v75 = v8;
  uint64_t v76 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v115 = 0;
  int v116 = 0;
  int v113 = 0;
  int v114 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v119, &v75, &v115, &v113);
  sub_216779094(__p, ".velocities");
  sub_2167BE97C((uint64_t)&v79, (int *)v119, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 1024) = v79;
  std::string::operator=((std::string *)(a1 + 1032), &v80);
  uint64_t v73 = v81;
  uint64_t v72 = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1056) = v73;
  uint64_t v74 = *(std::__shared_weak_count **)(a1 + 1064);
  *(void *)(a1 + 1064) = v72;
  if (v74) {
    sub_216784EC4(v74);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v119);
  if (v76) {
    sub_216784EC4(v76);
  }
LABEL_197:
  *(unsigned char *)(a1 + 1072) = 0;
  if (v123) {
    sub_216784EC4(v123);
  }
  sub_2167877AC((uint64_t)v122, (void *)v122[1]);
  if (v7) {
    sub_216784EC4(v7);
  }
}

void sub_2167F7B44(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a13);
  if (a65 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v67 - 208));
  if (a10) {
    sub_216784EC4(a10);
  }
  sub_2167A03C4(v67 - 160);
  if (v66) {
    sub_216784EC4(v66);
  }
  uint64_t v70 = __cxa_begin_catch(a1);
  uint64_t v71 = *(void (**)(uint64_t))(*(void *)v65 + 16);
  if (a2 == 2)
  {
    uint64_t v72 = (uint64_t)v70;
    v71(v65);
    sub_21679FA64(v67 - 96, v72);
  }
  else
  {
    v71(v65);
    sub_21679F9F4(v67 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F7B24);
}

void sub_2167F8178(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::getFaceSetNames(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 1104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames((Alembic::AbcGeom::v12::ISubDSchema *)a1);
  uint64_t v5 = *(void **)(a1 + 1080);
  uint64_t v6 = (void *)(a1 + 1088);
  if (v5 != (void *)(a1 + 1088))
  {
    unint64_t v7 = a2[1];
    do
    {
      uint64_t v8 = (long long *)(v5 + 4);
      if (v7 >= a2[2])
      {
        unint64_t v7 = sub_2167E9A44(a2, v8);
      }
      else
      {
        sub_2167E99E4(a2, v8);
        v7 += 24;
      }
      a2[1] = v7;
      uint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v11);
      }
      uint64_t v5 = v10;
    }
    while (v10 != v6);
  }
  return pthread_mutex_unlock(v4);
}

void sub_2167F8280(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(v9);
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v12);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F8264);
}

void sub_2167F82D4(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames(Alembic::AbcGeom::v12::ISubDSchema *this)
{
  BOOL v2 = (int *)((char *)this + 8);
  uint64_t v17 = v2;
  int v18 = "ISubDSchema::loadFaceSetNames()";
  if (!*((unsigned char *)this + 1072))
  {
    sub_2167EA9AC(v2, (uint64_t)v16);
    unint64_t v7 = this;
    uint64_t NumChildren = Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)v16);
    if (NumChildren)
    {
      for (uint64_t i = 0; i != NumChildren; ++i)
      {
        ChildHeader = (long long *)Alembic::Abc::v12::IObject::getChildHeader((Alembic::Abc::v12::IObject *)v16);
        if (sub_2167EBBC4((uint64_t)(ChildHeader + 3), 0))
        {
          sub_2167EC1FC((uint64_t)v8);
          uint64_t v19 = ChildHeader;
          uint64_t v6 = sub_2167EC018((uint64_t **)v7 + 135, (const void **)ChildHeader, (uint64_t)&unk_21740A534, &v19);
          sub_2167EAB00((uint64_t)(v6 + 7), (uint64_t)v8);
          v8[0] = &unk_26C749FB8;
          uint64_t v9 = &unk_26C749FF0;
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v15);
          uint64_t v9 = &unk_26C74A078;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v14);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v13);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v12);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v11);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v10);
          Alembic::Abc::v12::IObject::~IObject(v8);
        }
      }
    }
    *((unsigned char *)v7 + 1072) = 1;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v16);
  }
}

void sub_2167F84A8(void *a1, int a2)
{
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)(v2 - 216));
  uint64_t v5 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v2 - 120, (uint64_t)v5);
  }
  else {
    sub_21679F9F4(v2 - 120, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F8488);
}

void sub_2167F8514(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcGeom::v12::ISubDSchema::hasFaceSet(uint64_t a1, const void **a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 1104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  if (!*(unsigned char *)(a1 + 1072)) {
    Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames((Alembic::AbcGeom::v12::ISubDSchema *)a1);
  }
  uint64_t v5 = sub_21678C2D8(a1 + 1080, a2);
  pthread_mutex_unlock(v4);
  return a1 + 1088 != v5;
}

void sub_2167F85B8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(v9);
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v12);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F85A4);
}

void sub_2167F8618(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::ISubDSchema::getFaceSet@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (int *)(a1 + 8);
  uint64_t v27 = a1 + 8;
  uint64_t v28 = "ISubDSchema::getFaceSet()";
  unint64_t v7 = (pthread_mutex_t *)(a1 + 1104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1104));
  if (!*(unsigned char *)(a1 + 1072)) {
    Alembic::AbcGeom::v12::ISubDSchema::loadFaceSetNames((Alembic::AbcGeom::v12::ISubDSchema *)a1);
  }
  if (a1 + 1088 == sub_21678C2D8(a1 + 1080, a2))
  {
    sub_216778A5C((uint64_t)v15);
    sub_216779180(v16, (uint64_t)"The requested FaceSet name can't be found in SubD.", 50);
    std::stringbuf::str();
    sub_216778E70(v24, &v25);
    if (v26 < 0) {
      operator delete((void *)v25);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v13 = sub_216779038(exception, (uint64_t)v24);
    __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  v15[0] = a2;
  uint64_t v8 = sub_2167EC018((uint64_t **)(a1 + 1080), a2, (uint64_t)&unk_21740A534, (long long **)v15);
  if (!sub_2167EC41C((uint64_t)(v8 + 7)))
  {
    sub_2167EA9AC(v6, (uint64_t)v24);
    LODWORD(v25) = 0;
    DWORD2(v25) = 0;
    v14[0] = 0;
    v14[2] = 0;
    sub_2167EC44C((uint64_t)v15, (uint64_t)v24, (uint64_t)a2, &v25, v14);
    uint64_t v29 = a2;
    uint64_t v9 = sub_2167EC018((uint64_t **)(a1 + 1080), a2, (uint64_t)&unk_21740A534, (long long **)&v29);
    sub_2167EAB00((uint64_t)(v9 + 7), (uint64_t)v15);
    v15[0] = &unk_26C749FB8;
    uint64_t v17 = &unk_26C749FF0;
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
    uint64_t v17 = &unk_26C74A078;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v22);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v21);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v20);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v19);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v18);
    Alembic::Abc::v12::IObject::~IObject(v15);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v24);
  }
  v15[0] = a2;
  uint64_t v10 = sub_2167EC018((uint64_t **)(a1 + 1080), a2, (uint64_t)&unk_21740A534, (long long **)v15);
  sub_2167A2320((uint64_t)a3, (uint64_t)(v10 + 7));
  *a3 = &unk_26C749FB8;
  sub_2167EB704((uint64_t)(a3 + 12), (uint64_t)(v10 + 19));
  return pthread_mutex_unlock(v7);
}

void sub_2167F88CC(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216779148((std::exception *)(v6 - 216));
  sub_216778D38((uint64_t)va);
  pthread_mutex_unlock(v5);
  uint64_t v9 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v6 - 96, (uint64_t)v9);
  }
  else {
    sub_21679F9F4(v6 - 96, 0);
  }
  __cxa_end_catch();
  sub_2167EC1FC(v4);
  JUMPOUT(0x2167F8834);
}

void sub_2167F899C(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::CreateVisibilityProperty(Alembic::Abc::v12::OObject *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v10 = 2;
  uint64_t v6 = sub_216779094(v11, "");
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (*a2)
  {
    Alembic::Abc::v12::OObject::getArchive(a1, (uint64_t)v9);
    unint64_t v7 = (Alembic::Abc::v12::OObject *)Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v9);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v9);
    Alembic::AbcGeom::v12::CreateVisibilityProperty(a1, v7, a3);
  }
  else
  {
    *(_DWORD *)a3 = v10;
    if (v12 < 0)
    {
      sub_216778F24((unsigned char *)(a3 + 8), v11[0], (unint64_t)v11[1]);
      uint64_t v8 = v14;
      *(void *)(a3 + 32) = v13;
      *(void *)(a3 + 40) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v6;
      *(void *)(a3 + 24) = v6[2];
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v10);
}

void sub_2167F8AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::CreateVisibilityProperty(Alembic::AbcGeom::v12 *this@<X0>, Alembic::Abc::v12::OObject *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  Alembic::Abc::v12::OObject::getProperties(this, (uint64_t)v10);
  sub_216779094(__p, "visible");
  v7[0] = 2;
  v7[2] = v3;
  v6[0] = 0;
  v6[2] = 0;
  v5[0] = 0;
  v5[2] = 0;
  sub_2167F9140(a3, v10, (uint64_t)__p, v7, v6, v5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v10);
}

void sub_2167F8B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v21 - 64));
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::GetVisibilityProperty(Alembic::AbcGeom::v12 *this@<X0>, uint64_t a2@<X8>)
{
  Alembic::Abc::v12::IObject::getProperties(this, (uint64_t)v10);
  sub_216779094(__p, "visible");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v10);
  uint64_t v5 = PropertyHeader;
  if ((v9 & 0x80000000) == 0)
  {
    if (PropertyHeader) {
      goto LABEL_3;
    }
LABEL_6:
    *(_DWORD *)a2 = 2;
    sub_216779094((void *)(a2 + 8), "");
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  sub_216779094(__p, "visible");
  v7[0] = 0;
  v7[2] = 0;
  v6[0] = 0;
  v6[2] = 0;
  sub_2167F9620(a2, v10, (uint64_t)__p, v7, v6);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
LABEL_7:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v10);
}

void sub_2167F8C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
}

uint64_t Alembic::AbcGeom::v12::GetVisibility(Alembic::AbcGeom::v12 *a1, uint64_t a2)
{
  int v13 = 2;
  sub_216779094(&v14, "");
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  Alembic::AbcGeom::v12::GetVisibilityProperty(a1, (uint64_t)&v9);
  int v13 = v9;
  std::string::operator=(&v14, &v10);
  uint64_t v5 = v11;
  uint64_t v4 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v16;
  uint64_t v15 = v5;
  uint64_t v16 = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v9);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  if (*((unsigned char *)&v14.__r_.__value_.__s + 23)) {
    goto LABEL_11;
  }
LABEL_9:
  if (!v15) {
    goto LABEL_11;
  }
  LOBYTE(v9) = 0;
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)&v13, (uint64_t)&v9, a2, 1);
  uint64_t v7 = (char)v9;
LABEL_12:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v13);
  return v7;
}

void sub_2167F8DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::IsAncestorInvisible(Alembic::AbcGeom::v12 *this, uint64_t a2)
{
  if (*((char *)this + 39) < 0)
  {
    if (*((void *)this + 3)) {
      goto LABEL_48;
    }
  }
  else if (*((unsigned char *)this + 39))
  {
LABEL_48:
    sub_216778A5C((uint64_t)&v33);
    sub_216779180(&v33.__r_.__value_.__r.__words[2], (uint64_t)"IsAncestorInvisible (): object passed in isn't valid.", 53);
    std::stringbuf::str();
    sub_216778E70(&v20, &__p);
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v19 = sub_216779038(exception, (uint64_t)&v20);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  if (!*((void *)this + 5)) {
    goto LABEL_48;
  }
  Alembic::AbcGeom::v12::GetVisibilityProperty(this, (uint64_t)&__p);
  if (v30 < 0)
  {
    if (v29) {
      goto LABEL_8;
    }
  }
  else if (v30)
  {
LABEL_8:
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  if (v31) {
    uint64_t v4 = nullsub_4;
  }
  else {
    uint64_t v4 = 0;
  }
LABEL_13:
  if (v4)
  {
    v33.__r_.__value_.__s.__data_[0] = 0;
    Alembic::Abc::v12::IScalarProperty::get((uint64_t)&__p, (uint64_t)&v33, a2, 1);
    int v5 = v33.__r_.__value_.__s.__data_[0];
  }
  else
  {
    int v5 = -1;
  }
  sub_2167A2320((uint64_t)&v33, (uint64_t)this);
  while (1)
  {
    if (v5 != -1)
    {
      BOOL v16 = v5 == 0;
      goto LABEL_47;
    }
    Alembic::Abc::v12::IObject::getParent(&v33, (uint64_t)&v20);
    LODWORD(v33.__r_.__value_.__r.__words[1]) = v21.__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)&v33.__r_.__value_.__r.__words[2], (const std::string *)&v21.__r_.__value_.__r.__words[1]);
    uint64_t v7 = v23;
    uint64_t v6 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v37;
    uint64_t v36 = v7;
    uint64_t v37 = v6;
    if (v8) {
      sub_216784EC4(v8);
    }
    uint64_t v10 = v25;
    int v9 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v39;
    uint64_t v38 = v10;
    uint64_t v39 = v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    std::string::operator=(v40, &v27);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v20);
    if (v35 < 0)
    {
      if (v34) {
        break;
      }
    }
    else if (v35)
    {
      break;
    }
    if (!v36) {
      break;
    }
    Alembic::AbcGeom::v12::GetVisibilityProperty((Alembic::AbcGeom::v12 *)&v33, (uint64_t)&v20);
    LODWORD(__p) = v20;
    std::string::operator=((std::string *)((char *)&__p + 8), &v21);
    uint64_t v13 = v22;
    char v12 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v14 = v32;
    uint64_t v31 = v13;
    uint64_t v32 = v12;
    if (v14) {
      sub_216784EC4(v14);
    }
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v20);
    if (v30 < 0)
    {
      int v5 = -1;
      if (!v29)
      {
LABEL_39:
        if (v31) {
          uint64_t v15 = nullsub_4;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v15 && v31)
        {
          LOBYTE(v20) = 0;
          Alembic::Abc::v12::IScalarProperty::get((uint64_t)&__p, (uint64_t)&v20, a2, 1);
          int v5 = (char)v20;
        }
      }
    }
    else
    {
      int v5 = -1;
      if (!v30) {
        goto LABEL_39;
      }
    }
  }
  BOOL v16 = 0;
LABEL_47:
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v33);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&__p);
  return v16;
}

void sub_2167F90CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_2167F9140(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  char v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  void v15[2] = v13;
  sub_2167F921C(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2167F91FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v12);
  _Unwind_Resume(a1);
}

void sub_2167F921C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v24 = 0;
  v25[0] = 0;
  uint64_t v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  v25[33] = a1;
  v25[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  int v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000002;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 96))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2167F94F8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F9444);
}

void sub_2167F95D4(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2167F9620(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v10 = *a2;
  *((void *)&v45 + 1) = 0;
  v46[0] = 0;
  *(void *)&long long v45 = (char *)&v45 + 8;
  int v47 = v10;
  sub_2167898D0(v48, (const void ***)&v45);
  v48[3] = 0;
  uint64_t v49 = 0;
  int v50 = 0;
  uint64_t v51 = 1;
  sub_2167877AC((uint64_t)&v45, *((void **)&v45 + 1));
  sub_2167A030C(a4, (uint64_t)&v47);
  sub_2167A030C(a5, (uint64_t)&v47);
  *(_DWORD *)a1 = v47;
  v46[34] = a1;
  v46[35] = "ITypedScalarProperty::ITypedScalarProperty()";
  uint64_t v12 = *((void *)a2 + 4);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v31 = sub_216779180(v46, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v31, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string v33 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v33, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  uint64_t v14 = v13;
  if (!v13)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v34 = sub_216779180(v46, (uint64_t)"Nonexistent scalar property: ", 29);
    int v35 = *(char *)(a3 + 23);
    if (v35 >= 0) {
      uint64_t v36 = a3;
    }
    else {
      uint64_t v36 = *(void *)a3;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v37 = *(void *)(a3 + 8);
    }
    sub_216779180(v34, v36, v37);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v38 = __cxa_allocate_exception(0x20uLL);
    uint64_t v39 = sub_216779038(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  BOOL v16 = *(_DWORD *)(v13 + 56) == 2 && *(unsigned char *)(v13 + 60) == 1 && *(_DWORD *)(v13 + 24) == 1;
  if (!v16 || (sub_2167F9BA4(v13 + 32, v51) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v20 = sub_216779180(v46, (uint64_t)"Incorrect match of header datatype: ", 36);
    char v21 = sub_21677D5B0(v20, (int *)(v14 + 56));
    uint64_t v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    uint64_t v40 = 0x100000002;
    uint64_t v23 = sub_21677D5B0(v22, (int *)&v40);
    uint64_t v24 = sub_216779180(v23, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_216779094(v41, "interpretation");
    sub_21679F2AC(v14 + 32, (const void **)v41, __p);
    if ((v44 & 0x80u) == 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v26 = v44;
    }
    else {
      uint64_t v26 = (uint64_t)__p[1];
    }
    std::string v27 = sub_216779180(v24, (uint64_t)v25, v26);
    uint64_t v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"", 0);
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v29 = __cxa_allocate_exception(0x20uLL);
    int v30 = sub_216779038(v29, (uint64_t)__p);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 88))(&v45, v12, a3);
  long long v17 = v45;
  long long v45 = 0uLL;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v49) {
    sub_216784EC4(v49);
  }
  sub_2167877AC((uint64_t)v48, (void *)v48[1]);
  return a1;
}

void sub_2167F9A5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2167F97C0);
}

void sub_2167F9B64()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2167F9B94);
}

uint64_t sub_2167F9BA4(uint64_t a1, int a2)
{
  if (a2) {
    return 1;
  }
  sub_216779094(__p, "interpretation");
  sub_21679F2AC(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    BOOL v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    BOOL v2 = v8 == 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2167F9C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

Alembic::AbcGeom::v12::XformOp *Alembic::AbcGeom::v12::XformOp::XformOp(Alembic::AbcGeom::v12::XformOp *this)
{
  *(_DWORD *)this = 1;
  *((unsigned char *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 6) = 0;
  sub_21677C0AC((uint64_t)this + 8, 3uLL);
  return this;
}

void sub_2167F9CB0(_Unwind_Exception *a1)
{
  int v5 = v4;
  sub_2167FB780(v3, *v5);
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

Alembic::AbcGeom::v12::XformOp *Alembic::AbcGeom::v12::XformOp::XformOp(Alembic::AbcGeom::v12::XformOp *this, unsigned int a2, unsigned int a3)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 6) = 0;
  if (a2 < 7) {
    sub_21677C0AC((uint64_t)this + 8, qword_21740A548[a2]);
  }
  Alembic::AbcGeom::v12::XformOp::setHint((uint64_t)this, a3);
  return this;
}

void sub_2167F9D64(_Unwind_Exception *a1)
{
  sub_2167FB780(v3, *v4);
  char v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::setHint(uint64_t this, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)this;
  if (a2 && !v2 || a2 >= 5 && v2 == 1) {
    goto LABEL_19;
  }
  if (v2 <= 5 && ((1 << v2) & 0x34) != 0)
  {
    if (a2 <= 1) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  BOOL v4 = v2 == 6 || v2 == 3;
  BOOL v5 = v4;
  if (a2 >= 2 && v5) {
LABEL_19:
  }
    LOBYTE(a2) = 0;
LABEL_20:
  *(unsigned char *)(this + 4) = a2;
  return this;
}

Alembic::AbcGeom::v12::XformOp *Alembic::AbcGeom::v12::XformOp::XformOp(Alembic::AbcGeom::v12::XformOp *this, unsigned int a2)
{
  *((void *)this + 1) = 0;
  uint64_t v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 6) = 0;
  *(_DWORD *)this = a2 >> 4;
  Alembic::AbcGeom::v12::XformOp::setHint((uint64_t)this, a2 & 0xF);
  uint64_t v4 = *(int *)this;
  if (v4 < 7) {
    sub_21677C0AC((uint64_t)v3, qword_21740A548[v4]);
  }
  return this;
}

void sub_2167F9E74(_Unwind_Exception *a1)
{
  BOOL v5 = v4;
  sub_2167FB780(v3, *v5);
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::getType(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(unsigned int *)this;
}

void Alembic::AbcGeom::v12::XformOp::setType(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = 0;
  if (a2 <= 6) {
    sub_21677C0AC(a1 + 8, qword_21740A548[a2]);
  }
}

uint64_t Alembic::AbcGeom::v12::XformOp::getHint(Alembic::AbcGeom::v12::XformOp *this)
{
  return *((unsigned __int8 *)this + 4);
}

BOOL Alembic::AbcGeom::v12::XformOp::isXAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  if ((*(_DWORD *)this - 4) < 3) {
    return 0;
  }
  uint64_t v1 = (uint64_t *)*((void *)this + 5);
  if (!v1) {
    return 0;
  }
  do
  {
    int v2 = *((_DWORD *)v1 + 7);
    BOOL result = v2 == 0;
    if (!v2) {
      break;
    }
    uint64_t v1 = (uint64_t *)*v1;
  }
  while (v1);
  return result;
}

uint64_t Alembic::AbcGeom::v12::XformOp::isYAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  if ((*(_DWORD *)this - 4) < 3) {
    return 0;
  }
  uint64_t v1 = (uint64_t *)*((void *)this + 5);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    unsigned int v2 = *((_DWORD *)v1 + 7);
    if (v2 <= 1) {
      break;
    }
LABEL_6:
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return 0;
    }
  }
  if (!v2)
  {
    ++v1;
    goto LABEL_6;
  }
  return 1;
}

uint64_t Alembic::AbcGeom::v12::XformOp::isZAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  if ((*(_DWORD *)this - 4) < 3) {
    return 0;
  }
  uint64_t v1 = (uint64_t *)*((void *)this + 5);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    unsigned int v2 = *((_DWORD *)v1 + 7);
    if (v2 <= 2) {
      break;
    }
LABEL_6:
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return 0;
    }
  }
  if (v2 != 2)
  {
    ++v1;
    goto LABEL_6;
  }
  return 1;
}

BOOL Alembic::AbcGeom::v12::XformOp::isAngleAnimated(Alembic::AbcGeom::v12::XformOp *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 5);
  if ((*(_DWORD *)this - 4) > 2)
  {
    for (; v1; uint64_t v1 = (uint64_t *)*v1)
    {
      unsigned int v4 = *((_DWORD *)v1 + 7);
      if (v4 <= 3)
      {
        if (v4 == 3) {
          return 1;
        }
        ++v1;
      }
    }
    return 0;
  }
  if (!v1) {
    return 0;
  }
  do
  {
    int v2 = *((_DWORD *)v1 + 7);
    BOOL result = v2 == 0;
    if (!v2) {
      break;
    }
    uint64_t v1 = (uint64_t *)*v1;
  }
  while (v1);
  return result;
}

uint64_t Alembic::AbcGeom::v12::XformOp::isChannelAnimated(Alembic::AbcGeom::v12::XformOp *this, unsigned int a2)
{
  int v2 = (uint64_t *)*((void *)this + 5);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *((_DWORD *)v2 + 7);
    if (v3 <= a2) {
      break;
    }
LABEL_5:
    int v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v3 < a2)
  {
    ++v2;
    goto LABEL_5;
  }
  return 1;
}

uint64_t Alembic::AbcGeom::v12::XformOp::getNumChannels(Alembic::AbcGeom::v12::XformOp *this)
{
  return (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3;
}

double Alembic::AbcGeom::v12::XformOp::getDefaultChannelValue(Alembic::AbcGeom::v12::XformOp *this, unint64_t a2)
{
  if (*(_DWORD *)this == 3)
  {
    if (a2 > 0xF) {
      return 0.0;
    }
    double result = 1.0;
    if (((1 << a2) & 0x8421) == 0) {
      return 0.0;
    }
  }
  else
  {
    double result = 0.0;
    if (!*(_DWORD *)this) {
      return 1.0;
    }
  }
  return result;
}

double Alembic::AbcGeom::v12::XformOp::getChannelValue(Alembic::AbcGeom::v12::XformOp *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  double result = 0.0;
  if (a2 < (*((void *)this + 2) - v2) >> 3) {
    return *(double *)(v2 + 8 * a2);
  }
  return result;
}

uint64_t Alembic::AbcGeom::v12::XformOp::setChannelValue(uint64_t this, uint64_t a2, double a3)
{
  *(double *)(*(void *)(this + 8) + 8 * a2) = a3;
  return this;
}

uint64_t Alembic::AbcGeom::v12::XformOp::getOpEncoding(Alembic::AbcGeom::v12::XformOp *this)
{
  return *((unsigned char *)this + 4) & 0xF | (16 * (*(unsigned char *)this & 0xFu));
}

BOOL Alembic::AbcGeom::v12::XformOp::isTranslateOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 1;
}

BOOL Alembic::AbcGeom::v12::XformOp::isScaleOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 0;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 2;
}

BOOL Alembic::AbcGeom::v12::XformOp::isMatrixOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 3;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateXOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 4;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateYOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 5;
}

BOOL Alembic::AbcGeom::v12::XformOp::isRotateZOp(Alembic::AbcGeom::v12::XformOp *this)
{
  return *(_DWORD *)this == 6;
}

double Alembic::AbcGeom::v12::XformOp::setVector(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == 3)
  {
    sub_216778A5C((uint64_t)v9);
    sub_216779180(v10, (uint64_t)"Meaningless to set Abc::V3d on matrix op", 40);
    std::stringbuf::str();
    sub_216778E70(v8, &__p);
    if (v7 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    BOOL v5 = sub_216779038(exception, (uint64_t)v8);
    __cxa_throw(v5, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = *(void *)a2;
  *(void *)(v2 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(v2 + 16) = result;
  return result;
}

void sub_2167FA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::setTranslate(_DWORD *a1, uint64_t a2)
{
  if (*a1 != 1)
  {
    sub_216778A5C((uint64_t)v8);
    sub_216779180(v9, (uint64_t)"Meaningless to set translate on non-translate op.", 49);
    std::stringbuf::str();
    sub_216778E70(v7, &__p);
    if (v6 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    unsigned int v4 = sub_216779038(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }

  return Alembic::AbcGeom::v12::XformOp::setVector((uint64_t)a1, a2);
}

void sub_2167FA2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::setScale(_DWORD *a1, uint64_t a2)
{
  if (*a1)
  {
    sub_216778A5C((uint64_t)v8);
    sub_216779180(v9, (uint64_t)"Meaningless to set scale on non-scale op.", 41);
    std::stringbuf::str();
    sub_216778E70(v7, &__p);
    if (v6 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    unsigned int v4 = sub_216779038(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }

  return Alembic::AbcGeom::v12::XformOp::setVector((uint64_t)a1, a2);
}

void sub_2167FA3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::setAxis(_DWORD *a1, uint64_t a2)
{
  if (*a1 != 2)
  {
    sub_216778A5C((uint64_t)v8);
    sub_216779180(v9, (uint64_t)"Meaningless to set rotation axis on non-rotation or fixed angle rotation op.", 76);
    std::stringbuf::str();
    sub_216778E70(v7, &__p);
    if (v6 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    unsigned int v4 = sub_216779038(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }

  return Alembic::AbcGeom::v12::XformOp::setVector((uint64_t)a1, a2);
}

void sub_2167FA4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::setAngle(uint64_t this, double a2)
{
  if ((*(_DWORD *)this - 4) >= 3)
  {
    if (*(_DWORD *)this != 2)
    {
      sub_216778A5C((uint64_t)v8);
      sub_216779180(v9, (uint64_t)"Meaningless to set rotation angle on non-rotation op.", 53);
      std::stringbuf::str();
      sub_216778E70(v7, &__p);
      if (v6 < 0) {
        operator delete((void *)__p);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      unsigned int v4 = sub_216779038(exception, (uint64_t)v7);
      __cxa_throw(v4, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v2 = (double *)(*(void *)(this + 8) + 24);
  }
  else
  {
    uint64_t v2 = *(double **)(this + 8);
  }
  *uint64_t v2 = a2;
  return this;
}

void sub_2167FA590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformOp::setMatrix(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)result != 3)
  {
    sub_216778A5C((uint64_t)v10);
    sub_216779180(v11, (uint64_t)"Cannot set non-matrix op from Abc::M44d", 39);
    std::stringbuf::str();
    sub_216778E70(v9, &__p);
    if (v8 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    char v6 = sub_216779038(exception, (uint64_t)v9);
    __cxa_throw(v6, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(result + 8);
  do
  {
    for (uint64_t i = 0; i != 32; i += 8)
      *(void *)(v3 + i) = *(void *)(a2 + i);
    ++v2;
    v3 += 32;
    a2 += 32;
  }
  while (v2 != 4);
  return result;
}

void sub_2167FA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getVector@<D0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)this == 3)
  {
    sub_216778A5C((uint64_t)v9);
    sub_216779180(v10, (uint64_t)"Meaningless to get Abc::V3d from matrix op", 42);
    std::stringbuf::str();
    sub_216778E70(v8, &__p);
    if (v7 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::exception v5 = sub_216779038(exception, (uint64_t)v8);
    __cxa_throw(v5, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v2 = *((void *)this + 1);
  double result = *(double *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(double *)(a2 + 16) = result;
  return result;
}

void sub_2167FA778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getTranslate@<D0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)this != 1)
  {
    sub_216778A5C((uint64_t)v8);
    sub_216779180(v9, (uint64_t)"Meaningless to get translate vector from non-translate op.", 58);
    std::stringbuf::str();
    sub_216778E70(v7, &__p);
    if (v6 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    unsigned int v4 = sub_216779038(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }

  return Alembic::AbcGeom::v12::XformOp::getVector(this, a2);
}

void sub_2167FA858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getScale@<D0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)this)
  {
    sub_216778A5C((uint64_t)v8);
    sub_216779180(v9, (uint64_t)"Meaningless to get scaling vector from non-scale op.", 52);
    std::stringbuf::str();
    sub_216778E70(v7, &__p);
    if (v6 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    unsigned int v4 = sub_216779038(exception, (uint64_t)v7);
    __cxa_throw(v4, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }

  return Alembic::AbcGeom::v12::XformOp::getVector(this, a2);
}

void sub_2167FA934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformOp::getAxis(Alembic::AbcGeom::v12::XformOp *this@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)this)
  {
    case 2:
      Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)a2);
      break;
    case 4:
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0x3FF0000000000000;
      break;
    case 5:
      *(_OWORD *)a2 = xmmword_217409FD0;
      a2[2] = 0;
      break;
    case 6:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0x3FF0000000000000;
      break;
    default:
      sub_216778A5C((uint64_t)v7);
      sub_216779180(v8, (uint64_t)"Meaningless to get rotation axis from non-rotation op.", 54);
      std::stringbuf::str();
      sub_216778E70(v6, &__p);
      if (v5 < 0) {
        operator delete((void *)__p);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v3 = sub_216779038(exception, (uint64_t)v6);
      __cxa_throw(v3, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
}

void sub_2167FAA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

double Alembic::AbcGeom::v12::XformOp::getAngle(Alembic::AbcGeom::v12::XformOp *this)
{
  if ((*(_DWORD *)this - 4) >= 3)
  {
    if (*(_DWORD *)this != 2)
    {
      sub_216778A5C((uint64_t)v8);
      sub_216779180(v9, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
      std::stringbuf::str();
      sub_216778E70(v7, &__p);
      if (v6 < 0) {
        operator delete((void *)__p);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      unsigned int v4 = sub_216779038(exception, (uint64_t)v7);
      __cxa_throw(v4, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v1 = *((void *)this + 1) + 24;
  }
  else
  {
    uint64_t v1 = *((void *)this + 1);
  }
  return *(double *)v1;
}

void sub_2167FAB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformOp::getXRotation(Alembic::AbcGeom::v12::XformOp *this)
{
  if (*(_DWORD *)this == 2)
  {
    double v20 = 0.0;
    double v21 = 0.0;
    uint64_t v22 = 0;
    double v25 = 0.0;
    uint64_t v26 = 0;
    double v27 = 0.0;
    Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)&v16);
    double v2 = v17 * v17 + v16 * v16 + v18 * v18;
    if (v2 < 4.45014772e-308)
    {
      double v8 = -v16;
      if (v16 >= 0.0) {
        double v8 = v16;
      }
      double v9 = -v17;
      if (v17 >= 0.0) {
        double v9 = v17;
      }
      if (v18 >= 0.0) {
        double v10 = v18;
      }
      else {
        double v10 = -v18;
      }
      if (v8 >= v9) {
        double v11 = v8;
      }
      else {
        double v11 = v9;
      }
      if (v11 < v10) {
        double v11 = v10;
      }
      if (v11 == 0.0) {
        goto LABEL_23;
      }
      double v3 = v11 * sqrt(v9 / v11 * (v9 / v11) + v8 / v11 * (v8 / v11) + v10 / v11 * (v10 / v11));
    }
    else
    {
      double v3 = sqrt(v2);
    }
    if (v3 != 0.0)
    {
      double v4 = v16 / v3;
      double v5 = v17 / v3;
      double v6 = v18 / v3;
LABEL_8:
      __double2 v7 = __sincos_stret(*(double *)(*((void *)this + 1) + 24) * 3.14159265 / 180.0);
      double v19 = v7.__cosval + v4 * v4 * (1.0 - v7.__cosval);
      double v20 = v7.__sinval * v6 + v4 * v5 * (1.0 - v7.__cosval);
      double v21 = v4 * v6 * (1.0 - v7.__cosval) - v5 * v7.__sinval;
      uint64_t v22 = 0;
      double v23 = v4 * v5 * (1.0 - v7.__cosval) - v6 * v7.__sinval;
      double v24 = v7.__cosval + v5 * v5 * (1.0 - v7.__cosval);
      double v25 = v7.__sinval * v4 + v5 * v6 * (1.0 - v7.__cosval);
      uint64_t v26 = 0;
      double v27 = v7.__sinval * v5 + v4 * v6 * (1.0 - v7.__cosval);
      double v28 = v5 * v6 * (1.0 - v7.__cosval) - v4 * v7.__sinval;
      double v29 = v7.__cosval + v6 * v6 * (1.0 - v7.__cosval);
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t v32 = 0x3FF0000000000000;
      sub_2167FAE40(&v19, (uint64_t)&v16);
      return;
    }
LABEL_23:
    double v4 = 0.0;
    double v5 = 0.0;
    double v6 = 0.0;
    goto LABEL_8;
  }
  if (*(_DWORD *)this != 4)
  {
    sub_216778A5C((uint64_t)&v19);
    sub_216779180(&v21, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
    std::stringbuf::str();
    sub_216778E70(&v16, &__p);
    if (v15 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v13 = sub_216779038(exception, (uint64_t)&v16);
    __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
}

void sub_2167FAE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2167FAE40(double *a1, uint64_t a2)
{
  double v4 = *a1;
  double v3 = a1[1];
  double v5 = a1[2];
  double v7 = a1[4];
  double v6 = a1[5];
  double v8 = a1[6];
  double v9 = v3 * v3 + v4 * v4 + v5 * v5;
  if (v9 >= 4.45014772e-308)
  {
    double v10 = sqrt(v9);
    goto LABEL_3;
  }
  double v31 = -v4;
  if (v4 >= 0.0) {
    double v31 = *a1;
  }
  double v32 = -v3;
  if (v3 >= 0.0) {
    double v32 = a1[1];
  }
  if (v5 >= 0.0) {
    double v33 = a1[2];
  }
  else {
    double v33 = -v5;
  }
  if (v31 >= v32) {
    double v34 = v31;
  }
  else {
    double v34 = v32;
  }
  if (v34 < v33) {
    double v34 = v33;
  }
  if (v34 != 0.0)
  {
    double v10 = v34 * sqrt(v32 / v34 * (v32 / v34) + v31 / v34 * (v31 / v34) + v33 / v34 * (v33 / v34));
LABEL_3:
    if (v10 != 0.0)
    {
      double v4 = v4 / v10;
      double v3 = v3 / v10;
      double v5 = v5 / v10;
    }
  }
  double v11 = a1[8];
  double v12 = a1[9];
  double v13 = a1[10];
  double v14 = v6 * v6 + v7 * v7 + v8 * v8;
  if (v14 >= 4.45014772e-308)
  {
    double v15 = sqrt(v14);
    goto LABEL_7;
  }
  double v35 = -v7;
  if (v7 >= 0.0) {
    double v35 = a1[4];
  }
  double v36 = -v6;
  if (v6 >= 0.0) {
    double v36 = a1[5];
  }
  if (v8 >= 0.0) {
    double v37 = a1[6];
  }
  else {
    double v37 = -v8;
  }
  if (v35 >= v36) {
    double v38 = v35;
  }
  else {
    double v38 = v36;
  }
  if (v38 < v37) {
    double v38 = v37;
  }
  if (v38 != 0.0)
  {
    double v15 = v38 * sqrt(v36 / v38 * (v36 / v38) + v35 / v38 * (v35 / v38) + v37 / v38 * (v37 / v38));
LABEL_7:
    if (v15 != 0.0)
    {
      double v7 = v7 / v15;
      double v6 = v6 / v15;
      double v8 = v8 / v15;
    }
  }
  double v16 = v12 * v12 + v11 * v11 + v13 * v13;
  double v44 = v5;
  double v45 = v3;
  if (v16 >= 4.45014772e-308)
  {
    double v17 = sqrt(v16);
    goto LABEL_11;
  }
  double v39 = -v11;
  if (v11 >= 0.0) {
    double v39 = a1[8];
  }
  double v40 = -v12;
  if (v12 >= 0.0) {
    double v40 = a1[9];
  }
  if (v13 >= 0.0) {
    double v41 = a1[10];
  }
  else {
    double v41 = -v13;
  }
  if (v39 >= v40) {
    double v42 = v39;
  }
  else {
    double v42 = v40;
  }
  if (v42 < v41) {
    double v42 = v41;
  }
  if (v42 != 0.0)
  {
    double v17 = v42 * sqrt(v40 / v42 * (v40 / v42) + v39 / v42 * (v39 / v42) + v41 / v42 * (v41 / v42));
LABEL_11:
    if (v17 != 0.0)
    {
      double v11 = v11 / v17;
      double v12 = v12 / v17;
      double v13 = v13 / v17;
    }
  }
  double v43 = v13;
  double v18 = atan2(v8, v13);
  *(double *)a2 = v18;
  __double2 v19 = __sincos_stret(v18);
  double v20 = v19.__sinval * -0.0 + v19.__cosval * -0.0;
  double v21 = v19.__cosval + v19.__sinval * -0.0;
  double v22 = v21 * 0.0;
  double v23 = v20 + v21 * 0.0 + v19.__sinval * -0.0;
  double v24 = v21 + v20 * 0.0 + v19.__sinval * -0.0;
  double v25 = v22 + v20 * 0.0;
  double v26 = v25 + v19.__sinval * -0.0;
  double v27 = v4 + v7 * 0.0 + v11 * 0.0 + 0.0;
  double v28 = v45 + v6 * 0.0 + v12 * 0.0 + 0.0;
  double v29 = v7 * v24 + v23 * v4 + (v25 - v19.__sinval) * v11;
  long double v30 = v6 * v24 + v23 * v45 + (v25 - v19.__sinval) * v12 + v26 * 0.0;
  *(long double *)(a2 + 8) = atan2(-(v44 + v8 * 0.0 + v43 * 0.0 + 0.0), sqrt(v28 * v28 + v27 * v27));
  *(long double *)(a2 + 16) = atan2(-(v29 + v26 * 0.0), v30);
}

void Alembic::AbcGeom::v12::XformOp::getYRotation(Alembic::AbcGeom::v12::XformOp *this)
{
  if (*(_DWORD *)this == 2)
  {
    double v20 = 0.0;
    double v21 = 0.0;
    uint64_t v22 = 0;
    double v25 = 0.0;
    uint64_t v26 = 0;
    double v27 = 0.0;
    Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)&v16);
    double v2 = v17 * v17 + v16 * v16 + v18 * v18;
    if (v2 < 4.45014772e-308)
    {
      double v8 = -v16;
      if (v16 >= 0.0) {
        double v8 = v16;
      }
      double v9 = -v17;
      if (v17 >= 0.0) {
        double v9 = v17;
      }
      if (v18 >= 0.0) {
        double v10 = v18;
      }
      else {
        double v10 = -v18;
      }
      if (v8 >= v9) {
        double v11 = v8;
      }
      else {
        double v11 = v9;
      }
      if (v11 < v10) {
        double v11 = v10;
      }
      if (v11 == 0.0) {
        goto LABEL_23;
      }
      double v3 = v11 * sqrt(v9 / v11 * (v9 / v11) + v8 / v11 * (v8 / v11) + v10 / v11 * (v10 / v11));
    }
    else
    {
      double v3 = sqrt(v2);
    }
    if (v3 != 0.0)
    {
      double v4 = v16 / v3;
      double v5 = v17 / v3;
      double v6 = v18 / v3;
LABEL_8:
      __double2 v7 = __sincos_stret(*(double *)(*((void *)this + 1) + 24) * 3.14159265 / 180.0);
      double v19 = v7.__cosval + v4 * v4 * (1.0 - v7.__cosval);
      double v20 = v7.__sinval * v6 + v4 * v5 * (1.0 - v7.__cosval);
      double v21 = v4 * v6 * (1.0 - v7.__cosval) - v5 * v7.__sinval;
      uint64_t v22 = 0;
      double v23 = v4 * v5 * (1.0 - v7.__cosval) - v6 * v7.__sinval;
      double v24 = v7.__cosval + v5 * v5 * (1.0 - v7.__cosval);
      double v25 = v7.__sinval * v4 + v5 * v6 * (1.0 - v7.__cosval);
      uint64_t v26 = 0;
      double v27 = v7.__sinval * v5 + v4 * v6 * (1.0 - v7.__cosval);
      double v28 = v5 * v6 * (1.0 - v7.__cosval) - v4 * v7.__sinval;
      double v29 = v7.__cosval + v6 * v6 * (1.0 - v7.__cosval);
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t v32 = 0x3FF0000000000000;
      sub_2167FAE40(&v19, (uint64_t)&v16);
      return;
    }
LABEL_23:
    double v4 = 0.0;
    double v5 = 0.0;
    double v6 = 0.0;
    goto LABEL_8;
  }
  if (*(_DWORD *)this != 5)
  {
    sub_216778A5C((uint64_t)&v19);
    sub_216779180(&v21, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
    std::stringbuf::str();
    sub_216778E70(&v16, &__p);
    if (v15 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    double v13 = sub_216779038(exception, (uint64_t)&v16);
    __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
}

void sub_2167FB39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformOp::getZRotation(Alembic::AbcGeom::v12::XformOp *this)
{
  if (*(_DWORD *)this == 2)
  {
    double v20 = 0.0;
    double v21 = 0.0;
    uint64_t v22 = 0;
    double v25 = 0.0;
    uint64_t v26 = 0;
    double v27 = 0.0;
    Alembic::AbcGeom::v12::XformOp::getVector(this, (uint64_t)&v16);
    double v2 = v17 * v17 + v16 * v16 + v18 * v18;
    if (v2 < 4.45014772e-308)
    {
      double v8 = -v16;
      if (v16 >= 0.0) {
        double v8 = v16;
      }
      double v9 = -v17;
      if (v17 >= 0.0) {
        double v9 = v17;
      }
      if (v18 >= 0.0) {
        double v10 = v18;
      }
      else {
        double v10 = -v18;
      }
      if (v8 >= v9) {
        double v11 = v8;
      }
      else {
        double v11 = v9;
      }
      if (v11 < v10) {
        double v11 = v10;
      }
      if (v11 == 0.0) {
        goto LABEL_23;
      }
      double v3 = v11 * sqrt(v9 / v11 * (v9 / v11) + v8 / v11 * (v8 / v11) + v10 / v11 * (v10 / v11));
    }
    else
    {
      double v3 = sqrt(v2);
    }
    if (v3 != 0.0)
    {
      double v4 = v16 / v3;
      double v5 = v17 / v3;
      double v6 = v18 / v3;
LABEL_8:
      __double2 v7 = __sincos_stret(*(double *)(*((void *)this + 1) + 24) * 3.14159265 / 180.0);
      double v19 = v7.__cosval + v4 * v4 * (1.0 - v7.__cosval);
      double v20 = v7.__sinval * v6 + v4 * v5 * (1.0 - v7.__cosval);
      double v21 = v4 * v6 * (1.0 - v7.__cosval) - v5 * v7.__sinval;
      uint64_t v22 = 0;
      double v23 = v4 * v5 * (1.0 - v7.__cosval) - v6 * v7.__sinval;
      double v24 = v7.__cosval + v5 * v5 * (1.0 - v7.__cosval);
      double v25 = v7.__sinval * v4 + v5 * v6 * (1.0 - v7.__cosval);
      uint64_t v26 = 0;
      double v27 = v7.__sinval * v5 + v4 * v6 * (1.0 - v7.__cosval);
      double v28 = v5 * v6 * (1.0 - v7.__cosval) - v4 * v7.__sinval;
      double v29 = v7.__cosval + v6 * v6 * (1.0 - v7.__cosval);
      long long v30 = 0u;
      long long v31 = 0u;
      uint64_t v32 = 0x3FF0000000000000;
      sub_2167FAE40(&v19, (uint64_t)&v16);
      return;
    }
LABEL_23:
    double v4 = 0.0;
    double v5 = 0.0;
    double v6 = 0.0;
    goto LABEL_8;
  }
  if (*(_DWORD *)this != 6)
  {
    sub_216778A5C((uint64_t)&v19);
    sub_216779180(&v21, (uint64_t)"Meaningless to get rotation angle from non-rotation op.", 55);
    std::stringbuf::str();
    sub_216778E70(&v16, &__p);
    if (v15 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    double v13 = sub_216779038(exception, (uint64_t)&v16);
    __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
}

void sub_2167FB638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 Alembic::AbcGeom::v12::XformOp::getMatrix@<Q0>(Alembic::AbcGeom::v12::XformOp *this@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)this != 3)
  {
    sub_216778A5C((uint64_t)v12);
    sub_216779180(v13, (uint64_t)"Can't get matrix from non-matrix op.", 36);
    std::stringbuf::str();
    sub_216778E70(v11, &__p);
    if (v10 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v8 = sub_216779038(exception, (uint64_t)v11);
    __cxa_throw(v8, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v2 = 0;
  *(void *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  uint64_t v3 = *((void *)this + 1);
  do
  {
    uint64_t v4 = a2 + v2;
    __n128 result = *(__n128 *)(v3 + v2);
    long long v6 = *(_OWORD *)(v3 + v2 + 16);
    *(__n128 *)uint64_t v4 = result;
    *(_OWORD *)(v4 + 16) = v6;
    v2 += 32;
  }
  while (v2 != 128);
  return result;
}

void sub_2167FB758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2167FB780(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2167FB780(a1, *a2);
    sub_2167FB780(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t Alembic::AbcGeom::v12::XformSample::XformSample(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 32) = 1;
  *(void *)(this + 40) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 32) = 1;
  *(void *)(this + 40) = 0;
  return this;
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(uint64_t a1, Alembic::AbcGeom::v12::XformOp *this, uint64_t a3)
{
  for (uint64_t i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, i, *(double *)(a3 + 8 * i));
  if (*(unsigned char *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 1)
    {
      sub_216778A5C((uint64_t)v26);
      sub_216779180(v27, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v25, (long long *)__p);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      double v17 = sub_216779038(exception, (uint64_t)v25);
      __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType(this);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v7)))
    {
      sub_216778A5C((uint64_t)v26);
      double v18 = sub_216779180(v27, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v18, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v25, (long long *)__p);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      double v19 = __cxa_allocate_exception(0x20uLL);
      double v20 = sub_216779038(v19, (uint64_t)v25);
      __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v9 = *(void *)(a1 + 8);
    char v10 = (Alembic::AbcGeom::v12::XformOp *)(v9 + 56 * v7);
    int v11 = *(_DWORD *)this;
    *((unsigned char *)v10 + 4) = *((unsigned char *)this + 4);
    *(_DWORD *)char v10 = v11;
    if (v10 != this)
    {
      uint64_t v12 = v9 + 56 * v7;
      sub_21677CC7C((char *)(v12 + 8), *((char **)this + 1), *((void *)this + 2), (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
      sub_2167FF228((uint64_t **)(v12 + 32), *((unsigned int **)this + 4), (unsigned int *)this + 10);
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_216778A5C((uint64_t)v26);
      sub_216779180(v27, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v25, (long long *)__p);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      double v21 = __cxa_allocate_exception(0x20uLL);
      uint64_t v22 = sub_216779038(v21, (uint64_t)v25);
      __cxa_throw(v22, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 1;
    unint64_t v13 = *(void *)(a1 + 16);
    if (v13 >= *(void *)(a1 + 24))
    {
      uint64_t v14 = sub_2167FF868((uint64_t *)(a1 + 8), (int *)this);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), (int *)this);
      uint64_t v14 = v13 + 56;
      *(void *)(a1 + 16) = v13 + 56;
    }
    *(void *)(a1 + 16) = v14;
    return 0x6DB6DB6DB6DB6DB7 * ((v14 - *(void *)(a1 + 8)) >> 3) - 1;
  }
  return v7;
}

{
  uint64_t v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;
  int Type;
  uint64_t v11;
  Alembic::AbcGeom::v12::XformOp *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v18;
  void *exception;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *__p[2];
  char v26;
  void v27[4];
  unsigned char v28[16];
  void v29[33];

  long long v6 = 0;
  for (uint64_t i = 0; i != 4; ++i)
  {
    for (j = 0; j != 4; ++j)
      Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, v6 + j, *(double *)(a3 + 8 * j));
    v6 += 4;
    a3 += 32;
  }
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType(this);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v9)))
    {
      sub_216778A5C((uint64_t)v28);
      double v18 = sub_216779180(v29, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v18, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v27, (long long *)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      double v20 = sub_216779038(exception, (uint64_t)v27);
      __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    if (*(_DWORD *)a1 != 1)
    {
      sub_216778A5C((uint64_t)v28);
      sub_216779180(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v27, (long long *)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      double v21 = __cxa_allocate_exception(0x20uLL);
      uint64_t v22 = sub_216779038(v21, (uint64_t)v27);
      __cxa_throw(v22, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    int v11 = *(void *)(a1 + 8);
    uint64_t v12 = (Alembic::AbcGeom::v12::XformOp *)(v11 + 56 * v9);
    unint64_t v13 = *(_DWORD *)this;
    *((unsigned char *)v12 + 4) = *((unsigned char *)this + 4);
    *(_DWORD *)uint64_t v12 = v13;
    if (v12 != this)
    {
      uint64_t v14 = v11 + 56 * v9;
      sub_21677CC7C((char *)(v14 + 8), *((char **)this + 1), *((void *)this + 2), (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
      sub_2167FF228((uint64_t **)(v14 + 32), *((unsigned int **)this + 4), (unsigned int *)this + 10);
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_216778A5C((uint64_t)v28);
      sub_216779180(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v27, (long long *)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      double v23 = __cxa_allocate_exception(0x20uLL);
      char v24 = sub_216779038(v23, (uint64_t)v27);
      __cxa_throw(v24, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 1;
    char v15 = *(void *)(a1 + 16);
    if (v15 >= *(void *)(a1 + 24))
    {
      double v16 = sub_2167FF868((uint64_t *)(a1 + 8), (int *)this);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), (int *)this);
      double v16 = v15 + 56;
      *(void *)(a1 + 16) = v15 + 56;
    }
    *(void *)(a1 + 16) = v16;
    return 0x6DB6DB6DB6DB6DB7 * ((v16 - *(void *)(a1 + 8)) >> 3) - 1;
  }
  return v9;
}

void sub_2167FBB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(uint64_t a1, Alembic::AbcGeom::v12::XformOp *this, uint64_t a3, double a4)
{
  for (uint64_t i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, i, *(double *)(a3 + 8 * i));
  Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)this, 3, a4);
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType(this);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v9)))
    {
      sub_216778A5C((uint64_t)v28);
      double v18 = sub_216779180(v29, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v18, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v27, (long long *)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      double v20 = sub_216779038(exception, (uint64_t)v27);
      __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    if (*(_DWORD *)a1 != 1)
    {
      sub_216778A5C((uint64_t)v28);
      sub_216779180(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v27, (long long *)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      double v21 = __cxa_allocate_exception(0x20uLL);
      uint64_t v22 = sub_216779038(v21, (uint64_t)v27);
      __cxa_throw(v22, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (Alembic::AbcGeom::v12::XformOp *)(v11 + 56 * v9);
    int v13 = *(_DWORD *)this;
    *((unsigned char *)v12 + 4) = *((unsigned char *)this + 4);
    *(_DWORD *)uint64_t v12 = v13;
    if (v12 != this)
    {
      uint64_t v14 = v11 + 56 * v9;
      sub_21677CC7C((char *)(v14 + 8), *((char **)this + 1), *((void *)this + 2), (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
      sub_2167FF228((uint64_t **)(v14 + 32), *((unsigned int **)this + 4), (unsigned int *)this + 10);
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_216778A5C((uint64_t)v28);
      sub_216779180(v29, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v27, (long long *)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      double v23 = __cxa_allocate_exception(0x20uLL);
      char v24 = sub_216779038(v23, (uint64_t)v27);
      __cxa_throw(v24, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 1;
    unint64_t v15 = *(void *)(a1 + 16);
    if (v15 >= *(void *)(a1 + 24))
    {
      uint64_t v16 = sub_2167FF868((uint64_t *)(a1 + 8), (int *)this);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), (int *)this);
      uint64_t v16 = v15 + 56;
      *(void *)(a1 + 16) = v15 + 56;
    }
    *(void *)(a1 + 16) = v16;
    return 0x6DB6DB6DB6DB6DB7 * ((v16 - *(void *)(a1 + 8)) >> 3) - 1;
  }
  return v9;
}

void sub_2167FBEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(uint64_t a1, uint64_t a2, double a3)
{
  Alembic::AbcGeom::v12::XformOp::setChannelValue(a2, 0, a3);
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)a2);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v5)))
    {
      sub_216778A5C((uint64_t)v24);
      uint64_t v14 = sub_216779180(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v16 = sub_216779038(exception, (uint64_t)v23);
      __cxa_throw(v16, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    if (*(_DWORD *)a1 != 1)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = v7 + 56 * v5;
    int v9 = *(_DWORD *)a2;
    *(unsigned char *)(v8 + 4) = *(unsigned char *)(a2 + 4);
    *(_DWORD *)uint64_t v8 = v9;
    if (v8 != a2)
    {
      uint64_t v10 = v7 + 56 * v5;
      sub_21677CC7C((char *)(v10 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      sub_2167FF228((uint64_t **)(v10 + 32), *(unsigned int **)(a2 + 32), (unsigned int *)(a2 + 40));
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if (*(_DWORD *)a1 >= 2u)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v19 = __cxa_allocate_exception(0x20uLL);
      double v20 = sub_216779038(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 1;
    unint64_t v11 = *(void *)(a1 + 16);
    if (v11 >= *(void *)(a1 + 24))
    {
      uint64_t v12 = sub_2167FF868((uint64_t *)(a1 + 8), (int *)a2);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), (int *)a2);
      uint64_t v12 = v11 + 56;
      *(void *)(a1 + 16) = v11 + 56;
    }
    *(void *)(a1 + 16) = v12;
    return 0x6DB6DB6DB6DB6DB7 * ((v12 - *(void *)(a1 + 8)) >> 3) - 1;
  }
  return v5;
}

void sub_2167FC1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2167FC578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcGeom::v12::XformSample::addOp(Alembic::AbcGeom::v12::XformSample *this, const Alembic::AbcGeom::v12::XformOp *a2)
{
  if (*((unsigned char *)this + 33))
  {
    uint64_t v4 = *((void *)this + 5);
    int Type = Alembic::AbcGeom::v12::XformOp::getType(a2);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((void *)this + 1) + 56 * v4)))
    {
      sub_216778A5C((uint64_t)v24);
      uint64_t v14 = sub_216779180(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v16 = sub_216779038(exception, (uint64_t)v23);
      __cxa_throw(v16, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    if (*(_DWORD *)this != 1)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = (const Alembic::AbcGeom::v12::XformOp *)(v6 + 56 * v4);
    int v8 = *(_DWORD *)a2;
    *((unsigned char *)v7 + 4) = *((unsigned char *)a2 + 4);
    *(_DWORD *)uint64_t v7 = v8;
    if (v7 != a2)
    {
      uint64_t v9 = v6 + 56 * v4;
      sub_21677CC7C((char *)(v9 + 8), *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
      sub_2167FF228((uint64_t **)(v9 + 32), *((unsigned int **)a2 + 4), (unsigned int *)a2 + 10);
    }
    *((void *)this + 5) = (*((void *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3));
  }
  else
  {
    if (*(_DWORD *)this >= 2u)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v19 = __cxa_allocate_exception(0x20uLL);
      double v20 = sub_216779038(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)this = 1;
    unint64_t v10 = *((void *)this + 2);
    unint64_t v11 = (char *)this + 24;
    if (v10 >= *((void *)this + 3))
    {
      uint64_t v12 = sub_2167FF868((uint64_t *)this + 1, (int *)a2);
    }
    else
    {
      sub_2167FF990((uint64_t)v11, *((void *)this + 2), (int *)a2);
      uint64_t v12 = v10 + 56;
      *((void *)this + 2) = v10 + 56;
    }
    *((void *)this + 2) = v12;
    return 0x6DB6DB6DB6DB6DB7 * ((v12 - *((void *)this + 1)) >> 3) - 1;
  }
  return v4;
}

void sub_2167FC8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *Alembic::AbcGeom::v12::XformSample::getOp@<X0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1) + 56 * a2;
  char v5 = *(unsigned char *)(v4 + 4);
  *(_DWORD *)a3 = *(_DWORD *)v4;
  *(unsigned char *)(a3 + 4) = v5;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  sub_21677CA50((void *)(a3 + 8), *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
  return sub_2167FF4E4((uint64_t *)(a3 + 32), v4 + 32);
}

void sub_2167FC974(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Alembic::AbcGeom::v12::XformSample::operator[](uint64_t a1, void *a2)
{
  return *(void *)(a1 + 8) + 56 * *a2;
}

{
  return *(void *)(a1 + 8) + 56 * *a2;
}

uint64_t Alembic::AbcGeom::v12::XformSample::getNumOps(Alembic::AbcGeom::v12::XformSample *this)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3);
}

uint64_t Alembic::AbcGeom::v12::XformSample::getNumOpChannels(Alembic::AbcGeom::v12::XformSample *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*((void *)this + 2) == v1) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    v5 += Alembic::AbcGeom::v12::XformOp::getNumChannels((Alembic::AbcGeom::v12::XformOp *)(v1 + v3));
    ++v4;
    uint64_t v1 = *((void *)this + 1);
    v3 += 56;
  }
  while (v4 < 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2) - v1) >> 3));
  return v5;
}

uint64_t Alembic::AbcGeom::v12::XformSample::setInheritsXforms(uint64_t this, char a2)
{
  *(unsigned char *)(this + 32) = a2;
  return this;
}

uint64_t Alembic::AbcGeom::v12::XformSample::getInheritsXforms(Alembic::AbcGeom::v12::XformSample *this)
{
  return *((unsigned __int8 *)this + 32);
}

void Alembic::AbcGeom::v12::XformSample::setTranslation(uint64_t a1, uint64_t a2)
{
  Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 1, 0);
  for (uint64_t i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v24, i, *(double *)(a2 + 8 * i));
  if (*(unsigned char *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      int v13 = sub_216779038(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v5 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v5)))
    {
      sub_216778A5C((uint64_t)v22);
      uint64_t v14 = sub_216779180(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v15 = __cxa_allocate_exception(0x20uLL);
      uint64_t v16 = sub_216779038(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = v7 + 56 * v5;
    int v9 = v24;
    *(unsigned char *)(v8 + 4) = v25;
    *(_DWORD *)uint64_t v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_21677CC7C((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_2167FF228((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 2;
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= *(void *)(a1 + 24))
    {
      uint64_t v11 = sub_2167FF868((uint64_t *)(a1 + 8), &v24);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), &v24);
      uint64_t v11 = v10 + 56;
      *(void *)(a1 + 16) = v10 + 56;
    }
    *(void *)(a1 + 16) = v11;
  }
  sub_2167FB780((uint64_t)&v28, *(void **)v29);
  if (v26)
  {
    double v27 = v26;
    operator delete(v26);
  }
}

void sub_2167FCDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  sub_2167FCE1C(v5 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_2167FCE1C(uint64_t a1)
{
  sub_2167FB780(a1 + 32, *(void **)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void Alembic::AbcGeom::v12::XformSample::setRotation(uint64_t a1, uint64_t a2, double a3)
{
  Alembic::AbcGeom::v12::XformOp::XformOp(&v26, 2, 0);
  for (uint64_t i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v26, i, *(double *)(a2 + 8 * i));
  Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v26, 3, a3);
  if (*(unsigned char *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      unint64_t v15 = sub_216779038(exception, (uint64_t)v23);
      __cxa_throw(v15, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v26);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v7)))
    {
      sub_216778A5C((uint64_t)v24);
      uint64_t v16 = sub_216779180(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v16, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = v9 + 56 * v7;
    int v11 = v26;
    *(unsigned char *)(v10 + 4) = v27;
    *(_DWORD *)uint64_t v10 = v11;
    if ((int *)v10 != &v26)
    {
      sub_21677CC7C((char *)(v9 + 56 * v7 + 8), v28, (uint64_t)v29, (v29 - v28) >> 3);
      sub_2167FF228((uint64_t **)(v9 + 56 * v7 + 32), v30, v31);
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v19 = __cxa_allocate_exception(0x20uLL);
      char v20 = sub_216779038(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 2;
    unint64_t v12 = *(void *)(a1 + 16);
    if (v12 >= *(void *)(a1 + 24))
    {
      uint64_t v13 = sub_2167FF868((uint64_t *)(a1 + 8), &v26);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), &v26);
      uint64_t v13 = v12 + 56;
      *(void *)(a1 + 16) = v12 + 56;
    }
    *(void *)(a1 + 16) = v13;
  }
  sub_2167FB780((uint64_t)&v30, *(void **)v31);
  if (v28)
  {
    double v29 = v28;
    operator delete(v28);
  }
}

void sub_2167FD1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  sub_2167FCE1C(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setScale(uint64_t a1, uint64_t a2)
{
  Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 0, 0);
  for (uint64_t i = 0; i != 3; ++i)
    Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v24, i, *(double *)(a2 + 8 * i));
  if (*(unsigned char *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v13 = sub_216779038(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v5 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v5)))
    {
      sub_216778A5C((uint64_t)v22);
      uint64_t v14 = sub_216779180(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v15 = __cxa_allocate_exception(0x20uLL);
      uint64_t v16 = sub_216779038(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = v7 + 56 * v5;
    int v9 = v24;
    *(unsigned char *)(v8 + 4) = v25;
    *(_DWORD *)uint64_t v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_21677CC7C((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_2167FF228((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 2;
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10 >= *(void *)(a1 + 24))
    {
      uint64_t v11 = sub_2167FF868((uint64_t *)(a1 + 8), &v24);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), &v24);
      uint64_t v11 = v10 + 56;
      *(void *)(a1 + 16) = v10 + 56;
    }
    *(void *)(a1 + 16) = v11;
  }
  sub_2167FB780((uint64_t)&v28, *(void **)v29);
  if (v26)
  {
    char v27 = v26;
    operator delete(v26);
  }
}

void sub_2167FD544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  sub_2167FCE1C(v5 - 88);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setXRotation(Alembic::AbcGeom::v12::XformSample *this, double a2)
{
  uint64_t v4 = Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 4, 0);
  Alembic::AbcGeom::v12::XformOp::setChannelValue(v4, 0, a2);
  if (*((unsigned char *)this + 33))
  {
    if (*(_DWORD *)this != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v13 = sub_216779038(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v5 = *((void *)this + 5);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((void *)this + 1) + 56 * v5)))
    {
      sub_216778A5C((uint64_t)v22);
      uint64_t v14 = sub_216779180(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v15 = __cxa_allocate_exception(0x20uLL);
      uint64_t v16 = sub_216779038(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *((void *)this + 1);
    uint64_t v8 = v7 + 56 * v5;
    int v9 = v24;
    *(unsigned char *)(v8 + 4) = v25;
    *(_DWORD *)uint64_t v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_21677CC7C((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_2167FF228((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *((void *)this + 5) = (*((void *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)this | 2) != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)this = 2;
    unint64_t v10 = *((void *)this + 2);
    if (v10 >= *((void *)this + 3))
    {
      uint64_t v11 = sub_2167FF868((uint64_t *)this + 1, &v24);
    }
    else
    {
      sub_2167FF990((uint64_t)this + 24, *((void *)this + 2), &v24);
      uint64_t v11 = v10 + 56;
      *((void *)this + 2) = v10 + 56;
    }
    *((void *)this + 2) = v11;
  }
  sub_2167FB780((uint64_t)&v28, *(void **)v29);
  if (v26)
  {
    char v27 = v26;
    operator delete(v26);
  }
}

void sub_2167FD8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  sub_2167FCE1C(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setYRotation(Alembic::AbcGeom::v12::XformSample *this, double a2)
{
  uint64_t v4 = Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 5, 0);
  Alembic::AbcGeom::v12::XformOp::setChannelValue(v4, 0, a2);
  if (*((unsigned char *)this + 33))
  {
    if (*(_DWORD *)this != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v13 = sub_216779038(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v5 = *((void *)this + 5);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((void *)this + 1) + 56 * v5)))
    {
      sub_216778A5C((uint64_t)v22);
      uint64_t v14 = sub_216779180(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v15 = __cxa_allocate_exception(0x20uLL);
      uint64_t v16 = sub_216779038(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *((void *)this + 1);
    uint64_t v8 = v7 + 56 * v5;
    int v9 = v24;
    *(unsigned char *)(v8 + 4) = v25;
    *(_DWORD *)uint64_t v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_21677CC7C((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_2167FF228((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *((void *)this + 5) = (*((void *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)this | 2) != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)this = 2;
    unint64_t v10 = *((void *)this + 2);
    if (v10 >= *((void *)this + 3))
    {
      uint64_t v11 = sub_2167FF868((uint64_t *)this + 1, &v24);
    }
    else
    {
      sub_2167FF990((uint64_t)this + 24, *((void *)this + 2), &v24);
      uint64_t v11 = v10 + 56;
      *((void *)this + 2) = v10 + 56;
    }
    *((void *)this + 2) = v11;
  }
  sub_2167FB780((uint64_t)&v28, *(void **)v29);
  if (v26)
  {
    char v27 = v26;
    operator delete(v26);
  }
}

void sub_2167FDC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  sub_2167FCE1C(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setZRotation(Alembic::AbcGeom::v12::XformSample *this, double a2)
{
  uint64_t v4 = Alembic::AbcGeom::v12::XformOp::XformOp(&v24, 6, 0);
  Alembic::AbcGeom::v12::XformOp::setChannelValue(v4, 0, a2);
  if (*((unsigned char *)this + 33))
  {
    if (*(_DWORD *)this != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v13 = sub_216779038(exception, (uint64_t)v21);
      __cxa_throw(v13, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v5 = *((void *)this + 5);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v24);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*((void *)this + 1) + 56 * v5)))
    {
      sub_216778A5C((uint64_t)v22);
      uint64_t v14 = sub_216779180(v23, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v14, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v15 = __cxa_allocate_exception(0x20uLL);
      uint64_t v16 = sub_216779038(v15, (uint64_t)v21);
      __cxa_throw(v16, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *((void *)this + 1);
    uint64_t v8 = v7 + 56 * v5;
    int v9 = v24;
    *(unsigned char *)(v8 + 4) = v25;
    *(_DWORD *)uint64_t v8 = v9;
    if ((int *)v8 != &v24)
    {
      sub_21677CC7C((char *)(v7 + 56 * v5 + 8), v26, (uint64_t)v27, (v27 - v26) >> 3);
      sub_2167FF228((uint64_t **)(v7 + 56 * v5 + 32), v28, v29);
    }
    *((void *)this + 5) = (*((void *)this + 5) + 1)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                             * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)this | 2) != 2)
    {
      sub_216778A5C((uint64_t)v22);
      sub_216779180(v23, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v21, (long long *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v21);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)this = 2;
    unint64_t v10 = *((void *)this + 2);
    if (v10 >= *((void *)this + 3))
    {
      uint64_t v11 = sub_2167FF868((uint64_t *)this + 1, &v24);
    }
    else
    {
      sub_2167FF990((uint64_t)this + 24, *((void *)this + 2), &v24);
      uint64_t v11 = v10 + 56;
      *((void *)this + 2) = v10 + 56;
    }
    *((void *)this + 2) = v11;
  }
  sub_2167FB780((uint64_t)&v28, *(void **)v29);
  if (v26)
  {
    char v27 = v26;
    operator delete(v26);
  }
}

void sub_2167FDFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  sub_2167FCE1C(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::setMatrix(uint64_t a1, uint64_t a2)
{
  Alembic::AbcGeom::v12::XformOp::XformOp(&v26, 3, 0);
  uint64_t v4 = 0;
  for (uint64_t i = 0; i != 4; ++i)
  {
    for (uint64_t j = 0; j != 4; ++j)
      Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)&v26, v4 + j, *(double *)(a2 + 8 * j));
    v4 += 4;
    a2 += 32;
  }
  if (*(unsigned char *)(a1 + 33))
  {
    if (*(_DWORD *)a1 != 2)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      unint64_t v15 = sub_216779038(exception, (uint64_t)v23);
      __cxa_throw(v15, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v26);
    if (Type != Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)(*(void *)(a1 + 8) + 56 * v7)))
    {
      sub_216778A5C((uint64_t)v24);
      uint64_t v16 = sub_216779180(v25, (uint64_t)"Cannot update mismatched op-type in already-setted ", 51);
      sub_216779180(v16, (uint64_t)"XformSample!", 12);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v17 = __cxa_allocate_exception(0x20uLL);
      double v18 = sub_216779038(v17, (uint64_t)v23);
      __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = v9 + 56 * v7;
    int v11 = v26;
    *(unsigned char *)(v10 + 4) = v27;
    *(_DWORD *)uint64_t v10 = v11;
    if ((int *)v10 != &v26)
    {
      sub_21677CC7C((char *)(v9 + 56 * v7 + 8), v28, (uint64_t)v29, (v29 - v28) >> 3);
      sub_2167FF228((uint64_t **)(v9 + 56 * v7 + 32), v30, v31);
    }
    *(void *)(a1 + 40) = (*(void *)(a1 + 40) + 1)
                         % (unint64_t)(0x6DB6DB6DB6DB6DB7
                                            * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  }
  else
  {
    if ((*(_DWORD *)a1 | 2) != 2)
    {
      sub_216778A5C((uint64_t)v24);
      sub_216779180(v25, (uint64_t)"Cannot mix addOp() and set<Foo>() methods.", 42);
      std::stringbuf::str();
      sub_216778E70(v23, (long long *)__p);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      double v19 = __cxa_allocate_exception(0x20uLL);
      char v20 = sub_216779038(v19, (uint64_t)v23);
      __cxa_throw(v20, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    *(_DWORD *)a1 = 2;
    unint64_t v12 = *(void *)(a1 + 16);
    if (v12 >= *(void *)(a1 + 24))
    {
      uint64_t v13 = sub_2167FF868((uint64_t *)(a1 + 8), &v26);
    }
    else
    {
      sub_2167FF990(a1 + 24, *(void *)(a1 + 16), &v26);
      uint64_t v13 = v12 + 56;
      *(void *)(a1 + 16) = v12 + 56;
    }
    *(void *)(a1 + 16) = v13;
  }
  sub_2167FB780((uint64_t)&v30, *(void **)v31);
  if (v28)
  {
    double v29 = v28;
    operator delete(v28);
  }
}

void sub_2167FE3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  v7.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  sub_2167FCE1C(v5 - 104);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::XformSample::getMatrix(Alembic::AbcGeom::v12::XformSample *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  uint64_t v3 = *((void *)this + 1);
  if (*((void *)this + 2) != v3)
  {
    unint64_t v4 = 0;
    double v5 = 1.0;
    double v6 = 0.0;
    double v7 = 1.0;
    double v8 = 0.0;
    double v9 = 1.0;
    double v10 = 0.0;
    double v69 = 1.0;
    while (1)
    {
      double v11 = v6;
      double v12 = v5;
      long long v77 = 0u;
      long long v78 = 0u;
      double v76 = 1.0;
      double v79 = 1.0;
      long long v80 = 0u;
      long long v81 = 0u;
      *(_OWORD *)&v82[8] = 0u;
      long long v83 = 0u;
      *(void *)uint64_t v82 = 0x3FF0000000000000;
      double v84 = 1.0;
      uint64_t v13 = (int *)(v3 + 56 * v4);
      int v14 = *v13;
      char v71 = *((unsigned char *)v13 + 4);
      int v70 = v14;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      long long __p = 0;
      sub_21677CA50(&__p, *((const void **)v13 + 1), *((void *)v13 + 2), (uint64_t)(*((void *)v13 + 2) - *((void *)v13 + 1)) >> 3);
      sub_2167FF4E4(v75, (uint64_t)(v13 + 8));
      int Type = Alembic::AbcGeom::v12::XformOp::getType((Alembic::AbcGeom::v12::XformOp *)&v70);
      switch(Type)
      {
        case 3:
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          double v18 = &v76;
          do
          {
            for (uint64_t i = 0; i != 4; ++i)
              v18[i] = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, v16 + i);
            ++v17;
            v16 += 4;
            v18 += 4;
          }
          while (v17 != 4);
          goto LABEL_19;
        case 4:
          double ChannelValue = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, 0);
          __double2 v24 = __sincos_stret(ChannelValue * 3.14159265 / 180.0);
          double v76 = v24.__cosval + 1.0 - v24.__cosval;
          *(double *)&long long v77 = v24.__sinval * 0.0 + (1.0 - v24.__cosval) * 0.0;
          *((double *)&v77 + 1) = v24.__sinval * -0.0 + (1.0 - v24.__cosval) * 0.0;
          *(void *)&long long v78 = 0;
          *((double *)&v78 + 1) = *((double *)&v77 + 1);
          double v79 = v24.__cosval + (1.0 - v24.__cosval) * 0.0;
          *(double *)&long long v80 = v24.__sinval + (1.0 - v24.__cosval) * 0.0;
          *((void *)&v80 + 1) = 0;
          *(double *)&long long v81 = *(double *)&v77;
          *((double *)&v81 + 1) = -(v24.__sinval - (1.0 - v24.__cosval) * 0.0);
          *(double *)uint64_t v82 = v79;
          goto LABEL_16;
        case 5:
          double v25 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, 0);
          __double2 v26 = __sincos_stret(v25 * 3.14159265 / 180.0);
          double v76 = v26.__cosval + (1.0 - v26.__cosval) * 0.0;
          *(double *)&long long v77 = v26.__sinval * 0.0 + (1.0 - v26.__cosval) * 0.0;
          *((double *)&v77 + 1) = -(v26.__sinval - (1.0 - v26.__cosval) * 0.0);
          *(void *)&long long v78 = 0;
          *((double *)&v78 + 1) = v26.__sinval * -0.0 + (1.0 - v26.__cosval) * 0.0;
          double v79 = v26.__cosval + 1.0 - v26.__cosval;
          *(double *)&long long v80 = *(double *)&v77;
          *((void *)&v80 + 1) = 0;
          *(double *)&long long v81 = v26.__sinval + (1.0 - v26.__cosval) * 0.0;
          *((double *)&v81 + 1) = *((double *)&v78 + 1);
          *(double *)uint64_t v82 = v76;
          goto LABEL_16;
        case 6:
          double v27 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, 0);
          __double2 v28 = __sincos_stret(v27 * 3.14159265 / 180.0);
          double v76 = v28.__cosval + (1.0 - v28.__cosval) * 0.0;
          *(double *)&long long v77 = v28.__sinval + (1.0 - v28.__cosval) * 0.0;
          *((double *)&v77 + 1) = v28.__sinval * -0.0 + (1.0 - v28.__cosval) * 0.0;
          *(void *)&long long v78 = 0;
          *((double *)&v78 + 1) = -(v28.__sinval - (1.0 - v28.__cosval) * 0.0);
          double v79 = v76;
          *(double *)&long long v80 = v28.__sinval * 0.0 + (1.0 - v28.__cosval) * 0.0;
          *((void *)&v80 + 1) = 0;
          *(double *)&long long v81 = *(double *)&v80;
          *((double *)&v81 + 1) = *((double *)&v77 + 1);
          *(double *)uint64_t v82 = v28.__cosval + 1.0 - v28.__cosval;
LABEL_16:
          long long v22 = 0uLL;
          goto LABEL_17;
        default:
          double v67 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, 0);
          double v20 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, 1uLL);
          double v21 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, 2uLL);
          if (Type == 2)
          {
            double v55 = Alembic::AbcGeom::v12::XformOp::getChannelValue((Alembic::AbcGeom::v12::XformOp *)&v70, 3uLL);
            double v56 = v20 * v20 + v67 * v67 + v21 * v21;
            double v66 = v9;
            if (v56 >= 4.45014772e-308)
            {
              double v57 = sqrt(v56);
              goto LABEL_25;
            }
            double v62 = -v67;
            if (v67 >= 0.0) {
              double v62 = v67;
            }
            double v63 = -v20;
            if (v20 >= 0.0) {
              double v63 = v20;
            }
            if (v21 >= 0.0) {
              double v64 = v21;
            }
            else {
              double v64 = -v21;
            }
            if (v62 >= v63) {
              double v65 = v62;
            }
            else {
              double v65 = v63;
            }
            if (v65 < v64) {
              double v65 = v64;
            }
            if (v65 == 0.0) {
              goto LABEL_43;
            }
            double v57 = v65 * sqrt(v63 / v65 * (v63 / v65) + v62 / v65 * (v62 / v65) + v64 / v65 * (v64 / v65));
LABEL_25:
            if (v57 == 0.0)
            {
LABEL_43:
              double v60 = 0.0;
              double v58 = 0.0;
              double v59 = 0.0;
            }
            else
            {
              double v58 = v20 / v57;
              double v59 = v21 / v57;
              double v60 = v67 / v57;
            }
            __double2 v61 = __sincos_stret(v55 * 3.14159265 / 180.0);
            double v76 = v61.__cosval + v60 * v60 * (1.0 - v61.__cosval);
            *(double *)&long long v77 = v61.__sinval * v59 + v60 * v58 * (1.0 - v61.__cosval);
            *((double *)&v77 + 1) = v60 * v59 * (1.0 - v61.__cosval) - v58 * v61.__sinval;
            *(void *)&long long v78 = 0;
            *((double *)&v78 + 1) = v60 * v58 * (1.0 - v61.__cosval) - v59 * v61.__sinval;
            double v79 = v61.__cosval + v58 * v58 * (1.0 - v61.__cosval);
            *(double *)&long long v80 = v61.__sinval * v60 + v58 * v59 * (1.0 - v61.__cosval);
            *((void *)&v80 + 1) = 0;
            *(double *)&long long v81 = v61.__sinval * v58 + v60 * v59 * (1.0 - v61.__cosval);
            *((double *)&v81 + 1) = v58 * v59 * (1.0 - v61.__cosval) - v60 * v61.__sinval;
            *(double *)uint64_t v82 = v61.__cosval + v59 * v59 * (1.0 - v61.__cosval);
            *(_OWORD *)&v82[8] = 0u;
            long long v83 = 0u;
            double v9 = v66;
            goto LABEL_18;
          }
          if (Type == 1)
          {
            long long v77 = 0u;
            long long v78 = 0u;
            double v76 = 1.0;
            double v79 = 1.0;
            long long v80 = 0u;
            long long v81 = 0u;
            *(_OWORD *)uint64_t v82 = xmmword_21740A580;
            *(double *)&v82[16] = v67;
            *(double *)&long long v83 = v20;
            *((double *)&v83 + 1) = v21;
          }
          else
          {
            if (Type) {
              goto LABEL_19;
            }
            long long v22 = 0uLL;
            long long v77 = 0u;
            long long v78 = 0u;
            double v76 = v67;
            double v79 = v20;
            long long v80 = 0u;
            long long v81 = 0u;
            *(double *)uint64_t v82 = v21;
LABEL_17:
            *(_OWORD *)&v82[8] = v22;
            long long v83 = v22;
          }
LABEL_18:
          double v84 = 1.0;
LABEL_19:
          double v30 = *(double *)(a2 + 24);
          double v29 = *(double *)(a2 + 32);
          double v31 = v12;
          double v33 = *(double *)(a2 + 56);
          double v32 = *(double *)(a2 + 64);
          double v34 = *(double *)(a2 + 96);
          double v35 = *(double *)(a2 + 104);
          double v5 = *(double *)&v77 * v29 + v76 * v12 + *((double *)&v77 + 1) * v32 + *(double *)&v78 * v34;
          double v36 = v11;
          double v37 = *(double *)(a2 + 72);
          double v6 = *(double *)&v77 * v7 + v76 * v11 + *((double *)&v77 + 1) * v37 + *(double *)&v78 * v35;
          double v38 = *(double *)(a2 + 16);
          double v39 = *(double *)(a2 + 112);
          double v40 = *(double *)&v77 * v8 + v76 * v38 + *((double *)&v77 + 1) * v9 + *(double *)&v78 * v39;
          double v41 = *(double *)&v77 * v33 + v76 * v30 + *((double *)&v77 + 1) * v10 + *(double *)&v78 * v69;
          double v42 = v29 * v79 + *((double *)&v78 + 1) * v31 + *(double *)&v80 * v32 + *((double *)&v80 + 1) * v34;
          double v43 = v7 * v79 + *((double *)&v78 + 1) * v11 + *(double *)&v80 * v37 + *((double *)&v80 + 1) * v35;
          double v44 = v8 * v79 + *((double *)&v78 + 1) * v38 + *(double *)&v80 * v9 + *((double *)&v80 + 1) * v39;
          double v45 = v33 * v79 + *((double *)&v78 + 1) * v30 + *(double *)&v80 * v10 + *((double *)&v80 + 1) * v69;
          double v46 = v29 * *((double *)&v81 + 1) + *(double *)&v81 * v31 + *(double *)v82 * v32 + *(double *)&v82[8] * v34;
          double v47 = v7 * *((double *)&v81 + 1) + *(double *)&v81 * v36 + *(double *)v82 * v37 + *(double *)&v82[8] * v35;
          double v48 = v9;
          double v9 = v8 * *((double *)&v81 + 1) + *(double *)&v81 * v38 + *(double *)v82 * v9 + *(double *)&v82[8] * v39;
          double v49 = v10;
          double v10 = v33 * *((double *)&v81 + 1) + *(double *)&v81 * v30 + *(double *)v82 * v10 + *(double *)&v82[8] * v69;
          double v50 = v84;
          double v51 = v29 * *(double *)&v83 + *(double *)&v82[16] * v31 + *((double *)&v83 + 1) * v32 + v84 * v34;
          double v52 = v7 * *(double *)&v83 + *(double *)&v82[16] * v36 + *((double *)&v83 + 1) * v37 + v84 * v35;
          double v53 = v8 * *(double *)&v83 + *(double *)&v82[16] * v38 + *((double *)&v83 + 1) * v48 + v84 * v39;
          double v54 = v33 * *(double *)&v83 + *(double *)&v82[16] * v30 + *((double *)&v83 + 1) * v49;
          *(double *)a2 = v5;
          *(double *)(a2 + 8) = v6;
          *(double *)(a2 + 16) = v40;
          *(double *)(a2 + 24) = v41;
          *(double *)(a2 + 32) = v42;
          *(double *)(a2 + 40) = v43;
          *(double *)(a2 + 48) = v44;
          *(double *)(a2 + 56) = v45;
          *(double *)(a2 + 64) = v46;
          *(double *)(a2 + 72) = v47;
          *(double *)(a2 + 80) = v9;
          *(double *)(a2 + 88) = v10;
          *(double *)(a2 + 96) = v51;
          *(double *)(a2 + 104) = v52;
          *(double *)(a2 + 112) = v53;
          *(double *)(a2 + 120) = v54 + v50 * v69;
          double v69 = v54 + v50 * v69;
          sub_2167FB780((uint64_t)v75, (void *)v75[1]);
          if (__p)
          {
            uint64_t v73 = __p;
            operator delete(__p);
          }
          ++v4;
          uint64_t v3 = *((void *)this + 1);
          double v7 = v43;
          double v8 = v44;
          if (v4 >= 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2) - v3) >> 3)) {
            return;
          }
          break;
      }
    }
  }
}

void sub_2167FEB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19)
{
}

double Alembic::AbcGeom::v12::XformSample::getTranslation@<D0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, uint64_t a2@<X8>)
{
  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v4);
  double result = v5;
  *(_OWORD *)a2 = v4[6];
  *(double *)(a2 + 16) = result;
  return result;
}

BOOL Alembic::AbcGeom::v12::XformSample::getScale@<W0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, float64x2_t *a2@<X8>)
{
  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v4);
  return sub_2167FEC20(v4, a2, 1);
}

BOOL sub_2167FEC20(_OWORD *a1, float64x2_t *a2, int a3)
{
  long long v3 = a1[1];
  v8[0] = *a1;
  v8[1] = v3;
  long long v4 = a1[3];
  v8[2] = a1[2];
  v8[3] = v4;
  long long v5 = a1[5];
  void v8[4] = a1[4];
  v8[5] = v5;
  long long v6 = a1[7];
  v8[6] = a1[6];
  v8[7] = v6;
  return sub_2167FFD0C((uint64_t)v8, a2, v9, a3);
}

double *Alembic::AbcGeom::v12::XformSample::getAxis@<X0>(Alembic::AbcGeom::v12::XformSample *this@<X0>, double *a2@<X8>)
{
  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v13);
  double result = sub_2167FED5C(v13, &v14);
  double v4 = v16 * v16 + v15 * v15 + v17 * v17;
  if (v4 < 4.45014772e-308)
  {
    double v9 = -v15;
    if (v15 >= 0.0) {
      double v9 = v15;
    }
    double v10 = -v16;
    if (v16 >= 0.0) {
      double v10 = v16;
    }
    if (v17 >= 0.0) {
      double v11 = v17;
    }
    else {
      double v11 = -v17;
    }
    if (v9 >= v10) {
      double v12 = v9;
    }
    else {
      double v12 = v10;
    }
    if (v12 < v11) {
      double v12 = v11;
    }
    if (v12 == 0.0) {
      goto LABEL_20;
    }
    double v5 = v12 * sqrt(v10 / v12 * (v10 / v12) + v9 / v12 * (v9 / v12) + v11 / v12 * (v11 / v12));
  }
  else
  {
    double v5 = sqrt(v4);
  }
  if (v5 == 0.0)
  {
LABEL_20:
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    goto LABEL_5;
  }
  double v6 = v15 / v5;
  double v7 = v16 / v5;
  double v8 = v17 / v5;
LABEL_5:
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  return result;
}

double *sub_2167FED5C@<X0>(double *result@<X0>, double *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  double v2 = result[5];
  double v3 = result[10];
  double v4 = *result + v2 + v3;
  if (v4 <= 0.0)
  {
    uint64_t v10 = v2 > *result;
    if (v3 > result[4 * v10 + v10]) {
      uint64_t v10 = 2;
    }
    uint64_t v11 = dword_21740A590[v10];
    uint64_t v12 = dword_21740A590[v11];
    uint64_t v13 = &result[4 * v10];
    double v14 = &result[4 * v11];
    double v15 = &result[4 * v12];
    double v16 = sqrt(v13[v10] - (v14[v11] + v15[v12]) + 1.0);
    *(double *)&v17[v10] = v16 * 0.5;
    if (v16 != 0.0) {
      double v16 = 0.5 / v16;
    }
    double v18 = (v14[v12] - v15[v11]) * v16;
    *(double *)&v17[v11] = v16 * (v13[v11] + v14[v10]);
    *(double *)&v17[v12] = v16 * (v13[v12] + v15[v10]);
    double v7 = *(double *)v17;
    double v8 = *(double *)&v17[1];
    double v9 = *(double *)&v17[2];
    *a2 = v18;
  }
  else
  {
    double v5 = sqrt(v4 + 1.0);
    *a2 = v5 * 0.5;
    double v6 = 0.5 / v5;
    double v7 = 0.5 / v5 * (result[6] - result[9]);
    double v8 = v6 * (result[8] - result[2]);
    double v9 = v6 * (result[1] - result[4]);
  }
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  return result;
}

long double Alembic::AbcGeom::v12::XformSample::getAngle(Alembic::AbcGeom::v12::XformSample *this)
{
  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v9);
  sub_2167FED5C(v9, &v10);
  double v2 = v11;
  double v1 = v12;
  double v3 = v1 * v1 + v2 * v2 + v13 * v13;
  if (v3 < 4.45014772e-308)
  {
    if (v11 < 0.0) {
      double v2 = -v11;
    }
    if (v12 < 0.0) {
      double v1 = -v12;
    }
    double v7 = -v13;
    if (v13 >= 0.0) {
      double v7 = v13;
    }
    if (v2 >= v1) {
      double v8 = v2;
    }
    else {
      double v8 = v1;
    }
    if (v8 < v7) {
      double v8 = v7;
    }
    if (v8 == 0.0) {
      double v4 = 0.0;
    }
    else {
      double v4 = v8 * sqrt(v1 / v8 * (v1 / v8) + v2 / v8 * (v2 / v8) + v7 / v8 * (v7 / v8));
    }
  }
  else
  {
    double v4 = sqrt(v3);
  }
  long double v5 = atan2(v4, v10);
  return (v5 + v5) * 57.2957795;
}

double Alembic::AbcGeom::v12::XformSample::getXRotation(Alembic::AbcGeom::v12::XformSample *this)
{
  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v2);
  sub_2167FAE40(v2, (uint64_t)v3);
  return v3[0] * 57.2957795;
}

double Alembic::AbcGeom::v12::XformSample::getYRotation(Alembic::AbcGeom::v12::XformSample *this)
{
  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v2);
  sub_2167FAE40(v2, (uint64_t)v3);
  return v4 * 57.2957795;
}

double Alembic::AbcGeom::v12::XformSample::getZRotation(Alembic::AbcGeom::v12::XformSample *this)
{
  Alembic::AbcGeom::v12::XformSample::getMatrix(this, (uint64_t)v2);
  sub_2167FAE40(v2, (uint64_t)v3);
  return v4 * 57.2957795;
}

uint64_t Alembic::AbcGeom::v12::XformSample::freezeTopology(uint64_t this)
{
  *(unsigned char *)(this + 33) = 1;
  return this;
}

void Alembic::AbcGeom::v12::XformSample::clear(Alembic::AbcGeom::v12::XformSample *this)
{
  *((unsigned char *)this + 33) = 0;
  sub_2167FF0B0((uint64_t *)this + 1, 0);
  *(_DWORD *)this = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 32) = 1;
}

void sub_2167FF0B0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_216800218(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v3 -= 56;
      sub_2167FFC3C((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void Alembic::AbcGeom::v12::XformSample::reset(Alembic::AbcGeom::v12::XformSample *this)
{
  *((unsigned char *)this + 33) = 0;
  sub_2167FF0B0((uint64_t *)this + 1, 0);
  *(_DWORD *)this = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 32) = 1;
}

BOOL Alembic::AbcGeom::v12::XformSample::isTopologyEqual(Alembic::AbcGeom::v12::XformSample *this, const Alembic::AbcGeom::v12::XformSample *a2)
{
  uint64_t v3 = (Alembic::AbcGeom::v12::XformOp *)*((void *)this + 1);
  double v2 = (Alembic::AbcGeom::v12::XformOp *)*((void *)this + 2);
  unint64_t v4 = (Alembic::AbcGeom::v12::XformOp *)*((void *)a2 + 1);
  if (v2 - v3 != *((void *)a2 + 2) - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  do
  {
    int Type = Alembic::AbcGeom::v12::XformOp::getType(v3);
    BOOL v7 = Type == Alembic::AbcGeom::v12::XformOp::getType(v4);
    BOOL result = v7;
    if (!v7) {
      break;
    }
    uint64_t v3 = (Alembic::AbcGeom::v12::XformOp *)((char *)v3 + 56);
    unint64_t v4 = (Alembic::AbcGeom::v12::XformOp *)((char *)v4 + 56);
  }
  while (v3 != *((Alembic::AbcGeom::v12::XformOp **)this + 2));
  return result;
}

uint64_t **sub_2167FF228(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  BOOL v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    BOOL v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      double v8 = (uint64_t *)v6[1];
    }
    else {
      double v8 = v6;
    }
    double v14 = result;
    double v15 = v8;
    double v16 = v8;
    if (v8)
    {
      double v15 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        double v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_2167FF38C(v5, (uint64_t)v8);
          double v8 = v15;
          double v16 = v15;
          if (v15) {
            double v15 = sub_216799E28((uint64_t)v15);
          }
          long double v10 = (unsigned int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              long double v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              double v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          double v9 = a2;
        }
        while (a2 != a3);
      }
    }
    BOOL result = (uint64_t **)sub_2167FF3FC((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)sub_2167FF454(v5, a2 + 7);
      double v12 = (unsigned int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          double v13 = v12;
          double v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          double v13 = (unsigned int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2167FF378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167FF3FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2167FF38C(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        BOOL v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    BOOL v5 = v3 + 1;
  }
  else
  {
    BOOL v5 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t sub_2167FF3FC(uint64_t a1)
{
  sub_2167FB780(*(void *)a1, *(void **)(a1 + 16));
  double v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        double v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_2167FB780(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_2167FF454(uint64_t **a1, unsigned int *a2)
{
  unint64_t v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  unint64_t v6 = a1 + 1;
  BOOL v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        BOOL v7 = (uint64_t *)*v7;
        double v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      BOOL v7 = (uint64_t *)v7[1];
    }
    while (v7);
    double v8 = v6 + 1;
  }
  else
  {
    double v8 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t *sub_2167FF4E4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2167FF53C(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_2167FF524(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2167FF53C(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unsigned int v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      BOOL result = sub_2167FF5C8(v5, v6, v4 + 7, v4 + 7);
      BOOL v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          double v8 = v7;
          BOOL v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          double v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_2167FF5C8(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  unint64_t v6 = sub_2167FF650(a1, a2, &v11, &v10, a3);
  BOOL v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    double v8 = (uint64_t **)v6;
    BOOL v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_21677B358(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_2167FF650(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  unsigned int v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    double v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      double v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        double v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unsigned int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unsigned int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      double v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unsigned int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unsigned int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      double v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

double sub_2167FF7F8(double *a1)
{
  double v1 = *a1;
  double v2 = a1[1];
  if (*a1 < 0.0) {
    double v1 = -*a1;
  }
  if (v2 < 0.0) {
    double v2 = -v2;
  }
  double v3 = a1[2];
  double v4 = -v3;
  if (v3 >= 0.0) {
    double v4 = a1[2];
  }
  if (v1 >= v2) {
    double v5 = v1;
  }
  else {
    double v5 = v2;
  }
  if (v5 < v4) {
    double v5 = v4;
  }
  if (v5 == 0.0) {
    return 0.0;
  }
  else {
    return v5 * sqrt(v2 / v5 * (v2 / v5) + v1 / v5 * (v1 / v5) + v4 / v5 * (v4 / v5));
  }
}

uint64_t sub_2167FF868(uint64_t *a1, int *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  BOOL v14 = a1 + 2;
  if (v6) {
    unsigned int v7 = (char *)sub_2167B421C((uint64_t)(a1 + 2), v6);
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[56 * v3];
  double v13 = &v7[56 * v6];
  sub_2167FF990((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  double v12 = v11 + 56;
  sub_2167FFA14(a1, &v10);
  uint64_t v8 = a1[1];
  sub_2167FFC90(&v10);
  return v8;
}

void sub_2167FF97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167FFC90((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2167FF990(uint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *a3;
  *(unsigned char *)(a2 + 4) = *((unsigned char *)a3 + 4);
  *(_DWORD *)a2 = v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_21677CA50((void *)(a2 + 8), *((const void **)a3 + 1), *((void *)a3 + 2), (uint64_t)(*((void *)a3 + 2) - *((void *)a3 + 1)) >> 3);
  return sub_2167FF4E4((uint64_t *)(a2 + 32), (uint64_t)(a3 + 8));
}

void sub_2167FF9F8(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2167FFA14(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2167FFA8C((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2167FFA8C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    BOOL v9 = a3;
    do
    {
      v9 -= 14;
      sub_2167FFB44(a1, v7 - 56, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_2167FFBB0((uint64_t)v13);
  return v11;
}

void sub_2167FFB44(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  *(unsigned char *)(a2 + 4) = *((unsigned char *)a3 + 4);
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 2);
  *(void *)(a2 + 24) = *((void *)a3 + 3);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *(void *)(a2 + 32) = *((void *)a3 + 4);
  unint64_t v4 = a3 + 10;
  uint64_t v5 = *((void *)a3 + 5);
  *(void *)(a2 + 40) = v5;
  uint64_t v6 = a2 + 40;
  uint64_t v7 = *((void *)a3 + 6);
  *(void *)(a2 + 48) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *((void *)a3 + 4) = v4;
    *unint64_t v4 = 0;
    *((void *)a3 + 6) = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v6;
  }
}

uint64_t sub_2167FFBB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2167FFBE8((uint64_t *)a1);
  }
  return a1;
}

void sub_2167FFBE8(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2167FFC3C(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void sub_2167FFC3C(uint64_t a1, uint64_t a2)
{
  sub_2167FB780(a2 + 32, *(void **)(a2 + 40));
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

void **sub_2167FFC90(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_2167FFCC4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    sub_2167FFC3C(v4, i - 56);
  }
}

BOOL sub_2167FFD0C(uint64_t a1, float64x2_t *a2, double *a3, int a4)
{
  uint64_t v8 = 0;
  uint64_t v70 = *MEMORY[0x263EF8340];
  double v9 = *(double *)a1;
  double v10 = *(double *)(a1 + 8);
  double v11 = *(double *)(a1 + 16);
  double v63 = *(double *)a1;
  double v64 = v10;
  double v65 = v11;
  double v12 = *(double *)(a1 + 48);
  double v13 = &v63;
  long long v66 = *(_OWORD *)(a1 + 32);
  double v67 = v12;
  double v14 = *(double *)(a1 + 80);
  long long v68 = *(_OWORD *)(a1 + 64);
  double v69 = v14;
  double v15 = 0.0;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      double v17 = v13[i];
      if (v17 <= 0.0) {
        double v17 = -v17;
      }
      if (v17 > v15) {
        double v15 = v17;
      }
    }
    ++v8;
    v13 += 3;
  }
  while (v8 != 3);
  double v62 = v15;
  if (v15 == 0.0)
  {
LABEL_14:
    double v22 = v10 * v10 + v9 * v9 + v11 * v11;
    if (v22 < 4.45014772e-308) {
      double v23 = sub_2167FF7F8(&v63);
    }
    else {
      double v23 = sqrt(v22);
    }
    a2->f64[0] = v23;
    BOOL result = sub_21680010C(a2->f64, (uint64_t)&v63, a4);
    if (result)
    {
      double v24 = a2->f64[0];
      double v25 = v63 / a2->f64[0];
      double v26 = v64 / a2->f64[0];
      double v63 = v25;
      double v64 = v26;
      double v27 = *(double *)&v66;
      double v28 = v65 / v24;
      double v29 = *((double *)&v66 + 1);
      double v30 = v67;
      double v31 = v26 * *((double *)&v66 + 1) + v25 * *(double *)&v66 + v28 * v67;
      *a3 = v31;
      double v65 = v28;
      *(double *)&long long v66 = v27 - v25 * v31;
      *((double *)&v66 + 1) = v29 - v26 * v31;
      double v67 = v30 - v28 * v31;
      double v32 = *((double *)&v66 + 1) * *((double *)&v66 + 1) + *(double *)&v66 * *(double *)&v66 + v67 * v67;
      double v33 = v32 < 4.45014772e-308 ? sub_2167FF7F8((double *)&v66) : sqrt(v32);
      a2->f64[1] = v33;
      double v34 = &a2->f64[1];
      BOOL result = sub_21680010C(&a2->f64[1], (uint64_t)&v66, a4);
      if (result)
      {
        double v35 = *v34;
        double v36 = v65;
        double v38 = *((double *)&v66 + 1) / *v34;
        *(double *)&long long v66 = *(double *)&v66 / *v34;
        double v37 = *(double *)&v66;
        *((double *)&v66 + 1) = v38;
        double v39 = v67 / v35;
        double v40 = v63;
        double v41 = v64;
        long long v42 = v68;
        double v43 = v69;
        double v44 = v64 * *((double *)&v68 + 1) + v63 * *(double *)&v68 + v65 * v69;
        *a3 = *a3 / v35;
        a3[1] = v44;
        double v45 = *(double *)&v42 - v40 * v44;
        double v46 = *((double *)&v42 + 1) - v41 * v44;
        double v47 = v43 - v36 * v44;
        double v48 = v38 * v46 + v37 * v45 + v39 * v47;
        a3[2] = v48;
        double v67 = v39;
        *(double *)&long long v68 = v45 - v37 * v48;
        *((double *)&v68 + 1) = v46 - v38 * v48;
        double v69 = v47 - v39 * v48;
        double v49 = *((double *)&v68 + 1) * *((double *)&v68 + 1) + *(double *)&v68 * *(double *)&v68 + v69 * v69;
        double v50 = v49 < 4.45014772e-308 ? sub_2167FF7F8((double *)&v68) : sqrt(v49);
        a2[1].f64[0] = v50;
        f64 = a2[1].f64;
        BOOL result = sub_21680010C(a2[1].f64, (uint64_t)&v68, a4);
        if (result)
        {
          double v52 = *f64;
          double v53 = *(double *)&v68 / *f64;
          double v55 = v69 / *f64;
          *((double *)&v68 + 1) = *((double *)&v68 + 1) / *f64;
          double v54 = *((double *)&v68 + 1);
          double v69 = v55;
          double v56 = a3[2];
          a3[1] = a3[1] / v52;
          a3[2] = v56 / *f64;
          *(double *)&long long v68 = v53;
          if (v64 * (v67 * v53 - *(double *)&v66 * v55)
             + v63 * (*((double *)&v66 + 1) * v55 - v67 * v54)
             + v65 * (*(double *)&v66 * v54 - *((double *)&v66 + 1) * v53) < 0.0)
          {
            uint64_t v57 = 0;
            double v58 = &v65;
            do
            {
              a2->f64[v57] = -a2->f64[v57];
              *((float64x2_t *)v58 - 1) = vnegq_f64(*(float64x2_t *)(v58 - 2));
              *double v58 = -*v58;
              v58 += 3;
              ++v57;
            }
            while (v57 != 3);
          }
          uint64_t v59 = 0;
          double v60 = (double *)(a1 + 16);
          do
          {
            *((_OWORD *)v60 - 1) = *(_OWORD *)((char *)&v63 + v59);
            *double v60 = *(double *)((char *)&v65 + v59);
            v60 += 4;
            v59 += 24;
          }
          while (v59 != 72);
          double v61 = v62;
          *a2 = vmulq_n_f64(*a2, v62);
          a2[1].f64[0] = v61 * a2[1].f64[0];
          return 1;
        }
      }
    }
  }
  else
  {
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = (float64x2_t *)((char *)&v63 + v18);
      BOOL result = sub_21680010C(&v62, (uint64_t)&v63 + v18, a4);
      if (!result) {
        break;
      }
      double v21 = v62;
      *uint64_t v19 = vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v62, 0));
      v19[1].f64[0] = v19[1].f64[0] / v21;
      v18 += 24;
      if (v18 == 72)
      {
        double v9 = v63;
        double v10 = v64;
        double v11 = v65;
        goto LABEL_14;
      }
    }
  }
  return result;
}

BOOL sub_21680010C(double *a1, uint64_t a2, int a3)
{
  unint64_t v3 = 0;
  BOOL v4 = 0;
  double v5 = *a1;
  if (*a1 <= 0.0) {
    double v5 = -*a1;
  }
  while (1)
  {
    if (v5 < 1.0)
    {
      double v6 = *(double *)(a2 + 8 * v3);
      if (v6 <= 0.0) {
        double v6 = -v6;
      }
      if (v6 >= v5 * 1.79769313e308) {
        break;
      }
    }
    BOOL v4 = v3++ > 1;
    if (v3 == 3) {
      return 1;
    }
  }
  if (a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2168001E4(exception, "Cannot remove zero scaling from matrix.");
    __cxa_throw(exception, (struct type_info *)off_264293920, MEMORY[0x263F8C058]);
  }
  return v4;
}

void sub_2168001D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2168001E4(std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
  return result;
}

void **sub_216800218(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (Alembic::AbcGeom::v12::XformOp *)*(result - 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      double v13 = (Alembic::AbcGeom::v12::XformOp *)((char *)v7 + 56 * a2);
      uint64_t v14 = 56 * a2;
      do
      {
        BOOL result = (void **)Alembic::AbcGeom::v12::XformOp::XformOp(v7);
        uint64_t v7 = (Alembic::AbcGeom::v12::XformOp *)((char *)v7 + 56);
        v14 -= 56;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    double v21 = result;
    if (v11) {
      double v12 = (char *)sub_2167B421C((uint64_t)result, v11);
    }
    else {
      double v12 = 0;
    }
    double v15 = &v12[56 * v8];
    v18[0] = v12;
    v18[1] = v15;
    uint64_t v19 = v15;
    uint64_t v20 = &v12[56 * v11];
    uint64_t v16 = 56 * a2;
    double v17 = &v15[56 * a2];
    do
    {
      Alembic::AbcGeom::v12::XformOp::XformOp((Alembic::AbcGeom::v12::XformOp *)v15);
      v15 += 56;
      v16 -= 56;
    }
    while (v16);
    uint64_t v19 = v17;
    sub_2167FFA14(a1, v18);
    return sub_2167FFC90(v18);
  }
  return result;
}

void sub_216800380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167FFC90((void **)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::IXformSchema::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v96 = a1 + 8;
  uint64_t v97 = "IXformSchema::init()";
  __p[1] = 0;
  long long v66 = 0;
  __p[0] = &__p[1];
  int v91 = 2;
  sub_2167898D0(v92, (const void ***)__p);
  v92[3] = 0;
  uint64_t v93 = 0;
  int v94 = 0;
  uint64_t v95 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a2, (uint64_t)&v91);
  sub_2167A030C(a3, (uint64_t)&v91);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".childBnds");
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  uint64_t v9 = v8;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v9) {
      goto LABEL_17;
    }
  }
  else if (!v8)
  {
    goto LABEL_17;
  }
  uint64_t v86 = v7;
  uint64_t v87 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v72) = 0;
  LODWORD(v73) = 0;
  int v84 = 0;
  int v85 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v88, &v86, &v72, &v84);
  sub_216779094(&v81, ".childBnds");
  sub_2167B10BC((uint64_t)__p, (int *)&v88, (uint64_t)&v81, a2, a3);
  *(_DWORD *)(a1 + 56) = __p[0];
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)&__p[1]);
  uint64_t v11 = v67;
  unint64_t v10 = v68;
  if (v68) {
    atomic_fetch_add_explicit(v68 + 1, 1uLL, memory_order_relaxed);
  }
  double v12 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)__p);
  if (SHIBYTE(v83) < 0) {
    operator delete(v81);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v88);
  if (v87) {
    sub_216784EC4(v87);
  }
LABEL_17:
  sub_216779094(__p, ".inherits");
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  uint64_t v14 = v13;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v14) {
      goto LABEL_31;
    }
  }
  else if (!v13)
  {
    goto LABEL_31;
  }
  uint64_t v79 = v7;
  long long v80 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v72) = 0;
  LODWORD(v73) = 0;
  int v84 = 0;
  int v85 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v88, &v79, &v72, &v84);
  sub_216779094(&v81, ".inherits");
  sub_2168023AC((uint64_t)__p, (int *)&v88, (uint64_t)&v81, a2, a3);
  *(_DWORD *)(a1 + 120) = __p[0];
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)&__p[1]);
  uint64_t v16 = v67;
  double v15 = v68;
  if (v68) {
    atomic_fetch_add_explicit(v68 + 1, 1uLL, memory_order_relaxed);
  }
  double v17 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v16;
  *(void *)(a1 + 160) = v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)__p);
  if (SHIBYTE(v83) < 0) {
    operator delete(v81);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v88);
  if (v80) {
    sub_216784EC4(v80);
  }
LABEL_31:
  *(unsigned char *)(a1 + 320) = 0;
  sub_216779094(__p, ".vals");
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  uint64_t v19 = v18;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v19) {
      goto LABEL_41;
    }
  }
  else if (!v18)
  {
    goto LABEL_41;
  }
  if (*(_DWORD *)(v19 + 24) == 1)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v7 + 88))(__p, v7, v19);
  }
  else
  {
    *(unsigned char *)(a1 + 320) = 1;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v7 + 96))(__p, v7, v19);
  }
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  double v21 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v20;
  if (v21)
  {
    sub_216784EC4(v21);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
LABEL_41:
  *(unsigned char *)(a1 + 265) = 1;
  sub_216779094(__p, "isNotConstantIdentity");
  uint64_t v22 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  if (SHIBYTE(v66) < 0) {
    operator delete(__p[0]);
  }
  if (v22) {
    *(unsigned char *)(a1 + 265) = 0;
  }
  *(unsigned char *)(a1 + 264) = 1;
  uint64_t v23 = *(void *)(a1 + 104);
  if (!v23) {
    goto LABEL_52;
  }
  if (*(unsigned char *)(a1 + 320)) {
    (*(void (**)(void **__return_ptr))(*(void *)v23 + 48))(__p);
  }
  else {
    (*(void (**)(void **__return_ptr))(*(void *)v23 + 40))(__p);
  }
  *(unsigned char *)(a1 + 264) = (*(uint64_t (**)(void *))(*(void *)__p[0] + 72))(__p[0]);
  if (__p[1]) {
    sub_216784EC4((std::__shared_weak_count *)__p[1]);
  }
  if (*(unsigned char *)(a1 + 264))
  {
LABEL_52:
    if (*(char *)(a1 + 151) < 0)
    {
      if (!*(void *)(a1 + 136)) {
        goto LABEL_56;
      }
    }
    else if (!*(unsigned char *)(a1 + 151))
    {
LABEL_56:
      if (*(void *)(a1 + 152))
      {
        char isConstant = Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::Abc::v12::IScalarProperty *)(a1 + 120));
        goto LABEL_60;
      }
    }
    char isConstant = 1;
    goto LABEL_60;
  }
  char isConstant = 0;
LABEL_60:
  *(unsigned char *)(a1 + 264) = isConstant;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  long long v81 = &v82;
  sub_216779094(__p, ".animChans");
  uint64_t v25 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  uint64_t v26 = v25;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v26) {
      goto LABEL_85;
    }
  }
  else if (!v25)
  {
    goto LABEL_85;
  }
  uint64_t v77 = v7;
  long long v78 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v84 = 0;
  int v85 = 0;
  int v75 = 0;
  int v76 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v88, &v77, &v84, &v75);
  sub_216779094(&v72, ".animChans");
  int v70 = 0;
  int v71 = 0;
  v69[0] = 0;
  v69[2] = 0;
  sub_2167BC7A0((uint64_t)__p, (int *)&v88, (uint64_t)&v72, &v70, v69);
  if (v74 < 0) {
    operator delete(v72);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v88);
  if (v78) {
    sub_216784EC4(v78);
  }
  if (Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)__p))
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v88 = (unsigned char *)(Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)__p) - 1);
    uint64_t v89 = 0;
    int v90 = 2;
    sub_2168013EC((uint64_t)__p, &v72, (uint64_t)&v88);
    double v27 = v72;
    if (v72)
    {
      for (unint64_t i = 0; ; ++i)
      {
        double v29 = (uint64_t *)v27[2];
        uint64_t v30 = v27[3] - (void)v29;
        if (v30)
        {
          unint64_t v31 = v30 >> 3;
          if (v31 <= 1) {
            unint64_t v31 = 1;
          }
          unint64_t v32 = 1;
          do
          {
            uint64_t v33 = *v29++;
            v32 *= v33;
            --v31;
          }
          while (v31);
        }
        else
        {
          unint64_t v32 = 0;
        }
        if (i >= v32) {
          break;
        }
        sub_2168029D4((uint64_t **)&v81, (unsigned int *)(*v27 + 4 * i), (_DWORD *)(*v27 + 4 * i));
        double v27 = v72;
      }
    }
    if (v73) {
      sub_216784EC4(v73);
    }
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)__p);
LABEL_85:
  sub_216779094(__p, ".ops");
  uint64_t v34 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  double v35 = (std::__shared_weak_count *)v34;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v35) {
      goto LABEL_119;
    }
  }
  else if (!v34)
  {
    goto LABEL_119;
  }
  sub_216779094(__p, ".ops");
  (*(void (**)(unsigned char **__return_ptr, uint64_t, void **))(*(void *)v7 + 88))(&v88, v7, __p);
  double v36 = v88;
  double v35 = v89;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v36) {
      goto LABEL_119;
    }
  }
  else if (!v36)
  {
    goto LABEL_119;
  }
  if ((*(uint64_t (**)(unsigned char *))(*(void *)v36 + 64))(v36))
  {
    uint64_t v37 = (*(uint64_t (**)(unsigned char *))(*(void *)v36 + 16))(v36);
    if (*(_DWORD *)(v37 + 56) != 1) {
      goto LABEL_147;
    }
    size_t v38 = *(unsigned __int8 *)(v37 + 60);
    double v60 = v35;
    sub_2167807A0(&v88, v38);
    (*(void (**)(unsigned char *, void, unsigned char *, void))(*(void *)v36 + 80))(v36, 0, v88, 0);
    if (v38)
    {
      for (uint64_t j = 0; j != v38; ++j)
      {
        Alembic::AbcGeom::v12::XformOp::XformOp((Alembic::AbcGeom::v12::XformOp *)__p, v88[j]);
        Alembic::AbcGeom::v12::XformSample::addOp((Alembic::AbcGeom::v12::XformSample *)(a1 + 272), (const Alembic::AbcGeom::v12::XformOp *)__p);
        sub_2167FB780((uint64_t)&v67, v68);
        if (__p[1])
        {
          long long v66 = __p[1];
          operator delete(__p[1]);
        }
      }
    }
    double v40 = v81;
    if (v81 != &v82)
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      double v43 = *(uint64_t ***)(a1 + 280);
      double v44 = *(uint64_t ***)(a1 + 288);
      do
      {
        if (v43 == v44)
        {
LABEL_108:
          double v43 = v44;
        }
        else
        {
          uint64_t v45 = *((unsigned int *)v40 + 7);
          while (1)
          {
            unint64_t NumChannels = Alembic::AbcGeom::v12::XformOp::getNumChannels((Alembic::AbcGeom::v12::XformOp *)v43);
            if (v42 < NumChannels) {
              break;
            }
LABEL_107:
            unint64_t v42 = 0;
            v43 += 7;
            if (v43 == v44) {
              goto LABEL_108;
            }
          }
          while (v45 != v41)
          {
            ++v42;
            ++v41;
            if (NumChannels == v42) {
              goto LABEL_107;
            }
          }
          LODWORD(__p[0]) = v42;
          sub_2168029D4(v43 + 4, (unsigned int *)__p, __p);
          ++v42;
          uint64_t v41 = v45 + 1;
        }
        double v47 = (void *)v40[1];
        if (v47)
        {
          do
          {
            double v48 = (void **)v47;
            double v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            double v48 = (void **)v40[2];
            BOOL v49 = *v48 == v40;
            double v40 = v48;
          }
          while (!v49);
        }
        double v40 = v48;
      }
      while (v48 != &v82);
    }
    if (v88)
    {
      uint64_t v89 = (std::__shared_weak_count *)v88;
      operator delete(v88);
    }
    double v35 = v60;
  }
LABEL_119:
  sub_216779094(__p, ".arbGeomParams");
  uint64_t v50 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  uint64_t v51 = v50;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v51) {
      goto LABEL_133;
    }
  }
  else if (!v50)
  {
    goto LABEL_133;
  }
  uint64_t v63 = v7;
  double v64 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v84 = 0;
  int v85 = 0;
  int v75 = 0;
  int v76 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v88, &v63, &v84, &v75);
  sub_216779094(&v72, ".arbGeomParams");
  int v70 = 1;
  int v71 = v91;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v88, &v72, &v70);
  *(_DWORD *)(a1 + 168) = __p[0];
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)&__p[1]);
  uint64_t v53 = v67;
  double v52 = v68;
  if (v68) {
    atomic_fetch_add_explicit(v68 + 1, 1uLL, memory_order_relaxed);
  }
  double v54 = *(std::__shared_weak_count **)(a1 + 208);
  *(void *)(a1 + 200) = v53;
  *(void *)(a1 + 208) = v52;
  if (v54) {
    sub_216784EC4(v54);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
  if (v74 < 0) {
    operator delete(v72);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v88);
  if (v64) {
    sub_216784EC4(v64);
  }
LABEL_133:
  sub_216779094(__p, ".userProperties");
  uint64_t v55 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 80))(v7, __p);
  uint64_t v56 = v55;
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if (!v56) {
      goto LABEL_147;
    }
  }
  else if (!v55)
  {
    goto LABEL_147;
  }
  uint64_t v61 = v7;
  double v62 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v84 = 0;
  int v85 = 0;
  int v75 = 0;
  int v76 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v88, &v61, &v84, &v75);
  sub_216779094(&v72, ".userProperties");
  int v70 = 1;
  int v71 = v91;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v88, &v72, &v70);
  *(_DWORD *)(a1 + 216) = __p[0];
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)&__p[1]);
  uint64_t v58 = v67;
  uint64_t v57 = v68;
  if (v68) {
    atomic_fetch_add_explicit(v68 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v59 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = v58;
  *(void *)(a1 + 256) = v57;
  if (v59) {
    sub_216784EC4(v59);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
  if (v74 < 0) {
    operator delete(v72);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v88);
  if (v62) {
    sub_216784EC4(v62);
  }
LABEL_147:
  if (v35) {
    sub_216784EC4(v35);
  }
  sub_2167FB780((uint64_t)&v81, v82);
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v93) {
    sub_216784EC4(v93);
  }
  sub_2167877AC((uint64_t)v92, (void *)v92[1]);
}

void sub_216801018(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v51 = *(void **)(v48 - 216);
  if (v51)
  {
    *(void *)(v48 - 208) = v51;
    operator delete(v51);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  sub_2167FB780((uint64_t)&a41, a42);
  if (v47) {
    sub_216784EC4(v47);
  }
  sub_2167A03C4(v48 - 168);
  double v52 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v53 = (uint64_t)v52;
    sub_216801468(v46);
    sub_21679FA64(v48 - 104, v53);
  }
  else
  {
    sub_216801468(v46);
    sub_21679F9F4(v48 - 104, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216800FF8);
}

void sub_2168013CC(_Unwind_Exception *a1)
{
}

void sub_2168013EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v7, a3);
  uint64_t v5 = v7;
  BOOL v4 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = v5;
  a2[1] = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_216801450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216801468(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  Alembic::AbcGeom::v12::XformSample::XformSample((uint64_t)&v2);
  *(_DWORD *)(a1 + 272) = v2;
  sub_216801EAC((void **)(a1 + 280));
  *(_OWORD *)(a1 + 280) = v3;
  *(void *)(a1 + 296) = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  *(_OWORD *)(a1 + 304) = v5;
  uint64_t v6 = (void **)&v3;
  sub_216802314(&v6);
  sub_2167A13A4(a1 + 120);
  *(_WORD *)(a1 + 264) = 257;
  sub_2167A13A4(a1 + 168);
  sub_2167A13A4(a1 + 216);
  sub_2167A13A4(a1 + 8);
}

void *Alembic::AbcGeom::v12::IXformSchema::getTimeSampling@<X0>(Alembic::AbcGeom::v12::IXformSchema *this@<X0>, void *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    if (*((void *)this + 17)) {
      goto LABEL_3;
    }
LABEL_5:
    if (*((void *)this + 19)) {
      long long v3 = nullsub_4;
    }
    else {
      long long v3 = 0;
    }
    goto LABEL_8;
  }
  if (!*((unsigned char *)this + 151)) {
    goto LABEL_5;
  }
LABEL_3:
  long long v3 = 0;
LABEL_8:
  if (v3) {
    return (void *)Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::AbcGeom::v12::IXformSchema *)((char *)this + 120), a2);
  }
  long long v5 = (Alembic::AbcCoreAbstract::v12::TimeSampling *)operator new(0x28uLL);
  Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling(v5);
  return sub_216787D70(a2, (uint64_t)v5);
}

void sub_2168015D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;
  operator delete(v11);
  uint64_t v14 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v14);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  *uint64_t v9 = 0;
  v9[1] = 0;
  JUMPOUT(0x2168015BCLL);
}

void sub_216801628(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::IXformSchema::getNumSamples(Alembic::AbcGeom::v12::IXformSchema *this)
{
  if (*((char *)this + 151) < 0)
  {
    if (*((void *)this + 17)) {
      goto LABEL_3;
    }
LABEL_5:
    if (*((void *)this + 19)) {
      uint64_t v1 = nullsub_4;
    }
    else {
      uint64_t v1 = 0;
    }
    goto LABEL_8;
  }
  if (!*((unsigned char *)this + 151)) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v1 = 0;
LABEL_8:
  if (v1) {
    return Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::AbcGeom::v12::IXformSchema *)((char *)this + 120));
  }
  else {
    return 0;
  }
}

void sub_216801708(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::IXformSchema::getChannelValues(Alembic::AbcGeom::v12::IXformSchema *this, uint64_t a2, Alembic::AbcGeom::v12::XformSample *a3)
{
  long long __p = 0;
  double v21 = 0;
  uint64_t v22 = 0;
  if (!*((unsigned char *)this + 320))
  {
    (*(void (**)(void **__return_ptr))(**((void **)this + 13) + 40))(&v18);
    uint64_t v11 = (*(uint64_t (**)(void *))(*v18 + 16))(v18);
    sub_21677C0AC((uint64_t)&__p, *(unsigned __int8 *)(v11 + 60));
    if (v19) {
      sub_216784EC4(v19);
    }
    (*(void (**)(void **__return_ptr))(**((void **)this + 13) + 40))(&v18);
    (*(void (**)(void *, uint64_t, void *, void))(*v18 + 80))(v18, a2, __p, 0);
    goto LABEL_20;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 13) + 48))(&v16);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v16 + 80))(v16, a2, &v18);
  if (v17) {
    sub_216784EC4(v17);
  }
  if (v18 && *v18 && *((_DWORD *)v18 + 2) == 11)
  {
    uint64_t v6 = (uint64_t *)v18[2];
    uint64_t v7 = v18[3] - (void)v6;
    if (v7)
    {
      unint64_t v8 = v7 >> 3;
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = *v6++;
        v9 *= v10;
        --v8;
      }
      while (v8);
    }
    else
    {
      unint64_t v9 = 0;
    }
    sub_21677CC7C((char *)&__p, (char *)*v18, *v18 + 8 * v9, v9);
LABEL_20:
    if (v19) {
      sub_216784EC4(v19);
    }
    double v12 = (Alembic::AbcGeom::v12::XformOp *)*((void *)a3 + 1);
    uint64_t v13 = (Alembic::AbcGeom::v12::XformOp *)*((void *)a3 + 2);
    if (v12 != v13)
    {
      unint64_t v14 = 0;
      do
      {
        for (unint64_t i = 0; i < Alembic::AbcGeom::v12::XformOp::getNumChannels(v12) && v14 < (v21 - (unsigned char *)__p) >> 3; ++i)
          Alembic::AbcGeom::v12::XformOp::setChannelValue((uint64_t)v12, i, *((double *)__p + v14++));
        double v12 = (Alembic::AbcGeom::v12::XformOp *)((char *)v12 + 56);
      }
      while (v12 != v13);
    }
    goto LABEL_29;
  }
  if (v19) {
    sub_216784EC4(v19);
  }
LABEL_29:
  if (__p)
  {
    double v21 = __p;
    operator delete(__p);
  }
}

void sub_216801990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15)
{
  if (a13) {
    sub_216784EC4(a13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::IXformSchema::get(uint64_t a1, Alembic::AbcGeom::v12::XformSample *this, uint64_t a3)
{
  uint64_t v14 = a1 + 8;
  double v15 = "IXformSchema::get()";
  Alembic::AbcGeom::v12::XformSample::reset(this);
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    *(_DWORD *)this = *(_DWORD *)(a1 + 272);
    if ((Alembic::AbcGeom::v12::XformSample *)(a1 + 272) != this) {
      sub_216801F1C((uint64_t)this + 8, *(int **)(a1 + 280), *(int **)(a1 + 288), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
    }
    *((_OWORD *)this + 2) = *(_OWORD *)(a1 + 304);
    if (*(char *)(a1 + 151) < 0)
    {
      if (*(void *)(a1 + 136)) {
        goto LABEL_10;
      }
    }
    else if (*(unsigned char *)(a1 + 151))
    {
LABEL_10:
      uint64_t v6 = 0;
LABEL_15:
      if (v6 && Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)(a1 + 120)))
      {
        LOBYTE(v12) = 0;
        Alembic::Abc::v12::IScalarProperty::get(a1 + 120, (uint64_t)&v12, a3, 1);
        Alembic::AbcGeom::v12::XformSample::setInheritsXforms((uint64_t)this, (_BYTE)v12 != 0);
      }
      uint64_t v7 = *(void *)(a1 + 104);
      if (v7)
      {
        if (*(unsigned char *)(a1 + 320)) {
          (*(void (**)(uint64_t (****__return_ptr)(double **)))(*(void *)v7 + 48))(&v12);
        }
        else {
          (*(void (**)(uint64_t (****__return_ptr)(double **)))(*(void *)v7 + 40))(&v12);
        }
        uint64_t v8 = (*v12)[8]((double **)v12);
        if (v13) {
          sub_216784EC4(v13);
        }
        if (v8)
        {
          uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104));
          uint64_t v10 = *(std::__shared_weak_count **)(v9 + 72);
          double v12 = *(uint64_t (****)(double **))(v9 + 64);
          uint64_t v13 = v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t Index = Alembic::Abc::v12::ISampleSelector::getIndex(a3, (double ***)&v12, v8);
          if (v13) {
            sub_216784EC4(v13);
          }
          if ((Index & 0x8000000000000000) == 0) {
            Alembic::AbcGeom::v12::IXformSchema::getChannelValues((Alembic::AbcGeom::v12::IXformSchema *)a1, Index, this);
          }
        }
      }
      return;
    }
    if (*(void *)(a1 + 152)) {
      uint64_t v6 = nullsub_4;
    }
    else {
      uint64_t v6 = 0;
    }
    goto LABEL_15;
  }
}

void sub_216801C60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  uint64_t v13 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a11, (uint64_t)v13);
  }
  else {
    sub_21679F9F4((uint64_t)&a11, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216801C4CLL);
}

void sub_216801CD0(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::IXformSchema::getValue(uint64_t a1@<X0>, uint64_t a2@<X1>, Alembic::AbcGeom::v12::XformSample *a3@<X8>)
{
}

void sub_216801D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  sub_216802314(&a10);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcGeom::v12::IXformSchema::getInheritsXforms(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1 + 8;
  uint64_t v11 = "IXformSchema::getInheritsXforms()";
  if (*(char *)(a1 + 151) < 0)
  {
    if (*(void *)(a1 + 136)) {
      return 1;
    }
  }
  else if (*(unsigned char *)(a1 + 151))
  {
    return 1;
  }
  if (*(void *)(a1 + 152))
  {
    long long v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 120);
    if (Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)(a1 + 120)))
    {
      Alembic::Abc::v12::IScalarProperty::getTimeSampling(v3, &v7);
      uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
      uint64_t Index = Alembic::Abc::v12::ISampleSelector::getIndex(a2, &v7, NumSamples);
      if (v8) {
        sub_216784EC4(v8);
      }
      if ((Index & 0x8000000000000000) == 0)
      {
        uint64_t v7 = (double **)Index;
        uint64_t v8 = 0;
        int v9 = 2;
        char v12 = 0;
        Alembic::Abc::v12::IScalarProperty::get((uint64_t)v3, (uint64_t)&v12, (uint64_t)&v7, 1);
        return v12 != 0;
      }
    }
  }
  return 1;
}

void sub_216801E8C(_Unwind_Exception *a1)
{
}

void sub_216801EAC(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_2167FFC3C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216801F1C(uint64_t a1, int *a2, int *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_216801EAC((void **)a1);
    if (a4 > 0x492492492492492) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2167B8760((void *)a1, v11);
    uint64_t v12 = sub_2168020C0(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[2 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3)];
    sub_21680227C((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_2168020C0(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_21680227C((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      sub_2167FFC3C(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_2168020B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2168020B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2168020C0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21680216C(a1, v4, v6);
      v6 += 14;
      uint64_t v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2168021F0((uint64_t)v9);
  return v4;
}

void sub_216802158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_21680216C(uint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *a3;
  *(unsigned char *)(a2 + 4) = *((unsigned char *)a3 + 4);
  *(_DWORD *)a2 = v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_21677CA50((void *)(a2 + 8), *((const void **)a3 + 1), *((void *)a3 + 2), (uint64_t)(*((void *)a3 + 2) - *((void *)a3 + 1)) >> 3);
  return sub_2167FF4E4((uint64_t *)(a2 + 32), (uint64_t)(a3 + 8));
}

void sub_2168021D4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168021F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216802228((uint64_t *)a1);
  }
  return a1;
}

void sub_216802228(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 56;
      sub_2167FFC3C(v5, v3);
    }
    while (v3 != v4);
  }
}

int *sub_21680227C(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    uint64_t v7 = (unsigned int *)(a2 + 10);
    do
    {
      int v8 = *v5;
      *(unsigned char *)(a4 + 4) = *((unsigned char *)v5 + 4);
      *(_DWORD *)a4 = v8;
      if (v5 != (int *)a4)
      {
        sub_21677CC7C((char *)(a4 + 8), *((char **)v5 + 1), *((void *)v5 + 2), (uint64_t)(*((void *)v5 + 2) - *((void *)v5 + 1)) >> 3);
        sub_2167FF228((uint64_t **)(a4 + 32), *((unsigned int **)v5 + 4), v7);
      }
      v5 += 14;
      a4 += 56;
      v7 += 14;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_216802314(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_2167FFC3C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2168023AC(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v10 = *a2;
  *((void *)&v45 + 1) = 0;
  v46[0] = 0;
  *(void *)&long long v45 = (char *)&v45 + 8;
  int v47 = v10;
  sub_2167898D0(v48, (const void ***)&v45);
  v48[3] = 0;
  BOOL v49 = 0;
  int v50 = 0;
  uint64_t v51 = 1;
  sub_2167877AC((uint64_t)&v45, *((void **)&v45 + 1));
  sub_2167A030C(a4, (uint64_t)&v47);
  sub_2167A030C(a5, (uint64_t)&v47);
  *(_DWORD *)a1 = v47;
  v46[34] = a1;
  v46[35] = "ITypedScalarProperty::ITypedScalarProperty()";
  uint64_t v12 = *((void *)a2 + 4);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v45);
    unint64_t v31 = sub_216779180(v46, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v31, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v33 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v33, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  uint64_t v14 = v13;
  if (!v13)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v34 = sub_216779180(v46, (uint64_t)"Nonexistent scalar property: ", 29);
    int v35 = *(char *)(a3 + 23);
    if (v35 >= 0) {
      uint64_t v36 = a3;
    }
    else {
      uint64_t v36 = *(void *)a3;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v37 = *(void *)(a3 + 8);
    }
    sub_216779180(v34, v36, v37);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    size_t v38 = __cxa_allocate_exception(0x20uLL);
    double v39 = sub_216779038(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  if (*(_DWORD *)(v13 + 56)) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = *(unsigned char *)(v13 + 60) == 1;
  }
  BOOL v16 = v15 && *(_DWORD *)(v13 + 24) == 1;
  if (!v16 || (sub_21680292C(v13 + 32, v51) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v45);
    long long v20 = sub_216779180(v46, (uint64_t)"Incorrect match of header datatype: ", 36);
    double v21 = sub_21677D5B0(v20, (int *)(v14 + 56));
    uint64_t v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    uint64_t v40 = 0x100000000;
    uint64_t v23 = sub_21677D5B0(v22, (int *)&v40);
    double v24 = sub_216779180(v23, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_216779094(v41, "interpretation");
    sub_21679F2AC(v14 + 32, (const void **)v41, __p);
    if ((v44 & 0x80u) == 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v26 = v44;
    }
    else {
      uint64_t v26 = (uint64_t)__p[1];
    }
    double v27 = sub_216779180(v24, (uint64_t)v25, v26);
    double v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"", 0);
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    double v29 = __cxa_allocate_exception(0x20uLL);
    uint64_t v30 = sub_216779038(v29, (uint64_t)__p);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 88))(&v45, v12, a3);
  long long v17 = v45;
  long long v45 = 0uLL;
  char v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v49) {
    sub_216784EC4(v49);
  }
  sub_2167877AC((uint64_t)v48, (void *)v48[1]);
  return a1;
}

void sub_2168027E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  double v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680254CLL);
}

void sub_2168028EC()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x21680291CLL);
}

uint64_t sub_21680292C(uint64_t a1, int a2)
{
  if (a2) {
    return 1;
  }
  sub_216779094(__p, "interpretation");
  sub_21679F2AC(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    BOOL v2 = v7[1] == 0;
    operator delete(v7[0]);
  }
  else
  {
    BOOL v2 = v8 == 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2168029B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_2168029D4(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  char v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::OXformSchema(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v25 = *a2;
  uint64_t v26 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216802E44(a1, &v25, a3, a4, a5, a6, a7);
  if (v26) {
    sub_216784EC4(v26);
  }
  *(void *)a1 = &unk_26C74A1A0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_216779094((void *)(a1 + 120), "");
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_216779094((void *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_216779094((void *)(a1 + 248), "");
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 288);
  *(unsigned char *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  sub_2167CC320(a4, a5, a6, a7, &v23);
  unsigned int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v23)
  {
    uint64_t v15 = *a2;
    BOOL v16 = (std::__shared_weak_count *)a2[1];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 24))(&v19);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 24))(&v21);
    unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v23);
    if (v22) {
      sub_216784EC4(v22);
    }
    if (v20) {
      sub_216784EC4(v20);
    }
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  else
  {
    unsigned int v17 = v14;
  }
  Alembic::AbcGeom::v12::OXformSchema::init((Alembic::AbcGeom::v12::OXformSchema *)a1, v17);
  if (v24) {
    sub_216784EC4(v24);
  }
  return a1;
}

void sub_216802D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, std::__shared_weak_count *a16)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (v21) {
    sub_216784EC4(v21);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v16 + 448);
  if (v23) {
    sub_216784EC4(v23);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v16 + 344));
  a15 = (void **)(v16 + 296);
  sub_216802314(&a15);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v18);
  uint64_t v24 = *(std::__shared_weak_count **)(v16 + 184);
  if (v24) {
    sub_216784EC4(v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v16 + 168);
  if (v25) {
    sub_216784EC4(v25);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v17);
  uint64_t v26 = *a10;
  if (*a10)
  {
    *(void *)(v16 + 96) = v26;
    operator delete(v26);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v16 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216802E44(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A200;
  unsigned int v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  unsigned int v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216805110(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_216802F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void Alembic::AbcGeom::v12::OXformSchema::init(Alembic::AbcGeom::v12::OXformSchema *this, uint64_t a2)
{
  uint64_t v13 = (char *)this + 8;
  unsigned int v14 = "OXformSchema::init()";
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0u;
  v4[2] = 0u;
  *uint64_t v4 = 0u;
  sub_216805F94(&v12, (uint64_t)v4);
  uint64_t v5 = (char *)this + 440;
  long long v6 = v12;
  long long v12 = 0uLL;
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 56);
  *(_OWORD *)((char *)this + 440) = v6;
  if (v7)
  {
    sub_216784EC4(v7);
    if (*((void *)&v12 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  uint64_t v9 = *((void *)this + 5);
  uint64_t v8 = *((void *)this + 6);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = *(void **)v5;
  uint64_t v11 = *(std::__shared_weak_count **)(*(void *)v5 + 8);
  *int v10 = v9;
  v10[1] = v8;
  if (v11) {
    sub_216784EC4(v11);
  }
  *(void *)(*((void *)this + 55) + 40) = a2;
  *((unsigned char *)this + 336) = 1;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
}

void sub_216803008(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  long long v6 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v7 = (uint64_t)v6;
    sub_2168046F4(v4);
    sub_21679FA64((uint64_t)va, v7);
  }
  else
  {
    sub_2168046F4(v4);
    sub_21679F9F4((uint64_t)va, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216802FF4);
}

void sub_216803050(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::OXformSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v31 = *((void *)a2 + 4);
  unint64_t v32 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *a2;
  LODWORD(v29) = 1;
  LODWORD(v30) = v12;
  sub_216802E44(a1, &v31, a3, &v29, a4, a5, a6);
  if (v32) {
    sub_216784EC4(v32);
  }
  *(void *)a1 = &unk_26C74A1A0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_216779094((void *)(a1 + 120), "");
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_216779094((void *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_216779094((void *)(a1 + 248), "");
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 288);
  *(unsigned char *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  LODWORD(v27) = 0;
  LODWORD(v28) = 0;
  sub_2167CC320(a4, a5, a6, &v27, &v29);
  LODWORD(v27) = 0;
  LODWORD(v28) = 0;
  unsigned int v13 = sub_2167CC43C(a4, a5, a6, &v27);
  if (v29)
  {
    int v20 = *a2;
    if (*((char *)a2 + 31) < 0)
    {
      sub_216778F24(&v21, *((void **)a2 + 1), *((void *)a2 + 2));
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 + 2);
      uint64_t v22 = *((void *)a2 + 3);
    }
    uint64_t v15 = *((void *)a2 + 4);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)a2 + 5);
    uint64_t v23 = v15;
    uint64_t v24 = v16;
    if (v16)
    {
      char v17 = 1;
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = v23;
      char v18 = v24;
      if (v24)
      {
        char v17 = 0;
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      char v18 = 0;
      char v17 = 1;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 24))(&v25);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v25 + 24))(&v27);
    unsigned int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, v29);
    if (v28) {
      sub_216784EC4(v28);
    }
    if (v26) {
      sub_216784EC4(v26);
    }
    if ((v17 & 1) == 0) {
      sub_216784EC4(v18);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v20);
  }
  else
  {
    unsigned int v14 = v13;
  }
  Alembic::AbcGeom::v12::OXformSchema::init((Alembic::AbcGeom::v12::OXformSchema *)a1, v14);
  if (v30) {
    sub_216784EC4(v30);
  }
  return a1;
}

void sub_216803390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_216784EC4(a20);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v20 + 448);
  if (v27) {
    sub_216784EC4(v27);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v24);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v20 + 344));
  a19 = (void **)(v20 + 296);
  sub_216802314(&a19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v23);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v22);
  double v28 = *(std::__shared_weak_count **)(v20 + 184);
  if (v28) {
    sub_216784EC4(v28);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v20 + 168);
  if (v29) {
    sub_216784EC4(v29);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v21);
  uint64_t v30 = *v25;
  if (*v25)
  {
    *(void *)(v20 + 96) = v30;
    operator delete(v30);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v20 + 8));
  _Unwind_Resume(a1);
}

void sub_216803470()
{
}

void sub_216803478()
{
}

void sub_216803480()
{
}

void sub_216803488()
{
}

void sub_216803490()
{
}

void sub_216803498()
{
}

void sub_2168034A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_216784EC4(a22);
  }
  JUMPOUT(0x216803468);
}

void Alembic::AbcGeom::v12::OXformSchema::setChannelValues(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 176);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v6 = *(void *)(a1 + 56);
      sub_2167864B4(&v13, 1uLL, &v6);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 176) + 48))(&v11);
      uint64_t v5 = v11;
      uint64_t v6 = *a2;
      uint64_t v7 = 0x10000000BLL;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long __p = 0;
      sub_21677EA60(&__p, v13, (uint64_t)v14, (v14 - (unsigned char *)v13) >> 3);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 64))(v5, &v6);
      if (__p)
      {
        uint64_t v9 = __p;
        operator delete(__p);
      }
      if (v12) {
        sub_216784EC4(v12);
      }
      if (v13)
      {
        unsigned int v14 = v13;
        operator delete(v13);
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 40))(&v6);
      (*(void (**)(uint64_t, void))(*(void *)v6 + 64))(v6, *a2);
      if (v7) {
        sub_216784EC4((std::__shared_weak_count *)v7);
      }
    }
  }
}

void sub_216803630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcGeom::v12::OXformSchema::set(Alembic::AbcGeom::v12::OXformSchema *this, int **a2)
{
  int v85 = (char *)this + 8;
  uint64_t v86 = "OXformSchema::set()";
  if (*((char *)this + 223) < 0)
  {
    if (!*((void *)this + 26)) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 6);
    uint64_t v83 = *((void *)this + 5);
    int v84 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v69, ".inherits");
    uint64_t v7 = *(void *)(*((void *)this + 55) + 40);
    LODWORD(__p[0]) = 2;
    LODWORD(__p[1]) = v7;
    int v80 = 0;
    int v82 = 0;
    int v78 = 0;
    int v79 = 0;
    int v76 = 0;
    int v77 = 0;
    sub_216805518((uint64_t)&v72, &v83, (uint64_t)&v69, __p, &v80, &v78, &v76);
    *((_DWORD *)this + 48) = v72;
    std::string::operator=((std::string *)((char *)this + 200), &v73);
    uint64_t v9 = v74;
    uint64_t v8 = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 29);
    *((void *)this + 28) = v9;
    *((void *)this + 29) = v8;
    if (v10) {
      sub_216784EC4(v10);
    }
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v72);
    if (SHIBYTE(v71) < 0) {
      operator delete(v69);
    }
    if (v84) {
      sub_216784EC4(v84);
    }
    Alembic::AbcGeom::v12::XformSample::freezeTopology((uint64_t)a2);
    *((_DWORD *)this + 72) = *(_DWORD *)a2;
    if ((int **)((char *)this + 288) != a2) {
      sub_216801F1C((uint64_t)this + 296, a2[1], a2[2], 0x6DB6DB6DB6DB6DB7 * (((char *)a2[2] - (char *)a2[1]) >> 3));
    }
    *((_OWORD *)this + 20) = *((_OWORD *)a2 + 2);
    *((void *)this + 7) = Alembic::AbcGeom::v12::XformSample::getNumOpChannels((Alembic::AbcGeom::v12::XformSample *)a2);
    *((void *)this + 8) = Alembic::AbcGeom::v12::XformSample::getNumOps((Alembic::AbcGeom::v12::XformSample *)a2);
    uint64_t v11 = *((void *)this + 55);
    *(void *)(v11 + 24) = 0;
    sub_216804164(v11 + 16, *((void *)this + 7), 0);
    if (*((void *)this + 8))
    {
      uint64_t v13 = *((void *)this + 5);
      int v12 = (std::__shared_weak_count *)*((void *)this + 6);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_216779094(&v72, ".ops");
      int v70 = 0;
      unint64_t v71 = 0;
      double v69 = &v70;
      uint64_t v14 = *((void *)this + 8);
      int v80 = 1;
      char v81 = v14;
      (*(void (**)(void **__return_ptr, uint64_t, void **, void **, int *, void))(*(void *)v13 + 96))(__p, v13, &v72, &v69, &v80, 0);
      long long v15 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 21);
      *((_OWORD *)this + 10) = v15;
      if (v16)
      {
        sub_216784EC4(v16);
        if (__p[1]) {
          sub_216784EC4((std::__shared_weak_count *)__p[1]);
        }
      }
      sub_2167877AC((uint64_t)&v69, v70);
      if (v73.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(v72);
      }
      if (v12) {
        sub_216784EC4(v12);
      }
    }
    unint64_t v17 = *((void *)this + 7);
    if (v17)
    {
      if (v17 > 0x100)
      {
        *((unsigned char *)this + 72) = 1;
        uint64_t v21 = *((void *)this + 5);
        char v18 = (std::__shared_weak_count *)*((void *)this + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_216779094(&v72, ".vals");
        int v70 = 0;
        unint64_t v71 = 0;
        double v69 = &v70;
        int v80 = 11;
        char v81 = 1;
        (*(void (**)(void **__return_ptr, uint64_t, void **, void **, int *, void))(*(void *)v21 + 104))(__p, v21, &v72, &v69, &v80, *(unsigned int *)(*((void *)this + 55) + 40));
      }
      else
      {
        *((unsigned char *)this + 72) = 0;
        uint64_t v19 = *((void *)this + 5);
        char v18 = (std::__shared_weak_count *)*((void *)this + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_216779094(&v72, ".vals");
        int v70 = 0;
        unint64_t v71 = 0;
        double v69 = &v70;
        uint64_t v20 = *((void *)this + 7);
        int v80 = 11;
        char v81 = v20;
        (*(void (**)(void **__return_ptr, uint64_t, void **, void **, int *, void))(*(void *)v19 + 96))(__p, v19, &v72, &v69, &v80, *(unsigned int *)(*((void *)this + 55) + 40));
      }
      long long v22 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 23);
      *((_OWORD *)this + 11) = v22;
      if (v23)
      {
        sub_216784EC4(v23);
        if (__p[1]) {
          sub_216784EC4((std::__shared_weak_count *)__p[1]);
        }
      }
      sub_2167877AC((uint64_t)&v69, v70);
      if (v73.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(v72);
      }
      if (v18) {
        sub_216784EC4(v18);
      }
    }
    goto LABEL_47;
  }
  if (*((unsigned char *)this + 223)) {
    goto LABEL_10;
  }
LABEL_5:
  if (!*((void *)this + 28)) {
    goto LABEL_10;
  }
  if (!Alembic::AbcGeom::v12::XformSample::isTopologyEqual((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 288), (const Alembic::AbcGeom::v12::XformSample *)a2))
  {
    sub_216778A5C((uint64_t)&v72);
    sub_216779180(&v73.__r_.__value_.__l.__size_, (uint64_t)"Invalid sample topology!", 24);
    std::stringbuf::str();
    sub_216778E70(&v69, (long long *)__p);
    if (v68 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = sub_216779038(exception, (uint64_t)&v69);
    __cxa_throw(v5, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
LABEL_47:
  LOBYTE(v72) = Alembic::AbcGeom::v12::XformSample::getInheritsXforms((Alembic::AbcGeom::v12::XformSample *)a2);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 192), &v72);
  if (!*((void *)this + 20)) {
    return;
  }
  double v69 = 0;
  int v70 = 0;
  unint64_t v71 = 0;
  uint64_t v63 = (Alembic::AbcGeom::v12::XformSample *)a2;
  unint64_t NumOpChannels = Alembic::AbcGeom::v12::XformSample::getNumOpChannels((Alembic::AbcGeom::v12::XformSample *)a2);
  sub_2168042E8(&v69, NumOpChannels);
  uint64_t v72 = 0;
  if (!*((void *)this + 8)) {
    goto LABEL_83;
  }
  uint64_t v25 = 0;
  do
  {
    uint64_t v26 = (Alembic::AbcGeom::v12::XformOp *)Alembic::AbcGeom::v12::XformSample::operator[]((uint64_t)v63, &v72);
    uint64_t v27 = (Alembic::AbcGeom::v12::XformOp *)Alembic::AbcGeom::v12::XformSample::operator[]((uint64_t)this + 288, &v72);
    for (unint64_t i = 0; i < Alembic::AbcGeom::v12::XformOp::getNumChannels(v26); ++i)
    {
      double ChannelValue = Alembic::AbcGeom::v12::XformOp::getChannelValue(v26, i);
      double v30 = ChannelValue;
      uint64_t v31 = v70;
      if ((unint64_t)v70 >= v71)
      {
        uint64_t v33 = (char *)v69;
        int64_t v34 = (v70 - (unsigned char *)v69) >> 3;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v36 = v71 - (void)v69;
        if ((uint64_t)(v71 - (void)v69) >> 2 > v35) {
          unint64_t v35 = v36 >> 2;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          size_t v38 = (char *)sub_21677CB28((uint64_t)&v71, v37);
          uint64_t v33 = (char *)v69;
          uint64_t v31 = v70;
        }
        else
        {
          size_t v38 = 0;
        }
        double v39 = &v38[8 * v34];
        *(double *)double v39 = v30;
        unint64_t v32 = v39 + 8;
        while (v31 != v33)
        {
          uint64_t v40 = *((void *)v31 - 1);
          v31 -= 8;
          *((void *)v39 - 1) = v40;
          v39 -= 8;
        }
        double v69 = v39;
        int v70 = v32;
        unint64_t v71 = (unint64_t)&v38[8 * v37];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(double *)int v70 = ChannelValue;
        unint64_t v32 = v31 + 8;
      }
      int v70 = v32;
      unint64_t v41 = (i + v25) >> 6;
      char v42 = (uint64_t *)(*(void *)(*((void *)this + 55) + 16) + 8 * v41);
      uint64_t v43 = 1 << (i + v25);
      uint64_t v44 = *v42;
      if ((*v42 & v43) != 0) {
        goto LABEL_74;
      }
      double v45 = Alembic::AbcGeom::v12::XformOp::getChannelValue(v26, i);
      double v46 = Alembic::AbcGeom::v12::XformOp::getChannelValue(v27, i);
      if (v45 <= v46) {
        double v47 = v46 - v45;
      }
      else {
        double v47 = v45 - v46;
      }
      char v42 = (uint64_t *)(*(void *)(*((void *)this + 55) + 16) + 8 * v41);
      if (v47 > 1.0e-12)
      {
        uint64_t v44 = *v42;
LABEL_74:
        uint64_t v48 = v44 | v43;
        goto LABEL_75;
      }
      uint64_t v48 = *v42 & ~v43;
LABEL_75:
      uint64_t *v42 = v48;
      char v49 = *((unsigned char *)this + 336);
      if (v49)
      {
        double v50 = Alembic::AbcGeom::v12::XformOp::getChannelValue(v26, i);
        Defaultdouble ChannelValue = Alembic::AbcGeom::v12::XformOp::getDefaultChannelValue(v26, i);
        if (v50 <= DefaultChannelValue) {
          double v52 = DefaultChannelValue - v50;
        }
        else {
          double v52 = v50 - DefaultChannelValue;
        }
        char v49 = v52 <= 1.0e-12;
      }
      *((unsigned char *)this + 336) = v49;
    }
    v25 += Alembic::AbcGeom::v12::XformOp::getNumChannels(v26);
    uint64_t v72 = (char *)v72 + 1;
  }
  while ((unint64_t)v72 < *((void *)this + 8));
LABEL_83:
  Alembic::AbcGeom::v12::OXformSchema::setChannelValues((uint64_t)this, &v69);
  uint64_t v53 = *((void *)this + 20);
  if (v53)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v53 + 80))(v53))
    {
      uint64_t v54 = *((void *)this + 20);
      if (v54) {
        (*(void (**)(uint64_t))(*(void *)v54 + 72))(v54);
      }
    }
    else
    {
      size_t NumOps = Alembic::AbcGeom::v12::XformSample::getNumOps((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 288));
      sub_2167807A0(&v72, NumOps);
      __p[0] = 0;
      if (v73.__r_.__value_.__l.__data_ != v72)
      {
        do
        {
          uint64_t v56 = (Alembic::AbcGeom::v12::XformOp *)Alembic::AbcGeom::v12::XformSample::operator[]((uint64_t)this + 288, __p);
          char OpEncoding = Alembic::AbcGeom::v12::XformOp::getOpEncoding(v56);
          *((unsigned char *)v72 + (unint64_t)__p[0]++) = OpEncoding;
        }
        while (__p[0] < (void *)(v73.__r_.__value_.__r.__words[0] - (void)v72));
      }
      (*(void (**)(void))(**((void **)this + 20) + 64))(*((void *)this + 20));
      if (v72)
      {
        v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
        operator delete(v72);
      }
    }
  }
  if (*((char *)this + 271) < 0)
  {
    if (!*((void *)this + 32)) {
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (*((unsigned char *)this + 271))
  {
LABEL_96:
    if (!*((unsigned char *)this + 336))
    {
      uint64_t v58 = (std::__shared_weak_count *)*((void *)this + 6);
      uint64_t v65 = *((void *)this + 5);
      long long v66 = v58;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_216779094(__p, "isNotConstantIdentity");
      int v80 = 0;
      int v82 = 0;
      int v78 = 0;
      int v79 = 0;
      int v76 = 0;
      int v77 = 0;
      v64[0] = 0;
      v64[2] = 0;
      sub_216805518((uint64_t)&v72, &v65, (uint64_t)__p, &v80, &v78, &v76, v64);
      *((_DWORD *)this + 60) = v72;
      std::string::operator=((std::string *)((char *)this + 248), &v73);
      uint64_t v60 = v74;
      uint64_t v59 = v75;
      if (v75) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v61 = (std::__shared_weak_count *)*((void *)this + 35);
      *((void *)this + 34) = v60;
      *((void *)this + 35) = v59;
      if (v61) {
        sub_216784EC4(v61);
      }
      double v62 = (Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 240);
      Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v72);
      if (v68 < 0) {
        operator delete(__p[0]);
      }
      if (v66) {
        sub_216784EC4(v66);
      }
      LOBYTE(v72) = 1;
      Alembic::Abc::v12::OScalarProperty::set(v62, &v72);
    }
    goto LABEL_108;
  }
LABEL_95:
  if (!*((void *)this + 34)) {
    goto LABEL_96;
  }
LABEL_108:
  if (v69)
  {
    int v70 = (char *)v69;
    operator delete(v69);
  }
}

void sub_216803F9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_216779148((std::exception *)&a22);
  sub_216778D38((uint64_t)&__p);
  unint64_t v37 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v34 - 120, (uint64_t)v37);
  }
  else {
    sub_21679F9F4(v34 - 120, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216803F6CLL);
}

void sub_216804144(_Unwind_Exception *a1)
{
}

void sub_216804164(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      uint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        sub_21677CB10();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_2168059F0(&v21, v12);
      uint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      uint64_t v23 = v21;
      int v24 = 0;
      sub_216805CFC(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      unint64_t v17 = v19;
      LODWORD(v18) = v20;
      long long v15 = *(char **)a1;
      *(void *)a1 = v21;
      uint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      unint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        sub_216805E30(&v21, v6);
      }
      else
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        sub_216805EE4((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_2168042CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168042E8(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_21677CB10();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_21677CB28(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void Alembic::AbcGeom::v12::OXformSchema::setFromPrevious(Alembic::AbcGeom::v12::OXformSchema *this)
{
  int64_t v5 = (char *)this + 8;
  unint64_t v6 = "OXformSchema::setFromPrevious()";
  Alembic::Abc::v12::OScalarProperty::setFromPrevious((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 192));
  (*(void (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    if (*((unsigned char *)this + 72)) {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v3);
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 40))(&v3);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    if (v4) {
      sub_216784EC4(v4);
    }
  }
}

void sub_2168044B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  uint64_t v13 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a11, (uint64_t)v13);
  }
  else {
    sub_21679F9F4((uint64_t)&a11, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2168044A8);
}

void sub_216804518(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OXformSchema::getTimeSampling(Alembic::AbcGeom::v12::OXformSchema *this@<X0>, void *a2@<X8>)
{
  int64_t v5 = (char *)this + 8;
  unint64_t v6 = "OXformSchema::getTimeSampling()";
  sub_2167B7AC8((int *)this + 2, (uint64_t)v3);
  Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v3, (uint64_t)v4);
  Alembic::Abc::v12::OArchive::getTimeSampling((Alembic::Abc::v12::OArchive *)v4, a2);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v4);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v3);
}

void sub_2168045B4(void *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)va1);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)va);
  uint64_t v7 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v4 - 48, (uint64_t)v7);
  }
  else {
    sub_21679F9F4(v4 - 48, 0);
  }
  __cxa_end_catch();
  void *v3 = 0;
  v3[1] = 0;
  JUMPOUT(0x2168045A0);
}

void sub_21680461C(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::getNumSamples(Alembic::AbcGeom::v12::OXformSchema *this)
{
  uint64_t result = *((void *)this + 20);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 80))(result);
  }
  return result;
}

void sub_21680469C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680468CLL);
}

void sub_2168046D4(_Unwind_Exception *a1)
{
}

void sub_2168046F4(uint64_t a1)
{
  sub_2167A13A4(a1 + 112);
  sub_2167A13A4(a1 + 192);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (v3) {
    sub_216784EC4(v3);
  }
  Alembic::AbcGeom::v12::XformSample::reset((Alembic::AbcGeom::v12::XformSample *)(a1 + 288));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  if (v4) {
    sub_216784EC4(v4);
  }
  sub_2167A13A4(a1 + 344);
  sub_2167A13A4(a1 + 392);
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 336) = 1;

  sub_2167A13A4(a1 + 8);
}

unsigned char *Alembic::AbcGeom::v12::OXformSchema::getArbGeomParams@<X0>(Alembic::AbcGeom::v12::OXformSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = (char *)this + 8;
  long long v22 = "OXformSchema::getArbGeomParams()";
  int v4 = *((char *)this + 375);
  if (v4 < 0)
  {
    if (!*((void *)this + 45)) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)this + 375))
  {
LABEL_5:
    if (*((void *)this + 47)) {
      goto LABEL_17;
    }
  }
  int64_t v5 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 5);
  long long v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *((_DWORD *)this + 86) = v17;
  std::string::operator=((std::string *)((char *)this + 352), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 48);
  *((void *)this + 47) = v7;
  *((void *)this + 48) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *((unsigned char *)this + 375);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 86);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)this + 44), *((void *)this + 45));
  }
  else
  {
    *(_OWORD *)uint64_t result = *((_OWORD *)this + 22);
    *(void *)(a2 + 24) = *((void *)this + 46);
  }
  uint64_t v10 = *((void *)this + 48);
  *(void *)(a2 + 32) = *((void *)this + 47);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2168048EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x2168048D8);
}

void sub_21680498C(_Unwind_Exception *a1)
{
}

unsigned char *Alembic::AbcGeom::v12::OXformSchema::getUserProperties@<X0>(Alembic::AbcGeom::v12::OXformSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = (char *)this + 8;
  uint64_t v22 = "OXformSchema::getUserProperties()";
  int v4 = *((char *)this + 423);
  if (v4 < 0)
  {
    if (!*((void *)this + 51)) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)this + 423))
  {
LABEL_5:
    if (*((void *)this + 53)) {
      goto LABEL_17;
    }
  }
  int64_t v5 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v15 = *((void *)this + 5);
  long long v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".userProperties");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *((_DWORD *)this + 98) = v17;
  std::string::operator=((std::string *)((char *)this + 400), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 54);
  *((void *)this + 53) = v7;
  *((void *)this + 54) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *((unsigned char *)this + 423);
LABEL_17:
  *(_DWORD *)a2 = *((_DWORD *)this + 98);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)this + 50), *((void *)this + 51));
  }
  else
  {
    *(_OWORD *)uint64_t result = *((_OWORD *)this + 25);
    *(void *)(a2 + 24) = *((void *)this + 52);
  }
  uint64_t v10 = *((void *)this + 54);
  *(void *)(a2 + 32) = *((void *)this + 53);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_216804B0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x216804AF8);
}

void sub_216804BAC(_Unwind_Exception *a1)
{
}

unsigned char *Alembic::AbcGeom::v12::OXformSchema::getChildBoundsProperty@<X0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  int v24 = &this->__r_.__value_.__s.__data_[8];
  uint64_t v25 = "OXformSchema::getChildBoundsProperty()";
  if (SHIBYTE(this[5].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[5].__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)&this[5].__r_.__value_.__s + 23))
  {
LABEL_5:
    if (this[6].__r_.__value_.__r.__words[0]) {
      goto LABEL_19;
    }
  }
  uint64_t v4 = this[1].__r_.__value_.__r.__words[2];
  data = (std::__shared_weak_count *)this[2].__r_.__value_.__l.__data_;
  if (data)
  {
    atomic_fetch_add_explicit(&data->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v19 = data;
    atomic_fetch_add_explicit(&data->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v18 = v4;
  sub_216779094(__p, ".childBnds");
  uint64_t v6 = *(void *)(this[18].__r_.__value_.__l.__size_ + 40);
  v15[0] = 2;
  void v15[2] = v6;
  v14[0] = 0;
  v14[2] = 0;
  v13[0] = 0;
  void v13[2] = 0;
  v12[0] = 0;
  v12[2] = 0;
  sub_2167B9640((uint64_t)&v20, &v18, (uint64_t)__p, v15, v14, v13, v12);
  LODWORD(this[4].__r_.__value_.__r.__words[2]) = v20;
  std::string::operator=(this + 5, &v21);
  std::string::size_type v8 = v22;
  std::string::size_type v7 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type size = (std::__shared_weak_count *)this[6].__r_.__value_.__l.__size_;
  this[6].__r_.__value_.__r.__words[0] = v8;
  this[6].__r_.__value_.__l.__size_ = v7;
  if (size) {
    sub_216784EC4(size);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v20);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
  if (data) {
    sub_216784EC4(data);
  }
LABEL_19:
  *(_DWORD *)a2 = this[4].__r_.__value_.__r.__words[2];
  uint64_t result = (unsigned char *)(a2 + 8);
  if (SHIBYTE(this[5].__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t result = sub_216778F24(result, this[5].__r_.__value_.__l.__data_, this[5].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)&this[5].__r_.__value_.__l.__data_;
    *(void *)(a2 + 24) = *((void *)&this[5].__r_.__value_.__l + 2);
  }
  std::string::size_type v11 = this[6].__r_.__value_.__l.__size_;
  *(void *)(a2 + 32) = this[6].__r_.__value_.__l.__data_;
  *(void *)(a2 + 40) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_216804D74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,char a26)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&a26);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    sub_216784EC4(a25);
  }
  if (v26) {
    sub_216784EC4(v26);
  }
  double v30 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v27 - 64, (uint64_t)v30);
  }
  else {
    sub_21679F9F4(v27 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216804D10);
}

void sub_216804DF8(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OXformSchema::setTimeSampling(Alembic::AbcGeom::v12::OXformSchema *this, uint64_t a2)
{
  std::string::size_type v8 = (char *)this + 8;
  unint64_t v9 = "OXformSchema::setTimeSampling( uint32_t)";
  if (*((char *)this + 223) < 0)
  {
    if (*((void *)this + 26)) {
      goto LABEL_7;
    }
  }
  else if (*((unsigned char *)this + 223))
  {
    goto LABEL_7;
  }
  if (*((void *)this + 28)) {
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::AbcGeom::v12::OXformSchema *)((char *)this + 192));
  }
LABEL_7:
  uint64_t v4 = *((void *)this + 22);
  if (v4)
  {
    if (*((unsigned char *)this + 72)) {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 48))(&v6);
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v6);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 88))(v6, a2);
    if (v7) {
      sub_216784EC4(v7);
    }
  }
  uint64_t v5 = *((void *)this + 55);
  if (v5) {
    *(void *)(v5 + 40) = a2;
  }
}

void sub_216804F58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  uint64_t v13 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a11, (uint64_t)v13);
  }
  else {
    sub_21679F9F4((uint64_t)&a11, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216804F48);
}

void sub_216804FB8(_Unwind_Exception *a1)
{
}

void Alembic::AbcGeom::v12::OXformSchema::setTimeSampling(Alembic::AbcGeom::v12::OXformSchema *a1, void *a2)
{
  uint64_t v3 = (int *)((char *)a1 + 8);
  std::string::size_type v7 = v3;
  std::string::size_type v8 = "OXformSchema::setTimeSampling( TimeSamplingPtr)";
  if (*a2)
  {
    sub_2167B7AC8(v3, (uint64_t)v5);
    Alembic::Abc::v12::OObject::getArchive((Alembic::Abc::v12::OObject *)v5, (uint64_t)v6);
    uint64_t v4 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)v6);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v6);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v5);
    Alembic::AbcGeom::v12::OXformSchema::setTimeSampling(a1, v4);
  }
}

void sub_21680505C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v17 - 32, (uint64_t)v19);
  }
  else {
    sub_21679F9F4(v17 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680504CLL);
}

void sub_2168050C4(_Unwind_Exception *a1)
{
}

void sub_2168050E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2168064DC(a1);

  operator delete(v1);
}

void sub_216805110(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  std::string::size_type v22 = 0;
  v23[0] = 0;
  std::string v21 = (uint64_t *)&v22;
  int v24 = 2;
  sub_2167898D0((uint64_t *)v25, (const void ***)&v21);
  v25[3] = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v28 = 1;
  sub_2167877AC((uint64_t)&v21, v22);
  sub_2167A030C(a4, (uint64_t)&v24);
  sub_2167A030C(a5, (uint64_t)&v24);
  sub_2167A030C(a6, (uint64_t)&v24);
  sub_2167A030C(a7, (uint64_t)&v24);
  *(_DWORD *)(a1 + 8) = v24;
  void v23[33] = a1 + 8;
  v23[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v21);
    sub_216779180(v23, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v21, v25);
  if (HIDWORD(v28) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Xform_v3");
    uint64_t v29 = __p;
    uint64_t v13 = sub_21677B174(&v21, (const void **)__p, (uint64_t)&unk_21740A5CD, (long long **)&v29);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v14 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v21, v22);
  if (v26) {
    sub_216784EC4(v26);
  }
  sub_2167877AC((uint64_t)v25, v25[1]);
}

void sub_21680538C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2168052D8);
}

void sub_216805464(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2168054B0(uint64_t a1)
{
  return a1;
}

void sub_2168054DC(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_216805518(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2168055F0(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2168055D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v10);
  _Unwind_Resume(a1);
}

void sub_2168055F0(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v24 = 0;
  v25[0] = 0;
  std::string::size_type v23 = (const void **)&v24;
  int v26 = 2;
  sub_2167898D0((uint64_t *)v27, &v23);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = 1;
  sub_2167877AC((uint64_t)&v23, v24);
  sub_2167A030C(a4, (uint64_t)&v26);
  sub_2167A030C(a5, (uint64_t)&v26);
  sub_2167A030C(a6, (uint64_t)&v26);
  sub_2167A030C(a7, (uint64_t)&v26);
  *(_DWORD *)a1 = v26;
  void v25[33] = a1;
  v25[34] = "OTypedScalarProperty::init()";
  if (!*a2)
  {
    sub_216778A5C((uint64_t)&v23);
    sub_216779180(v25, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    std::stringbuf::str();
    sub_216778E70(v22, (long long *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v19 = sub_216779038(exception, (uint64_t)v22);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v23, v27);
  uint64_t v14 = v28;
  uint64_t v13 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if (v14)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v22);
    (*(void (**)(void, uint64_t))(**(void **)&v22[0] + 48))(*(void *)&v22[0], v14);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = *a2;
  }
  __p[0] = (void *)0x100000000;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v15 + 96))(v22);
  long long v16 = v22[0];
  v22[0] = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_216784EC4(v17);
    if (*((void *)&v22[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22[0] + 1));
    }
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  sub_2167877AC((uint64_t)&v23, v24);
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2167877AC((uint64_t)v27, v27[1]);
}

void sub_2168058C8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v12.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v11 = (uint64_t)v10;
    sub_2167A13A4(v6);
    sub_21679FA64(v7 - 160, v11);
  }
  else
  {
    sub_2167A13A4(v6);
    sub_21679F9F4(v7 - 160, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216805814);
}

void sub_2168059A4(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_2168059F0(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_21677CB10();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_216805AB0(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    std::string::size_type v8 = *a1;
    int v9 = 0;
    uint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_216805AF8(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_216805A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216805AB0(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_21677CB10();
  }
  uint64_t result = sub_21677CB28((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_216805AF8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_216805B9C(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_216805B9C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_216805C2C((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_216805C2C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *sub_216805CFC@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *sub_216805E30(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_216805EE4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void *sub_216805F94(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &unk_26C74A220;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216805FEC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v3 = sub_2168060B0(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21680600C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216806034(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 24);
  if (v1)
  {
    unint64_t v2 = sub_2168060B0(v1);
    operator delete(v2);
  }
}

uint64_t sub_21680606C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A270)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t *sub_2168060B0(uint64_t *a1)
{
  unint64_t v2 = a1[3];
  uint64_t v31 = a1[2];
  int v32 = 0;
  sub_216806314((uint64_t)&v31, v2, (uint64_t)&__p);
  unint64_t v3 = (char *)a1[2];
  unint64_t v4 = a1[3];
  if (__p != &v3[8 * (v4 >> 6)] || v22 != (v4 & 0x3F))
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    if (v4)
    {
      unint64_t v6 = 0;
      for (unint64_t i = 0; i < v4; ++i)
      {
        if ((*(void *)(a1[2] + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i))
        {
          if (v6 >= v35)
          {
            uint64_t v9 = v33;
            uint64_t v10 = (v6 - v33) >> 2;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62) {
              sub_21677CB10();
            }
            uint64_t v12 = v35 - v33;
            if ((v35 - v33) >> 1 > v11) {
              unint64_t v11 = v12 >> 1;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              uint64_t v14 = (char *)sub_21677EA28((uint64_t)&v35, v13);
              uint64_t v9 = v33;
              unint64_t v6 = v34;
            }
            else
            {
              uint64_t v14 = 0;
            }
            uint64_t v15 = &v14[4 * v10];
            *(_DWORD *)uint64_t v15 = i;
            int64_t v8 = v15 + 4;
            while (v6 != v9)
            {
              int v16 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v15 - 1) = v16;
              v15 -= 4;
            }
            uint64_t v33 = v15;
            uint64_t v34 = v8;
            unint64_t v35 = &v14[4 * v13];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v6 = i;
            int64_t v8 = v6 + 4;
          }
          uint64_t v34 = v8;
          unint64_t v4 = a1[3];
          unint64_t v6 = v8;
        }
      }
    }
    int v17 = (std::__shared_weak_count *)a1[1];
    uint64_t v29 = *a1;
    int v30 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(&__p, ".animChans");
    uint64_t v18 = a1[5];
    v28[0] = 2;
    v28[2] = v18;
    v27[0] = 0;
    v27[2] = 0;
    v26[0] = 0;
    v26[2] = 0;
    v25[0] = 0;
    v25[2] = 0;
    sub_216806404((uint64_t)&v31, &v29, (uint64_t)&__p, v28, v27, v26, v25);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p);
    }
    if (v30) {
      sub_216784EC4(v30);
    }
    sub_2167C71F8(&__p, (uint64_t *)&v33);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)&v31);
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v31);
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    unint64_t v3 = (char *)a1[2];
  }
  if (v3) {
    operator delete(v3);
  }
  int v19 = (std::__shared_weak_count *)a1[1];
  if (v19) {
    sub_216784EC4(v19);
  }
  return a1;
}

uint64_t sub_216806314@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  unint64_t v4 = *(unint64_t **)result;
  if (v3)
  {
    unint64_t v5 = (64 - v3);
    if (v5 >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v3);
    }
    unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & *v4;
    if (v7)
    {
      unint64_t v8 = __rbit64(v7);
LABEL_15:
      *(void *)a3 = v4;
      *(_DWORD *)(a3 + 8) = __clz(v8);
      return result;
    }
    if (v5 >= a2)
    {
      uint64_t v10 = v3 + a2 - 63;
      if (v10 < 0) {
        uint64_t v10 = v3 + a2;
      }
      uint64_t v11 = v10 >> 6;
      unint64_t v12 = (v3 + a2) >> 6;
      if ((a2 & 0x8000000000000000) != 0) {
        unint64_t v12 = v11;
      }
      *(void *)a3 = &v4[v12];
      *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
      return result;
    }
    a2 -= v6;
    *(void *)uint64_t result = ++v4;
  }
  if (a2 >= 0x40)
  {
    do
    {
      unint64_t v9 = *v4;
      if (*v4) {
        goto LABEL_14;
      }
      *(void *)uint64_t result = ++v4;
      a2 -= 64;
    }
    while (a2 > 0x3F);
  }
  if (a2)
  {
    unint64_t v9 = *v4 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
    if (v9)
    {
LABEL_14:
      unint64_t v8 = __rbit64(v9);
      goto LABEL_15;
    }
  }
  *(void *)a3 = v4;
  *(_DWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t sub_216806404(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  int v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2167C8640(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2168064BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2168064DC(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A1A0;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 448);
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 392));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 344));
  unint64_t v7 = (void **)(a1 + 296);
  sub_216802314(&v7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 240));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 192));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3) {
    sub_216784EC4(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 168);
  if (v4) {
    sub_216784EC4(v4);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 112));
  unint64_t v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

void *Alembic::AbcCollection::v12::OCollectionsSchema::OCollectionsSchema(void *a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216806630((uint64_t)a1, &v10, a3, a4, a5, a6, a7);
  if (v11) {
    sub_216784EC4(v11);
  }
  *a1 = &unk_26C74A298;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  return a1;
}

void sub_216806618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216806630(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A2F8;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  int v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216806DF4(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_21680670C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void *Alembic::AbcCollection::v12::OCollectionsSchema::OCollectionsSchema(void *a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  unint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v11 = *((void *)a2 + 4);
  unint64_t v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = *a2;
  v10[0] = 1;
  v10[2] = v8;
  sub_216806630((uint64_t)a1, &v11, a3, v10, a4, a5, a6);
  if (v12) {
    sub_216784EC4(v12);
  }
  *a1 = &unk_26C74A298;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  return a1;
}

void sub_2168067D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::AbcCollection::v12::OCollectionsSchema::createCollection(void *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _DWORD *a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v25 = a1 + 1;
  int v26 = "OCollectionsSchema::createCollection";
  Alembic::AbcCollection::v12::OCollectionsSchema::getCollection((uint64_t)a1, a6);
  if (*(char *)(a6 + 31) < 0)
  {
    if (*(void *)(a6 + 16)) {
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(a6 + 31))
  {
    goto LABEL_6;
  }
  if (*(void *)(a6 + 32)) {
    return;
  }
LABEL_6:
  unint64_t v12 = (std::__shared_weak_count *)a1[6];
  uint64_t v19 = a1[5];
  uint64_t v20 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v18[0] = 0;
  _OWORD v18[2] = 0;
  sub_2167B8B50((uint64_t)&v21, &v19, a2, a3, a4, a5, v18);
  *(_DWORD *)a6 = v21;
  std::string::operator=((std::string *)(a6 + 8), &v22);
  uint64_t v14 = v23;
  uint64_t v13 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a6 + 40);
  *(void *)(a6 + 32) = v14;
  *(void *)(a6 + 40) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v21);
  if (v20) {
    sub_216784EC4(v20);
  }
  if (*(char *)(a6 + 31) < 0)
  {
    if (!*(void *)(a6 + 16)) {
      goto LABEL_18;
    }
LABEL_21:
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)a6);
    *(_DWORD *)a6 = 2;
    sub_216779094((void *)(a6 + 8), "");
    *(void *)(a6 + 32) = 0;
    *(void *)(a6 + 40) = 0;
    return;
  }
  if (*(unsigned char *)(a6 + 31)) {
    goto LABEL_21;
  }
LABEL_18:
  if (!*(void *)(a6 + 32)) {
    goto LABEL_21;
  }
  unint64_t v16 = a1[8];
  if (v16 >= a1[9])
  {
    uint64_t v17 = sub_2168071FC(a1 + 7, a6);
  }
  else
  {
    sub_21680730C((uint64_t)(a1 + 9), a1[8], a6);
    uint64_t v17 = v16 + 48;
    a1[8] = v16 + 48;
  }
  a1[8] = v17;
}

void sub_21680698C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v19);
  std::string v22 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a19, (uint64_t)v22);
  }
  else {
    sub_21679F9F4((uint64_t)&a19, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216806940);
}

void sub_216806A18(_Unwind_Exception *a1)
{
}

void Alembic::AbcCollection::v12::OCollectionsSchema::getCollection(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (int *)(a1 + 8);
  uint64_t v17 = a1 + 8;
  uint64_t v18 = "OCollectionsSchema::getCollection(string)";
  uint64_t PropertyHeader = Alembic::Abc::v12::OCompoundProperty::getPropertyHeader(a1 + 8);
  if (PropertyHeader
    && (*(_DWORD *)(PropertyHeader + 56) == 12 ? (BOOL v5 = *(_DWORD *)(PropertyHeader + 24) == 2) : (BOOL v5 = 0),
        v5 && sub_216807530(PropertyHeader + 32)))
  {
    Alembic::Abc::v12::OCompoundProperty::getProperty(v3, (uint64_t)v10);
    uint64_t v6 = v13;
    unint64_t v7 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 48))(&v15);
    v9[0] = 0;
    v9[2] = 0;
    v8[0] = 0;
    v8[2] = 0;
    sub_2168075CC(a2, &v15, v9, v8);
    if (v16) {
      sub_216784EC4(v16);
    }
    if (v7) {
      sub_216784EC4(v7);
    }
    if (v14) {
      sub_216784EC4(v14);
    }
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    *(_DWORD *)a2 = 2;
    sub_216779094((void *)(a2 + 8), "");
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
}

void sub_216806BE4(_Unwind_Exception *a1)
{
}

unsigned char *Alembic::AbcCollection::v12::OCollectionsSchema::getCollection@<X0>(Alembic::AbcCollection::v12::OCollectionsSchema *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v4) >> 4) <= a2)
  {
    *(_DWORD *)a3 = 2;
    uint64_t result = sub_216779094((void *)(a3 + 8), "");
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
  }
  else
  {
    uint64_t v5 = v4 + 48 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v5;
    uint64_t result = (unsigned char *)(a3 + 8);
    if (*(char *)(v5 + 31) < 0)
    {
      uint64_t result = sub_216778F24(result, *(void **)(v5 + 8), *(void *)(v5 + 16));
    }
    else
    {
      long long v7 = *(_OWORD *)(v5 + 8);
      *(void *)(a3 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t result = v7;
    }
    *(void *)(a3 + 32) = *(void *)(v5 + 32);
    uint64_t v8 = *(void *)(v5 + 40);
    *(void *)(a3 + 40) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void sub_216806D08(_Unwind_Exception *a1)
{
}

uint64_t sub_216806D28(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A298;
  unint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 56);
  sub_216807D48(&v4);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_216806D8C(char *a1)
{
  *(void *)a1 = &unk_26C74A298;
  unint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 56);
  sub_216807D48(&v3);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_216806DF4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  std::string v22 = 0;
  v23[0] = 0;
  int v21 = (uint64_t *)&v22;
  int v24 = 2;
  sub_2167898D0((uint64_t *)v25, (const void ***)&v21);
  v25[3] = 0;
  int v26 = 0;
  int v27 = 0;
  uint64_t v28 = 1;
  sub_2167877AC((uint64_t)&v21, v22);
  sub_2167A030C(a4, (uint64_t)&v24);
  sub_2167A030C(a5, (uint64_t)&v24);
  sub_2167A030C(a6, (uint64_t)&v24);
  sub_2167A030C(a7, (uint64_t)&v24);
  *(_DWORD *)(a1 + 8) = v24;
  void v23[33] = a1 + 8;
  v23[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v21);
    sub_216779180(v23, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v21, v25);
  if (HIDWORD(v28) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcCollection_Collections_v1");
    uint64_t v29 = __p;
    uint64_t v13 = sub_21677B174(&v21, (const void **)__p, (uint64_t)&unk_21740A78C, (long long **)&v29);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v14 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v21, v22);
  if (v26) {
    sub_216784EC4(v26);
  }
  sub_2167877AC((uint64_t)v25, v25[1]);
}

void sub_216807070(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216806FBCLL);
}

void sub_216807148(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_216807194(uint64_t a1)
{
  return a1;
}

void sub_2168071C0(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2168071FC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_2168073F4((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[48 * v3];
  uint64_t v13 = &v7[48 * v6];
  sub_21680730C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  char v12 = v11 + 48;
  sub_21680737C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_2168074E0((uint64_t)&v10);
  return v8;
}

void sub_2168072F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168074E0((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_21680730C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t result = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t result = v6;
  }
  uint64_t v7 = *(void *)(a3 + 40);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_21680737C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21680743C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2168073F4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_21677CA1C();
  }
  return operator new(48 * a2);
}

uint64_t sub_21680743C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = a7 - 48;
  while (a3 + v11 != a5)
  {
    uint64_t v13 = v12 + v11;
    v11 -= 48;
    sub_21680730C(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t sub_2168074E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_216807530(uint64_t a1)
{
  sub_216779094(__p, "interpretation");
  sub_21679F2AC(a1, (const void **)__p, v6);
  if (v7 < 0)
  {
    BOOL v2 = v6[1] == 0;
    operator delete(v6[0]);
  }
  else
  {
    BOOL v2 = v7 == 0;
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2168075B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168075CC(uint64_t a1, uint64_t *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v21 = *a2;
  std::string v22 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v18 = *a2;
    uint64_t v19 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v18 = v8;
    uint64_t v19 = 0;
  }
  v17[0] = 0;
  void v17[2] = 0;
  v16[0] = 0;
  void v16[2] = 0;
  int v11 = sub_216807718((uint64_t)&v18, a3, a4, v17, v16);
  v20[0] = 1;
  uint64_t v20[2] = v11;
  sub_21680784C(a1, &v21, v20);
  if (v19) {
    sub_216784EC4(v19);
  }
  if (v22) {
    sub_216784EC4(v22);
  }
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  uint64_t v15 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216807958(a1, (uint64_t)&v14, a3, a4);
  if (v15) {
    sub_216784EC4(v15);
  }
  return a1;
}

void sub_2168076D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_216807718(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = (const void **)v13;
  unsigned int v14 = 2;
  sub_2167898D0(v15, &v12);
  v15[3] = 0;
  unint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 1;
  sub_2167877AC((uint64_t)&v12, v13[0]);
  if (v9) {
    sub_216784EC4(v9);
  }
  sub_2167A030C(a2, (uint64_t)&v14);
  sub_2167A030C(a3, (uint64_t)&v14);
  sub_2167A030C(a4, (uint64_t)&v14);
  sub_2167A030C(a5, (uint64_t)&v14);
  uint64_t v10 = v14;
  if (v16) {
    sub_216784EC4(v16);
  }
  sub_2167877AC((uint64_t)v15, (void *)v15[1]);
  return v10;
}

void sub_216807818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  sub_2167877AC((uint64_t)&a10, a11);
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21680784C(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    uint64_t v12 = *a2;
    uint64_t v13 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = *a2;
    uint64_t v13 = 0;
  }
  v11[0] = 0;
  v11[2] = 0;
  v10[0] = 0;
  v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  int v7 = sub_216807718((uint64_t)&v12, a3, v11, v10, v9);
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a1 = v7;
  if (v13) {
    sub_216784EC4(v13);
  }
  if (v4) {
    sub_216784EC4(v4);
  }
  return a1;
}

void sub_216807934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216807958(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  void v27[33] = a1;
  v27[34] = "OTypedArrayProperty::init( ArrayPtr)";
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 16))();
  v26[0] = 0;
  v26[2] = 0;
  LODWORD(__p) = 0;
  LODWORD(v21) = 0;
  sub_216807C40(a3, a4, v26, &__p);
  BOOL v7 = *(_DWORD *)(v6 + 56) == 12 && *(_DWORD *)(v6 + 24) == 2;
  if (!v7 || !(BOOL result = sub_216807530(v6 + 32)))
  {
    sub_216778A5C((uint64_t)v26);
    unint64_t v9 = sub_216779180(v27, (uint64_t)"Incorrect match of header datatype: ", 36);
    uint64_t v10 = sub_21677D5B0(v9, (int *)(v6 + 56));
    int v11 = sub_216779180(v10, (uint64_t)" to expected: ", 14);
    uint64_t v25 = 0x10000000CLL;
    uint64_t v12 = sub_21677D5B0(v11, (int *)&v25);
    uint64_t v13 = sub_216779180(v12, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_216779094(v23, "interpretation");
    sub_21679F2AC(v6 + 32, (const void **)v23, &__p);
    if ((v22 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v22 & 0x80u) == 0) {
      uint64_t v15 = v22;
    }
    else {
      uint64_t v15 = v21;
    }
    unint64_t v16 = sub_216779180(v13, (uint64_t)p_p, v15);
    int v17 = sub_216779180(v16, (uint64_t)" to expected: ", 14);
    sub_216779180(v17, (uint64_t)"", 0);
    if ((char)v22 < 0) {
      operator delete(__p);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    std::stringbuf::str();
    sub_216778E70(&__p, (long long *)v23);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v19 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v19, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  return result;
}

void sub_216807B5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v29 = (uint64_t)v28;
    sub_2167A13A4(v24);
    sub_21679FA64(v25 - 64, v29);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v25 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216807A04);
}

void sub_216807C20(_Unwind_Exception *a1)
{
}

uint64_t sub_216807C40(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (const void **)v11;
  int v12 = 2;
  sub_2167898D0(v13, &v10);
  void v13[3] = 0;
  unsigned int v14 = 0;
  int v15 = 0;
  uint64_t v16 = 1;
  sub_2167877AC((uint64_t)&v10, v11[0]);
  sub_2167A030C(a1, (uint64_t)&v12);
  sub_2167A030C(a2, (uint64_t)&v12);
  sub_2167A030C(a3, (uint64_t)&v12);
  sub_2167A030C(a4, (uint64_t)&v12);
  uint64_t v8 = v16;
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)v13, (void *)v13[1]);
  return v8;
}

void sub_216807D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_216807D48(void ***a1)
{
  uint64_t v1 = *a1;
  BOOL v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v4 - 48));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Alembic::AbcCollection::v12::ICollectionsSchema::init(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  uint64_t v36 = a1 + 1;
  unint64_t v37 = "ICollectionsSchema::init()";
  uint64_t v7 = a1[5];
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a1[7];
  for (uint64_t i = a1[8];
        i != v9;
  a1[8] = v9;
  uint64_t NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties(v5);
  if (NumProperties)
  {
    for (uint64_t j = 0; j != NumProperties; ++j)
    {
      uint64_t PropertyHeader = (long long *)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v5);
      sub_2168084CC(__p, PropertyHeader);
      BOOL v13 = v34 == 12 && v32 == 2;
      if (v13 && sub_2167B6500((uint64_t)v33, 0))
      {
        uint64_t v22 = v7;
        uint64_t v23 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v21[0] = 0;
        v21[2] = 0;
        v20[0] = 0;
        uint64_t v20[2] = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v24, &v22, v21, v20);
        sub_2167B5F84((uint64_t)&v25, v24, (uint64_t)__p, a2, a3);
        unint64_t v14 = a1[8];
        if (v14 >= a1[9])
        {
          uint64_t v17 = sub_21680856C(a1 + 7, (uint64_t)&v25);
        }
        else
        {
          *(_DWORD *)unint64_t v14 = v25;
          int v15 = (unsigned char *)(v14 + 8);
          if (SHIBYTE(v27) < 0)
          {
            sub_216778F24(v15, (void *)v26, *((unint64_t *)&v26 + 1));
          }
          else
          {
            long long v16 = v26;
            *(void *)(v14 + 24) = v27;
            *(_OWORD *)int v15 = v16;
          }
          *(void *)(v14 + 32) = v28;
          uint64_t v18 = v29;
          *(void *)(v14 + 40) = v29;
          if (v18) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = v14 + 48;
          a1[8] = v14 + 48;
        }
        a1[8] = v17;
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v25);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v24);
        if (v23) {
          sub_216784EC4(v23);
        }
      }
      if (v35) {
        sub_216784EC4(v35);
      }
      sub_2167877AC((uint64_t)v33, v33[1]);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216807FEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  *(void *)(v31 + 64) = v32;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a24);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a18);
  if (a17) {
    sub_216784EC4(a17);
  }
  sub_2168080BC((uint64_t)&a30);
  if (v30) {
    sub_216784EC4(v30);
  }
  uint64_t v36 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v33 - 104, (uint64_t)v36);
  }
  else {
    sub_21679F9F4(v33 - 104, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216807FCCLL);
}

void sub_21680809C(_Unwind_Exception *a1)
{
}

uint64_t sub_2168080BC(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_2167877AC(a1 + 32, *(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *Alembic::AbcCollection::v12::ICollectionsSchema::getCollection@<X0>(Alembic::AbcCollection::v12::ICollectionsSchema *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v4) >> 4) <= a2)
  {
    *(_DWORD *)a3 = 2;
    BOOL result = sub_216779094((void *)(a3 + 8), "");
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
  }
  else
  {
    uint64_t v5 = v4 + 48 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v5;
    BOOL result = (unsigned char *)(a3 + 8);
    if (*(char *)(v5 + 31) < 0)
    {
      BOOL result = sub_216778F24(result, *(void **)(v5 + 8), *(void *)(v5 + 16));
    }
    else
    {
      long long v7 = *(_OWORD *)(v5 + 8);
      *(void *)(a3 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)BOOL result = v7;
    }
    *(void *)(a3 + 32) = *(void *)(v5 + 32);
    uint64_t v8 = *(void *)(v5 + 40);
    *(void *)(a3 + 40) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void sub_21680820C(_Unwind_Exception *a1)
{
}

void Alembic::AbcCollection::v12::ICollectionsSchema::getCollection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = a1 + 8;
  uint64_t v18 = "ICollectionsSchema::getCollection(string)";
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
  if (PropertyHeader
    && (*(_DWORD *)(PropertyHeader + 56) == 12 ? (BOOL v7 = *(_DWORD *)(PropertyHeader + 24) == 2) : (BOOL v7 = 0),
        v7 && sub_2167B6500(PropertyHeader + 32, 0)))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      int v15 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v14 = v8;
    v13[0] = 0;
    void v13[2] = 0;
    v12[0] = 0;
    v12[2] = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v16, &v14, v13, v12);
    v11[0] = 0;
    v11[2] = 0;
    v10[0] = 0;
    v10[2] = 0;
    sub_2167B5F84(a3, v16, a2, v11, v10);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v16);
    if (v15) {
      sub_216784EC4(v15);
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    *(_DWORD *)a3 = 2;
    sub_216779094((void *)(a3 + 8), "");
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
  }
}

void sub_2168083C4(_Unwind_Exception *a1)
{
}

void **Alembic::AbcCollection::v12::ICollectionsSchema::getCollectionName@<X0>(void **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this[7];
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)this[8] - v4) >> 4) <= a2)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    this = (void **)sub_2168087E8((uint64_t)&v4[48 * a2]);
    if (*((char *)this + 23) < 0)
    {
      return (void **)sub_216778F24((unsigned char *)a3, *this, (unint64_t)this[1]);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)this;
      *(void *)(a3 + 16) = this[2];
    }
  }
  return this;
}

void sub_2168084AC(_Unwind_Exception *a1)
{
}

void *sub_2168084CC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  sub_2167898D0(__dst + 4, (const void ***)a2 + 4);
  __dst[7] = *((void *)a2 + 7);
  uint64_t v5 = *((void *)a2 + 9);
  __dst[8] = *((void *)a2 + 8);
  __dst[9] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_216808550(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21680856C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    BOOL v7 = (char *)sub_2168073F4((uint64_t)(a1 + 2), v6);
  }
  else {
    BOOL v7 = 0;
  }
  uint64_t v10 = v7;
  int v11 = &v7[48 * v3];
  BOOL v13 = &v7[48 * v6];
  sub_21680730C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 48;
  sub_21680867C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216808798((uint64_t)&v10);
  return v8;
}

void sub_216808668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216808798((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21680867C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168086F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168086F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = a7 - 48;
  while (a3 + v11 != a5)
  {
    uint64_t v13 = v12 + v11;
    v11 -= 48;
    sub_21680730C(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t sub_216808798(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2168087E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_216808840(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  {
    {
      uint64_t v11 = operator new(0x50uLL);
      void *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      *((_DWORD *)v11 + 6) = 1;
      v11[6] = 0;
      v11[5] = 0;
      _DWORD v11[4] = v11 + 5;
      *((_DWORD *)v11 + 14) = 127;
      *((unsigned char *)v11 + 60) = 0;
      v11[8] = 0;
      v11[9] = 0;
      Alembic::Abc::v12::IBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::ArrayPropertyReader>>::getHeader(void)const::phd = (uint64_t)v11;
    }
  }
  JUMPOUT(0x216808830);
}

void sub_2168088E8(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcMaterial::v12::OMaterialSchema::OMaterialSchema(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216808A10(a1, &v10, a3, a4, a5, a6, a7);
  if (v11) {
    sub_216784EC4(v11);
  }
  *(void *)a1 = &unk_26C74A318;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  Alembic::AbcMaterial::v12::OMaterialSchema::init((Alembic::AbcMaterial::v12::OMaterialSchema *)a1);
  return a1;
}

void sub_2168089CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 112);
  if (v13) {
    sub_216784EC4(v13);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v11);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216808A10(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A378;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21680B004(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_216808AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::init(Alembic::AbcMaterial::v12::OMaterialSchema *this)
{
  BOOL v2 = operator new(0xA0uLL);
  v2[1] = 0u;
  v2[2] = 0u;
  v2[5] = 0u;
  *BOOL v2 = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[4] = 0u;
  v2[3] = 0u;
  *((void *)v2 + 2) = (char *)v2 + 24;
  *((void *)v2 + 5) = v2 + 3;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = 0;
  *((void *)v2 + 10) = 0;
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 8) = (char *)v2 + 72;
  *((_DWORD *)v2 + 22) = 2;
  sub_216779094((void *)v2 + 12, "");
  *((void *)v2 + 19) = 0;
  *(_OWORD *)((char *)v2 + 136) = 0u;
  *(_OWORD *)((char *)v2 + 120) = 0u;
  sub_21680B40C(&v9, (uint64_t)v2);
  long long v3 = v9;
  long long v9 = 0uLL;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  *(_OWORD *)((char *)this + 104) = v3;
  if (v4)
  {
    sub_216784EC4(v4);
    if (*((void *)&v9 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  uint64_t v6 = *((void *)this + 5);
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (void *)*((void *)this + 13);
  uint64_t v8 = (std::__shared_weak_count *)v7[1];
  void *v7 = v6;
  v7[1] = v5;
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_216808C28(_Unwind_Exception *a1)
{
  sub_2167877AC(v4, *(void **)(v1 + 72));
  sub_2167877AC(v3, *(void **)(v1 + 48));
  sub_21680AF40(v2, *(void **)(v1 + 24));
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6) {
    sub_216784EC4(v6);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::OMaterialSchema::OMaterialSchema(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v11 = *((void *)a2 + 4);
  uint64_t v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = *a2;
  v10[0] = 1;
  v10[2] = v8;
  sub_216808A10(a1, &v11, a3, v10, a4, a5, a6);
  if (v12) {
    sub_216784EC4(v12);
  }
  *(void *)a1 = &unk_26C74A318;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  Alembic::AbcMaterial::v12::OMaterialSchema::init((Alembic::AbcMaterial::v12::OMaterialSchema *)a1);
  return a1;
}

void sub_216808D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v15 = *(std::__shared_weak_count **)(v12 + 112);
  if (v15) {
    sub_216784EC4(v15);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v13);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v12 + 8));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setShader(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4)
{
  uint64_t v13 = a1 + 8;
  uint64_t v14 = "OMaterialSchema::setShader";
  sub_216779094(&__p, "target");
  sub_2168166D0(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_216779094(&__p, "shaderType");
  sub_2168166D0(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_216779094(v10, "");
  sub_2168165A8(a2, a3, (uint64_t)v10, &__p);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  int v8 = (uint64_t **)(*(void *)(a1 + 104) + 40);
  v10[0] = &__p;
  long long v9 = sub_21677B174(v8, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_21740A800, (long long **)v10);
  std::string::operator=((std::string *)(v9 + 7), a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216808EA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v24 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a22, (uint64_t)v24);
  }
  else {
    sub_21679F9F4((uint64_t)&a22, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216808E90);
}

void sub_216808F24(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::OMaterialSchema::getShaderParameters(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v46 = a1 + 1;
  double v47 = "OMaterialSchema::getShaderParameters";
  sub_216779094(&__p, "target");
  sub_2168166D0(a2, (uint64_t)&__p);
  if (v36.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  sub_216779094(&__p, "shaderType");
  sub_2168166D0(a3, (uint64_t)&__p);
  if (v36.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  sub_216779094(&__p, "params");
  sub_2168165A8(a2, a3, (uint64_t)&__p, &v45);
  if (v36.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  uint64_t v8 = sub_21678C2D8(a1[13] + 16, (const void **)&v45.__r_.__value_.__l.__data_);
  uint64_t v9 = v8;
  if (a1[13] + 24 == v8)
  {
    LODWORD(__p) = 2;
    sub_216779094(&v36, "");
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = 2;
    sub_216779094(&v40, "");
    uint64_t v41 = 0;
    char v42 = 0;
    long long v44 = 0uLL;
    uint64_t v43 = &v44;
    uint64_t v12 = (std::__shared_weak_count *)a1[6];
    uint64_t v29 = a1[5];
    uint64_t v30 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v28[0] = 0;
    v28[2] = 0;
    v27[0] = 0;
    v27[2] = 0;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v31, &v29, &v45, v28, v27);
    int v39 = (int)v31;
    std::string::operator=(&v40, &v32);
    uint64_t v14 = v33;
    uint64_t v13 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = v42;
    uint64_t v41 = v14;
    char v42 = v13;
    if (v15) {
      sub_216784EC4(v15);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v31);
    if (v30) {
      sub_216784EC4(v30);
    }
    uint64_t v16 = (uint64_t **)(a1[13] + 16);
    uint64_t v31 = &v45;
    uint64_t v17 = sub_21680BED0(v16, (const void **)&v45.__r_.__value_.__l.__data_, (uint64_t)&unk_21740A800, (long long **)&v31);
    *((_DWORD *)v17 + 14) = __p;
    std::string::operator=((std::string *)(v17 + 8), &v36);
    uint64_t v19 = v37;
    uint64_t v18 = v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    char v20 = (std::__shared_weak_count *)v17[12];
    v17[11] = v19;
    int v17[12] = v18;
    if (v20) {
      sub_216784EC4(v20);
    }
    *((_DWORD *)v17 + 26) = v39;
    std::string::operator=((std::string *)(v17 + 14), &v40);
    uint64_t v22 = v41;
    uint64_t v21 = (uint64_t)v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = (std::__shared_weak_count *)v17[18];
    v17[17] = v22;
    v17[18] = v21;
    if (v23) {
      sub_216784EC4(v23);
    }
    if (v17 + 7 != (uint64_t *)&__p) {
      sub_216799C1C((uint64_t **)v17 + 19, v43, &v44);
    }
    *(_DWORD *)a4 = v39;
    uint64_t v24 = (unsigned char *)(a4 + 8);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(v24, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
      *(void *)(a4 + 24) = *((void *)&v40.__r_.__value_.__l + 2);
    }
    long long v26 = v42;
    *(void *)(a4 + 32) = v41;
    *(void *)(a4 + 40) = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2167877AC((uint64_t)&v43, (void *)v44);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v39);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  }
  else
  {
    *(_DWORD *)a4 = *(_DWORD *)(v8 + 104);
    uint64_t v10 = (unsigned char *)(a4 + 8);
    if (*(char *)(v9 + 135) < 0)
    {
      sub_216778F24(v10, *(void **)(v9 + 112), *(void *)(v9 + 120));
    }
    else
    {
      long long v11 = *(_OWORD *)(v9 + 112);
      *(void *)(a4 + 24) = *(void *)(v9 + 128);
      *(_OWORD *)uint64_t v10 = v11;
    }
    *(void *)(a4 + 32) = *(void *)(v9 + 136);
    uint64_t v25 = *(void *)(v9 + 144);
    *(void *)(a4 + 40) = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
}

void sub_2168092C4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)va);
  if (a8) {
    sub_216784EC4(a8);
  }
  sub_2168093D8((void **)va1);
  if (*(char *)(v9 - 97) < 0) {
    operator delete(*(void **)(v9 - 120));
  }
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v9 - 96, (uint64_t)v12);
  }
  else {
    sub_21679F9F4(v9 - 96, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v8 = 2;
  sub_216779094((void *)(v8 + 8), "");
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  JUMPOUT(0x2168092A4);
}

void sub_2168093B8(_Unwind_Exception *a1)
{
}

void sub_2168093D8(void **a1)
{
  sub_2167877AC((uint64_t)(a1 + 12), a1[13]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 6));

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)a1);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(Alembic::AbcMaterial::v12::OMaterialSchema *this)
{
  uint64_t v16 = (char *)this + 8;
  uint64_t v17 = "OMaterialSchema::createNodeCompound";
  if (*((char *)this + 87) < 0)
  {
    if (!*((void *)this + 9)) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)this + 87))
  {
LABEL_5:
    if (*((void *)this + 11)) {
      return;
    }
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v10 = *((void *)this + 5);
  long long v11 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".nodes");
  v7[0] = 0;
  v7[2] = 0;
  v6[0] = 0;
  v6[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v12, &v10, __p, v7, v6);
  *((_DWORD *)this + 14) = v12;
  std::string::operator=((std::string *)((char *)this + 64), &v13);
  uint64_t v4 = v14;
  uint64_t v3 = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 11) = v4;
  *((void *)this + 12) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v12);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
}

void sub_216809528(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,char a22)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&a22);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    sub_216784EC4(a21);
  }
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v22 - 32, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v22 - 32, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216809518);
}

void sub_2168095A0(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::OMaterialSchema::addNetworkNode(Alembic::AbcMaterial::v12::OMaterialSchema *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v60 = (void *)((char *)a1 + 8);
  uint64_t v61 = "OMaterialSchema::addNetworkNode";
  sub_216779094(&__p, "nodeName");
  sub_2168166D0(a2, (uint64_t)&__p);
  if (v49.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  sub_216779094(&__p, "target");
  sub_2168166D0((uint64_t)a3, (uint64_t)&__p);
  if (v49.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  std::operator+<char>();
  if (*((void *)a1 + 13) + 24 != sub_21678C2D8(*((void *)a1 + 13) + 16, v58))
  {
    sub_216778A5C((uint64_t)&__p);
    char v20 = sub_216779180(&v49.__r_.__value_.__l.__size_, (uint64_t)"Node already added: ", 20);
    int v21 = *(char *)(a2 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a2;
    }
    else {
      uint64_t v22 = *(void *)a2;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a2 + 8);
    }
    sub_216779180(v20, v22, v23);
    std::stringbuf::str();
    sub_216778E70(&v42, (long long *)v46);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v25 = sub_216779038(exception, (uint64_t)&v42);
    __cxa_throw(v25, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(a1);
  LODWORD(__p) = 2;
  sub_216779094(&v49, "");
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int v52 = 2;
  sub_216779094(&v53, "");
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  v57[0] = 0uLL;
  uint64_t v56 = v57;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 12);
  uint64_t v40 = *((void *)a1 + 11);
  uint64_t v41 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v46[0]) = 0;
  LODWORD(v46[1]) = 0;
  int v38 = 0;
  int v39 = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v42, &v40, a2, v46, &v38);
  LODWORD(__p) = v42;
  std::string::operator=(&v49, &v43);
  uint64_t v10 = v44;
  char v9 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = v51;
  uint64_t v50 = v10;
  uint64_t v51 = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v42);
  if (v41) {
    sub_216784EC4(v41);
  }
  int v12 = (uint64_t **)(*((void *)a1 + 13) + 16);
  char v42 = v58;
  std::string v13 = sub_21680BED0(v12, v58, (uint64_t)&unk_21740A800, (long long **)&v42);
  *((_DWORD *)v13 + 14) = __p;
  std::string::operator=((std::string *)(v13 + 8), &v49);
  uint64_t v15 = v50;
  uint64_t v14 = (uint64_t)v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)v13[12];
  v13[11] = v15;
  v13[12] = v14;
  if (v16) {
    sub_216784EC4(v16);
  }
  *((_DWORD *)v13 + 26) = v52;
  std::string::operator=((std::string *)(v13 + 14), &v53);
  uint64_t v18 = v54;
  uint64_t v17 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)v13[18];
  v13[17] = v18;
  v13[18] = v17;
  if (v19) {
    sub_216784EC4(v19);
  }
  if (v13 + 7 != (uint64_t *)&__p) {
    sub_216799C1C((uint64_t **)v13 + 19, v56, v57);
  }
  int v34 = (int)__p;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    sub_216778F24(&v35, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v49;
  }
  uint64_t v36 = v50;
  uint64_t v37 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v46, "target");
  int v38 = 0;
  int v39 = 0;
  int v32 = 0;
  int v33 = 0;
  int v30 = 0;
  int v31 = 0;
  sub_2167A9570((uint64_t)&v42, &v34, (uint64_t)v46, &v38, &v32, &v30);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v42, a3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v42);
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v34);
  int v26 = (int)__p;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    sub_216778F24(&v27, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  }
  else {
    std::string v27 = v49;
  }
  uint64_t v28 = v50;
  uint64_t v29 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(v46, "type");
  int v38 = 0;
  int v39 = 0;
  int v32 = 0;
  int v33 = 0;
  int v30 = 0;
  int v31 = 0;
  sub_2167A9570((uint64_t)&v42, &v26, (uint64_t)v46, &v38, &v32, &v30);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)&v42, a4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v42);
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v26);
  sub_2167877AC((uint64_t)&v56, *(void **)&v57[0]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v52);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  if (v59 < 0) {
    operator delete((void *)v58[0]);
  }
}

void sub_216809A98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::exception a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  sub_216779148(&a29);
  sub_216778D38((uint64_t)&a41);
  if (*(char *)(v46 - 105) < 0) {
    operator delete(*(void **)(v46 - 128));
  }
  std::string v49 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v46 - 104, (uint64_t)v49);
  }
  else {
    sub_21679F9F4(v46 - 104, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2168099E0);
}

void sub_216809C2C(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setNetworkNodeConnection(Alembic::AbcMaterial::v12::OMaterialSchema *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  char v47 = (void *)((char *)a1 + 8);
  uint64_t v48 = "OMaterialSchema::setNetworkNodeConnection";
  std::operator+<char>();
  if (*((void *)a1 + 13) + 24 == sub_21678C2D8(*((void *)a1 + 13) + 16, v45))
  {
    Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(a1);
    LODWORD(__str.__r_.__value_.__l.__data_) = 2;
    sub_216779094(&__str.__r_.__value_.__l.__size_, "");
    uint64_t v37 = 0;
    int v38 = 0;
    int v39 = 2;
    sub_216779094(&v40, "");
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    long long v44 = 0uLL;
    std::string v43 = &v44;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 12);
    uint64_t v30 = *((void *)a1 + 11);
    int v31 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v29[0] = 0;
    v29[2] = 0;
    v28[0] = 0;
    v28[2] = 0;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&__p, &v30, a2, v29, v28);
    LODWORD(__str.__r_.__value_.__l.__data_) = __p;
    std::string::operator=((std::string *)&__str.__r_.__value_.__r.__words[1], &v33);
    uint64_t v12 = v34;
    long long v11 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v13 = v38;
    uint64_t v37 = v12;
    int v38 = v11;
    if (v13) {
      sub_216784EC4(v13);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
    if (v31) {
      sub_216784EC4(v31);
    }
    uint64_t v14 = (uint64_t **)(*((void *)a1 + 13) + 16);
    std::string __p = v45;
    uint64_t v15 = sub_21680BED0(v14, v45, (uint64_t)&unk_21740A800, (long long **)&__p);
    *((_DWORD *)v15 + 14) = __str.__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)(v15 + 8), (const std::string *)&__str.__r_.__value_.__r.__words[1]);
    uint64_t v17 = v37;
    uint64_t v16 = (uint64_t)v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)v15[12];
    v15[11] = v17;
    v15[12] = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
    *((_DWORD *)v15 + 26) = v39;
    std::string::operator=((std::string *)(v15 + 14), &v40);
    uint64_t v20 = v41;
    uint64_t v19 = v42;
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    int v21 = (std::__shared_weak_count *)v15[18];
    v15[17] = v20;
    v15[18] = v19;
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v15 + 7 != (uint64_t *)&__str) {
      sub_216799C1C((uint64_t **)v15 + 19, v43, &v44);
    }
    sub_2167877AC((uint64_t)&v43, (void *)v44);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v39);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__str);
  }
  if (*(char *)(a4 + 23) < 0) {
    sub_216778F24(&__str, *(void **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __str = *(std::string *)a4;
  }
  uint64_t v22 = *(unsigned __int8 *)(a5 + 23);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a5 + 8);
  }
  if (v22)
  {
    std::operator+<char>();
    uint64_t v23 = v33.__r_.__value_.__s.__data_[15] >= 0
        ? (const std::string::value_type *)&__p
        : (const std::string::value_type *)__p;
    std::string::size_type v24 = v33.__r_.__value_.__s.__data_[15] >= 0
        ? v33.__r_.__value_.__s.__data_[15]
        : v33.__r_.__value_.__r.__words[0];
    std::string::append(&__str, v23, v24);
    if (v33.__r_.__value_.__s.__data_[15] < 0) {
      operator delete(__p);
    }
  }
  uint64_t v25 = (uint64_t **)(*((void *)a1 + 13) + 16);
  std::string __p = v45;
  int v26 = sub_21680BED0(v25, v45, (uint64_t)&unk_21740A800, (long long **)&__p);
  std::string __p = a3;
  std::string v27 = sub_21677B174((uint64_t **)v26 + 19, (const void **)a3, (uint64_t)&unk_21740A800, (long long **)&__p);
  std::string::operator=((std::string *)(v27 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v46 < 0) {
    operator delete((void *)v45[0]);
  }
}

void sub_216809FA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  if (a14) {
    sub_216784EC4(a14);
  }
  sub_2168093D8((void **)&a24);
  if (*(char *)(v29 - 105) < 0) {
    operator delete(*(void **)(v29 - 128));
  }
  int v32 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v29 - 104, (uint64_t)v32);
  }
  else {
    sub_21679F9F4(v29 - 104, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216809F88);
}

void sub_21680A09C(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::OMaterialSchema::getNetworkNodeParameters(Alembic::AbcMaterial::v12::OMaterialSchema *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = (void *)((char *)a1 + 8);
  uint64_t v57 = "OMaterialSchema::getNetworkNodeParameters";
  std::operator+<char>();
  int v52 = 2;
  sub_216779094(v53, "");
  v53[3] = 0;
  v53[4] = 0;
  uint64_t v6 = sub_21678C2D8(*((void *)a1 + 13) + 16, v54);
  if (*((void *)a1 + 13) + 24 == v6)
  {
    Alembic::AbcMaterial::v12::OMaterialSchema::createNodeCompound(a1);
    int v42 = 2;
    sub_216779094(&v43, "");
    uint64_t v44 = 0;
    std::string v45 = 0;
    int v46 = 2;
    sub_216779094(&v47, "");
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    long long v51 = 0uLL;
    uint64_t v50 = &v51;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 12);
    uint64_t v36 = *((void *)a1 + 11);
    uint64_t v37 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v34 = 0;
    int v35 = 0;
    int v32 = 0;
    int v33 = 0;
    Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&__p, &v36, a2, &v34, &v32);
    int v42 = (int)__p;
    std::string::operator=(&v43, &v39);
    uint64_t v9 = v40;
    uint64_t v8 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = v45;
    uint64_t v44 = v9;
    std::string v45 = v8;
    if (v10) {
      sub_216784EC4(v10);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
    if (v37) {
      sub_216784EC4(v37);
    }
    long long v11 = (uint64_t **)(*((void *)a1 + 13) + 16);
    std::string __p = v54;
    uint64_t v12 = sub_21680BED0(v11, v54, (uint64_t)&unk_21740A800, (long long **)&__p);
    *((_DWORD *)v12 + 14) = v42;
    std::string::operator=((std::string *)(v12 + 8), &v43);
    uint64_t v14 = v44;
    uint64_t v13 = (uint64_t)v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (std::__shared_weak_count *)v12[12];
    v12[11] = v14;
    v12[12] = v13;
    if (v15) {
      sub_216784EC4(v15);
    }
    *((_DWORD *)v12 + 26) = v46;
    std::string::operator=((std::string *)(v12 + 14), &v47);
    uint64_t v17 = v48;
    uint64_t v16 = v49;
    if (v49) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)v12[18];
    v12[17] = v17;
    v12[18] = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
    if (v12 + 7 != (uint64_t *)&v42) {
      sub_216799C1C((uint64_t **)v12 + 19, v50, &v51);
    }
    sub_2167877AC((uint64_t)&v50, (void *)v51);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v46);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v42);
  }
  if (*(char *)(v6 + 135) < 0)
  {
    if (*(void *)(v6 + 120)) {
      goto LABEL_28;
    }
  }
  else if (*(unsigned char *)(v6 + 135))
  {
    goto LABEL_28;
  }
  if (*(void *)(v6 + 136))
  {
    *(_DWORD *)a3 = *(_DWORD *)(v6 + 104);
    uint64_t v19 = a3 + 8;
    if ((*(char *)(v6 + 135) & 0x80000000) == 0)
    {
      long long v20 = *(_OWORD *)(v6 + 112);
      uint64_t v21 = *(void *)(v6 + 128);
LABEL_41:
      *(void *)(v19 + 16) = v21;
      *(_OWORD *)uint64_t v19 = v20;
      goto LABEL_44;
    }
    sub_216778F24((unsigned char *)v19, *(void **)(v6 + 112), *(void *)(v6 + 120));
    goto LABEL_44;
  }
LABEL_28:
  int v27 = *(_DWORD *)(v6 + 56);
  if (*(char *)(v6 + 87) < 0)
  {
    sub_216778F24(&v28, *(void **)(v6 + 64), *(void *)(v6 + 72));
  }
  else
  {
    long long v28 = *(_OWORD *)(v6 + 64);
    uint64_t v29 = *(void *)(v6 + 80);
  }
  uint64_t v22 = *(void *)(v6 + 96);
  uint64_t v30 = *(void *)(v6 + 88);
  uint64_t v31 = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216779094(&__p, "params");
  int v34 = 0;
  int v35 = 0;
  int v32 = 0;
  int v33 = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v42, &v27, &__p, &v34, &v32);
  *(_DWORD *)(v6 + 104) = v42;
  std::string::operator=((std::string *)(v6 + 112), &v43);
  uint64_t v24 = v44;
  uint64_t v23 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v6 + 144);
  *(void *)(v6 + 136) = v24;
  *(void *)(v6 + 144) = v23;
  if (v25) {
    sub_216784EC4(v25);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v42);
  if (v39.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v27);
  *(_DWORD *)a3 = *(_DWORD *)(v6 + 104);
  uint64_t v19 = a3 + 8;
  if ((*(char *)(v6 + 135) & 0x80000000) == 0)
  {
    long long v20 = *(_OWORD *)(v6 + 112);
    uint64_t v21 = *(void *)(v6 + 128);
    goto LABEL_41;
  }
  sub_216778F24((unsigned char *)v19, *(void **)(v6 + 112), *(void *)(v6 + 120));
LABEL_44:
  *(void *)(a3 + 32) = *(void *)(v6 + 136);
  uint64_t v26 = *(void *)(v6 + 144);
  *(void *)(a3 + 40) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v52);
  if (v55 < 0) {
    operator delete((void *)v54[0]);
  }
}

void sub_21680A4D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v32 - 176));
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  int v35 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v32 - 104, (uint64_t)v35);
  }
  else {
    sub_21679F9F4(v32 - 104, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v31 = 2;
  sub_216779094((void *)(v31 + 8), "");
  *(void *)(v31 + 32) = 0;
  *(void *)(v31 + 40) = 0;
  JUMPOUT(0x21680A4B4);
}

void sub_21680A5F8(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setNetworkTerminal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a1 + 8;
  uint64_t v21 = "OMaterialSchema::setNetworkTerminal";
  sub_216779094(&__p, "target");
  sub_2168166D0(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_216779094(&__p, "shaderType");
  sub_2168166D0(a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_216779094(&__p, "nodeName");
  sub_2168166D0(a4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a4 + 23) < 0) {
    sub_216778F24(&__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  uint64_t v10 = *(unsigned __int8 *)(a5 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a5 + 8);
  }
  if (v10)
  {
    std::string::append(&__p, ".");
    int v11 = *(char *)(a5 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a5;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a5;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a5 + 8);
    }
    std::string::append(&__p, v12, v13);
  }
  sub_216779094(v16, "");
  sub_2168165A8(a2, a3, (uint64_t)v16, &v18);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  uint64_t v14 = (uint64_t **)(*(void *)(a1 + 104) + 64);
  v16[0] = &v18;
  uint64_t v15 = sub_21677B174(v14, (const void **)&v18.__r_.__value_.__l.__data_, (uint64_t)&unk_21740A800, (long long **)v16);
  std::string::operator=((std::string *)(v15 + 7), &__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21680A7EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a24, (uint64_t)v25);
  }
  else {
    sub_21679F9F4((uint64_t)&a24, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680A7D4);
}

void sub_21680A878(_Unwind_Exception *a1)
{
}

void sub_21680A898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    JUMPOUT(0x21680A8ACLL);
  }
  JUMPOUT(0x21680A834);
}

void Alembic::AbcMaterial::v12::OMaterialSchema::setNetworkInterfaceParameterMapping(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  v41[2] = *MEMORY[0x263EF8340];
  uint64_t v35 = a1 + 8;
  uint64_t v36 = "OMaterialSchema::setNetworkInterfaceParameterMapping";
  sub_216779094(__p, "mapToNodeName");
  sub_2168166D0(a3, (uint64_t)__p);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *(uint64_t **)(a1 + 104);
  uint64_t v9 = v8 + 17;
  unint64_t v10 = v8[18];
  if (v10 >= v8[19])
  {
    uint64_t v11 = sub_2167E9A44(v9, a2);
  }
  else
  {
    sub_2167E99E4(v9, a2);
    uint64_t v11 = v10 + 24;
  }
  v8[18] = v11;
  uint64_t v12 = *(uint64_t **)(a1 + 104);
  if (*(char *)(a3 + 23) >= 0) {
    size_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v13 = *(void *)(a3 + 8);
  }
  uint64_t v14 = &v34;
  sub_2167940B4((uint64_t)&v34, v13 + 1);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v15 = (const void *)a3;
    }
    else {
      uint64_t v15 = *(const void **)a3;
    }
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 46;
  int v16 = *(char *)(a4 + 23);
  if (v16 >= 0) {
    char v17 = (const std::string::value_type *)a4;
  }
  else {
    char v17 = *(const std::string::value_type **)a4;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a4 + 8);
  }
  uint64_t v19 = std::string::append(&v34, v17, v18);
  std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
  v41[0] = v19->__r_.__value_.__l.__size_;
  *(void *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  unint64_t v22 = v12[19];
  unint64_t v23 = v12[18];
  if (v23 >= v22)
  {
    uint64_t v26 = v12[17];
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v26) >> 3);
    unint64_t v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v26) >> 3);
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x555555555555555) {
      unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v30 = v28;
    }
    uint64_t v40 = v12 + 19;
    if (v30) {
      uint64_t v31 = (char *)sub_216782ED8((uint64_t)(v12 + 19), v30);
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v32 = (std::string::size_type *)&v31[24 * v27];
    __p[0] = v31;
    __p[1] = v32;
    std::string v39 = &v31[24 * v30];
    std::string::size_type v33 = v41[0];
    *uint64_t v32 = v20;
    v32[1] = v33;
    *(std::string::size_type *)((char *)v32 + 15) = *(void *)((char *)v41 + 7);
    *((unsigned char *)v32 + 23) = v21;
    int v38 = v32 + 3;
    sub_216790CCC(v12 + 17, __p);
    uint64_t v25 = v12[18];
    sub_216790E64((uint64_t)__p);
  }
  else
  {
    uint64_t v24 = v41[0];
    *(void *)unint64_t v23 = v20;
    *(void *)(v23 + 8) = v24;
    *(void *)(v23 + 15) = *(void *)((char *)v41 + 7);
    *(unsigned char *)(v23 + 23) = v21;
    uint64_t v25 = v23 + 24;
    v12[18] = v23 + 24;
  }
  v12[18] = v25;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_21680AB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    sub_216790E64((uint64_t)&a18);
    if (a15 < 0) {
      operator delete(__p);
    }
    uint64_t v25 = __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      sub_21679FA64((uint64_t)&a16, (uint64_t)v25);
    }
    else {
      sub_21679F9F4((uint64_t)&a16, 0);
    }
    __cxa_end_catch();
    JUMPOUT(0x21680AAF8);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *Alembic::AbcMaterial::v12::OMaterialSchema::getNetworkInterfaceParameters@<X0>(Alembic::AbcMaterial::v12::OMaterialSchema *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v23 = (char *)this + 8;
  uint64_t v24 = "OMaterialSchema::getNetworkInterfaceParameters";
  uint64_t v4 = *((void *)this + 13);
  if (*(char *)(v4 + 119) < 0)
  {
    if (!*(void *)(v4 + 104)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(v4 + 119))
  {
LABEL_5:
    if (*(void *)(v4 + 120)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 6);
  uint64_t v17 = *((void *)this + 5);
  std::string::size_type v18 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".interfaceParams");
  v14[0] = 0;
  v14[2] = 0;
  v13[0] = 0;
  void v13[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v19, &v17, __p, v14, v13);
  uint64_t v6 = *((void *)this + 13);
  *(_DWORD *)(v6 + 88) = v19;
  std::string::operator=((std::string *)(v6 + 96), &v20);
  uint64_t v8 = v21;
  uint64_t v7 = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v6 + 128);
  *(void *)(v6 + 120) = v8;
  *(void *)(v6 + 128) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v19);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v4 = *((void *)this + 13);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 88);
  uint64_t result = (unsigned char *)(a2 + 8);
  if (*(char *)(v4 + 119) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(v4 + 96), *(void *)(v4 + 104));
  }
  else
  {
    long long v11 = *(_OWORD *)(v4 + 96);
    *(void *)(a2 + 24) = *(void *)(v4 + 112);
    *(_OWORD *)uint64_t result = v11;
  }
  *(void *)(a2 + 32) = *(void *)(v4 + 120);
  uint64_t v12 = *(void *)(v4 + 128);
  *(void *)(a2 + 40) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21680ADB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x21680ADA4);
}

void sub_21680AE58(_Unwind_Exception *a1)
{
}

void *sub_21680AE78(void *a1)
{
  *a1 = &unk_26C74A318;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));
  return a1;
}

void sub_21680AED4(void *a1)
{
  *a1 = &unk_26C74A318;
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));

  operator delete(a1);
}

void sub_21680AF40(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21680AF40(a1, *a2);
    sub_21680AF40(a1, a2[1]);
    sub_21680AF9C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21680AF9C(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 24);
  sub_2167877AC(a1 + 120, *(void **)(a1 + 128));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 72));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_21680B004(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v22 = 0;
  v23[0] = 0;
  uint64_t v21 = (uint64_t *)&v22;
  int v24 = 2;
  sub_2167898D0((uint64_t *)v25, (const void ***)&v21);
  v25[3] = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v28 = 1;
  sub_2167877AC((uint64_t)&v21, v22);
  sub_2167A030C(a4, (uint64_t)&v24);
  sub_2167A030C(a5, (uint64_t)&v24);
  sub_2167A030C(a6, (uint64_t)&v24);
  sub_2167A030C(a7, (uint64_t)&v24);
  *(_DWORD *)(a1 + 8) = v24;
  void v23[33] = a1 + 8;
  v23[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v21);
    sub_216779180(v23, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v21, v25);
  if (HIDWORD(v28) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcMaterial_Material_v1");
    unint64_t v29 = __p;
    size_t v13 = sub_21677B174(&v21, (const void **)__p, (uint64_t)&unk_21740A800, (long long **)&v29);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v14 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v21, v22);
  if (v26) {
    sub_216784EC4(v26);
  }
  sub_2167877AC((uint64_t)v25, v25[1]);
}

void sub_21680B280(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  unint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680B1CCLL);
}

void sub_21680B358(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_21680B3A4(uint64_t a1)
{
  return a1;
}

void sub_21680B3D0(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void *sub_21680B40C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C74A398;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21680B464(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_21680B528(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21680B484(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21680B4AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_21680B528(v1);
    operator delete(v2);
  }
}

uint64_t sub_21680B4E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A3E8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_21680B528(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    unint64_t v70 = 0;
    sub_21680BC90(&v68, 2 * v2);
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3 != (void *)(a1 + 48))
    {
      unint64_t v4 = v69;
      do
      {
        uint64_t v5 = (long long *)(v3 + 4);
        if (v4 >= v70)
        {
          unint64_t v7 = sub_2167E9A44(&v68, v5);
        }
        else
        {
          if (*((char *)v3 + 55) < 0)
          {
            sub_216778F24((unsigned char *)v4, (void *)v3[4], v3[5]);
          }
          else
          {
            long long v6 = *v5;
            *(void *)(v4 + 16) = v3[6];
            *(_OWORD *)unint64_t v4 = v6;
          }
          unint64_t v7 = v4 + 24;
        }
        unint64_t v69 = v7;
        uint64_t v8 = (long long *)(v3 + 7);
        if (v7 >= v70)
        {
          unint64_t v4 = sub_2167E9A44(&v68, v8);
        }
        else
        {
          if (*((char *)v3 + 79) < 0)
          {
            sub_216778F24((unsigned char *)v7, (void *)v3[7], v3[8]);
          }
          else
          {
            long long v9 = *v8;
            *(void *)(v7 + 16) = v3[9];
            *(_OWORD *)unint64_t v7 = v9;
          }
          unint64_t v4 = v7 + 24;
        }
        unint64_t v69 = v4;
        unint64_t v10 = (void *)v3[1];
        if (v10)
        {
          do
          {
            long long v11 = v10;
            unint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            long long v11 = (void *)v3[2];
            BOOL v12 = *v11 == (void)v3;
            uint64_t v3 = v11;
          }
          while (!v12);
        }
        uint64_t v3 = v11;
      }
      while (v11 != (void *)(a1 + 48));
    }
    size_t v13 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v65 = *(void *)a1;
    long long v66 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".shaderNames");
    int v63 = 0;
    int v64 = 0;
    int v61 = 0;
    int v62 = 0;
    int v59 = 0;
    int v60 = 0;
    int v57 = 0;
    int v58 = 0;
    sub_2167B8B50((uint64_t)v67, &v65, (uint64_t)__p, &v63, &v61, &v59, &v57);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p[0]);
    }
    if (v66) {
      sub_216784EC4(v66);
    }
    sub_21680BD44(__p, &v68);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)v67);
    if (v55)
    {
      uint64_t v56 = v55;
      operator delete(v55);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v67);
    v67[0] = (void **)&v68;
    sub_216782F20(v14);
  }
  uint64_t v15 = *(void *)(a1 + 80);
  if (v15)
  {
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    unint64_t v70 = 0;
    sub_21680BC90(&v68, 2 * v15);
    char v16 = *(void **)(a1 + 64);
    if (v16 != (void *)(a1 + 72))
    {
      unint64_t v17 = v69;
      do
      {
        std::string::size_type v18 = (long long *)(v16 + 4);
        if (v17 >= v70)
        {
          unint64_t v20 = sub_2167E9A44(&v68, v18);
        }
        else
        {
          if (*((char *)v16 + 55) < 0)
          {
            sub_216778F24((unsigned char *)v17, (void *)v16[4], v16[5]);
          }
          else
          {
            long long v19 = *v18;
            *(void *)(v17 + 16) = v16[6];
            *(_OWORD *)unint64_t v17 = v19;
          }
          unint64_t v20 = v17 + 24;
        }
        unint64_t v69 = v20;
        uint64_t v21 = (long long *)(v16 + 7);
        if (v20 >= v70)
        {
          unint64_t v17 = sub_2167E9A44(&v68, v21);
        }
        else
        {
          if (*((char *)v16 + 79) < 0)
          {
            sub_216778F24((unsigned char *)v20, (void *)v16[7], v16[8]);
          }
          else
          {
            long long v22 = *v21;
            *(void *)(v20 + 16) = v16[9];
            *(_OWORD *)unint64_t v20 = v22;
          }
          unint64_t v17 = v20 + 24;
        }
        unint64_t v69 = v17;
        uint64_t v23 = (void *)v16[1];
        if (v23)
        {
          do
          {
            int v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            int v24 = (void *)v16[2];
            BOOL v12 = *v24 == (void)v16;
            char v16 = v24;
          }
          while (!v12);
        }
        char v16 = v24;
      }
      while (v24 != (void *)(a1 + 72));
    }
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v52 = *(void *)a1;
    std::string v53 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".terminals");
    int v63 = 0;
    int v64 = 0;
    int v61 = 0;
    int v62 = 0;
    int v59 = 0;
    int v60 = 0;
    int v57 = 0;
    int v58 = 0;
    sub_2167B8B50((uint64_t)v67, &v52, (uint64_t)__p, &v63, &v61, &v59, &v57);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p[0]);
    }
    if (v53) {
      sub_216784EC4(v53);
    }
    sub_21680BD44(__p, &v68);
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)v67);
    if (v55)
    {
      uint64_t v56 = v55;
      operator delete(v55);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v67);
    v67[0] = (void **)&v68;
    sub_216782F20(v26);
  }
  int v27 = *(void **)(a1 + 16);
  if (v27 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v28 = v27[21];
      if (v28)
      {
        uint64_t v68 = 0;
        unint64_t v69 = 0;
        unint64_t v70 = 0;
        sub_21680BC90(&v68, 2 * v28);
        unint64_t v29 = (void *)v27[19];
        if (v29 != v27 + 20)
        {
          unint64_t v30 = v69;
          do
          {
            uint64_t v31 = (long long *)(v29 + 4);
            if (v30 >= v70)
            {
              unint64_t v33 = sub_2167E9A44(&v68, v31);
            }
            else
            {
              if (*((char *)v29 + 55) < 0)
              {
                sub_216778F24((unsigned char *)v30, (void *)v29[4], v29[5]);
              }
              else
              {
                long long v32 = *v31;
                *(void *)(v30 + 16) = v29[6];
                *(_OWORD *)unint64_t v30 = v32;
              }
              unint64_t v33 = v30 + 24;
            }
            unint64_t v69 = v33;
            std::string v34 = (long long *)(v29 + 7);
            if (v33 >= v70)
            {
              unint64_t v30 = sub_2167E9A44(&v68, v34);
            }
            else
            {
              if (*((char *)v29 + 79) < 0)
              {
                sub_216778F24((unsigned char *)v33, (void *)v29[7], v29[8]);
              }
              else
              {
                long long v35 = *v34;
                *(void *)(v33 + 16) = v29[9];
                *(_OWORD *)unint64_t v33 = v35;
              }
              unint64_t v30 = v33 + 24;
            }
            unint64_t v69 = v30;
            uint64_t v36 = (void *)v29[1];
            if (v36)
            {
              do
              {
                uint64_t v37 = v36;
                uint64_t v36 = (void *)*v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                uint64_t v37 = (void *)v29[2];
                BOOL v12 = *v37 == (void)v29;
                unint64_t v29 = v37;
              }
              while (!v12);
            }
            unint64_t v29 = v37;
          }
          while (v37 != v27 + 20);
        }
        int v47 = *((_DWORD *)v27 + 14);
        if (*((char *)v27 + 87) < 0)
        {
          sub_216778F24(&v48, (void *)v27[8], v27[9]);
        }
        else
        {
          long long v48 = *((_OWORD *)v27 + 4);
          uint64_t v49 = v27[10];
        }
        uint64_t v38 = v27[12];
        uint64_t v50 = v27[11];
        uint64_t v51 = v38;
        if (v38) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
        }
        sub_216779094(__p, ".connections");
        int v63 = 0;
        int v64 = 0;
        int v61 = 0;
        int v62 = 0;
        int v59 = 0;
        int v60 = 0;
        sub_21680BDF4((uint64_t)v67, &v47, (uint64_t)__p, &v63, &v61, &v59);
        if (SHIBYTE(v55) < 0) {
          operator delete(__p[0]);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v47);
        sub_21680BD44(__p, &v68);
        Alembic::Abc::v12::OArrayProperty::set((uint64_t)v67);
        if (v55)
        {
          uint64_t v56 = v55;
          operator delete(v55);
        }
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v67);
        v67[0] = (void **)&v68;
        sub_216782F20(v39);
      }
      uint64_t v40 = (void *)v27[1];
      if (v40)
      {
        do
        {
          uint64_t v41 = v40;
          uint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          uint64_t v41 = (void *)v27[2];
          BOOL v12 = *v41 == (void)v27;
          int v27 = v41;
        }
        while (!v12);
      }
      int v27 = v41;
    }
    while (v41 != (void *)(a1 + 24));
  }
  if (*(void *)(a1 + 136) != *(void *)(a1 + 144))
  {
    int v42 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v45 = *(void *)a1;
    int v46 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(__p, ".interface");
    LODWORD(v68) = 0;
    LODWORD(v69) = 0;
    int v63 = 0;
    int v64 = 0;
    int v61 = 0;
    int v62 = 0;
    int v59 = 0;
    int v60 = 0;
    sub_2167B8B50((uint64_t)v67, &v45, (uint64_t)__p, &v68, &v63, &v61, &v59);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p[0]);
    }
    if (v46) {
      sub_216784EC4(v46);
    }
    sub_21680BD44(__p, (uint64_t *)(a1 + 136));
    Alembic::Abc::v12::OArrayProperty::set((uint64_t)v67);
    if (v55)
    {
      uint64_t v56 = v55;
      operator delete(v55);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v67);
  }
  v67[0] = (void **)(a1 + 136);
  sub_216782F20(v67);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 88));
  sub_2167877AC(a1 + 64, *(void **)(a1 + 72));
  sub_2167877AC(a1 + 40, *(void **)(a1 + 48));
  sub_21680AF40(a1 + 16, *(void **)(a1 + 24));
  std::string v43 = *(std::__shared_weak_count **)(a1 + 8);
  if (v43) {
    sub_216784EC4(v43);
  }
  return a1;
}

void sub_21680BC5C(void *a1)
{
  *(void *)(v2 - 104) = v1;
  sub_21675DB74(a1);
}

void sub_21680BC7C(void *a1)
{
  *(void *)(v2 - 104) = v1;
  sub_21675DB74(a1);
}

uint64_t sub_21680BC90(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    _DWORD v7[4] = result;
    v7[0] = sub_216782ED8(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_216790CCC(a1, v7);
    return sub_216790E64((uint64_t)v7);
  }
  return result;
}

void sub_21680BD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21680BD44(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_2167864B4(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x10000000CLL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    unint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21680BDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21680BDF4(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  BOOL v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  unint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  void v15[2] = v13;
  sub_2167B8C28(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_21680BEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

uint64_t *sub_21680BED0(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_21680BF7C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21680C0CC((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_21680BF7C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0xB0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_21680BFE8(v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21680BFD0(_Unwind_Exception *a1)
{
  sub_21680C0CC(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_21680BFE8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *((void *)__dst + 17) = 0;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *((_DWORD *)__dst + 6) = 2;
  sub_216779094((void *)__dst + 4, "");
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  *((_DWORD *)__dst + 18) = 2;
  sub_216779094((void *)__dst + 10, "");
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  *((void *)__dst + 17) = 0;
  *((void *)__dst + 16) = 0;
  *((void *)__dst + 15) = __dst + 128;
  return __dst;
}

void sub_21680C0A0(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_21680C0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21680AF9C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void Alembic::AbcMaterial::v12::IMaterialSchema::init(Alembic::AbcMaterial::v12::IMaterialSchema *this)
{
  uint64_t v2 = (char *)this + 8;
  char v81 = (char *)this + 8;
  int v82 = "IMaterialSchema::init()";
  uint64_t v4 = *((void *)this + 5);
  long long v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(&v77, ".nodes");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  uint64_t v6 = PropertyHeader;
  if (v78.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v77);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else if (!PropertyHeader)
  {
    goto LABEL_17;
  }
  uint64_t v72 = v4;
  std::string v73 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v70 = 0;
  int v71 = 0;
  int v68 = 0;
  int v69 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v74, &v72, &v70, &v68);
  sub_216779094(&__p, ".nodes");
  int v63 = 0;
  int v64 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v77, &v74, &__p, &v63);
  *((_DWORD *)this + 50) = v77;
  std::string::operator=((std::string *)((char *)this + 208), &v78);
  uint64_t v8 = v79;
  uint64_t v7 = v80;
  if (v80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 30);
  *((void *)this + 29) = v8;
  *((void *)this + 30) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v77);
  if (v67 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v74);
  if (v73) {
    sub_216784EC4(v73);
  }
LABEL_17:
  sub_216779094(&v77, ".interfaceParams");
  uint64_t v10 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  uint64_t v11 = v10;
  if (v78.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v77);
    if (!v11) {
      goto LABEL_31;
    }
  }
  else if (!v10)
  {
    goto LABEL_31;
  }
  uint64_t v61 = v4;
  int v62 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v70 = 0;
  int v71 = 0;
  int v68 = 0;
  int v69 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v74, &v61, &v70, &v68);
  sub_216779094(&__p, ".interfaceParams");
  int v63 = 0;
  int v64 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v77, &v74, &__p, &v63);
  *((_DWORD *)this + 38) = v77;
  std::string::operator=((std::string *)((char *)this + 160), &v78);
  uint64_t v13 = v79;
  uint64_t v12 = v80;
  if (v80) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
  }
  long long v14 = (std::__shared_weak_count *)*((void *)this + 24);
  *((void *)this + 23) = v13;
  *((void *)this + 24) = v12;
  if (v14) {
    sub_216784EC4(v14);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v77);
  if (v67 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v74);
  if (v62) {
    sub_216784EC4(v62);
  }
LABEL_31:
  sub_216779094(&v77, ".terminals");
  uint64_t v15 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  uint64_t v16 = v15;
  if (v78.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v77);
    if (!v16) {
      goto LABEL_53;
    }
  }
  else if (!v15)
  {
    goto LABEL_53;
  }
  uint64_t v59 = v4;
  int v60 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v70 = 0;
  int v71 = 0;
  int v68 = 0;
  int v69 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v74, &v59, &v70, &v68);
  sub_216779094(&__p, ".terminals");
  int v63 = 0;
  int v64 = 0;
  int v57 = 0;
  int v58 = 0;
  sub_2167B5F84((uint64_t)&v77, (int *)&v74, (uint64_t)&__p, &v63, &v57);
  if (v67 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v74);
  if (v60) {
    sub_216784EC4(v60);
  }
  std::string __p = 0;
  long long v66 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v76 = 2;
  sub_2167B5418((uint64_t)&v77, &__p, (uint64_t)&v74);
  unint64_t v17 = (uint64_t *)*((void *)__p + 2);
  uint64_t v18 = *((void *)__p + 3) - (void)v17;
  if (v18)
  {
    unint64_t v19 = v18 >> 3;
    uint64_t v20 = v19 <= 1 ? 1 : v19;
    unint64_t v21 = 1;
    do
    {
      uint64_t v22 = *v17++;
      v21 *= v22;
      --v20;
    }
    while (v20);
    if (v21 >= 2)
    {
      uint64_t v23 = 0;
      unint64_t v24 = v21 >> 1;
      do
      {
        uint64_t v25 = *(void *)__p + v23;
        uint64_t v74 = (long long *)v25;
        uint64_t v26 = sub_21677B174((uint64_t **)this + 10, (const void **)v25, (uint64_t)&unk_21740A95A, &v74);
        std::string::operator=((std::string *)(v26 + 7), (const std::string *)(v25 + 24));
        v23 += 48;
        --v24;
      }
      while (v24);
    }
  }
  if (v66) {
    sub_216784EC4(v66);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v77);
LABEL_53:
  sub_216779094(&v77, ".shaderNames");
  uint64_t v27 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  uint64_t v28 = v27;
  if (v78.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v77);
    if (!v28) {
      goto LABEL_75;
    }
  }
  else if (!v27)
  {
    goto LABEL_75;
  }
  uint64_t v55 = v4;
  uint64_t v56 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v70 = 0;
  int v71 = 0;
  int v68 = 0;
  int v69 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v74, &v55, &v70, &v68);
  sub_216779094(&__p, ".shaderNames");
  int v63 = 0;
  int v64 = 0;
  int v57 = 0;
  int v58 = 0;
  sub_2167B5F84((uint64_t)&v77, (int *)&v74, (uint64_t)&__p, &v63, &v57);
  if (v67 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v74);
  if (v56) {
    sub_216784EC4(v56);
  }
  std::string __p = 0;
  long long v66 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v76 = 2;
  sub_2167B5418((uint64_t)&v77, &__p, (uint64_t)&v74);
  unint64_t v29 = (uint64_t *)*((void *)__p + 2);
  uint64_t v30 = *((void *)__p + 3) - (void)v29;
  if (v30)
  {
    unint64_t v31 = v30 >> 3;
    uint64_t v32 = v31 <= 1 ? 1 : v31;
    unint64_t v33 = 1;
    do
    {
      uint64_t v34 = *v29++;
      v33 *= v34;
      --v32;
    }
    while (v32);
    if (v33 >= 2)
    {
      uint64_t v35 = 0;
      unint64_t v36 = v33 >> 1;
      do
      {
        uint64_t v37 = *(void *)__p + v35;
        uint64_t v74 = (long long *)v37;
        uint64_t v38 = sub_21677B174((uint64_t **)this + 7, (const void **)v37, (uint64_t)&unk_21740A95A, &v74);
        std::string::operator=((std::string *)(v38 + 7), (const std::string *)(v37 + 24));
        v35 += 48;
        --v36;
      }
      while (v36);
    }
  }
  if (v66) {
    sub_216784EC4(v66);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v77);
LABEL_75:
  sub_216779094(&v77, ".interface");
  uint64_t v39 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v2);
  uint64_t v40 = v39;
  if (v78.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v77);
    if (!v40)
    {
LABEL_77:
      if (!v3) {
        return;
      }
LABEL_104:
      sub_216784EC4(v3);
      return;
    }
  }
  else if (!v39)
  {
    goto LABEL_77;
  }
  uint64_t v53 = v4;
  uint64_t v54 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v70 = 0;
  int v71 = 0;
  int v68 = 0;
  int v69 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v74, &v53, &v70, &v68);
  sub_216779094(&__p, ".interface");
  int v63 = 0;
  int v64 = 0;
  int v57 = 0;
  int v58 = 0;
  sub_2167B5F84((uint64_t)&v77, (int *)&v74, (uint64_t)&__p, &v63, &v57);
  if (v67 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v74);
  if (v54) {
    sub_216784EC4(v54);
  }
  std::string __p = 0;
  long long v66 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v76 = 2;
  sub_2167B5418((uint64_t)&v77, &__p, (uint64_t)&v74);
  uint64_t v41 = (uint64_t *)*((void *)__p + 2);
  uint64_t v42 = *((void *)__p + 3) - (void)v41;
  if (v42)
  {
    unint64_t v43 = v42 >> 3;
    if (v43 <= 1) {
      unint64_t v43 = 1;
    }
    unint64_t v44 = 1;
    do
    {
      uint64_t v45 = *v41++;
      v44 *= v45;
      --v43;
    }
    while (v43);
  }
  else
  {
    unint64_t v44 = 0;
  }
  sub_21680BC90((uint64_t *)this + 16, v44 >> 1);
  if (v44 >= 2)
  {
    uint64_t v46 = 0;
    if (v44 >> 1 <= 1) {
      uint64_t v47 = 1;
    }
    else {
      uint64_t v47 = v44 >> 1;
    }
    do
    {
      uint64_t v48 = *(void *)__p + v46;
      uint64_t v74 = (long long *)v48;
      uint64_t v49 = sub_21677B174((uint64_t **)this + 13, (const void **)v48, (uint64_t)&unk_21740A95A, &v74);
      std::string::operator=((std::string *)(v49 + 7), (const std::string *)(v48 + 24));
      uint64_t v50 = (long long *)(*(void *)__p + v46);
      unint64_t v51 = *((void *)this + 17);
      if (v51 >= *((void *)this + 18))
      {
        uint64_t v52 = sub_2167E9A44((uint64_t *)this + 16, v50);
      }
      else
      {
        sub_2167E99E4((void *)this + 16, v50);
        uint64_t v52 = v51 + 24;
      }
      *((void *)this + 17) = v52;
      v46 += 48;
      --v47;
    }
    while (v47);
  }
  if (v66) {
    sub_216784EC4(v66);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v77);
  if (v3) {
    goto LABEL_104;
  }
}

void sub_21680C8B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a23) {
    sub_216784EC4(a23);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v36 - 144));
  if (v35) {
    sub_216784EC4(v35);
  }
  uint64_t v39 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v40 = (uint64_t)v39;
    sub_2167A13A4(v34);
    sub_21679FA64(v36 - 96, v40);
  }
  else
  {
    sub_2167A13A4(v34);
    sub_21679F9F4(v36 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680C894);
}

void sub_21680CB04(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getTargetNames(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1 + 8;
  uint64_t v15 = "IMaterial::getTargetNames";
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v12;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  long long v3 = *(void **)(a1 + 56);
  uint64_t v4 = (void *)(a1 + 64);
  if (v3 != (void *)(a1 + 64))
  {
    do
    {
      sub_21681681C((uint64_t)(v3 + 4), (uint64_t *)&v8, 0);
      if (v9 - (void)v8 == 48) {
        sub_21680EE0C((uint64_t **)&v11, v8, (uint64_t)v8);
      }
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          long long v3 = v6;
        }
        while (!v7);
      }
      long long v3 = v6;
    }
    while (v6 != v4);
  }
  sub_216782F74((uint64_t *)a2);
  sub_21680BC90((uint64_t *)a2, v13);
  sub_21680CCCC((uint64_t *)a2, *(std::string **)(a2 + 8), v11, &v12);
  uint64_t v16 = &v8;
  sub_216782F20((void ***)&v16);
  sub_21678A498((uint64_t)&v11, v12);
}

void sub_21680CC38(void *a1, int a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, char *);
  uint64_t v16 = va_arg(va2, void);
  *(void *)(v4 - 56) = va;
  sub_216782F20((void ***)(v4 - 56));
  sub_21678A498((uint64_t)va1, v15);
  BOOL v7 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v8 = (uint64_t)v7;
    sub_2167A13A4(v3);
    sub_21679FA64((uint64_t)va2, v8);
  }
  else
  {
    sub_2167A13A4(v3);
    sub_21679F9F4((uint64_t)va2, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680CC20);
}

void sub_21680CCAC(_Unwind_Exception *a1)
{
}

std::string *sub_21680CCCC(uint64_t *a1, std::string *a2, void *a3, void *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint64_t v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_21680EF2C(a1, a2, a3, a4, v4);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getShaderTypesForTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a1 + 8;
  unint64_t v24 = "IMaterialSchema::getShaderTypesForTarget";
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v21;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = (void *)(a1 + 64);
  if (v4 != (void *)(a1 + 64))
  {
    while (1)
    {
      sub_21681681C((uint64_t)(v4 + 4), (uint64_t *)&v17, 0);
      uint64_t v7 = (uint64_t)v17;
      if (v18 - (void)v17 != 48) {
        goto LABEL_20;
      }
      uint64_t v8 = v17[23];
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = v17[23];
      }
      else {
        uint64_t v9 = *((void *)v17 + 1);
      }
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      if (v9 != v10) {
        goto LABEL_20;
      }
      uint64_t v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v8 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)v17, v12, *((void *)v17 + 1))) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v14 = (void *)v4[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v4[2];
          BOOL v16 = *v15 == (void)v4;
          uint64_t v4 = v15;
        }
        while (!v16);
      }
      uint64_t v4 = v15;
      if (v15 == v5) {
        goto LABEL_26;
      }
    }
    if (v17[23])
    {
      uint64_t v13 = v17;
      while (*v13 == *v12)
      {
        ++v13;
        ++v12;
        if (!--v8) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    }
LABEL_19:
    sub_21680EE0C((uint64_t **)&v20, (const void **)(v7 + 24), v7 + 24);
    goto LABEL_20;
  }
LABEL_26:
  sub_216782F74((uint64_t *)a3);
  sub_21680BC90((uint64_t *)a3, v22);
  sub_21680CCCC((uint64_t *)a3, *(std::string **)(a3 + 8), v20, &v21);
  uint64_t v25 = &v17;
  sub_216782F20((void ***)&v25);
  sub_21678A498((uint64_t)&v20, v21);
}

void sub_21680CEC0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  sub_216782F20(&a18);
  sub_21678A498((uint64_t)&a13, a14);
  unint64_t v21 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v22 = (uint64_t)v21;
    sub_2167A13A4(v18);
    sub_21679FA64((uint64_t)&a16, v22);
  }
  else
  {
    sub_2167A13A4(v18);
    sub_21679F9F4((uint64_t)&a16, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680CEA4);
}

void sub_21680CF34(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::getShader(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v13 = a1 + 8;
  uint64_t v14 = "IMaterialSchema::getShader";
  sub_216779094(__p, "");
  sub_2168165A8(a2, a3, (uint64_t)__p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = sub_21678C2D8(a1 + 56, (const void **)&v12.__r_.__value_.__l.__data_);
  if (a1 + 64 == v8)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  else
  {
    std::string::operator=(a4, (const std::string *)(v8 + 56));
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    return 1;
  }
}

void sub_21680D02C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  unint64_t v24 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v25 = (uint64_t)v24;
    sub_2167A13A4(v21);
    sub_21679FA64((uint64_t)&a21, v25);
  }
  else
  {
    sub_2167A13A4(v21);
    sub_21679F9F4((uint64_t)&a21, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680D010);
}

void sub_21680D0B0(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getShaderParameters(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 2;
  sub_216779094((void *)(a4 + 8), "");
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  uint64_t v8 = a1 + 8;
  uint64_t v19 = v8;
  uint64_t v20 = "IMaterialSchema::getShaderParameters";
  sub_216779094(&__p, "params");
  sub_2168165A8(a2, a3, (uint64_t)&__p, &v18);
  if (v15.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(__p);
  }
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v8);
  if (PropertyHeader && !*(_DWORD *)(PropertyHeader + 24))
  {
    v13[0] = 0;
    void v13[2] = 0;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, v8, &v18, v13);
    *(_DWORD *)a4 = __p;
    std::string::operator=((std::string *)(a4 + 8), &v15);
    uint64_t v11 = v16;
    uint64_t v10 = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    std::string v12 = *(std::__shared_weak_count **)(a4 + 40);
    *(void *)(a4 + 32) = v11;
    *(void *)(a4 + 40) = v10;
    if (v12) {
      sub_216784EC4(v12);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_21680D200(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a12);
  if (a26 < 0) {
    operator delete(__p);
  }
  uint64_t v30 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v31 = (uint64_t)v30;
    sub_2167A13A4(v26);
    sub_21679FA64(v27 - 64, v31);
  }
  else
  {
    sub_2167A13A4(v26);
    sub_21679F9F4(v27 - 64, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680D1E8);
}

void sub_21680D2A0(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::getNumNetworkNodes(Alembic::AbcMaterial::v12::IMaterialSchema *this)
{
  if (*((char *)this + 231) < 0)
  {
    if (*((void *)this + 27)) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 231))
  {
    return 0;
  }
  if (*((void *)this + 29)) {
    return Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)this + 200));
  }
  return 0;
}

void sub_21680D384(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNodeNames(uint64_t a1, uint64_t *a2)
{
  sub_216782F74(a2);
  if (*(char *)(a1 + 231) < 0)
  {
    if (*(void *)(a1 + 216)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 231))
  {
    return;
  }
  if (*(void *)(a1 + 232))
  {
    uint64_t v4 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 200);
    unint64_t NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties(v4);
    sub_21680BC90(a2, NumProperties);
    uint64_t v6 = Alembic::Abc::v12::ICompoundProperty::getNumProperties(v4);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v4);
        if (!*(_DWORD *)(PropertyHeader + 24))
        {
          unint64_t v9 = a2[1];
          if (v9 >= a2[2])
          {
            uint64_t v10 = sub_2167E9A44(a2, (long long *)PropertyHeader);
          }
          else
          {
            sub_2167E99E4(a2, (long long *)PropertyHeader);
            uint64_t v10 = v9 + 24;
          }
          a2[1] = v10;
        }
      }
    }
  }
}

void sub_21680D490(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v12 = (uint64_t)v11;
    sub_2167A13A4(v9);
    sub_21679FA64((uint64_t)&a9, v12);
  }
  else
  {
    sub_2167A13A4(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680D478);
}

void sub_21680D4E0(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNode(Alembic::AbcMaterial::v12::IMaterialSchema *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = (char *)this + 8;
  uint64_t v10 = "IMateriaSchema::getNetworkNode";
  if ((*((char *)this + 231) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 231)) {
      goto LABEL_5;
    }
LABEL_8:
    *(_DWORD *)a3 = 2;
    sub_216779094((void *)(a3 + 8), "");
    *(void *)(a3 + 88) = 0;
    uint64_t v6 = a3 + 88;
    *(void *)(v6 - 32) = 0;
    *(void *)(v6 - 24) = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 - 56) = 0;
    *(void *)(v6 - 48) = 0;
    *(unsigned char *)(v6 - 40) = 0;
    *(void *)(v6 - 16) = 0;
    *(void *)(v6 - 8) = v6;
    return;
  }
  if (*((void *)this + 27)) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*((void *)this + 29)) {
    goto LABEL_8;
  }
  uint64_t v4 = (Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)this + 200);
  if (Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)this + 200)) <= a2) {
    goto LABEL_8;
  }
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v4);
  if (*(_DWORD *)(PropertyHeader + 24)) {
    goto LABEL_8;
  }
  v7[0] = 0;
  v7[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v8, v4, PropertyHeader, v7);
  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(a3, (uint64_t)v8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v8);
}

void sub_21680D60C(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  uint64_t v9 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v10 = (uint64_t)v9;
    sub_2167A13A4(v5);
    sub_21679FA64(v6 - 48, v10);
  }
  else
  {
    sub_2167A13A4(v5);
    sub_21679F9F4(v6 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v4 = 2;
  sub_216779094((void *)(v4 + 8), "");
  JUMPOUT(0x21680D5B0);
}

void sub_21680D690(_Unwind_Exception *a1)
{
}

Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this)
{
  *(_DWORD *)this = 2;
  sub_216779094((void *)this + 1, "");
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = (char *)this + 88;
  return this;
}

{
  *(_DWORD *)this = 2;
  sub_216779094((void *)this + 1, "");
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = (char *)this + 88;
  return this;
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7 = *(_DWORD *)(a1 + 200);
  if (*(char *)(a1 + 231) < 0)
  {
    sub_216778F24(&v8, *(void **)(a1 + 208), *(void *)(a1 + 216));
  }
  else
  {
    long long v8 = *(_OWORD *)(a1 + 208);
    uint64_t v9 = *(void *)(a1 + 224);
  }
  uint64_t v6 = *(void *)(a1 + 240);
  uint64_t v10 = *(void *)(a1 + 232);
  uint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(a3, (uint64_t)&v7, a2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v7);
}

void sub_21680D7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalTargetNames(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1 + 8;
  uint64_t v17 = "IMateriaSchema::getNetworkTerminalTargetNames";
  sub_216782F74((uint64_t *)a2);
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v14;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v4 = *(void **)(a1 + 80);
  uint64_t v5 = (void *)(a1 + 88);
  if (v4 == v5)
  {
    unint64_t v9 = 0;
  }
  else
  {
    do
    {
      sub_21681681C((uint64_t)(v4 + 4), (uint64_t *)&v10, 0);
      if (v11 - (void)v10 == 48) {
        sub_21680EE0C((uint64_t **)&v13, v10, (uint64_t)v10);
      }
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != v5);
    unint64_t v9 = v15;
  }
  sub_21680BC90((uint64_t *)a2, v9);
  sub_21680CCCC((uint64_t *)a2, *(std::string **)(a2 + 8), v13, &v14);
  std::string v18 = &v10;
  sub_216782F20((void ***)&v18);
  sub_21678A498((uint64_t)&v13, v14);
}

void sub_21680D8E0(void *a1, int a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  unint64_t v15 = va_arg(va2, char *);
  uint64_t v16 = va_arg(va2, void);
  *(void *)(v4 - 56) = va;
  sub_216782F20((void ***)(v4 - 56));
  sub_21678A498((uint64_t)va1, v15);
  int v7 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v8 = (uint64_t)v7;
    sub_2167A13A4(v3);
    sub_21679FA64((uint64_t)va2, v8);
  }
  else
  {
    sub_2167A13A4(v3);
    sub_21679F9F4((uint64_t)va2, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680D8C8);
}

void sub_21680D954(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalShaderTypesForTarget(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v25 = a1 + 8;
  uint64_t v26 = "IMateriaSchema::getNetworkTerminalShaderTypesForTarget";
  sub_216782F74((uint64_t *)a3);
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = &v23;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v6 = *(void **)(a1 + 80);
  int v7 = (void *)(a1 + 88);
  if (v6 == v7)
  {
    unint64_t v18 = 0;
    goto LABEL_28;
  }
  do
  {
    sub_21681681C((uint64_t)(v6 + 4), (uint64_t *)&v19, 0);
    uint64_t v8 = (uint64_t)v19;
    if (v20 - (void)v19 == 48)
    {
      uint64_t v9 = v19[23];
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = v19[23];
      }
      else {
        uint64_t v10 = *((void *)v19 + 1);
      }
      uint64_t v11 = a2[23];
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *((void *)a2 + 1);
      }
      if (v10 == v11)
      {
        if (v12 >= 0) {
          uint64_t v13 = a2;
        }
        else {
          uint64_t v13 = *(unsigned __int8 **)a2;
        }
        if ((v9 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v19, v13, *((void *)v19 + 1))) {
            goto LABEL_20;
          }
LABEL_19:
          sub_21680EE0C((uint64_t **)&v22, (const void **)(v8 + 24), v8 + 24);
          goto LABEL_20;
        }
        if (!v19[23]) {
          goto LABEL_19;
        }
        uint64_t v14 = v19;
        while (*v14 == *v13)
        {
          ++v14;
          ++v13;
          if (!--v9) {
            goto LABEL_19;
          }
        }
      }
    }
LABEL_20:
    unint64_t v15 = (void *)v6[1];
    if (v15)
    {
      do
      {
        uint64_t v16 = v15;
        unint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        uint64_t v16 = (void *)v6[2];
        BOOL v17 = *v16 == (void)v6;
        uint64_t v6 = v16;
      }
      while (!v17);
    }
    uint64_t v6 = v16;
  }
  while (v16 != v7);
  unint64_t v18 = v24;
LABEL_28:
  sub_21680BC90((uint64_t *)a3, v18);
  sub_21680CCCC((uint64_t *)a3, *(std::string **)(a3 + 8), v22, &v23);
  uint64_t v27 = &v19;
  sub_216782F20((void ***)&v27);
  sub_21678A498((uint64_t)&v22, v23);
}

void sub_21680DB1C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  sub_216782F20(&a18);
  sub_21678A498((uint64_t)&a13, a14);
  uint64_t v21 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v22 = (uint64_t)v21;
    sub_2167A13A4(v18);
    sub_21679FA64((uint64_t)&a16, v22);
  }
  else
  {
    sub_2167A13A4(v18);
    sub_21679F9F4((uint64_t)&a16, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680DB00);
}

void sub_21680DB90(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminal(uint64_t a1, const void **a2, uint64_t a3, std::string *a4, uint64_t a5)
{
  uint64_t v27 = a1 + 8;
  uint64_t v28 = "IMateriaSchema::getNetworkTerminal";
  if (*((char *)a2 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = &v24;
  sub_2167940B4((uint64_t)&v24, v10 + 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v12 = a2;
    }
    else {
      int v12 = *a2;
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 46;
  int v13 = *(char *)(a3 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v14 = *(const std::string::value_type **)a3;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a3 + 8);
  }
  uint64_t v16 = std::string::append(&v24, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = sub_21678C2D8(a1 + 80, (const void **)__p);
  BOOL v19 = a1 + 88 == v18;
  BOOL v20 = a1 + 88 != v18;
  if (!v19)
  {
    memset(&v24, 0, sizeof(v24));
    sub_21681681C(v18 + 56, (uint64_t *)&v24, 1);
    std::string::operator=(a4, (const std::string *)v24.__r_.__value_.__l.__data_);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]) >> 3) < 2)
    {
      sub_216779094(&v22, "");
    }
    else if (*(char *)(v24.__r_.__value_.__r.__words[0] + 47) < 0)
    {
      sub_216778F24(&v22, *(void **)(v24.__r_.__value_.__r.__words[0] + 24), *(void *)(v24.__r_.__value_.__r.__words[0] + 32));
    }
    else
    {
      long long v22 = *(_OWORD *)(v24.__r_.__value_.__r.__words[0] + 24);
      uint64_t v23 = *(void *)(v24.__r_.__value_.__r.__words[0] + 40);
    }
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(_OWORD *)a5 = v22;
    *(void *)(a5 + 16) = v23;
    *(void *)&long long v22 = &v24;
    sub_216782F20((void ***)&v22);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  return v20;
}

void sub_21680DD98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  a9 = &a12;
  sub_216782F20((void ***)&a9);
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v28 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v29 = (uint64_t)v28;
    sub_2167A13A4(v25);
    sub_21679FA64((uint64_t)&a25, v29);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4((uint64_t)&a25, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680DD78);
}

void sub_21680DE40(_Unwind_Exception *a1)
{
}

unint64_t Alembic::AbcMaterial::v12::IMaterialSchema::getNumNetworkInterfaceParameterMappings(Alembic::AbcMaterial::v12::IMaterialSchema *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 17) - *((void *)this + 16)) >> 3);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping(uint64_t a1, unint64_t a2, std::string *this, std::string *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 128);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 136) - v5) >> 3) <= a2) {
    return 0;
  }
  std::string::operator=(this, (const std::string *)(v5 + 24 * a2));
  return Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping(a1, (const void **)&this->__r_.__value_.__l.__data_, a4, a5);
}

void sub_21680DF60(_Unwind_Exception *a1)
{
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping(uint64_t a1, const void **a2, std::string *a3, uint64_t a4)
{
  uint64_t v15 = a1 + 8;
  uint64_t v16 = "IMateriaSchema::getNetworkInterfaceParameterMapping";
  uint64_t v7 = sub_21678C2D8(a1 + 104, a2);
  BOOL v8 = a1 + 112 == v7;
  BOOL v9 = a1 + 112 != v7;
  if (!v8)
  {
    std::string __str = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_21681681C(v7 + 56, (uint64_t *)&__str, 1);
    std::string::operator=(a3, __str);
    if (0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)__str) >> 3) < 2)
    {
      sub_216779094(&v11, "");
    }
    else if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(&v11, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
    }
    else
    {
      std::string v11 = __str[1];
    }
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v11;
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    sub_216782F20((void ***)&v11);
  }
  return v9;
}

void sub_21680E094(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  a9 = (void **)&a12;
  sub_216782F20(&a9);
  uint64_t v18 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v19 = (uint64_t)v18;
    sub_2167A13A4(v15);
    sub_21679FA64((uint64_t)&a15, v19);
  }
  else
  {
    sub_2167A13A4(v15);
    sub_21679F9F4((uint64_t)&a15, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21680E07CLL);
}

void sub_21680E108(_Unwind_Exception *a1)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMappingNames(uint64_t a1, uint64_t a2)
{
  if (a1 + 128 != a2) {
    sub_21680F694(a2, *(std::string **)(a1 + 128), *(long long **)(a1 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3));
  }
}

unsigned char *Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameters@<X0>(Alembic::AbcMaterial::v12::IMaterialSchema *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *((_DWORD *)this + 38);
  uint64_t result = (unsigned char *)(a2 + 8);
  if (*((char *)this + 183) < 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)this + 20), *((void *)this + 21));
  }
  else
  {
    *(_OWORD *)uint64_t result = *((_OWORD *)this + 10);
    *(void *)(a2 + 24) = *((void *)this + 22);
  }
  uint64_t v5 = *((void *)this + 24);
  *(void *)(a2 + 32) = *((void *)this + 23);
  *(void *)(a2 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  return a1;
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::NetworkNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 2;
  uint64_t v6 = (std::string *)(a1 + 8);
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(void *)(a2 + 16)) {
      return a1;
    }
  }
  else if (*(unsigned char *)(a2 + 31))
  {
    return a1;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2);
    if (PropertyHeader)
    {
      if (!*(_DWORD *)(PropertyHeader + 24))
      {
        v12[0] = 0;
        v12[2] = 0;
        Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v13, a2, a3, v12);
        *(_DWORD *)a1 = v13;
        std::string::operator=(v6, &v14);
        uint64_t v9 = v15;
        uint64_t v8 = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        size_t v10 = *(std::__shared_weak_count **)(a1 + 40);
        *(void *)(a1 + 32) = v9;
        *(void *)(a1 + 40) = v8;
        if (v10) {
          sub_216784EC4(v10);
        }
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v13);
      }
    }
  }
  return a1;
}

void sub_21680E3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  sub_2167877AC(v4, *((void **)v3 + 11));
  sub_216782F20((void ***)va);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::valid(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this)
{
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    return 0;
  }
  return *((void *)this + 4) != 0;
}

void **Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getName@<X0>(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this@<X0>, uint64_t a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    goto LABEL_8;
  }
  if (*((void *)this + 4))
  {
    uint64_t result = (void **)sub_21680F968((uint64_t)this);
    if (*((char *)result + 23) < 0)
    {
      uint64_t v4 = *result;
      unint64_t v5 = (unint64_t)result[1];
      return (void **)sub_216778F24((unsigned char *)a2, v4, v5);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)result;
      *(void *)(a2 + 16) = result[2];
    }
    return result;
  }
LABEL_8:

  return (void **)sub_216779094((void *)a2, "");
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getTarget(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(void *)(a1 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    return 0;
  }
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  sub_216779094(__p, "target");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  uint64_t v5 = PropertyHeader;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_10;
    }
    return 0;
  }
  if (!PropertyHeader) {
    return 0;
  }
LABEL_10:
  if (*(_DWORD *)(v5 + 24) != 1) {
    return 0;
  }
  uint64_t result = 0;
  if (*(_DWORD *)(v5 + 56) == 12 && *(unsigned char *)(v5 + 60) == 1)
  {
    int v7 = sub_2167A4CB4(v5 + 32, 0);
    uint64_t result = 0;
    if (v7)
    {
      LODWORD(v11) = 0;
      DWORD2(v11) = 0;
      LODWORD(v8) = 0;
      LODWORD(v9) = 0;
      sub_2167A4730((uint64_t)__p, (int *)a1, v5, &v11, &v8);
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      int v10 = 2;
      sub_2167A46DC((uint64_t)__p, (uint64_t)&v8, &v11);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v11;
      *(void *)(a2 + 16) = v12;
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)__p);
      return 1;
    }
  }
  return result;
}

void sub_21680E62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNodeType(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(void *)(a1 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    return 0;
  }
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  sub_216779094(__p, "type");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  uint64_t v5 = PropertyHeader;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_10;
    }
    return 0;
  }
  if (!PropertyHeader) {
    return 0;
  }
LABEL_10:
  if (*(_DWORD *)(v5 + 24) != 1) {
    return 0;
  }
  uint64_t result = 0;
  if (*(_DWORD *)(v5 + 56) == 12 && *(unsigned char *)(v5 + 60) == 1)
  {
    int v7 = sub_2167A4CB4(v5 + 32, 0);
    uint64_t result = 0;
    if (v7)
    {
      LODWORD(v11) = 0;
      DWORD2(v11) = 0;
      LODWORD(v8) = 0;
      LODWORD(v9) = 0;
      sub_2167A4730((uint64_t)__p, (int *)a1, v5, &v11, &v8);
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      int v10 = 2;
      sub_2167A46DC((uint64_t)__p, (uint64_t)&v8, &v11);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v11;
      *(void *)(a2 + 16) = v12;
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)__p);
      return 1;
    }
  }
  return result;
}

void sub_21680E7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getParameters(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 2;
  sub_216779094((void *)(a2 + 8), "");
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      return;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    return;
  }
  if (*((void *)this + 4))
  {
    sub_216779094(&__p, "params");
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)this);
    uint64_t v5 = PropertyHeader;
    if (v13.__r_.__value_.__s.__data_[15] < 0)
    {
      operator delete(__p);
      if (!v5) {
        return;
      }
    }
    else if (!PropertyHeader)
    {
      return;
    }
    if (!*(_DWORD *)(v5 + 24))
    {
      sub_216779094(v10, "params");
      v9[0] = 0;
      v9[2] = 0;
      Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&__p, this, v10, v9);
      *(_DWORD *)a2 = __p;
      std::string::operator=((std::string *)(a2 + 8), &v13);
      uint64_t v7 = v14;
      uint64_t v6 = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a2 + 40);
      *(void *)(a2 + 32) = v7;
      *(void *)(a2 + 40) = v6;
      if (v8) {
        sub_216784EC4(v8);
      }
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
      if (v11 < 0) {
        operator delete(v10[0]);
      }
    }
  }
}

void sub_21680E904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v23);
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *this)
{
  if (!*((unsigned char *)this + 48))
  {
    sub_216779094(__p, ".connections");
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)this);
    uint64_t v3 = PropertyHeader;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if (!v3)
      {
LABEL_26:
        *((unsigned char *)this + 48) = 1;
        return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
      }
    }
    else if (!PropertyHeader)
    {
      goto LABEL_26;
    }
    sub_216779094(v20, ".connections");
    LODWORD(v18) = 0;
    LODWORD(v19) = 0;
    v17[0] = 0;
    void v17[2] = 0;
    sub_2167B5F84((uint64_t)__p, (int *)this, (uint64_t)v20, &v18, v17);
    if (v22 < 0) {
      operator delete(v20[0]);
    }
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    v20[0] = 0;
    v20[1] = 0;
    int v21 = 2;
    sub_2167B5418((uint64_t)__p, &v18, (uint64_t)v20);
    uint64_t v4 = (uint64_t *)v18[2];
    uint64_t v5 = v18[3] - (void)v4;
    if (v5)
    {
      unint64_t v6 = v5 >> 3;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      unint64_t v7 = 1;
      do
      {
        uint64_t v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    sub_21680BC90((uint64_t *)this + 7, v7 >> 1);
    if (v7 >= 2)
    {
      uint64_t v9 = 0;
      if (v7 >> 1 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v7 >> 1;
      }
      do
      {
        char v11 = (std::string *)(*v18 + v9);
        v20[0] = v11;
        uint64_t v12 = sub_21677B174((uint64_t **)this + 10, (const void **)&v11->__r_.__value_.__l.__data_, (uint64_t)&unk_21740A95A, (long long **)v20);
        std::string::operator=((std::string *)(v12 + 7), v11 + 1);
        std::string v13 = (long long *)(*v18 + v9);
        unint64_t v14 = *((void *)this + 8);
        if (v14 >= *((void *)this + 9))
        {
          uint64_t v15 = sub_2167E9A44((uint64_t *)this + 7, v13);
        }
        else
        {
          sub_2167E99E4((void *)this + 7, v13);
          uint64_t v15 = v14 + 24;
        }
        *((void *)this + 8) = v15;
        v9 += 48;
        --v10;
      }
      while (v10);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)__p);
    goto LABEL_26;
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
}

void sub_21680EB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a13) {
    sub_216784EC4(a13);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a20);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::splitConnectionValue(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string __str = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_21681681C(a2, (uint64_t *)&__str, 1);
  std::string::operator=(a3, __str);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)__str) >> 3) < 2)
  {
    sub_216779094(&v6, "");
  }
  else if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_216778F24(&v6, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
  }
  else
  {
    std::string v6 = __str[1];
  }
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v6;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  sub_216782F20((void ***)&v6);
}

void sub_21680EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_216782F20(&a9);
  _Unwind_Resume(a1);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *a1, unint64_t a2, std::string *a3, std::string *a4, uint64_t a5)
{
  if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(a1) <= a2) {
    return 0;
  }
  std::string::operator=(a3, (const std::string *)(*((void *)a1 + 7) + 24 * a2));

  return Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(a1, (const void **)&a3->__r_.__value_.__l.__data_, a4, a5);
}

BOOL Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *a1, const void **a2, std::string *a3, uint64_t a4)
{
  Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(a1);
  uint64_t v8 = sub_21678C2D8((uint64_t)a1 + 80, a2);
  uint64_t v9 = v8;
  uint64_t v10 = (char *)a1 + 88;
  if (v10 != (char *)v8)
  {
    if (*(char *)(v8 + 79) < 0)
    {
      uint64_t v8 = (uint64_t)sub_216778F24(__p, *(void **)(v8 + 56), *(void *)(v8 + 64));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v8 + 56);
      uint64_t v13 = *(void *)(v8 + 72);
    }
    Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::splitConnectionValue(v8, (uint64_t)__p, a3, a4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  return v10 != (char *)v9;
}

void sub_21680EDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21680EE0C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_21677B220((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_21680EE8C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_21677B358(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *sub_21680EE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21680EF10(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

std::string *sub_21680EF2C(uint64_t *a1, std::string *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3)) >= a5)
    {
      *(void *)uint64_t v23 = a3;
      sub_21680F304((void **)v23, a5);
      uint64_t v20 = a1[1] - (void)v5;
      uint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
      if (v21 >= a5
        || (*(void *)uint64_t v23 = a3,
            sub_21680F304((void **)v23, v21),
            a1[1] = (uint64_t)sub_21680F390(v10, *(void **)v23, a4, (void *)a1[1]),
            v20 >= 1))
      {
        sub_21680F12C((uint64_t)a1, (uint64_t)v5, v11, (uint64_t)&v5[a5]);
        sub_21680F588((int)&v28, a3, *(void **)v23, v5);
      }
    }
    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a5 - 0x5555555555555555 * ((uint64_t)(v11 - *a1) >> 3);
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v13) {
        uint64_t v16 = v13;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v27 = a1 + 2;
      if (v17) {
        uint64_t v18 = (char *)sub_216782ED8((uint64_t)(a1 + 2), v17);
      }
      else {
        uint64_t v18 = 0;
      }
      *(void *)uint64_t v23 = v18;
      char v24 = &v18[24 * v14];
      uint64_t v25 = v24;
      std::string::size_type v26 = &v18[24 * v17];
      sub_21680F19C(v23, a3, a5);
      uint64_t v5 = (std::string *)sub_21680F250((uint64_t)a1, v23, (long long *)v5);
      sub_216790E64((uint64_t)v23);
    }
  }
  return v5;
}

void sub_21680F10C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_21680F12C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      v8 += 24;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_21680F500((uint64_t)&v12, a2, v7, v6);
}

void *sub_21680F19C(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 24 * a3;
    do
    {
      if (*((char *)a2 + 55) < 0)
      {
        uint64_t result = sub_216778F24((unsigned char *)v4, (void *)a2[4], a2[5]);
      }
      else
      {
        long long v7 = *((_OWORD *)a2 + 2);
        *(void *)(v4 + 16) = a2[6];
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v8 = (void *)a2[1];
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (void *)a2[2];
          BOOL v10 = *v9 == (void)a2;
          a2 = v9;
        }
        while (!v10);
      }
      v4 += 24;
      a2 = v9;
    }
    while (v4 != v6);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_21680F248(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21680F250(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_216790D44(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_21680F614(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void **sub_21680F304(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v7 = *result;
    do
    {
      uint64_t v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          uint64_t v4 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          uint64_t v7 = v4;
        }
        while (v5);
      }
      uint64_t v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  *uint64_t result = v4;
  return result;
}

void *sub_21680F390(uint64_t a1, void *a2, void *a3, void *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v14 = __dst;
  unint64_t v15 = (char *)__dst;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_216778F24(v4, (void *)v6[4], v6[5]);
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 2);
        v4[2] = v6[6];
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v15 + 24;
      v15 += 24;
      uint64_t v6 = v9;
    }
    while (v9 != a3);
  }
  char v13 = 1;
  sub_21680F480((uint64_t)v12);
  return v4;
}

void sub_21680F46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21680F480(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21680F4B8(a1);
  }
  return a1;
}

void sub_21680F4B8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t sub_21680F500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

void *sub_21680F588(int a1, void *a2, void *a3, std::string *this)
{
  BOOL v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::string::operator=(this, (const std::string *)(v5 + 4));
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          BOOL v5 = v8;
        }
        while (!v9);
      }
      ++this;
      BOOL v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_21680F614(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_21680F480((uint64_t)v7);
  return v4;
}

void sub_21680F694(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_21680F80C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216782E84((void *)a1, v11);
    char v12 = sub_21680F848(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    char v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_21680F908(__str, v13, v9);
    char v12 = sub_21680F848(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_21680F908(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_21680F7FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21680F804(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21680F80C(uint64_t *a1)
{
  if (*a1)
  {
    sub_216782F74(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_21680F848(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v11 = __dst;
  char v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_216778F24(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      char v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_21680F480((uint64_t)v9);
  return v4;
}

void sub_21680F8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *sub_21680F908(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t sub_21680F968(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_21680F9C0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  {
    {
      unint64_t v11 = operator new(0x50uLL);
      void *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      *((_DWORD *)v11 + 6) = 1;
      v11[6] = 0;
      v11[5] = 0;
      _DWORD v11[4] = v11 + 5;
      *((_DWORD *)v11 + 14) = 127;
      *((unsigned char *)v11 + 60) = 0;
      v11[8] = 0;
      v11[9] = 0;
      Alembic::Abc::v12::IBasePropertyT<std::shared_ptr<Alembic::AbcCoreAbstract::v12::CompoundPropertyReader>>::getHeader(void)const::phd = (uint64_t)v11;
    }
  }
  JUMPOUT(0x21680F9B0);
}

void sub_21680FA68(_Unwind_Exception *a1)
{
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::MaterialFlatten(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 72) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = 0;
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = this + 64;
  return this;
}

{
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 72) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = 0;
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = this + 64;
  return this;
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::MaterialFlatten(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = sub_216812F84((uint64_t *)a1, a2);
  return a1;
}

{
  std::string v5[4];
  void *v6;
  uint64_t v7;
  void *v8[3];
  void *v9[3];
  void *v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_2167A2320((uint64_t)v5, a2);
  v5[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C74A410;
  sub_2168129B8((uint64_t)&v6, a2 + 96);
  Alembic::AbcMaterial::v12::MaterialFlatten::append(a1, v5);
  v5[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C74A410;
  uint64_t v6 = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v13);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v12);
  uint64_t v14 = (void **)&v11;
  sub_216782F20(&v14);
  sub_2167877AC((uint64_t)v10, v10[1]);
  sub_2167877AC((uint64_t)v9, v9[1]);
  sub_2167877AC((uint64_t)v8, v8[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v7);
  Alembic::Abc::v12::IObject::~IObject((void **)&v5[0].__r_.__value_.__l.__data_);
  return a1;
}

void sub_21680FB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  char v13 = v12;
  sub_216812ED4(v11, *(void **)(v10 + 64));
  a10 = v13;
  sub_216782F20(&a10);
  a10 = (void **)v10;
  sub_216812E14(&a10);
  _Unwind_Resume(a1);
}

void sub_21680FCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21680FFD0((uint64_t)&a9);
  sub_216812ED4(v10, *(void **)(v9 + 64));
  *(void *)(v12 - 72) = v11;
  sub_216782F20((void ***)(v12 - 72));
  *(void *)(v12 - 72) = v9;
  sub_216812E14((void ***)(v12 - 72));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::append(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (uint64_t)&a2[4];
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    uint64_t v6 = sub_216812F84((uint64_t *)a1, v4);
  }
  else
  {
    sub_2168129B8(*(void *)(a1 + 8), v4);
    uint64_t v6 = v5 + 248;
    *(void *)(a1 + 8) = v5 + 248;
  }
  *(void *)(a1 + 8) = v6;
  Alembic::Abc::v12::IObject::getParent(a2, (uint64_t)&v34);
  while (1)
  {
    if (v36 < 0)
    {
      if (v35) {
        break;
      }
    }
    else if (v36)
    {
      break;
    }
    if (!v37) {
      break;
    }
    uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v34);
    if (sub_216813260(Header + 48, 0))
    {
      v17[0] = 0;
      void v17[2] = 0;
      v16[0] = 0;
      void v16[2] = 0;
      sub_2168145B8((Alembic::Abc::v12::IObject *)&v18, (uint64_t)&v34, 0, v17, v16);
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8 >= *(void *)(a1 + 16))
      {
        uint64_t v9 = sub_216812F84((uint64_t *)a1, (uint64_t)&v26);
      }
      else
      {
        sub_2168129B8(*(void *)(a1 + 8), (uint64_t)&v26);
        uint64_t v9 = v8 + 248;
        *(void *)(a1 + 8) = v8 + 248;
      }
      *(void *)(a1 + 8) = v9;
      uint64_t v18 = &unk_26C74A410;
      std::string::size_type v26 = &unk_26C74A448;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v33);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v32);
      uint64_t v42 = (void **)&v31;
      sub_216782F20(&v42);
      sub_2167877AC((uint64_t)v30, v30[1]);
      sub_2167877AC((uint64_t)v29, v29[1]);
      sub_2167877AC((uint64_t)v28, v28[1]);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
      Alembic::Abc::v12::IObject::~IObject(&v18);
    }
    Alembic::Abc::v12::IObject::getParent(&v34, (uint64_t)&v18);
    LODWORD(v34.__r_.__value_.__r.__words[1]) = v19;
    std::string::operator=((std::string *)&v34.__r_.__value_.__r.__words[2], &v20);
    uint64_t v11 = v21;
    uint64_t v10 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = v38;
    uint64_t v37 = v11;
    uint64_t v38 = v10;
    if (v12) {
      sub_216784EC4(v12);
    }
    uint64_t v14 = v23;
    char v13 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = v40;
    uint64_t v39 = v14;
    uint64_t v40 = v13;
    if (v15) {
      sub_216784EC4(v15);
    }
    std::string::operator=(&v41, &v25);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v18);
  }
  *(unsigned char *)(a1 + 24) = 0;
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v34);
}

void sub_21680FF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  *(void *)(v20 + 8) = v21;
  _Unwind_Resume(exception_object);
}

void sub_21680FFD0(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A410;
  *(void *)(a1 + 96) = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  uint64_t v2 = (void **)(a1 + 224);
  sub_216782F20(&v2);
  sub_2167877AC(a1 + 200, *(void **)(a1 + 208));
  sub_2167877AC(a1 + 176, *(void **)(a1 + 184));
  sub_2167877AC(a1 + 152, *(void **)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::MaterialFlatten(uint64_t a1, Alembic::Abc::v12::IObject *a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_216812760((uint64_t)&v67);
  sub_2167A2320((uint64_t)v66, (uint64_t)a2);
  sub_216779094(&__p, ".material");
  int hasMaterial = Alembic::AbcMaterial::v12::hasMaterial((Alembic::Abc::v12::IObject *)v66, (uint64_t)&v67, (uint64_t)&__p);
  if (v52.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v66);
  if (hasMaterial)
  {
    sub_2168129B8((uint64_t)&v58, (uint64_t)&v67);
    Alembic::AbcMaterial::v12::MaterialFlatten::append(a1, (uint64_t)&v58);
    int v58 = &unk_26C74A448;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v65);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v64);
    std::string __p = &v63;
    sub_216782F20((void ***)&__p);
    sub_2167877AC((uint64_t)v62, v62[1]);
    sub_2167877AC((uint64_t)v61, v61[1]);
    sub_2167877AC((uint64_t)v60, v60[1]);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v59);
  }
  memset(&__str, 0, sizeof(__str));
  sub_2167A2320((uint64_t)v56, (uint64_t)a2);
  sub_216779094(&__p, ".material.assign");
  int MaterialAssignmentPath = Alembic::AbcMaterial::v12::getMaterialAssignmentPath((uint64_t)v56, (uint64_t)&__str, (uint64_t)&__p);
  if (v52.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v56);
  if (!MaterialAssignmentPath) {
    goto LABEL_64;
  }
  int v51 = 2;
  sub_216779094(&v52, "");
  long long v53 = 0u;
  long long v54 = 0u;
  memset(&v55, 0, sizeof(v55));
  std::string __p = &unk_26C749578;
  if (*(char *)(a3 + 31) < 0)
  {
    if (*(void *)(a3 + 16)) {
      goto LABEL_16;
    }
  }
  else if (*(unsigned char *)(a3 + 31))
  {
    goto LABEL_16;
  }
  if (*(void *)(a3 + 32))
  {
    Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)a3, (uint64_t)&v44);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v46.__r_.__value_.__l.__size_) {
        goto LABEL_15;
      }
    }
    else if (*((unsigned char *)&v46.__r_.__value_.__s + 23))
    {
LABEL_15:
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v44);
      goto LABEL_16;
    }
    uint64_t v29 = v47;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v44);
    if (v29)
    {
      Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)a3, (uint64_t)&v44);
      int v51 = v45;
      std::string::operator=(&v52, &v46);
      long long v30 = v47;
      if (*((void *)&v47 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = (std::__shared_weak_count *)*((void *)&v53 + 1);
      long long v53 = v30;
      if (v31) {
        sub_216784EC4(v31);
      }
      long long v32 = v48;
      if (*((void *)&v48 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v54 + 1);
      long long v54 = v32;
      if (v33) {
        sub_216784EC4(v33);
      }
      std::string::operator=(&v55, &v49);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v44);
      goto LABEL_25;
    }
  }
LABEL_16:
  Alembic::Abc::v12::IObject::getArchive(a2, (uint64_t)&v43);
  Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)&v43, (uint64_t)&v44);
  int v51 = v45;
  std::string::operator=(&v52, &v46);
  long long v8 = v47;
  if (*((void *)&v47 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v53 + 1);
  long long v53 = v8;
  if (v9) {
    sub_216784EC4(v9);
  }
  long long v10 = v48;
  if (*((void *)&v48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v54 + 1);
  long long v54 = v10;
  if (v11) {
    sub_216784EC4(v11);
  }
  std::string::operator=(&v55, &v49);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v44);
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v43);
LABEL_25:
  std::string::size_type v12 = 0;
  BOOL v13 = 0;
  while (!v13)
  {
    std::string::size_type v14 = std::string::find(&__str, 47, v12);
    std::string::size_type v15 = v14;
    BOOL v13 = v14 == -1;
    if (v14 == -1)
    {
      std::string::size_type v16 = -1;
LABEL_33:
      std::string::basic_string(&v43, &__str, v12, v16, (std::allocator<char> *)&v44);
      if (Alembic::Abc::v12::IObject::getChildHeader((uint64_t)&__p))
      {
        Alembic::Abc::v12::IObject::getChild((uint64_t)&__p, (uint64_t)&v44);
        int v51 = v45;
        std::string::operator=(&v52, &v46);
        long long v19 = v47;
        if (*((void *)&v47 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = (std::__shared_weak_count *)*((void *)&v53 + 1);
        long long v53 = v19;
        if (v20) {
          sub_216784EC4(v20);
        }
        long long v21 = v48;
        if (*((void *)&v48 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v22 = (std::__shared_weak_count *)*((void *)&v54 + 1);
        long long v54 = v21;
        if (v22) {
          sub_216784EC4(v22);
        }
        std::string::operator=(&v55, &v49);
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v44);
        int v18 = 0;
      }
      else
      {
        int v45 = 2;
        sub_216779094(&v46, "");
        unint64_t v44 = &unk_26C749578;
        long long v47 = 0u;
        long long v48 = 0u;
        memset(&v49, 0, sizeof(v49));
        int v51 = v45;
        std::string::operator=(&v52, &v46);
        long long v23 = v47;
        if (*((void *)&v47 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v24 = (std::__shared_weak_count *)*((void *)&v53 + 1);
        long long v53 = v23;
        if (v24) {
          sub_216784EC4(v24);
        }
        long long v25 = v48;
        if (*((void *)&v48 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::string::size_type v26 = (std::__shared_weak_count *)*((void *)&v54 + 1);
        long long v54 = v25;
        if (v26) {
          sub_216784EC4(v26);
        }
        std::string::operator=(&v55, &v49);
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v44);
        int v18 = 3;
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      std::string::size_type v12 = v15 + 1;
      goto LABEL_55;
    }
    std::string::size_type v16 = v14 - v12;
    if (v14 != v12) {
      goto LABEL_33;
    }
    ++v12;
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    BOOL v13 = v12 == size;
    int v18 = 2;
LABEL_55:
    if (v18 == 3) {
      break;
    }
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v52.__r_.__value_.__l.__size_) {
      goto LABEL_60;
    }
  }
  else if (!*((unsigned char *)&v52.__r_.__value_.__s + 23))
  {
LABEL_60:
    if ((void)v53)
    {
      uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
      if (sub_216813260(Header + 48, 0))
      {
        LODWORD(v44) = 0;
        int v45 = 0;
        LODWORD(v43.__r_.__value_.__l.__data_) = 0;
        LODWORD(v43.__r_.__value_.__r.__words[1]) = 0;
        sub_2168136CC((Alembic::Abc::v12::IObject *)v34, (uint64_t)&__p, &v44, &v43);
        Alembic::AbcMaterial::v12::MaterialFlatten::append(a1, v34);
        v34[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C74A410;
        uint64_t v35 = &unk_26C74A448;
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v42);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v41);
        uint64_t v75 = (void **)&v40;
        sub_216782F20(&v75);
        sub_2167877AC((uint64_t)v39, v39[1]);
        sub_2167877AC((uint64_t)v38, v38[1]);
        sub_2167877AC((uint64_t)v37, v37[1]);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v36);
        Alembic::Abc::v12::IObject::~IObject((void **)&v34[0].__r_.__value_.__l.__data_);
      }
    }
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
LABEL_64:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  char v67 = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v74);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v73);
  std::string __p = &v72;
  sub_216782F20((void ***)&__p);
  sub_2167877AC((uint64_t)v71, v71[1]);
  sub_2167877AC((uint64_t)v70, v70[1]);
  sub_2167877AC((uint64_t)v69, v69[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v68);
  return a1;
}

void sub_2168107B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  sub_2168109A0((uint64_t)&STACK[0x438]);
  sub_216812ED4(a10, *(void **)(a12 + 64));
  STACK[0x438] = a11;
  sub_216782F20((void ***)&STACK[0x438]);
  STACK[0x438] = a12;
  sub_216812E14((void ***)&STACK[0x438]);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::append(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_216812F84((uint64_t *)a1, a2);
  }
  else
  {
    sub_2168129B8(*(void *)(a1 + 8), a2);
    uint64_t result = v3 + 248;
    *(void *)(a1 + 8) = v3 + 248;
  }
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_216810998(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2168109A0(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  unint64_t v3 = (void **)(a1 + 128);
  sub_216782F20(&v3);
  sub_2167877AC(a1 + 104, *(void **)(a1 + 112));
  sub_2167877AC(a1 + 80, *(void **)(a1 + 88));
  sub_2167877AC(a1 + 56, *(void **)(a1 + 64));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));
  return a1;
}

BOOL Alembic::AbcMaterial::v12::MaterialFlatten::empty(Alembic::AbcMaterial::v12::MaterialFlatten *this)
{
  return *(void *)this == *((void *)this + 1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getTargetNames(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  long long v10 = &v11;
  for (uint64_t i = *a1; i != a1[1]; i += 248)
  {
    long long v7 = 0;
    long long v8 = 0;
    uint64_t v9 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getTargetNames(i, (uint64_t)&v7);
    unint64_t v5 = v7;
    uint64_t v6 = v8;
    while (v5 != v6)
    {
      sub_216814A8C((uint64_t **)&v10, (uint64_t *)&v11, v5, (uint64_t)v5);
      v5 += 3;
    }
    BOOL v13 = &v7;
    sub_216782F20((void ***)&v13);
  }
  sub_216782F74((uint64_t *)a2);
  sub_21680BC90((uint64_t *)a2, v12);
  sub_21680CCCC((uint64_t *)a2, *(std::string **)(a2 + 8), v10, &v11);
  sub_21678A498((uint64_t)&v10, v11);
}

void sub_216810B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getShaderTypesForTarget(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  BOOL v13 = 0;
  unint64_t v14 = 0;
  unint64_t v12 = &v13;
  for (uint64_t i = *a1; i != a1[1]; i += 248)
  {
    uint64_t v9 = 0;
    long long v10 = 0;
    uint64_t v11 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getShaderTypesForTarget(i, a2, (uint64_t)&v9);
    long long v7 = v9;
    long long v8 = v10;
    while (v7 != v8)
    {
      sub_216814A8C((uint64_t **)&v12, (uint64_t *)&v13, v7, (uint64_t)v7);
      v7 += 3;
    }
    std::string::size_type v15 = &v9;
    sub_216782F20((void ***)&v15);
  }
  sub_216782F74((uint64_t *)a3);
  sub_21680BC90((uint64_t *)a3, v14);
  sub_21680CCCC((uint64_t *)a3, *(std::string **)(a3 + 8), v12, &v13);
  sub_21678A498((uint64_t)&v12, v13);
}

void sub_216810C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::getShader(uint64_t *a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t v4 = *a1;
  if (*a1 == a1[1]) {
    return 0;
  }
  do
  {
    uint64_t result = Alembic::AbcMaterial::v12::IMaterialSchema::getShader(v4, a2, a3, a4);
    if (result) {
      break;
    }
    v4 += 248;
  }
  while (v4 != a1[1]);
  return result;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getShaderParameters(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  if (v7 != *a4)
  {
    do
    {
      v7 -= 80;
      sub_216814B10((uint64_t)(a4 + 2), v7);
    }
    while (v7 != v6);
  }
  a4[1] = v6;
  v31[0] = 0;
  v31[1] = 0;
  long long v30 = v31;
  uint64_t v8 = *a1;
  if (*a1 == a1[1])
  {
    unint64_t v14 = 0;
    goto LABEL_27;
  }
  do
  {
    Alembic::AbcMaterial::v12::IMaterialSchema::getShaderParameters(v8, a2, a3, (uint64_t)&v25);
    if (SHIBYTE(v27) < 0)
    {
      if (*((void *)&v26 + 1)) {
        goto LABEL_24;
      }
    }
    else if (HIBYTE(v27))
    {
      goto LABEL_24;
    }
    if (v28)
    {
      unint64_t NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)&v25);
      sub_216810FA0(a4, NumProperties);
      for (unint64_t i = 0;
            i < Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)&v25);
            ++i)
      {
        uint64_t PropertyHeader = (const void **)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)&v25);
        if (v31 == (void *)sub_21678C2D8((uint64_t)&v30, PropertyHeader))
        {
          sub_21680EE0C(&v30, PropertyHeader, (uint64_t)PropertyHeader);
          int v17 = v25;
          if (SHIBYTE(v27) < 0)
          {
            sub_216778F24(&v18, (void *)v26, *((unint64_t *)&v26 + 1));
          }
          else
          {
            long long v18 = v26;
            uint64_t v19 = v27;
          }
          uint64_t v20 = v28;
          uint64_t v21 = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          sub_216812C60((char *)__p, (long long *)PropertyHeader, (uint64_t)&v17, (uint64_t)PropertyHeader);
          unint64_t v12 = a4[1];
          if (v12 >= a4[2])
          {
            uint64_t v13 = sub_216814EB0(a4, (long long *)__p);
          }
          else
          {
            sub_216814FC0((uint64_t)(a4 + 2), a4[1], (long long *)__p);
            uint64_t v13 = v12 + 80;
            a4[1] = v12 + 80;
          }
          a4[1] = v13;
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v24);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v17);
        }
      }
    }
LABEL_24:
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v25);
    v8 += 248;
  }
  while (v8 != a1[1]);
  unint64_t v14 = (char *)v31[0];
LABEL_27:
  sub_21678A498((uint64_t)&v30, v14);
}

void sub_216810F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a27);
  sub_21678A498(v27 - 112, *(char **)(v27 - 104));
  _Unwind_Resume(a1);
}

void **sub_216810FA0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    _DWORD v7[4] = result;
    v7[0] = sub_216814BD8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 80 * v6;
    sub_216814B60(a1, v7);
    return sub_216814E34(v7);
  }
  return result;
}

void sub_216811040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216814E34((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216811054(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkTerminalTargetNames(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  long long v10 = &v11;
  for (uint64_t i = *a1; i != a1[1]; i += 248)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalTargetNames(i, (uint64_t)&v7);
    uint64_t v5 = v7;
    uint64_t v6 = v8;
    while (v5 != v6)
    {
      sub_216814A8C((uint64_t **)&v10, (uint64_t *)&v11, v5, (uint64_t)v5);
      v5 += 3;
    }
    uint64_t v13 = &v7;
    sub_216782F20((void ***)&v13);
  }
  sub_216782F74((uint64_t *)a2);
  sub_21680BC90((uint64_t *)a2, v12);
  sub_21680CCCC((uint64_t *)a2, *(std::string **)(a2 + 8), v10, &v11);
  sub_21678A498((uint64_t)&v10, v11);
}

void sub_216811180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkTerminalShaderTypesForTarget(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  unint64_t v12 = &v13;
  for (uint64_t i = *a1; i != a1[1]; i += 248)
  {
    uint64_t v9 = 0;
    long long v10 = 0;
    uint64_t v11 = 0;
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminalShaderTypesForTarget(i, a2, (uint64_t)&v9);
    uint64_t v7 = v9;
    uint64_t v8 = v10;
    while (v7 != v8)
    {
      sub_216814A8C((uint64_t **)&v12, (uint64_t *)&v13, v7, (uint64_t)v7);
      v7 += 3;
    }
    std::string::size_type v15 = &v9;
    sub_216782F20((void ***)&v15);
  }
  sub_216782F74((uint64_t *)a3);
  sub_21680BC90((uint64_t *)a3, v14);
  sub_21680CCCC((uint64_t *)a3, *(std::string **)(a3 + 8), v12, &v13);
  sub_21678A498((uint64_t)&v12, v13);
}

void sub_2168112B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

BOOL Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkTerminal(uint64_t *a1, const void **a2, uint64_t a3, std::string *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  if (*a1 == a1[1]) {
    return 0;
  }
  do
  {
    BOOL result = Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkTerminal(v5, a2, a3, a4, a5);
    if (result) {
      break;
    }
    v5 += 248;
  }
  while (v5 != a1[1]);
  return result;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::flattenNetwork(Alembic::AbcMaterial::v12::MaterialFlatten *this)
{
  if (!*((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 24) = 1;
    uint64_t v2 = (uint64_t *)((char *)this + 32);
    sub_216782F74((uint64_t *)this + 4);
    sub_216812ED4((uint64_t)this + 56, *((void **)this + 8));
    *((void *)this + 7) = (char *)this + 64;
    *((void *)this + 9) = 0;
    *((void *)this + 8) = 0;
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v23 = 0;
    uint64_t v24 = v25;
    uint64_t v21 = 0;
    char v22 = 0;
    memset(&__str, 0, sizeof(__str));
    memset(&v19, 0, sizeof(v19));
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    unint64_t v3 = *(Alembic::AbcMaterial::v12::IMaterialSchema **)this;
    if (*(void *)this != *((void *)this + 1))
    {
      do
      {
        Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNodeNames((uint64_t)v3, (uint64_t *)&v21);
        for (uint64_t i = v21; i != v22; i += 3)
        {
          if (v25 != (char **)sub_21678C2D8((uint64_t)&v24, i))
          {
            sub_21680EE0C((uint64_t **)&v24, i, (uint64_t)i);
            unint64_t v5 = *((void *)this + 5);
            if (v5 >= *((void *)this + 6))
            {
              uint64_t v6 = sub_2167E9A44(v2, (long long *)i);
            }
            else
            {
              sub_2167E99E4(v2, (long long *)i);
              uint64_t v6 = v5 + 24;
            }
            *((void *)this + 5) = v6;
          }
        }
        unint64_t NumNetworkInterfaceParameterMappings = Alembic::AbcMaterial::v12::IMaterialSchema::getNumNetworkInterfaceParameterMappings(v3);
        if (NumNetworkInterfaceParameterMappings)
        {
          for (unint64_t j = 0; j != NumNetworkInterfaceParameterMappings; ++j)
          {
            if (Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameterMapping((uint64_t)v3, j, &__str, &v19, (uint64_t)__p))
            {
              uint64_t v9 = (void *)sub_21678C2D8((uint64_t)this + 56, (const void **)&v19.__r_.__value_.__l.__data_);
              if ((void *)((char *)this + 64) == v9)
              {
                unint64_t v12 = operator new(0x18uLL);
                v12[2] = 0;
                v12[1] = 0;
                void *v12 = v12 + 1;
                sub_21681506C(v16, (uint64_t)v12);
                uint64_t v11 = (uint64_t **)v16[0];
                long long v10 = (std::__shared_weak_count *)v16[1];
                v16[0] = (long long *)&v19;
                uint64_t v13 = sub_21681520C((uint64_t **)this + 7, (const void **)&v19.__r_.__value_.__l.__data_, (uint64_t)&unk_21740AA18, v16);
                if (v10) {
                  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                unint64_t v14 = (std::__shared_weak_count *)v13[8];
                v13[7] = (uint64_t)v11;
                v13[8] = (uint64_t)v10;
                if (v14) {
                  sub_216784EC4(v14);
                }
              }
              else
              {
                uint64_t v11 = (uint64_t **)v9[7];
                long long v10 = (std::__shared_weak_count *)v9[8];
                if (v10) {
                  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              if (v11 + 1 == (uint64_t **)sub_21678C2D8((uint64_t)v11, (const void **)__p))
              {
                v16[0] = (long long *)__p;
                std::string::size_type v15 = sub_21677B174(v11, (const void **)__p, (uint64_t)&unk_21740AA18, v16);
                std::string::operator=((std::string *)(v15 + 7), &__str);
              }
              if (v10) {
                sub_216784EC4(v10);
              }
            }
          }
        }
        unint64_t v3 = (Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)v3 + 248);
      }
      while (v3 != *((Alembic::AbcMaterial::v12::IMaterialSchema **)this + 1));
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
    sub_216782F20((void ***)&__str);
    sub_21678A498((uint64_t)&v24, v25[0]);
  }
}

void sub_216811628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,char *a33)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  a23 = &a29;
  sub_216782F20((void ***)&a23);
  sub_21678A498((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

unint64_t Alembic::AbcMaterial::v12::MaterialFlatten::getNumNetworkNodes(Alembic::AbcMaterial::v12::MaterialFlatten *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 3);
}

double Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkNode@<D0>(Alembic::AbcMaterial::v12::MaterialFlatten *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Alembic::AbcMaterial::v12::MaterialFlatten::flattenNetwork(this);
  uint64_t v6 = *((void *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v6) >> 3) <= a2)
  {
    *(void *)(a3 + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkNode(this, (const void **)(v6 + 24 * a2), (char *)a3);
  }
  return result;
}

double Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::NetworkNode(Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode *this)
{
  *((void *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::getNetworkNode(Alembic::AbcMaterial::v12::MaterialFlatten *a1@<X0>, const void **a2@<X1>, char *a3@<X8>)
{
  Alembic::AbcMaterial::v12::MaterialFlatten::flattenNetwork(a1);
  uint64_t v6 = sub_21678C2D8((uint64_t)a1 + 56, a2);
  if ((Alembic::AbcMaterial::v12::MaterialFlatten *)((char *)a1 + 64) == (Alembic::AbcMaterial::v12::MaterialFlatten *)v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 64);
    if (v8)
    {
      char v9 = 0;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = v7;
      uint64_t v11 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_6;
    }
  }
  uint64_t v8 = 0;
  uint64_t v10 = v7;
  uint64_t v11 = 0;
  char v9 = 1;
LABEL_6:
  Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::NetworkNode(a3, (uint64_t)a2, (Alembic::AbcMaterial::v12::IMaterialSchema **)a1, &v10);
  if ((v9 & 1) == 0)
  {
    sub_216784EC4(v8);
    sub_216784EC4(v8);
  }
}

void sub_216811874(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_216784EC4(v1);
  }
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

char *Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::NetworkNode(char *__dst, uint64_t a2, Alembic::AbcMaterial::v12::IMaterialSchema **a3, void *a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    *((void *)__dst + 2) = *(void *)(a2 + 16);
    *(_OWORD *)long long __dst = v8;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  std::string v19 = (uint64_t *)(__dst + 48);
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *((void *)__dst + 9) = *a4;
  uint64_t v9 = a4[1];
  *((void *)__dst + 10) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216811B84((uint64_t *)__dst + 3, 0xEF7BDEF7BDEF7BDFLL * ((a3[1] - *a3) >> 3));
  sub_216811C44(v19, 0xEF7BDEF7BDEF7BDFLL * ((a3[1] - *a3) >> 3));
  for (uint64_t i = *a3; i != a3[1]; uint64_t i = (Alembic::AbcMaterial::v12::IMaterialSchema *)((char *)i + 248))
  {
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkNode((uint64_t)i, a2, (uint64_t)v25);
    if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::valid((Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)v25))
    {
      unint64_t v11 = *((void *)__dst + 4);
      if (v11 >= *((void *)__dst + 5))
      {
        uint64_t v12 = sub_2168159F8((uint64_t *)__dst + 3, (uint64_t)v25);
      }
      else
      {
        sub_21681569C((uint64_t)(__dst + 40), *((void *)__dst + 4), (uint64_t)v25);
        uint64_t v12 = v11 + 104;
        *((void *)__dst + 4) = v11 + 104;
      }
      *((void *)__dst + 4) = v12;
    }
    Alembic::AbcMaterial::v12::IMaterialSchema::getNetworkInterfaceParameters(i, (uint64_t)&v20);
    if (SHIBYTE(v22) < 0)
    {
      if (!*((void *)&v21 + 1))
      {
LABEL_16:
        if (v23)
        {
          unint64_t v13 = *((void *)__dst + 7);
          if (v13 >= *((void *)__dst + 8))
          {
            uint64_t v16 = sub_216815B20(v19, (uint64_t)&v20);
          }
          else
          {
            *(_DWORD *)unint64_t v13 = v20;
            unint64_t v14 = (unsigned char *)(v13 + 8);
            if (SHIBYTE(v22) < 0)
            {
              sub_216778F24(v14, (void *)v21, *((unint64_t *)&v21 + 1));
            }
            else
            {
              long long v15 = v21;
              *(void *)(v13 + 24) = v22;
              *(_OWORD *)unint64_t v14 = v15;
            }
            *(void *)(v13 + 32) = v23;
            uint64_t v17 = v24;
            *(void *)(v13 + 40) = v24;
            if (v17) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = v13 + 48;
            *((void *)__dst + 7) = v13 + 48;
          }
          *((void *)__dst + 7) = v16;
        }
      }
    }
    else if (!HIBYTE(v22))
    {
      goto LABEL_16;
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v20);
    sub_2167877AC((uint64_t)v27, v27[1]);
    uint64_t v20 = (void **)&v26;
    sub_216782F20(&v20);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v25);
  }
  return __dst;
}

void sub_216811B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  *(void *)(v17 + 56) = v18;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a11);
  sub_216811CF8((uint64_t)&a17);
  uint64_t v20 = *(std::__shared_weak_count **)(v17 + 80);
  if (v20) {
    sub_216784EC4(v20);
  }
  a17 = a10;
  sub_216815488(&a17);
  sub_2168153A4(&a17);
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(a1);
}

void **sub_216811B84(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    _DWORD v7[4] = result;
    v7[0] = sub_216815584((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 104 * v6;
    sub_21681550C(a1, v7);
    return sub_216815810(v7);
  }
  return result;
}

void sub_216811C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216815810((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216811C44(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    _DWORD v7[4] = result;
    v7[0] = sub_2168073F4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 48 * v6;
    sub_21681588C(a1, v7);
    return sub_2168159A8((uint64_t)v7);
  }
  return result;
}

void sub_216811CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168159A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216811CF8(uint64_t a1)
{
  sub_2167877AC(a1 + 80, *(void **)(a1 + 88));
  char v2 = (void **)(a1 + 56);
  sub_216782F20(&v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)a1);
}

BOOL Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::valid(Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode *this)
{
  return *((void *)this + 3) != *((void *)this + 4);
}

char *Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getName@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[23] < 0) {
    return (char *)sub_216778F24((unsigned char *)a2, *(void **)this, *((void *)this + 1));
  }
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(void *)(a2 + 16) = *((void *)this + 2);
  return this;
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == *(void *)(a1 + 32)) {
    return 0;
  }
  while (1)
  {
    if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getTarget(v2, a2))
    {
      uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
      if ((v5 & 0x80u) != 0) {
        uint64_t v5 = *(void *)(a2 + 8);
      }
      if (v5) {
        break;
      }
    }
    v2 += 104;
    if (v2 == *(void *)(a1 + 32)) {
      return 0;
    }
  }
  return 1;
}

uint64_t Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getNodeType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == *(void *)(a1 + 32)) {
    return 0;
  }
  while (1)
  {
    if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNodeType(v2, a2))
    {
      uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
      if ((v5 & 0x80u) != 0) {
        uint64_t v5 = *(void *)(a2 + 8);
      }
      if (v5) {
        break;
      }
    }
    v2 += 104;
    if (v2 == *(void *)(a1 + 32)) {
      return 0;
    }
  }
  return 1;
}

void Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getParameters(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 80;
      sub_216814B10((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  v41[0] = 0;
  v41[1] = 0;
  uint64_t v40 = v41;
  uint64_t v6 = (long long **)a1[9];
  if (v6)
  {
    uint64_t v7 = *v6;
    if (*v6 != (long long *)(v6 + 1))
    {
      do
      {
        if (v41 == (char **)sub_21678C2D8((uint64_t)&v40, (const void **)v7 + 4))
        {
          uint64_t v11 = a1[6];
          if (v11 != a1[7])
          {
            while (1)
            {
              uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v11);
              if (PropertyHeader) {
                break;
              }
              v11 += 48;
              if (v11 == a1[7]) {
                goto LABEL_6;
              }
            }
            int v32 = *(_DWORD *)v11;
            if (*(char *)(v11 + 31) < 0)
            {
              sub_216778F24(&v33, *(void **)(v11 + 8), *(void *)(v11 + 16));
            }
            else
            {
              long long v13 = *(_OWORD *)(v11 + 8);
              uint64_t v34 = *(void *)(v11 + 24);
              long long v33 = v13;
            }
            uint64_t v35 = *(void *)(v11 + 32);
            uint64_t v14 = *(void *)(v11 + 40);
            uint64_t v36 = v14;
            if (v14) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
            }
            sub_216812C60((char *)__p, v7 + 2, (uint64_t)&v32, PropertyHeader);
            unint64_t v15 = a2[1];
            if (v15 >= a2[2])
            {
              uint64_t v16 = sub_216814EB0(a2, (long long *)__p);
            }
            else
            {
              sub_216814FC0((uint64_t)(a2 + 2), a2[1], (long long *)__p);
              uint64_t v16 = v15 + 80;
              a2[1] = v15 + 80;
            }
            a2[1] = v16;
            Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v39);
            if (v38 < 0) {
              operator delete(__p[0]);
            }
            Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v32);
            sub_21680EE0C((uint64_t **)&v40, (const void **)v7 + 4, (uint64_t)(v7 + 2));
          }
        }
LABEL_6:
        long long v8 = (long long *)*((void *)v7 + 1);
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            long long v8 = *(long long **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (long long *)*((void *)v7 + 2);
            BOOL v10 = *(void *)v9 == (void)v7;
            uint64_t v7 = v9;
          }
          while (!v10);
        }
        uint64_t v7 = v9;
      }
      while (v9 != (long long *)(a1[9] + 8));
    }
  }
  for (uint64_t i = (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)a1[3];
        i != (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)a1[4];
        uint64_t i = (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)((char *)i + 104))
  {
    Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getParameters(i, (uint64_t)&v27);
    if (SHIBYTE(v29) < 0)
    {
      if (!*((void *)&v28 + 1))
      {
LABEL_33:
        if (v30)
        {
          for (unint64_t j = 0;
                j < Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)&v27);
                ++j)
          {
            std::string v19 = (const void **)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)&v27);
            if (v41 == (char **)sub_21678C2D8((uint64_t)&v40, v19))
            {
              sub_21680EE0C((uint64_t **)&v40, v19, (uint64_t)v19);
              int v22 = v27;
              if (SHIBYTE(v29) < 0)
              {
                sub_216778F24(&v23, (void *)v28, *((unint64_t *)&v28 + 1));
              }
              else
              {
                long long v23 = v28;
                uint64_t v24 = v29;
              }
              uint64_t v25 = v30;
              uint64_t v26 = v31;
              if (v31) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
              }
              sub_216812C60((char *)__p, (long long *)v19, (uint64_t)&v22, (uint64_t)v19);
              unint64_t v20 = a2[1];
              if (v20 >= a2[2])
              {
                uint64_t v21 = sub_216814EB0(a2, (long long *)__p);
              }
              else
              {
                sub_216814FC0((uint64_t)(a2 + 2), a2[1], (long long *)__p);
                uint64_t v21 = v20 + 80;
                a2[1] = v20 + 80;
              }
              a2[1] = v21;
              Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v39);
              if (v38 < 0) {
                operator delete(__p[0]);
              }
              Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v22);
            }
          }
        }
      }
    }
    else if (!HIBYTE(v29))
    {
      goto LABEL_33;
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
  }
  sub_21678A498((uint64_t)&v40, v41[0]);
}

void sub_21681220C(_Unwind_Exception *a1)
{
  sub_21678A498(v1 - 112, *(char **)(v1 - 104));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::MaterialFlatten::NetworkNode::getConnections(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 72;
      sub_216815C30((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  v20[0] = 0;
  v20[1] = 0;
  std::string v19 = v20;
  memset(&v18, 0, sizeof(v18));
  memset(&v17, 0, sizeof(v17));
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t v6 = *(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode **)(a1 + 24);
  if (v6 != *(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode **)(a1 + 32))
  {
    do
    {
      unint64_t NumConnections = Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getNumConnections(v6);
      if (NumConnections)
      {
        for (unint64_t i = 0; i != NumConnections; ++i)
        {
          if (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode::getConnection(v6, i, &v18, &v17, (uint64_t)&v15)
            && v20 == (char **)sub_21678C2D8((uint64_t)&v19, (const void **)&v18.__r_.__value_.__l.__data_))
          {
            sub_21680EE0C((uint64_t **)&v19, (const void **)&v18.__r_.__value_.__l.__data_, (uint64_t)&v18);
            sub_216812D2C((char *)__dst, (long long *)&v18, (long long *)&v17, &v15);
            sub_21681249C(a2, (long long *)__dst);
            if (v14 < 0) {
              operator delete(__p);
            }
            if (v12 < 0) {
              operator delete(v11);
            }
            if (v10 < 0) {
              operator delete(__dst[0]);
            }
          }
        }
      }
      uint64_t v6 = (Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode *)((char *)v6 + 104);
    }
    while (v6 != *(Alembic::AbcMaterial::v12::IMaterialSchema::NetworkNode **)(a1 + 32));
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)v15);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  sub_21678A498((uint64_t)&v19, v20[0]);
}

void sub_216812438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  sub_21678A498(v30 - 72, *(char **)(v30 - 64));
  _Unwind_Resume(a1);
}

void **sub_21681249C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      sub_21677CB10();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    _DWORD v21[4] = result;
    if (v15) {
      uint64_t v16 = (char *)sub_216815D10((uint64_t)result, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    std::string v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 24);
    *((void *)v17 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v20 = a2[3];
    *((void *)v17 + 8) = *((void *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    v21[2] = v17 + 72;
    sub_216815C98(a1, v21);
    uint64_t v11 = a1[1];
    uint64_t result = sub_216815EB8(v21);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v10 = a2[3];
    *(void *)(v7 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_21681263C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216815EB8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216812650(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2168126A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A410;
  *(void *)(a1 + 96) = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  unint64_t v3 = (void **)(a1 + 224);
  sub_216782F20(&v3);
  sub_2167877AC(a1 + 200, *(void **)(a1 + 208));
  sub_2167877AC(a1 + 176, *(void **)(a1 + 184));
  sub_2167877AC(a1 + 152, *(void **)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
  operator delete(v2);
}

uint64_t sub_216812760(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A448;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 2;
  sub_216779094((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_216812868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Alembic::Abc::v12::ICompoundProperty *a9, uint64_t a10)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v13);
  sub_216782F20((void ***)&a10);
  sub_2167877AC(v12, *v16);
  sub_2167877AC(v11, *v15);
  sub_2167877AC(v10, *v14);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(a9);
  _Unwind_Resume(a1);
}

void sub_2168128BC(char *a1)
{
  *(void *)a1 = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 152));
  uint64_t v2 = (void **)(a1 + 128);
  sub_216782F20(&v2);
  sub_2167877AC((uint64_t)(a1 + 104), *((void **)a1 + 14));
  sub_2167877AC((uint64_t)(a1 + 80), *((void **)a1 + 11));
  sub_2167877AC((uint64_t)(a1 + 56), *((void **)a1 + 8));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));
  operator delete(a1);
}

uint64_t sub_216812950(uint64_t a1)
{
  return a1;
}

void sub_21681297C(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2168129B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C74A448;
  sub_2167898D0((uint64_t *)(a1 + 56), (const void ***)(a2 + 56));
  sub_2167898D0((uint64_t *)(a1 + 80), (const void ***)(a2 + 80));
  sub_2167898D0((uint64_t *)(a1 + 104), (const void ***)(a2 + 104));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216812BD8((char *)(a1 + 128), *(long long **)(a2 + 128), *(long long **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  unint64_t v7 = (unsigned char *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)unint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  uint64_t v10 = (unsigned char *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_216812B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v15);
  sub_216782F20((void ***)&a10);
  sub_2167877AC(v14, v10[14]);
  sub_2167877AC(v13, v10[11]);
  sub_2167877AC(v12, v10[8]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v11);
  _Unwind_Resume(a1);
}

char *sub_216812BD8(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216782E84(result, a4);
    uint64_t result = sub_21680F848((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_216812C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216782F20(&a9);
  _Unwind_Resume(a1);
}

char *sub_216812C60(char *__dst, long long *a2, uint64_t a3, uint64_t a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v7;
  }
  *((_DWORD *)__dst + 6) = *(_DWORD *)a3;
  long long v8 = __dst + 32;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_216778F24(v8, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)(a3 + 8);
    *((void *)__dst + 6) = *(void *)(a3 + 24);
    *(_OWORD *)long long v8 = v9;
  }
  uint64_t v10 = *(void *)(a3 + 40);
  *((void *)__dst + 7) = *(void *)(a3 + 32);
  *((void *)__dst + 8) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)__dst + 9) = a4;
  return __dst;
}

void sub_216812D10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216812D2C(char *__dst, long long *a2, long long *a3, long long *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v8;
  }
  long long v9 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24(v9, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *(_OWORD *)long long v9 = v10;
  }
  return __dst;
}

void sub_216812DE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216812E14(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 248;
      long long v7 = v4 - 248;
      long long v8 = v4 - 248;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 248;
        (*v9)(v7);
        v6 -= 248;
        BOOL v10 = v7 == v2;
        long long v7 = v8;
      }
      while (!v10);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216812ED4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216812ED4(a1, *a2);
    sub_216812ED4(a1, a2[1]);
    sub_216812F30((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216812F30(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_216812F84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x108421084210842) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEF7BDEF7BDEF7BDFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x84210842108421) {
    unint64_t v9 = 0x108421084210842;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_21681311C(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[248 * v4];
  uint64_t v16 = &v10[248 * v9];
  sub_2168129B8((uint64_t)v14, a2);
  unint64_t v15 = v14 + 248;
  sub_2168130A4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_2168131F4((uint64_t)&v13);
  return v11;
}

void sub_216813090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168131F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168130A4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216813168((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_21681311C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    sub_21677CA1C();
  }
  return operator new(248 * a2);
}

uint64_t sub_216813168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_2168129B8(i + a7, i + a3))
    i -= 248;
  return a6;
}

uint64_t sub_2168131F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 248);
    *(void *)(a1 + 16) = i - 248;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216813260(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v36, "schema");
    sub_21679F2AC(a1, v36, &v38);
    if (((char)v40 & 0x80000000) == 0)
    {
      BOOL v11 = v40 == 23
         && v38 == (void *)0x726574614D636241
         && *(void *)v39 == 0x6574614D5F6C6169
         && *(void *)&v39[7] == 0x31765F6C61697265;
      goto LABEL_78;
    }
    uint64_t v12 = v38;
    BOOL v11 = *(void *)v39 == 23
       && *v38 == 0x726574614D636241
       && v38[1] == 0x6574614D5F6C6169
       && *(void *)((char *)v38 + 15) == 0x31765F6C61697265;
    goto LABEL_77;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v36, "schemaObjTitle");
  sub_21679F2AC(a1, v36, &v38);
  sub_2168135EC(&v35);
  uint64_t v3 = v40;
  if ((v40 & 0x80u) == 0) {
    uint64_t v4 = v40;
  }
  else {
    uint64_t v4 = *(void *)v39;
  }
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_45:
    sub_216779094(v30, "schema");
    sub_21679F2AC(a1, (const void **)v30, &__s1);
    sub_2168135EC(&__p);
    unsigned __int8 v15 = v34;
    if ((v34 & 0x80u) == 0) {
      size_t v16 = v34;
    }
    else {
      size_t v16 = __n;
    }
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    if (v16 != v17)
    {
      BOOL v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v34 < 0)
    {
      BOOL v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        BOOL v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v31 < 0) {
            operator delete(v30[0]);
          }
          if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v15 = v34;
        goto LABEL_69;
      }
      uint64_t v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        int v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v22 = v23;
        int v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v24 = v25;
        BOOL v27 = v20-- != 0;
        BOOL v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v35;
  }
  else {
    uint64_t v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v40 & 0x80) != 0)
  {
    if (memcmp(v38, v7, *(size_t *)v39)) {
      goto LABEL_45;
    }
  }
  else if (v40)
  {
    uint64_t v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      uint64_t v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_65;
      }
    }
    goto LABEL_45;
  }
LABEL_65:
  BOOL v11 = 1;
  if (v6 < 0) {
LABEL_74:
  }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v40 & 0x80000000) == 0) {
    goto LABEL_78;
  }
  uint64_t v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0) {
    operator delete((void *)v36[0]);
  }
  return v11;
}

void sub_21681356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_2168135EC(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcMaterial_Material_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".material");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_216813698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

Alembic::Abc::v12::IObject *sub_2168136CC(Alembic::Abc::v12::IObject *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8 = (void *)sub_2167A2320((uint64_t)a1, a2);
  *uint64_t v8 = &unk_26C74A410;
  uint64_t v9 = (uint64_t)(v8 + 12);
  sub_216812760((uint64_t)(v8 + 12));
  uint64_t v10 = sub_2167A2320((uint64_t)v44, a2);
  LODWORD(v35) = 0;
  int v36 = 0;
  LODWORD(v29) = 0;
  LODWORD(v30) = 0;
  *((_DWORD *)a1 + 2) = sub_2167A2218(v10, a3, a4, &v35, &v29);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v44);
  v43[10] = (char *)a1 + 8;
  v43[11] = "ISchemaObject::ISchemaObject( wrap)";
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader(a1);
  LODWORD(v35) = 0;
  int v36 = 0;
  LODWORD(v29) = 0;
  LODWORD(v30) = 0;
  int v12 = sub_216807C40(a3, a4, &v35, &v29);
  uint64_t v13 = Header + 48;
  if ((sub_216813260(v13, v12) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v35);
    std::string::size_type v17 = sub_216779180(v37, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(__p, "schemaObjTitle");
    sub_21679F2AC(v13, (const void **)__p, &v29);
    if ((v31 & 0x80u) == 0) {
      int v18 = &v29;
    }
    else {
      int v18 = v29;
    }
    if ((v31 & 0x80u) == 0) {
      uint64_t v19 = v31;
    }
    else {
      uint64_t v19 = v30;
    }
    uint64_t v20 = sub_216779180(v17, (uint64_t)v18, v19);
    uint64_t v21 = sub_216779180(v20, (uint64_t)" to expected: ", 14);
    sub_2168135EC(&v32);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v32;
    }
    else {
      int v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    sub_216779180(v21, (uint64_t)v22, size);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if ((char)v31 < 0) {
      operator delete(v29);
    }
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_216778E70(&v29, (long long *)__p);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int v25 = sub_216779038(exception, (uint64_t)&v29);
    __cxa_throw(v25, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::Abc::v12::IObject::getProperties(a1, (uint64_t)&v29);
  sub_216779094(__p, ".material");
  int v14 = *((_DWORD *)a1 + 2);
  LODWORD(v32.__r_.__value_.__l.__data_) = 1;
  LODWORD(v32.__r_.__value_.__r.__words[1]) = v14;
  v27[0] = 0;
  v27[2] = 0;
  v26[0] = 0;
  v26[2] = 0;
  int v15 = sub_216807C40(a3, a4, v27, v26);
  v28[0] = 5;
  v28[2] = v15;
  sub_216813CB4((uint64_t)&v35, (uint64_t)&v29, (uint64_t)__p, &v32, v28);
  sub_216813BA0(v9, (uint64_t)&v35);
  std::string v35 = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v42);
  int v45 = (void **)&v41;
  sub_216782F20(&v45);
  sub_2167877AC((uint64_t)v40, v40[1]);
  sub_2167877AC((uint64_t)v39, v39[1]);
  sub_2167877AC((uint64_t)v38, v38[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v36);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v29);
  return a1;
}

void sub_216813A10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_216779148((std::exception *)&a15);
  sub_216778D38((uint64_t)&a36);
  unsigned __int8 v40 = __cxa_begin_catch(a1);
  sub_2167A13A4((uint64_t)v36 + 104);
  Alembic::Abc::v12::IObject::reset(v36);
  if (a2 == 2) {
    sub_21679FA64(v37 - 184, (uint64_t)v40);
  }
  else {
    sub_21679F9F4(v37 - 184, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2168138BCLL);
}

void sub_216813B84()
{
}

void sub_216813B90()
{
}

uint64_t sub_216813BA0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  sub_21681454C(a1 + 56, (void *)(a2 + 56));
  sub_21681454C(a1 + 80, (void *)(a2 + 80));
  sub_21681454C(a1 + 104, (void *)(a2 + 104));
  sub_21680F80C((uint64_t *)(a1 + 128));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  uint64_t v8 = *(void *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 192);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 192) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  uint64_t v11 = *(void *)(a2 + 232);
  uint64_t v10 = *(void *)(a2 + 240);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v11;
  *(void *)(a1 + 240) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  return a1;
}

uint64_t sub_216813CB4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v6 = sub_216813E0C(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_26C74A448;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 56) = v6 + 64;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 80) = v6 + 88;
  *(void *)(v6 + 112) = 0;
  *(void *)(v6 + 104) = v6 + 112;
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 120) = 0;
  *(void *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = 0;
  *(void *)(v6 + 144) = 0;
  *(_DWORD *)(v6 + 152) = 2;
  sub_216779094((void *)(v6 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  Alembic::AbcMaterial::v12::IMaterialSchema::init((Alembic::AbcMaterial::v12::IMaterialSchema *)a1);
  return a1;
}

void sub_216813DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  size_t v16 = v15;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v16);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v14);
  sub_216782F20((void ***)&a10);
  sub_2167877AC(v13, v10[14]);
  sub_2167877AC(v12, v10[11]);
  sub_2167877AC(v11, v10[8]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 1));
  _Unwind_Resume(a1);
}

uint64_t sub_216813E0C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A4A8;
  sub_216813EB8(a1, a2, a3, a4, a5);
  return a1;
}

void sub_216813EA4(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_216813EB8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *((void *)&v35 + 1) = 0;
  v36[0] = 0;
  *(void *)&long long v35 = (char *)&v35 + 8;
  int v37 = 2;
  sub_2167898D0(v38, (const void ***)&v35);
  v38[3] = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v41 = 1;
  sub_2167877AC((uint64_t)&v35, *((void **)&v35 + 1));
  sub_2167A030C(a4, (uint64_t)&v37);
  sub_2167A030C(a5, (uint64_t)&v37);
  *(_DWORD *)(a1 + 8) = v37;
  v36[34] = a1 + 8;
  v36[35] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(void *)(a2 + 16)) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a2 + 31))
  {
LABEL_18:
    sub_216778A5C((uint64_t)&v35);
    sub_216779180(v36, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::size_type v17 = sub_216779038(exception, (uint64_t)v33);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 40);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 80))(v10, a3);
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v35);
    int v18 = sub_216779180(v36, (uint64_t)"Nonexistent compound property: ", 31);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    sub_216779180(v18, v20, v21);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    int v22 = __cxa_allocate_exception(0x20uLL);
    int v23 = sub_216779038(v22, (uint64_t)v33);
    __cxa_throw(v23, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = v12 + 32;
  if ((sub_2168143F0(v12 + 32, v41) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v35);
    int v24 = sub_216779180(v36, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(__p, "schema");
    sub_21679F2AC(v13, (const void **)__p, v33);
    if ((v34 & 0x80u) == 0) {
      int v25 = v33;
    }
    else {
      int v25 = (void **)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v26 = v34;
    }
    else {
      uint64_t v26 = (uint64_t)v33[1];
    }
    BOOL v27 = sub_216779180(v24, (uint64_t)v25, v26);
    long long v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"AbcMaterial_Material_v1", 23);
    if ((char)v34 < 0) {
      operator delete(v33[0]);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v29 = __cxa_allocate_exception(0x20uLL);
    uint64_t v30 = sub_216779038(v29, (uint64_t)v33);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 104))(&v35, v10, a3);
  long long v14 = v35;
  long long v35 = 0uLL;
  int v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (*((void *)&v35 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v39) {
    sub_216784EC4(v39);
  }
  sub_2167877AC((uint64_t)v38, (void *)v38[1]);
}

void sub_21681428C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x216814040);
}

void sub_2168143B8()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2168143E8);
}

uint64_t sub_2168143F0(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  if ((a2 & 0xFFFFFFFD) != 0) {
    return 0;
  }
  sub_216779094(__p, "schema");
  sub_21679F2AC(a1, (const void **)__p, &v11);
  if (v13 < 0)
  {
    BOOL v2 = *(void *)v12 == 23
      && *v11 == 0x726574614D636241
      && v11[1] == 0x6574614D5F6C6169
      && *(void *)((char *)v11 + 15) == 0x31765F6C61697265;
    operator delete(v11);
  }
  else
  {
    BOOL v2 = v13 == 23
      && v11 == (void *)0x726574614D636241
      && *(void *)v12 == 0x6574614D5F6C6169
      && *(void *)&v12[7] == 0x31765F6C61697265;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_216814530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21681454C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_2167877AC(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

Alembic::Abc::v12::IObject *sub_2168145B8(Alembic::Abc::v12::IObject *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9 = (void *)sub_2167A2320((uint64_t)a1, a2);
  *uint64_t v9 = &unk_26C74A410;
  uint64_t v10 = (uint64_t)(v9 + 12);
  sub_216812760((uint64_t)(v9 + 12));
  uint64_t v11 = sub_2167A2320((uint64_t)v45, a2);
  LODWORD(v36) = 0;
  int v37 = 0;
  LODWORD(v30) = 0;
  LODWORD(v31) = 0;
  *((_DWORD *)a1 + 2) = sub_2167A2218(v11, a4, a5, &v36, &v30);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v45);
  v44[10] = (char *)a1 + 8;
  v44[11] = "ISchemaObject::ISchemaObject( wrapflag)";
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader(a1);
  LODWORD(v36) = 0;
  int v37 = 0;
  LODWORD(v30) = 0;
  LODWORD(v31) = 0;
  int v13 = sub_216807C40(a4, a5, &v36, &v30);
  uint64_t v14 = Header + 48;
  if ((sub_216813260(v14, v13) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v36);
    int v18 = sub_216779180(v38, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(__p, "schemaObjTitle");
    sub_21679F2AC(v14, (const void **)__p, &v30);
    if ((v32 & 0x80u) == 0) {
      int v19 = &v30;
    }
    else {
      int v19 = v30;
    }
    if ((v32 & 0x80u) == 0) {
      uint64_t v20 = v32;
    }
    else {
      uint64_t v20 = v31;
    }
    uint64_t v21 = sub_216779180(v18, (uint64_t)v19, v20);
    int v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    sub_2168135EC(&v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v23 = &v33;
    }
    else {
      int v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    sub_216779180(v22, (uint64_t)v23, size);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if ((char)v32 < 0) {
      operator delete(v30);
    }
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_216778E70(&v30, (long long *)__p);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v26 = sub_216779038(exception, (uint64_t)&v30);
    __cxa_throw(v26, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::Abc::v12::IObject::getProperties(a1, (uint64_t)&v30);
  sub_216779094(__p, ".material");
  int v15 = *((_DWORD *)a1 + 2);
  LODWORD(v33.__r_.__value_.__l.__data_) = 1;
  LODWORD(v33.__r_.__value_.__r.__words[1]) = v15;
  v28[0] = 0;
  v28[2] = 0;
  v27[0] = 0;
  v27[2] = 0;
  int v16 = sub_216807C40(a4, a5, v28, v27);
  v29[0] = 5;
  v29[2] = v16;
  sub_216813CB4((uint64_t)&v36, (uint64_t)&v30, (uint64_t)__p, &v33, v29);
  sub_216813BA0(v10, (uint64_t)&v36);
  int v36 = &unk_26C74A448;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v44);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v43);
  std::string v46 = (void **)&v42;
  sub_216782F20(&v46);
  sub_2167877AC((uint64_t)v41, v41[1]);
  sub_2167877AC((uint64_t)v40, v40[1]);
  sub_2167877AC((uint64_t)v39, v39[1]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v37);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v30);
  return a1;
}

void sub_2168148FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_216779148((std::exception *)&a15);
  sub_216778D38((uint64_t)&a36);
  int v40 = __cxa_begin_catch(a1);
  sub_2167A13A4((uint64_t)v36 + 104);
  Alembic::Abc::v12::IObject::reset(v36);
  if (a2 == 2) {
    sub_21679FA64(v37 - 184, (uint64_t)v40);
  }
  else {
    sub_21679F9F4(v37 - 184, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2168147A8);
}

void sub_216814A70()
{
}

void sub_216814A7C()
{
}

uint64_t *sub_216814A8C(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_216789A4C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_21680EE8C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void sub_216814B10(uint64_t a1, uint64_t a2)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    long long v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_216814B60(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216814C20((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216814BD8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_21677CA1C();
  }
  return operator new(80 * a2);
}

uint64_t sub_216814C20(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    int v10 = a1;
    do
    {
      v9 -= 5;
      sub_216814CEC(v10, (void *)(v7 - 80), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216814DA8((uint64_t)v13);
  return v11;
}

void sub_216814CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_216814CEC(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  uint64_t result = __dst + 4;
  if (*((char *)a3 + 55) < 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)a3 + 4), *((void *)a3 + 5));
  }
  else
  {
    long long v7 = a3[2];
    __dst[6] = *((void *)a3 + 6);
    *(_OWORD *)uint64_t result = v7;
  }
  uint64_t v8 = *((void *)a3 + 8);
  __dst[7] = *((void *)a3 + 7);
  __dst[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  __dst[9] = *((void *)a3 + 9);
  return result;
}

void sub_216814D8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216814DA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216814DE0((uint64_t *)a1);
  }
  return a1;
}

void sub_216814DE0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216814B10(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_216814E34(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216814E68(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_216814B10(v4, i - 80);
  }
}

uint64_t sub_216814EB0(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_21677CB10();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_216814BD8((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  int v10 = v7;
  uint64_t v11 = &v7[80 * v3];
  int v13 = &v7[80 * v6];
  sub_216814FC0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 80;
  sub_216814B60(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216814E34(&v10);
  return v8;
}

void sub_216814FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216814E34((void **)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_216814FC0(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v5;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  uint64_t result = (unsigned char *)(a2 + 32);
  if (*((char *)a3 + 55) < 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)a3 + 4), *((void *)a3 + 5));
  }
  else
  {
    long long v7 = a3[2];
    *(void *)(a2 + 48) = *((void *)a3 + 6);
    *(_OWORD *)uint64_t result = v7;
  }
  uint64_t v8 = *((void *)a3 + 8);
  *(void *)(a2 + 56) = *((void *)a3 + 7);
  *(void *)(a2 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 72) = *((void *)a3 + 9);
  return result;
}

void sub_216815050(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21681506C(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &unk_26C74A4C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  unint64_t v6 = 0;
  sub_2168151B8(&v6, 0);
  return a1;
}

void sub_2168150E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168151B8((void ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_2168150FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216815124(uint64_t a1)
{
}

uint64_t sub_21681512C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A518)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216815170(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_2167877AC((uint64_t)a2, a2[1]);
    operator delete(a2);
  }
}

void sub_2168151B8(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_2167877AC((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

uint64_t *sub_21681520C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_2168152B8((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_21681534C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_2168152B8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216815334(_Unwind_Exception *a1)
{
  sub_21681534C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_21681534C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216812F30((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_2168153A4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_21681543C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21681543C(uint64_t a1, uint64_t a2)
{
  sub_2167877AC(a2 + 80, *(void **)(a2 + 88));
  unint64_t v3 = (void **)(a2 + 56);
  sub_216782F20(&v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)a2);
}

void sub_216815488(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v4 - 48));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_21681550C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168155D0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216815584(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    sub_21677CA1C();
  }
  return operator new(104 * a2);
}

uint64_t sub_2168155D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 104;
      sub_21681569C(a1, v7 - 104, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 104;
      *((void *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216815784((uint64_t)v13);
  return v11;
}

void sub_216815688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_21681569C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_216778F24(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(a3 + 40);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v8 = *(unsigned char *)(a3 + 48);
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 48) = v8;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  sub_216812BD8((char *)(a2 + 56), *(long long **)(a3 + 56), *(long long **)(a3 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3));
  return sub_2167898D0((uint64_t *)(a2 + 80), (const void ***)(a3 + 80));
}

void sub_21681575C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216815784(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168157BC((uint64_t *)a1);
  }
  return a1;
}

void sub_2168157BC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_21681543C(v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **sub_216815810(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216815844(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    sub_21681543C(v4, i - 104);
  }
}

uint64_t sub_21681588C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216815904((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216815904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = 0;
  uint64_t v12 = a7 - 48;
  while (a3 + v11 != a5)
  {
    uint64_t v13 = v12 + v11;
    v11 -= 48;
    sub_21680730C(a1, v13, v11 + a3);
  }
  return a6;
}

uint64_t sub_2168159A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2168159F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_21677CB10();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_216815584((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  int v10 = v7;
  uint64_t v11 = &v7[104 * v3];
  uint64_t v13 = &v7[104 * v6];
  sub_21681569C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 104;
  sub_21681550C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216815810(&v10);
  return v8;
}

void sub_216815B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216815810((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216815B20(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_2168073F4((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  int v10 = v7;
  uint64_t v11 = &v7[48 * v3];
  uint64_t v13 = &v7[48 * v6];
  sub_21680730C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 48;
  sub_21681588C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_2168159A8((uint64_t)&v10);
  return v8;
}

void sub_216815C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168159A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216815C30(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_216815C98(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216815D5C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216815D10(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_21677CA1C();
  }
  return operator new(72 * a2);
}

uint64_t sub_216815D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  sub_216815E2C((uint64_t)v14);
  return a6;
}

uint64_t sub_216815E2C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216815E64((uint64_t *)a1);
  }
  return a1;
}

void sub_216815E64(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216815C30(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_216815EB8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216815EEC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_216815C30(v4, i - 72);
  }
}

uint64_t Alembic::AbcMaterial::v12::getMaterialAssignmentPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 39)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)a1, (uint64_t)v7);
  uint64_t MaterialAssignmentPath = Alembic::AbcMaterial::v12::getMaterialAssignmentPath((uint64_t)v7, a2, a3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v7);
  return MaterialAssignmentPath;
}

{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  long long v12;
  uint64_t v13;
  unsigned char v14[48];

  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 31)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(void *)(a1 + 16)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t result = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  if (*(_DWORD *)(result + 24) != 1) {
    return 0;
  }
  uint64_t result = 0;
  if (*(_DWORD *)(v7 + 56) == 12 && *(unsigned char *)(v7 + 60) == 1)
  {
    uint64_t v8 = sub_2167A4CB4(v7 + 32, 0);
    uint64_t result = 0;
    if (v8)
    {
      LODWORD(v12) = 0;
      DWORD2(v12) = 0;
      LODWORD(v9) = 0;
      LODWORD(v10) = 0;
      sub_2167A4730((uint64_t)v14, (int *)a1, a3, &v12, &v9);
      uint64_t v9 = 0;
      long long v10 = 0;
      long long v11 = 2;
      sub_2167A46DC((uint64_t)v14, (uint64_t)&v9, &v12);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v12;
      *(void *)(a2 + 16) = v13;
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v14);
      return 1;
    }
  }
  return result;
}

void sub_216815FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168160E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t Alembic::AbcMaterial::v12::hasMaterial(Alembic::Abc::v12::IObject *this, uint64_t a2, uint64_t a3)
{
  if (*((char *)this + 39) < 0)
  {
    if (*((void *)this + 3)) {
      goto LABEL_17;
    }
  }
  else if (*((unsigned char *)this + 39))
  {
    goto LABEL_17;
  }
  if (!*((void *)this + 5)) {
    goto LABEL_17;
  }
  int v6 = *(char *)(a3 + 23);
  if (v6 < 0)
  {
    if (*(void *)(a3 + 8) == 9)
    {
      uint64_t v7 = *(void *)a3;
      goto LABEL_11;
    }
LABEL_17:
    Alembic::Abc::v12::IObject::getProperties(this, (uint64_t)v14);
    uint64_t hasMaterial = Alembic::AbcMaterial::v12::hasMaterial((uint64_t)v14, a2, a3);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v14);
    return hasMaterial;
  }
  uint64_t v7 = a3;
  if (v6 != 9) {
    goto LABEL_17;
  }
LABEL_11:
  uint64_t v8 = *(void *)v7;
  int v9 = *(unsigned __int8 *)(v7 + 8);
  if (v8 != 0x6169726574616D2ELL || v9 != 108) {
    goto LABEL_17;
  }
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader(this);
  uint64_t hasMaterial = 0;
  if ((sub_216813260(Header + 48, 0) & 1) == 0) {
    goto LABEL_17;
  }
  return hasMaterial;
}

void sub_2168161EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Alembic::AbcMaterial::v12::hasMaterial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 31)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t result = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1);
  if (result)
  {
    int v7 = sub_2168143F0(result + 32, 0);
    uint64_t result = 0;
    if (v7)
    {
      v9[0] = 0;
      v9[2] = 0;
      v8[0] = 0;
      v8[2] = 0;
      sub_216813CB4((uint64_t)&v10, a1, a3, v9, v8);
      sub_216813BA0(a2, (uint64_t)&v10);
      long long v10 = &unk_26C74A448;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v17);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v16);
      int v18 = (void **)&v15;
      sub_216782F20(&v18);
      sub_2167877AC((uint64_t)v14, v14[1]);
      sub_2167877AC((uint64_t)v13, v13[1]);
      sub_2167877AC((uint64_t)v12, v12[1]);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v11);
      return 1;
    }
  }
  return result;
}

void sub_216816334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168109A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::addMaterialAssignment(Alembic::Abc::v12::OObject *a1, const void *a2, uint64_t a3)
{
  Alembic::Abc::v12::OObject::getProperties(a1, (uint64_t)v5);
  Alembic::AbcMaterial::v12::addMaterialAssignment((uint64_t)v5, a2, a3);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v5);
}

void sub_216816394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Alembic::AbcMaterial::v12::addMaterialAssignment(uint64_t a1, const void *a2, uint64_t a3)
{
  int v10 = *(_DWORD *)a1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_216778F24(&v11, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v11 = *(_OWORD *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  v7[0] = 0;
  v7[2] = 0;
  sub_2167A9570((uint64_t)v15, &v10, a3, v9, v8, v7);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v10);
  Alembic::Abc::v12::OScalarProperty::set((Alembic::Abc::v12::OScalarProperty *)v15, a2);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v15);
}

void sub_216816480(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 - 80));
  _Unwind_Resume(a1);
}

void Alembic::AbcMaterial::v12::addMaterial(Alembic::Abc::v12::OObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Alembic::Abc::v12::OObject::getProperties(a1, (uint64_t)v5);
  Alembic::AbcMaterial::v12::addMaterial((uint64_t)v5, a2, a3);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v5);
}

void sub_2168164F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Alembic::AbcMaterial::v12::addMaterial(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  v8[2] = 0;
  v7[0] = 0;
  v7[2] = 0;
  v6[0] = 0;
  v6[2] = 0;
  Alembic::AbcMaterial::v12::OMaterialSchema::OMaterialSchema(a3, &v10, a2, v9, v8, v7, v6);
  if (v11) {
    sub_216784EC4(v11);
  }
}

void sub_216816590(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168165A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24(a4, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  std::string::append(a4, ".");
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  std::string::append(a4, v8, v9);
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (v10)
  {
    std::operator+<char>();
    if ((v14 & 0x80u) == 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v12 = v14;
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v11, v12);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216816698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_2168166D0(uint64_t a1, uint64_t a2)
{
  if (std::string::find((const std::string *)a1, 46, 0) != -1
    || (std::string::size_type result = std::string::find((const std::string *)a1, 47, 0), result != -1))
  {
    sub_216778A5C((uint64_t)v19);
    uint64_t v5 = sub_216779180(v20, (uint64_t)"invalid name for ", 17);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::string::size_type v9 = sub_216779180(v5, v7, v8);
    uint64_t v10 = sub_216779180(v9, (uint64_t)":", 1);
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *(void *)a1;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    sub_216779180(v10, v12, v13);
    std::stringbuf::str();
    sub_216778E70(v18, &__p);
    if (v17 < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v15 = sub_216779038(exception, (uint64_t)v18);
    __cxa_throw(v15, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  return result;
}

void sub_2168167F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216779148((std::exception *)va);
  sub_216778D38((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21681681C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_216782F74(a2);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (!v6)
  {
    sub_216779094(&__p, "");
    unint64_t v42 = a2[2];
    unint64_t v43 = a2[1];
    if (v43 < v42)
    {
      long long v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v43 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v43 = v44;
      uint64_t v41 = v43 + 24;
      goto LABEL_46;
    }
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a2) >> 3);
    unint64_t v46 = v45 + 1;
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a2) >> 3);
    if (2 * v47 > v46) {
      unint64_t v46 = 2 * v47;
    }
    if (v47 >= 0x555555555555555) {
      unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v48 = v46;
    }
    long long v66 = a2 + 2;
    if (v48) {
      std::string v49 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v48);
    }
    else {
      std::string v49 = 0;
    }
    std::string v55 = &v49[24 * v45];
    int v62 = v49;
    uint64_t v63 = v55;
    uint64_t v65 = &v49[24 * v48];
    long long v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v55 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)std::string v55 = v56;
    memset(&__p, 0, sizeof(__p));
    uint64_t v64 = v55 + 24;
    sub_216790CCC(a2, &v62);
    goto LABEL_67;
  }
  unint64_t v7 = 0;
  std::string::size_type v8 = 0;
  do
  {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) != 0) {
      std::string::size_type v9 = *(void *)(a1 + 8);
    }
    if (v8 >= v9) {
      break;
    }
    std::string::size_type v10 = std::string::find((const std::string *)a1, 46, v8);
    if (v10 == -1) {
      break;
    }
    std::string::size_type v11 = v10;
    std::string::basic_string(&__p, (const std::string *)a1, v8, v10 - v8, (std::allocator<char> *)&v62);
    unint64_t v13 = a2[1];
    unint64_t v12 = a2[2];
    if (v13 >= v12)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a2) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *a2) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      long long v66 = a2 + 2;
      if (v18) {
        int v19 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v18);
      }
      else {
        int v19 = 0;
      }
      uint64_t v20 = &v19[24 * v15];
      int v62 = v19;
      uint64_t v63 = v20;
      uint64_t v65 = &v19[24 * v18];
      long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v20 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v20 = v21;
      memset(&__p, 0, sizeof(__p));
      uint64_t v64 = v20 + 24;
      sub_216790CCC(a2, &v62);
      uint64_t v22 = a2[1];
      sub_216790E64((uint64_t)&v62);
      int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2[1] = v22;
      if (v23 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v13 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v13 = v14;
      a2[1] = v13 + 24;
    }
    uint64_t v24 = *(unsigned __int8 *)(a1 + 23);
    if ((v24 & 0x80u) != 0) {
      uint64_t v24 = *(void *)(a1 + 8);
    }
    if (v11 == v24 - 1)
    {
      sub_216779094(&__p, "");
      unint64_t v26 = a2[1];
      unint64_t v25 = a2[2];
      if (v26 >= v25)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a2) >> 3);
        unint64_t v29 = v28 + 1;
        if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *a2) >> 3);
        if (2 * v30 > v29) {
          unint64_t v29 = 2 * v30;
        }
        if (v30 >= 0x555555555555555) {
          unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v31 = v29;
        }
        long long v66 = a2 + 2;
        if (v31) {
          unsigned __int8 v32 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v31);
        }
        else {
          unsigned __int8 v32 = 0;
        }
        std::string v33 = &v32[24 * v28];
        int v62 = v32;
        uint64_t v63 = v33;
        uint64_t v65 = &v32[24 * v31];
        long long v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v33 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)std::string v33 = v34;
        memset(&__p, 0, sizeof(__p));
        uint64_t v64 = v33 + 24;
        sub_216790CCC(a2, &v62);
        uint64_t v35 = a2[1];
        sub_216790E64((uint64_t)&v62);
        int v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1] = v35;
        if (v36 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v26 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v26 = v27;
        a2[1] = v26 + 24;
      }
    }
    std::string::size_type v8 = v11 + 1;
    ++v7;
  }
  while (a3 - 1 >= v7);
  std::string::size_type v37 = *(unsigned __int8 *)(a1 + 23);
  if ((v37 & 0x80u) != 0) {
    std::string::size_type v37 = *(void *)(a1 + 8);
  }
  if (v8 < v37)
  {
    std::string::basic_string(&__p, (const std::string *)a1, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v62);
    unint64_t v39 = a2[1];
    unint64_t v38 = a2[2];
    if (v39 < v38)
    {
      long long v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v39 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v39 = v40;
      uint64_t v41 = v39 + 24;
LABEL_46:
      a2[1] = v41;
      return;
    }
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *a2) >> 3);
    unint64_t v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *a2) >> 3);
    if (2 * v52 > v51) {
      unint64_t v51 = 2 * v52;
    }
    if (v52 >= 0x555555555555555) {
      unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v53 = v51;
    }
    long long v66 = a2 + 2;
    if (v53) {
      long long v54 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v53);
    }
    else {
      long long v54 = 0;
    }
    int v57 = &v54[24 * v50];
    int v62 = v54;
    uint64_t v63 = v57;
    uint64_t v65 = &v54[24 * v53];
    long long v58 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v57 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)int v57 = v58;
    memset(&__p, 0, sizeof(__p));
    uint64_t v64 = v57 + 24;
    sub_216790CCC(a2, &v62);
LABEL_67:
    uint64_t v59 = a2[1];
    sub_216790E64((uint64_t)&v62);
    int v60 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v59;
    if (v60 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216816D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *Alembic::Ogawa::v12::IArchive::IArchive(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v8 = operator new(8uLL);
  Alembic::Ogawa::v12::IStreams::IStreams(v8, a2, a3, a4);
  std::string::size_type v9 = (Alembic::Ogawa::v12::IArchive *)sub_216817050(a1, (uint64_t)v8);
  a1[2] = 0;
  a1[3] = 0;
  Alembic::Ogawa::v12::IArchive::init(v9);
  return a1;
}

void sub_216816DEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    sub_216784EC4(v4);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::Ogawa::v12::IArchive::init(Alembic::Ogawa::v12::IArchive *this)
{
  if (Alembic::Ogawa::v12::IStreams::isValid(*(Alembic::Ogawa::v12::IStreams **)this))
  {
    uint64_t v7 = 0;
    Alembic::Ogawa::v12::IStreams::read(*(void *)this, 0, 8, 8, &v7);
    uint64_t v2 = operator new(8uLL);
    uint64_t v3 = (uint64_t)v2;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    unint64_t v5 = *(void *)this;
    uint64_t v6 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Alembic::Ogawa::v12::IGroup::IGroup(v2, &v5, v7, 0, 0);
    sub_216816F94((void *)this + 2, v3);
    if (v6) {
      sub_216784EC4(v6);
    }
  }
}

void sub_216816ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v12) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void *Alembic::Ogawa::v12::IArchive::IArchive(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(8uLL);
  Alembic::Ogawa::v12::IStreams::IStreams(v4, a2);
  unint64_t v5 = (Alembic::Ogawa::v12::IArchive *)sub_216817050(a1, (uint64_t)v4);
  a1[2] = 0;
  a1[3] = 0;
  Alembic::Ogawa::v12::IArchive::init(v5);
  return a1;
}

void sub_216816F58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    sub_216784EC4(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_216816F94(void *a1, uint64_t a2)
{
  sub_21681716C(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void Alembic::Ogawa::v12::IArchive::~IArchive(Alembic::Ogawa::v12::IArchive *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    sub_216784EC4(v3);
  }
}

uint64_t Alembic::Ogawa::v12::IArchive::isValid(Alembic::Ogawa::v12::IStreams **this)
{
  return Alembic::Ogawa::v12::IStreams::isValid(*this);
}

uint64_t Alembic::Ogawa::v12::IArchive::isFrozen(Alembic::Ogawa::v12::IStreams **this)
{
  return Alembic::Ogawa::v12::IStreams::isFrozen(*this);
}

uint64_t Alembic::Ogawa::v12::IArchive::getVersion(Alembic::Ogawa::v12::IStreams **this)
{
  return Alembic::Ogawa::v12::IStreams::getVersion(*this);
}

uint64_t Alembic::Ogawa::v12::IArchive::getGroup@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 24);
  *a2 = *(void *)(this + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *sub_216817050(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C74A540;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2168170A8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    Alembic::Ogawa::v12::IStreams::~IStreams(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168170C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2168170F0(uint64_t a1)
{
  uint64_t v1 = *(Alembic::Ogawa::v12::IStreams **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::IStreams::~IStreams(v1);
    operator delete(v2);
  }
}

uint64_t sub_216817128(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A590)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_21681716C(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C74A5B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2168171C4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    Alembic::Ogawa::v12::IGroup::~IGroup(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168171E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21681720C(uint64_t a1)
{
  uint64_t v1 = *(Alembic::Ogawa::v12::IGroup **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::IGroup::~IGroup(v1);
    operator delete(v2);
  }
}

uint64_t sub_216817244(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A608)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void Alembic::Ogawa::v12::IData::~IData(Alembic::Ogawa::v12::IData *this)
{
}

{
  sub_216817474((void **)this, 0);
}

Alembic::Ogawa::v12::IStreams ***Alembic::Ogawa::v12::IData::IData(Alembic::Ogawa::v12::IStreams ***a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  std::string::size_type v8 = operator new(0x20uLL);
  std::string::size_type v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  unint64_t v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v10 = sub_216817420(v8, &v14);
  *a1 = (Alembic::Ogawa::v12::IStreams **)v10;
  if (v15)
  {
    sub_216784EC4(v15);
    std::string::size_type v10 = (unint64_t *)*a1;
  }
  unint64_t v13 = 0;
  v10[2] = a3 & 0x7FFFFFFFFFFFFFFFLL;
  v10[3] = 0;
  if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    Alembic::Ogawa::v12::IStreams::read(*v10, a4, a3 & 0x7FFFFFFFFFFFFFFFLL, 8, &v13);
    unint64_t Size = Alembic::Ogawa::v12::IStreams::getSize(**a1);
    if (Size >= (unint64_t)v13) {
      (*a1)[3] = v13;
    }
  }
  return a1;
}

void sub_2168173A4(_Unwind_Exception *a1)
{
  sub_216817474(v1, 0);
  _Unwind_Resume(a1);
}

unint64_t **Alembic::Ogawa::v12::IData::read(unint64_t **this, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    unint64_t v5 = (*this)[3];
    if (v5) {
      BOOL v6 = a4 + a2 > v5;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      return (unint64_t **)Alembic::Ogawa::v12::IStreams::read(**this, a5, a4 + (*this)[2] + 8, a2, a3);
    }
  }
  return this;
}

uint64_t Alembic::Ogawa::v12::IData::getSize(Alembic::Ogawa::v12::IData *this)
{
  return *(void *)(*(void *)this + 24);
}

uint64_t Alembic::Ogawa::v12::IData::getPos(Alembic::Ogawa::v12::IData *this)
{
  return *(void *)(*(void *)this + 16);
}

void *sub_216817420(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    unint64_t v5 = (std::__shared_weak_count *)a1[1];
    *a1 = v4;
    a1[1] = v3;
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a1 = v4;
    a1[1] = 0;
  }
  return a1;
}

void sub_216817474(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3) {
      sub_216784EC4(v3);
    }
    operator delete(v2);
  }
}

Alembic::Ogawa::v12::IStreams ***Alembic::Ogawa::v12::IGroup::IGroup(Alembic::Ogawa::v12::IStreams ***a1, uint64_t *a2, uint64_t a3, char a4, unint64_t a5)
{
  std::string::size_type v10 = operator new(0x38uLL);
  std::string::size_type v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v19 = *a2;
  uint64_t v20 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = (Alembic::Ogawa::v12::IStreams **)sub_216817AB4((uint64_t)v10, &v19);
  if (v20) {
    sub_216784EC4(v20);
  }
  if (a3)
  {
    int v12 = **a1;
    if (v12)
    {
      if (Alembic::Ogawa::v12::IStreams::isValid(v12))
      {
        unint64_t v13 = (unint64_t *)*a1;
        v13[6] = a3;
        Alembic::Ogawa::v12::IStreams::read(*v13, a5, a3, 8, v13 + 5);
        uint64_t v14 = (*a1)[5];
        unint64_t Size = Alembic::Ogawa::v12::IStreams::getSize(**a1);
        unint64_t v16 = *a1;
        if ((unint64_t)v14 <= Size >> 3 && (unint64_t v17 = (unint64_t)v16[5]) != 0)
        {
          if (v17 < 9 || (a4 & 1) == 0)
          {
            sub_21679A004((uint64_t)(v16 + 2), v17);
            Alembic::Ogawa::v12::IStreams::read((unint64_t)**a1, a5, a3 + 8, 8 * (void)(*a1)[5], (*a1)[2]);
          }
        }
        else
        {
          v16[5] = 0;
        }
      }
    }
  }
  return a1;
}

void sub_2168175E4(_Unwind_Exception *a1)
{
  sub_216817B14(v1, 0);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::IGroup::~IGroup(Alembic::Ogawa::v12::IGroup *this)
{
}

{
  sub_216817B14((void **)this, 0);
}

void Alembic::Ogawa::v12::IGroup::getGroup(unint64_t **this@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  unint64_t v19 = 0x8000000000000000;
  std::string::size_type v9 = *this;
  unint64_t v10 = (*this)[5];
  if (v10)
  {
    unint64_t v11 = v9[2];
    unint64_t v12 = v9[3];
    if (v11 == v12)
    {
      if (v10 <= a2) {
        return;
      }
      Alembic::Ogawa::v12::IStreams::read(*v9, a4, v9[6] + 8 * a2 + 8, 8, &v19);
      uint64_t v13 = v19;
      if (!v19) {
        goto LABEL_12;
      }
LABEL_10:
      if (v13 < 9 || v13 == (*this)[6]) {
        return;
      }
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v11 = v9[2];
    unint64_t v12 = v9[3];
  }
  if (a2 >= (uint64_t)(v12 - v11) >> 3) {
    return;
  }
  uint64_t v13 = *(void *)(v11 + 8 * a2);
  if (v13 < 0) {
    return;
  }
  unint64_t v19 = *(void *)(v11 + 8 * a2);
  if (v13) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v14 = (Alembic::Ogawa::v12::IStreams ***)operator new(8uLL);
  uint64_t v15 = (uint64_t)v14;
  uint64_t v16 = **this;
  unint64_t v17 = (std::__shared_weak_count *)(*this)[1];
  v18[0] = v16;
  v18[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::Ogawa::v12::IGroup::IGroup(v14, v18, v13, a3, a4);
  sub_216816F94(a5, v15);
  if (v17) {
    sub_216784EC4(v17);
  }
}

void sub_216817794(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL Alembic::Ogawa::v12::IGroup::isLight(Alembic::Ogawa::v12::IGroup *this)
{
  return *(void *)(*(void *)this + 40)
      && *(void *)(*(void *)this + 16) == *(void *)(*(void *)this + 24);
}

BOOL Alembic::Ogawa::v12::IGroup::isChildGroup(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 16);
  return a2 < (*(void *)(*(void *)this + 24) - v2) >> 3 && *(void *)(v2 + 8 * a2) >= 0;
}

void Alembic::Ogawa::v12::IGroup::getData(unint64_t **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::string::size_type v8 = *this;
  unint64_t v9 = (*this)[5];
  if (v9)
  {
    unint64_t v10 = v8[2];
    unint64_t v11 = v8[3];
    if (v10 == v11)
    {
      if (v9 <= a2) {
        return;
      }
      uint64_t v24 = 0;
      Alembic::Ogawa::v12::IStreams::read(*v8, a3, v8[6] + 8 * a2 + 8, 8, &v24);
      uint64_t v12 = v24;
      if ((v24 & 0x8000000000000000) == 0) {
        return;
      }
      uint64_t v13 = operator new(8uLL);
      uint64_t v14 = (uint64_t)v13;
      uint64_t v15 = (std::__shared_weak_count *)(*this)[1];
      unint64_t v22 = **this;
      int v23 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Alembic::Ogawa::v12::IData::IData(v13, &v22, v12, a3);
      sub_2168179DC(a4, v14);
      uint64_t v16 = v23;
      if (!v23) {
        return;
      }
LABEL_15:
      sub_216784EC4(v16);
      return;
    }
  }
  else
  {
    unint64_t v10 = v8[2];
    unint64_t v11 = v8[3];
  }
  if (a2 < (uint64_t)(v11 - v10) >> 3 && (*(void *)(v10 + 8 * a2) & 0x8000000000000000) != 0)
  {
    unint64_t v17 = operator new(8uLL);
    uint64_t v18 = (uint64_t)v17;
    unint64_t v19 = v8[1];
    unint64_t v20 = *v8;
    long long v21 = (std::__shared_weak_count *)v19;
    if (v19)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      std::string::size_type v8 = *this;
    }
    Alembic::Ogawa::v12::IData::IData(v17, &v20, *(void *)(v8[2] + 8 * a2), a3);
    sub_2168179DC(a4, v18);
    uint64_t v16 = v21;
    if (v21) {
      goto LABEL_15;
    }
  }
}

void sub_216817984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_216784EC4(a13);
  }
  if (v14) {
    operator delete(v15);
  }
  unint64_t v17 = *(std::__shared_weak_count **)(v13 + 8);
  if (v17) {
    sub_216784EC4(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168179DC(void *a1, uint64_t a2)
{
  sub_216817B94(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

uint64_t Alembic::Ogawa::v12::IGroup::isChildData(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 16);
  if (a2 >= (*(void *)(*(void *)this + 24) - v2) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * a2) >> 63;
  }
}

uint64_t Alembic::Ogawa::v12::IGroup::getNumChildren(Alembic::Ogawa::v12::IGroup *this)
{
  return *(void *)(*(void *)this + 40);
}

BOOL Alembic::Ogawa::v12::IGroup::isEmptyChildGroup(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 16);
  return a2 < (*(void *)(*(void *)this + 24) - v2) >> 3 && *(void *)(v2 + 8 * a2) == 0;
}

BOOL Alembic::Ogawa::v12::IGroup::isEmptyChildData(Alembic::Ogawa::v12::IGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 16);
  return a2 < (*(void *)(*(void *)this + 24) - v2) >> 3 && *(void *)(v2 + 8 * a2) == 0x8000000000000000;
}

uint64_t sub_216817AB4(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    long long v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_216817B14(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = sub_216817B54(v3);
    operator delete(v4);
  }
}

void *sub_216817B54(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_216784EC4(v3);
  }
  return a1;
}

void *sub_216817B94(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C74A630;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216817BEC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    Alembic::Ogawa::v12::IData::~IData(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216817C0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216817C34(uint64_t a1)
{
  uint64_t v1 = *(Alembic::Ogawa::v12::IData **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::IData::~IData(v1);
    operator delete(v2);
  }
}

uint64_t sub_216817C6C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A680)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t *Alembic::Ogawa::v12::IStreams::IStreams(uint64_t *a1, char *a2, uint64_t a3, int a4)
{
  std::string::size_type v8 = operator new(0x20uLL);
  *(_DWORD *)std::string::size_type v8 = 0;
  v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  *a1 = (uint64_t)v8;
  if (a4)
  {
    unint64_t v9 = (char *)operator new(0x40uLL);
    unint64_t v10 = v9;
    *(void *)unint64_t v9 = &unk_26C74A6A8;
    *((void *)v9 + 1) = a3;
    if (a2[23] < 0)
    {
      sub_216778F24(v9 + 16, *(void **)a2, *((void *)a2 + 1));
      int v17 = a2[23];
      *((_DWORD *)v10 + 1sub_216817B14((void **)this, 0) = -1;
      unint64_t v11 = (int *)(v10 + 40);
      *((void *)v10 + 6) = 0;
      uint64_t v12 = (size_t *)(v10 + 48);
      *((void *)v10 + 7) = 0;
      if (v17 < 0) {
        a2 = *(char **)a2;
      }
    }
    else
    {
      *((_OWORD *)v9 + 1) = *(_OWORD *)a2;
      *((void *)v9 + 4) = *((void *)a2 + 2);
      *((_DWORD *)v9 + 1sub_216817B14((void **)this, 0) = -1;
      unint64_t v11 = (int *)(v9 + 40);
      *((void *)v9 + 6) = 0;
      uint64_t v12 = (size_t *)(v9 + 48);
      *((void *)v9 + 7) = 0;
    }
    int v18 = open(a2, 0);
    int v19 = v18;
    if (v18 < 0) {
      int v18 = -1;
    }
    int *v11 = v18;
    if ((v19 & 0x80000000) == 0 && (fstat(v18, &v27) & 0x80000000) == 0)
    {
      st_std::string::size_type size = v27.st_size;
      if ((v27.st_size & 0x8000000000000000) == 0)
      {
        int v21 = *((_DWORD *)v10 + 10);
        unint64_t v22 = (void *)*((void *)v10 + 7);
        if (v22)
        {
          munmap(v22, *v12);
          *((void *)v10 + 7) = 0;
        }
        int v23 = mmap(0, st_size, 1, 2, v21, 0);
        if (v23 != (void *)-1)
        {
          *((void *)v10 + 6) = st_size;
          *((void *)v10 + 7) = v23;
        }
      }
    }
    uint64_t v15 = (std::__shared_weak_count *)operator new(0x20uLL);
    uint64_t v16 = (std::__shared_weak_count_vtbl *)&unk_26C74A710;
  }
  else
  {
    unint64_t v10 = (char *)operator new(0x20uLL);
    *(void *)unint64_t v10 = &unk_26C74A788;
    *((void *)v10 + 2) = a3;
    if (a2[23] >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(const char **)a2;
    }
    int v14 = open(v13, 0);
    *((_DWORD *)v10 + 2) = v14;
    *((void *)v10 + 3) = 0;
    if (fstat(v14, &v27) < 0 || v27.st_size < 0) {
      *((void *)v10 + 3) = 0;
    }
    else {
      *((void *)v10 + 3) = v27.st_size;
    }
    uint64_t v15 = (std::__shared_weak_count *)operator new(0x20uLL);
    uint64_t v16 = (std::__shared_weak_count_vtbl *)&unk_26C74A7E0;
  }
  v15->__vftable = v16;
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  uint64_t v24 = *a1;
  v26[0] = v10;
  v26[1] = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_216817FAC(v24, v26, 1);
  sub_216784EC4(v15);
  sub_216784EC4(v15);
  return a1;
}

void sub_216817F10(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_216818F04(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216817FAC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a3 && *a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 24))(*a2))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      (*(void (**)(void, uint64_t, void, uint64_t, uint64_t *))(*(void *)*a2 + 32))(*a2, v6, 0, 16, &v18);
      if (v18 != 2002872143 || BYTE4(v18) != 97)
      {
LABEL_24:
        *(_DWORD *)a1 = 0;
        return;
      }
      int v9 = BYTE5(v18) == 255;
      __int16 v10 = BYTE6(v18);
      __int16 v11 = SHIBYTE(v18);
      uint64_t v12 = v19;
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 40))(*a2);
      unsigned __int16 v14 = v11 | (v10 << 8);
      if (v6)
      {
        if (v7 != v12
          || *(unsigned __int8 *)(a1 + 1) != v9
          || *(unsigned __int16 *)(a1 + 2) != v14
          || *(void *)(a1 + 8) != v13)
        {
          goto LABEL_24;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 1) = v9;
        *(_WORD *)(a1 + 2) = v14;
        uint64_t v7 = v12;
        *(void *)(a1 + 8) = v13;
      }
      ++v6;
    }
    while (a3 != v6);
    if ((unsigned __int16)(v11 | (v10 << 8)) == 1)
    {
      uint64_t v16 = *a2;
      uint64_t v15 = a2[1];
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      int v17 = *(std::__shared_weak_count **)(a1 + 24);
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        sub_216784EC4(v17);
      }
      *(unsigned char *)a1 = 1;
    }
  }
}

uint64_t *Alembic::Ogawa::v12::IStreams::IStreams(uint64_t *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = operator new(0x20uLL);
  *(_DWORD *)uint64_t v4 = 0;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  *a1 = (uint64_t)v4;
  long long v5 = (std::__shared_weak_count_vtbl *)operator new(0x40uLL);
  v5->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C74A858;
  v5->~__shared_weak_count_0 = 0;
  v5->__on_zero_shared = 0;
  v5->__get_deleter = 0;
  sub_21679AB00(&v5->~__shared_weak_count_0, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v5->__on_zero_shared_weak = 0;
  v5[1].~__shared_weak_count = 0;
  p_on_zero_shared_weak = (void **)&v5->__on_zero_shared_weak;
  v5[1].~__shared_weak_count_0 = 0;
  std::string::size_type v8 = v5->~__shared_weak_count_0;
  on_zero_shared = (void (__cdecl *)(std::__shared_weak_count *__hidden))v5->__on_zero_shared;
  uint64_t v9 = (char *)on_zero_shared - (char *)v8;
  if ((unint64_t)((char *)on_zero_shared - (char *)v8) > 0x1FFFFFFFFFFFFFF8) {
    size_t v10 = -1;
  }
  else {
    size_t v10 = (8 * ((char *)on_zero_shared - (char *)v8)) | 0x10;
  }
  __int16 v11 = operator new[](v10);
  void *v11 = 64;
  v11[1] = v9 >> 3;
  if (on_zero_shared == v8)
  {
    uint64_t v13 = (void (__cdecl *)(std::__shared_count *__hidden))on_zero_shared;
  }
  else
  {
    unint64_t v12 = 0;
    do
    {
      pthread_mutex_init((pthread_mutex_t *)&v11[v12 / 8 + 2], 0);
      v12 += 64;
    }
    while (v9 >> 3 << 6 != v12);
    on_zero_shared = v5->~__shared_weak_count_0;
    uint64_t v13 = v5->__on_zero_shared;
  }
  v5[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))(v11 + 2);
  sub_216818B74((void **)&v5->__on_zero_shared_weak, ((char *)v13 - (char *)on_zero_shared) >> 3);
  if (v5->__on_zero_shared != (void (__cdecl *)(std::__shared_count *__hidden))v5->~__shared_weak_count_0)
  {
    unint64_t v14 = 0;
    do
    {
      std::istream::tellg();
      uint64_t v16 = (char *)v5[1].~__shared_weak_count;
      unint64_t v15 = (unint64_t)v5[1].~__shared_weak_count_0;
      if ((unint64_t)v16 >= v15)
      {
        on_zero_shared_weak = (char *)*p_on_zero_shared_weak;
        uint64_t v19 = (v16 - (unsigned char *)*p_on_zero_shared_weak) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v21 = v15 - (void)on_zero_shared_weak;
        if (v21 >> 2 > v20) {
          unint64_t v20 = v21 >> 2;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          int v23 = (char *)sub_21677CB28((uint64_t)&v5[1].~__shared_weak_count_0, v22);
          on_zero_shared_weak = (char *)v5->__on_zero_shared_weak;
          uint64_t v16 = (char *)v5[1].~__shared_weak_count;
        }
        else
        {
          int v23 = 0;
        }
        uint64_t v24 = &v23[8 * v19];
        *(void *)uint64_t v24 = v31;
        int v17 = (void (__cdecl *)(std::__shared_weak_count *__hidden))(v24 + 8);
        while (v16 != on_zero_shared_weak)
        {
          uint64_t v25 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v24 - 1) = v25;
          v24 -= 8;
        }
        v5->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
        v5[1].~__shared_weak_count = v17;
        v5[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v23[8 * v22];
        if (on_zero_shared_weak) {
          operator delete(on_zero_shared_weak);
        }
      }
      else
      {
        *(void *)uint64_t v16 = v31;
        int v17 = (void (__cdecl *)(std::__shared_weak_count *__hidden))(v16 + 8);
      }
      v5[1].~__shared_weak_count = v17;
      ++v14;
    }
    while (v14 < ((char *)v5->__on_zero_shared - (char *)v5->~__shared_weak_count_0) >> 3);
  }
  unint64_t v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C74A8B0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v5;
  uint64_t v27 = *a1;
  v30[0] = v5;
  v30[1] = v26;
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v28 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v5->~__shared_weak_count + 2))(v5);
  sub_216817FAC(v27, v30, v28);
  sub_216784EC4(v26);
  sub_216784EC4(v26);
  return a1;
}

void sub_216818480(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  sub_216818F04(v1, 0);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::IStreams::~IStreams(Alembic::Ogawa::v12::IStreams *this)
{
}

{
  sub_216818F04((void **)this, 0);
}

uint64_t Alembic::Ogawa::v12::IStreams::isValid(Alembic::Ogawa::v12::IStreams *this)
{
  return **(unsigned __int8 **)this;
}

uint64_t Alembic::Ogawa::v12::IStreams::isFrozen(Alembic::Ogawa::v12::IStreams *this)
{
  return *(unsigned __int8 *)(*(void *)this + 1);
}

uint64_t Alembic::Ogawa::v12::IStreams::getVersion(Alembic::Ogawa::v12::IStreams *this)
{
  return *(unsigned __int16 *)(*(void *)this + 2);
}

uint64_t Alembic::Ogawa::v12::IStreams::getSize(Alembic::Ogawa::v12::IStreams *this)
{
  return *(void *)(*(void *)this + 8);
}

unint64_t Alembic::Ogawa::v12::IStreams::read(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (**(unsigned char **)this)
  {
    unint64_t v9 = this;
    this = (*(uint64_t (**)(void))(**(void **)(*(void *)this + 16) + 16))(*(void *)(*(void *)this + 16));
    if (this > a2)
    {
      this = (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t, void *))(**(void **)(*(void *)v9 + 16)
                                                                                           + 32))(*(void *)(*(void *)v9 + 16), a2, a3, a4, a5);
      if ((this & 1) == 0)
      {
        size_t v10 = sub_216779180(MEMORY[0x263F8C100], (uint64_t)"Ogawa IStreams::read failed.", 28);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
        __int16 v11 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        return std::ostream::flush();
      }
    }
  }
  return this;
}

void sub_21681873C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

size_t *sub_216818750(size_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    munmap(v2, *a1);
    a1[1] = 0;
  }
  return a1;
}

uint64_t sub_21681878C(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A6A8;
  uint64_t v2 = (size_t *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3)
  {
    munmap(v3, *v2);
    *(void *)(a1 + 56) = 0;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 != -1) {
    close(v4);
  }
  sub_216818750(v2);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_216818810(uint64_t a1)
{
  uint64_t v1 = (void *)sub_21681878C(a1);

  operator delete(v1);
}

uint64_t sub_216818838(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL sub_216818840(uint64_t a1)
{
  return *(void *)(a1 + 56) != 0;
}

uint64_t sub_216818850(uint64_t a1, int a2, size_t a3, size_t __n, void *__dst)
{
  size_t v5 = *(void *)(a1 + 48);
  BOOL v7 = v5 < __n || v5 < a3 || __n + a3 > v5;
  int v8 = v7;
  if (!v7) {
    memcpy(__dst, (const void *)(*(void *)(a1 + 56) + a3), __n);
  }
  return v8 ^ 1u;
}

uint64_t sub_2168188A0(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_2168188A8()
{
  return -1;
}

void sub_2168188B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2168188DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21681890C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A760)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216818950(uint64_t a1)
{
  *(void *)a1 = &unk_26C74A788;
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  return a1;
}

void sub_2168189A0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_216818950(a1);

  operator delete(v1);
}

uint64_t sub_2168189C8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL sub_2168189D0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >= 0;
}

uint64_t sub_2168189E0(uint64_t a1, uint64_t a2, off_t a3, unint64_t a4, char *a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    unint64_t v10 = *(void *)(a1 + 24);
    if (v10 >= a4 || v10 >= a4 + a3)
    {
      unint64_t v12 = 0;
      int v13 = *(_DWORD *)(a1 + 8);
      while (1)
      {
        size_t v14 = a4 - v12 >= 0x40000000 ? 0x40000000 : a4 - v12;
        ssize_t v15 = pread(v13, a5, v14, a3);
        v12 += v15 & ~(v15 >> 63);
        if (v15 < 0) {
          break;
        }
        BOOL v16 = v12 < a4;
        if (v15)
        {
          a3 += v15;
          a5 += v15;
          if (v12 < a4) {
            continue;
          }
        }
        return !v16;
      }
      if (*__error() != 4) {
        return 0;
      }
      BOOL v16 = v12 < a4;
      return !v16;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216818ACC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void sub_216818AD8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216818B00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216818B30(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A830)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216818B74(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_21677CB10();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_21677CB28(v3, a2);
    BOOL v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    __int16 v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_216818C1C(void *a1)
{
  *a1 = &unk_26C74A858;
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = v3 << 6;
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)(v2 - 64 + v4));
        v4 -= 64;
      }
      while (v4);
    }
    operator delete[]((void *)(v2 - 16));
  }
  int64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_216818CB8(void *a1)
{
  uint64_t v1 = sub_216818C1C(a1);

  operator delete(v1);
}

uint64_t sub_216818CE0(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
}

BOOL sub_216818CF0(uint64_t a1)
{
  return *(void *)(a1 + 8) != *(void *)(a1 + 16);
}

BOOL sub_216818D00(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[2] - a1[1]) >> 3) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = a2;
  }
  uint64_t v4 = (pthread_mutex_t *)(a1[7] + (v3 << 6));
  pthread_mutex_lock(v4);
  int64_t v5 = *(void **)(a1[1] + 8 * v3);
  std::istream::seekg();
  if (*(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 32))
  {
    BOOL v6 = 0;
  }
  else
  {
    std::istream::read();
    BOOL v6 = *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 32) == 0;
  }
  pthread_mutex_unlock(v4);
  return v6;
}

void sub_216818E38(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void sub_216818E68(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216818E90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216818EC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A900)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216818F04(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[3];
    if (v3) {
      sub_216784EC4(v3);
    }
    operator delete(v2);
  }
}

uint64_t *Alembic::Ogawa::v12::OArchive::OArchive(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(8uLL);
  Alembic::Ogawa::v12::OStream::OStream(v4, a2);
  sub_216819200(a1, (uint64_t)v4);
  a1[2] = 0;
  a1[3] = 0;
  int64_t v5 = operator new(0x18uLL);
  BOOL v6 = v5;
  BOOL v7 = (std::__shared_weak_count *)a1[1];
  uint64_t v9 = *a1;
  unint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::Ogawa::v12::OGroup::OGroup(v5, &v9);
  sub_21681905C(a1 + 2, v6);
  if (v10) {
    sub_216784EC4(v10);
  }
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  uint64_t v4 = operator new(8uLL);
  Alembic::Ogawa::v12::OStream::OStream(v4, a2);
  sub_216819200(a1, (uint64_t)v4);
  int64_t v5 = operator new(0x18uLL);
  BOOL v6 = v5;
  BOOL v7 = (std::__shared_weak_count *)a1[1];
  uint64_t v9 = *a1;
  unint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::Ogawa::v12::OGroup::OGroup(v5, &v9);
  sub_21681931C(a1 + 2, v6);
  if (v10) {
    sub_216784EC4(v10);
  }
  return a1;
}

void sub_216819008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *(std::__shared_weak_count **)(v10 + 24);
  if (v12) {
    sub_216784EC4(v12);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13) {
    sub_216784EC4(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_21681905C(void *a1, void *a2)
{
  sub_21681931C(&v5, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void sub_216819150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_216784EC4(v12);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::Ogawa::v12::OArchive::~OArchive(Alembic::Ogawa::v12::OArchive *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    sub_216784EC4(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    sub_216784EC4(v3);
  }
}

BOOL Alembic::Ogawa::v12::OArchive::isValid(Alembic::Ogawa::v12::OStream **this)
{
  return Alembic::Ogawa::v12::OStream::isValid(*this);
}

uint64_t Alembic::Ogawa::v12::OArchive::getGroup@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 24);
  *a2 = *(void *)(this + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *sub_216819200(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C74A928;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216819258(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    Alembic::Ogawa::v12::OStream::~OStream(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216819278(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2168192A0(uint64_t a1)
{
  uint64_t v1 = *(Alembic::Ogawa::v12::OStream **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::OStream::~OStream(v1);
    operator delete(v2);
  }
}

uint64_t sub_2168192D8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A978)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_21681931C(void *a1, void *a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C74A9A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  sub_216787B18((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_216819384(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    Alembic::Ogawa::v12::OGroup::~OGroup(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168193A4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2168193CC(uint64_t a1)
{
  uint64_t v1 = *(Alembic::Ogawa::v12::OGroup **)(a1 + 24);
  if (v1)
  {
    Alembic::Ogawa::v12::OGroup::~OGroup(v1);
    operator delete(v2);
  }
}

uint64_t sub_216819404(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74A9F0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

Alembic::Ogawa::v12::OData *Alembic::Ogawa::v12::OData::OData(Alembic::Ogawa::v12::OData *this)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *(void *)this = v2;
  return this;
}

{
  _OWORD *v2;

  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *(void *)this = v2;
  return this;
}

void *Alembic::Ogawa::v12::OData::OData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x20uLL);
  uint64_t v10 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *uint64_t v8 = v10;
    v8[1] = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    v8[2] = a3;
    v8[3] = a4;
    *a1 = v8;
    sub_216784EC4(v9);
  }
  else
  {
    *uint64_t v8 = v10;
    v8[1] = 0;
    v8[2] = a3;
    v8[3] = a4;
    *a1 = v8;
  }
  return a1;
}

void Alembic::Ogawa::v12::OData::~OData(Alembic::Ogawa::v12::OData *this)
{
}

{
  sub_216817474((void **)this, 0);
}

uint64_t **Alembic::Ogawa::v12::OData::rewrite(uint64_t **this, uint64_t a2, void *a3, uint64_t a4)
{
  if (a2)
  {
    long long v4 = this;
    long long v5 = (uint64_t ***)*this;
    this = (uint64_t **)**this;
    if (this)
    {
      BOOL v7 = v5[3];
      if (v7) {
        BOOL v8 = a4 + a2 > (unint64_t)v7;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        Alembic::Ogawa::v12::OStream::seek(this, (uint64_t)v5[2] + a4 + 8);
        uint64_t v10 = (void *)**v4;
        return (uint64_t **)Alembic::Ogawa::v12::OStream::write(v10, a3, a2);
      }
    }
  }
  return this;
}

uint64_t Alembic::Ogawa::v12::OData::getSize(Alembic::Ogawa::v12::OData *this)
{
  return *(void *)(*(void *)this + 24);
}

uint64_t Alembic::Ogawa::v12::OData::getPos(Alembic::Ogawa::v12::OData *this)
{
  return *(void *)(*(void *)this + 16);
}

void *Alembic::Ogawa::v12::OGroup::OGroup(void *a1, void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  BOOL v6 = operator new(0x48uLL);
  a1[2] = v6;
  *(_OWORD *)BOOL v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  BOOL v7 = *(uint64_t **)(*a2 + 16);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 1);
    *(void *)BOOL v6 = v9;
    *((void *)v6 + 1) = v8;
    if (v10) {
      sub_216784EC4(v10);
    }
  }
  else
  {
    *(void *)BOOL v6 = v9;
    *((void *)v6 + 1) = 0;
  }
  __int16 v11 = (uint64_t *)(a1[2] + 16);
  unint64_t v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v14 = *a2;
  ssize_t v15 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = a3;
  sub_216819744(v11, (uint64_t)&v14);
  if (v15) {
    sub_216784EC4(v15);
  }
  *(void *)(a1[2] + 64) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_216819714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  sub_21681AA2C(v12, 0);
  uint64_t v14 = *(std::__shared_weak_count **)(v11 + 8);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(a1);
}

void **sub_216819744(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    _DWORD v16[4] = result;
    uint64_t v13 = (char *)sub_216782ED8((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    void v16[2] = v14 + 24;
    sub_21681AAC4(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = sub_2167B05F4(v16);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_216819858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167B05F4((void **)va);
  _Unwind_Resume(a1);
}

void *Alembic::Ogawa::v12::OGroup::OGroup(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  long long v4 = operator new(0x48uLL);
  a1[2] = v4;
  *(_OWORD *)long long v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 1);
    *(void *)long long v4 = v6;
    *((void *)v4 + 1) = v5;
    if (v7) {
      sub_216784EC4(v7);
    }
  }
  else
  {
    *(void *)long long v4 = v6;
    *((void *)v4 + 1) = 0;
  }
  uint64_t v8 = (uint64_t *)(a1[2] + 16);
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_216819744(v8, (uint64_t)&v10);
  if (v11) {
    sub_216784EC4(v11);
  }
  *(void *)(a1[2] + 64) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_216819928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  sub_21681AA2C(v12, 0);
  uint64_t v14 = *(std::__shared_weak_count **)(v11 + 8);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OGroup::~OGroup(Alembic::Ogawa::v12::OGroup *this)
{
  Alembic::Ogawa::v12::OGroup::freeze(this);
  sub_21681AA2C((uint64_t *)this + 2, 0);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void Alembic::Ogawa::v12::OGroup::freeze(Alembic::Ogawa::v12::OGroup *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 2);
  if (v1[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v1[5] == v1[6])
    {
      v1[8] = 0;
    }
    else
    {
      uint64_t v3 = Alembic::Ogawa::v12::OStream::getAndSeekEndPos((Alembic::Ogawa::v12::OStream *)*v1);
      uint64_t v4 = *((void *)this + 2);
      *(void *)(v4 + 64) = v3;
      uint64_t v8 = (uint64_t)(*(void *)(v4 + 48) - *(void *)(v4 + 40)) >> 3;
      Alembic::Ogawa::v12::OStream::write(*(void **)v4, &v8, 8);
      Alembic::Ogawa::v12::OStream::write(**((void ***)this + 2), *(const void **)(*((void *)this + 2) + 40), 8 * v8);
      uint64_t v1 = (uint64_t *)*((void *)this + 2);
    }
    for (uint64_t i = (void *)v1[2]; i != (void *)v1[3]; i += 3)
    {
      if (*i || i[2])
      {
        uint64_t v6 = *(void *)(*i + 16);
        uint64_t v7 = *(void *)(v6 + 64);
        if (v7 != 0x7FFFFFFFFFFFFFFFLL)
        {
          Alembic::Ogawa::v12::OStream::seek((void *)*v1, v7 + 8 * i[2] + 8);
          Alembic::Ogawa::v12::OStream::write(**((void ***)this + 2), (const void *)(*((void *)this + 2) + 64), 8);
          uint64_t v1 = (uint64_t *)*((void *)this + 2);
          uint64_t v6 = *(void *)(*i + 16);
        }
        *(void *)(*(void *)(v6 + 40) + 8 * i[2]) = v1[8];
      }
      else
      {
        Alembic::Ogawa::v12::OStream::seek((void *)*v1, 8);
        Alembic::Ogawa::v12::OStream::write(**((void ***)this + 2), (const void *)(*((void *)this + 2) + 64), 8);
        uint64_t v1 = (uint64_t *)*((void *)this + 2);
      }
    }
    sub_2167AFFE8(v1 + 2);
  }
}

void Alembic::Ogawa::v12::OGroup::addGroup(Alembic::Ogawa::v12::OGroup *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v5 = v3[7];
    uint64_t v6 = (char *)v3[6];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (char *)v3[5];
      uint64_t v9 = (v6 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v10 = v5 - (void)v8;
      unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 2;
      if (v11 <= v9 + 1) {
        unint64_t v11 = v9 + 1;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12)
      {
        uint64_t v13 = (char *)sub_21677CB28((uint64_t)(v3 + 7), v12);
        uint64_t v8 = (char *)v3[5];
        uint64_t v6 = (char *)v3[6];
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = 0;
      uint64_t v7 = v14 + 8;
      while (v6 != v8)
      {
        uint64_t v16 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v16;
        v14 -= 8;
      }
      v3[5] = v14;
      v3[6] = v7;
      v3[7] = v15;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *(void *)uint64_t v6 = 0;
      uint64_t v7 = v6 + 8;
    }
    v3[6] = v7;
    int v17 = operator new(0x18uLL);
    sub_216784F38(&v18, this);
    Alembic::Ogawa::v12::OGroup::OGroup(v17, &v18, ((uint64_t)(*(void *)(*((void *)this + 2) + 48) - *(void *)(*((void *)this + 2) + 40)) >> 3) - 1);
    sub_21681905C(a2, v17);
    if (v19) {
      sub_216784EC4(v19);
    }
  }
}

void sub_216819C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_216784EC4(v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL Alembic::Ogawa::v12::OGroup::isFrozen(Alembic::Ogawa::v12::OGroup *this)
{
  return *(void *)(*((void *)this + 2) + 64) != 0x7FFFFFFFFFFFFFFFLL;
}

void Alembic::Ogawa::v12::OGroup::createData(Alembic::Ogawa::v12::OGroup *this@<X0>, const void *a2@<X2>, uint64_t a3@<X1>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v5 = *((void *)this + 2);
  if (*(void *)(v5 + 64) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3)
    {
      uint64_t v9 = Alembic::Ogawa::v12::OStream::getAndSeekEndPos(*(Alembic::Ogawa::v12::OStream **)v5);
      uint64_t v30 = a3;
      Alembic::Ogawa::v12::OStream::write(**((void ***)this + 2), &v30, 8);
      Alembic::Ogawa::v12::OStream::write(**((void ***)this + 2), a2, a3);
      uint64_t v10 = operator new(8uLL);
      uint64_t v11 = (uint64_t)v10;
      unint64_t v12 = (uint64_t *)*((void *)this + 2);
      uint64_t v14 = *v12;
      uint64_t v13 = (std::__shared_weak_count *)v12[1];
      uint64_t v28 = v14;
      unint64_t v29 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Alembic::Ogawa::v12::OData::OData(v10, &v28, v9, a3);
      sub_216819EE0(a4, v11);
      if (v29) {
        sub_216784EC4(v29);
      }
    }
    else
    {
      unint64_t v15 = *(void *)(v5 + 56);
      uint64_t v16 = *(char **)(v5 + 48);
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = *(char **)(v5 + 40);
        uint64_t v19 = (v16 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          sub_21677CB10();
        }
        unint64_t v20 = v15 - (void)v18;
        unint64_t v21 = (uint64_t)(v15 - (void)v18) >> 2;
        if (v21 <= v19 + 1) {
          unint64_t v21 = v19 + 1;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          int v23 = (char *)sub_21677CB28(v5 + 56, v22);
          uint64_t v18 = *(char **)(v5 + 40);
          uint64_t v16 = *(char **)(v5 + 48);
        }
        else
        {
          int v23 = 0;
        }
        uint64_t v24 = &v23[8 * v19];
        uint64_t v25 = &v23[8 * v22];
        *(void *)uint64_t v24 = 0x8000000000000000;
        int v17 = v24 + 8;
        while (v16 != v18)
        {
          uint64_t v26 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v24 - 1) = v26;
          v24 -= 8;
        }
        *(void *)(v5 + 4sub_216817474((void **)this, 0) = v24;
        *(void *)(v5 + 48) = v17;
        *(void *)(v5 + 56) = v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)uint64_t v16 = 0x8000000000000000;
        int v17 = v16 + 8;
      }
      *(void *)(v5 + 48) = v17;
      uint64_t v27 = (Alembic::Ogawa::v12::OData *)operator new(8uLL);
      Alembic::Ogawa::v12::OData::OData(v27);
      sub_216819EE0(a4, (uint64_t)v27);
    }
  }
}

void sub_216819E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  operator delete(v12);
  uint64_t v14 = *(std::__shared_weak_count **)(v11 + 8);
  if (v14) {
    sub_216784EC4(v14);
  }
  _Unwind_Resume(a1);
}

void sub_216819EE0(void *a1, uint64_t a2)
{
  sub_21678A67C(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void Alembic::Ogawa::v12::OGroup::addData(Alembic::Ogawa::v12::OGroup *this@<X0>, const void *a2@<X2>, uint64_t a3@<X1>, Alembic::Ogawa::v12::OData **a4@<X8>)
{
  Alembic::Ogawa::v12::OGroup::createData(this, a2, a3, a4);
  if (*a4)
  {
    uint64_t v6 = (void *)*((void *)this + 2);
    uint64_t Pos = Alembic::Ogawa::v12::OData::getPos(*a4);
    unint64_t v8 = v6[7];
    unint64_t v9 = Pos | 0x8000000000000000;
    uint64_t v10 = (unint64_t *)v6[6];
    if ((unint64_t)v10 >= v8)
    {
      unint64_t v12 = (unint64_t *)v6[5];
      uint64_t v13 = v10 - v12;
      if ((unint64_t)(v13 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v14 = v8 - (void)v12;
      unint64_t v15 = (uint64_t)(v8 - (void)v12) >> 2;
      if (v15 <= v13 + 1) {
        unint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        int v17 = (char *)sub_21677CB28((uint64_t)(v6 + 7), v16);
        unint64_t v12 = (unint64_t *)v6[5];
        uint64_t v10 = (unint64_t *)v6[6];
      }
      else
      {
        int v17 = 0;
      }
      uint64_t v18 = (unint64_t *)&v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      *uint64_t v18 = v9;
      uint64_t v11 = v18 + 1;
      while (v10 != v12)
      {
        unint64_t v20 = *--v10;
        *--uint64_t v18 = v20;
      }
      v6[5] = v18;
      v6[6] = v11;
      v6[7] = v19;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *uint64_t v10 = v9;
      uint64_t v11 = v10 + 1;
    }
    v6[6] = v11;
  }
}

void sub_21681A028(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::Ogawa::v12::OGroup::createData(Alembic::Ogawa::v12::OGroup *this@<X0>, const unint64_t *a2@<X2>, const void **a3@<X3>, uint64_t a4@<X1>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  uint64_t v6 = *((void *)this + 2);
  if (*(void *)(v6 + 64) != 0x7FFFFFFFFFFFFFFFLL) {
    return;
  }
  uint64_t v7 = a4;
  if (a4)
  {
    unint64_t v9 = a2;
    uint64_t v11 = 0;
    unint64_t v12 = a2;
    uint64_t v13 = a4;
    do
    {
      uint64_t v14 = *v12++;
      v11 += v14;
      --v13;
    }
    while (v13);
    uint64_t v38 = v11;
    if (v11)
    {
      uint64_t v15 = Alembic::Ogawa::v12::OStream::getAndSeekEndPos(*(Alembic::Ogawa::v12::OStream **)v6);
      Alembic::Ogawa::v12::OStream::write(**((void ***)this + 2), &v38, 8);
      for (; v7; --v7)
      {
        uint64_t v17 = *v9++;
        uint64_t v16 = v17;
        if (v17) {
          Alembic::Ogawa::v12::OStream::write(**((void ***)this + 2), *a3, v16);
        }
        ++a3;
      }
      uint64_t v18 = operator new(8uLL);
      uint64_t v19 = (uint64_t)v18;
      unint64_t v20 = (uint64_t *)*((void *)this + 2);
      uint64_t v22 = *v20;
      unint64_t v21 = (std::__shared_weak_count *)v20[1];
      uint64_t v36 = v22;
      std::string::size_type v37 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Alembic::Ogawa::v12::OData::OData(v18, &v36, v15, v38);
      sub_216819EE0(a5, v19);
      if (v37) {
        sub_216784EC4(v37);
      }
      return;
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  unint64_t v23 = *(void *)(v6 + 56);
  uint64_t v24 = *(char **)(v6 + 48);
  if ((unint64_t)v24 >= v23)
  {
    uint64_t v26 = *(char **)(v6 + 40);
    uint64_t v27 = (v24 - v26) >> 3;
    if ((unint64_t)(v27 + 1) >> 61) {
      sub_21677CB10();
    }
    unint64_t v28 = v23 - (void)v26;
    unint64_t v29 = (uint64_t)(v23 - (void)v26) >> 2;
    if (v29 <= v27 + 1) {
      unint64_t v29 = v27 + 1;
    }
    if (v28 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30)
    {
      uint64_t v31 = (char *)sub_21677CB28(v6 + 56, v30);
      uint64_t v26 = *(char **)(v6 + 40);
      uint64_t v24 = *(char **)(v6 + 48);
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v32 = &v31[8 * v27];
    std::string v33 = &v31[8 * v30];
    *(void *)uint64_t v32 = 0x8000000000000000;
    uint64_t v25 = v32 + 8;
    while (v24 != v26)
    {
      uint64_t v34 = *((void *)v24 - 1);
      v24 -= 8;
      *((void *)v32 - 1) = v34;
      v32 -= 8;
    }
    *(void *)(v6 + 4sub_216817474((void **)this, 0) = v32;
    *(void *)(v6 + 48) = v25;
    *(void *)(v6 + 56) = v33;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)uint64_t v24 = 0x8000000000000000;
    uint64_t v25 = v24 + 8;
  }
  *(void *)(v6 + 48) = v25;
  uint64_t v35 = (Alembic::Ogawa::v12::OData *)operator new(8uLL);
  Alembic::Ogawa::v12::OData::OData(v35);
  sub_216819EE0(a5, (uint64_t)v35);
}

void sub_21681A254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  operator delete(v12);
  uint64_t v14 = *(std::__shared_weak_count **)(v11 + 8);
  if (v14) {
    sub_216784EC4(v14);
  }
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OGroup::addData(Alembic::Ogawa::v12::OGroup *this@<X0>, const unint64_t *a2@<X2>, const void **a3@<X3>, uint64_t a4@<X1>, Alembic::Ogawa::v12::OData **a5@<X8>)
{
  Alembic::Ogawa::v12::OGroup::createData(this, a2, a3, a4, a5);
  if (*a5)
  {
    uint64_t v7 = (void *)*((void *)this + 2);
    uint64_t Pos = Alembic::Ogawa::v12::OData::getPos(*a5);
    unint64_t v9 = v7[7];
    unint64_t v10 = Pos | 0x8000000000000000;
    uint64_t v11 = (unint64_t *)v7[6];
    if ((unint64_t)v11 >= v9)
    {
      uint64_t v13 = (unint64_t *)v7[5];
      uint64_t v14 = v11 - v13;
      if ((unint64_t)(v14 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v15 = v9 - (void)v13;
      unint64_t v16 = (uint64_t)(v9 - (void)v13) >> 2;
      if (v16 <= v14 + 1) {
        unint64_t v16 = v14 + 1;
      }
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17)
      {
        uint64_t v18 = (char *)sub_21677CB28((uint64_t)(v7 + 7), v17);
        uint64_t v13 = (unint64_t *)v7[5];
        uint64_t v11 = (unint64_t *)v7[6];
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v19 = (unint64_t *)&v18[8 * v14];
      unint64_t v20 = &v18[8 * v17];
      *uint64_t v19 = v10;
      unint64_t v12 = v19 + 1;
      while (v11 != v13)
      {
        unint64_t v21 = *--v11;
        *--uint64_t v19 = v21;
      }
      void v7[5] = v19;
      v7[6] = v12;
      v7[7] = v20;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      unint64_t *v11 = v10;
      unint64_t v12 = v11 + 1;
    }
    v7[6] = v12;
  }
}

void sub_21681A39C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::Ogawa::v12::OGroup::addData(uint64_t a1, Alembic::Ogawa::v12::OData **a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t Pos = Alembic::Ogawa::v12::OData::getPos(*a2);
    unint64_t v4 = v2[7];
    unint64_t v5 = Pos | 0x8000000000000000;
    uint64_t v6 = (unint64_t *)v2[6];
    if ((unint64_t)v6 >= v4)
    {
      unint64_t v8 = (unint64_t *)v2[5];
      uint64_t v9 = v6 - v8;
      if ((unint64_t)(v9 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v10 = v4 - (void)v8;
      unint64_t v11 = (uint64_t)(v4 - (void)v8) >> 2;
      if (v11 <= v9 + 1) {
        unint64_t v11 = v9 + 1;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12)
      {
        uint64_t v13 = (char *)sub_21677CB28((uint64_t)(v2 + 7), v12);
        unint64_t v8 = (unint64_t *)v2[5];
        uint64_t v6 = (unint64_t *)v2[6];
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (unint64_t *)&v13[8 * v9];
      unint64_t v15 = &v13[8 * v12];
      unint64_t *v14 = v5;
      uint64_t v7 = v14 + 1;
      while (v6 != v8)
      {
        unint64_t v16 = *--v6;
        *--uint64_t v14 = v16;
      }
      v2[5] = v14;
      v2[6] = v7;
      v2[7] = v15;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v6 = v5;
      uint64_t v7 = v6 + 1;
    }
    v2[6] = v7;
  }
}

void Alembic::Ogawa::v12::OGroup::addGroup(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1[2];
  if (v2[8] != 0x7FFFFFFFFFFFFFFFLL) {
    return;
  }
  uint64_t v4 = *(void *)(*(void *)a2 + 16);
  uint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = v2[7];
  uint64_t v7 = (void **)(v2 + 5);
  unint64_t v8 = (char *)v2[6];
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if ((unint64_t)v8 >= v6)
    {
      uint64_t v19 = (char *)*v7;
      uint64_t v20 = (v8 - (unsigned char *)*v7) >> 3;
      if ((unint64_t)(v20 + 1) >> 61) {
        goto LABEL_41;
      }
      unint64_t v21 = v6 - (void)v19;
      unint64_t v22 = (uint64_t)(v6 - (void)v19) >> 2;
      if (v22 <= v20 + 1) {
        unint64_t v22 = v20 + 1;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23)
      {
        uint64_t v24 = (char *)sub_21677CB28((uint64_t)(v2 + 7), v23);
        uint64_t v19 = (char *)v2[5];
        unint64_t v8 = (char *)v2[6];
        uint64_t v5 = *(void *)(v4 + 64);
      }
      else
      {
        uint64_t v24 = 0;
      }
      unint64_t v30 = &v24[8 * v20];
      uint64_t v31 = &v24[8 * v23];
      *(void *)unint64_t v30 = v5;
      unint64_t v11 = v30 + 8;
      while (v8 != v19)
      {
        uint64_t v32 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v30 - 1) = v32;
        v30 -= 8;
      }
      v2[5] = v30;
      v2[6] = v11;
      v2[7] = v31;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)unint64_t v8 = v5;
      unint64_t v11 = v8 + 8;
    }
    v2[6] = v11;
    return;
  }
  if ((unint64_t)v8 >= v6)
  {
    unint64_t v12 = (char *)*v7;
    uint64_t v13 = (v8 - (unsigned char *)*v7) >> 3;
    unint64_t v14 = v13 + 1;
    if (!((unint64_t)(v13 + 1) >> 61))
    {
      unint64_t v15 = v6 - (void)v12;
      unint64_t v16 = (uint64_t)(v6 - (void)v12) >> 2;
      if (v16 > v14) {
        unint64_t v14 = v16;
      }
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      if (v17)
      {
        uint64_t v18 = (char *)sub_21677CB28((uint64_t)(v2 + 7), v17);
        unint64_t v12 = (char *)v2[5];
        unint64_t v8 = (char *)v2[6];
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v25 = &v18[8 * v13];
      uint64_t v26 = &v18[8 * v17];
      *(void *)uint64_t v25 = 0;
      unint64_t v10 = v25 + 8;
      while (v8 != v12)
      {
        uint64_t v27 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v25 - 1) = v27;
        v25 -= 8;
      }
      v2[5] = v25;
      v2[6] = v10;
      v2[7] = v26;
      if (v12) {
        operator delete(v12);
      }
      goto LABEL_29;
    }
LABEL_41:
    sub_21677CB10();
  }
  *(void *)unint64_t v8 = 0;
  unint64_t v10 = v8 + 8;
LABEL_29:
  v2[6] = v10;
  unint64_t v28 = (uint64_t *)(*(void *)(*(void *)a2 + 16) + 16);
  sub_216784F38(&v33, a1);
  uint64_t v29 = ((uint64_t)(*(void *)(a1[2] + 48) - *(void *)(a1[2] + 40)) >> 3) - 1;
  long long v34 = v33;
  long long v33 = 0uLL;
  uint64_t v35 = v29;
  sub_216819744(v28, (uint64_t)&v34);
  if (*((void *)&v34 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v34 + 1));
  }
  if (*((void *)&v33 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v33 + 1));
  }
}

void sub_21681A6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void Alembic::Ogawa::v12::OGroup::addEmptyGroup(Alembic::Ogawa::v12::OGroup *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  if (v1[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v2 = v1[7];
    uint64_t v3 = (char *)v1[6];
    if ((unint64_t)v3 >= v2)
    {
      uint64_t v5 = (char *)v1[5];
      uint64_t v6 = (v3 - v5) >> 3;
      if ((unint64_t)(v6 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v7 = v2 - (void)v5;
      unint64_t v8 = (uint64_t)(v2 - (void)v5) >> 2;
      if (v8 <= v6 + 1) {
        unint64_t v8 = v6 + 1;
      }
      if (v7 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9)
      {
        unint64_t v10 = (char *)sub_21677CB28((uint64_t)(v1 + 7), v9);
        uint64_t v5 = (char *)v1[5];
        uint64_t v3 = (char *)v1[6];
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v11 = &v10[8 * v6];
      unint64_t v12 = &v10[8 * v9];
      *(void *)unint64_t v11 = 0;
      uint64_t v4 = v11 + 8;
      while (v3 != v5)
      {
        uint64_t v13 = *((void *)v3 - 1);
        v3 -= 8;
        *((void *)v11 - 1) = v13;
        v11 -= 8;
      }
      v1[5] = v11;
      v1[6] = v4;
      v1[7] = v12;
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)uint64_t v3 = 0;
      uint64_t v4 = v3 + 8;
    }
    v1[6] = v4;
  }
}

void Alembic::Ogawa::v12::OGroup::addEmptyData(Alembic::Ogawa::v12::OGroup *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  if (v1[8] == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v2 = v1[7];
    uint64_t v3 = (char *)v1[6];
    if ((unint64_t)v3 >= v2)
    {
      uint64_t v5 = (char *)v1[5];
      uint64_t v6 = (v3 - v5) >> 3;
      if ((unint64_t)(v6 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v7 = v2 - (void)v5;
      unint64_t v8 = (uint64_t)(v2 - (void)v5) >> 2;
      if (v8 <= v6 + 1) {
        unint64_t v8 = v6 + 1;
      }
      if (v7 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9)
      {
        unint64_t v10 = (char *)sub_21677CB28((uint64_t)(v1 + 7), v9);
        uint64_t v5 = (char *)v1[5];
        uint64_t v3 = (char *)v1[6];
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v11 = &v10[8 * v6];
      unint64_t v12 = &v10[8 * v9];
      *(void *)unint64_t v11 = 0x8000000000000000;
      uint64_t v4 = v11 + 8;
      while (v3 != v5)
      {
        uint64_t v13 = *((void *)v3 - 1);
        v3 -= 8;
        *((void *)v11 - 1) = v13;
        v11 -= 8;
      }
      v1[5] = v11;
      v1[6] = v4;
      v1[7] = v12;
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)uint64_t v3 = 0x8000000000000000;
      uint64_t v4 = v3 + 8;
    }
    v1[6] = v4;
  }
}

uint64_t Alembic::Ogawa::v12::OGroup::getNumChildren(Alembic::Ogawa::v12::OGroup *this)
{
  return (uint64_t)(*(void *)(*((void *)this + 2) + 48) - *(void *)(*((void *)this + 2) + 40)) >> 3;
}

BOOL Alembic::Ogawa::v12::OGroup::isChildGroup(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 40);
  return a2 < (*(void *)(*((void *)this + 2) + 48) - v2) >> 3 && *(void *)(v2 + 8 * a2) >= 0;
}

uint64_t Alembic::Ogawa::v12::OGroup::isChildData(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 40);
  if (a2 >= (*(void *)(*((void *)this + 2) + 48) - v2) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * a2) >> 63;
  }
}

BOOL Alembic::Ogawa::v12::OGroup::isChildEmptyGroup(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 40);
  return a2 < (*(void *)(*((void *)this + 2) + 48) - v2) >> 3 && *(void *)(v2 + 8 * a2) == 0;
}

BOOL Alembic::Ogawa::v12::OGroup::isChildEmptyData(Alembic::Ogawa::v12::OGroup *this, unint64_t a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 40);
  return a2 < (*(void *)(*((void *)this + 2) + 48) - v2) >> 3 && *(void *)(v2 + 8 * a2) == 0x8000000000000000;
}

uint64_t Alembic::Ogawa::v12::OGroup::replaceData(uint64_t result, unint64_t a2, Alembic::Ogawa::v12::OData **a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 16) + 40);
  if (a2 < (*(void *)(*(void *)(result + 16) + 48) - v3) >> 3
    && (*(void *)(v3 + 8 * a2) & 0x8000000000000000) != 0)
  {
    uint64_t v5 = result;
    uint64_t result = Alembic::Ogawa::v12::OData::getPos(*a3);
    unint64_t v6 = result | 0x8000000000000000;
    unint64_t v9 = result | 0x8000000000000000;
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = *(void *)(v7 + 64);
    if (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      Alembic::Ogawa::v12::OStream::seek(*(void **)v7, v8 + 8 * a2 + 8);
      uint64_t result = (uint64_t)Alembic::Ogawa::v12::OStream::write(**(void ***)(v5 + 16), &v9, 8);
      unint64_t v6 = v9;
      uint64_t v7 = *(void *)(v5 + 16);
    }
    *(void *)(*(void *)(v7 + 40) + 8 * a2) = v6;
  }
  return result;
}

void sub_21681AA2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_21681AA6C(v3);
    operator delete(v4);
  }
}

uint64_t sub_21681AA6C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  uint64_t v5 = (void **)(a1 + 16);
  sub_2167AFF94(&v5);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  return a1;
}

uint64_t sub_21681AAC4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21681AB3C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21681AB3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v8 + 16) = a3[2];
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21681ABD8((uint64_t)v12);
  return v10;
}

uint64_t sub_21681ABD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2167B05B0(a1);
  }
  return a1;
}

uint64_t **Alembic::Ogawa::v12::OStream::OStream(uint64_t **a1, long long *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x78uLL);
  sub_21681B350((uint64_t)v4, a2);
  *a1 = v4;
  Alembic::Ogawa::v12::OStream::init(a1);
  return a1;
}

void sub_21681AC60(_Unwind_Exception *a1)
{
  sub_21681B850(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t Alembic::Ogawa::v12::OStream::init(uint64_t **this)
{
  uint64_t result = **this;
  if (result)
  {
    std::ostream::write();
    uint64_t result = std::ostream::flush();
    uint64_t v3 = *this;
    unint64_t v4 = (*this)[6];
    unint64_t v5 = (*this)[5] + 16;
    (*this)[5] = v5;
    if (v5 > v4) {
      v3[6] = v5;
    }
  }
  return result;
}

uint64_t **Alembic::Ogawa::v12::OStream::OStream(uint64_t **a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)operator new(0x78uLL);
  sub_21681B688((uint64_t)v4, a2);
  *a1 = v4;
  Alembic::Ogawa::v12::OStream::init(a1);
  return a1;
}

void sub_21681AD80(_Unwind_Exception *a1)
{
  sub_21681B850(v1, 0);
  _Unwind_Resume(a1);
}

void Alembic::Ogawa::v12::OStream::~OStream(Alembic::Ogawa::v12::OStream *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = **(void ***)this;
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)this + 32);
    MEMORY[0x21D447A00](v6, v2);
    unint64_t v4 = (char *)v2 + *(void *)(*v2 - 24);
    if ((v4[32] & 5) == 0)
    {
      uint64_t v5 = *((void *)v4 + 5);
      long long v15 = 0u;
      long long v14 = 0u;
      long long v13 = 0u;
      long long v12 = 0u;
      long long v11 = 0u;
      long long v10 = 0u;
      long long v9 = 0u;
      long long v8 = 0u;
      uint64_t v16 = v3 + 5;
      (*(void (**)(void *__return_ptr))(*(void *)v5 + 40))(v7);
      if (v7[16] == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
      }
    }
    MEMORY[0x21D447A10](v6);
    std::ostream::write();
    std::ostream::flush();
  }
  sub_21681B850((uint64_t *)this, 0);
}

void sub_21681AF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    MEMORY[0x21D447A10](&a10);
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL Alembic::Ogawa::v12::OStream::isValid(Alembic::Ogawa::v12::OStream *this)
{
  return **(void **)this != 0;
}

uint64_t Alembic::Ogawa::v12::OStream::getAndSeekEndPos(Alembic::Ogawa::v12::OStream *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)this;
  if (!**(void **)this) {
    return 0;
  }
  uint64_t v3 = (pthread_mutex_t *)(v1 + 7);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 7));
  unint64_t v4 = *(void **)this;
  uint64_t v5 = *(void *)(*(void *)this + 48);
  v4[5] = v5;
  uint64_t v6 = (void *)*v4;
  uint64_t v7 = v4[4];
  MEMORY[0x21D447A00](v12, *v4);
  long long v8 = (char *)v6 + *(void *)(*v6 - 24);
  if ((v8[32] & 5) == 0)
  {
    uint64_t v9 = *((void *)v8 + 5);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v22 = v7 + v5;
    (*(void (**)(void *__return_ptr))(*(void *)v9 + 40))(v13);
    if (v13[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 32) | 4);
    }
  }
  MEMORY[0x21D447A10](v12);
  uint64_t v10 = *(void *)(*(void *)this + 40);
  pthread_mutex_unlock(v3);
  return v10;
}

void sub_21681B0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x21D447A10](va);
  pthread_mutex_unlock(v2);
  _Unwind_Resume(a1);
}

void *Alembic::Ogawa::v12::OStream::seek(void *this, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*this;
  if (*(void *)*this)
  {
    unint64_t v4 = (void **)this;
    uint64_t v5 = (pthread_mutex_t *)(v2 + 7);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 7));
    uint64_t v6 = (void *)**v4;
    uint64_t v7 = (*v4)[4];
    MEMORY[0x21D447A00](v10, v6);
    long long v8 = (char *)v6 + *(void *)(*v6 - 24);
    if ((v8[32] & 5) == 0)
    {
      uint64_t v9 = *((void *)v8 + 5);
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v20 = v7 + a2;
      (*(void (**)(void *__return_ptr))(*(void *)v9 + 40))(v11);
      if (v11[16] == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 32) | 4);
      }
    }
    MEMORY[0x21D447A10](v10);
    (*v4)[5] = a2;
    return (void *)pthread_mutex_unlock(v5);
  }
  return this;
}

void sub_21681B270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x21D447A10](va);
  pthread_mutex_unlock(v2);
  _Unwind_Resume(a1);
}

void *Alembic::Ogawa::v12::OStream::write(void *this, const void *a2, uint64_t a3)
{
  uint64_t v3 = (void *)*this;
  if (*(void *)*this)
  {
    uint64_t v5 = (uint64_t)this;
    uint64_t v6 = (pthread_mutex_t *)(v3 + 7);
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 7));
    std::ostream::write();
    std::ostream::flush();
    uint64_t v7 = *(void *)v5;
    unint64_t v8 = *(void *)(*(void *)v5 + 48);
    unint64_t v9 = *(void *)(*(void *)v5 + 40) + a3;
    *(void *)(*(void *)v5 + 4sub_216817474((void **)this, 0) = v9;
    if (v9 > v8) {
      *(void *)(v7 + 48) = v9;
    }
    return (void *)pthread_mutex_unlock(v6);
  }
  return this;
}

void sub_21681B338(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21681B350(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_216817474((void **)this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  unint64_t v4 = (uint64_t *)operator new(0x238uLL);
  sub_21681B4C8(v4);
  if (v4[16])
  {
    *(void *)a1 = v4;
    uint64_t v5 = (std::ios_base *)((char *)v4 + *(void *)(*v4 - 24));
    v5->__exceptions_ = 5;
    std::ios_base::clear(v5, v5->__rdstate_);
  }
  else
  {
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)), *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 32) | 4);
    }
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
  }
  return a1;
}

void sub_21681B488(_Unwind_Exception *a1)
{
  operator delete(v4);
  pthread_mutex_destroy(v3);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21681B4C8(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  long long v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x21D447900](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_21681B650(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x21D447E60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21681B688(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_216817474((void **)this, 0) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  if (*(void *)a1)
  {
    long long v3 = (std::ios_base *)(*(void *)a1 + *(void *)(**(void **)a1 - 24));
    v3->__exceptions_ = 5;
    std::ios_base::clear(v3, v3->__rdstate_);
    uint64_t v4 = *(void *)a1 + *(void *)(**(void **)a1 - 24);
    if ((*(unsigned char *)(v4 + 32) & 5) != 0)
    {
      *(void *)(a1 + 32) = -1;
    }
    else
    {
      (*(void (**)(void *__return_ptr))(**(void **)(v4 + 40) + 32))(v8);
      uint64_t v5 = v9;
      *(void *)(a1 + 32) = v9;
      if (v5 != -1) {
        return a1;
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Illegal start of Ogawa stream");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_21681B7FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  pthread_mutex_destroy(v2);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v4);
  }
  _Unwind_Resume(a1);
}

void sub_21681B850(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_21681B890(v3);
    operator delete(v4);
  }
}

uint64_t sub_21681B890(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_10;
    }
  }
  else if (!*(unsigned char *)(a1 + 31))
  {
    goto LABEL_10;
  }
  uint64_t v2 = *(const void **)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = (char *)__dynamic_cast(v2, MEMORY[0x263F8C1B0], MEMORY[0x263F8C1B8], 0);
    if (v3)
    {
      uint64_t v4 = v3;
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)&v4[*(void *)(*(void *)v4 - 24)], *(_DWORD *)&v4[*(void *)(*(void *)v4 - 24) + 32] | 4);
      }
      (*(void (**)(char *))(*(void *)v4 + 8))(v4);
    }
  }
LABEL_10:
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_21681B998(float a1, uint64_t a2, int a3)
{
  if (a3 <= 2 && a1 <= 0.0) {
    return (1 << a3);
  }
  else {
    return 8;
  }
}

uint64_t OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule(OpenSubdiv::__aapl__::Sdc::Crease *this, float a2, int a3, float *a4)
{
  if (a2 > 0.0) {
    return 8;
  }
  if (a3 < 1) {
    return 1;
  }
  unsigned int v5 = 0;
  uint64_t v6 = a3;
  do
  {
    float v7 = *a4++;
    if (v7 > 0.0) {
      ++v5;
    }
    --v6;
  }
  while (v6);
  if (v5 <= 2) {
    return (1 << v5);
  }
  else {
    return 8;
  }
}

double OpenSubdiv::__aapl__::Sdc::Crease::ComputeFractionalWeightAtVertex(OpenSubdiv::__aapl__::Sdc::Crease *this, float a2, float a3, int a4, float *a5, const float *a6)
{
  int v6 = a2 > 0.0 && a3 <= 0.0;
  if (a2 <= 0.0 || a3 > 0.0) {
    a2 = 0.0;
  }
  if (a6 && *((unsigned char *)this + 2))
  {
    if (a4 >= 1)
    {
      uint64_t v7 = a4;
      do
      {
        if (*a5 > 0.0 && *a6 <= 0.0)
        {
          a2 = a2 + *a5;
          ++v6;
        }
        ++a6;
        ++a5;
        --v7;
      }
      while (v7);
    }
  }
  else if (a4 >= 1)
  {
    uint64_t v8 = a4;
    do
    {
      float v9 = *a5++;
      float v10 = v9;
      v6 += v9 > 0.0 && v9 <= 1.0;
      if (v9 <= 0.0 || v9 > 1.0) {
        float v10 = -0.0;
      }
      a2 = a2 + v10;
      --v8;
    }
    while (v8);
  }
  if (!v6) {
    return 0.0;
  }
  *(float *)&double result = a2 / (float)v6;
  if (*(float *)&result > 1.0) {
    *(float *)&double result = 1.0;
  }
  return result;
}

float sub_21681BAD8(uint64_t a1, int a2, float *a3, float a4)
{
  if (a2 >= 2 && *(unsigned char *)(a1 + 2))
  {
    float v4 = 0.0;
    if (a4 > 0.0)
    {
      float v4 = 10.0;
      if (a4 < 10.0)
      {
        int v5 = 0;
        uint64_t v6 = a2;
        float v7 = 0.0;
        do
        {
          float v8 = *a3++;
          float v9 = v8;
          int v10 = v8 > 0.0 && v8 < 10.0;
          if (v8 <= 0.0 || v8 >= 10.0) {
            float v9 = -0.0;
          }
          float v7 = v7 + v9;
          v5 += v10;
          --v6;
        }
        while (v6);
        BOOL v11 = v5 != 0;
        int v12 = v5 - 1;
        if (v12 != 0 && v11) {
          a4 = (float)((float)((float)(v7 - a4) / (float)v12) * 0.25) + (float)(a4 * 0.75);
        }
        return fmaxf(a4 + -1.0, 0.0);
      }
    }
  }
  else
  {
    float v4 = 0.0;
    if (a4 > 0.0)
    {
      float v4 = 10.0;
      if (a4 < 10.0)
      {
        float v4 = 0.0;
        if (a4 > 1.0) {
          return a4 + -1.0;
        }
      }
    }
  }
  return v4;
}

uint64_t OpenSubdiv::__aapl__::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(uint64_t this, int a2, float *a3, float *a4)
{
  if (a2 > 1 && *(unsigned char *)(this + 2))
  {
    if (*(unsigned char *)(this + 2) == 1)
    {
      int v4 = 0;
      uint64_t v5 = a2;
      float v6 = 0.0;
      uint64_t v7 = a2;
      float v8 = a3;
      do
      {
        float v9 = *v8++;
        float v10 = v9;
        v4 += v9 > 0.0 && v9 < 10.0;
        if (v9 <= 0.0 || v9 >= 10.0) {
          float v10 = -0.0;
        }
        float v6 = v6 + v10;
        --v7;
      }
      while (v7);
      if (v4)
      {
        while (1)
        {
          float v11 = *a3;
          float v12 = 0.0;
          if (*a3 <= 0.0) {
            goto LABEL_16;
          }
          float v12 = 10.0;
          if (v11 >= 10.0) {
            goto LABEL_16;
          }
          if (v4 == 1) {
            break;
          }
          float v13 = (float)((float)((float)((float)(v6 - v11) / (float)(v4 - 1)) * 0.25) + (float)(v11 * 0.75)) + -1.0;
          float v12 = 0.0;
          if (v13 <= 0.0) {
            goto LABEL_16;
          }
LABEL_17:
          *a4++ = v13;
          ++a3;
          if (!--v5) {
            return this;
          }
        }
        float v12 = v11 + -1.0;
        if (v11 <= 1.0) {
          float v12 = 0.0;
        }
LABEL_16:
        float v13 = v12;
        goto LABEL_17;
      }
      do
      {
        int v14 = *(_DWORD *)a3++;
        *(_DWORD *)a4++ = v14;
        --v5;
      }
      while (v5);
    }
  }
  else if (a2 >= 1)
  {
    uint64_t v15 = a2;
    do
    {
      float v16 = *a3;
      float v17 = 0.0;
      if (*a3 > 0.0)
      {
        float v17 = 10.0;
        if (v16 < 10.0)
        {
          float v17 = 0.0;
          if (v16 > 1.0) {
            float v17 = v16 + -1.0;
          }
        }
      }
      *a4++ = v17;
      ++a3;
      --v15;
    }
    while (v15);
  }
  return this;
}

double sub_21681BD04()
{
  if (!qword_26798E160)
  {
    uint64_t v0 = (char *)operator new[](0x48uLL);
    qword_26798E160 = (uint64_t)v0;
    *(void *)uint64_t v0 = "bilinear";
    *(_OWORD *)(v0 + 8) = xmmword_21740B740;
    *((void *)v0 + 3) = "catmark";
    *((_OWORD *)v0 + 2) = xmmword_21740B750;
    *((void *)v0 + 6) = "loop";
    *(void *)&double result = 0x300000001;
    *(_OWORD *)(v0 + 56) = xmmword_21740B760;
  }
  return result;
}

uint64_t sub_21681BD80(unsigned int a1)
{
  sub_21681BD04();
  return *(unsigned int *)(v2 + 24 * a1 + 8);
}

uint64_t sub_21681BDB0(unsigned int a1)
{
  sub_21681BD04();
  return *(unsigned int *)(v2 + 24 * a1 + 12);
}

uint64_t sub_21681BDE0(unsigned int a1)
{
  sub_21681BD04();
  return *(unsigned int *)(v2 + 24 * a1 + 16);
}

uint64_t sub_21681BE10(unsigned int a1)
{
  sub_21681BD04();
  return *(unsigned int *)(v2 + 24 * a1 + 20);
}

double sub_21681BE40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = 1280;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 1sub_216817474((void **)this, 0) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_216817474((void **)this, 0) = 0u;
  return result;
}

void *sub_21681BE90(void *a1)
{
  uint64_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[21];
  if (v3)
  {
    a1[22] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[15];
  if (v5)
  {
    a1[16] = v5;
    operator delete(v5);
  }
  float v6 = (void *)a1[12];
  if (v6)
  {
    a1[13] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[9];
  if (v7)
  {
    a1[10] = v7;
    operator delete(v7);
  }
  float v8 = (void *)a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  float v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_21681BF38(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 8) = *a2;
  return result;
}

void sub_21681BF44(void *a1)
{
  sub_21681C000((uint64_t)(a1 + 3), (int)((uint64_t)(*(void *)(*a1 + 56) - *(void *)(*a1 + 48)) >> 2));
  uint64_t v2 = a1[6];
  char v8 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = *(int *)(*a1 + 4);
  unint64_t v5 = a1[7] - v2;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      a1[7] = v2 + v4;
    }
  }
  else
  {
    sub_21681D26C(a1 + 6, v4 - v5, &v8);
    uint64_t v3 = *a1;
  }
  sub_21681C030((uint64_t)(a1 + 9), *(int *)(v3 + 8));
  sub_21681C000((uint64_t)(a1 + 12), *(int *)(*a1 + 8));
  unint64_t v6 = (int)((uint64_t)(*(void *)(*a1 + 296) - *(void *)(*a1 + 288)) >> 2);
  __int16 v7 = 0;
  sub_21681C060((uint64_t)(a1 + 15), v6, &v7);
}

void sub_21681C000(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_21681D03C((char **)a1, a2 - v2);
  }
}

void sub_21681C030(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_21681D158((char **)a1, a2 - v2);
  }
}

void sub_21681C060(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_21681D398((void **)a1, a2 - v3, a3);
  }
}

void sub_21681C090(uint64_t a1, int a2)
{
  unint64_t v3 = a2;
  sub_21681C000(a1 + 144, a2);
  char v6 = 0;
  uint64_t v4 = *(void *)(a1 + 168);
  unint64_t v5 = *(void *)(a1 + 176) - v4;
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *(void *)(a1 + 176) = v4 + v3;
    }
  }
  else
  {
    sub_21681D26C((void *)(a1 + 168), v3 - v5, &v6);
  }
  if (!*(unsigned char *)(a1 + 13)) {
    sub_21681C10C(a1 + 192, v3);
  }
}

void sub_21681C10C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_21681D4B4((void **)a1, a2 - v2);
  }
}

uint64_t sub_21681C13C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void sub_21681C144(uint64_t a1, int a2)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 9);
  unsigned int v129 = v4 - 3;
  *(unsigned char *)(a1 + 12) = v4 == 5;
  int v5 = v4 & 0xFE;
  int v131 = v4;
  BOOL v7 = v3 != 2 && v4 != 0;
  BOOL v128 = v7;
  *(unsigned char *)(a1 + 13) = v5 == 4;
  *(unsigned char *)(a1 + 14) = (v4 & 0xFE) == 2;
  BOOL v8 = v5 == 4 || v4 == 3;
  uint64_t v9 = *(int *)(*(void *)a1 + 8);
  LOWORD(v138) = 0;
  sub_21681D5C8(v137, v9, &v138);
  unint64_t v10 = (int)((uint64_t)(*(void *)(*(void *)a1 + 296) - *(void *)(*(void *)a1 + 288)) >> 2);
  LOWORD(v138) = 0;
  uint64_t v130 = (void *)(a1 + 120);
  sub_21681C060(a1 + 120, v10, &v138);
  BOOL v127 = v8;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(unsigned int *)(*(void *)a1 + 20);
  uint64_t v153 = (__int32 *)&v156;
  int v154 = v12;
  int v155 = 16;
  uint64_t v157 = 0;
  if (v12 < 0x11)
  {
    float v13 = (__int32 *)v151;
    long long v147 = 0;
    __s = (__int32 *)v151;
    int v149 = v12;
    int v150 = 16;
    uint64_t v152 = 0;
    long long v132 = (__int16 *)v146;
    std::string __p = 0;
    uint64_t v143 = (__int16 *)v146;
    int v144 = v12;
    int v145 = 16;
    long long v138 = v141;
    int v139 = v12;
    int v140 = 16;
  }
  else
  {
    uint64_t v157 = (__int32 *)operator new(4 * v12);
    uint64_t v153 = v157;
    int v155 = v12;
    __s = (__int32 *)v151;
    int v149 = v12;
    int v150 = 16;
    uint64_t v152 = 0;
    uint64_t v152 = operator new(4 * v12);
    long long v147 = 0;
    __s = (__int32 *)v152;
    int v150 = v12;
    uint64_t v143 = (__int16 *)v146;
    int v144 = v12;
    int v145 = 16;
    long long v147 = operator new(2 * v12);
    std::string __p = 0;
    uint64_t v143 = (__int16 *)v147;
    int v145 = v12;
    long long v138 = v141;
    int v139 = v12;
    int v140 = 16;
    std::string __p = operator new(10 * v12);
    long long v138 = __p;
    int v140 = v12;
    float v13 = __s;
    long long v132 = v143;
    uint64_t v11 = *(void *)a1;
  }
  if (*(int *)(v11 + 8) >= 1)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    while (1)
    {
      uint64_t v16 = (2 * v14) | 1;
      uint64_t v17 = *(void *)(v11 + 264);
      uint64_t v18 = *(unsigned int *)(v17 + 8 * v14);
      long long v19 = v153;
      if ((int)v18 >= 1)
      {
        uint64_t v20 = *(int *)(v17 + 4 * v16);
        uint64_t v21 = (int *)(*(void *)(v11 + 288) + 4 * v20);
        uint64_t v22 = (unsigned __int16 *)(*(void *)(v11 + 312) + 2 * v20);
        uint64_t v23 = *(void *)(v11 + 24);
        uint64_t v24 = *(void *)(a1 + 24);
        uint64_t v25 = v18;
        uint64_t v26 = v153;
        do
        {
          uint64_t v27 = *v21++;
          int v28 = *(_DWORD *)(v23 + 8 * v27 + 4);
          LODWORD(v27) = *v22++;
          *v26++ = *(_DWORD *)(v24 + 4 * (v28 + (int)v27));
          --v25;
        }
        while (v25);
      }
      uint64_t v29 = *(void *)(v11 + 336);
      uint64_t v30 = *(int *)(v29 + 4 * v16);
      uint64_t v31 = (int *)(*(void *)(v11 + 360) + 4 * v30);
      uint64_t v32 = *(unsigned int *)(v29 + 8 * v14);
      unint64_t v33 = *(unsigned __int16 *)(*(void *)(v11 + 432) + 2 * v14);
      if (v33)
      {
        if ((int)v18 >= 1 && (int)v32 >= 1)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)(v11 + 384) + 2 * v30;
          do
          {
            uint64_t v44 = v31[v42];
            unint64_t v45 = *(void **)a1;
            uint64_t v46 = *(void *)(*(void *)a1 + 144);
            uint64_t v47 = *(unsigned int *)(v46 + 8 * v44);
            if ((int)v47 >= 2)
            {
              uint64_t v48 = 0;
              int v49 = 0;
              uint64_t v50 = *(int *)(v46 + 8 * v44 + 4);
              unint64_t v51 = (int *)(v45[15] + 8 * v44);
              while (v47 != v48)
              {
                uint64_t v52 = *(int *)(v45[21] + 4 * v50 + 4 * v48);
                int v53 = 2 * v52;
                uint64_t v54 = v45[3];
                uint64_t v55 = *(int *)(v54 + 8 * v52 + 4);
                uint64_t v56 = v45[6] + 4 * v55;
                int v57 = *(_DWORD *)(v54 + 4 * v53);
                uint64_t v58 = *(unsigned __int16 *)(v45[24] + 2 * v50 + 2 * v48);
                uint64_t v59 = *(void *)(a1 + 24) + 4 * v55;
                uint64_t v60 = *v51;
                if (*(_WORD *)(v43 + 2 * v42) == (v60 != *(_DWORD *)(v56 + 4 * v58))) {
                  unsigned int v61 = *(unsigned __int16 *)(v45[24] + 2 * v50 + 2 * v48);
                }
                else {
                  unsigned int v61 = v58 + 1;
                }
                if (v61 == v57) {
                  unsigned int v62 = 0;
                }
                else {
                  unsigned int v62 = v61;
                }
                int v63 = *(_DWORD *)(v59 + 4 * v62);
                if (v48)
                {
                  ++v48;
                  if (v63 != v49)
                  {
                    uint64_t v64 = v137[0];
                    *((_WORD *)v137[0] + v6sub_216817474((void **)this, 0) = 1;
                    v64[v51[1]] = 1;
                    uint64_t v65 = *(void *)(a1 + 48);
                    char v66 = *(unsigned char *)(v65 + v44) & 0xFD | (2 * (v14 == v60));
                    *(unsigned char *)(v65 + v44) = v66;
                    char v67 = v66 & 0xFB | (4 * (v14 == v51[1])) | 1;
                    *(unsigned char *)(v65 + v44) = v67;
                    *(unsigned char *)(v65 + v44) = v67 & 0xF7 | (8 * *(unsigned char *)(a1 + 13));
                    break;
                  }
                }
                else
                {
                  uint64_t v48 = 1;
                  int v49 = v63;
                }
              }
            }
            ++v42;
          }
          while (v42 != v32);
        }
      }
      else if ((int)v18 > (v33 & 4) >> 2)
      {
        uint64_t v34 = (v33 >> 2) & 1;
        do
        {
          if (v34) {
            int v35 = v34;
          }
          else {
            int v35 = v18;
          }
          if (v19[v34] != v19[v35 - 1])
          {
            uint64_t v36 = v31[v34];
            uint64_t v37 = *(void *)(*(void *)a1 + 120) + 8 * v36;
            uint64_t v38 = *(unsigned int *)v37;
            unint64_t v39 = v137[0];
            *((_WORD *)v137[0] + (int)v38) = 1;
            v39[*(int *)(v37 + 4)] = 1;
            uint64_t v40 = *(void *)(a1 + 48);
            LOBYTE(v38) = *(unsigned char *)(v40 + v36) & 0xFD | (2 * (v14 == v38));
            *(unsigned char *)(v40 + v36) = v38;
            LOBYTE(v37) = v38 & 0xFB | (4 * (v14 == *(_DWORD *)(v37 + 4))) | 1;
            *(unsigned char *)(v40 + v36) = v37;
            *(unsigned char *)(v40 + v36) = v37 & 0xF7 | (8 * *(unsigned char *)(a1 + 13));
          }
          ++v34;
        }
        while (v18 != v34);
      }
      int v134 = v15;
      char v133 = v33;
      if ((v33 & 4) != 0 && !*((_WORD *)v137[0] + v14))
      {
        if (*(unsigned char *)(a1 + 13))
        {
          if ((int)v18 < 1) {
            goto LABEL_74;
          }
          *((_WORD *)v137[0] + v14) = 1;
          if (v33)
          {
            if ((int)v32 >= 1)
            {
              do
              {
                uint64_t v83 = *v31++;
                uint64_t v82 = v83;
                if ((*(unsigned char *)(*(void *)(*(void *)a1 + 240) + v83) & 2) != 0) {
                  *(unsigned char *)(*(void *)(a1 + 48) + v82) |= 8u;
                }
                --v32;
              }
              while (v32);
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(a1 + 48) + *v31) |= 8u;
            uint64_t v77 = v31[(int)v32 - 1];
            *(unsigned char *)(*(void *)(a1 + 48) + v77) |= 8u;
          }
        }
        else
        {
          BOOL v78 = v128;
          if (v18 != 1) {
            BOOL v78 = 0;
          }
          if (v78)
          {
            *((_WORD *)v137[0] + v14) = 1;
LABEL_74:
            __int32 *v13 = *v19;
            *long long v132 = 0;
            goto LABEL_75;
          }
        }
      }
      __int32 *v13 = *v19;
      *long long v132 = 0;
      if ((int)v18 > 1)
      {
        uint64_t v68 = v19 + 1;
        uint64_t v69 = v18 - 1;
        int v70 = 1;
        int v71 = v132 + 1;
        while (1)
        {
          __int32 v72 = *v68;
          if (*v68 == *(v68 - 1))
          {
            _WORD *v71 = *(v71 - 1);
          }
          else
          {
            _WORD *v71 = v70;
            if (v70 == 2)
            {
              if (*v13 == v72)
              {
LABEL_57:
                uint64_t v73 = &v13[v70];
                uint64_t v74 = wmemchr(v13, v72, v70);
                if (v74) {
                  uint64_t v75 = v74;
                }
                else {
                  uint64_t v75 = &v13[v70];
                }
                uint64_t v76 = (char *)v75 - (char *)v13;
                if (v70 == v76 >> 2)
                {
                  ++v70;
                  *uint64_t v73 = *v68;
                }
                else
                {
                  _WORD *v71 = (unint64_t)v76 >> 2;
                }
                goto LABEL_64;
              }
              void v13[2] = v72;
              int v70 = 3;
            }
            else
            {
              if (v70 != 1) {
                goto LABEL_57;
              }
              v13[1] = v72;
              int v70 = 2;
            }
          }
LABEL_64:
          ++v71;
          ++v68;
          if (!--v69) {
            goto LABEL_76;
          }
        }
      }
LABEL_75:
      int v70 = 1;
LABEL_76:
      if ((v133 & 1) != 0 && !*((_WORD *)v137[0] + v14)) {
        *((_WORD *)v137[0] + v14) = v70 > 1;
      }
      *(_WORD *)(*(void *)(a1 + 72) + 2 * v14) = v70;
      *(_DWORD *)(*(void *)(a1 + 96) + 4 * v14) = v134;
      uint64_t v11 = *(void *)a1;
      if (v70 >= 2 && (int)v18 >= 1)
      {
        uint64_t v79 = (_WORD *)(*v130 + 2 * *(int *)(*(void *)(v11 + 264) + 4 * ((2 * v14) | 1)));
        uint64_t v80 = v132;
        do
        {
          __int16 v81 = *v80++;
          *v79++ = v81;
          --v18;
        }
        while (v18);
      }
      int v15 = v70 + v134;
      if (++v14 >= *(int *)(v11 + 8)) {
        goto LABEL_91;
      }
    }
  }
  int v15 = 0;
LABEL_91:
  sub_21681C090(a1, v15);
  int v84 = *(void **)a1;
  if (*(int *)(*(void *)a1 + 8) >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(*(void *)a1 + 8); ++i)
    {
      uint64_t v86 = (2 * i) | 1;
      uint64_t v87 = v84[33];
      uint64_t v88 = *(int *)(v87 + 4 * v86);
      uint64_t v89 = v84[36];
      uint64_t v90 = *(unsigned int *)(v87 + 8 * i);
      uint64_t v91 = v84[39];
      if ((int)v90 < 1) {
        int v92 = 0;
      }
      else {
        int v92 = *(_DWORD *)(*(void *)(a1 + 24)
      }
                        + 4
                        * (*(_DWORD *)(v84[3] + 8 * *(int *)(v89 + 4 * v88) + 4) + *(unsigned __int16 *)(v91 + 2 * v88)));
      uint64_t v93 = *(unsigned __int16 *)(*(void *)(a1 + 72) + 2 * i);
      uint64_t v94 = *(void *)(a1 + 96);
      uint64_t v95 = (_DWORD *)(*(void *)(a1 + 144) + 4 * *(int *)(v94 + 4 * i));
      *uint64_t v95 = v92;
      if (!*((_WORD *)v137[0] + i)) {
        goto LABEL_170;
      }
      if (v93 >= 2 && (int)v90 >= 2)
      {
        uint64_t v96 = *(int *)(v87 + 4 * v86);
        uint64_t v97 = (unsigned __int16 *)(v91 + 2 * v88 + 2);
        long long v98 = (int *)(v89 + 4 * v88 + 4);
        uint64_t v99 = (unsigned __int16 *)(*v130 + 2 * v96 + 2);
        uint64_t v100 = v90 - 1;
        int v101 = 1;
        do
        {
          int v102 = *v99++;
          if (v101 == v102) {
            v95[v101++] = *(_DWORD *)(*(void *)(a1 + 24) + 4 * (*(_DWORD *)(v84[3] + 8 * *v98 + 4) + *v97));
          }
          ++v97;
          ++v98;
          --v100;
        }
        while (v100);
      }
      uint64_t v135 = *(int *)(v94 + 4 * i);
      uint64_t v103 = *(void *)(a1 + 168);
      __int16 v104 = *(_WORD *)(v84[54] + 2 * i);
      char v105 = 1;
      if (!*(unsigned char *)(a1 + 13) && (v104 & 0x10) == 0 && (v104 & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 14))
        {
          char v105 = v93 > 2;
          char v107 = !v127;
          if (v93 > 2) {
            char v107 = 1;
          }
          if (v107) {
            goto LABEL_118;
          }
          if (v93 != 1)
          {
            char v105 = 0;
            goto LABEL_118;
          }
        }
        else
        {
          char v105 = 0;
          if (v129 > 2 || v93 != 1) {
            goto LABEL_118;
          }
        }
        char v105 = (v104 & 4) == 0;
      }
LABEL_118:
      int v108 = (unsigned __int16 *)v138;
      bzero(v138, 10 * v93);
      sub_21681CCD8((void *)a1, i, (uint64_t)v108);
      if ((v105 & 1) == 0 && v93 == 2 && *(unsigned char *)(a1 + 14))
      {
        char v105 = v108[4] || v108[9] || v108[2] || v108[7] != 0;
        if (v131 == 3)
        {
          int v110 = *v108;
          if (v110 != 1) {
            LOBYTE(v11sub_216817474((void **)this, 0) = v108[5] == 1;
          }
          v105 |= v110;
        }
        int v109 = (v108[3] != 0) ^ (v108[8] != 0);
LABEL_132:
        int v111 = (unsigned char *)(v103 + v135);
        if (v109) {
          char v112 = 48;
        }
        else {
          char v112 = 8;
        }
        uint64_t v113 = 2;
        while (2)
        {
          *int v111 = 1;
          if (v108[2])
          {
            *int v111 = 5;
            goto LABEL_138;
          }
          if ((v105 & 1) != 0 || v108[4])
          {
            int v114 = *v108;
            BOOL v115 = v114 == 1;
            if (v114 == a2) {
              unsigned int v116 = 1;
            }
            else {
              unsigned int v116 = 3;
            }
            BOOL v117 = 1;
            goto LABEL_146;
          }
          BOOL v117 = v131 != 0;
          int v120 = *v108;
          BOOL v115 = v120 == 1;
          if (v120 != 1) {
            BOOL v117 = 0;
          }
          int v118 = 3;
          if (v120 == a2) {
            unsigned int v116 = 1;
          }
          else {
            unsigned int v116 = 3;
          }
          if (v117) {
LABEL_146:
          }
            int v118 = 1;
          if (v115) {
            unsigned int v116 = v118;
          }
          *int v111 = v116;
          unsigned int v119 = v116 | ((v108[4] != 0) << 6);
          *int v111 = v119;
          if (v108[4])
          {
            LOBYTE(v119) = v119 | ((*v108 - v108[4] > 1) << 7);
            *int v111 = v119;
            if (!v117) {
              goto LABEL_162;
            }
          }
          else if (v117)
          {
            *int v111 = v119 | ((*v108 > 1u) << 7);
          }
          else
          {
            unsigned int v119 = v119 & 0xFFFFFF7F | (((v116 >> 1) & 1) << 7);
            *int v111 = v119;
LABEL_162:
            if (v108[3] | v104 & 0x20) {
              char v121 = 16;
            }
            else {
              char v121 = v112;
            }
            *int v111 = v119 | v121;
            if (!*(unsigned char *)(a1 + 13))
            {
              uint64_t v122 = *(int *)(*(void *)(a1 + 96) + 4 * i);
              uint64_t v123 = *(void *)(a1 + 192);
              uint64_t v124 = v123 + 4 * v122;
              int v125 = v108[1];
              *(_WORD *)(v124 + v113 - 2) = v125;
              __int16 v126 = *v108;
              if (v113 == 2 && v125) {
                *(_WORD *)(v123 + 4 * v122 + 2) = v125 + ~(_WORD)v90 + v126;
              }
              else {
                *(_WORD *)(v124 + v113) = v125 + v126 - 1;
              }
            }
          }
LABEL_138:
          v113 += 4;
          v108 += 5;
          ++v111;
          if (!--v93) {
            goto LABEL_170;
          }
          continue;
        }
      }
      if (v93)
      {
        int v109 = 0;
        goto LABEL_132;
      }
LABEL_170:
      int v84 = *(void **)a1;
    }
  }
  operator delete(__p);
  operator delete(v147);
  operator delete(v152);
  operator delete(v157);
  if (v137[0])
  {
    v137[1] = v137[0];
    operator delete(v137[0]);
  }
}

void sub_21681CC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  operator delete(__p);
  operator delete(a63);
  operator delete(*(void **)(v63 - 104));
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void *sub_21681CCD8(void *result, int a2, uint64_t a3)
{
  int v3 = (void *)*result;
  uint64_t v4 = *(unsigned __int16 *)(result[9] + 2 * a2);
  if (*(_WORD *)(*(void *)(*result + 432) + 2 * a2))
  {
    if (*(_WORD *)(result[9] + 2 * a2))
    {
      long long v19 = (_WORD *)(a3 + 4);
      do
      {
        *(v19 - 2) = 0;
        *long long v19 = 1;
        v19 += 5;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v5 = v3[45];
    uint64_t v6 = v3[42];
    unint64_t v7 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    uint64_t v8 = *(int *)(v6 + v7);
    uint64_t v9 = 8 * a2;
    uint64_t v10 = *(unsigned int *)(v6 + v9);
    uint64_t v11 = (int *)(v5 + 4 * v8);
    uint64_t v12 = v3[33];
    uint64_t v13 = *(unsigned int *)(v12 + v9);
    if (v4 != 1 || (int)v10 > (int)v13)
    {
      uint64_t v15 = result[15] + 2 * *(int *)(v12 + v7);
      *(_DWORD *)a3 = 1;
      if ((int)v10 > (int)v13 || *(_WORD *)(v15 + 2 * ((int)v13 - 1))) {
        goto LABEL_33;
      }
      uint64_t v16 = *v11;
      if (*(unsigned char *)(result[6] + v16))
      {
        uint64_t v18 = (_WORD *)(a3 + 4);
      }
      else
      {
        char v17 = *(unsigned char *)(v3[30] + v16);
        if ((v17 & 4) != 0)
        {
          uint64_t v18 = (_WORD *)(a3 + 8);
        }
        else
        {
          if ((v17 & 8) == 0)
          {
LABEL_33:
            if ((int)v13 >= 2)
            {
              uint64_t v25 = 0;
              uint64_t v26 = v5 + 4 * v8 + 4;
              do
              {
                uint64_t v27 = (unsigned __int16 *)(v15 + 2 * v25);
                unsigned int v28 = v27[1];
                if (v28 == *v27)
                {
                  uint64_t v29 = *(int *)(v26 + 4 * v25);
                  if (*(unsigned char *)(result[6] + v29))
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                  }
                  else
                  {
                    char v30 = *(unsigned char *)(v3[30] + v29);
                    if ((v30 & 4) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 8);
                    }
                    else if ((v30 & 8) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 6);
                    }
                  }
                }
                else
                {
                  if (*(_WORD *)(a3 + 10 * v27[1]))
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                    unsigned int v28 = v27[1];
                  }
                  *(_WORD *)(a3 + 10 * v28 + 2) = v25 + 1;
                }
                ++*(_WORD *)(a3 + 10 * v27[1]);
                ++v25;
              }
              while (v13 - 1 != v25);
            }
            if (!*(_WORD *)(v15 + 2 * ((int)v13 - 1)) && (int)v10 <= (int)v13) {
              --*(_WORD *)(a3 + 4);
            }
            return result;
          }
          uint64_t v18 = (_WORD *)(a3 + 6);
        }
      }
      ++*v18;
      goto LABEL_33;
    }
    *(_DWORD *)a3 = 0;
    if ((int)v10 > 0)
    {
      int v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = result[6];
      do
      {
        uint64_t v23 = v11[v21];
        if (*(unsigned char *)(v22 + v23))
        {
          if (v20)
          {
            *(_WORD *)(a3 + 4) = 1;
            break;
          }
          *(_WORD *)a3 = v13;
          *(_WORD *)(a3 + 2) = v21;
          int v20 = (unsigned __int16)v13;
        }
        else
        {
          char v24 = *(unsigned char *)(v3[30] + v23);
          if ((v24 & 4) != 0)
          {
            ++*(_WORD *)(a3 + 8);
          }
          else if ((v24 & 8) != 0)
          {
            ++*(_WORD *)(a3 + 6);
          }
        }
        ++v21;
      }
      while (v10 != v21);
    }
    *(_WORD *)a3 = v13;
  }
  return result;
}

void *sub_21681CF44(void **a1)
{
  return memcpy(a1[3], *((const void **)*a1 + 6), ((uint64_t)((*((void *)*a1 + 7) - *((void *)*a1 + 6)) << 30) >> 30) & 0xFFFFFFFFFFFFFFFCLL);
}

void *sub_21681CF60(void *result)
{
  uint64_t v1 = *result;
  unint64_t v2 = *(int **)(*result + 48);
  unint64_t v3 = *(void *)(*result + 56) - (void)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = result[12];
    uint64_t v5 = (_DWORD *)result[3];
    uint64_t v6 = (v3 >> 2);
    do
    {
      uint64_t v7 = *v2++;
      *v5++ = *(_DWORD *)(v4 + 4 * v7);
      --v6;
    }
    while (v6);
  }
  int v8 = *(_DWORD *)(v1 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = result[9];
    do
    {
      if (*(unsigned __int16 *)(v10 + 2 * v9) >= 2u)
      {
        uint64_t v11 = (unsigned int *)(*(void *)(v1 + 264) + 8 * v9);
        uint64_t v12 = *v11;
        if ((int)v12 >= 1)
        {
          uint64_t v13 = (int)v11[1];
          uint64_t v14 = (int *)(*(void *)(v1 + 288) + 4 * v13);
          uint64_t v15 = (unsigned __int16 *)(*(void *)(v1 + 312) + 2 * v13);
          uint64_t v16 = (unsigned __int16 *)(result[15] + 2 * v13);
          do
          {
            int v18 = *v16++;
            int v17 = v18;
            if (v18)
            {
              int v19 = *(_DWORD *)(*(void *)(v1 + 24) + 8 * *v14 + 4) + *v15;
              *(_DWORD *)(result[3] + 4 * v19) += v17;
            }
            ++v15;
            ++v14;
            --v12;
          }
          while (v12);
          int v8 = *(_DWORD *)(v1 + 8);
        }
      }
      ++v9;
    }
    while (v9 < v8);
  }
  return result;
}

void sub_21681D03C(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_21677CB10();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_21677EA28(v4, v13);
      int v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    int v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_21681D158(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_21677CB10();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_216780E70(v4, v13);
      int v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    int v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_21681D26C(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      sub_21677CB10();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    int v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--uint64_t v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_21681D398(void **a1, unint64_t a2, _WORD *a3)
{
  int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 1)
  {
    if (a2)
    {
      uint64_t v16 = 2 * a2;
      int v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    uint64_t v11 = a2 + (v10 >> 1);
    if (v11 < 0) {
      sub_21677CB10();
    }
    uint64_t v12 = v10 >> 1;
    unint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 > v11) {
      uint64_t v11 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_216780E70(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v18 = &v15[2 * v12];
    int v19 = &v18[2 * a2];
    uint64_t v20 = 2 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_WORD *)uint64_t v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    uint64_t v22 = &v15[2 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 2)
    {
      __int16 v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void sub_21681D4B4(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 2);
    if (v9 >> 62) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 2;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 1 > v9) {
      unint64_t v9 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_21677EA28(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v10];
    uint64_t v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    uint64_t v16 = &v14[4 * a2];
    char v18 = (char *)*a1;
    int v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        int v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      int v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_21681D5C8(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216780E30(a1, a2);
    uint64_t v6 = (_WORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_21681D630(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21681D64C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *double result = a2;
  result[1] = *(void *)(a2 + 8);
  result[2] = a3;
  result[3] = *(void *)(a2 + 16);
  result[4] = a4;
  result[6] = 0;
  result[7] = 0;
  result[5] = 0;
  return result;
}

uint64_t sub_21681D66C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_21681D6A0(uint64_t *a1)
{
  *(_DWORD *)(a1[4] + 8) = *(_DWORD *)(a1[2] + 8);
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  *(unsigned char *)(v3 + 12) = *(unsigned char *)(v2 + 12);
  *(_WORD *)(v3 + 13) = *(_WORD *)(v2 + 13);
  sub_21681D76C(a1);
  sub_21681D878(a1);
  sub_21681D900((uint64_t)a1);
  sub_21681D9B8(a1);
  sub_21681DA40((int **)a1);
  uint64_t v4 = a1[4];
  if (!*(unsigned char *)(v4 + 13))
  {
    sub_21681DB94(a1);
    sub_21681DCDC(a1);
    uint64_t v4 = a1[4];
  }
  if (*(_DWORD *)(v4 + 16) <= *(_DWORD *)(a1[3] + 8))
  {
    return sub_21681CF44((void **)v4);
  }
  else
  {
    return sub_21681CF60((void *)v4);
  }
}

void sub_21681D76C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(*a1 + 52);
  uint64_t v4 = *(int *)(*a1 + 56);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *(int *)(v2 + 80);
    uint64_t v6 = v4 + v5;
    do
    {
      uint64_t v7 = *(int *)(*(void *)(v2 + 312) + 4 * v5);
      if (*(unsigned char *)(*(void *)(a1[2] + 48) + v7)) {
        int v8 = *(_DWORD *)(*(void *)(a1[1] + 144) + 8 * v7);
      }
      else {
        int v8 = 1;
      }
      v3 += v8;
      ++v5;
    }
    while (v5 < v6);
  }
  uint64_t v9 = *(int *)(v2 + 60);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = *(int *)(v2 + 84);
    uint64_t v11 = v9 + v10;
    uint64_t v12 = *(void *)(v2 + 312);
    do
      v3 += *(unsigned __int16 *)(*(void *)(a1[2] + 72) + 2 * *(int *)(v12 + 4 * v10++));
    while (v10 < v11);
  }
  sub_21681BF44((void *)a1[4]);
  uint64_t v13 = a1[4];
  uint64_t v14 = *(void *)(v13 + 168);
  unint64_t v15 = *(void *)(v13 + 176) - v14;
  if (v3 <= v15)
  {
    if (v3 < v15) {
      *(void *)(v13 + 176) = v14 + v3;
    }
  }
  else
  {
    sub_21681E2A8((void **)(v13 + 168), v3 - v15);
  }
  __int16 v16 = 0;
  sub_21681C060((uint64_t)(a1 + 5), v3, &v16);
}

void *sub_21681D878(void *a1)
{
  *(_DWORD *)(a1[4] + 16) = 0;
  if (*(unsigned char *)(*a1 + 37))
  {
    sub_21681DFF4(a1);
    sub_21681E044(a1);
    return sub_21681E1B4(a1);
  }
  else
  {
    sub_21681E1B4(a1);
    sub_21681DFF4(a1);
    return sub_21681E044(a1);
  }
}

void sub_21681D900(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 168);
  unint64_t v4 = *(int *)(v2 + 16);
  unint64_t v5 = *(void *)(v2 + 176) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *(void *)(v2 + 176) = v3 + v4;
    }
  }
  else
  {
    sub_21681E2A8((void **)(v2 + 168), v4 - v5);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (!*(unsigned char *)(v2 + 13))
  {
    sub_21681C10C(v2 + 192, *(int *)(v2 + 16));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  sub_21681C030(a1 + 40, *(int *)(v2 + 16));
  sub_21681C000(*(void *)(a1 + 32) + 144, *(int *)(*(void *)(a1 + 32) + 16));
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(int *)(v6 + 16) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v6 + 144);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7;
      ++v7;
    }
    while (v7 < *(int *)(v6 + 16));
  }
}

void *sub_21681D9B8(void *result)
{
  LODWORD(v1) = *(_DWORD *)(*result + 44);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    do
      *(unsigned char *)(*(void *)(result[4] + 48) + v2++) = 0;
    while (v2 < *(int *)(*result + 44));
    LODWORD(v1) = *(_DWORD *)(*result + 44);
  }
  if ((int)v1 < *(_DWORD *)(result[3] + 4))
  {
    uint64_t v1 = (int)v1;
    do
    {
      *(unsigned char *)(*(void *)(result[4] + 48) + v1) = *(unsigned char *)(*(void *)(result[2] + 48)
                                                                + *(int *)(*(void *)(*result + 288) + 4 * v1));
      ++v1;
    }
    while (v1 < *(int *)(result[3] + 4));
  }
  return result;
}

int **sub_21681DA40(int **result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  int v3 = (*result)[13];
  if (v3 >= 1)
  {
    int v4 = v2[19];
    int v5 = v3 + v4;
    uint64_t v6 = *(int *)(*((void *)result[4] + 12) + 4 * v4);
    do
    {
      *(unsigned char *)(*((void *)result[4] + 21) + v6) = 0;
      ++v4;
      ++v6;
    }
    while (v4 < v5);
    uint64_t v2 = *result;
  }
  uint64_t v7 = v2[14];
  if ((int)v7 >= 1)
  {
    uint64_t v8 = v2[20];
    uint64_t v9 = v7 + v8;
    if (*((unsigned char *)result[2] + 13)) {
      int v10 = 1;
    }
    else {
      int v10 = 9;
    }
    do
    {
      uint64_t v11 = v1[4];
      uint64_t v12 = *((void *)v11 + 9);
      if (*(_WORD *)(v12 + 2 * v8))
      {
        if ((*(unsigned char *)(*((void *)v1[2] + 6) + *(int *)(*((void *)*v1 + 39) + 4 * v8)) & 9) != 0) {
          int v13 = v10;
        }
        else {
          int v13 = 0;
        }
        double result = (int **)memset((void *)(*((void *)v11 + 21) + *(int *)(*((void *)v11 + 12) + 4 * v8)), v13, *(unsigned __int16 *)(v12 + 2 * v8));
      }
      ++v8;
    }
    while (v8 < v9);
    uint64_t v2 = *v1;
  }
  uint64_t v14 = v2[15];
  if ((int)v14 >= 1)
  {
    uint64_t v15 = v2[21];
    uint64_t v16 = v14 + v15;
    do
    {
      uint64_t v17 = *(int *)(*((void *)*v1 + 39) + 4 * v15);
      double result = (int **)memcpy((void *)(*((void *)v1[4] + 21) + *(int *)(*((void *)v1[4] + 12) + 4 * v15++)), (const void *)(*((void *)v1[2] + 21) + *(int *)(*((void *)v1[2] + 12) + 4 * v17)), *(unsigned __int16 *)(*((void *)v1[2] + 9) + 2 * v17));
    }
    while (v15 < v16);
  }
  return result;
}

void *sub_21681DB94(void *result)
{
  uint64_t v1 = *result;
  if (*(_DWORD *)(*result + 32) == 4) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 3;
  }
  uint64_t v3 = *(int *)(v1 + 56);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *(int *)(v1 + 80);
    uint64_t v5 = v3 + v4;
    uint64_t v6 = (void *)result[4];
    uint64_t v7 = v6[9];
    uint64_t v8 = v6[12];
    uint64_t v9 = v6[21];
    do
    {
      uint64_t v10 = *(int *)(v8 + 4 * v4);
      uint64_t v11 = (char *)(v9 + v10);
      if ((*(unsigned char *)(v9 + v10) & 1) != 0 && (*(unsigned char *)(*(void *)(v1 + 384) + v4) & 1) == 0)
      {
        uint64_t v12 = *(unsigned __int16 *)(v7 + 2 * v4);
        if (*(_WORD *)(v7 + 2 * v4))
        {
          __int16 v13 = 0;
          uint64_t v14 = (_WORD *)(v6[24] + 4 * v10 + 2);
          do
          {
            char v15 = *v11++;
            if ((v15 & 0x18) != 0)
            {
              *(v14 - 1) = v13;
              _WORD *v14 = v2 - 1 + v13;
            }
            v13 += v2;
            v14 += 2;
            --v12;
          }
          while (v12);
        }
      }
      ++v4;
    }
    while (v4 < v5);
  }
  uint64_t v16 = *(int *)(v1 + 60);
  if ((int)v16 >= 1)
  {
    uint64_t v17 = *(int *)(v1 + 84);
    uint64_t v18 = v16 + v17;
    do
    {
      int v19 = (void *)result[4];
      uint64_t v20 = *(int *)(v19[12] + 4 * v17);
      uint64_t v21 = (char *)(v19[21] + v20);
      if ((*v21 & 1) != 0 && (*(unsigned char *)(*(void *)(*result + 384) + v17) & 1) == 0)
      {
        uint64_t v22 = *(unsigned __int16 *)(v19[9] + 2 * v17);
        if (*(_WORD *)(v19[9] + 2 * v17))
        {
          uint64_t v23 = (_DWORD *)(*(void *)(result[2] + 192)
                         + 4
                         * *(int *)(*(void *)(result[2] + 96)
                                  + 4 * *(int *)(*(void *)(*result + 312) + 4 * v17)));
          char v24 = (_DWORD *)(v19[24] + 4 * v20);
          do
          {
            char v25 = *v21++;
            if ((v25 & 0x18) != 0) {
              *char v24 = *v23;
            }
            ++v24;
            ++v23;
            --v22;
          }
          while (v22);
        }
      }
      ++v17;
    }
    while (v17 < v18);
  }
  return result;
}

void sub_21681DCDC(void *a1)
{
  __int16 v2 = 0;
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(a1[2] + 14);
  uint64_t v4 = *(unsigned int *)(a1[3] + 20);
  uint64_t v40 = &v41;
  std::string __p = 0;
  if (v4 >= 0x11)
  {
    __int16 v2 = operator new(4 * v4);
    std::string __p = v2;
    uint64_t v40 = (uint64_t *)v2;
  }
  uint64_t v5 = *(int *)(*a1 + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(int *)(*a1 + 84);
    uint64_t v7 = v5 + v6;
    while (1)
    {
      uint64_t v8 = (void *)a1[4];
      uint64_t v9 = *(int *)(v8[12] + 4 * v6);
      uint64_t v10 = (char *)(v8[21] + v9);
      if ((*v10 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v11 = *a1;
      if (*(unsigned char *)(*(void *)(*a1 + 384) + v6)) {
        goto LABEL_9;
      }
      uint64_t v12 = *(int *)(*(void *)(v11 + 312) + 4 * v6);
      __int16 v13 = (void *)a1[1];
      if ((*(_WORD *)(v13[54] + 2 * v12) & 0x60) == 0) {
        goto LABEL_9;
      }
      uint64_t v14 = (void *)a1[3];
      __int16 v15 = *(_WORD *)(v14[54] + 2 * v6);
      if ((v15 & 0x30) != 0) {
        goto LABEL_9;
      }
      uint64_t v16 = *(unsigned __int16 *)(v8[9] + 2 * v6);
      if ((v15 & 0x40) == 0)
      {
        if (*(_WORD *)(v8[9] + 2 * v6))
        {
          do
          {
            if ((*v10 & 0x10) != 0) {
              *uint64_t v10 = *v10 & 0xC7 | 8;
            }
            ++v10;
            --v16;
          }
          while (v16);
        }
        goto LABEL_9;
      }
      uint64_t v17 = v8[24];
      uint64_t v18 = v14[45];
      if (((v14[46] - v18) & 0x3FFFFFFFCLL) != 0)
      {
        uint64_t v20 = v14[42];
        int v19 = (uint64_t *)(v18 + 4 * *(int *)(v20 + 8 * v6 + 4));
        LODWORD(v2sub_216817474((void **)this, 0) = *(_DWORD *)(v20 + 8 * (int)v6);
      }
      else
      {
        uint64_t v21 = v13[42];
        uint64_t v20 = *(unsigned int *)(v21 + 8 * v12);
        int v19 = v40;
        if ((int)v20 >= 1)
        {
          uint64_t v22 = 0;
          uint64_t v23 = *(int *)(v21 + 8 * v12 + 4);
          uint64_t v24 = v13[45] + 4 * v23;
          uint64_t v25 = v13[48] + 2 * v23;
          uint64_t v26 = *(void *)(v11 + 192);
          do
          {
            *((_DWORD *)v40 + v22) = *(_DWORD *)(v26
                                               + 8 * *(int *)(v24 + 4 * v22)
                                               + 4 * *(unsigned __int16 *)(v25 + 2 * v22));
            ++v22;
          }
          while (v20 != v22);
        }
      }
      if (v16) {
        break;
      }
LABEL_9:
      if (++v6 >= v7)
      {
        __int16 v2 = __p;
        goto LABEL_51;
      }
    }
    uint64_t v27 = 0;
    uint64_t v28 = v17 + 4 * v9;
    while (1)
    {
      char v29 = v10[v27];
      if ((v29 & 0x30) == 0x10)
      {
        char v30 = (unsigned __int16 *)(v28 + 4 * v27);
        uint64_t v31 = *v30;
        unint64_t v32 = v30[1];
        if (v32 <= v31)
        {
          if (v31 <= v32) {
            goto LABEL_41;
          }
          if ((int)v31 + 1 < (int)v20)
          {
            do
            {
              char v36 = *(unsigned char *)(*(void *)(a1[3] + 240) + *((int *)v19 + v31 + 1));
              if ((v36 & 8) != 0) {
                break;
              }
              uint64_t v37 = v31 + 2;
              ++v31;
            }
            while (v37 < (int)v20);
            if ((v36 & 8) != 0) {
              goto LABEL_42;
            }
          }
          unint64_t v38 = 0;
          do
          {
            char v34 = *(unsigned char *)(*(void *)(a1[3] + 240) + *((int *)v19 + v38));
            if ((v34 & 8) != 0) {
              break;
            }
            BOOL v35 = v38++ >= v32;
          }
          while (!v35);
        }
        else
        {
          unint64_t v33 = v31 + 1;
          do
          {
            char v34 = *(unsigned char *)(*(void *)(a1[3] + 240) + *((int *)v19 + v33));
            if ((v34 & 8) != 0) {
              break;
            }
            BOOL v35 = v33++ >= v32;
          }
          while (!v35);
        }
        if ((v34 & 8) == 0) {
LABEL_41:
        }
          v10[v27] = v29 & 0xC7 | 8;
      }
LABEL_42:
      if (++v27 == v16)
      {
        if (v3 && v16 == 2)
        {
          char v39 = *v10;
          if ((*v10 & 0x20) != 0 && (v10[1] & 0x10) == 0)
          {
LABEL_50:
            *uint64_t v10 = v39 & 0xDF;
          }
          else if ((*v10 & 0x10) == 0 && (v10[1] & 0x20) != 0)
          {
            char v39 = *++v10;
            goto LABEL_50;
          }
        }
        goto LABEL_9;
      }
    }
  }
LABEL_51:
  operator delete(v2);
}

void *sub_21681DFF4(void *result)
{
  uint64_t v1 = *(int *)(*result + 52);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(*result + 76);
    uint64_t v3 = v1 + v2;
    uint64_t v4 = result[4];
    uint64_t v5 = *(void *)(v4 + 96);
    uint64_t v6 = *(void *)(v4 + 72);
    int v7 = *(_DWORD *)(v4 + 16);
    do
    {
      *(_DWORD *)(v5 + 4 * v2) = v7;
      *(_WORD *)(v6 + 2 * v2) = 1;
      int v7 = *(_DWORD *)(v4 + 16) + 1;
      *(_DWORD *)(v4 + 16) = v7;
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

void *sub_21681E044(void *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *(int *)(*result + 56);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(int *)(v1 + 80);
    uint64_t v4 = v2 + v3;
    uint64_t v5 = *(void *)(v1 + 312);
    uint64_t v6 = result[4];
    uint64_t v7 = *(void *)(v6 + 96);
    uint64_t v8 = *(void *)(result[2] + 48);
    int v9 = *(_DWORD *)(v6 + 16);
    uint64_t v10 = *(void *)(v6 + 72);
    do
    {
      uint64_t v11 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v9;
      if (*(unsigned char *)(v8 + v11))
      {
        uint64_t v13 = result[1];
        uint64_t v14 = *(void *)(v13 + 144);
        uint64_t v12 = *(unsigned int *)(v14 + 8 * v11);
        if (v12 != 1)
        {
          uint64_t v15 = *(void *)(v13 + 168);
          uint64_t v16 = *(int *)(v14 + 8 * v11 + 4);
          if ((int)v12 >= 1)
          {
            uint64_t v17 = 0;
            uint64_t v18 = result[5] + 2 * v9;
            do
            {
              *(_WORD *)(v18 + 2 * v17) = v17;
              ++v17;
            }
            while (v12 != v17);
          }
          uint64_t v19 = *(void *)(*(void *)v6 + 264);
          uint64_t v20 = *(unsigned int *)(v19 + 8 * (int)v3);
          if ((int)v20 >= 1)
          {
            uint64_t v21 = 0;
            uint64_t v22 = v15 + 4 * v16;
            unint64_t v23 = (8 * ((unint64_t)(2 * (int)v3) >> 1)) | 4;
            uint64_t v24 = *(void *)(result[3] + 288) + 4 * *(int *)(*(void *)(result[3] + 264) + v23);
            uint64_t v25 = *(void *)(v6 + 120) + 2 * *(int *)(v19 + v23);
            uint64_t v26 = *(void *)(v1 + 264);
            do
            {
              int v27 = *(_DWORD *)(v26 + 4 * *(int *)(v24 + 4 * v21));
              if (v12 == 2)
              {
                if (v27 == *(_DWORD *)(v22 + 4)) {
                  *(_WORD *)(v25 + 2 * v21) = 1;
                }
              }
              else if ((int)v12 >= 1)
              {
                for (uint64_t i = 0; i != v12; ++i)
                {
                  if (v27 == *(_DWORD *)(v22 + 4 * i)) {
                    *(_WORD *)(v25 + 2 * v21) = i;
                  }
                }
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
      }
      else
      {
        LODWORD(v12) = 1;
      }
      *(_WORD *)(v10 + 2 * v3) = v12;
      int v9 = *(_DWORD *)(v6 + 16) + v12;
      *(_DWORD *)(v6 + 16) = v9;
      ++v3;
    }
    while (v3 < v4);
  }
  return result;
}

void *sub_21681E1B4(void *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *(int *)(*result + 60);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(int *)(v1 + 84);
    uint64_t v4 = v2 + v3;
    uint64_t v5 = *(void *)(v1 + 312);
    uint64_t v6 = result[4];
    uint64_t v7 = *(void *)(v6 + 96);
    uint64_t v8 = (void *)result[2];
    uint64_t v9 = v8[12];
    uint64_t v10 = v8[21];
    int v11 = *(_DWORD *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 72);
    do
    {
      uint64_t v13 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v11;
      if (*(unsigned char *)(v10 + *(int *)(v9 + 4 * v13)))
      {
        unint64_t v14 = *(unsigned __int16 *)(v8[9] + 2 * v13);
        if (v14 >= 2)
        {
          uint64_t v15 = result[5] + 2 * v11;
          for (uint64_t i = 1; i != v14; ++i)
            *(_WORD *)(v15 + 2 * i) = i;
          uint64_t v17 = *(void *)(*(void *)v6 + 264);
          uint64_t v18 = *(unsigned int *)(v17 + 8 * v3);
          if ((int)v18 >= 1)
          {
            uint64_t v19 = (__int16 *)(v8[15] + 2 * *(int *)(*(void *)(*v8 + 264) + 4 * (int)((2 * v13) | 1)));
            uint64_t v20 = (_WORD *)(*(void *)(v6 + 120) + 2 * *(int *)(v17 + 8 * (int)v3 + 4));
            do
            {
              __int16 v21 = *v19++;
              *v20++ = v21;
              --v18;
            }
            while (v18);
          }
        }
      }
      else
      {
        LODWORD(v14) = 1;
      }
      *(_WORD *)(v12 + 2 * v3) = v14;
      int v11 = *(_DWORD *)(v6 + 16) + v14;
      *(_DWORD *)(v6 + 16) = v11;
      ++v3;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_21681E2A8(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  if (v4 - v5 >= a2)
  {
    a1[1] = &v5[a2];
  }
  else
  {
    unint64_t v6 = (unint64_t)*a1;
    uint64_t v7 = (char *)(v5 - (unsigned char *)*a1);
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_21677CB10();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      int v11 = (char *)operator new(v10);
    }
    else {
      int v11 = 0;
    }
    uint64_t v12 = &v11[v10];
    uint64_t v13 = &v7[(void)v11 + a2];
    if (v5 == (char *)v6)
    {
      int v11 = &v7[(void)v11];
    }
    else
    {
      unint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[(void)v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

double sub_21681E3B4(_OWORD *a1)
{
  double result = 0.0;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_21681E3F8(void *a1)
{
  uint64_t v4 = a1 + 57;
  uint64_t v2 = (void **)a1[57];
  uint64_t v3 = v4[1];
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        unint64_t v6 = sub_21681BF34(v2[v5]);
        operator delete(v6);
        uint64_t v2 = (void **)a1[57];
        uint64_t v3 = a1[58];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    a1[58] = v2;
    operator delete(v2);
  }
  uint64_t v7 = (void *)a1[54];
  if (v7)
  {
    a1[55] = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)a1[51];
  if (v8)
  {
    a1[52] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[48];
  if (v9)
  {
    a1[49] = v9;
    operator delete(v9);
  }
  size_t v10 = (void *)a1[45];
  if (v10)
  {
    a1[46] = v10;
    operator delete(v10);
  }
  int v11 = (void *)a1[42];
  if (v11)
  {
    a1[43] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[39];
  if (v12)
  {
    a1[40] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[36];
  if (v13)
  {
    a1[37] = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)a1[33];
  if (v14)
  {
    a1[34] = v14;
    operator delete(v14);
  }
  char v15 = (void *)a1[30];
  if (v15)
  {
    a1[31] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[27];
  if (v16)
  {
    a1[28] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[24];
  if (v17)
  {
    a1[25] = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)a1[21];
  if (v18)
  {
    a1[22] = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)a1[18];
  if (v19)
  {
    a1[19] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)a1[15];
  if (v20)
  {
    a1[16] = v20;
    operator delete(v20);
  }
  __int16 v21 = (void *)a1[12];
  if (v21)
  {
    a1[13] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)a1[9];
  if (v22)
  {
    a1[10] = v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)a1[6];
  if (v23)
  {
    a1[7] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)a1[3];
  if (v24)
  {
    a1[4] = v24;
    operator delete(v24);
  }
  return a1;
}

BOOL sub_21681E598(unsigned int *a1, void (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a1 + 6);
  if (((*((void *)a1 + 7) - v6) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - missing face-verts", "MISSING_FACE_VERTS");
    a2(3, __str, a3);
    BOOL v60 = 1;
    goto LABEL_64;
  }
  uint64_t v7 = *((void *)a1 + 36);
  if (((*((void *)a1 + 37) - v7) & 0x3FFFFFFFCLL) == 0)
  {
    BOOL v60 = a2 != 0;
LABEL_64:
    BOOL v61 = 0;
    if (!v60 || ((*((void *)a1 + 37) - *((void *)a1 + 36)) & 0x3FFFFFFFCLL) != 0) {
      return v61;
    }
    snprintf(__str, 0x400uLL, "%s - missing vert-faces", "MISSING_VERT_FACES");
    a2(4, __str, a3);
    return 0;
  }
  uint64_t v8 = *a1;
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    while (1)
    {
      size_t v10 = (unsigned int *)(*((void *)a1 + 3) + 8 * v9);
      uint64_t v11 = *v10;
      if ((int)v11 >= 1) {
        break;
      }
LABEL_14:
      if (++v9 == v8) {
        goto LABEL_15;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = v6 + 4 * (int)v10[1];
    uint64_t v14 = *((void *)a1 + 33);
    while (1)
    {
      uint64_t v15 = *(int *)(v13 + 4 * v12);
      uint64_t v16 = *(unsigned int *)(v14 + 8 * v15);
      if ((int)v16 < 1) {
        break;
      }
      uint64_t v17 = *(int *)(v14 + 8 * v15 + 4);
      uint64_t v18 = (int *)(v7 + 4 * v17);
      uint64_t v19 = (unsigned __int16 *)(*((void *)a1 + 39) + 2 * v17);
      while (1)
      {
        int v20 = *v18++;
        if (v9 == v20 && v12 == *v19) {
          break;
        }
        ++v19;
        if (!--v16) {
          goto LABEL_61;
        }
      }
      if (++v12 == v11) {
        goto LABEL_14;
      }
    }
LABEL_61:
    if (a2)
    {
      snprintf(__str, 0x400uLL, "%s - face %d correlation of vert %d failed", "FAILED_CORRELATION_FACE_VERT", v9, v12);
      a2(7, __str, a3);
    }
    return 0;
  }
LABEL_15:
  uint64_t v21 = *((void *)a1 + 21);
  if (((*((void *)a1 + 22) - v21) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - missing edge-faces", "MISSING_EDGE_FACES");
    a2(0, __str, a3);
    BOOL v63 = 1;
    goto LABEL_74;
  }
  uint64_t v22 = *((void *)a1 + 9);
  if (((*((void *)a1 + 10) - v22) & 0x3FFFFFFFCLL) == 0)
  {
    BOOL v63 = a2 != 0;
LABEL_74:
    BOOL v61 = 0;
    if (!v63 || ((*((void *)a1 + 10) - *((void *)a1 + 9)) & 0x3FFFFFFFCLL) != 0) {
      return v61;
    }
    snprintf(__str, 0x400uLL, "%s - missing face-edges", "MISSING_FACE_EDGES");
    a2(2, __str, a3);
    return 0;
  }
  if ((int)v8 >= 1)
  {
    uint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = (unsigned int *)(*((void *)a1 + 3) + 8 * v23);
      uint64_t v25 = *v24;
      if ((int)v25 >= 1) {
        break;
      }
LABEL_28:
      if (++v23 == v8) {
        goto LABEL_29;
      }
    }
    uint64_t v26 = 0;
    uint64_t v27 = v22 + 4 * (int)v24[1];
    uint64_t v28 = *((void *)a1 + 18);
    while (1)
    {
      uint64_t v29 = *(int *)(v27 + 4 * v26);
      uint64_t v30 = *(unsigned int *)(v28 + 8 * v29);
      if ((int)v30 < 1) {
        break;
      }
      uint64_t v31 = *(int *)(v28 + 8 * v29 + 4);
      unint64_t v32 = (int *)(v21 + 4 * v31);
      unint64_t v33 = (unsigned __int16 *)(*((void *)a1 + 24) + 2 * v31);
      while (1)
      {
        int v34 = *v32++;
        if (v23 == v34 && v26 == *v33) {
          break;
        }
        ++v33;
        if (!--v30) {
          goto LABEL_71;
        }
      }
      if (++v26 == v25) {
        goto LABEL_28;
      }
    }
LABEL_71:
    if (a2)
    {
      snprintf(__str, 0x400uLL, "%s - face %d correlation of edge %d failed", "FAILED_CORRELATION_FACE_EDGE", v23, v26);
      a2(8, __str, a3);
    }
    return 0;
  }
LABEL_29:
  uint64_t v35 = *((void *)a1 + 15);
  if (((*((void *)a1 + 16) - v35) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - missing edge-verts", "MISSING_EDGE_VERTS");
    a2(1, __str, a3);
    BOOL v64 = 1;
    goto LABEL_82;
  }
  uint64_t v36 = *((void *)a1 + 45);
  if (((*((void *)a1 + 46) - v36) & 0x3FFFFFFFCLL) == 0)
  {
    BOOL v64 = a2 != 0;
LABEL_82:
    BOOL v61 = 0;
    if (!v64 || ((*((void *)a1 + 46) - *((void *)a1 + 45)) & 0x3FFFFFFFCLL) != 0) {
      return v61;
    }
    snprintf(__str, 0x400uLL, "%s - missing vert-edges", "MISSING_VERT_EDGES");
    a2(5, __str, a3);
    return 0;
  }
  uint64_t v37 = a1[1];
  if ((int)v37 < 1) {
    goto LABEL_42;
  }
  uint64_t v38 = 0;
  uint64_t v39 = *((void *)a1 + 42);
  do
  {
    uint64_t v40 = 0;
    char v41 = 1;
    do
    {
      char v42 = v41;
      uint64_t v43 = *(int *)(v35 + 8 * v38 + 4 * v40);
      uint64_t v44 = *(unsigned int *)(v39 + 8 * v43);
      if ((int)v44 < 1)
      {
LABEL_79:
        if (a2)
        {
          snprintf(__str, 0x400uLL, "%s - edge %d correlation of vert %d failed", "FAILED_CORRELATION_FACE_VERT", v38, v40);
          a2(7, __str, a3);
        }
        return 0;
      }
      uint64_t v45 = *(int *)(v39 + 8 * v43 + 4);
      uint64_t v46 = (int *)(v36 + 4 * v45);
      uint64_t v47 = (unsigned __int16 *)(*((void *)a1 + 48) + 2 * v45);
      while (1)
      {
        int v48 = *v46++;
        if (v38 == v48 && v40 == *v47) {
          break;
        }
        ++v47;
        if (!--v44) {
          goto LABEL_79;
        }
      }
      char v41 = 0;
      uint64_t v40 = 1;
    }
    while ((v42 & 1) != 0);
    ++v38;
  }
  while (v38 != v37);
LABEL_42:
  unsigned int v49 = 2 * a1[5];
  int v71 = &v72;
  std::string __p = 0;
  if (v49 >= 0x21)
  {
    std::string __p = operator new(4 * v49);
    int v71 = (uint64_t *)__p;
  }
  if ((int)a1[2] >= 1)
  {
    for (uint64_t i = 0; i < (int)a1[2]; ++i)
    {
      if ((*(_WORD *)(*((void *)a1 + 54) + 2 * i) & 0x801) == 0)
      {
        uint64_t v51 = *((void *)a1 + 33);
        uint64_t v52 = (8 * i) | 4;
        uint64_t v53 = *(int *)(v51 + v52);
        uint64_t v54 = *((void *)a1 + 36);
        uint64_t v55 = *(int *)(v51 + 8 * i);
        uint64_t v56 = *((void *)a1 + 42);
        uint64_t v69 = *(int *)(v56 + v52);
        uint64_t v70 = *((void *)a1 + 45);
        uint64_t v57 = *(unsigned int *)(v56 + 8 * i);
        if (!sub_21681ED98(a1, i, v71, (int *)v71 + v55))
        {
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d cannot orient incident faces and edges", "FAILED_ORIENTATION_INCIDENT_FACES_EDGES", i);
            a2(11, __str, a3);
          }
          goto LABEL_96;
        }
        if ((int)v55 >= 1)
        {
          uint64_t v58 = 0;
          while (*(_DWORD *)(v54 + 4 * v53 + 4 * v58) == *((_DWORD *)v71 + v58))
          {
            if (v55 == ++v58) {
              goto LABEL_54;
            }
          }
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident face %d", "FAILED_ORIENTATION_INCIDENT_FACE", i, v58);
            a2(10, __str, a3);
          }
LABEL_96:
          BOOL v61 = 0;
          goto LABEL_102;
        }
LABEL_54:
        if ((int)v57 >= 1)
        {
          uint64_t v59 = 0;
          while (*(_DWORD *)(v70 + 4 * v69 + 4 * v59) == *((_DWORD *)v71 + v55 + v59))
          {
            if (v57 == ++v59) {
              goto LABEL_47;
            }
          }
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident edge %d", "FAILED_ORIENTATION_INCIDENT_EDGE", i, v59);
            a2(9, __str, a3);
          }
          goto LABEL_96;
        }
      }
LABEL_47:
      ;
    }
  }
  unint64_t v65 = a1[1];
  if ((int)v65 < 1)
  {
    BOOL v61 = 1;
    goto LABEL_102;
  }
  uint64_t v66 = 0;
  BOOL v61 = 0;
  uint64_t v67 = 4;
  while (2)
  {
    if (*(unsigned char *)(*((void *)a1 + 30) + v66))
    {
LABEL_90:
      BOOL v61 = ++v66 >= v65;
      v67 += 8;
      if (v65 == v66) {
        goto LABEL_102;
      }
      continue;
    }
    break;
  }
  if (*(_DWORD *)(*((void *)a1 + 15) + v67 - 4) != *(_DWORD *)(*((void *)a1 + 15) + v67))
  {
    int v68 = *(_DWORD *)(*((void *)a1 + 18) + v67 - 4);
    if ((v68 - 3) <= 0xFFFFFFFD)
    {
      if (a2)
      {
        snprintf(__str, 0x400uLL, "%s - edge %d with %d incident faces not tagged non-manifold", "NON_MANIFOLD_EDGE", v66, v68);
        a2(13, __str, a3);
      }
      goto LABEL_102;
    }
    goto LABEL_90;
  }
  if (a2)
  {
    snprintf(__str, 0x400uLL, "%s - Error in euint64_t Index = %d:  degenerate edge not tagged marked non-manifold", "DEGENERATE_EDGE", v66);
    a2(12, __str, a3);
  }
LABEL_102:
  operator delete(__p);
  return v61;
}

void sub_21681ED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
}

uint64_t sub_21681ED98(void *a1, __int32 __c, _DWORD *a3, int *a4)
{
  uint64_t v5 = a1[42];
  uint64_t v6 = 8 * __c;
  uint64_t v7 = *(unsigned int *)(v5 + v6);
  uint64_t v8 = a1[33];
  int v9 = *(_DWORD *)(v8 + v6);
  if (v9) {
    BOOL v10 = (int)v7 < 2;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && (int)v7 - v9 <= 1)
  {
    unint64_t v15 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
    int v60 = v9;
    uint64_t v58 = v7;
    if (v7 == v9)
    {
      uint64_t v16 = *(int *)(a1[36] + 4 * *(int *)(v8 + v15));
      int v17 = (2 * v16) | 1;
      uint64_t v18 = a1[3];
      uint64_t v19 = (__int32 *)(a1[6] + 4 * *(int *)(v18 + 4 * v17));
      size_t v20 = *(int *)(v18 + 8 * v16);
      uint64_t v21 = &v19[v20];
      uint64_t v22 = wmemchr(v19, __c, v20);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = v21;
      }
      unint64_t v24 = (unint64_t)((char *)v23 - (char *)v19) >> 2;
      int v25 = *(_DWORD *)(a1[9] + 4 * *(int *)(a1[3] + 4 * v17) + 4 * (int)v24);
    }
    else
    {
      LODWORD(v24) = 0;
      uint64_t v26 = (int *)(a1[45] + 4 * *(int *)(v5 + v15));
      LODWORD(v16) = -1;
      int v25 = -1;
      do
      {
        uint64_t v28 = *v26++;
        int v27 = v28;
        uint64_t v29 = a1[18];
        if (*(_DWORD *)(v29 + 8 * v28) == 1)
        {
          uint64_t v16 = *(int *)(a1[21] + 4 * *(int *)(v29 + 4 * ((2 * v27) | 1)));
          int v30 = (2 * v16) | 1;
          uint64_t v31 = a1[3];
          unint64_t v32 = (__int32 *)(a1[6] + 4 * *(int *)(v31 + 4 * v30));
          size_t v33 = *(int *)(v31 + 8 * v16);
          int v34 = &v32[v33];
          uint64_t v35 = wmemchr(v32, __c, v33);
          uint64_t v36 = v35 ? v35 : v34;
          unint64_t v24 = (unint64_t)((char *)v36 - (char *)v32) >> 2;
          int v37 = *(_DWORD *)(a1[9] + 4 * *(int *)(a1[3] + 4 * v30) + 4 * (int)v24);
          int v25 = v27;
          if (v27 == v37) {
            break;
          }
        }
        --v7;
      }
      while (v7);
    }
    *a3 = v16;
    *a4 = v25;
    uint64_t v38 = a4 + 1;
    uint64_t v39 = v58 - 1;
    int v40 = 1;
    __int32 v41 = v25;
    LODWORD(v42) = v24;
    int v43 = v60;
    while (1)
    {
      __int32 v44 = v41;
      uint64_t v45 = a1[3];
      int v46 = *(_DWORD *)(v45 + 8 * (int)v16);
      uint64_t v47 = a1[9];
      if (v42) {
        int v46 = v42;
      }
      __int32 v41 = *(_DWORD *)(v47 + 4 * *(int *)(v45 + 8 * v16 + 4) + 4 * (v46 - 1));
      if (v41 == v44 || v41 == v25) {
        break;
      }
      __int32 *v38 = v41;
      if (v40 < v43)
      {
        uint64_t v49 = a1[18];
        uint64_t v50 = (int *)(a1[21] + 4 * *(int *)(v49 + 4 * ((2 * v41) | 1)));
        int v51 = *(_DWORD *)(v49 + 8 * v41);
        if (v51 == 1)
        {
          int v52 = *v50;
          if (*v50 == v16) {
            return 0;
          }
        }
        else
        {
          if (!v51) {
            return 0;
          }
          int v52 = *v50;
        }
        uint64_t v16 = v50[v52 == v16];
        uint64_t v53 = (__int32 *)(v47 + 4 * *(int *)(v45 + 4 * (int)((2 * v16) | 1)));
        size_t v54 = *(int *)(v45 + 8 * v16);
        uint64_t v55 = &v53[v54];
        uint64_t v56 = wmemchr(v53, v41, v54);
        int v43 = v60;
        if (v56) {
          uint64_t v57 = v56;
        }
        else {
          uint64_t v57 = v55;
        }
        unint64_t v42 = (unint64_t)((char *)v57 - (char *)v53) >> 2;
        a3[v40++] = v16;
      }
      ++v38;
      if (!--v39) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_21681F05C(void *a1, int a2, int a3)
{
  uint64_t v3 = a1[42];
  uint64_t v4 = (int *)(a1[45] + 4 * *(int *)(v3 + 8 * a2 + 4));
  uint64_t v5 = *(unsigned int *)(v3 + 8 * a2);
  if (a2 == a3)
  {
    if ((int)v5 >= 1)
    {
      uint64_t v6 = a1[15];
      while (1)
      {
        uint64_t v8 = *v4++;
        uint64_t result = v8;
        if (*(_DWORD *)(v6 + 8 * v8) == *(_DWORD *)(v6 + 8 * v8 + 4)) {
          break;
        }
        if (!--v5) {
          return 0xFFFFFFFFLL;
        }
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if ((int)v5 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = a1[15];
  while (1)
  {
    uint64_t v10 = *v4++;
    uint64_t result = v10;
    uint64_t v11 = (_DWORD *)(v9 + 8 * v10);
    if (*v11 == a3 || v11[1] == a3) {
      break;
    }
    if (!--v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL sub_21681F0F0(int *a1)
{
  int v2 = a1[2];
  unint64_t v3 = *a1;
  uint64_t v4 = a1 + 66;
  sub_21681C000((uint64_t)(a1 + 66), 2 * v2);
  sub_21681C000((uint64_t)(a1 + 84), 2 * v2);
  sub_216820908((uint64_t)(a1 + 102), v2);
  int v150 = a1 + 108;
  sub_216820938((uint64_t)(a1 + 108), v2);
  bzero(*((void **)a1 + 54), 2 * a1[2]);
  *a1 = v3;
  sub_21681C000((uint64_t)(a1 + 6), 2 * v3);
  uint64_t v5 = (char *)*((void *)a1 + 12);
  unint64_t v6 = *((void *)a1 + 13) - (void)v5;
  if (v3 <= v6)
  {
    if (v3 < v6) {
      *((void *)a1 + 13) = &v5[v3];
    }
  }
  else
  {
    sub_21681E2A8((void **)a1 + 12, v3 - v6);
    uint64_t v5 = (char *)*((void *)a1 + 12);
  }
  bzero(v5, *a1);
  a1[1] = 0;
  sub_21681C000((uint64_t)(a1 + 36), 0);
  sub_216820908((uint64_t)(a1 + 54), 0);
  uint64_t v7 = *((void *)a1 + 30);
  uint64_t v151 = (void **)(a1 + 60);
  if (*((void *)a1 + 31) != v7) {
    *((void *)a1 + 31) = v7;
  }
  sub_21681C000((uint64_t)(a1 + 18), (int)((uint64_t)(*((void *)a1 + 7) - *((void *)a1 + 6)) >> 2));
  unint64_t v8 = 4 * v2;
  uint64_t v157 = (void **)(a1 + 30);
  sub_21681FE20((void **)a1 + 15, v8);
  sub_21681FE20((void **)a1 + 21, v8);
  sub_21681FE20((void **)a1 + 18, v8);
  int v9 = 2;
  uint64_t v175 = a1 + 36;
  int v176 = a1 + 42;
  v178[0] = 0;
  v178[1] = 0;
  long long v177 = (uint64_t *)v178;
  uint64_t v10 = *((void *)a1 + 18);
  unint64_t v11 = (unint64_t)(*((void *)a1 + 19) - v10) >> 2;
  if ((v11 & 0x80000000) == 0) {
    int v12 = (unint64_t)(*((void *)a1 + 19) - v10) >> 2;
  }
  else {
    int v12 = v11 + 1;
  }
  int v13 = v12 >> 1;
  int v173 = v13;
  int v174 = 2;
  if ((int)v11 >= 2)
  {
    uint64_t v14 = 0;
    unint64_t v15 = (_DWORD *)(v10 + 4);
    do
    {
      *(v15 - 1) = 0;
      *unint64_t v15 = v174 * v14;
      v15 += 2;
      ++v14;
      int v13 = v173;
    }
    while (v14 < v173);
    int v9 = v174;
  }
  sub_21681C000((uint64_t)(a1 + 42), v13 * v9);
  int v16 = 6;
  uint64_t v169 = v4;
  uint64_t v170 = a1 + 72;
  v172[0] = 0;
  v172[1] = 0;
  uint64_t v171 = v172;
  uint64_t v17 = *((void *)a1 + 33);
  unint64_t v18 = (unint64_t)(*((void *)a1 + 34) - v17) >> 2;
  if ((v18 & 0x80000000) == 0) {
    int v19 = (unint64_t)(*((void *)a1 + 34) - v17) >> 2;
  }
  else {
    int v19 = v18 + 1;
  }
  int v20 = v19 >> 1;
  int v167 = v20;
  int v168 = 6;
  if ((int)v18 >= 2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (_DWORD *)(v17 + 4);
    do
    {
      *(v22 - 1) = 0;
      *uint64_t v22 = v168 * v21;
      v22 += 2;
      ++v21;
      int v20 = v167;
    }
    while (v21 < v167);
    int v16 = v168;
  }
  sub_21681C000((uint64_t)(a1 + 72), v20 * v16);
  int v23 = 6;
  uint64_t v163 = a1 + 84;
  int v164 = a1 + 90;
  v166[0] = 0;
  v166[1] = 0;
  long long v165 = (uint64_t *)v166;
  uint64_t v24 = *((void *)a1 + 42);
  unint64_t v25 = (unint64_t)(*((void *)a1 + 43) - v24) >> 2;
  if ((v25 & 0x80000000) == 0) {
    int v26 = (unint64_t)(*((void *)a1 + 43) - v24) >> 2;
  }
  else {
    int v26 = v25 + 1;
  }
  int v27 = v26 >> 1;
  int v161 = v27;
  int v162 = 6;
  if ((int)v25 >= 2)
  {
    uint64_t v28 = 0;
    uint64_t v29 = (_DWORD *)(v24 + 4);
    do
    {
      *(v29 - 1) = 0;
      *uint64_t v29 = v162 * v28;
      v29 += 2;
      ++v28;
      int v27 = v161;
    }
    while (v28 < v161);
    int v23 = v162;
  }
  sub_21681C000((uint64_t)(a1 + 90), v27 * v23);
  std::string __p = 0;
  long long v159 = 0;
  uint64_t v160 = 0;
  if ((int)v3 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v153 = (int **)(a1 + 34);
    uint64_t v152 = v3;
    while (1)
    {
      uint64_t v31 = (unsigned int *)(*((void *)a1 + 3) + 8 * v30);
      uint64_t v32 = *v31;
      if ((int)v32 >= 1) {
        break;
      }
LABEL_196:
      if (++v30 == v152) {
        goto LABEL_197;
      }
    }
    uint64_t v33 = 0;
    uint64_t v34 = (int)v31[1];
    uint64_t v155 = v32;
    uint64_t v156 = *((void *)a1 + 6) + 4 * v34;
    uint64_t v154 = *((void *)a1 + 9) + 4 * v34;
    while (1)
    {
      int v35 = *(_DWORD *)(v156 + 4 * v33);
      uint64_t v36 = v33 + 1;
      uint64_t v37 = (v33 + 1);
      if (v33 + 1 == v32) {
        uint64_t v37 = 0;
      }
      int v38 = *(_DWORD *)(v156 + 4 * v37);
      if (v35 == v38)
      {
        uint64_t v39 = v159;
        if (v159 < v160)
        {
          *(_DWORD *)long long v159 = a1[1];
          int v40 = v159 + 4;
LABEL_63:
          long long v159 = v40;
LABEL_64:
          LODWORD(v5sub_216817474((void **)this, 0) = a1[1];
          a1[1] = v50 + 1;
          int v60 = (int *)*((void *)a1 + 16);
          uint64_t v59 = (int *)*((void *)a1 + 17);
          if (v60 >= v59)
          {
            unsigned int v62 = (int *)*v157;
            uint64_t v63 = ((char *)v60 - (unsigned char *)*v157) >> 2;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62) {
              goto LABEL_216;
            }
            uint64_t v65 = (char *)v59 - (char *)v62;
            if (v65 >> 1 > v64) {
              unint64_t v64 = v65 >> 1;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v66 = v64;
            }
            if (v66)
            {
              uint64_t v67 = (char *)sub_21677EA28((uint64_t)v153, v66);
              unsigned int v62 = (int *)*((void *)a1 + 15);
              int v60 = (int *)*((void *)a1 + 16);
            }
            else
            {
              uint64_t v67 = 0;
            }
            int v68 = (int *)&v67[4 * v63];
            *int v68 = v35;
            BOOL v61 = v68 + 1;
            while (v60 != v62)
            {
              int v69 = *--v60;
              *--int v68 = v69;
            }
            uint64_t v59 = (int *)&v67[4 * v66];
            *((void *)a1 + 15) = v68;
            *((void *)a1 + 16) = v61;
            *((void *)a1 + 17) = v59;
            if (v62)
            {
              operator delete(v62);
              uint64_t v59 = *v153;
            }
          }
          else
          {
            *int v60 = v35;
            BOOL v61 = v60 + 1;
          }
          *((void *)a1 + 16) = v61;
          if (v61 >= v59)
          {
            int v71 = (int *)*v157;
            uint64_t v72 = ((char *)v61 - (unsigned char *)*v157) >> 2;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 62) {
              goto LABEL_216;
            }
            uint64_t v74 = (char *)v59 - (char *)v71;
            if (v74 >> 1 > v73) {
              unint64_t v73 = v74 >> 1;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              uint64_t v76 = (char *)sub_21677EA28((uint64_t)v153, v75);
              int v71 = (int *)*((void *)a1 + 15);
              BOOL v61 = (int *)*((void *)a1 + 16);
            }
            else
            {
              uint64_t v76 = 0;
            }
            uint64_t v77 = (int *)&v76[4 * v72];
            *uint64_t v77 = v38;
            uint64_t v70 = v77 + 1;
            while (v61 != v71)
            {
              int v78 = *--v61;
              *--uint64_t v77 = v78;
            }
            *((void *)a1 + 15) = v77;
            *((void *)a1 + 16) = v70;
            *((void *)a1 + 17) = &v76[4 * v75];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *BOOL v61 = v38;
            uint64_t v70 = v61 + 1;
          }
          *((void *)a1 + 16) = v70;
          uint64_t v79 = v175;
          uint64_t v80 = (int *)*((void *)v175 + 1);
          unint64_t v81 = *((void *)v175 + 2);
          if ((unint64_t)v80 >= v81)
          {
            uint64_t v83 = *(int **)v175;
            uint64_t v84 = ((uint64_t)v80 - *(void *)v175) >> 2;
            unint64_t v85 = v84 + 1;
            if ((unint64_t)(v84 + 1) >> 62) {
              goto LABEL_216;
            }
            uint64_t v86 = v81 - (void)v83;
            if (v86 >> 1 > v85) {
              unint64_t v85 = v86 >> 1;
            }
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v87 = v85;
            }
            if (v87)
            {
              uint64_t v88 = (char *)sub_21677EA28((uint64_t)(v175 + 4), v87);
              uint64_t v83 = *(int **)v79;
              uint64_t v80 = (int *)*((void *)v79 + 1);
            }
            else
            {
              uint64_t v88 = 0;
            }
            uint64_t v89 = &v88[4 * v84];
            *(_DWORD *)uint64_t v89 = 0;
            uint64_t v82 = v89 + 4;
            while (v80 != v83)
            {
              int v90 = *--v80;
              *((_DWORD *)v89 - 1) = v90;
              v89 -= 4;
            }
            *(void *)uint64_t v79 = v89;
            *((void *)v79 + 1) = v82;
            *((void *)v79 + 2) = &v88[4 * v87];
            if (v83) {
              operator delete(v83);
            }
          }
          else
          {
            *uint64_t v80 = 0;
            uint64_t v82 = v80 + 1;
          }
          *((void *)v79 + 1) = v82;
          uint64_t v91 = v175;
          int v92 = v174 * v173;
          uint64_t v93 = (int *)*((void *)v175 + 1);
          unint64_t v94 = *((void *)v175 + 2);
          if ((unint64_t)v93 >= v94)
          {
            uint64_t v96 = *(int **)v175;
            uint64_t v97 = ((uint64_t)v93 - *(void *)v175) >> 2;
            unint64_t v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 62) {
LABEL_216:
            }
              sub_21677CB10();
            uint64_t v99 = v94 - (void)v96;
            if (v99 >> 1 > v98) {
              unint64_t v98 = v99 >> 1;
            }
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v98;
            }
            if (v100)
            {
              int v101 = (char *)sub_21677EA28((uint64_t)(v175 + 4), v100);
              uint64_t v96 = *(int **)v91;
              uint64_t v93 = (int *)*((void *)v91 + 1);
            }
            else
            {
              int v101 = 0;
            }
            int v102 = (int *)&v101[4 * v97];
            *int v102 = v92;
            uint64_t v95 = v102 + 1;
            while (v93 != v96)
            {
              int v103 = *--v93;
              *--int v102 = v103;
            }
            *(void *)uint64_t v91 = v102;
            *((void *)v91 + 1) = v95;
            *((void *)v91 + 2) = &v101[4 * v100];
            if (v96) {
              operator delete(v96);
            }
          }
          else
          {
            *uint64_t v93 = v92;
            uint64_t v95 = v93 + 1;
          }
          *((void *)v91 + 1) = v95;
          uint64_t v104 = ++v173;
          sub_21681C000((uint64_t)v176, v174 * v104);
          sub_21681FEC8((uint64_t)&v161, v35, v50);
          sub_21681FEC8((uint64_t)&v161, v38, v50);
          goto LABEL_129;
        }
        __int32 v44 = __p;
        uint64_t v45 = (v159 - __p) >> 2;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62) {
          goto LABEL_216;
        }
        uint64_t v47 = v160 - __p;
        if ((v160 - __p) >> 1 > v46) {
          unint64_t v46 = v47 >> 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          uint64_t v49 = (char *)sub_21677EA28((uint64_t)&v160, v48);
          __int32 v44 = __p;
          uint64_t v39 = v159;
        }
        else
        {
          uint64_t v49 = 0;
        }
        uint64_t v56 = &v49[4 * v45];
        *(_DWORD *)uint64_t v56 = a1[1];
        int v40 = v56 + 4;
        while (v39 != v44)
        {
          int v57 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        uint64_t v58 = &v49[4 * v48];
        std::string __p = v56;
        goto LABEL_61;
      }
      int v179 = *(_DWORD *)(v156 + 4 * v33);
      uint64_t v41 = *(unsigned int *)(*v163 + 8 * v35);
      if ((int)v41 <= v162)
      {
        int v43 = (char *)(*v164 + 4 * *(int *)(*v163 + 4 * ((2 * v35) | 1)));
      }
      else
      {
        v180[0] = &v179;
        unint64_t v42 = sub_216820BE0(&v165, &v179, (uint64_t)&unk_21740B778, v180);
        int v43 = (char *)v42[5];
        uint64_t v41 = ((unint64_t)((char *)v42[6] - v43) >> 2);
      }
      if ((int)v41 < 1) {
        goto LABEL_64;
      }
      while (1)
      {
        uint64_t v51 = *(int *)v43;
        v43 += 4;
        uint64_t v50 = v51;
        int v52 = (char *)*v157 + 8 * v51;
        if (*v52 == v38 || v52[1] == v38) {
          break;
        }
        if (!--v41) {
          goto LABEL_64;
        }
      }
      if (v50 == -1) {
        goto LABEL_64;
      }
      int v179 = v50;
      LODWORD(v53) = *(_DWORD *)(*(void *)v175 + 8 * v50);
      if ((int)v53 <= v174)
      {
        uint64_t v55 = *v176 + 4 * *(int *)(*(void *)v175 + 4 * (int)((2 * v50) | 1));
      }
      else
      {
        v180[0] = &v179;
        size_t v54 = sub_216820BE0(&v177, &v179, (uint64_t)&unk_21740B778, v180);
        uint64_t v55 = (uint64_t)v54[5];
        unint64_t v53 = ((unint64_t)v54[6] - v55) >> 2;
      }
      if (v30 == *(_DWORD *)(v55 + 4 * ((int)v53 - 1)))
      {
        uint64_t v106 = v159;
        char v105 = v160;
        if (v159 >= v160)
        {
          BOOL v115 = __p;
          uint64_t v116 = (v159 - __p) >> 2;
          unint64_t v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 62) {
            goto LABEL_217;
          }
          uint64_t v118 = v160 - __p;
          if ((v160 - __p) >> 1 > v117) {
            unint64_t v117 = v118 >> 1;
          }
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v119 = v117;
          }
          if (v119)
          {
            int v120 = (char *)sub_21677EA28((uint64_t)&v160, v119);
            BOOL v115 = __p;
            uint64_t v106 = v159;
          }
          else
          {
            int v120 = 0;
          }
          uint64_t v122 = &v120[4 * v116];
          *(_DWORD *)uint64_t v122 = v50;
          char v107 = v122 + 4;
          while (v106 != v115)
          {
            int v123 = *((_DWORD *)v106 - 1);
            v106 -= 4;
            *((_DWORD *)v122 - 1) = v123;
            v122 -= 4;
          }
          char v105 = &v120[4 * v119];
          std::string __p = v122;
          uint64_t v160 = v105;
          if (v115)
          {
            operator delete(v115);
            char v105 = v160;
          }
        }
        else
        {
          *(_DWORD *)long long v159 = v50;
          char v107 = v159 + 4;
        }
        if (v107 < v105)
        {
          *(_DWORD *)char v107 = a1[1];
          int v40 = v107 + 4;
          goto LABEL_63;
        }
        __int32 v44 = __p;
        uint64_t v124 = (v107 - __p) >> 2;
        unint64_t v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 62) {
          goto LABEL_217;
        }
        uint64_t v126 = v105 - __p;
        if (v126 >> 1 > v125) {
          unint64_t v125 = v126 >> 1;
        }
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v125;
        }
        if (v127)
        {
          BOOL v128 = (char *)sub_21677EA28((uint64_t)&v160, v127);
          __int32 v44 = __p;
        }
        else
        {
          BOOL v128 = 0;
        }
        unsigned int v129 = &v128[4 * v124];
        *(_DWORD *)unsigned int v129 = a1[1];
        int v40 = v129 + 4;
        while (v107 != v44)
        {
          int v130 = *((_DWORD *)v107 - 1);
          v107 -= 4;
          *((_DWORD *)v129 - 1) = v130;
          v129 -= 4;
        }
        uint64_t v58 = &v128[4 * v127];
        std::string __p = v129;
LABEL_61:
        uint64_t v160 = v58;
        if (v44) {
          operator delete(v44);
        }
        goto LABEL_63;
      }
      if ((int)v53 >= 2) {
        break;
      }
      if (v35 == *((_DWORD *)*v157 + 2 * v50))
      {
        int v108 = v159;
        if (v159 < v160)
        {
LABEL_155:
          *(_DWORD *)int v108 = v50;
          char v121 = v108 + 4;
LABEL_195:
          long long v159 = v121;
          goto LABEL_129;
        }
        int v109 = __p;
        uint64_t v131 = (v159 - __p) >> 2;
        unint64_t v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 62) {
LABEL_217:
        }
          sub_21677CB10();
        uint64_t v133 = v160 - __p;
        if ((v160 - __p) >> 1 > v132) {
          unint64_t v132 = v133 >> 1;
        }
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v132;
        }
        if (v113)
        {
          int v114 = (char *)sub_21677EA28((uint64_t)&v160, v113);
          int v109 = __p;
          int v108 = v159;
        }
        else
        {
          int v114 = 0;
        }
        int v134 = &v114[4 * v131];
        *(_DWORD *)int v134 = v50;
        char v121 = v134 + 4;
        while (v108 != v109)
        {
          int v136 = *((_DWORD *)v108 - 1);
          v108 -= 4;
          *((_DWORD *)v134 - 1) = v136;
          v134 -= 4;
        }
LABEL_193:
        std::string __p = v134;
        uint64_t v160 = &v114[4 * v113];
        if (v109) {
          operator delete(v109);
        }
        goto LABEL_195;
      }
LABEL_129:
      sub_21681FEC8((uint64_t)&v173, v50, v30);
      sub_21681FEC8((uint64_t)&v167, v35, v30);
      uint64_t v32 = v155;
      *(_DWORD *)(v154 + 4 * v33++) = v50;
      if (v36 == v155) {
        goto LABEL_196;
      }
    }
    int v108 = v159;
    if (v159 < v160) {
      goto LABEL_155;
    }
    int v109 = __p;
    uint64_t v110 = (v159 - __p) >> 2;
    unint64_t v111 = v110 + 1;
    if ((unint64_t)(v110 + 1) >> 62) {
      goto LABEL_217;
    }
    uint64_t v112 = v160 - __p;
    if ((v160 - __p) >> 1 > v111) {
      unint64_t v111 = v112 >> 1;
    }
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v113 = v111;
    }
    if (v113)
    {
      int v114 = (char *)sub_21677EA28((uint64_t)&v160, v113);
      int v109 = __p;
      int v108 = v159;
    }
    else
    {
      int v114 = 0;
    }
    int v134 = &v114[4 * v110];
    *(_DWORD *)int v134 = v50;
    char v121 = v134 + 4;
    while (v108 != v109)
    {
      int v135 = *((_DWORD *)v108 - 1);
      v108 -= 4;
      *((_DWORD *)v134 - 1) = v135;
      v134 -= 4;
    }
    goto LABEL_193;
  }
LABEL_197:
  int v137 = sub_216820080(&v173);
  int v138 = sub_216820080(&v167);
  int v139 = sub_216820080(&v161);
  int v140 = a1[5];
  if (v138 > v140) {
    int v140 = v138;
  }
  if (v139 <= v140) {
    int v141 = v140;
  }
  else {
    int v141 = v139;
  }
  a1[4] = v137;
  a1[5] = v141;
  if (v141 < 0x10000)
  {
    unint64_t v142 = a1[1];
    sub_21681C000((uint64_t)(a1 + 36), 2 * v142);
    sub_216820908((uint64_t)(a1 + 54), v142);
    uint64_t v143 = *((void *)a1 + 30);
    unint64_t v144 = *((void *)a1 + 31) - v143;
    if (v142 <= v144)
    {
      if (v142 < v144) {
        *((void *)a1 + 31) = v143 + v142;
      }
    }
    else
    {
      sub_21681E2A8(v151, v142 - v144);
    }
    if ((int)v142 >= 1) {
      bzero(*((void **)a1 + 30), a1[1]);
    }
    int v145 = __p;
    if ((int)((unint64_t)(v159 - __p) >> 2) >= 1)
    {
      uint64_t v146 = 0;
      do
      {
        uint64_t v147 = *(int *)&v145[4 * v146];
        *((unsigned char *)*v151 + v147) |= 1u;
        uint64_t v148 = (int *)((char *)*v157 + 8 * v147);
        *(_WORD *)(*v150 + 2 * *v148) |= 1u;
        *(_WORD *)(*v150 + 2 * v148[1]) |= 1u;
        ++v146;
        int v145 = __p;
      }
      while (v146 < (int)((unint64_t)(v159 - __p) >> 2));
    }
    sub_216820314((uint64_t)a1);
    sub_216820380((uint64_t)a1);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_216820B7C((uint64_t)&v165, v166[0]);
  sub_216820B7C((uint64_t)&v171, v172[0]);
  sub_216820B7C((uint64_t)&v177, v178[0]);
  return v141 < 0x10000;
}

void sub_21681FDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  if (__p) {
    operator delete(__p);
  }
  sub_216820B7C(a17, a30);
  sub_216820B7C(a13, a36);
  sub_216820B7C(a15, *(void **)(v36 - 120));
  _Unwind_Resume(a1);
}

void sub_21681FE20(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_21677CB10();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_21677EA28(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    int v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    int v12 = v7;
    if (v11 != *a1)
    {
      int v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_21681FEC8(uint64_t a1, int a2, int a3)
{
  int v25 = a2;
  uint64_t v5 = **(void **)(a1 + 8);
  int v6 = *(_DWORD *)(v5 + 8 * a2);
  uint64_t v7 = *(int *)(v5 + 8 * a2 + 4);
  if (v6 >= *(_DWORD *)(a1 + 4))
  {
    int v26 = &v25;
    uint64_t v8 = sub_216820BE0((uint64_t **)(a1 + 24), &v25, (uint64_t)&unk_21740B778, &v26);
    int v9 = (void **)(v8 + 5);
    uint64_t v10 = *(int *)(a1 + 4);
    if (v6 <= (int)v10)
    {
      sub_21681C000((uint64_t)(v8 + 5), v10 + 1);
      memcpy(*v9, (const void *)(**(void **)(a1 + 16) + 4 * v7), 4 * *(int *)(a1 + 4));
      *((_DWORD *)*v9 + *(int *)(a1 + 4)) = a3;
    }
    else
    {
      unint64_t v11 = v8;
      uint64_t v12 = (uint64_t)(v8 + 7);
      int v13 = v8[7];
      uint64_t v14 = (char *)v8[6];
      if (v14 >= (char *)v13)
      {
        int v16 = (char *)*v9;
        uint64_t v17 = (v14 - (unsigned char *)*v9) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          sub_21677CB10();
        }
        uint64_t v19 = (char *)v13 - v16;
        if (v19 >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_21677EA28(v12, v20);
          int v16 = (char *)v11[5];
          uint64_t v14 = (char *)v11[6];
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = &v21[4 * v17];
        int v23 = (uint64_t *)&v21[4 * v20];
        *(_DWORD *)uint64_t v22 = a3;
        unint64_t v15 = (uint64_t *)(v22 + 4);
        while (v14 != v16)
        {
          int v24 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        v11[5] = (uint64_t *)v22;
        v11[6] = v15;
        v11[7] = v23;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v14 = a3;
        unint64_t v15 = (uint64_t *)(v14 + 4);
      }
      v11[6] = v15;
    }
  }
  else
  {
    *(_DWORD *)(**(void **)(a1 + 16) + 4 * ((int)v7 + v6)) = a3;
  }
  ++*(_DWORD *)(**(void **)(a1 + 8) + 8 * v25);
}

uint64_t sub_216820080(int *a1)
{
  int v2 = (int *)**((void **)a1 + 1);
  int v3 = *v2;
  LODWORD(v4) = *a1;
  if (*((void *)a1 + 5))
  {
    if ((int)v4 < 2)
    {
      char v5 = 0;
      uint64_t v8 = a1[1];
    }
    else
    {
      char v5 = 0;
      int v6 = v2 + 3;
      uint64_t v7 = 1;
      do
      {
        *int v6 = v3;
        uint64_t v8 = a1[1];
        uint64_t v4 = *a1;
        v5 |= v3 > (int)v8 * (int)v7;
        v3 += *(v6 - 1);
        ++v7;
        v6 += 2;
      }
      while (v7 < v4);
    }
    char v12 = v5 | (v3 > (int)v8 * (int)v4);
    std::string __p = 0;
    int v27 = 0;
    uint64_t v28 = 0;
    if (v5 & 1 | (v3 > (int)v8 * (int)v4))
    {
      sub_21681C000((uint64_t)&__p, v3);
      LODWORD(v4) = *a1;
      uint64_t v8 = a1[1];
      p_p = &__p;
    }
    else
    {
      p_p = (void **)*((void *)a1 + 2);
    }
    int v25 = 0;
    if ((int)v4 >= 1)
    {
      int v14 = 0;
      do
      {
        uint64_t v15 = **((void **)a1 + 1);
        uint64_t v16 = *(int *)(v15 + 8 * v14);
        uint64_t v17 = (char *)*p_p;
        uint64_t v18 = *(int *)(v15 + 8 * v14 + 4);
        int v19 = a1[1];
        if ((int)v16 <= v19)
        {
          unint64_t v20 = (uint64_t *)(**((void **)a1 + 2) + 4 * v19 * v14);
        }
        else
        {
          uint64_t v29 = &v25;
          unint64_t v20 = sub_216820BE0((uint64_t **)a1 + 3, &v25, (uint64_t)&unk_21740B778, &v29)[5];
          if ((int)v8 <= (int)v16) {
            uint64_t v8 = v16;
          }
          else {
            uint64_t v8 = v8;
          }
        }
        memmove(&v17[4 * v18], v20, 4 * v16);
        int v14 = v25 + 1;
        int v25 = v14;
      }
      while (v14 < *a1);
    }
    uint64_t v21 = *((void *)a1 + 2);
    if (v12)
    {
      uint64_t v22 = *(void **)v21;
      *(void *)uint64_t v21 = __p;
      *(void *)(v21 + 8) = v27;
      uint64_t v23 = *(void *)(v21 + 16);
      *(void *)(v21 + 16) = v28;
      std::string __p = v22;
      uint64_t v28 = v23;
      if (!v22) {
        return v8;
      }
      goto LABEL_29;
    }
    sub_21681C000(*((void *)a1 + 2), v3);
    uint64_t v22 = __p;
    if (__p)
    {
LABEL_29:
      int v27 = v22;
      operator delete(v22);
    }
  }
  else
  {
    if ((int)v4 < 2)
    {
      uint64_t v8 = *v2;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 1;
      LODWORD(v8) = *v2;
      do
      {
        uint64_t v11 = v2[v9 + 2];
        memmove((void *)(**((void **)a1 + 2) + 4 * v3), (const void *)(**((void **)a1 + 2) + 4 * v2[v9 + 3]), 4 * v11);
        int v2 = (int *)**((void **)a1 + 1);
        v2[v9 + 3] = v3;
        v3 += v11;
        if ((int)v8 <= (int)v11) {
          uint64_t v8 = v11;
        }
        else {
          uint64_t v8 = v8;
        }
        ++v10;
        v9 += 2;
      }
      while (v10 < *a1);
    }
    sub_21681C000(*((void *)a1 + 2), v3);
  }
  return v8;
}

void sub_2168202F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216820314(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    int v2 = (void *)result;
    for (uint64_t i = 0; i != v1; ++i)
    {
      uint64_t v4 = v2[54];
      if ((*(_WORD *)(v4 + 2 * i) & 1) == 0)
      {
        uint64_t result = sub_216820640(v2, i);
        if ((result & 1) == 0) {
          *(_WORD *)(v4 + 2 * i) |= 1u;
        }
      }
    }
  }
  return result;
}

void sub_216820380(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v52 = *(unsigned int *)(a1 + 4);
  sub_21681C030(a1 + 312, (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 2);
  sub_21681C030(a1 + 384, (uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 2);
  sub_21681C030(a1 + 192, (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 2);
  if ((int)v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = (unsigned int *)(*(void *)(a1 + 264) + 8 * i);
      uint64_t v5 = *v4;
      if ((int)v5 >= 1)
      {
        uint64_t v6 = (int)v4[1];
        uint64_t v7 = (int *)(*(void *)(a1 + 288) + 4 * v6);
        uint64_t v8 = (_WORD *)(*(void *)(a1 + 312) + 2 * v6);
        int v9 = -1;
        do
        {
          uint64_t v10 = *v7;
          if (v10 == v9) {
            uint64_t v11 = (unsigned __int16)*(v8 - 1) + 1;
          }
          else {
            uint64_t v11 = 0;
          }
          uint64_t v12 = *(void *)(a1 + 24);
          uint64_t v13 = *(void *)(a1 + 48) + 4 * *(int *)(v12 + 4 * (int)((2 * v10) | 1));
          int v14 = (__int32 *)(v13 + 4 * v11);
          uint64_t v15 = v13 + 4 * *(int *)(v12 + 8 * v10);
          uint64_t v16 = wmemchr(v14, i, (v15 - (uint64_t)v14) >> 2);
          if (v16) {
            int v17 = (int)v16;
          }
          else {
            int v17 = v15;
          }
          *v8++ = (v14 + ((v17 - v14) & 0x3FFFC) - v13) >> 2;
          int v18 = *v7++;
          int v9 = v18;
          --v5;
        }
        while (v5);
      }
    }
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a1 + 360);
    uint64_t v21 = *(void *)(a1 + 336);
    uint64_t v22 = *(void *)(a1 + 384);
    while (1)
    {
      uint64_t v23 = (unsigned int *)(v21 + 8 * v19);
      uint64_t v24 = *v23;
      if ((int)v24 >= 1) {
        break;
      }
LABEL_26:
      if (*(_DWORD *)(a1 + 20) > (int)v24) {
        LODWORD(v24) = *(_DWORD *)(a1 + 20);
      }
      *(_DWORD *)(a1 + 2sub_216817474((void **)this, 0) = v24;
      if (++v19 == v2) {
        goto LABEL_29;
      }
    }
    uint64_t v25 = 0;
    uint64_t v26 = (int)v23[1];
    uint64_t v27 = v20 + 4 * v26;
    uint64_t v28 = v22 + 2 * v26;
    uint64_t v29 = *(void *)(a1 + 120);
    while (1)
    {
      uint64_t v30 = *(int *)(v27 + 4 * v25);
      uint64_t v31 = (int *)(v29 + 8 * v30);
      int v33 = *v31;
      uint64_t v32 = v31[1];
      if (v33 != v32) {
        break;
      }
      if (v25)
      {
        BOOL v34 = v30 == *(_DWORD *)(v27 + 4 * v25 - 4);
        goto LABEL_20;
      }
      __int16 v35 = 0;
LABEL_23:
      *(_WORD *)(v28 + 2 * v25++) = v35;
      if (v24 == v25) {
        goto LABEL_26;
      }
    }
    BOOL v34 = v19 == v32;
LABEL_20:
    __int16 v35 = v34;
    goto LABEL_23;
  }
LABEL_29:
  if ((int)v52 >= 1)
  {
    for (uint64_t j = 0; j != v52; ++j)
    {
      uint64_t v37 = (unsigned int *)(*(void *)(a1 + 144) + 8 * j);
      uint64_t v38 = *v37;
      if ((int)v38 >= 1)
      {
        uint64_t v39 = (int)v37[1];
        int v40 = (int *)(*(void *)(a1 + 168) + 4 * v39);
        uint64_t v41 = (_WORD *)(*(void *)(a1 + 192) + 2 * v39);
        int v42 = -1;
        do
        {
          uint64_t v43 = *v40;
          if (v43 == v42) {
            uint64_t v44 = (unsigned __int16)*(v41 - 1) + 1;
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = *(void *)(a1 + 24);
          uint64_t v46 = *(void *)(a1 + 72) + 4 * *(int *)(v45 + 4 * (int)((2 * v43) | 1));
          uint64_t v47 = (__int32 *)(v46 + 4 * v44);
          uint64_t v48 = v46 + 4 * *(int *)(v45 + 8 * v43);
          uint64_t v49 = wmemchr(v47, j, (v48 - (uint64_t)v47) >> 2);
          if (v49) {
            int v50 = (int)v49;
          }
          else {
            int v50 = v48;
          }
          *v41++ = (v47 + ((v50 - v47) & 0x3FFFC) - v46) >> 2;
          int v51 = *v40++;
          int v42 = v51;
          --v38;
        }
        while (v38);
      }
    }
  }
}

uint64_t sub_216820640(void *a1, __int32 __c)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[36];
  uint64_t v5 = a1[33];
  unint64_t v6 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
  uint64_t v7 = *(int *)(v5 + v6);
  uint64_t v8 = 8 * __c;
  uint64_t v9 = *(int *)(v5 + v8);
  uint64_t v10 = a1[42];
  uint64_t v11 = *(int *)(v10 + v6);
  uint64_t v12 = a1[45];
  uint64_t v13 = *(int *)(v10 + v8);
  int v14 = &v17;
  std::string __p = 0;
  if ((v13 + v9) >= 0x21)
  {
    int v14 = (uint64_t *)operator new(4 * (v13 + v9));
    std::string __p = v14;
  }
  uint64_t v15 = sub_21681ED98(a1, __c, v14, (int *)v14 + v9);
  if (v15)
  {
    memcpy((void *)(v4 + 4 * v7), v14, 4 * v9);
    memcpy((void *)(v12 + 4 * v11), (char *)v14 + 4 * v9, 4 * v13);
  }
  operator delete(__p);
  return v15;
}

uint64_t sub_216820780(void *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = operator new(0xD8uLL);
  sub_21681BE40((uint64_t)v6, (uint64_t)a1);
  sub_21681BF38((uint64_t)v6, a3);
  sub_21681C13C((uint64_t)v6, a2);
  sub_21681BF44(v6);
  uint64_t v8 = (void *)a1[58];
  unint64_t v7 = a1[59];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = a1[57];
    uint64_t v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = v7 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_21677CB28((uint64_t)(a1 + 59), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = v6;
    uint64_t v9 = v16 + 8;
    uint64_t v19 = (char *)a1[57];
    int v18 = (char *)a1[58];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      int v18 = (char *)a1[57];
    }
    a1[57] = v16;
    a1[58] = v9;
    a1[59] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v8 = v6;
    uint64_t v9 = v8 + 1;
  }
  a1[58] = v9;
  return (((unint64_t)v9 - a1[57]) >> 3) - 1;
}

void sub_2168208A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168208B8(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 456) + 8 * a2) + 16);
}

uint64_t sub_2168208C8(uint64_t a1, int a2, int a3)
{
  int v3 = *(void **)(*(void *)(a1 + 456) + 8 * a3);
  return v3[3] + 4 * *(int *)(*(void *)(*v3 + 24) + 8 * a2 + 4);
}

void sub_2168208F8(uint64_t a1, int a2, int a3)
{
}

void sub_216820908(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_216820968((char **)a1, a2 - v2);
  }
}

void sub_216820938(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_216820A84((char **)a1, a2 - v2);
  }
}

void sub_216820968(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_21677CB10();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)sub_21677EA28(v4, v13);
      uint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_216820A84(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 1)
  {
    a1[1] = &v6[2 * a2];
  }
  else
  {
    unint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    uint64_t v9 = a2 + (v8 >> 1);
    if (v9 < 0) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 1;
    unint64_t v11 = v5 - v7;
    if (v11 > v9) {
      uint64_t v9 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v13 = (char *)sub_216780E70(v4, v12);
      unint64_t v7 = *a1;
      unint64_t v6 = a1[1];
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[2 * v10];
    uint64_t v15 = &v13[2 * v12];
    uint64_t v16 = &v14[2 * a2];
    if (v6 != v7)
    {
      do
      {
        __int16 v17 = *((_WORD *)v6 - 1);
        v6 -= 2;
        *((_WORD *)v14 - 1) = v17;
        v14 -= 2;
      }
      while (v6 != v7);
      unint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_216820B7C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216820B7C(a1, *a2);
    sub_216820B7C(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **sub_216820BE0(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_21677B358(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

double sub_216820CA8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  sub_216822354(a1, a2, a3, a4);
  *uint64_t v4 = &unk_26C74AA18;
  *(void *)&double result = 0x400000000;
  *(void *)((char *)v4 + 28) = 0x400000000;
  return result;
}

void sub_216820CEC(void *a1)
{
  uint64_t v1 = sub_2168223FC(a1);

  operator delete(v1);
}

void sub_216820D14(uint64_t a1)
{
  unint64_t v2 = *(int **)(a1 + 8);
  uint64_t v3 = *((void *)v2 + 7) - *((void *)v2 + 6);
  uint64_t v4 = *((void *)v2 + 10) - *((void *)v2 + 9);
  uint64_t v5 = *((void *)v2 + 16) - *((void *)v2 + 15);
  unint64_t v6 = *v2;
  unint64_t v7 = v2[1];
  unint64_t v8 = v2[2];
  int v13 = 0;
  uint64_t v9 = *((void *)v2 + 3);
  unint64_t v10 = (unint64_t)(*((void *)v2 + 4) - v9) >> 2;
  *(void *)(a1 + 88) = v9;
  *(_DWORD *)(a1 + 96) = v10;
  uint64_t v11 = *((void *)v2 + 3);
  unint64_t v12 = (unint64_t)(*((void *)v2 + 4) - v11) >> 2;
  *(void *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 112) = v12;
  sub_216820DFC(a1 + 120, (int)(v3 >> 2), &v13);
  sub_216820DFC(a1 + 144, (int)(v4 >> 2), &v13);
  sub_216820DFC(a1 + 192, (int)(v5 >> 2), &v13);
  sub_216820DFC(a1 + 168, v6, &v13);
  sub_216820DFC(a1 + 216, v7, &v13);
  sub_216820DFC(a1 + 240, v8, &v13);
}

void sub_216820DFC(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_216822230((void **)a1, a2 - v3, a3);
  }
}

void *sub_216820E2C(void *a1)
{
  unint64_t v2 = (int *)a1[2];
  if (*((void *)v2 + 4) == *((void *)v2 + 3))
  {
    sub_216820E88((uint64_t)a1);
    unint64_t v2 = (int *)a1[2];
  }
  sub_21681C000((uint64_t)(v2 + 12), 4 * *v2);

  return sub_216820EF8(a1);
}

void sub_216820E88(uint64_t a1)
{
  sub_21681C000(*(void *)(a1 + 16) + 24, 2 * **(int **)(a1 + 16));
  unint64_t v2 = *(int **)(a1 + 16);
  if (*v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(*((void *)v2 + 3) + 4);
    do
    {
      *(v5 - 1) = 4;
      *uint64_t v5 = v3;
      ++v4;
      v3 += 4;
      v5 += 2;
    }
    while (v4 < *v2);
  }
}

void *sub_216820EF8(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 72);
    uint64_t v7 = result[11];
    uint64_t v8 = result[15];
    do
    {
      uint64_t v9 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v9 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = (8 * v3) | 4;
        uint64_t v12 = *(int *)(v4 + v11);
        uint64_t v13 = v5 + 4 * v12;
        uint64_t v14 = v6 + 4 * v12;
        uint64_t v15 = v8 + 4 * *(int *)(v7 + v11);
        do
        {
          int v16 = *(_DWORD *)(v15 + 4 * v10);
          if (v16 != -1)
          {
            if (v10) {
              int v17 = v10;
            }
            else {
              int v17 = v9;
            }
            int v18 = *(_DWORD *)(result[21] + 4 * v3);
            LODWORD(v19) = v17 - 1;
            uint64_t v20 = result[27];
            int v21 = *(_DWORD *)(v20 + 4 * *(int *)(v14 + 4 * (v17 - 1)));
            int v22 = *(_DWORD *)(result[30] + 4 * *(int *)(v13 + 4 * v10));
            int v23 = *(_DWORD *)(v20 + 4 * *(int *)(v14 + 4 * v10));
            uint64_t v24 = (_DWORD *)(*(void *)(result[2] + 48)
                           + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v16) | 1)));
            if (v9 == 4)
            {
              uint64_t v19 = (int)v19;
              LODWORD(v25) = v17 - 2;
              if (!v19) {
                LODWORD(v25) = 3;
              }
              v24[v10] = v22;
              if (v25) {
                int v26 = v25 - 1;
              }
              else {
                int v26 = 3;
              }
              v24[v26] = v23;
              uint64_t v25 = (int)v25;
            }
            else
            {
              *uint64_t v24 = v22;
              v24[1] = v23;
              uint64_t v25 = 2;
              uint64_t v19 = 3;
            }
            v24[v25] = v18;
            v24[v19] = v21;
          }
          ++v10;
        }
        while (v9 != v10);
        int v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216821030(void *a1)
{
  int v2 = (int *)a1[2];
  if (*((void *)v2 + 4) == *((void *)v2 + 3))
  {
    sub_216820E88((uint64_t)a1);
    int v2 = (int *)a1[2];
  }
  sub_21681C000((uint64_t)(v2 + 18), 4 * *v2);

  return sub_21682108C(a1);
}

void *sub_21682108C(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 72);
    uint64_t v7 = result[11];
    uint64_t v8 = result[15];
    uint64_t v9 = result[13];
    uint64_t v10 = result[18];
    do
    {
      uint64_t v11 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (8 * v3) | 4;
        uint64_t v14 = *(int *)(v4 + v13);
        uint64_t v15 = v5 + 4 * v14;
        uint64_t v16 = v6 + 4 * v14;
        uint64_t v17 = v8 + 4 * *(int *)(v7 + v13);
        uint64_t v18 = v10 + 4 * *(int *)(v9 + v13);
        do
        {
          int v19 = *(_DWORD *)(v17 + 4 * v12);
          if (v19 != -1)
          {
            if (v12) {
              int v20 = v12;
            }
            else {
              int v20 = v11;
            }
            LODWORD(v21) = v20 - 1;
            uint64_t v22 = *(int *)(v16 + 4 * (v20 - 1));
            uint64_t v23 = *(void *)(v1 + 120);
            uint64_t v24 = (_DWORD *)(v23 + 8 * v22);
            uint64_t v25 = *(int *)(v16 + 4 * v12);
            int v26 = *(_DWORD *)(v15 + 4 * v12);
            uint64_t v27 = (_DWORD *)(v23 + 8 * v25);
            BOOL v29 = *v24 == v24[1] || *v24 != v26;
            BOOL v31 = *v27 != v27[1] && *v27 != v26;
            uint64_t v32 = result[24];
            int v33 = *(_DWORD *)(v32 + 8 * v22 + 4 * v29);
            int v34 = *(_DWORD *)(v32 + 8 * v25 + 4 * v31);
            int v35 = *(_DWORD *)(v18 + 4 * (int)v21);
            int v36 = *(_DWORD *)(v18 + 4 * v12);
            uint64_t v37 = (_DWORD *)(*(void *)(result[2] + 72)
                           + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v19) | 1)));
            if (v11 == 4)
            {
              uint64_t v21 = (int)v21;
              LODWORD(v38) = v20 - 2;
              if (!v21) {
                LODWORD(v38) = 3;
              }
              v37[v12] = v34;
              if (v38) {
                int v39 = v38 - 1;
              }
              else {
                int v39 = 3;
              }
              v37[v39] = v36;
              uint64_t v38 = (int)v38;
            }
            else
            {
              *uint64_t v37 = v34;
              v37[1] = v36;
              uint64_t v38 = 2;
              uint64_t v21 = 3;
            }
            v37[v38] = v35;
            v37[v21] = v33;
          }
          ++v12;
        }
        while (v11 != v12);
        int v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216821210(void *a1)
{
  sub_21681C000(a1[2] + 120, 2 * *(int *)(a1[2] + 4));
  sub_216821260(a1);

  return sub_216821300(a1);
}

void *sub_216821260(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v1 + 72);
    uint64_t v6 = result[13];
    uint64_t v7 = result[18];
    do
    {
      uint64_t v8 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v8 >= 1)
      {
        uint64_t v9 = (8 * v3) | 4;
        uint64_t v10 = (int *)(v5 + 4 * *(int *)(v4 + v9));
        uint64_t v11 = (int *)(v7 + 4 * *(int *)(v6 + v9));
        do
        {
          uint64_t v13 = *v11++;
          uint64_t v12 = v13;
          if (v13 != -1)
          {
            uint64_t v14 = (_DWORD *)(*(void *)(result[2] + 120) + 8 * v12);
            _DWORD *v14 = *(_DWORD *)(result[21] + 4 * v3);
            v14[1] = *(_DWORD *)(result[27] + 4 * *v10);
          }
          ++v10;
          --v8;
        }
        while (v8);
        int v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216821300(void *result)
{
  uint64_t v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(v1 + 120);
    uint64_t v4 = result[24];
    do
    {
      uint64_t v5 = 0;
      char v6 = 1;
      do
      {
        char v7 = v6;
        uint64_t v8 = *(int *)(v4 + 8 * v2 + 4 * v5);
        if (v8 != -1)
        {
          uint64_t v9 = (_DWORD *)(*(void *)(result[2] + 120) + 8 * v8);
          *uint64_t v9 = *(_DWORD *)(result[27] + 4 * v2);
          v9[1] = *(_DWORD *)(result[30] + 4 * *(int *)(v3 + 8 * v2 + 4 * v5));
        }
        char v6 = 0;
        uint64_t v5 = 1;
      }
      while ((v7 & 1) != 0);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_216821384(void *a1)
{
  int v2 = 2
     * (((*(void *)(a1[1] + 176) - *(void *)(a1[1] + 168)) >> 2)
      + ((*(void *)(a1[1] + 56) - *(void *)(a1[1] + 48)) >> 2));
  sub_21681C000(a1[2] + 144, 2 * *(int *)(a1[2] + 4));
  sub_21681C000(a1[2] + 168, v2);
  sub_21681C030(a1[2] + 192, v2);
  *(_DWORD *)(a1[2] + 16) = *(_DWORD *)(a1[1] + 16);
  sub_216821460(a1);
  sub_21682159C(a1);
  uint64_t v3 = a1[2];
  uint64_t v4 = (int *)(*(void *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  unint64_t v5 = v4[1] + (uint64_t)*v4;
  sub_21681C000(v3 + 168, v5);
  uint64_t v6 = a1[2] + 192;

  sub_21681C030(v6, v5);
}

void *sub_216821460(void *result)
{
  uint64_t v1 = (int *)result[1];
  int v2 = *v1;
  if (*v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[11];
    uint64_t v5 = result[15];
    uint64_t v6 = result[13];
    uint64_t v7 = result[18];
    do
    {
      uint64_t v8 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = (8 * v3) | 4;
        uint64_t v11 = v5 + 4 * *(int *)(v4 + v10);
        uint64_t v12 = v7 + 4 * *(int *)(v6 + v10);
        do
        {
          uint64_t v13 = *(int *)(v12 + 4 * v9);
          if (v13 == -1)
          {
            ++v9;
          }
          else
          {
            uint64_t v14 = result[2];
            uint64_t v15 = *(void *)(v14 + 144);
            uint64_t v16 = (_DWORD *)(v15 + 8 * v13);
            *uint64_t v16 = 2;
            if (v13) {
              int v17 = *(v16 - 1) + *(v16 - 2);
            }
            else {
              int v17 = 0;
            }
            int v18 = 2 * v13;
            v16[1] = v17;
            int v19 = *(_DWORD *)(v14 + 16);
            if (v19 <= 2) {
              int v19 = 2;
            }
            *(_DWORD *)(v14 + 16) = v19;
            uint64_t v20 = *(int *)(v15 + 4 * (v18 | 1));
            uint64_t v21 = (_DWORD *)(*(void *)(v14 + 168) + 4 * v20);
            uint64_t v22 = (__int16 *)(*(void *)(v14 + 192) + 2 * v20);
            uint64_t v23 = v9 + 1;
            if (v9 + 1 >= v8) {
              unsigned int v24 = 0;
            }
            else {
              unsigned int v24 = v9 + 1;
            }
            int v25 = *(_DWORD *)(v11 + 4 * v9);
            if (v25 == -1)
            {
              uint64_t v27 = 0;
            }
            else
            {
              *uint64_t v21 = v25;
              if (v8 == 4) {
                __int16 v26 = v24;
              }
              else {
                __int16 v26 = 1;
              }
              *uint64_t v22 = v26;
              uint64_t v27 = 1;
            }
            int v28 = *(_DWORD *)(v11 + 4 * v24);
            if (v28 != -1)
            {
              v21[v27] = v28;
              __int16 v29 = ((_BYTE)v24 + 2) & 3;
              if (v8 != 4) {
                __int16 v29 = 2;
              }
              v22[v27] = v29;
              LODWORD(v27) = v27 + 1;
            }
            *uint64_t v16 = v27;
            uint64_t v9 = v23;
          }
        }
        while (v9 != v8);
        int v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_21682159C(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[24];
    do
    {
      uint64_t v5 = (_DWORD *)(v4 + 8 * v3);
      if (*v5 != -1 || v5[1] != -1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(void *)(v1 + 144);
        uint64_t v8 = *(int *)(v7 + ((8 * v3) | 4));
        uint64_t v9 = *(unsigned int *)(v7 + 8 * v3);
        uint64_t v10 = *(void *)(v1 + 168) + 4 * v8;
        uint64_t v11 = *(void *)(v1 + 192) + 2 * v8;
        uint64_t v12 = (_DWORD *)(*(void *)(v1 + 120) + 8 * v3);
        char v13 = 1;
        do
        {
          char v14 = v13;
          uint64_t v15 = (int)v5[v6];
          if (v15 != -1)
          {
            uint64_t v16 = result[2];
            uint64_t v17 = *(void *)(v16 + 144);
            int v18 = (_DWORD *)(v17 + 8 * v15);
            *int v18 = v9;
            if (v15) {
              int v19 = *(v18 - 1) + *(v18 - 2);
            }
            else {
              int v19 = 0;
            }
            v18[1] = v19;
            int v20 = *(_DWORD *)(v16 + 16);
            if (v20 <= (int)v9) {
              int v20 = v9;
            }
            *(_DWORD *)(v16 + 16) = v20;
            if ((int)v9 < 1)
            {
              int v21 = 0;
            }
            else
            {
              int v21 = 0;
              uint64_t v22 = *(int *)(v17 + 4 * (int)((2 * v15) | 1));
              uint64_t v23 = *(void *)(v16 + 168) + 4 * v22;
              uint64_t v24 = *(void *)(v16 + 192) + 2 * v22;
              uint64_t v25 = *(void *)(v1 + 24);
              uint64_t v26 = result[11];
              uint64_t v27 = result[15];
              uint64_t v28 = v9;
              __int16 v29 = (int *)v10;
              uint64_t v30 = (unsigned __int16 *)v11;
              do
              {
                uint64_t v32 = *v29++;
                uint64_t v31 = v32;
                LODWORD(v32) = *v30++;
                unsigned int v33 = v32;
                uint64_t v34 = (2 * v31) | 1;
                BOOL v35 = v6;
                if (*v12 != v12[1]) {
                  BOOL v35 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * *(int *)(v25 + 4 * v34) + 4 * v33) != v12[v6];
                }
                int v36 = 2 * v31;
                uint64_t v37 = v27 + 4 * *(int *)(v26 + 4 * v34);
                if (v35 + v33 == *(_DWORD *)(v26 + 4 * v36)) {
                  unsigned int v38 = 0;
                }
                else {
                  unsigned int v38 = v35 + v33;
                }
                int v39 = *(_DWORD *)(v37 + 4 * v38);
                if (v39 != -1)
                {
                  int v40 = *(_DWORD *)(v25 + 4 * v36);
                  *(_DWORD *)(v23 + 4 * v21) = v39;
                  if (v35) {
                    __int16 v41 = 3;
                  }
                  else {
                    __int16 v41 = 0;
                  }
                  if (v40 != 4) {
                    LOWORD(v33) = v41;
                  }
                  *(_WORD *)(v24 + 2 * v21++) = v33;
                }
                --v28;
              }
              while (v28);
            }
            *int v18 = v21;
          }
          char v13 = 0;
          uint64_t v6 = 1;
        }
        while ((v14 & 1) != 0);
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_216821774(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  int v3 = (((v2[22] - v2[21]) >> 1) & 0xFFFFFFFE) + ((v2[7] - v2[6]) >> 2) + ((v2[37] - v2[36]) >> 2);
  sub_21681C000(*(void *)(a1 + 16) + 264, 2 * *(int *)(*(void *)(a1 + 16) + 8));
  sub_21681C000(*(void *)(a1 + 16) + 288, v3);
  sub_21681C030(*(void *)(a1 + 16) + 312, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_216821974((void *)a1);
    sub_216821A50((void *)a1);
    sub_216821880((void *)a1);
  }
  else
  {
    sub_216821880((void *)a1);
    sub_216821974((void *)a1);
    sub_216821A50((void *)a1);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (int *)(*(void *)(v4 + 264) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  unint64_t v6 = v5[1] + (uint64_t)*v5;
  sub_21681C000(v4 + 288, v6);
  uint64_t v7 = *(void *)(a1 + 16) + 312;

  sub_21681C030(v7, v6);
}

void *sub_216821880(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 288);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 264) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 312);
        uint64_t v11 = (void *)result[2];
        uint64_t v12 = (_DWORD *)(v11[33] + 8 * v5);
        _DWORD *v12 = v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          uint64_t v15 = (int *)(v6 + 4 * v9);
          uint64_t v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = result[11];
          uint64_t v20 = result[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            __int16 v23 = v22;
            int v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              int v25 = *(_DWORD *)(v19 + 8 * v21);
              *(_DWORD *)(v17 + 4 * v14) = v24;
              if (v25 != 4) {
                __int16 v23 = 0;
              }
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        _DWORD *v12 = v14;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216821974(void *result)
{
  uint64_t v1 = (int *)result[1];
  int v2 = *v1;
  if (*v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[21];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = (unsigned int *)(result[11] + 8 * v3);
        uint64_t v7 = result[15];
        uint64_t v8 = *v6;
        uint64_t v9 = (int)v6[1];
        uint64_t v10 = (void *)result[2];
        uint64_t v11 = (_DWORD *)(v10[33] + 8 * v5);
        _DWORD *v11 = v8;
        if (v5) {
          int v12 = *(v11 - 1) + *(v11 - 2);
        }
        else {
          int v12 = 0;
        }
        v11[1] = v12;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          uint64_t v13 = 0;
          int v14 = 0;
          uint64_t v15 = v7 + 4 * v9;
          uint64_t v16 = v10[36] + 4 * v12;
          uint64_t v17 = v10[39] + 2 * v12;
          do
          {
            int v18 = *(_DWORD *)(v15 + 4 * v13);
            if (v18 != -1)
            {
              *(_DWORD *)(v16 + 4 * v14) = v18;
              __int16 v19 = ((_BYTE)v13 + 2) & 3;
              if (v8 != 4) {
                __int16 v19 = 2;
              }
              *(_WORD *)(v17 + 2 * v14++) = v19;
            }
            ++v13;
          }
          while (v8 != v13);
        }
        _DWORD *v11 = v14;
        int v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216821A50(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 192);
        uint64_t v11 = (void *)result[2];
        int v12 = (_DWORD *)(v11[33] + 8 * v5);
        _DWORD *v12 = 2 * v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          uint64_t v15 = (int *)(v6 + 4 * v9);
          uint64_t v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = result[11];
          uint64_t v20 = result[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            uint64_t v23 = v22;
            uint64_t v24 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            int v25 = *(_DWORD *)(v19 + 8 * v21);
            if (v22 + 1 == v25) {
              unsigned int v26 = 0;
            }
            else {
              unsigned int v26 = v23 + 1;
            }
            int v27 = *(_DWORD *)(v24 + 4 * v26);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              if (v25 == 4) {
                __int16 v28 = v23;
              }
              else {
                __int16 v28 = 3;
              }
              *(_WORD *)(v18 + 2 * v14++) = v28;
            }
            int v29 = *(_DWORD *)(v24 + 4 * v23);
            if (v29 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v29;
              if (v25 == 4) {
                __int16 v30 = v26;
              }
              else {
                __int16 v30 = 1;
              }
              *(_WORD *)(v18 + 2 * v14++) = v30;
            }
            --v8;
          }
          while (v8);
        }
        _DWORD *v12 = v14;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_216821B80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = ((*(void *)(v2 + 56) - *(void *)(v2 + 48)) >> 2)
     + 2 * *(_DWORD *)(v2 + 4)
     + ((*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 2)
     + ((*(void *)(v2 + 368) - *(void *)(v2 + 360)) >> 2);
  sub_21681C000(*(void *)(a1 + 16) + 336, 2 * *(int *)(*(void *)(a1 + 16) + 8));
  sub_21681C000(*(void *)(a1 + 16) + 360, v3);
  sub_21681C030(*(void *)(a1 + 16) + 384, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_216821D88((void *)a1);
    sub_216821E80((void *)a1);
    sub_216821C90((void *)a1);
  }
  else
  {
    sub_216821C90((void *)a1);
    sub_216821D88((void *)a1);
    sub_216821E80((void *)a1);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (int *)(*(void *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  unint64_t v6 = v5[1] + (uint64_t)*v5;
  sub_21681C000(v4 + 360, v6);
  uint64_t v7 = *(void *)(a1 + 16) + 384;

  sub_21681C030(v7, v6);
}

void *sub_216821C90(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 360);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 336) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 384);
        uint64_t v11 = result[2];
        uint64_t v12 = *(void *)(v11 + 336);
        int v13 = (_DWORD *)(v12 + 8 * v5);
        _DWORD *v13 = v8;
        if (v5) {
          int v14 = *(v13 - 1) + *(v13 - 2);
        }
        else {
          int v14 = 0;
        }
        v13[1] = v14;
        int v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8) {
          int v15 = v8;
        }
        *(_DWORD *)(v11 + 2sub_216817474((void **)this, 0) = v15;
        if ((int)v8 < 1)
        {
          int v16 = 0;
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = (int *)(v6 + 4 * v9);
          uint64_t v18 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          uint64_t v20 = *(void *)(v11 + 360) + 4 * v19;
          uint64_t v21 = *(void *)(v11 + 384) + 2 * v19;
          uint64_t v22 = result[24];
          do
          {
            uint64_t v24 = *v17++;
            uint64_t v23 = v24;
            LODWORD(v24) = *v18++;
            int v25 = *(_DWORD *)(v22 + 8 * v23 + 4 * v24);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        _DWORD *v13 = v16;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216821D88(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[21];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        int v6 = *(_DWORD *)(*(void *)(v1 + 24) + 8 * v3);
        uint64_t v7 = *(int *)(result[13] + 8 * v3 + 4);
        uint64_t v8 = result[18];
        uint64_t v9 = result[2];
        uint64_t v10 = *(void *)(v9 + 336);
        uint64_t v11 = (int *)(v10 + 8 * v5);
        int *v11 = v6;
        if (v5) {
          int v12 = *(v11 - 1) + *(v11 - 2);
        }
        else {
          int v12 = 0;
        }
        v11[1] = v12;
        int v13 = *(_DWORD *)(v9 + 20);
        if (v13 <= v6) {
          int v13 = v6;
        }
        *(_DWORD *)(v9 + 2sub_216817474((void **)this, 0) = v13;
        if (v6 < 1)
        {
          int v15 = 0;
        }
        else
        {
          int v14 = 0;
          int v15 = 0;
          uint64_t v16 = v8 + 4 * v7;
          uint64_t v17 = *(int *)(v10 + 4 * (int)((2 * v5) | 1));
          uint64_t v18 = *(void *)(v9 + 360) + 4 * v17;
          uint64_t v19 = *(void *)(v9 + 384) + 2 * v17;
          do
          {
            if (v14) {
              int v20 = v14;
            }
            else {
              int v20 = v6;
            }
            int v21 = *(_DWORD *)(v16 + 4 * (v20 - 1));
            if (v21 != -1)
            {
              *(_DWORD *)(v18 + 4 * v15) = v21;
              *(_WORD *)(v19 + 2 * v15++) = 0;
            }
            ++v14;
          }
          while (v6 != v14);
        }
        int *v11 = v15;
        int v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216821E80(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = *(unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *(int *)(*(void *)(v1 + 144) + 8 * v3 + 4);
        uint64_t v9 = *(void *)(v1 + 192);
        uint64_t v10 = *(void *)(v1 + 120);
        uint64_t v11 = result[24];
        uint64_t v12 = result[2];
        int v13 = v7 + 2;
        uint64_t v14 = *(void *)(v12 + 336);
        int v15 = (int *)(v14 + 8 * v5);
        *int v15 = v7 + 2;
        if (v5) {
          int v16 = *(v15 - 1) + *(v15 - 2);
        }
        else {
          int v16 = 0;
        }
        uint64_t v17 = (int *)(v11 + 8 * v3);
        int v18 = 2 * v5;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13) {
          int v13 = *(_DWORD *)(v12 + 20);
        }
        *(_DWORD *)(v12 + 2sub_216817474((void **)this, 0) = v13;
        uint64_t v19 = *(int *)(v14 + 4 * (v18 | 1));
        int v20 = (int *)(*(void *)(v12 + 360) + 4 * v19);
        int v21 = (__int16 *)(*(void *)(v12 + 384) + 2 * v19);
        if (*v17 == -1)
        {
          int v22 = 0;
        }
        else
        {
          *int v20 = *v17;
          *int v21 = 0;
          int v22 = 1;
        }
        int v23 = v17[1];
        if (v23 != -1)
        {
          v20[v22] = v23;
          v21[v22++] = 0;
        }
        if ((int)v7 >= 1)
        {
          uint64_t v24 = 0;
          uint64_t v25 = v6 + 4 * v8;
          uint64_t v26 = v9 + 2 * v8;
          uint64_t v27 = result[13];
          uint64_t v28 = result[18];
          int v29 = (_DWORD *)(v10 + 8 * v3);
          do
          {
            uint64_t v30 = *(unsigned __int16 *)(v26 + 2 * v24);
            uint64_t v31 = (2 * *(int *)(v25 + 4 * v24)) | 1;
            int v32 = *(_DWORD *)(v28 + 4 * *(int *)(v27 + 4 * v31) + 4 * v30);
            if (v32 != -1)
            {
              v20[v22] = v32;
              v21[v22++] = 1;
              if (!v24 && v22 == 3)
              {
                if (*v29 == v29[1])
                {
                  int v33 = v20[1];
                  __int16 v34 = v21[1];
                }
                else
                {
                  int v35 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * *(int *)(*(void *)(v1 + 24) + 4 * v31) + 4 * v30);
                  int v33 = v20[1];
                  __int16 v34 = v21[1];
                  if (v35 == *v29)
                  {
                    int v36 = *v20;
                    *int v20 = v33;
                    __int16 v37 = *v21;
                    *int v21 = v34;
                    __int16 v34 = v37;
                    int v33 = v36;
                  }
                }
                v20[1] = v20[2];
                uint64_t v20[2] = v33;
                v21[1] = v21[2];
                v21[2] = v34;
                int v22 = 3;
              }
            }
            ++v24;
          }
          while (v7 != v24);
        }
        *int v15 = v22;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_21682204C(void *result)
{
  uint64_t v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    for (uint64_t i = 0; i < *v1; ++i)
    {
      uint64_t v3 = (2 * i) | 1;
      uint64_t v4 = (_DWORD *)(result[15] + 4 * *(int *)(result[11] + 4 * v3));
      uint64_t v5 = (_DWORD *)(result[18] + 4 * *(int *)(result[13] + 4 * v3));
      uint64_t v6 = *((void *)v1 + 3);
      uint64_t v7 = *(unsigned int *)(v6 + 8 * i);
      uint64_t v8 = result[51];
      if (*(unsigned char *)(v8 + i))
      {
        if ((int)v7 >= 1)
        {
          do
          {
            *v4++ = 2;
            *v5++ = 2;
            --v7;
          }
          while (v7);
        }
        *(_DWORD *)(result[21] + 4 * i) = 2;
        char v22 = *(unsigned char *)(v8 + i) & 0xE1;
      }
      else
      {
        if ((int)v7 < 1) {
          goto LABEL_22;
        }
        uint64_t v9 = 0;
        int v10 = 0;
        uint64_t v11 = *((void *)v1 + 6) + 4 * *(int *)(v6 + 4 * v3);
        uint64_t v12 = result[57];
        do
        {
          if (*(unsigned char *)(v12 + *(int *)(v11 + 4 * v9)))
          {
            int v10 = 1;
            v4[v9] = 1;
            if (v9) {
              int v13 = v9;
            }
            else {
              int v13 = v7;
            }
            v5[v9] = 1;
            v5[v13 - 1] = 1;
          }
          ++v9;
        }
        while (v7 != v9);
        if (!v10) {
          goto LABEL_22;
        }
        *(_DWORD *)(result[21] + 4 * i) = 1;
        uint64_t v14 = (int *)(*((void *)v1 + 9) + 4 * *(int *)(v6 + 4 * v3));
        uint64_t v15 = *(unsigned int *)(v6 + 8 * i);
        if (v15 == 3)
        {
          int v21 = *(unsigned char *)(result[54] + v14[1]) & 0xE | (*(unsigned __int8 *)(result[54] + *v14) >> 1) & 0xF | (2 * *(unsigned __int8 *)(result[54] + v14[2])) & 0xC;
          char v20 = *(unsigned char *)(v8 + i);
        }
        else
        {
          if (v15 != 4)
          {
            int v23 = *(unsigned char *)(v8 + i) & 0xE1;
            *(unsigned char *)(v8 + i) &= 0xE1u;
            if ((int)v15 >= 1)
            {
              do
              {
                uint64_t v24 = *v14++;
                v23 |= *(unsigned char *)(result[54] + v24) & 0x1E;
                *(unsigned char *)(v8 + i) = v23;
                --v15;
              }
              while (v15);
            }
            goto LABEL_22;
          }
          uint64_t v16 = result[54];
          unsigned int v17 = *(unsigned __int8 *)(v16 + *v14);
          int v18 = *(unsigned char *)(v16 + v14[1]) & 0xE;
          int v19 = (2 * *(unsigned __int8 *)(v16 + v14[2])) & 0xC;
          LOBYTE(v16) = 4 * *(unsigned char *)(v16 + v14[3]);
          char v20 = *(unsigned char *)(v8 + i);
          int v21 = v18 | (v17 >> 1) & 0xF | v19 | v16 & 8;
        }
        char v22 = v20 & 0xE1 | (2 * (v21 & 0xF));
      }
      *(unsigned char *)(v8 + i) = v22;
LABEL_22:
      uint64_t v1 = (int *)result[1];
    }
  }
  return result;
}

void sub_216822230(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      unsigned int v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      sub_21677CB10();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_21677EA28(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v18 = &v15[4 * v12];
    int v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    int v21 = v18;
    do
    {
      *(_DWORD *)int v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    char v22 = &v15[4 * v14];
    int v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

double sub_216822354(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)a1 = &unk_26C74AA90;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 32) = -1;
  *(_WORD *)(a1 + 36) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 4sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 12sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 36sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 44sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12) + 1;
  return result;
}

void *sub_2168223FC(void *a1)
{
  *a1 = &unk_26C74AA90;
  uint64_t v4 = a1 + 60;
  int v2 = (void *)a1[60];
  uint64_t v3 = v4[1];
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        uint64_t v6 = (void *)sub_21681D66C(v2[v5]);
        operator delete(v6);
        int v2 = (void *)a1[60];
        uint64_t v3 = a1[61];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    a1[61] = v2;
    operator delete(v2);
  }
  uint64_t v7 = (void *)a1[57];
  if (v7)
  {
    a1[58] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[54];
  if (v8)
  {
    a1[55] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[51];
  if (v9)
  {
    a1[52] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[48];
  if (v10)
  {
    a1[49] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)a1[45];
  if (v11)
  {
    a1[46] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[42];
  if (v12)
  {
    a1[43] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[39];
  if (v13)
  {
    a1[40] = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)a1[36];
  if (v14)
  {
    a1[37] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)a1[33];
  if (v15)
  {
    a1[34] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[30];
  if (v16)
  {
    a1[31] = v16;
    operator delete(v16);
  }
  unsigned int v17 = (void *)a1[27];
  if (v17)
  {
    a1[28] = v17;
    operator delete(v17);
  }
  int v18 = (void *)a1[24];
  if (v18)
  {
    a1[25] = v18;
    operator delete(v18);
  }
  int v19 = (void *)a1[21];
  if (v19)
  {
    a1[22] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)a1[18];
  if (v20)
  {
    a1[19] = v20;
    operator delete(v20);
  }
  int v21 = (void *)a1[15];
  if (v21)
  {
    a1[16] = v21;
    operator delete(v21);
  }
  return a1;
}

void sub_21682258C(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 36) = (a2 & 1) == 0;
  *(unsigned char *)(a1 + 37) = (a2 & 2) != 0;
  uint64_t v4 = (*(void *)(*(void *)(a1 + 8) + 464) - *(void *)(*(void *)(a1 + 8) + 456)) >> 3;
  sub_2168226C8(a1);
  uint64_t v5 = *(_DWORD **)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 52);
  int v7 = *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 44);
  *uint64_t v5 = *(_DWORD *)(a1 + 40);
  v5[1] = v7;
  v5[2] = *(_DWORD *)(a1 + 56) + v6 + *(_DWORD *)(a1 + 60);
  sub_216822730(a1, v8, v9);
  sub_2168239A8(a1);
  sub_216823A10(a1);
  sub_216823AA4(a1);
  if ((a2 & 4) != 0) {
    char v10 = 1;
  }
  else {
    char v10 = -1;
  }
  v11[0] = v10;
  if ((int)v4 < 1)
  {
    sub_2168227E0(a1, v11);
    sub_216823D58(a1);
    sub_216823F98(a1);
    sub_216824088(a1);
  }
  else
  {
    v11[0] = v10 | 0x10;
    sub_2168227E0(a1, v11);
    sub_216823D58(a1);
    sub_216823F98(a1);
    sub_216824088(a1);
    sub_216822980((void *)a1);
  }
}

uint64_t sub_2168226C8(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!*(unsigned char *)(a1 + 36)) {
    sub_216822BC8((void *)a1);
  }

  return sub_216822C60(a1);
}

uint64_t sub_216822730(uint64_t a1, uint8x8_t a2, uint8x8_t a3)
{
  v7[1] = *MEMORY[0x263EF8340];
  a3.i32[0] = HIDWORD(v7[0]);
  a2.i32[0] = v7[0];
  int16x8_t v4 = (int16x8_t)vmovl_u8(a2);
  *(int8x8_t *)v4.i8 = vorr_s8((int8x8_t)(v4.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x18001000080000);
  v4.i32[0] = vmovn_s16(v4).u32[0];
  int16x8_t v5 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)(v5.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x19001100090001);
  v4.i32[1] = vmovn_s16(v5).u32[0];
  v7[0] = v4.i64[0];
  sub_216823144(a1, v7);
  sub_2168231C4(a1, v7);
  return sub_216823250(a1, v7);
}

uint64_t sub_2168227E0(uint64_t result, char *a2)
{
  uint64_t v3 = result;
  char v4 = *a2;
  if (*a2)
  {
    double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    char v4 = *a2;
    if ((*a2 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((*a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  double result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  char v4 = *a2;
  if ((*a2 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  char v4 = *a2;
  if ((*a2 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  char v4 = *a2;
  if ((*a2 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_26:
  double result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  if ((*a2 & 0x20) != 0) {
LABEL_7:
  }
    double result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
LABEL_8:
  int v5 = *(_DWORD *)(v3 + 28);
  int v6 = *(_DWORD *)(*(void *)(v3 + 8) + 20);
  if (v6 <= 6) {
    int v7 = 6;
  }
  else {
    int v7 = *(_DWORD *)(*(void *)(v3 + 8) + 20);
  }
  if (v6 <= 4) {
    int v6 = 4;
  }
  BOOL v8 = v5 == 0;
  if (v5) {
    int v9 = 2 * *(_DWORD *)(*(void *)(v3 + 8) + 16);
  }
  else {
    int v9 = *(_DWORD *)(*(void *)(v3 + 8) + 16);
  }
  if (v8) {
    int v10 = v6;
  }
  else {
    int v10 = v7;
  }
  int v11 = v9 + 2;
  if (v10 > v11) {
    int v11 = v10;
  }
  *(_DWORD *)(*(void *)(v3 + 16) + 2sub_216817474((void **)this, 0) = v11;
  return result;
}

void sub_216822980(void *a1)
{
  unint64_t v1 = *(void *)(a1[1] + 464) - *(void *)(a1[1] + 456);
  if ((int)(v1 >> 3) >= 1)
  {
    uint64_t v3 = 0;
    char v4 = (char **)(a1 + 60);
    uint64_t v35 = (uint64_t)(a1 + 62);
    uint64_t v5 = (v1 >> 3);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1[1] + 456) + 8 * v3);
      int v7 = operator new(0xD8uLL);
      sub_21681BE40((uint64_t)v7, a1[2]);
      BOOL v8 = (uint64_t *)operator new(0x40uLL);
      sub_21681D64C(v8, (uint64_t)a1, v6, (uint64_t)v7);
      sub_21681D6A0(v8);
      int v9 = (void *)a1[2];
      int v11 = (void *)v9[58];
      unint64_t v10 = v9[59];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = v9[57];
        uint64_t v14 = ((uint64_t)v11 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v15 = v10 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int v18 = (char *)sub_21677CB28((uint64_t)(v9 + 59), v17);
        }
        else {
          int v18 = 0;
        }
        int v19 = &v18[8 * v14];
        *(void *)int v19 = v7;
        uint64_t v12 = v19 + 8;
        int v21 = (char *)v9[57];
        uint64_t v20 = (char *)v9[58];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          uint64_t v20 = (char *)v9[57];
        }
        v9[57] = v19;
        v9[58] = v12;
        v9[59] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v11 = v7;
        uint64_t v12 = v11 + 1;
      }
      v9[58] = v12;
      uint64_t v24 = (uint64_t **)a1[61];
      unint64_t v23 = a1[62];
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = ((char *)v24 - *v4) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v27 = v23 - (void)*v4;
        uint64_t v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
          uint64_t v28 = v26 + 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          uint64_t v30 = (char *)sub_21677CB28(v35, v29);
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v31 = (uint64_t **)&v30[8 * v26];
        int *v31 = v8;
        int v25 = v31 + 1;
        int v33 = (char *)a1[60];
        int v32 = (char *)a1[61];
        if (v32 != v33)
        {
          do
          {
            __int16 v34 = (uint64_t *)*((void *)v32 - 1);
            v32 -= 8;
            *--uint64_t v31 = v34;
          }
          while (v32 != v33);
          int v32 = *v4;
        }
        a1[60] = v31;
        a1[61] = v25;
        a1[62] = &v30[8 * v29];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        *uint64_t v24 = v8;
        int v25 = v24 + 1;
      }
      a1[61] = v25;
      ++v3;
    }
    while (v3 != v5);
  }
}

void sub_216822BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216822BC8(void *a1)
{
  uint64_t v2 = a1[1];
  int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1[57];
    do
    {
      if (*(unsigned char *)(v5 + v4))
      {
        *(_DWORD *)(a1[30] + 4 * v4) = 2;
        int v3 = *(_DWORD *)(v2 + 8);
      }
      ++v4;
    }
    while (v4 < v3);
  }
  sub_216824394(a1);
  uint64_t v6 = *(uint64_t (**)(void *))(*a1 + 24);

  return v6(a1);
}

uint64_t sub_216822C60(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 36);
  *(_DWORD *)(result + 64) = 0;
  uint64_t v2 = *(int **)(result + 120);
  unint64_t v3 = *(void *)(result + 128) - (void)v2;
  unint64_t v4 = v3 >> 2;
  if (v1)
  {
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        v2[v5] = v5;
        ++v5;
      }
      while ((v3 >> 2) != v5);
    }
    *(_DWORD *)(result + 4sub_216817474((void **)this, 0) = v4;
    *(_DWORD *)(result + 68) = 0;
    uint64_t v6 = *(void *)(result + 144);
    unint64_t v7 = *(void *)(result + 152) - v6;
    unint64_t v8 = v7 >> 2;
    if ((int)(v7 >> 2) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (v7 >> 2);
      do
      {
        *(_DWORD *)(v6 + 4 * v9) = v9;
        ++v9;
      }
      while (v10 != v9);
    }
    *(_DWORD *)(result + 44) = v8;
    *(_DWORD *)(result + 72) = v8;
    int v11 = *(_DWORD **)(result + 192);
    unint64_t v12 = *(void *)(result + 200) - (void)v11;
    unint64_t v13 = v12 >> 2;
    if ((int)(v12 >> 2) >= 1)
    {
      uint64_t v14 = (v12 >> 2);
      do
      {
        *v11++ = v8;
        LODWORD(v8) = v8 + 1;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(result + 48) = v13;
    if (*(unsigned char *)(result + 37))
    {
      *(_DWORD *)(result + 76) = 0;
      uint64_t v15 = *(void *)(result + 168);
      unint64_t v16 = *(void *)(result + 176) - v15;
      unint64_t v17 = v16 >> 2;
      if ((int)(v16 >> 2) < 1)
      {
        int v20 = 0;
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = (v16 >> 2);
        do
        {
          *(_DWORD *)(v15 + 4 * v18) = v18;
          ++v18;
        }
        while (v19 != v18);
        int v20 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v17;
      int v30 = v20 + v17;
      *(_DWORD *)(result + 8sub_216817474((void **)this, 0) = v30;
      uint64_t v31 = *(_DWORD **)(result + 216);
      unint64_t v32 = *(void *)(result + 224) - (void)v31;
      unint64_t v33 = v32 >> 2;
      if ((int)(v32 >> 2) >= 1)
      {
        uint64_t v34 = (v32 >> 2);
        do
        {
          *v31++ = v30++;
          --v34;
        }
        while (v34);
        int v30 = *(_DWORD *)(result + 80);
      }
      *(_DWORD *)(result + 56) = v33;
      int v35 = v30 + v33;
      *(_DWORD *)(result + 84) = v30 + v33;
      int v36 = *(_DWORD **)(result + 240);
      unint64_t v37 = *(void *)(result + 248) - (void)v36;
      unint64_t v38 = v37 >> 2;
      if ((int)(v37 >> 2) >= 1)
      {
        uint64_t v39 = (v37 >> 2);
        do
        {
          *v36++ = v35++;
          --v39;
        }
        while (v39);
      }
      *(_DWORD *)(result + 6sub_216817474((void **)this, 0) = v38;
    }
    else
    {
      *(_DWORD *)(result + 84) = 0;
      uint64_t v24 = *(void *)(result + 240);
      unint64_t v25 = *(void *)(result + 248) - v24;
      unint64_t v26 = v25 >> 2;
      if ((int)(v25 >> 2) < 1)
      {
        int v29 = 0;
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (v25 >> 2);
        do
        {
          *(_DWORD *)(v24 + 4 * v27) = v27;
          ++v27;
        }
        while (v28 != v27);
        int v29 = *(_DWORD *)(result + 84);
      }
      *(_DWORD *)(result + 6sub_216817474((void **)this, 0) = v26;
      int v63 = v29 + v26;
      *(_DWORD *)(result + 76) = v63;
      unint64_t v64 = *(_DWORD **)(result + 168);
      unint64_t v65 = *(void *)(result + 176) - (void)v64;
      unint64_t v66 = v65 >> 2;
      if ((int)(v65 >> 2) >= 1)
      {
        uint64_t v67 = (v65 >> 2);
        do
        {
          *v64++ = v63++;
          --v67;
        }
        while (v67);
        int v63 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v66;
      int v68 = v63 + v66;
      *(_DWORD *)(result + 8sub_216817474((void **)this, 0) = v63 + v66;
      int v69 = *(_DWORD **)(result + 216);
      unint64_t v70 = *(void *)(result + 224) - (void)v69;
      unint64_t v71 = v70 >> 2;
      if ((int)(v70 >> 2) >= 1)
      {
        uint64_t v72 = (v70 >> 2);
        do
        {
          *v69++ = v68++;
          --v72;
        }
        while (v72);
      }
      *(_DWORD *)(result + 56) = v71;
    }
  }
  else
  {
    if ((int)v4 < 1)
    {
      int v23 = 0;
    }
    else
    {
      int v21 = 0;
      uint64_t v22 = (v3 >> 2);
      do
      {
        if (*v2) {
          int v23 = v21 + 1;
        }
        else {
          int v23 = v21;
        }
        if (!*v2) {
          int v21 = -1;
        }
        *v2++ = v21;
        int v21 = v23;
        --v22;
      }
      while (v22);
    }
    *(_DWORD *)(result + 4sub_216817474((void **)this, 0) = v23;
    *(_DWORD *)(result + 68) = 0;
    int v40 = *(int **)(result + 144);
    unint64_t v41 = *(void *)(result + 152) - (void)v40;
    if ((int)(v41 >> 2) < 1)
    {
      int v44 = 0;
    }
    else
    {
      int v42 = 0;
      uint64_t v43 = (v41 >> 2);
      do
      {
        if (*v40) {
          int v44 = v42 + 1;
        }
        else {
          int v44 = v42;
        }
        if (!*v40) {
          int v42 = -1;
        }
        *v40++ = v42;
        int v42 = v44;
        --v43;
      }
      while (v43);
    }
    *(_DWORD *)(result + 44) = v44;
    *(_DWORD *)(result + 72) = v44;
    uint64_t v45 = *(int **)(result + 192);
    unint64_t v46 = *(void *)(result + 200) - (void)v45;
    if ((int)(v46 >> 2) < 1)
    {
      int v47 = 0;
    }
    else
    {
      int v47 = 0;
      uint64_t v48 = (v46 >> 2);
      do
      {
        int v49 = v47 + v44;
        if (*v45)
        {
          ++v47;
          int v50 = v49;
        }
        else
        {
          int v50 = -1;
        }
        *v45++ = v50;
        --v48;
      }
      while (v48);
    }
    *(_DWORD *)(result + 48) = v47;
    if (*(unsigned char *)(result + 37))
    {
      *(_DWORD *)(result + 76) = 0;
      int v51 = *(int **)(result + 168);
      unint64_t v52 = *(void *)(result + 176) - (void)v51;
      if ((int)(v52 >> 2) < 1)
      {
        int v56 = 0;
        int v53 = 0;
      }
      else
      {
        int v53 = 0;
        uint64_t v54 = (v52 >> 2);
        do
        {
          if (*v51) {
            int v55 = v53;
          }
          else {
            int v55 = -1;
          }
          if (*v51) {
            ++v53;
          }
          *v51++ = v55;
          --v54;
        }
        while (v54);
        int v56 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v53;
      int v73 = v56 + v53;
      *(_DWORD *)(result + 8sub_216817474((void **)this, 0) = v73;
      uint64_t v74 = *(int **)(result + 216);
      unint64_t v75 = *(void *)(result + 224) - (void)v74;
      if ((int)(v75 >> 2) < 1)
      {
        int v76 = 0;
      }
      else
      {
        int v76 = 0;
        uint64_t v77 = (v75 >> 2);
        do
        {
          int v78 = v76 + v73;
          if (*v74)
          {
            ++v76;
            int v79 = v78;
          }
          else
          {
            int v79 = -1;
          }
          *v74++ = v79;
          --v77;
        }
        while (v77);
        int v73 = *(_DWORD *)(result + 80);
      }
      *(_DWORD *)(result + 56) = v76;
      int v80 = v73 + v76;
      *(_DWORD *)(result + 84) = v80;
      unint64_t v81 = *(int **)(result + 240);
      unint64_t v82 = *(void *)(result + 248) - (void)v81;
      if ((int)(v82 >> 2) < 1)
      {
        int v83 = 0;
      }
      else
      {
        int v83 = 0;
        uint64_t v84 = (v82 >> 2);
        do
        {
          int v85 = v83 + v80;
          if (*v81)
          {
            ++v83;
            int v86 = v85;
          }
          else
          {
            int v86 = -1;
          }
          *v81++ = v86;
          --v84;
        }
        while (v84);
      }
      *(_DWORD *)(result + 6sub_216817474((void **)this, 0) = v83;
    }
    else
    {
      *(_DWORD *)(result + 84) = 0;
      int v57 = *(int **)(result + 240);
      unint64_t v58 = *(void *)(result + 248) - (void)v57;
      if ((int)(v58 >> 2) < 1)
      {
        int v62 = 0;
        int v59 = 0;
      }
      else
      {
        int v59 = 0;
        uint64_t v60 = (v58 >> 2);
        do
        {
          if (*v57) {
            int v61 = v59;
          }
          else {
            int v61 = -1;
          }
          if (*v57) {
            ++v59;
          }
          *v57++ = v61;
          --v60;
        }
        while (v60);
        int v62 = *(_DWORD *)(result + 84);
      }
      *(_DWORD *)(result + 6sub_216817474((void **)this, 0) = v59;
      int v87 = v62 + v59;
      *(_DWORD *)(result + 76) = v87;
      uint64_t v88 = *(int **)(result + 168);
      unint64_t v89 = *(void *)(result + 176) - (void)v88;
      if ((int)(v89 >> 2) < 1)
      {
        int v90 = 0;
      }
      else
      {
        int v90 = 0;
        uint64_t v91 = (v89 >> 2);
        do
        {
          int v92 = v90 + v87;
          if (*v88)
          {
            ++v90;
            int v93 = v92;
          }
          else
          {
            int v93 = -1;
          }
          *v88++ = v93;
          --v91;
        }
        while (v91);
        int v87 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v90;
      int v94 = v87 + v90;
      *(_DWORD *)(result + 8sub_216817474((void **)this, 0) = v94;
      uint64_t v95 = *(int **)(result + 216);
      unint64_t v96 = *(void *)(result + 224) - (void)v95;
      if ((int)(v96 >> 2) < 1)
      {
        int v97 = 0;
      }
      else
      {
        int v97 = 0;
        uint64_t v98 = (v96 >> 2);
        do
        {
          int v99 = v97 + v94;
          if (*v95)
          {
            ++v97;
            int v100 = v99;
          }
          else
          {
            int v100 = -1;
          }
          *v95++ = v100;
          --v98;
        }
        while (v98);
      }
      *(_DWORD *)(result + 56) = v97;
    }
  }
  return result;
}

uint64_t sub_216823144(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = **(int **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 336);
  unint64_t v6 = *(void *)(a1 + 344) - v5;
  BOOL v7 = v4 >= v6;
  unint64_t v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_21681E2A8((void **)(a1 + 336), v8);
    unint64_t v4 = **(int **)(a1 + 16);
  }
  else if (!v7)
  {
    *(void *)(a1 + 344) = v5 + v4;
  }
  sub_21681C000(a1 + 264, v4);

  return sub_2168232FC(a1, a2);
}

uint64_t sub_2168231C4(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(int *)(*(void *)(a1 + 16) + 4);
  uint64_t v5 = *(void *)(a1 + 360);
  unint64_t v6 = *(void *)(a1 + 368) - v5;
  BOOL v7 = v4 >= v6;
  unint64_t v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_21681E2A8((void **)(a1 + 360), v8);
    unint64_t v4 = *(int *)(*(void *)(a1 + 16) + 4);
  }
  else if (!v7)
  {
    *(void *)(a1 + 368) = v5 + v4;
  }
  sub_21681C000(a1 + 288, v4);
  sub_2168234EC(a1, a2);

  return sub_2168236DC(a1, a2);
}

uint64_t sub_216823250(uint64_t a1, unsigned char *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v5 = (void *)(a1 + 384);
  unint64_t v6 = *(int *)(*(void *)(a1 + 16) + 8);
  uint64_t v7 = *(void *)(a1 + 384);
  unint64_t v8 = *(void *)(a1 + 392) - v7;
  if (v4)
  {
    if (v6 > v8)
    {
      uint64_t v9 = a2;
LABEL_6:
      sub_21681D26C(v5, v6 - v8, v9);
      goto LABEL_9;
    }
  }
  else if (v6 > v8)
  {
    uint64_t v9 = a2 + 4;
    goto LABEL_6;
  }
  if (v6 < v8) {
    *(void *)(a1 + 392) = v7 + v6;
  }
LABEL_9:
  sub_21681C000(a1 + 312, *(int *)(*(void *)(a1 + 16) + 8));
  sub_2168237EC(a1, a2);
  sub_216823888(a1, a2);

  return sub_216823918(a1, a2);
}

uint64_t sub_2168232FC(uint64_t result, unsigned char *a2)
{
  int v2 = **(_DWORD **)(result + 8);
  if (*(unsigned char *)(result + 36))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(result + 64);
      do
      {
        int v5 = *(_DWORD *)(*(void *)(result + 88) + 8 * v3);
        if (v5 == 4)
        {
          *(unsigned char *)(*(void *)(result + 336) + v4) = *a2;
          uint64_t v6 = v4 + 1;
          *(unsigned char *)(*(void *)(result + 336) + v6) = a2[1];
          uint64_t v7 = v4 + 2;
          *(unsigned char *)(*(void *)(result + 336) + v7) = a2[2];
          uint64_t v8 = v4 + 3;
          *(unsigned char *)(*(void *)(result + 336) + v8) = a2[3];
          uint64_t v9 = *(void *)(result + 264);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          int v10 = 0;
          uint64_t v11 = v4;
          do
          {
            if (v5 <= 4) {
              int v12 = v10;
            }
            else {
              int v12 = 0;
            }
            *(unsigned char *)(*(void *)(result + 336) + v11) = a2[v12];
            *(_DWORD *)(*(void *)(result + 264) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = (unsigned int *)(*(void *)(result + 88) + 8 * v13);
      uint64_t v15 = *v14;
      unint64_t v16 = (int *)(*(void *)(result + 120) + 4 * (int)v14[1]);
      if ((*(unsigned char *)(*(void *)(result + 408) + v13) & 1) != 0 && v15 == 4)
      {
        *(unsigned char *)(*(void *)(result + 336) + *v16) = *a2;
        *(unsigned char *)(*(void *)(result + 336) + v16[1]) = a2[1];
        *(unsigned char *)(*(void *)(result + 336) + v16[2]) = a2[2];
        *(unsigned char *)(*(void *)(result + 336) + v16[3]) = a2[3];
        uint64_t v17 = *(void *)(result + 264);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        uint64_t v18 = 0;
        BOOL v19 = (*(unsigned char *)(*(void *)(result + 408) + v13) & 1) == 0;
        do
        {
          uint64_t v20 = v16[v18];
          if (v20 != -1)
          {
            if ((int)v15 <= 4) {
              uint64_t v21 = v18;
            }
            else {
              uint64_t v21 = 0;
            }
            *(unsigned char *)(*(void *)(result + 336) + v2sub_216817474((void **)this, 0) = a2[4 * v19 + v21];
            *(_DWORD *)(*(void *)(result + 264) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t sub_2168234EC(uint64_t result, unsigned char *a2)
{
  int v2 = **(_DWORD **)(result + 8);
  if (*(unsigned char *)(result + 36))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(result + 68);
      do
      {
        int v5 = *(_DWORD *)(*(void *)(result + 104) + 8 * v3);
        if (v5 == 4)
        {
          *(unsigned char *)(*(void *)(result + 360) + v4) = *a2;
          uint64_t v6 = v4 + 1;
          *(unsigned char *)(*(void *)(result + 360) + v6) = a2[1];
          uint64_t v7 = v4 + 2;
          *(unsigned char *)(*(void *)(result + 360) + v7) = a2[2];
          uint64_t v8 = v4 + 3;
          *(unsigned char *)(*(void *)(result + 360) + v8) = a2[3];
          uint64_t v9 = *(void *)(result + 288);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          int v10 = 0;
          uint64_t v11 = v4;
          do
          {
            if (v5 <= 4) {
              int v12 = v10;
            }
            else {
              int v12 = 0;
            }
            *(unsigned char *)(*(void *)(result + 360) + v11) = a2[v12];
            *(_DWORD *)(*(void *)(result + 288) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = (unsigned int *)(*(void *)(result + 104) + 8 * v13);
      uint64_t v15 = *v14;
      unint64_t v16 = (int *)(*(void *)(result + 144) + 4 * (int)v14[1]);
      if ((*(unsigned char *)(*(void *)(result + 408) + v13) & 1) != 0 && v15 == 4)
      {
        *(unsigned char *)(*(void *)(result + 360) + *v16) = *a2;
        *(unsigned char *)(*(void *)(result + 360) + v16[1]) = a2[1];
        *(unsigned char *)(*(void *)(result + 360) + v16[2]) = a2[2];
        *(unsigned char *)(*(void *)(result + 360) + v16[3]) = a2[3];
        uint64_t v17 = *(void *)(result + 288);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        uint64_t v18 = 0;
        BOOL v19 = (*(unsigned char *)(*(void *)(result + 408) + v13) & 1) == 0;
        do
        {
          uint64_t v20 = v16[v18];
          if (v20 != -1)
          {
            if ((int)v15 <= 4) {
              uint64_t v21 = v18;
            }
            else {
              uint64_t v21 = 0;
            }
            *(unsigned char *)(*(void *)(result + 360) + v2sub_216817474((void **)this, 0) = a2[4 * v19 + v21];
            *(_DWORD *)(*(void *)(result + 288) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t sub_2168236DC(uint64_t result, unsigned char *a2)
{
  int v2 = *(_DWORD *)(*(void *)(result + 8) + 4);
  if (*(unsigned char *)(result + 36))
  {
    if (v2 >= 1)
    {
      int v3 = 0;
      uint64_t v4 = *(int *)(result + 72);
      do
      {
        *(unsigned char *)(*(void *)(result + 360) + v4) = *a2;
        *(unsigned char *)(*(void *)(result + 360) + v4 + 1) = a2[1];
        int v5 = (_DWORD *)(*(void *)(result + 288) + 4 * v4);
        *int v5 = v3;
        v5[1] = v3++;
        v4 += 2;
      }
      while (v3 < *(_DWORD *)(*(void *)(result + 8) + 4));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (int *)(*(void *)(result + 192) + 8 * v6);
      if (*(unsigned char *)(*(void *)(result + 432) + v6))
      {
        *(unsigned char *)(*(void *)(result + 360) + *v7) = *a2;
        *(unsigned char *)(*(void *)(result + 360) + v7[1]) = a2[1];
        uint64_t v12 = *(void *)(result + 288);
        *(_DWORD *)(v12 + 4 * *v7) = v6;
        *(_DWORD *)(v12 + 4 * v7[1]) = v6;
      }
      else
      {
        uint64_t v8 = 0;
        char v9 = 1;
        do
        {
          char v10 = v9;
          uint64_t v11 = v7[v8];
          if (v11 != -1)
          {
            *(unsigned char *)(*(void *)(result + 360) + v11) = a2[v8 + 4];
            *(_DWORD *)(*(void *)(result + 288) + 4 * v7[v8]) = v6;
          }
          char v9 = 0;
          uint64_t v8 = 1;
        }
        while ((v10 & 1) != 0);
      }
      ++v6;
    }
    while (v6 < *(int *)(*(void *)(result + 8) + 4));
  }
  return result;
}

uint64_t sub_2168237EC(uint64_t result, unsigned char *a2)
{
  if (*(_DWORD *)(result + 52))
  {
    int v2 = *(int **)(result + 8);
    int v3 = *v2;
    if (*(unsigned char *)(result + 36))
    {
      if (v3 >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void *)(result + 312) + 4 * *(int *)(result + 76);
        do
        {
          *(_DWORD *)(v5 + 4 * v4) = v4;
          ++v4;
        }
        while ((int)v4 < *v2);
      }
    }
    else if (v3 >= 1)
    {
      for (uint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(int *)(*(void *)(result + 168) + 4 * i);
        if (v7 != -1)
        {
          if (*(unsigned char *)(*(void *)(result + 408) + i))
          {
            *(unsigned char *)(*(void *)(result + 384) + v7) = *a2;
            int v2 = *(int **)(result + 8);
          }
          *(_DWORD *)(*(void *)(result + 312) + 4 * v7) = i;
          int v3 = *v2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_216823888(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(_DWORD *)(v2 + 4);
  if (*(unsigned char *)(result + 36))
  {
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(result + 312) + 4 * *(int *)(result + 80);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 4));
    }
  }
  else if (v3 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(int *)(*(void *)(result + 216) + 4 * v6);
      if (v7 != -1)
      {
        if (*(unsigned char *)(*(void *)(result + 432) + v6))
        {
          *(unsigned char *)(*(void *)(result + 384) + v7) = *a2;
          uint64_t v2 = *(void *)(result + 8);
        }
        *(_DWORD *)(*(void *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 4));
  }
  return result;
}

uint64_t sub_216823918(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(_DWORD *)(v2 + 8);
  if (*(unsigned char *)(result + 36))
  {
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(result + 312) + 4 * *(int *)(result + 84);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 8));
    }
  }
  else if (v3 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(int *)(*(void *)(result + 240) + 4 * v6);
      if (v7 != -1)
      {
        if (*(unsigned char *)(*(void *)(result + 456) + v6))
        {
          *(unsigned char *)(*(void *)(result + 384) + v7) = *a2;
          uint64_t v2 = *(void *)(result + 8);
        }
        *(_DWORD *)(*(void *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 8));
  }
  return result;
}

uint64_t sub_2168239A8(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  uint64_t v3 = *((void *)v2 + 12);
  unint64_t v4 = *v2;
  unint64_t v5 = *((void *)v2 + 13) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *((void *)v2 + 13) = v3 + v4;
    }
  }
  else
  {
    sub_21681E2A8((void **)v2 + 12, v4 - v5);
  }

  return sub_216823B38(a1);
}

uint64_t sub_216823A10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 240);
  unint64_t v4 = *(int *)(v2 + 4);
  unint64_t v5 = *(void *)(v2 + 248) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *(void *)(v2 + 248) = v3 + v4;
    }
  }
  else
  {
    sub_21681E2A8((void **)(v2 + 240), v4 - v5);
  }
  uint64_t v6 = *(int *)(a1 + 44);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *(int *)(a1 + 68);
    uint64_t v8 = v7 + v6;
    do
      *(unsigned char *)(*(void *)(*(void *)(a1 + 16) + 240) + v7++) = 0;
    while (v7 < v8);
  }

  return sub_216823B78(a1);
}

uint64_t sub_216823AA4(uint64_t a1)
{
  sub_216820938(*(void *)(a1 + 16) + 432, *(int *)(*(void *)(a1 + 16) + 8));
  sub_216823BB8(a1);
  sub_216823C64((void *)a1);
  uint64_t result = sub_216823D04(a1);
  if (!*(unsigned char *)(a1 + 36))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (*(int *)(v3 + 8) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(unsigned char *)(*(void *)(a1 + 384) + v4))
        {
          *(_WORD *)(*(void *)(v3 + 432) + 2 * v4) |= 0x800u;
          uint64_t v3 = *(void *)(a1 + 16);
        }
        ++v4;
      }
      while (v4 < *(int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t sub_216823B38(uint64_t result)
{
  uint64_t v1 = *(int *)(result + 40);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(result + 64);
    uint64_t v3 = v1 + v2;
    do
    {
      *(unsigned char *)(*(void *)(*(void *)(result + 16) + 96) + v2) = *(unsigned char *)(*(void *)(*(void *)(result + 8)
                                                                                           + 96)
                                                                               + *(int *)(*(void *)(result + 264)
                                                                                        + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_216823B78(uint64_t result)
{
  uint64_t v1 = *(int *)(result + 48);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(result + 72);
    uint64_t v3 = v1 + v2;
    do
    {
      *(unsigned char *)(*(void *)(*(void *)(result + 16) + 240) + v2) = *(unsigned char *)(*(void *)(*(void *)(result + 8)
                                                                                            + 240)
                                                                                + *(int *)(*(void *)(result + 288)
                                                                                         + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_216823BB8(uint64_t result)
{
  uint64_t v1 = *(int *)(result + 52);
  if (v1)
  {
    uint64_t v2 = *(int *)(result + 76);
    uint64_t v3 = v2 + v1;
    if (*(int *)(*(void *)(result + 8) + 12) <= 0)
    {
      if ((int)v1 >= 1)
      {
        do
        {
          *(_WORD *)(*(void *)(*(void *)(result + 16) + 432) + 2 * v2) = 128;
          if (*(_DWORD *)(*(void *)(*(void *)(result + 8) + 24)
                         + 8 * *(int *)(*(void *)(result + 312) + 4 * v2)) != *(_DWORD *)(result + 32))
            *(_WORD *)(*(void *)(*(void *)(result + 16) + 432) + 2 * v2) |= 2u;
          ++v2;
        }
        while (v2 < v3);
      }
    }
    else if ((int)v1 >= 1)
    {
      do
        *(_WORD *)(*(void *)(*(void *)(result + 16) + 432) + 2 * v2++) = 128;
      while (v2 < (int)v3);
    }
  }
  return result;
}

void *sub_216823C64(void *result)
{
  uint64_t v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    uint64_t v2 = 0;
    __int16 v3 = 0;
    do
    {
      uint64_t v4 = *(int *)(result[27] + 4 * v2);
      if (v4 != -1)
      {
        unsigned int v5 = *(unsigned __int8 *)(*(void *)(v1 + 240) + v2);
        unsigned int v6 = v3 & 0x183A | v5 & 1 | (4 * ((v5 >> 1) & 1)) & 0xFFFFFFBF | (((v5 >> 3) & 1) << 6);
        unsigned int v7 = v5 >> 2;
        __int16 v8 = (~v5 & 5) == 0;
        if ((v5 & 0xC) != 0) {
          __int16 v9 = 512;
        }
        else {
          __int16 v9 = 128;
        }
        __int16 v3 = v6 & 0x9FFF | (v8 << 15) | ((v7 & 1) << 13) & 0xBFFF | ((v7 & 1) << 14) | v9;
        *(_WORD *)(*(void *)(result[2] + 432) + 2 * v4) = v3;
        uint64_t v1 = result[1];
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

uint64_t sub_216823D04(uint64_t result)
{
  uint64_t v1 = *(int *)(result + 60);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(result + 84);
    uint64_t v3 = v1 + v2;
    do
    {
      *(_WORD *)(*(void *)(*(void *)(result + 16) + 432) + 2 * v2) = *(_WORD *)(*(void *)(*(void *)(result + 8)
                                                                                                + 432)
                                                                                    + 2
                                                                                    * *(int *)(*(void *)(result + 312)
                                                                                             + 4 * v2));
      *(_WORD *)(*(void *)(*(void *)(result + 16) + 432) + 2 * v2++) &= ~0x1000u;
    }
    while (v2 < v3);
  }
  return result;
}

void sub_216823D58(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v26 = *(_DWORD *)(a1 + 24);
  int v2 = v26;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 216);
  v3 += 216;
  *(void *)(v3 + 8) = v4;
  sub_216824364(v3, *(int *)(v3 - 212), &OpenSubdiv::__aapl__::Sdc::Crease::SHARPNESS_SMOOTH);
  uint64_t v27 = (float *)&v29;
  uint64_t v28 = 0x1000000000;
  std::string __p = 0;
  if ((v2 & 0xFF0000) != 0 && (uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 20), v5 >= 0x11))
  {
    operator delete(0);
    unsigned int v6 = operator new(4 * v5);
    std::string __p = v6;
    uint64_t v27 = (float *)v6;
    HIDWORD(v28) = v5;
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 48);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int *)(a1 + 72);
    uint64_t v9 = v7 + v8;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(v10 + 216);
      uint64_t v12 = *(void *)(v10 + 240);
      if ((*(unsigned char *)(v12 + v8) & 4) != 0)
      {
        *(_DWORD *)(v11 + 4 * v8) = 1092616192;
      }
      else if ((*(unsigned char *)(v12 + v8) & 8) != 0)
      {
        uint64_t v13 = *(int *)(*(void *)(a1 + 288) + 4 * v8);
        uint64_t v14 = *(void **)(a1 + 8);
        uint64_t v15 = v14[27];
        float v16 = *(float *)(v15 + 4 * v13);
        if (BYTE2(v26))
        {
          uint64_t v17 = *(int *)(v14[15]
                       + 8 * v13
                       + 4 * (((unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 360) + v8) >> 3) & 3));
          uint64_t v18 = v14[42];
          int v19 = *(_DWORD *)(v18 + 8 * v17);
          uint64_t v20 = v27;
          if (v19 >= 1)
          {
            uint64_t v21 = (int *)(v14[45] + 4 * *(int *)(v18 + 8 * v17 + 4));
            uint64_t v22 = *(unsigned int *)(v18 + 8 * v17);
            int v23 = v27;
            do
            {
              uint64_t v24 = *v21++;
              *v23++ = *(float *)(v15 + 4 * v24);
              --v22;
            }
            while (v22);
          }
          float v25 = sub_21681BAD8((uint64_t)&v26, v19, v20, v16);
          goto LABEL_14;
        }
        if (v16 <= 0.0) {
          goto LABEL_21;
        }
        float v25 = 10.0;
        if (v16 >= 10.0)
        {
LABEL_14:
          *(float *)(v11 + 4 * v8) = v25;
          if (v25 > 0.0) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v16 > 1.0)
          {
            float v25 = v16 + -1.0;
            goto LABEL_14;
          }
LABEL_21:
          *(_DWORD *)(v11 + 4 * v8) = 0;
        }
        *(unsigned char *)(v12 + v8) &= ~8u;
      }
LABEL_23:
      if (++v8 >= v9)
      {
        unsigned int v6 = __p;
        break;
      }
    }
  }
  operator delete(v6);
}

void sub_216823F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p)
{
}

void sub_216823F98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(v2 + 416) = *(void *)(v2 + 408);
  sub_216824364(v2 + 408, *(int *)(v2 + 8), &OpenSubdiv::__aapl__::Sdc::Crease::SHARPNESS_SMOOTH);
  uint64_t v3 = *(int *)(a1 + 60);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *(int *)(a1 + 84);
    uint64_t v5 = v3 + v4;
    do
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(v6 + 408);
      uint64_t v8 = *(void *)(v6 + 432);
      __int16 v9 = *(_WORD *)(v8 + 2 * v4);
      if ((v9 & 0x10) != 0)
      {
        *(_DWORD *)(v7 + 4 * v4) = 1092616192;
      }
      else if ((v9 & 0x20) != 0)
      {
        float v10 = *(float *)(*(void *)(*(void *)(a1 + 8) + 408) + 4 * *(int *)(*(void *)(a1 + 312) + 4 * v4));
        if (v10 <= 0.0) {
          goto LABEL_12;
        }
        float v11 = 10.0;
        if (v10 >= 10.0)
        {
LABEL_9:
          *(float *)(v7 + 4 * v4) = v11;
          if (v11 > 0.0) {
            goto LABEL_14;
          }
        }
        else
        {
          if (v10 > 1.0)
          {
            float v11 = v10 + -1.0;
            goto LABEL_9;
          }
LABEL_12:
          *(_DWORD *)(v7 + 4 * v4) = 0;
        }
        *(_WORD *)(v8 + 2 * v4) &= ~0x20u;
      }
LABEL_14:
      ++v4;
    }
    while (v4 < v5);
  }
}

uint64_t sub_216824088(uint64_t result)
{
  uint64_t v1 = result;
  int v42 = *(_DWORD *)(result + 24);
  uint64_t v2 = *(int *)(result + 56);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(int *)(result + 80);
    uint64_t v4 = v2 + v3;
    do
    {
      uint64_t v5 = *(void *)(v1 + 16);
      uint64_t v6 = *(void *)(v5 + 432);
      __int16 v7 = *(_WORD *)(v6 + 2 * v3);
      if ((v7 & 0x40) != 0)
      {
        uint64_t v8 = (int *)(*(void *)(v1 + 192) + 8 * *(int *)(*(void *)(v1 + 312) + 4 * v3));
        if (*(unsigned char *)(*(void *)(v1 + 384) + v3))
        {
          uint64_t v11 = *v8;
          if (v11 != -1 && (*(unsigned char *)(*(void *)(v5 + 240) + v11) & 8) != 0)
          {
            __int16 v13 = v7 & 0xF83F | 0x40;
            __int16 v14 = 512;
          }
          else
          {
            uint64_t v12 = v8[1];
            if (v12 == -1)
            {
              __int16 v13 = v7 & 0xF83F;
              __int16 v14 = 128;
            }
            else
            {
              __int16 v13 = v7 & 0xF83F;
              if ((*(unsigned char *)(*(void *)(v5 + 240) + v12) & 8) != 0)
              {
                v13 |= 0x40u;
                __int16 v14 = 512;
              }
              else
              {
                __int16 v14 = 128;
              }
            }
          }
          __int16 v10 = v14 | v13;
        }
        else
        {
          int v9 = ((*(unsigned __int8 *)(*(void *)(v5 + 240) + v8[1]) >> 3) & 1)
             + ((*(unsigned __int8 *)(*(void *)(v5 + 240) + *v8) >> 3) & 1);
          *(_WORD *)(v6 + 2 * v3) = v7 & 0xFFBF | ((v9 != 0) << 6);
          uint64_t result = sub_21681B998(0.0, (uint64_t)&v42, v9);
          __int16 v10 = *(_WORD *)(v6 + 2 * v3) & 0xF87F | ((result & 0xF) << 7);
        }
        *(_WORD *)(v6 + 2 * v3) = v10;
      }
      ++v3;
    }
    while (v3 < v4);
  }
  uint64_t v15 = *(int *)(v1 + 60);
  if ((int)v15 >= 1)
  {
    uint64_t v16 = *(int *)(v1 + 84);
    uint64_t v17 = v15 + v16;
    do
    {
      uint64_t v18 = *(int *)(*(void *)(v1 + 312) + 4 * v16);
      int v19 = *(void **)(v1 + 8);
      unsigned int v20 = *(unsigned __int16 *)(v19[54] + 2 * v18);
      if ((v20 & 0x60) == 0) {
        goto LABEL_34;
      }
      uint64_t v21 = *(void **)(v1 + 16);
      uint64_t v22 = v21[54];
      __int16 v23 = *(_WORD *)(v22 + 2 * v16);
      if ((v20 & 0x40) == 0 && (((v23 & 0x20) == 0) & (v20 >> 5)) == 0) {
        goto LABEL_34;
      }
      uint64_t v24 = v21[45];
      if ((int)((unint64_t)(v21[46] - v24) >> 2) < 1)
      {
        uint64_t v31 = v19[42];
        uint64_t v32 = *(unsigned int *)(v31 + 8 * v18);
        if ((int)v32 >= 1)
        {
          uint64_t v33 = *(int *)(v31 + 8 * v18 + 4);
          uint64_t v34 = (int *)(v19[45] + 4 * v33);
          int v35 = (unsigned __int16 *)(v19[48] + 2 * v33);
          int32x2_t v28 = 0;
          uint64_t v36 = v21[30];
          do
          {
            uint64_t v37 = *v34++;
            uint64_t v38 = *(void *)(v1 + 192) + 8 * v37;
            LODWORD(v37) = *v35++;
            int32x2_t v28 = vadd_s32(v28, (int32x2_t)(*(void *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v36 + *(int *)(v38 + 4 * v37))), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFDFFFFFFFELL) & 0xFFFFFFC1FFFFFFC1));
            --v32;
          }
          while (v32);
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v25 = v21[42];
        uint64_t v26 = *(unsigned int *)(v25 + 8 * (int)v16);
        if ((int)v26 >= 1)
        {
          uint64_t v27 = (int *)(v24 + 4 * *(int *)(v25 + 8 * v16 + 4));
          int32x2_t v28 = 0;
          uint64_t v29 = v21[30];
          do
          {
            uint64_t v30 = *v27++;
            int32x2_t v28 = vadd_s32(v28, (int32x2_t)(*(void *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v29 + v30)), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFDFFFFFFFELL) & 0xFFFFFFC1FFFFFFC1));
            --v26;
          }
          while (v26);
LABEL_30:
          __int32 v39 = v28.i32[1];
          __int16 v40 = (v28.i32[1] > 0) << 6;
          __int32 v41 = v28.i32[0];
          goto LABEL_32;
        }
      }
      __int32 v39 = 0;
      __int32 v41 = 0;
      __int16 v40 = 0;
LABEL_32:
      *(_WORD *)(v22 + 2 * v16) = v40 | v23 & 0xFFBF;
      if ((v23 & 0x30) == 0)
      {
        uint64_t result = sub_21681B998(0.0, (uint64_t)&v42, v39 + v41);
        *(_WORD *)(v22 + 2 * v16) = ((result & 0xF) << 7) | *(_WORD *)(v22 + 2 * v16) & 0xF87F;
      }
LABEL_34:
      ++v16;
    }
    while (v16 < v17);
  }
  return result;
}

void sub_216824364(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_2168244CC((void **)a1, a2 - v3, a3);
  }
}

void *sub_216824394(void *result)
{
  uint64_t v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(v1 + 4); ++i)
    {
      unint64_t v3 = (_DWORD *)(result[24] + 8 * i);
      uint64_t v4 = result[54];
      if (*(unsigned char *)(v4 + i))
      {
        int v7 = 2;
        _DWORD *v3 = 2;
      }
      else
      {
        uint64_t v5 = (int *)(*(void *)(v1 + 120) + 8 * i);
        uint64_t v6 = result[57];
        if (*(unsigned char *)(v6 + *v5))
        {
          _DWORD *v3 = 1;
          *(_DWORD *)(result[27] + 4 * i) = 1;
        }
        if ((*(unsigned char *)(v6 + v5[1]) & 1) == 0) {
          goto LABEL_10;
        }
        int v7 = 1;
      }
      v3[1] = v7;
      *(_DWORD *)(result[27] + 4 * i) = v7;
LABEL_10:
      uint64_t v8 = *(void *)(v1 + 168);
      uint64_t v9 = *(void *)(v1 + 144);
      uint64_t v10 = *(int *)(v9 + ((8 * i) | 4));
      uint64_t v11 = *(unsigned int *)(v9 + 8 * i);
      if (v11 == 2)
      {
        char v12 = *(unsigned char *)(v4 + i) & 0xE1 | (2
                                         * ((*(unsigned char *)(result[51] + *(int *)(v8 + 4 * v10 + 4)) ^ *(unsigned char *)(result[51] + *(int *)(v8 + 4 * v10))) & 1));
      }
      else if ((int)v11 > 1)
      {
        __int16 v13 = (int *)(v8 + 4 * v10);
        uint64_t v15 = *v13;
        __int16 v14 = v13 + 1;
        int v16 = *(unsigned __int8 *)(result[51] + v15);
        char v17 = *(unsigned char *)(v4 + i) & 0xE1;
        *(unsigned char *)(v4 + i) = v17;
        uint64_t v18 = v11 - 1;
        while (1)
        {
          uint64_t v19 = *v14++;
          if ((*(unsigned __int8 *)(result[51] + v19) ^ v16)) {
            break;
          }
          if (!--v18) {
            goto LABEL_20;
          }
        }
        char v12 = v17 | 2;
      }
      else
      {
        char v12 = *(unsigned char *)(v4 + i) & 0xE1;
      }
      *(unsigned char *)(v4 + i) = v12;
LABEL_20:
      uint64_t v1 = result[1];
    }
  }
  return result;
}

void sub_2168244CC(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  int v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      char v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      sub_21677CB10();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_21677EA28(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    __int16 v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

double sub_2168245F0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  sub_216822354(a1, a2, a3, a4);
  *uint64_t v4 = &unk_26C74AB00;
  v4[65] = 0;
  v4[63] = 0;
  v4[64] = 0;
  *(void *)&double result = 0x300000001;
  *(void *)((char *)v4 + 28) = 0x300000001;
  return result;
}

void *sub_216824638(void *a1)
{
  *a1 = &unk_26C74AB00;
  uint64_t v2 = (void *)a1[63];
  if (v2)
  {
    a1[64] = v2;
    operator delete(v2);
  }

  return sub_2168223FC(a1);
}

void sub_21682469C(void *a1)
{
  uint64_t v1 = sub_216824638(a1);

  operator delete(v1);
}

void sub_2168246C4(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 8);
  uint64_t v4 = *((void *)v2 + 9);
  uint64_t v3 = *((void *)v2 + 10);
  uint64_t v6 = *((void *)v2 + 15);
  uint64_t v5 = *((void *)v2 + 16);
  uint64_t v8 = *v2;
  unint64_t v7 = v2[1];
  unint64_t v9 = v2[2];
  int v19 = 4;
  sub_216820DFC(a1 + 504, 2 * v8, &v19);
  uint64_t v10 = *(int **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 504);
  if (*v10 >= 1)
  {
    int v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = (_DWORD *)(v11 + 4);
    do
    {
      _DWORD *v14 = v12;
      v14 += 2;
      ++v13;
      v12 += 4;
    }
    while (v13 < *v10);
  }
  unint64_t v15 = (unint64_t)(*(void *)(a1 + 512) - v11) >> 2;
  *(void *)(a1 + 88) = v11;
  *(_DWORD *)(a1 + 96) = v15;
  uint64_t v16 = *((void *)v10 + 3);
  unint64_t v17 = (unint64_t)(*((void *)v10 + 4) - v16) >> 2;
  *(void *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 112) = v17;
  int v18 = 0;
  sub_216820DFC(a1 + 120, 4 * v8, &v18);
  sub_216820DFC(a1 + 144, (int)((v3 - v4) >> 2), &v18);
  sub_216820DFC(a1 + 192, (int)((v5 - v6) >> 2), &v18);
  sub_216820DFC(a1 + 168, 0, &v18);
  sub_216820DFC(a1 + 216, v7, &v18);
  sub_216820DFC(a1 + 240, v9, &v18);
}

void *sub_2168247FC(void *a1)
{
  uint64_t v2 = (int *)a1[2];
  if (*((void *)v2 + 4) == *((void *)v2 + 3))
  {
    sub_216824858((uint64_t)a1);
    uint64_t v2 = (int *)a1[2];
  }
  sub_21681C000((uint64_t)(v2 + 12), 3 * *v2);

  return sub_2168248D4(a1);
}

void sub_216824858(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  uint64_t v3 = *v2;
  int v8 = 3;
  sub_216820DFC((uint64_t)(v2 + 6), 2 * v3, &v8);
  uint64_t v4 = *(int **)(a1 + 16);
  if (*v4 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = (_DWORD *)(*((void *)v4 + 3) + 4);
    do
    {
      _DWORD *v7 = v5;
      v7 += 2;
      ++v6;
      v5 += 3;
    }
    while (v6 < *v4);
  }
}

void *sub_2168248D4(void *result)
{
  uint64_t v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)v1 + 6);
    uint64_t v4 = *((void *)v1 + 9);
    uint64_t v5 = result[15];
    uint64_t v6 = result[27];
    unint64_t v7 = (int *)(result[11] + 4);
    int v8 = (int *)(*((void *)v1 + 3) + 4);
    do
    {
      uint64_t v9 = *v8;
      v8 += 2;
      uint64_t v10 = (int *)(v3 + 4 * v9);
      uint64_t v11 = (int *)(v4 + 4 * v9);
      uint64_t v12 = *v7;
      v7 += 2;
      int v13 = *(_DWORD *)(v6 + 4 * *v11);
      int v14 = *(_DWORD *)(v6 + 4 * v11[1]);
      unint64_t v15 = (_DWORD *)(v5 + 4 * v12);
      int v16 = *(_DWORD *)(v6 + 4 * v11[2]);
      if (*v15 != -1)
      {
        unint64_t v17 = (_DWORD *)(*(void *)(result[2] + 48)
                       + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * *v15) | 1)));
        *unint64_t v17 = *(_DWORD *)(result[30] + 4 * *v10);
        v17[1] = v13;
        void v17[2] = v16;
      }
      int v18 = v15[1];
      if (v18 != -1)
      {
        int v19 = (_DWORD *)(*(void *)(result[2] + 48)
                       + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v18) | 1)));
        *int v19 = v13;
        v19[1] = *(_DWORD *)(result[30] + 4 * v10[1]);
        v19[2] = v14;
      }
      int v20 = v15[2];
      if (v20 != -1)
      {
        uint64_t v21 = (_DWORD *)(*(void *)(result[2] + 48)
                       + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v20) | 1)));
        *uint64_t v21 = v16;
        v21[1] = v14;
        v21[2] = *(_DWORD *)(result[30] + 4 * v10[2]);
      }
      int v22 = v15[3];
      if (v22 != -1)
      {
        __int16 v23 = (_DWORD *)(*(void *)(result[2] + 48)
                       + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v22) | 1)));
        *__int16 v23 = v14;
        v23[1] = v16;
        int v23[2] = v13;
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

void *sub_216824A1C(void *a1)
{
  uint64_t v2 = (int *)a1[2];
  if (*((void *)v2 + 4) == *((void *)v2 + 3))
  {
    sub_216824858((uint64_t)a1);
    uint64_t v2 = (int *)a1[2];
  }
  sub_21681C000((uint64_t)(v2 + 18), 3 * *v2);

  return sub_216824A78(a1);
}

void *sub_216824A78(void *result)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)v1 + 3);
    uint64_t v4 = *((void *)v1 + 6);
    uint64_t v5 = *((void *)v1 + 9);
    uint64_t v6 = result[11];
    uint64_t v7 = result[15];
    uint64_t v8 = result[13];
    uint64_t v9 = result[18];
    uint64_t v10 = result[24];
    uint64_t v11 = *((void *)v1 + 15);
    do
    {
      uint64_t v12 = (8 * v2) | 4;
      uint64_t v13 = *(int *)(v3 + v12);
      int v14 = (_DWORD *)(v4 + 4 * v13);
      unint64_t v15 = (int *)(v5 + 4 * v13);
      uint64_t v16 = *(int *)(v6 + v12);
      uint64_t v17 = *(int *)(v8 + v12);
      for (uint64_t i = 4; i != 28; i += 8)
      {
        uint64_t v20 = *v15++;
        uint64_t v19 = v20;
        uint64_t v21 = (_DWORD *)(v11 + 8 * v20);
        BOOL v22 = *v21 != v21[1] && *v14 != *v21;
        uint64_t v23 = v10 + 8 * v19;
        int v24 = *(_DWORD *)(v23 + 4 * v22);
        int v25 = (int *)((char *)&v36 + i);
        LODWORD(v23) = *(_DWORD *)(v23 + 4 * !v22);
        *(v25 - 1) = v24;
        *int v25 = v23;
        ++v14;
      }
      uint64_t v26 = (_DWORD *)(v7 + 4 * v16);
      uint64_t v27 = (_DWORD *)(v9 + 4 * v17);
      if (*v26 != -1)
      {
        int32x2_t v28 = (_DWORD *)(*(void *)(result[2] + 72)
                       + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * *v26) | 1)));
        int v29 = v39;
        *int32x2_t v28 = v36;
        v28[1] = *v27;
        v28[2] = v29;
      }
      int v30 = v26[1];
      if (v30 != -1)
      {
        uint64_t v31 = *(void *)(result[2] + 72) + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v30) | 1));
        *(void *)uint64_t v31 = v37;
        *(_DWORD *)(v31 + 8) = v27[1];
      }
      int v32 = v26[2];
      if (v32 != -1)
      {
        uint64_t v33 = *(void *)(result[2] + 72) + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v32) | 1));
        *(_DWORD *)uint64_t v33 = v27[2];
        *(void *)(v33 + 4) = v38;
      }
      int v34 = v26[3];
      if (v34 != -1)
      {
        int v35 = (_DWORD *)(*(void *)(result[2] + 72)
                       + 4 * *(int *)(*(void *)(result[2] + 24) + 4 * ((2 * v34) | 1)));
        _DWORD *v35 = v27[2];
        v35[1] = *v27;
        v35[2] = v27[1];
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

void *sub_216824C7C(void *a1)
{
  sub_21681C000(a1[2] + 120, 2 * *(int *)(a1[2] + 4));
  sub_216824CCC(a1);

  return sub_216824D88(a1);
}

void *sub_216824CCC(void *result)
{
  uint64_t v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)v1 + 9);
    uint64_t v4 = result[18];
    uint64_t v5 = result[27];
    uint64_t v6 = (int *)(result[13] + 4);
    uint64_t v7 = (int *)(*((void *)v1 + 3) + 4);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      uint64_t v9 = (int *)(v3 + 4 * v8);
      uint64_t v10 = *v6;
      v6 += 2;
      int v11 = *(_DWORD *)(v5 + 4 * *v9);
      int v12 = *(_DWORD *)(v5 + 4 * v9[1]);
      uint64_t v13 = (int *)(v4 + 4 * v10);
      int v14 = *(_DWORD *)(v5 + 4 * v9[2]);
      uint64_t v15 = *v13;
      if (v15 != -1)
      {
        uint64_t v16 = (_DWORD *)(*(void *)(result[2] + 120) + 8 * v15);
        *uint64_t v16 = v11;
        v16[1] = v14;
      }
      uint64_t v17 = v13[1];
      if (v17 != -1)
      {
        int v18 = (_DWORD *)(*(void *)(result[2] + 120) + 8 * v17);
        *int v18 = v12;
        v18[1] = v11;
      }
      uint64_t v19 = v13[2];
      if (v19 != -1)
      {
        uint64_t v20 = (_DWORD *)(*(void *)(result[2] + 120) + 8 * v19);
        *uint64_t v20 = v14;
        v20[1] = v12;
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

void *sub_216824D88(void *result)
{
  uint64_t v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (int *)(result[24] + 4);
    uint64_t v4 = (int *)(*(void *)(v1 + 120) + 4);
    do
    {
      uint64_t v5 = *(v3 - 1);
      if (v5 != -1)
      {
        uint64_t v6 = (_DWORD *)(*(void *)(result[2] + 120) + 8 * v5);
        *uint64_t v6 = *(_DWORD *)(result[27] + 4 * v2);
        v6[1] = *(_DWORD *)(result[30] + 4 * *(v4 - 1));
      }
      uint64_t v7 = *v3;
      if (v7 != -1)
      {
        uint64_t v8 = (_DWORD *)(*(void *)(result[2] + 120) + 8 * v7);
        *uint64_t v8 = *(_DWORD *)(result[27] + 4 * v2);
        v8[1] = *(_DWORD *)(result[30] + 4 * *v4);
      }
      ++v2;
      v3 += 2;
      v4 += 2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_216824E30(void *a1)
{
  int v2 = 2 * (((*(void *)(a1[1] + 176) - *(void *)(a1[1] + 168)) >> 2) + ((a1[19] - a1[18]) >> 2));
  sub_21681C000(a1[2] + 144, 2 * *(int *)(a1[2] + 4));
  sub_21681C000(a1[2] + 168, v2);
  sub_21681C030(a1[2] + 192, v2);
  *(_DWORD *)(a1[2] + 16) = *(_DWORD *)(a1[1] + 16);
  sub_216824F0C(a1);
  sub_216825040(a1);
  uint64_t v3 = a1[2];
  uint64_t v4 = (int *)(*(void *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  unint64_t v5 = v4[1] + (uint64_t)*v4;
  sub_21681C000(v3 + 168, v5);
  uint64_t v6 = a1[2] + 192;

  sub_21681C030(v6, v5);
}

void *sub_216824F0C(void *result)
{
  uint64_t v1 = (int *)result[1];
  int v2 = *v1;
  if (*v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[11];
    uint64_t v5 = result[15];
    uint64_t v6 = result[13];
    uint64_t v7 = result[18];
    do
    {
      uint64_t v8 = *(unsigned int *)(v6 + 8 * v3);
      if ((int)v8 >= 1)
      {
        uint64_t v9 = (8 * v3) | 4;
        uint64_t v10 = (_DWORD *)(v5 + 4 * *(int *)(v4 + v9));
        int v11 = (int *)(v7 + 4 * *(int *)(v6 + v9));
        int v12 = v10[3];
        unsigned int v13 = 1;
        do
        {
          uint64_t v15 = *v11++;
          uint64_t v14 = v15;
          if (v15 != -1)
          {
            uint64_t v16 = result[2];
            uint64_t v17 = *(void *)(v16 + 144);
            int v18 = (_DWORD *)(v17 + 8 * v14);
            *int v18 = 2;
            if (v14) {
              int v19 = *(v18 - 1) + *(v18 - 2);
            }
            else {
              int v19 = 0;
            }
            unsigned int v20 = v13 % 3;
            int v21 = 2 * v14;
            v18[1] = v19;
            int v22 = *(_DWORD *)(v16 + 16);
            if (v22 <= 2) {
              int v22 = 2;
            }
            *(_DWORD *)(v16 + 16) = v22;
            uint64_t v23 = *(int *)(v17 + 4 * (v21 | 1));
            int v24 = (_DWORD *)(*(void *)(v16 + 168) + 4 * v23);
            int v25 = (_WORD *)(*(void *)(v16 + 192) + 2 * v23);
            if (*v10 == -1)
            {
              uint64_t v26 = 0;
            }
            else
            {
              *int v24 = *v10;
              *int v25 = v20;
              uint64_t v26 = 1;
            }
            if (v12 != -1)
            {
              v24[v26] = v12;
              v25[v26] = v20;
              LODWORD(v26) = v26 + 1;
            }
            *int v18 = v26;
          }
          ++v13;
          ++v10;
          --v8;
        }
        while (v8);
        int v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216825040(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[24];
    do
    {
      uint64_t v5 = (_DWORD *)(v4 + 8 * v3);
      if (*v5 != -1 || v5[1] != -1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(void *)(v1 + 144);
        uint64_t v8 = *(int *)(v7 + ((8 * v3) | 4));
        uint64_t v9 = *(unsigned int *)(v7 + 8 * v3);
        uint64_t v10 = *(void *)(v1 + 168) + 4 * v8;
        uint64_t v11 = *(void *)(v1 + 192) + 2 * v8;
        int v12 = (_DWORD *)(*(void *)(v1 + 120) + 8 * v3);
        char v13 = 1;
        do
        {
          char v14 = v13;
          uint64_t v15 = (int)v5[v6];
          if (v15 != -1)
          {
            uint64_t v16 = result[2];
            uint64_t v17 = *(void *)(v16 + 144);
            int v18 = (_DWORD *)(v17 + 8 * v15);
            *int v18 = v9;
            if (v15) {
              int v19 = *(v18 - 1) + *(v18 - 2);
            }
            else {
              int v19 = 0;
            }
            v18[1] = v19;
            int v20 = *(_DWORD *)(v16 + 16);
            if (v20 <= (int)v9) {
              int v20 = v9;
            }
            *(_DWORD *)(v16 + 16) = v20;
            if ((int)v9 < 1)
            {
              int v21 = 0;
            }
            else
            {
              int v21 = 0;
              uint64_t v22 = *(int *)(v17 + 4 * (int)((2 * v15) | 1));
              uint64_t v23 = *(void *)(v16 + 168) + 4 * v22;
              uint64_t v24 = *(void *)(v16 + 192) + 2 * v22;
              uint64_t v25 = *(void *)(v1 + 24);
              uint64_t v26 = result[11];
              uint64_t v27 = result[15];
              uint64_t v28 = v9;
              int v29 = (int *)v10;
              int v30 = (unsigned __int16 *)v11;
              do
              {
                uint64_t v32 = *v29++;
                uint64_t v31 = v32;
                LODWORD(v32) = *v30++;
                uint64_t v33 = v32;
                uint64_t v34 = (2 * v31) | 1;
                BOOL v35 = v6;
                if (*v12 != v12[1]) {
                  BOOL v35 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * *(int *)(v25 + 4 * v34) + 4 * v33) != v12[v6];
                }
                uint64_t v36 = v27 + 4 * *(int *)(v26 + 4 * v34);
                unsigned int v37 = v35 + v33;
                if (v37 == *(_DWORD *)(v25 + 8 * v31)) {
                  unsigned int v38 = 0;
                }
                else {
                  unsigned int v38 = v37;
                }
                int v39 = *(_DWORD *)(v36 + 4 * v38);
                if (v39 != -1)
                {
                  *(_DWORD *)(v23 + 4 * v21) = v39;
                  *(_WORD *)(v24 + 2 * v21++) = v33;
                }
                --v28;
              }
              while (v28);
            }
            *int v18 = v21;
          }
          char v13 = 0;
          uint64_t v6 = 1;
        }
        while ((v14 & 1) != 0);
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_216825200(uint64_t a1)
{
  int v2 = ((*(void *)(*(void *)(a1 + 8) + 296) - *(void *)(*(void *)(a1 + 8) + 288)) >> 2)
     + 3 * ((*(void *)(*(void *)(a1 + 8) + 176) - *(void *)(*(void *)(a1 + 8) + 168)) >> 2);
  sub_21681C000(*(void *)(a1 + 16) + 264, 2 * *(int *)(*(void *)(a1 + 16) + 8));
  sub_21681C000(*(void *)(a1 + 16) + 288, v2);
  sub_21681C030(*(void *)(a1 + 16) + 312, v2);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_2168253D0((void *)a1);
    sub_2168252EC((void *)a1);
  }
  else
  {
    sub_2168252EC((void *)a1);
    sub_2168253D0((void *)a1);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (int *)(*(void *)(v3 + 264) + 4 * (2 * *(_DWORD *)(v3 + 8) - 2));
  unint64_t v5 = v4[1] + (uint64_t)*v4;
  sub_21681C000(v3 + 288, v5);
  uint64_t v6 = *(void *)(a1 + 16) + 312;

  sub_21681C030(v6, v5);
}

void *sub_2168252EC(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 288);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 264) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 312);
        uint64_t v11 = (void *)result[2];
        int v12 = (_DWORD *)(v11[33] + 8 * v5);
        _DWORD *v12 = v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          uint64_t v15 = (int *)(v6 + 4 * v9);
          uint64_t v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = result[11];
          uint64_t v20 = result[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            __int16 v23 = v22;
            int v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v24;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        _DWORD *v12 = v14;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_2168253D0(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 192);
        uint64_t v11 = (void *)result[2];
        int v12 = (_DWORD *)(v11[33] + 8 * v5);
        _DWORD *v12 = 2 * v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          uint64_t v15 = (int *)(v6 + 4 * v9);
          uint64_t v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = result[11];
          uint64_t v20 = result[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            uint64_t v23 = v22;
            unsigned int v24 = v22 + 1 - 3 * ((1431655766 * (unint64_t)(v22 + 1)) >> 32);
            uint64_t v25 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            int v26 = *(_DWORD *)(v25 + 4 * v24);
            if (v26 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v26;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            int v27 = *(_DWORD *)(v25 + 12);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              *(_WORD *)(v18 + 2 * v14++) = v23
                                            + 2
                                            - 3 * ((1431655766 * (unint64_t)(v23 + 2)) >> 32);
            }
            int v28 = *(_DWORD *)(v25 + 4 * v23);
            if (v28 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v28;
              *(_WORD *)(v18 + 2 * v14++) = v24;
            }
            --v8;
          }
          while (v8);
        }
        _DWORD *v12 = v14;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_216825520(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = ((*(void *)(v2 + 368) - *(void *)(v2 + 360)) >> 2)
     + 2 * (*(_DWORD *)(v2 + 4) + ((*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 2));
  sub_21681C000(*(void *)(a1 + 16) + 336, 2 * *(int *)(*(void *)(a1 + 16) + 8));
  sub_21681C000(*(void *)(a1 + 16) + 360, v3);
  sub_21681C030(*(void *)(a1 + 16) + 384, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_216825708((void *)a1);
    sub_216825610((void *)a1);
  }
  else
  {
    sub_216825610((void *)a1);
    sub_216825708((void *)a1);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (int *)(*(void *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  unint64_t v6 = v5[1] + (uint64_t)*v5;
  sub_21681C000(v4 + 360, v6);
  uint64_t v7 = *(void *)(a1 + 16) + 384;

  sub_21681C030(v7, v6);
}

void *sub_216825610(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 360);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 336) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 384);
        uint64_t v11 = result[2];
        uint64_t v12 = *(void *)(v11 + 336);
        int v13 = (_DWORD *)(v12 + 8 * v5);
        _DWORD *v13 = v8;
        if (v5) {
          int v14 = *(v13 - 1) + *(v13 - 2);
        }
        else {
          int v14 = 0;
        }
        v13[1] = v14;
        int v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8) {
          int v15 = v8;
        }
        *(_DWORD *)(v11 + 2sub_216817474((void **)this, 0) = v15;
        if ((int)v8 < 1)
        {
          int v16 = 0;
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = (int *)(v6 + 4 * v9);
          uint64_t v18 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          uint64_t v20 = *(void *)(v11 + 360) + 4 * v19;
          uint64_t v21 = *(void *)(v11 + 384) + 2 * v19;
          uint64_t v22 = result[24];
          do
          {
            uint64_t v23 = *v17++;
            uint64_t v24 = v22 + 8 * v23;
            LODWORD(v23) = *v18++;
            int v25 = *(_DWORD *)(v24 + 4 * v23);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        _DWORD *v13 = v16;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216825708(void *result)
{
  uint64_t v1 = result[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = *(unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *(int *)(*(void *)(v1 + 144) + 8 * v3 + 4);
        uint64_t v9 = *(void *)(v1 + 192);
        uint64_t v10 = *(void *)(v1 + 120);
        uint64_t v11 = result[24];
        uint64_t v12 = result[2];
        int v13 = v7 + 2;
        uint64_t v14 = *(void *)(v12 + 336);
        int v15 = (_DWORD *)(v14 + 8 * v5);
        *int v15 = v7 + 2;
        if (v5) {
          int v16 = *(v15 - 1) + *(v15 - 2);
        }
        else {
          int v16 = 0;
        }
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13) {
          int v13 = *(_DWORD *)(v12 + 20);
        }
        *(_DWORD *)(v12 + 2sub_216817474((void **)this, 0) = v13;
        if ((int)v7 < 1)
        {
          int v19 = 0;
        }
        else
        {
          uint64_t v17 = 0;
          BOOL v18 = 0;
          int v19 = 0;
          uint64_t v20 = v6 + 4 * v8;
          uint64_t v21 = v9 + 2 * v8;
          uint64_t v22 = (_DWORD *)(v10 + 8 * v3);
          uint64_t v23 = v11 + 8 * v3;
          uint64_t v24 = *(int *)(v14 + 4 * (int)((2 * v5) | 1));
          uint64_t v25 = *(void *)(v12 + 360) + 4 * v24;
          uint64_t v26 = *(void *)(v12 + 384) + 2 * v24;
          uint64_t v27 = result[13];
          uint64_t v28 = result[18];
          int v29 = -1;
          do
          {
            uint64_t v30 = *(unsigned __int16 *)(v21 + 2 * v17);
            uint64_t v31 = (2 * *(int *)(v20 + 4 * v17)) | 1;
            uint64_t v32 = v28 + 4 * *(int *)(v27 + 4 * v31);
            if (v17)
            {
              int v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              int v34 = *(_DWORD *)(v32 + 4 * v30);
            }
            else
            {
              if (*v22 != v22[1]) {
                BOOL v18 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * *(int *)(*(void *)(v1 + 24) + 4 * v31) + 4 * v30) != *v22;
              }
              int v35 = *(_DWORD *)(v23 + 4 * !v18);
              int v29 = *(_DWORD *)(v23 + 4 * v18);
              int v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              int v34 = *(_DWORD *)(v32 + 4 * v30);
              if (v35 != -1)
              {
                *(_DWORD *)(v25 + 4 * v19) = v35;
                *(_WORD *)(v26 + 2 * v19++) = 0;
              }
            }
            if (v33 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v33;
              *(_WORD *)(v26 + 2 * v19++) = 1;
            }
            if (v34 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v34;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            if (!v17 && v29 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v29;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            ++v17;
          }
          while (v7 != v17);
        }
        *int v15 = v19;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_216825910(void *result)
{
  uint64_t v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 4;
    *(void *)&long long v4 = 0x200000002;
    *((void *)&v4 + 1) = 0x200000002;
    do
    {
      uint64_t v5 = result[15] + 4 * *(int *)(result[11] + v3);
      uint64_t v6 = result[18] + 4 * *(int *)(result[13] + v3);
      uint64_t v7 = result[51];
      if (*(unsigned char *)(v7 + v2))
      {
        *(_OWORD *)uint64_t v5 = v4;
        *(_DWORD *)uint64_t v6 = 2;
        *(void *)(v6 + 4) = 0x200000002;
        *(unsigned char *)(v7 + v2) &= 0xE1u;
      }
      else
      {
        uint64_t v8 = *(int *)(*((void *)v1 + 3) + v3);
        uint64_t v9 = (int *)(*((void *)v1 + 6) + 4 * v8);
        if ((*(unsigned char *)(result[57] + v9[1]) & 1)
           + (*(unsigned char *)(result[57] + *v9) & 1)
           + (*(unsigned char *)(result[57] + v9[2]) & 1))
        {
          int v10 = *(unsigned char *)(result[54] + *(int *)(*((void *)v1 + 9) + 4 * v8 + 4)) & 0xE | (*(unsigned __int8 *)(result[54] + *(int *)(*((void *)v1 + 9) + 4 * v8)) >> 1) & 0xF | (2 * *(unsigned __int8 *)(result[54] + *(int *)(*((void *)v1 + 9) + 4 * v8 + 8))) & 0xC;
          *(unsigned char *)(v7 + v2) = *(unsigned char *)(v7 + v2) & 0xE1 | (2 * v10);
          if (v10)
          {
            *(_DWORD *)(v5 + 12) = 1;
            *(_DWORD *)uint64_t v6 = 1;
            *(void *)(v6 + 4) = 0x100000001;
          }
          uint64_t v11 = result[57];
          if (*(unsigned char *)(v11 + *v9))
          {
            *(_DWORD *)uint64_t v5 = 1;
            *(_DWORD *)uint64_t v6 = 1;
          }
          if (*(unsigned char *)(v11 + v9[1]))
          {
            *(_DWORD *)(v5 + 4) = 1;
            *(_DWORD *)(v6 + 4) = 1;
          }
          if (*(unsigned char *)(v11 + v9[2]))
          {
            *(_DWORD *)(v5 + 8) = 1;
            *(_DWORD *)(v6 + 8) = 1;
          }
        }
      }
      ++v2;
      uint64_t v1 = (int *)result[1];
      v3 += 8;
    }
    while (v2 < *v1);
  }
  return result;
}

uint64_t sub_216825A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388]();
  uint64_t v13 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x2800uLL, v10, &a9);
  if (off_26798E168) {
    return off_26798E168(v9, __str);
  }
  else {
    return printf("%s: %s\n", off_264294220[v9], __str);
  }
}

uint64_t sub_216825B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = (const char *)MEMORY[0x270FA5388]();
  uint64_t v12 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x2800uLL, v9, &a9);
  if (off_26798E170) {
    return off_26798E170(__str);
  }
  else {
    return fprintf((FILE *)*MEMORY[0x263EF8358], "Warning: %s\n", __str);
  }
}

void *sub_216825C04(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216825C64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216825C80(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216825CE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216825CFC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216825D5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216825D78(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = sub_216781458(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      BOOL v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    BOOL v18 = v9;
    int v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  _DWORD *v12 = &v9[v17];
  return result;
}

double OpenSubdiv::__aapl__::Far::TopologyDescriptor::TopologyDescriptor(OpenSubdiv::__aapl__::Far::TopologyDescriptor *this)
{
  *((void *)this + 12) = 0;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 12) = 0;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::resizeComponentTopology(uint64_t a1, int *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = **(void **)(a1 + 48);
  *(_DWORD *)(v5 + 8) = v4;
  sub_21681C000(v5 + 264, 2 * v4);
  sub_21681C000(v5 + 336, 2 * v4);
  sub_216820908(v5 + 408, v4);
  sub_216820938(v5 + 432, v4);
  bzero(*(void **)(v5 + 432), 2 * *(int *)(v5 + 8));
  unint64_t v6 = a2[1];
  uint64_t v7 = **(int ***)(a1 + 48);
  int *v7 = v6;
  sub_21681C000((uint64_t)(v7 + 6), 2 * v6);
  uint64_t v8 = (char *)*((void *)v7 + 12);
  unint64_t v9 = *((void *)v7 + 13) - (void)v8;
  if (v6 <= v9)
  {
    if (v6 < v9) {
      *((void *)v7 + 13) = &v8[v6];
    }
  }
  else
  {
    sub_21681E2A8((void **)v7 + 12, v6 - v9);
    uint64_t v8 = (char *)*((void *)v7 + 12);
  }
  bzero(v8, *v7);
  if (a2[1] >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = *(uint64_t **)(a1 + 48);
    do
    {
      int v13 = *(_DWORD *)(*((void *)a2 + 1) + 4 * v11);
      uint64_t v14 = *v12;
      uint64_t v15 = *(void *)(*v12 + 24);
      *(_DWORD *)(v15 + v1sub_216817474((void **)this, 0) = v13;
      if (v10) {
        int v16 = *(_DWORD *)(v15 + v10 - 4) + *(_DWORD *)(v15 + v10 - 8);
      }
      else {
        int v16 = 0;
      }
      *(_DWORD *)(v15 + v10 + 4) = v16;
      int v17 = *(_DWORD *)(v14 + 20);
      if (v17 <= v13) {
        int v17 = v13;
      }
      *(_DWORD *)(v14 + 2sub_216817474((void **)this, 0) = v17;
      unsigned int v18 = *(unsigned __int16 *)(a1 + 8);
      if ((v18 & 4) != 0) {
        __int16 v19 = 4;
      }
      else {
        __int16 v19 = 4 * (v13 != ((v18 >> 3) & 7));
      }
      *(_WORD *)(a1 + 8) = v19 | v18 & 0xFFFB;
      ++v11;
      v10 += 8;
    }
    while (v11 < a2[1]);
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTopology(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 4) >= 1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    uint64_t v4 = **(void **)(a1 + 48);
    uint64_t v5 = *(void *)(v4 + 24);
    uint64_t v6 = *(void *)(v4 + 48);
    int v7 = *(unsigned __int8 *)(a2 + 88);
    uint64_t v8 = *(void *)(a2 + 16);
    do
    {
      unint64_t v9 = (unsigned int *)(v5 + 8 * v2);
      uint64_t v10 = *v9;
      uint64_t v11 = (_DWORD *)(v6 + 4 * (int)v9[1]);
      if (v7)
      {
        _DWORD *v11 = *(_DWORD *)(v8 + 4 * v3++);
        if ((int)v10 >= 2)
        {
          unint64_t v12 = v10 + 1;
          int v13 = (int *)(v8 + 4 * v3);
          do
          {
            int v14 = *v13++;
            v11[(v12-- - 2)] = v14;
            ++v3;
          }
          while (v12 > 2);
        }
      }
      else if ((int)v10 >= 1)
      {
        uint64_t v15 = (int *)(v8 + 4 * v3);
        v3 += v10;
        do
        {
          int v16 = *v15++;
          *v11++ = v16;
          --v10;
        }
        while (v10);
      }
      ++v2;
    }
    while (v2 < *(int *)(a2 + 4));
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTags(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      if (*(void *)(a2 + 40))
      {
        uint64_t v5 = 0;
        uint64_t v6 = (int *)(v4 + 4);
        do
        {
          int v7 = sub_21681F05C(**(void ***)(a1 + 48), *(v6 - 1), *v6);
          if (v7 == -1)
          {
            snprintf(__str, 0x400uLL, "Edge %d specified to be sharp does not exist (%d, %d)", v5, *(v6 - 1), *v6);
            sub_216825B44((uint64_t)__str, v8, v9, v10, v11, v12, v13, v14, v29);
          }
          else
          {
            *(_DWORD *)(*(void *)(**(void **)(a1 + 48) + 216) + 4 * v7) = *(_DWORD *)(*(void *)(a2 + 40)
                                                                                            + 4 * v5);
          }
          ++v5;
          v6 += 2;
        }
        while (v5 < *(int *)(a2 + 24));
      }
    }
  }
  if (*(int *)(a2 + 48) >= 1 && *(void *)(a2 + 56) && *(void *)(a2 + 64))
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v15);
      if ((v16 & 0x80000000) != 0 || (uint64_t v17 = **(void **)(a1 + 48), (int)v16 >= *(_DWORD *)(v17 + 8)))
      {
        snprintf(__str, 0x400uLL, "Vertex %d specified to be sharp does not exist", *(_DWORD *)(*(void *)(a2 + 56) + 4 * v15));
        sub_216825B44((uint64_t)__str, v18, v19, v20, v21, v22, v23, v24, v30);
      }
      else
      {
        *(_DWORD *)(*(void *)(v17 + 408) + 4 * v16) = *(_DWORD *)(*(void *)(a2 + 64) + 4 * v15);
      }
      ++v15;
    }
    while (v15 < *(int *)(a2 + 48));
  }
  if (*(int *)(a2 + 72) >= 1)
  {
    uint64_t v25 = 0;
    do
    {
      uint64_t v26 = *(int *)(*(void *)(a2 + 80) + 4 * v25);
      uint64_t v27 = *(void *)(**(void **)(a1 + 48) + 96);
      *(unsigned char *)(v27 + v26) |= 1u;
      *(_WORD *)(a1 + 8) |= 2u;
      ++v25;
    }
    while (v25 < *(int *)(a2 + 72));
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::reportInvalidTopology(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_216825B44(a2, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignFaceVaryingTopology(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 92) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(a1 + 4);
    do
    {
      uint64_t v6 = *(void *)(a2 + 96) + 16 * v4;
      uint64_t v7 = *(void *)(v6 + 8);
      sub_216820780(**(void ***)(a1 + 48), *(_DWORD *)v6, v5);
      if (*(int *)(a2 + 4) >= 1)
      {
        int v8 = 0;
        int v9 = 0;
        do
        {
          uint64_t v10 = (_DWORD *)sub_2168208C8(**(void **)(a1 + 48), v9, v4);
          if (*(unsigned char *)(a2 + 88))
          {
            *uint64_t v10 = *(_DWORD *)(v7 + 4 * v8++);
            if (v11 >= 2)
            {
              unint64_t v12 = v11 + 1;
              uint64_t v13 = (int *)(v7 + 4 * v8);
              do
              {
                int v14 = *v13++;
                v10[(v12-- - 2)] = v14;
                ++v8;
              }
              while (v12 > 2);
            }
          }
          else if (v11 >= 1)
          {
            uint64_t v15 = v11;
            uint64_t v16 = (int *)(v7 + 4 * v8);
            v8 += v11;
            do
            {
              int v17 = *v16++;
              *v10++ = v17;
              --v15;
            }
            while (v15);
          }
          ++v9;
        }
        while (v9 < *(_DWORD *)(a2 + 4));
      }
      ++v4;
    }
    while (v4 < *(int *)(a2 + 92));
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner(uint64_t a1, unsigned int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFF8 | 1;
  *(_WORD *)(a1 + 8) = (8 * (sub_21681BDB0(a2) & 7)) | *(_WORD *)(a1 + 8) & 0xFC07;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 12) &= 0xC0u;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xF000 | 0xF0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 2sub_216817474((void **)this, 0) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 4sub_216817474((void **)this, 0) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v4 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_216817474((void **)this, 0) = 0u;
  *(void *)(a1 + 112) = 0;
  sub_2168265D4((void **)(a1 + 48), 0xAuLL);
  uint64_t v5 = operator new(0x1E0uLL);
  sub_21681E3B4(v5);
  unint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void **)(a1 + 56);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = v6 - (void)*v4;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_21677CB28(a1 + 64, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)int v14 = v5;
    int v8 = v14 + 8;
    int v17 = *(char **)(a1 + 48);
    uint64_t v16 = *(char **)(a1 + 56);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *v4;
    }
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v7 = v5;
    int v8 = v7 + 1;
  }
  *(void *)(a1 + 56) = v8;
  sub_21682667C((void **)(a1 + 96), 0xAuLL);
  sub_21682676C((void *)a1);
  return a1;
}

{
  return OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner(a1, a2, a3);
}

void sub_216826584(_Unwind_Exception *a1)
{
  operator delete(v4);
  unint64_t v6 = *v3;
  if (*v3)
  {
    v1[13] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)v1[9];
  if (v7)
  {
    v1[10] = v7;
    operator delete(v7);
  }
  int v8 = *v2;
  if (*v2)
  {
    v1[7] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void sub_2168265D4(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_21677CB10();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_21677CB28(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_21682667C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21677CB10();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    unint64_t v6 = (char *)sub_216782ED8(v3, a2);
    uint64_t v7 = &v6[24 * v5];
    uint64_t v9 = &v6[24 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_21682676C(void *a1)
{
  sub_216826BB4((uint64_t)(a1 + 12), (uint64_t)(a1[7] - a1[6]) >> 3);
  uint64_t v2 = (void *)a1[12];
  v2[1] = 0;
  uint64_t v3 = (void *)a1[6];
  *uint64_t v2 = *v3;
  v2[2] = 0;
  uint64_t v4 = (void *)a1[9];
  unint64_t v5 = a1[10] - (void)v4;
  unint64_t v6 = v5 >> 3;
  if ((v5 >> 3))
  {
    v2[2] = *v4;
    if ((int)v6 >= 2)
    {
      uint64_t v7 = (v5 >> 3) - 1;
      uint64_t v8 = v2 + 5;
      uint64_t v9 = v3 + 1;
      uint64_t v10 = v4 + 1;
      do
      {
        *(v8 - 1) = *(v10 - 1);
        uint64_t v11 = *v9++;
        *(v8 - 2) = v11;
        uint64_t v12 = *v10++;
        *uint64_t v8 = v12;
        v8 += 3;
        --v7;
      }
      while (v7);
    }
    long long v13 = &v2[3 * (int)v6];
    v13[1] = *(void *)((char *)v4 + ((uint64_t)((v5 << 29) - 0x100000000) >> 29));
    void *v13 = *(void *)((char *)v3 + ((uint64_t)(v5 << 29) >> 29));
    void v13[2] = 0;
  }
}

int32x2_t sub_216826840(uint64_t a1)
{
  uint64_t v1 = *(int ***)(a1 + 48);
  if (*(int ***)(a1 + 56) == v1)
  {
    int v4 = 0;
    LODWORD(v5) = 0;
    int v6 = 0;
    int32x2_t v3 = 0;
  }
  else
  {
    uint64_t v2 = *v1;
    int32x2_t v3 = *(int32x2_t *)(*v1 + 1);
    int v4 = **v1;
    uint64_t v5 = (*((void *)v2 + 7) - *((void *)v2 + 6)) >> 2;
    int v6 = v2[5];
  }
  int32x2_t result = vrev64_s32(v3);
  *(int32x2_t *)(a1 + 2sub_216817474((void **)this, 0) = result;
  *(_DWORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  return result;
}

void OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(OpenSubdiv::__aapl__::Far::TopologyRefiner *this)
{
  uint64_t v3 = *((void *)this + 6);
  uint64_t v2 = *((void *)this + 7);
  if ((int)((unint64_t)(v2 - v3) >> 3) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if (v4 || *((unsigned char *)this + 40))
      {
        uint64_t v5 = *(void **)(v3 + 8 * v4);
        if (v5)
        {
          int v6 = sub_21681E594(v5);
          operator delete(v6);
          uint64_t v3 = *((void *)this + 6);
          uint64_t v2 = *((void *)this + 7);
        }
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v2 - v3) >> 3));
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  uint64_t v8 = *((void *)this + 10);
  if ((int)((unint64_t)(v8 - (void)v7) >> 3) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v7[v9];
      if (v10)
      {
        (*(void (**)(void))(*(void *)v10 + 8))(v7[v9]);
        uint64_t v7 = (void *)*((void *)this + 9);
        uint64_t v8 = *((void *)this + 10);
      }
      ++v9;
    }
    while (v9 < (int)((unint64_t)(v8 - (void)v7) >> 3));
  }
  uint64_t v11 = (void *)*((void *)this + 12);
  if (v11)
  {
    *((void *)this + 13) = v11;
    operator delete(v11);
    uint64_t v7 = (void *)*((void *)this + 9);
  }
  if (v7)
  {
    *((void *)this + 1sub_216817474((void **)this, 0) = v7;
    operator delete(v7);
  }
  uint64_t v12 = (void *)*((void *)this + 6);
  if (v12)
  {
    *((void *)this + 7) = v12;
    operator delete(v12);
  }
}

uint64_t sub_216826998(uint64_t result, uint64_t a2)
{
  *(int32x2_t *)(result + 2sub_216817474((void **)this, 0) = vadd_s32(*(int32x2_t *)(result + 20), vrev64_s32(*(int32x2_t *)(a2 + 4)));
  int v2 = *(_DWORD *)(result + 32) + ((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  *(_DWORD *)(result + 28) += *(_DWORD *)a2;
  *(_DWORD *)(result + 32) = v2;
  int v3 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(result + 36) > v3) {
    int v3 = *(_DWORD *)(result + 36);
  }
  *(_DWORD *)(result + 36) = v3;
  return result;
}

uint64_t sub_2168269E4(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[8];
  uint64_t v4 = (uint64_t)(a1 + 8);
  unint64_t v5 = v6;
  uint64_t v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_21677CB28(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (uint64_t *)&v15[8 * v11];
    int v17 = &v15[8 * v14];
    *uint64_t v16 = a2;
    uint64_t v8 = v16 + 1;
    uint64_t v19 = (char *)a1[6];
    uint64_t v18 = (char *)a1[7];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *--uint64_t v16 = v20;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    a1[6] = v16;
    a1[7] = v8;
    a1[8] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    uint64_t *v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[7] = v8;

  return sub_216826998((uint64_t)a1, a2);
}

void sub_216826AD8(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[11];
  uint64_t v4 = (uint64_t)(a1 + 11);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_21677CB28(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    int v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    uint64_t v8 = v16 + 8;
    uint64_t v19 = (char *)a1[9];
    uint64_t v18 = (char *)a1[10];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    a1[9] = v16;
    a1[10] = v8;
    a1[11] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[10] = v8;
}

void sub_216826BB4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_216826DCC((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void OpenSubdiv::__aapl__::Far::TopologyRefiner::RefineUniform(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!*(_DWORD *)(**(void **)(a1 + 48) + 8))
  {
    uint64_t v10 = "Failure in TopologyRefiner::RefineUniform() -- base level is uninitialized.";
    goto LABEL_5;
  }
  if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
  {
    uint64_t v10 = "Failure in TopologyRefiner::RefineUniform() -- previous refinements already applied.";
LABEL_5:
    sub_216825A74(4, (uint64_t)v10, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  *(unsigned char *)(a1 + 12) = a2;
  char v22 = a2;
  int v12 = a2 & 0xF;
  *(_WORD *)(a1 + 8) = ((a2 & 0xF) << 6) | *(_WORD *)(a1 + 8) & 0xFC3F | 1;
  int v21 = sub_21681BD80(*(_DWORD *)a1);
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (a2 >> 3) & 2;
    uint64_t v15 = 8 * (a2 & 0xF);
    do
    {
      if (v15 - 8 == v13 && (v22 & 0x20) == 0) {
        char v17 = 4;
      }
      else {
        char v17 = 0;
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 48) + v13);
      uint64_t v19 = operator new(0x1E0uLL);
      sub_21681E3B4(v19);
      if (v21)
      {
        uint64_t v20 = operator new(0x210uLL);
        sub_2168245F0((uint64_t)v20, v18, (uint64_t)v19, (_DWORD *)(a1 + 4));
      }
      else
      {
        uint64_t v20 = operator new(0x1F8uLL);
        sub_216820CA8((uint64_t)v20, v18, (uint64_t)v19, (_DWORD *)(a1 + 4));
      }
      sub_21682258C((uint64_t)v20, v17 | v14);
      sub_2168269E4((void *)a1, (uint64_t)v19);
      sub_216826AD8((void *)a1, (uint64_t)v20);
      v13 += 8;
    }
    while (v15 != v13);
  }

  sub_21682676C((void *)a1);
}

void sub_216826DA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216826DCC(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    a1[1] = &v6[24 * (24 * a2 / 0x18)];
  }
  else
  {
    uint64_t v7 = *a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      int v12 = (char *)sub_216782ED8(v4, v11);
      uint64_t v7 = *a1;
      unint64_t v6 = a1[1];
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = &v12[24 * v8];
    uint64_t v14 = &v12[24 * v11];
    uint64_t v15 = &v13[24 * (24 * a2 / 0x18)];
    if (v6 != v7)
    {
      do
      {
        long long v16 = *(_OWORD *)(v6 - 24);
        *((void *)v13 - 1) = *((void *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unint64_t v8 = (uint64_t *)*((void *)this + 6);
  unint64_t v9 = (int *)*v8;
  int v10 = *(_DWORD *)(*v8 + 8);
  if (!v10)
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.";
    goto LABEL_12;
  }
  int v11 = *v9;
  if (!*v9)
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.";
    goto LABEL_12;
  }
  if (v9[5] >= 0x10000)
  {
    snprintf(__str, 0x400uLL, "Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.", v9[5], 0xFFFF);
    int v12 = __str;
LABEL_12:
    sub_216825A74(4, (uint64_t)v12, a3, a4, a5, a6, a7, a8, v25);
    return 0;
  }
  uint64_t v13 = (int *)(*((void *)v9 + 3) + 4 * (2 * v11 - 2));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  unint64_t v16 = v14 + v15;
  if (!(v14 + v15))
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.";
    goto LABEL_12;
  }
  if (*(_DWORD *)this == 2 && v16 != 3 * v11)
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.";
    goto LABEL_12;
  }
  sub_21681C000((uint64_t)(v9 + 12), v16);
  int v18 = v9[1];
  if (v18 >= 1)
  {
    sub_21681C000((uint64_t)(v9 + 18), (int)((uint64_t)(*((void *)v9 + 7) - *((void *)v9 + 6)) >> 2));
    sub_21681C000((uint64_t)(v9 + 30), 2 * v9[1]);
    uint64_t v19 = (int *)(*((void *)v9 + 18) + 4 * (2 * v18 - 2));
    unint64_t v20 = v19[1] + (uint64_t)*v19;
    sub_21681C000((uint64_t)(v9 + 42), v20);
    sub_21681C030((uint64_t)(v9 + 48), v20);
    int v21 = 2 * v10 - 2;
    unint64_t v22 = (8 * ((unint64_t)v21 >> 1)) | 4;
    unint64_t v23 = *(int *)(*((void *)v9 + 33) + v22) + (uint64_t)*(int *)(*((void *)v9 + 33) + 4 * v21);
    sub_21681C000((uint64_t)(v9 + 72), v23);
    sub_21681C030((uint64_t)(v9 + 78), v23);
    unint64_t v24 = *(int *)(*((void *)v9 + 42) + v22) + (uint64_t)*(int *)(*((void *)v9 + 42) + 4 * v21);
    sub_21681C000((uint64_t)(v9 + 90), v24);
    sub_21681C030((uint64_t)(v9 + 96), v24);
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment(uint64_t a1, int a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v12 = *(int ***)(a1 + 48);
  uint64_t v13 = (unsigned int *)*v12;
  int v14 = (*v12)[1];
  if (v14)
  {
    if (!v13[5])
    {
      uint64_t v15 = "Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.";
      goto LABEL_12;
    }
  }
  else if (!sub_21681F0F0(*v12))
  {
    snprintf(__str, 0x400uLL, "Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.", v13[5], 0xFFFF);
    uint64_t v15 = __str;
    goto LABEL_12;
  }
  if (!a2 || sub_21681E598(v13, a3, a4))
  {
    sub_216826840(a1);
    return 1;
  }
  if (v14) {
    uint64_t v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.";
  }
  else {
    uint64_t v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.";
  }
LABEL_12:
  sub_216825A74(4, (uint64_t)v15, (uint64_t)a3, a4, a5, a6, a7, a8, v17);
  return 0;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2)
{
  uint64_t v3 = **((void **)this + 6);
  int v84 = *((_DWORD *)this + 1);
  if ((_BYTE)v84)
  {
    BOOL v78 = v84 == 2;
  }
  else
  {
    if ((int)sub_21681BE10(*(_DWORD *)this) >= 1)
    {
      int v4 = *(_DWORD *)(v3 + 8);
      if (v4 >= 1)
      {
        for (uint64_t i = 0; i < v4; ++i)
        {
          uint64_t v6 = *(void *)(v3 + 336);
          uint64_t v7 = (8 * i) | 4;
          uint64_t v8 = *(int *)(v6 + v7);
          int v9 = *(_DWORD *)(v6 + 8 * i);
          uint64_t v10 = *(void *)(v3 + 264);
          uint64_t v11 = *(int *)(v10 + v7);
          uint64_t v12 = *(unsigned int *)(v10 + 8 * i);
          if (v9 != v12 || (*(_WORD *)(*(void *)(v3 + 432) + 2 * i)) && v9 >= 1)
          {
            uint64_t v13 = (int *)(*(void *)(v3 + 360) + 4 * v8);
            int v14 = (int *)(*(void *)(v3 + 288) + 4 * v11);
            uint64_t v15 = v9 & ~(v9 >> 31);
            while (1)
            {
              uint64_t v17 = *v13++;
              uint64_t v16 = v17;
              if (*(_DWORD *)(*(void *)(v3 + 144) + 8 * v17) == 1
                && *(float *)(*(void *)(v3 + 216) + 4 * v16) < 10.0)
              {
                break;
              }
              if (!--v15) {
                goto LABEL_17;
              }
            }
            if ((int)v12 >= 1)
            {
              do
              {
                uint64_t v18 = *v14++;
                *(unsigned char *)(*(void *)(v3 + 96) + v18) |= 1u;
                --v12;
              }
              while (v12);
            }
            *((_WORD *)this + 4) |= 2u;
            int v4 = *(_DWORD *)(v3 + 8);
          }
LABEL_17:
          ;
        }
      }
    }
    BOOL v78 = 0;
  }
  if (*(int *)(v3 + 4) >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)(v3 + 240);
      uint64_t v22 = *(void *)(v3 + 216);
      BOOL v23 = *(_DWORD *)(*(void *)(v3 + 144) + v19) < 2;
      char v24 = *(unsigned char *)(v21 + v20);
      char v25 = v24 & 0xFD | (2 * v23);
      *(unsigned char *)(v21 + v2sub_216817474((void **)this, 0) = v25;
      int v26 = v24 & 1;
      if (!v23 && v26 == 0)
      {
        float v28 = *(float *)(v22 + 4 * v20);
      }
      else
      {
        *(_DWORD *)(v22 + 4 * v2sub_216817474((void **)this, 0) = 1092616192;
        char v25 = *(unsigned char *)(v21 + v20);
        float v28 = 10.0;
      }
      char v29 = v25 & 0xFB | (4 * (v28 >= 10.0));
      *(unsigned char *)(v21 + v2sub_216817474((void **)this, 0) = v29;
      if (v28 < 10.0 && *(float *)(v22 + 4 * v20) > 0.0) {
        char v31 = 8;
      }
      else {
        char v31 = 0;
      }
      *(unsigned char *)(v21 + v20++) = v31 | v29 & 0xF7;
      v19 += 8;
    }
    while (v20 < *(int *)(v3 + 4));
  }
  int v32 = sub_21681BDE0(*(_DWORD *)this);
  int v81 = v32;
  if (v32 >= 0) {
    int v33 = v32;
  }
  else {
    int v33 = v32 + 1;
  }
  if (*(int *)(v3 + 8) >= 1)
  {
    uint64_t v34 = 0;
    int v79 = v33 >> 1;
    int v80 = this;
    while (1)
    {
      uint64_t v35 = *(void *)(v3 + 336);
      uint64_t v36 = (8 * v34) | 4;
      unsigned int v37 = (int *)(*(void *)(v3 + 360) + 4 * *(int *)(v35 + v36));
      uint64_t v38 = *(unsigned int *)(v35 + 8 * v34);
      if ((int)v38 < 1)
      {
        int v42 = 0;
        int v41 = 0;
        int v40 = 0;
        int v39 = 0;
      }
      else
      {
        int v39 = 0;
        int v40 = 0;
        int v41 = 0;
        int v42 = 0;
        uint64_t v43 = v38;
        int v44 = v37;
        do
        {
          uint64_t v45 = *v44++;
          unsigned int v46 = *(unsigned __int8 *)(*(void *)(v3 + 240) + v45);
          v42 += (v46 >> 1) & 1;
          v41 += (v46 >> 2) & 1;
          v40 += (v46 >> 3) & 1;
          v39 += v46 & 1;
          --v43;
        }
        while (v43);
      }
      uint64_t v47 = *(void *)(v3 + 432);
      uint64_t v48 = *(void *)(v3 + 408);
      uint64_t v49 = *(void *)(v3 + 264);
      uint64_t v50 = *(unsigned int *)(v49 + 8 * v34);
      uint64_t v82 = *(int *)(v49 + v36);
      uint64_t v83 = *(void *)(v3 + 288);
      if (v50 != 1) {
        break;
      }
      BOOL v51 = v38 == 2;
      BOOL v52 = v78;
      if (v38 != 2) {
        BOOL v52 = 0;
      }
      if (!v52) {
        goto LABEL_50;
      }
      BOOL v51 = 1;
LABEL_54:
      *(_DWORD *)(v48 + 4 * v34) = 1092616192;
LABEL_55:
      __int16 v53 = *(_WORD *)(v47 + 2 * v34) & 0xFFEF | (16 * (*(float *)(v48 + 4 * v34) >= 10.0));
      *(_WORD *)(v47 + 2 * v34) = v53;
      float v54 = *(float *)(v48 + 4 * v34);
      if (v54 < 10.0 && v54 > 0.0) {
        __int16 v56 = 32;
      }
      else {
        __int16 v56 = 0;
      }
      *(_WORD *)(v47 + 2 * v34) = v53 & 0xFF9F | ((v40 != 0) << 6) | v56;
      char v57 = sub_21681B998(*(float *)(v48 + 4 * v34), (uint64_t)&v84, v40 + v41);
      __int16 v58 = *(_WORD *)(v47 + 2 * v34);
      int v59 = *(_DWORD *)&v51 & ((v58 & 0x10) >> 4);
      if (v59) {
        __int16 v60 = 8;
      }
      else {
        __int16 v60 = 0;
      }
      __int16 v61 = v58 & 0xF871 | (4 * (v42 != 0)) & 0x7F | ((v57 & 0xF) << 7) | v60;
      __int16 v62 = v61 | (2 * (v50 != v81));
      if (v42) {
        __int16 v62 = v61 | (2 * (v50 != v79));
      }
      if (v59) {
        __int16 v63 = v61;
      }
      else {
        __int16 v63 = v62;
      }
      if (v58) {
        __int16 v64 = v61;
      }
      else {
        __int16 v64 = v63;
      }
      if (v41 | v64 & 0x10) {
        __int16 v65 = 0x8000;
      }
      else {
        __int16 v65 = 0;
      }
      *(_WORD *)(v47 + 2 * v34) = v64 & 0x17FF | ((v41 != 0) << 13) | v65;
      if (!v41) {
        goto LABEL_90;
      }
      float v66 = *(float *)(v48 + 4 * v34);
      if ((v64 & 0x10) == 0) {
        float v66 = 0.0;
      }
      int v67 = sub_21681B998(v66, (uint64_t)&v84, v41);
      if (v67 == 8)
      {
        if (v41 != v38) {
          goto LABEL_90;
        }
        __int16 v69 = *(_WORD *)(v47 + 2 * v34);
        if ((int)v38 <= 2 && (v69 & 0x10) == 0) {
          goto LABEL_90;
        }
LABEL_88:
        LOWORD(v7sub_216817474((void **)this, 0) = v69 & 0x7FFF;
        goto LABEL_89;
      }
      if (v67 != 4) {
        goto LABEL_90;
      }
      __int16 v68 = *(_WORD *)(v47 + 2 * v34);
      __int16 v69 = v68 | 0x4000;
      *(_WORD *)(v47 + 2 * v34) = v68 | 0x4000;
      if ((v68 & 3) != 0) {
        goto LABEL_90;
      }
      if ((v68 & 4) != 0) {
        goto LABEL_88;
      }
      if (v81 == 6)
      {
        uint64_t v75 = *(void *)(v3 + 240);
        if (((*(unsigned __int8 *)(v75 + v37[3]) ^ *(unsigned __int8 *)(v75 + *v37)) & 4) != 0
          || ((*(unsigned __int8 *)(v75 + v37[4]) ^ *(unsigned __int8 *)(v75 + v37[1])) & 4) != 0)
        {
          __int16 v76 = 0x8000;
        }
        else
        {
          __int16 v76 = 0;
        }
        LOWORD(v7sub_216817474((void **)this, 0) = v76 | v69 & 0x7FFF;
      }
      else
      {
        if (v81 != 4) {
          goto LABEL_90;
        }
        unsigned int v70 = v68 & 0x3FFF | 0x4000 | ((((*(unsigned __int8 *)(*(void *)(v3 + 240) + v37[2]) ^ *(unsigned __int8 *)(*(void *)(v3 + 240) + *v37)) >> 2) & 1) << 15);
      }
LABEL_89:
      *(_WORD *)(v47 + 2 * v34) = v70;
LABEL_90:
      unsigned int v71 = *((unsigned __int16 *)v80 + 4);
      if ((v71 & 4) != 0 && (int)v50 >= 1)
      {
        int v72 = (v71 >> 3) & 7;
        int v73 = (int *)(v83 + 4 * v82);
        while (1)
        {
          uint64_t v74 = *v73++;
          if (*(_DWORD *)(*(void *)(v3 + 24) + 8 * v74) != v72) {
            break;
          }
          if (!--v50) {
            goto LABEL_97;
          }
        }
        *(_WORD *)(v47 + 2 * v34) |= 0x1000u;
      }
LABEL_97:
      if (++v34 >= *(int *)(v3 + 8)) {
        return 1;
      }
    }
    BOOL v51 = 0;
LABEL_50:
    if ((*(_WORD *)(v47 + 2 * v34) & 1) == 0 || v39 == 2 && !v42 && (int)v50 > (int)v38) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = **((void **)this + 6);
  int v4 = sub_21681BDE0(*(_DWORD *)this);
  if (v4 >= 0) {
    int v5 = v4;
  }
  else {
    int v5 = v4 + 1;
  }
  if ((int)((*(void *)(**((void **)this + 6) + 464) - *(void *)(**((void **)this + 6) + 456)) >> 3) < 1) {
    return 1;
  }
  int v6 = 0;
  int v7 = v5 >> 1;
  while (sub_2168208B8(v3, v6))
  {
    sub_2168208F8(v3, v6++, v7);
    if (v6 >= (int)((*(void *)(**((void **)this + 6) + 464) - *(void *)(**((void **)this + 6) + 456)) >> 3)) {
      return 1;
    }
  }
  snprintf(__str, 0x400uLL, "Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.", v6);
  sub_216825A74(4, (uint64_t)__str, v9, v10, v11, v12, v13, v14, v15);
  return 0;
}

char *sub_2168278D4(void **a1, uint64_t a2, char *__src)
{
  int v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  int v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    int v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    int v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  char v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_21682799C()
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v6);
  if (v7 < 0)
  {
    if (v6[1] != (void *)3)
    {
      operator delete(v6[0]);
LABEL_19:
      pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"C++ demangling appears badly broken.", "Arch_ValidateAssumptions", (const char *)0x7C, "arch/assumptions.cpp", v0);
      goto LABEL_20;
    }
    BOOL v3 = *(_WORD *)v6[0] != 28265 || *((unsigned char *)v6[0] + 2) != 116;
    operator delete(v6[0]);
    if (v3) {
      goto LABEL_19;
    }
  }
  else
  {
    if (v7 != 3) {
      goto LABEL_19;
    }
    if (LOWORD(v6[0]) != 28265 || BYTE2(v6[0]) != 116) {
      goto LABEL_19;
    }
  }
LABEL_20:
  v6[0] = 0;
  size_t v8 = 8;
  uint64_t result = sysctlbyname("hw.cachelinesize", v6, &v8, 0, 0);
  if (v6[0] != (void *)128) {
    return pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"ARCH_CACHE_LINE_SIZE != Arch_ObtainCacheLineSize()", "Arch_ValidateAssumptions", (const char *)0x9B, "arch/assumptions.cpp", v5);
  }
  return result;
}

void sub_216827AB4()
{
  sub_216837344();
  sub_216834958();
  pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(__p);
  if (v3 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::ArchSetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)v1, v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_21682799C();
  sub_2168280C8();
}

void sub_216827B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __DarwinGetTemporaryDirectory(void)
{
  if (qword_26798E178 != -1) {
    dispatch_once(&qword_26798E178, &unk_26C74AB68);
  }
  return qword_26798E180;
}

char *sub_216827B78()
{
  uint64_t v0 = [(NSString *)NSTemporaryDirectory() UTF8String];
  size_t v1 = strlen(v0);
  unint64_t v2 = (char *)operator new[](v1 + 1);
  qword_26798E180 = (uint64_t)v2;

  return strcpy(v2, v0);
}

const char *__DarwinGetTemporaryDirectoryAppropriateForURLPath(uint64_t *a1, uint64_t a2)
{
  if (*((char *)a1 + 23) >= 0) {
    char v3 = a1;
  }
  else {
    char v3 = (uint64_t *)*a1;
  }
  uint64_t v4 = [NSURL fileURLWithPath:[NSString stringWithUTF8String:v3]];
  id v7 = 0;
  int v5 = [[(id)objc_msgSend(MEMORY[0x263F08850], "defaultManager") URLForDirectory:99 inDomain:1 appropriateForURL:v4 create:1 error:&v7];
  if (v7)
  {
    MEMORY[0x21D4477E0](a2, [objc_msgSend((id)objc_msgSend(v7, "localizedDescription")) UTF8String]);
    return "";
  }
  if (!v5) {
    return "";
  }
  return (const char *)[v5 path UTF8String];
}

void *pxrInternal__aapl__pxrReserved__::ArchAlignedAlloc(pxrInternal__aapl__pxrReserved__ *this, size_t __size)
{
  if ((unint64_t)this <= 8) {
    size_t v3 = 8;
  }
  else {
    size_t v3 = (size_t)this;
  }
  __memptr = 0;
  if (posix_memalign(&__memptr, v3, __size)) {
    return 0;
  }
  else {
    return __memptr;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchCloseAllFiles(pxrInternal__aapl__pxrReserved__ *this, int *a2, const int *a3)
{
  int v4 = (int)this;
  getrlimit(8, &v20);
  if (v20.rlim_cur == 0x7FFFFFFFFFFFFFFFLL) {
    int rlim_cur = 256;
  }
  else {
    int rlim_cur = v20.rlim_cur;
  }
  int v6 = -1;
  if (v4 >= 1)
  {
    uint64_t v7 = v4;
    size_t v8 = a2;
    do
    {
      int v10 = *v8++;
      int v9 = v10;
      if (v6 <= v10) {
        int v6 = v9;
      }
      --v7;
    }
    while (v7);
  }
  if (rlim_cur < 1)
  {
    uint64_t v13 = 0;
    int v12 = 0;
  }
  else
  {
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    do
    {
      if (v11 <= v6 && (v14 = v4, char v15 = a2, v4))
      {
        while (1)
        {
          int v16 = *v15++;
          if (v16 == v11) {
            break;
          }
          if (!--v14) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        while (1)
        {
          *__error() = 0;
          uint64_t v17 = close(v11);
          if (!v17) {
            break;
          }
          uint64_t v18 = v17;
          if (*__error() != 4)
          {
            if (*__error() != 9)
            {
              int v12 = *__error();
              uint64_t v13 = v18;
            }
            break;
          }
        }
      }
      ++v11;
    }
    while (v11 != rlim_cur);
  }
  *__error() = v12;
  return v13;
}

BOOL pxrInternal__aapl__pxrReserved__::Arch_DebuggerRunUnrelatedProcessPosix(pxrInternal__aapl__pxrReserved__ *this, BOOL (*a2)(void *), void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (pipe(__fd) == -1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork) {
    pid_t v5 = pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork();
  }
  else {
    pid_t v5 = fork();
  }
  if (v5 == -1)
  {
    close(__fd[0]);
    close(__fd[1]);
    return 0;
  }
  if (v5 < 1)
  {
    close(__fd[0]);
    signal(22, (void (__cdecl *)(int))1);
    signal(21, (void (__cdecl *)(int))1);
    if (setsid() == -1)
    {
      int __buf = *__error();
      write(__fd[1], &__buf, 4uLL);
      _exit(1);
    }
    int v9 = signal(1, (void (__cdecl *)(int))1);
    if (pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork) {
      pid_t v10 = ((uint64_t (*)(void (__cdecl *)(int)))pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork)(v9);
    }
    else {
      pid_t v10 = fork();
    }
    if (v10 == -1)
    {
      int __buf = *__error();
      write(__fd[1], &__buf, 4uLL);
      _exit(2);
    }
    if (v10 < 1)
    {
      int __buf = pxrInternal__aapl__pxrReserved__::ArchCloseAllFiles((pxrInternal__aapl__pxrReserved__ *)1, &__fd[1], v11);
      if (__buf == -1)
      {
        write(__fd[1], &__buf, 4uLL);
        _exit(3);
      }
      int __buf = chdir("/");
      if (__buf == -1)
      {
        write(__fd[1], &__buf, 4uLL);
        _exit(4);
      }
      umask(0);
      open("/dev/null", 0);
      open("/dev/null", 1);
      open("/dev/null", 1);
      if (fcntl(__fd[1], 2, 1) == -1)
      {
        int v12 = *__error();
        write(__fd[1], &v12, 4uLL);
        _exit(5);
      }
      if ((((uint64_t (*)(void))this)(a2) & 1) == 0)
      {
        int __buf = *__error();
        write(__fd[1], &__buf, 4uLL);
        _exit(6);
      }
    }
    _exit(0);
  }
  close(__fd[1]);
  int __buf = 0;
  ssize_t v6 = read(__fd[0], &__buf, 1uLL);
  if (v6 == -1)
  {
    do
      ssize_t v7 = read(__fd[0], &__buf, 1uLL);
    while (v7 == -1);
    ssize_t v6 = v7;
  }
  close(__fd[0]);
  return v6 == 0;
}

void sub_2168280C8()
{
  uint64_t v0 = getenv("ARCH_DEBUGGER");
  if (v0)
  {
    size_t v1 = v0;
    int v2 = *v0;
    if (*v0)
    {
      unint64_t v3 = 0;
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      __p[0] = 0;
      __p[1] = 0;
      ssize_t v6 = v0;
      uint64_t v21 = 0;
      while (v2 == 37)
      {
        size_t v8 = v6 + 1;
        int v7 = v6[1];
        if (v7 != 101)
        {
          if (v7 == 112)
          {
            v5 += 20;
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if ((v4 & 0x80u) == 0) {
          unint64_t v9 = v4;
        }
        else {
          unint64_t v9 = v3;
        }
        if (!v9)
        {
          pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(&v18);
          if ((char)v4 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v21 = v19;
          *(_OWORD *)std::string __p = v18;
          unint64_t v4 = HIBYTE(v19);
          unint64_t v3 = *((void *)&v18 + 1);
        }
        if ((v4 & 0x80u) == 0) {
          unint64_t v10 = v4;
        }
        else {
          unint64_t v10 = v3;
        }
        v5 += v10;
LABEL_11:
        int v2 = v8[1];
        ssize_t v6 = v8 + 1;
      }
      if (!v2)
      {
        int v11 = (char *)malloc(v5 + 1);
        qword_26798E198 = (uint64_t)v11;
        while (1)
        {
          int v12 = *v1;
          if (v12 != 37) {
            break;
          }
          int v13 = v1[1];
          if (v13 == 101)
          {
            if (v21 >= 0) {
              int v16 = __p;
            }
            else {
              int v16 = (void **)__p[0];
            }
            strcat(v11, (const char *)v16);
            uint64_t v17 = (char *)HIBYTE(v21);
            if (v21 < 0) {
              uint64_t v17 = (char *)__p[1];
            }
            int v11 = &v17[(void)v11];
          }
          else
          {
            if (v13 != 112) {
              goto LABEL_31;
            }
            pid_t v14 = getpid();
            sprintf(v11--, "%d", v14);
            while (*++v11)
              ;
          }
          ++v1;
LABEL_39:
          ++v1;
        }
        if (!*v1)
        {
          char *v11 = 0;
          if (SHIBYTE(v21) < 0) {
            operator delete(__p[0]);
          }
          return;
        }
LABEL_31:
        *v11++ = v12;
        goto LABEL_39;
      }
LABEL_10:
      ++v5;
      size_t v8 = v6;
      goto LABEL_11;
    }
  }
}

void sub_21682828C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDebuggerIsAttached(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_216828374();
  unsigned int v4 = 0;
  *(void *)uint64_t v5 = 0xE00000001;
  int v6 = 1;
  pid_t v7 = getpid();
  size_t v2 = 648;
  if (sysctl(v5, 4u, v3, &v2, 0, 0)) {
    return 0;
  }
  else {
    return (v4 >> 11) & 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDebuggerWait(uint64_t this)
{
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDebuggerAttach(pxrInternal__aapl__pxrReserved__ *this)
{
  return 0;
}

void sub_216828374()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E190))
  {
    sub_2168283F4();
    __cxa_guard_release(&qword_26798E190);
  }
}

void sub_2168283D8(_Unwind_Exception *a1)
{
}

uint64_t sub_2168283F4()
{
  *(void *)&v2.sa_mask = 0x1000000000;
  v2.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_216828460;
  uint64_t result = sigaction(5, &v2, 0);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"Failed to set SIGTRAP handler;  debug trap not enabled",
  }
             "Arch_DebuggerInitPosix",
             (const char *)0x66,
             "arch/debugger.cpp",
             v1);
  return result;
}

uint64_t sub_216828460()
{
  int v0 = 1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)byte_26798E188, (unsigned __int8 *)&v0, 0);
  if (v0 == 1) {
    return raise(17);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDemangle(uint64_t a1)
{
  uint64_t v2 = sub_2168287BC(a1);
  if (v2)
  {
    sub_2168288E4((std::string *)a1);
    if (*(char *)(a1 + 23) < 0)
    {
      unsigned int v4 = *(char **)a1;
      uint64_t v3 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
      unsigned int v4 = (char *)a1;
    }
    if (v3 >= 34)
    {
      uint64_t v5 = &v4[v3];
      int v6 = v4;
      do
      {
        pid_t v7 = (char *)memchr(v6, 112, v3 - 33);
        if (!v7) {
          break;
        }
        uint64_t v8 = v7;
        if (!memcmp(v7, "pxrInternal__aapl__pxrReserved__::", 0x22uLL))
        {
          if (v8 != v5)
          {
            std::string::size_type v9 = v8 - v4;
            if (v8 - v4 != -1)
            {
LABEL_13:
              std::string::erase((std::string *)a1, v9, 0x22uLL);
              if (*(char *)(a1 + 23) < 0)
              {
                int v11 = *(char **)a1;
                uint64_t v10 = *(void *)(a1 + 8);
              }
              else
              {
                uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
                int v11 = (char *)a1;
              }
              if (v10 >= 34)
              {
                int v12 = &v11[v10];
                int v13 = v11;
                while (1)
                {
                  pid_t v14 = (char *)memchr(v13, 112, v10 - 33);
                  if (!v14) {
                    break;
                  }
                  uint64_t v15 = v14;
                  if (!memcmp(v14, "pxrInternal__aapl__pxrReserved__::", 0x22uLL))
                  {
                    if (v15 != v12)
                    {
                      std::string::size_type v9 = v15 - v11;
                      if (v15 - v11 != -1) {
                        goto LABEL_13;
                      }
                    }
                    return v2;
                  }
                  int v13 = v15 + 1;
                  uint64_t v10 = v12 - (v15 + 1);
                  if (v10 < 34) {
                    return v2;
                  }
                }
              }
            }
          }
          return v2;
        }
        int v6 = v8 + 1;
        uint64_t v3 = v5 - (v8 + 1);
      }
      while (v3 >= 34);
    }
  }
  return v2;
}

void pxrInternal__aapl__pxrReserved__::Arch_DemangleFunctionName(std::string *a1)
{
  size_t v1 = a1;
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    if (a1->__r_.__value_.__l.__size_ <= 2) {
      return;
    }
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    if (*v1->__r_.__value_.__l.__data_ != 95 || a1->__r_.__value_.__s.__data_[1] != 90) {
      return;
    }
  }
  else if (HIBYTE(a1->__r_.__value_.__r.__words[2]) < 3u {
         || a1->__r_.__value_.__s.__data_[0] != 95
  }
         || a1->__r_.__value_.__s.__data_[1] != 90)
  {
    return;
  }
  int status = 0;
  uint64_t v2 = __cxa_demangle((const char *)a1, 0, 0, &status);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(&v4, v2);
    if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v1->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v1->__r_.__value_.__l.__data_ = v4;
    v1->__r_.__value_.__r.__words[2] = v5;
    free(v3);
    sub_2168288E4(v1);
  }
}

void pxrInternal__aapl__pxrReserved__::ArchGetDemangled(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v4 = *(void *)(a1 + 16);
  }
  if (pxrInternal__aapl__pxrReserved__::ArchDemangle((uint64_t)__p))
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v4;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216828734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetDemangled(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    uint64_t v4 = sub_216779094((void *)a2, (char *)this);
    if (pxrInternal__aapl__pxrReserved__::ArchDemangle((uint64_t)v4)) {
      return;
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_2168287A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168287BC(uint64_t a1)
{
  sub_216779094(&v14, "P");
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v3 = *(const std::string::value_type **)a1;
  }
  if (v2 >= 0) {
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v4 = *(void *)(a1 + 8);
  }
  std::string::append(&v14, v3, v4);
  int status = 0;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v5 = &v14;
  }
  else {
    std::string::size_type v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  int v6 = __cxa_demangle((const char *)v5, 0, 0, &status);
  pid_t v7 = v6;
  if (v6)
  {
    size_t v8 = strlen(v6);
    if (v8 >= 2 && v7[v8 - 1] == 42)
    {
      sub_216799F58(&__dst, v7, v8 - 1);
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      *(_OWORD *)a1 = __dst;
      *(void *)(a1 + 16) = v12;
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    free(v7);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_2168288C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168288E4(std::string *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E1A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E1A8))
  {
    qword_26798E1A0 = (uint64_t)sub_216828BD4();
    __cxa_guard_release(&qword_26798E1A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E1B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E1B8))
  {
    char v30 = operator new(0x18uLL);
    sub_216779094(v30, "string");
    qword_26798E1B0 = (uint64_t)v30;
    __cxa_guard_release(&qword_26798E1B8);
  }
  for (std::string::size_type i = 0; ; std::string::erase(this, i, v21))
  {
    std::string::size_type v3 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v4 = (std::string *)this->__r_.__value_.__r.__words[0];
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type v4 = this;
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    int v6 = *(char *)(qword_26798E1A0 + 23);
    pid_t v7 = v6 >= 0 ? (char *)qword_26798E1A0 : *(char **)qword_26798E1A0;
    int64_t v8 = v6 >= 0 ? *(unsigned __int8 *)(qword_26798E1A0 + 23) : *(void *)(qword_26798E1A0 + 8);
    if (size < i) {
      break;
    }
    if (v8)
    {
      uint64_t v9 = (char *)v4 + i;
      uint64_t v10 = (char *)v4 + size;
      int64_t v11 = size - i;
      if ((uint64_t)(size - i) >= v8)
      {
        int v12 = *v7;
        while (1)
        {
          int64_t v13 = v11 - v8;
          if (v13 == -1) {
            break;
          }
          std::string v14 = (char *)memchr(v9, v12, v13 + 1);
          if (!v14) {
            break;
          }
          uint64_t v15 = v14;
          if (!memcmp(v14, v7, v8))
          {
            if (v15 == v10) {
              goto LABEL_44;
            }
            std::string::size_type i = v15 - (char *)v4;
            goto LABEL_24;
          }
          uint64_t v9 = v15 + 1;
          int64_t v11 = v10 - (v15 + 1);
          if (v11 < v8) {
            goto LABEL_44;
          }
        }
      }
      break;
    }
LABEL_24:
    if (i == -1) {
      break;
    }
    int v16 = *(char *)(qword_26798E1B0 + 23);
    if (v16 >= 0) {
      uint64_t v17 = (const std::string::value_type *)qword_26798E1B0;
    }
    else {
      uint64_t v17 = *(const std::string::value_type **)qword_26798E1B0;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(qword_26798E1B0 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(qword_26798E1B0 + 8);
    }
    std::string::replace(this, i, v8, v17, v18);
    if (*(char *)(qword_26798E1B0 + 23) < 0) {
      uint64_t v19 = *(void *)(qword_26798E1B0 + 8);
    }
    else {
      uint64_t v19 = *(unsigned __int8 *)(qword_26798E1B0 + 23);
    }
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v20 = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v20 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    i += v19;
    std::string::size_type v21 = 0;
    std::string::size_type v22 = v20 - i;
    if (v20 != i)
    {
      while (1)
      {
        BOOL v23 = this;
        if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
          BOOL v23 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        if (v23->__r_.__value_.__s.__data_[i + v21] != 32) {
          break;
        }
        if (v22 == ++v21)
        {
          std::string::size_type v21 = v22;
          break;
        }
      }
    }
  }
LABEL_44:
  std::string::size_type v24 = 0;
LABEL_45:
  char v25 = this;
  if ((v3 & 0x80) != 0)
  {
    char v25 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v3 = this->__r_.__value_.__l.__size_;
  }
  if (v3 >= v24)
  {
    int v26 = (char *)v25 + v24;
    uint64_t v27 = (char *)v25 + v3;
    while (v27 - v26 >= 5)
    {
      float v28 = (char *)memchr(v26, 115, v27 - v26 - 4);
      if (!v28) {
        break;
      }
      if (*(_DWORD *)v28 == 979661939 && v28[4] == 58)
      {
        if (v28 != v27)
        {
          std::string::size_type v24 = v28 - (char *)v25;
          if (v28 - (char *)v25 != -1)
          {
            std::string::erase(this, v24, 5uLL);
            std::string::size_type v3 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            goto LABEL_45;
          }
        }
        return;
      }
      int v26 = v28 + 1;
    }
  }
}

void sub_216828B9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_26798E1B8);
  _Unwind_Resume(a1);
}

void *sub_216828BD4()
{
  int v0 = operator new(0x18uLL);
  sub_216779094(v0, (char *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL));
  sub_2168287BC((uint64_t)v0);
  return v0;
}

void sub_216828C20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchHasEnv(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return getenv(a1) != 0;
}

char *pxrInternal__aapl__pxrReserved__::ArchGetEnv@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = getenv(a1);
  if (result)
  {
    return (char *)sub_216779094(a2, result);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchSetEnv(const char *a1, const char *a2, int a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return setenv(a1, a2, a3) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchRemoveEnv(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return unsetenv(a1) == 0;
}

void pxrInternal__aapl__pxrReserved__::ArchExpandEnvironmentVariables(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E200))
  {
    sub_2168290A4((const std::locale *)&unk_26798E1C0, "\\$\\{([^}]+)\\}", 0);
    __cxa_atexit((void (*)(void *))sub_216829048, &unk_26798E1C0, &dword_216758000);
    __cxa_guard_release(&qword_26798E200);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  *(_OWORD *)uint64_t v19 = 0u;
  memset(v20, 0, 25);
  while (1)
  {
    __p[6] = 0;
    __p[7] = 0;
    char v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    char v33 = 0;
    char v34 = 0;
    uint64_t v35 = 0;
    memset(__p, 0, 41);
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a2 + 8);
    }
    int v6 = sub_21683167C((uint64_t)&unk_26798E1C0, v5, v5 + v4, (uint64_t)__p, 0);
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    sub_216831858((uint64_t)v19, v8, v8 + v7, (uint64_t *)__p, 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v6) {
      break;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v19[1] == v19[0]) {
      uint64_t v10 = (uint64_t *)v20 + 1;
    }
    else {
      uint64_t v10 = (uint64_t *)v19[0];
    }
    uint64_t v11 = *v10;
    int v12 = (uint64_t *)((char *)v19[0] + 8);
    if (v19[1] == v19[0]) {
      int v12 = (uint64_t *)&v20[1];
    }
    uint64_t v13 = *v12;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v19[1] - (char *)v19[0]) >> 3) <= 1) {
      std::string v14 = v19;
    }
    else {
      std::string v14 = (void **)v19[0];
    }
    if (*((unsigned char *)v14 + 40))
    {
      sub_21682E90C(v17, (char *)v14[3], (char *)v14[4], (unsigned char *)v14[4] - (unsigned char *)v14[3]);
    }
    else
    {
      v17[0] = 0;
      v17[1] = 0;
      uint64_t v18 = 0;
    }
    pxrInternal__aapl__pxrReserved__::ArchGetEnv((const char *)v17, __p);
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      std::string::size_type v16 = HIBYTE(__p[2]);
    }
    else {
      std::string::size_type v16 = (std::string::size_type)__p[1];
    }
    std::string::replace((std::string *)a2, v11 - v9, v13 - v11, (const std::string::value_type *)v15, v16);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void sub_216828FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void sub_216829048(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    sub_216784EC4(locale);
  }

  std::locale::~locale(this);
}

char **pxrInternal__aapl__pxrReserved__::ArchEnviron(pxrInternal__aapl__pxrReserved__ *this)
{
  return *_NSGetEnviron();
}

const std::locale *sub_2168290A4(const std::locale *a1, char *a2, int a3)
{
  int v6 = sub_21682913C(a1);
  LODWORD(v6[3].__locale_) = a3;
  *(_OWORD *)((char *)&v6[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[5].__locale_ + 4) = 0u;
  HIDWORD(v6[7].__locale_) = 0;
  size_t v7 = strlen(a2);
  if (sub_21682919C((uint64_t)a1, a2, &a2[v7]) != &a2[v7]) {
    sub_216829370();
  }
  return a1;
}

void sub_21682911C(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    sub_216784EC4(locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

const std::locale *sub_21682913C(const std::locale *a1)
{
  int v2 = (const std::locale *)MEMORY[0x21D447D80]();
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, MEMORY[0x263F8C130]);
  return a1;
}

void sub_216829188(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *sub_21682919C(uint64_t a1, char *a2, char *a3)
{
  int v6 = operator new(8uLL);
  *int v6 = &unk_26C74AB98;
  size_t v7 = operator new(0x10uLL);
  void *v7 = &unk_26C74AC68;
  v7[1] = v6;
  sub_2168293C8((void *)(a1 + 40), (uint64_t)v7);
  *(void *)(a1 + 56) = *(void *)(a1 + 40);
  unsigned int v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
LABEL_12:
        return sub_216829600(a1, a2, a3);
      case 0x80u:
        return (char *)sub_2168296A4(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return sub_2168297E4(a1, a2, a3);
      default:
        goto LABEL_24;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32) {
LABEL_24:
      }
        sub_216829924();
      goto LABEL_12;
    }
    return sub_216829550(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return sub_216829410(a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_21682933C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_216829370()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2168293B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2168293C8(void *a1, uint64_t a2)
{
  sub_216829998(&v5, a2);
  std::string::size_type v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

char *sub_216829410(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  size_t v7 = a2;
  do
  {
    unsigned int v8 = v7;
    size_t v7 = sub_216829D64(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(v10 + 8);
    *uint64_t v9 = &unk_26C74AC68;
    v9[1] = v11;
    *(void *)(v10 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = v8 + 1;
    std::string v14 = v8 + 1;
    do
    {
      unsigned int v8 = v14;
      std::string v14 = sub_216829D64(a1, (char *)v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      uint64_t v15 = operator new(0x10uLL);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      *uint64_t v15 = &unk_26C74AC68;
      v15[1] = v17;
      *(void *)(v16 + 8) = v15;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    sub_216829C8C(a1, v6, v12);
  }
  return a3;
}

char *sub_216829550(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::string::size_type v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  long long v4 = (char *)a3;
  if (*a2 == 94)
  {
    sub_21682A558(a1);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      std::string::size_type v3 = sub_216830C20(a1, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        sub_216830BC8();
      }
      sub_21682A5CC(a1);
    }
  }
  return v4;
}

char *sub_216829600(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v3 = a3;
  uint64_t v6 = *(void *)(a1 + 56);
  size_t v7 = sub_21683129C(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    sub_216830BC8();
  unsigned int v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = sub_21683129C(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    unsigned int v8 = v10;
    sub_216829C8C(a1, v6, v9);
  }
  return v3;
}

unsigned __int8 *sub_2168296A4(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  size_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    *uint64_t v9 = &unk_26C74AC68;
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  }
  else
  {
    sub_216829550(a1, __s, v8);
  }
  while (1)
  {
    uint64_t v15 = v8 == a3 ? v8 : v8 + 1;
    if (v15 == a3) {
      break;
    }
    uint64_t v11 = (unsigned __int8 *)memchr(v15, 10, a3 - v15);
    if (v11) {
      unsigned int v8 = v11;
    }
    else {
      unsigned int v8 = a3;
    }
    uint64_t v12 = *(void *)(a1 + 56);
    if (v8 == v15)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      void *v13 = &unk_26C74AC68;
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      sub_216829550(a1, v15, v8);
    }
    sub_216829C8C(a1, v6, v12);
  }
  return a3;
}

char *sub_2168297E4(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  size_t v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    *uint64_t v9 = &unk_26C74AC68;
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  }
  else
  {
    sub_216829600(a1, __s, v8);
  }
  while (1)
  {
    uint64_t v15 = v8 == a3 ? v8 : v8 + 1;
    if (v15 == a3) {
      break;
    }
    uint64_t v11 = (char *)memchr(v15, 10, a3 - v15);
    if (v11) {
      unsigned int v8 = v11;
    }
    else {
      unsigned int v8 = a3;
    }
    uint64_t v12 = *(void *)(a1 + 56);
    if (v8 == v15)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      void *v13 = &unk_26C74AC68;
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      sub_216829600(a1, v15, v8);
    }
    sub_216829C8C(a1, v6, v12);
  }
  return a3;
}

void sub_216829924()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_216829968(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216829984(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void *sub_216829998(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C74ABF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2168299F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217323E0C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216829A0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216829A34(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216829A64(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74AC40)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216829AA8(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216829B14(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_216829B90(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = *(void *)(result + 8);
  return result;
}

void *sub_216829BA4(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216829C10(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

void *sub_216829C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *(void *)(a3 + 8);
  v6[1] = *(void *)(a2 + 8);
  v6[2] = v7;
  *uint64_t v6 = &unk_26C74B1D8;
  *(void *)(a2 + 8) = v6;
  *(void *)(a3 + 8) = 0;
  unsigned int v8 = operator new(0x10uLL);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  *unsigned int v8 = &unk_26C74AC68;
  v8[1] = v9;
  *(void *)(a3 + 8) = v8;
  *(void *)(*(void *)(a1 + 56) + 8) = 0;
  uint64_t result = operator new(0x10uLL);
  uint64_t v11 = *(void *)(a3 + 8);
  *uint64_t result = &unk_26C74B220;
  result[1] = v11;
  *(void *)(*(void *)(a1 + 56) + 8) = result;
  *(void *)(a1 + 56) = *(void *)(a3 + 8);
  return result;
}

unsigned __int8 *sub_216829D64(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)sub_216829E0C(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = sub_21682A01C(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      int v10 = *(_DWORD *)(a1 + 28) + 1;
      return sub_21682A254(a1, v9, (unsigned __int8 *)a3, v7, v8 + 1, v10);
    }
  }
  return result;
}

char *sub_216829E0C(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      uint64_t v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        uint64_t v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            sub_21682913C(v18);
            long long v19 = 0u;
            uint64_t v21 = 0;
            long long v20 = 0u;
            LODWORD(v19) = *(_DWORD *)(a1 + 24);
            uint64_t v12 = (char *)sub_21682919C(v18, v3 + 3, a3);
            int v17 = DWORD1(v19);
            sub_21682A6C4(a1, (uint64_t)v18, 1, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v17;
            if (v12 == a3 || *v12 != 41) {
              sub_21682A74C();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            sub_21682913C(v18);
            long long v19 = 0u;
            uint64_t v21 = 0;
            long long v20 = 0u;
            LODWORD(v19) = *(_DWORD *)(a1 + 24);
            uint64_t v12 = (char *)sub_21682919C(v18, v3 + 3, a3);
            int v13 = DWORD1(v19);
            sub_21682A6C4(a1, (uint64_t)v18, 0, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v13;
            if (v12 == a3 || *v12 != 41) {
              sub_21682A74C();
            }
LABEL_31:
            std::string::size_type v3 = v12 + 1;
            sub_216829048(v18);
            return v3;
          }
        }
      }
      return v3;
    }
    sub_21682A5CC(a1);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    sub_21682A558(a1);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      char v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      char v16 = 0;
    }
    sub_21682A640(a1, v16);
    v3 += 2;
  }
  return v3;
}

void sub_216829FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_21682A01C(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46)
      {
        uint64_t v7 = operator new(0x10uLL);
        uint64_t v8 = *(void *)(a1 + 56);
        uint64_t v9 = *(void *)(v8 + 8);
        void *v7 = &unk_26C74AE30;
        v7[1] = v9;
        *(void *)(v8 + 8) = v7;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return (unsigned __int8 *)++v3;
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_29;
      }
LABEL_35:
      sub_21682C2EC();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        int v11 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        uint64_t v12 = (char *)sub_216829410(a1, a2 + 3, a3);
        if (v12 == a3) {
          goto LABEL_36;
        }
        std::string::size_type v3 = v12;
        if (*v12 != 41) {
          goto LABEL_36;
        }
LABEL_25:
        --*v11;
        return (unsigned __int8 *)++v3;
      }
      sub_21682C20C((void *)a1);
      int v13 = *(_DWORD *)(a1 + 28);
      int v11 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      uint64_t v14 = (char *)sub_216829410(a1, v3 + 1, a3);
      if (v14 != a3)
      {
        std::string::size_type v3 = v14;
        if (*v14 == 41)
        {
          sub_21682C280((void *)a1, v13);
          goto LABEL_25;
        }
      }
    }
LABEL_36:
    sub_21682A74C();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)sub_21682C0F8(a1, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_35;
    }
LABEL_29:
    return sub_21682C344(a1, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }

  return sub_21682C054(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

unsigned __int8 *sub_21682A254(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = a6;
  int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        int v13 = a2 + 2;
        uint64_t v14 = 0;
        uint64_t v18 = 1;
        goto LABEL_33;
      }
      uint64_t v14 = 0;
      uint64_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    int v15 = a2 + 1;
    char v16 = sub_2168307A0(a1, a2 + 1, a3, &v28);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              int v13 = v16 + 2;
              uint64_t v14 = v28;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              uint64_t v18 = v28;
LABEL_33:
              uint64_t v21 = a4;
              char v22 = 0;
LABEL_46:
              sub_216830664(a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            uint64_t v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v18 = v28;
LABEL_45:
            uint64_t v21 = a4;
            char v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        char v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            int v13 = v16 + 3;
            uint64_t v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          uint64_t v14 = v28;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          uint64_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        uint64_t v25 = sub_2168307A0(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          uint64_t v18 = v27;
          uint64_t v14 = v28;
          if (v27 >= v28)
          {
            int v13 = v25 + 1;
            char v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              char v22 = v26 != 63;
              if (v26 == 63) {
                int v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = a4;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      sub_216830898();
    }
LABEL_58:
    sub_216830840();
  }
  if (v12 == 42)
  {
    int v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      int v13 = a2 + 2;
      uint64_t v14 = 0;
      goto LABEL_26;
    }
    uint64_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      int v13 = a2 + 2;
      uint64_t v14 = 1;
LABEL_26:
      uint64_t v18 = -1;
      goto LABEL_33;
    }
    uint64_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void *sub_21682A558(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  BOOL v3 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(v4 + 8);
  *uint64_t result = &unk_26C74AD10;
  result[1] = v5;
  *((unsigned char *)result + 16) = v3;
  *(void *)(v4 + 8) = result;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  return result;
}

void *sub_21682A5CC(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  BOOL v3 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(v4 + 8);
  *uint64_t result = &unk_26C74AD58;
  result[1] = v5;
  *((unsigned char *)result + 16) = v3;
  *(void *)(v4 + 8) = result;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  return result;
}

__n128 sub_21682A640(uint64_t a1, char a2)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  *(void *)uint64_t v4 = &unk_26C74ADA0;
  *((void *)v4 + 1) = v5;
  std::locale::locale((std::locale *)v4 + 2, (const std::locale *)a1);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 24) = result;
  v4[40] = a2;
  *(void *)(*(void *)(a1 + 56) + 8) = v4;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  return result;
}

uint64_t sub_21682A6C4(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8 = operator new(0x58uLL);
  uint64_t result = sub_21682AC60((uint64_t)v8, a2, a3, *(void *)(*(void *)(a1 + 56) + 8), a4);
  *(void *)(*(void *)(a1 + 56) + 8) = v8;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  return result;
}

void sub_21682A738(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21682A74C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682A790(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_21682A7A4(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21682A810(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_21682A88C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v4;
  return result;
}

void *sub_21682A8EC(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21682A958(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_21682A9D4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v5;
  return result;
}

std::locale *sub_21682AA24(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ADA0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_21682AAB0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ADA0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t sub_21682AB4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v12;
  return result;
}

uint64_t sub_21682AC60(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26C74ADE8;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4sub_216817474((void **)this, 0) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 8sub_216817474((void **)this, 0) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

std::locale *sub_21682ACF0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ADE8;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_216784EC4(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_21682AD90(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ADE8;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_216784EC4(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }

  operator delete(a1);
}

void sub_21682AE40(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  long long v26 = 0uLL;
  char v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  std::string __p = 0;
  BOOL v19 = 0;
  unint64_t v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v20 = 0;
  *(void *)&long long v21 = v5;
  *((void *)&v21 + 1) = v5;
  char v22 = 0;
  sub_21682B4B0((char **)&__p, v4, &v21);
  uint64_t v23 = v6;
  uint64_t v24 = v6;
  char v25 = 0;
  long long v26 = v21;
  char v27 = v22;
  uint64_t v29 = v6;
  char v28 = 1;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(void *)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_21682B040(a1 + 16, v7, *(void *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8sub_216817474((void **)this, 0) = 0;
    int v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = *(void *)(a1 + 8);
  int v10 = (char *)__p;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (unsigned char *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    char v16 = &v10[24 * v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
    *(unsigned char *)(v17 + 16) = v16[16];
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  BOOL v19 = v10;
  operator delete(v10);
}

void sub_21682AFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21682AFCC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(a1 + 24) = a4;
  BOOL v8 = (_OWORD *)(a1 + 24);
  *(void *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 4sub_216817474((void **)this, 0) = 0;
  uint64_t result = sub_21682B4B0((char **)a1, a2, (long long *)(a1 + 24));
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 40);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = a3;
  }
  *(unsigned char *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_21682B040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  int v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v40 = a3;
    *((void *)&v40 + 1) = a3;
    char v41 = 0;
    *(_DWORD *)unsigned int v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v39, 0, 21);
    uint64_t v43 = (_OWORD *)sub_21682B788((uint64_t *)&v42, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    uint64_t v35 = a4;
    int v12 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 1sub_216817474((void **)this, 0) = a2;
    *((void *)v12 - 9) = a3;
    sub_21682B66C((uint64_t)(v12 - 4), *(unsigned int *)(a1 + 28), &v40);
    sub_21682B6A8((uint64_t)v43 - 40, *(unsigned int *)(a1 + 32));
    int v13 = v43;
    *((void *)v43 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        sub_21682B6D8();
      }
      char v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      uint64_t v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          uint64_t v18 = *((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            char v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          BOOL v19 = v43 - 6;
          sub_21682BB08((uint64_t)&v44, (void *)v43 - 12);
          uint64_t v43 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)unsigned int v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          sub_21682BE84(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          sub_21682BF04((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          char v22 = v43;
          if ((unint64_t)v43 >= v44)
          {
            uint64_t v43 = (_OWORD *)sub_21682B788((uint64_t *)&v42, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            *uint64_t v43 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            _OWORD v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 1sub_216817474((void **)this, 0) = v24;
            uint64_t v43 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          int v13 = v43;
          ++v14;
          if (v42 != v43) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          sub_21682B730();
      }
      break;
    }
  }
  *(void *)unsigned int v37 = &v42;
  sub_21682BFBC((void ***)v37);
  return v6;
}

void sub_21682B430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_21682B628(&a13);
  a13 = v18 - 112;
  sub_21682BFBC((void ***)&a13);
  _Unwind_Resume(a1);
}

char *sub_21682B4B0(char **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    uint64_t v15 = a1[1];
    unint64_t v16 = (v15 - result) / 24;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (v15 - result) / 24;
    }
    if (v17)
    {
      uint64_t v18 = result;
      do
      {
        *(_OWORD *)uint64_t v18 = *a3;
        v18[16] = *((unsigned char *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      BOOL v19 = &v15[24 * (a2 - v16)];
      uint64_t v20 = 24 * a2 - 24 * v16;
      do
      {
        long long v21 = *a3;
        *((void *)v15 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = sub_216782E84(a1, v10);
    unint64_t v11 = a1[1];
    int v12 = &v11[24 * a2];
    uint64_t v13 = 24 * a2;
    do
    {
      long long v14 = *a3;
      *((void *)v11 + 2) = *((void *)a3 + 2);
      *(_OWORD *)unint64_t v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

void *sub_21682B628(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21682B66C(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_21682BBDC((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_21682B6A8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_21682BD64((void **)a1, a2 - v2);
  }
}

void sub_21682B6D8()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682B71C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21682B730()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682B774(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21682B788(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  _DWORD v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_21682B950(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_216817474((void **)this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 1sub_216817474((void **)this, 0) = v13;
  void v16[2] = v11 + 96;
  sub_21682B8D8(a1, v16);
  uint64_t v14 = a1[1];
  sub_21682BB60(v16);
  return v14;
}

void sub_21682B8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21682BB60((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21682B8D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21682B998((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_21682B950(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_21677CA1C();
  }
  return operator new(96 * a2);
}

uint64_t sub_21682B998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 8sub_216817474((void **)this, 0) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 4sub_216817474((void **)this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 4sub_216817474((void **)this, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4sub_216817474((void **)this, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21682BA7C((uint64_t)v12);
  return v10;
}

uint64_t sub_21682BA7C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21682BAB4((uint64_t *)a1);
  }
  return a1;
}

void sub_21682BAB4(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  unint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_21682BB08(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void sub_21682BB08(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **sub_21682BB60(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_21682BB94(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    sub_21682BB08(v4, (void *)(i - 96));
  }
}

void sub_21682BBDC(void **a1, unint64_t a2, long long *a3)
{
  long long v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      long long v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        v9[2] = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)sub_216782ED8(v6, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = &v14[24 * v10];
    BOOL v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    long long v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    long long v23 = &v14[24 * v13];
    char v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

void sub_21682BD64(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = &v13[16 * v10];
    long long v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

char *sub_21682BE84(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216782E84(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_21682BEE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21682BF04(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21682BF78(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_21682BF5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21682BF78(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_216787EE0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_21682BFBC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_21682BB08((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_21682C054(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    sub_21682C4A0();
  }
  uint64_t result = sub_21682C4F8(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)sub_21682C5B8(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = sub_21682C688(a1, a2 + 1, (char *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

char *sub_21682C0F8(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    uint64_t v6 = (uint64_t *)sub_21682D6B4(a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = v6;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      sub_21682D730((uint64_t)v6, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      uint64_t v5 = sub_21682EB1C(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      sub_21682D730((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      sub_21682EAC4();
    return v8 + 1;
  }
  return a2;
}

void *sub_21682C20C(void *result)
{
  if ((result[3] & 2) == 0)
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x18uLL);
    int v2 = *((_DWORD *)v1 + 7) + 1;
    *((_DWORD *)v1 + 7) = v2;
    uint64_t v3 = v1[7];
    uint64_t v4 = *(void *)(v3 + 8);
    *uint64_t result = &unk_26C74B070;
    result[1] = v4;
    *((_DWORD *)result + 4) = v2;
    *(void *)(v3 + 8) = result;
    v1[7] = *(void *)(v1[7] + 8);
  }
  return result;
}

void *sub_21682C280(void *result, int a2)
{
  if ((result[3] & 2) == 0)
  {
    uint64_t v3 = result;
    uint64_t result = operator new(0x18uLL);
    uint64_t v4 = v3[7];
    uint64_t v5 = *(void *)(v4 + 8);
    *uint64_t result = &unk_26C74B0B8;
    result[1] = v5;
    *((_DWORD *)result + 4) = a2;
    *(void *)(v4 + 8) = result;
    v3[7] = *(void *)(v3[7] + 8);
  }
  return result;
}

void sub_21682C2EC()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682C330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_21682C344(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      sub_21682C98C(a1, (char)v4);
      ++v3;
    }
  }
  return v3;
}

void *sub_21682C3B8(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21682C424(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

void sub_21682C4A0()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682C4E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21682C4F8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  uint64_t v5 = (v4 - 48);
  if (v4 == 48)
  {
    sub_21682C98C(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      LODWORD(v5) = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > *(_DWORD *)(a1 + 28)) {
LABEL_16:
  }
    sub_21682CA8C();
  sub_21682CAE4(a1, v5);
  return v6;
}

char *sub_21682C5B8(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      char v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      char v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    char v6 = 0;
LABEL_12:
    uint64_t v7 = sub_21682D6B4(a1, v6);
    int v8 = v7[40] | 0x400;
LABEL_18:
    v7[40] = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      char v6 = 1;
      goto LABEL_12;
    case 'S':
      char v9 = 1;
LABEL_17:
      uint64_t v7 = sub_21682D6B4(a1, v9);
      int v8 = v7[40] | 0x4000;
      goto LABEL_18;
    case 'W':
      char v5 = 1;
LABEL_15:
      uint64_t v10 = sub_21682D6B4(a1, v5);
      v10[40] |= 0x500u;
      sub_21682D730((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

unsigned __int8 *sub_21682C688(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this)
{
  int v4 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v5 = (char)*a2;
    if (v5 > 109)
    {
      char v6 = 0;
      switch(*a2)
      {
        case 'n':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 10;
            goto LABEL_50;
          }
          uint64_t v8 = 10;
          goto LABEL_59;
        case 'r':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 13;
            goto LABEL_50;
          }
          uint64_t v8 = 13;
          goto LABEL_59;
        case 't':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 9;
            goto LABEL_50;
          }
          uint64_t v8 = 9;
          goto LABEL_59;
        case 'u':
          if (a2 + 1 == (unsigned __int8 *)a3) {
            goto LABEL_64;
          }
          int v9 = a2[1];
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_64;
          }
          int v4 = a2 + 2;
          if (a2 + 2 == (unsigned __int8 *)a3) {
            goto LABEL_64;
          }
          int v10 = *v4;
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if (v4 + 1 == (unsigned __int8 *)a3) {
            goto LABEL_64;
          }
          int v12 = v4[1];
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_30:
          if (v4 + 2 == (unsigned __int8 *)a3) {
            goto LABEL_64;
          }
          int v14 = v4[2];
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_64;
          }
          char v15 = -87;
LABEL_35:
          if (this) {
            std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
          }
          else {
            sub_21682C98C(a1, (char)(v15 + v14 + 16 * (v13 + v12 + v6)));
          }
          v4 += 3;
          return v4;
        case 'v':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 11;
            goto LABEL_50;
          }
          uint64_t v8 = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (v5 == 48)
    {
      if (this)
      {
        uint64_t v7 = this;
        LOBYTE(v8) = 0;
        goto LABEL_50;
      }
      uint64_t v8 = 0;
LABEL_59:
      sub_21682C98C(a1, v8);
      return ++v4;
    }
    if (v5 != 99)
    {
      if (v5 == 102)
      {
        if (this)
        {
          uint64_t v7 = this;
          LOBYTE(v8) = 12;
LABEL_50:
          std::string::operator=(v7, v8);
          return ++v4;
        }
        uint64_t v8 = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (*a2 != 95
        && ((v5 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
      {
        uint64_t v8 = (char)v5;
        if (this)
        {
          uint64_t v7 = this;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      sub_21682C4A0();
    }
    if (a2 + 1 == (unsigned __int8 *)a3 || ((a2[1] & 0xDF) - 65) > 0x19u) {
      goto LABEL_64;
    }
    uint64_t v16 = a2[1] & 0x1F;
    if (this) {
      std::string::operator=(this, v16);
    }
    else {
      sub_21682C98C(a1, v16);
    }
    v4 += 2;
  }
  return v4;
}

uint64_t sub_21682C98C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    uint64_t v8 = (char *)operator new(0x30uLL);
    uint64_t result = sub_21682CBE4((uint64_t)v8, a1, a2, *(void *)(*(void *)(a1 + 56) + 8));
LABEL_6:
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    uint64_t v8 = (char *)operator new(0x30uLL);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
    *(void *)uint64_t v8 = &unk_26C74AEC0;
    *((void *)v8 + 1) = v9;
    uint64_t result = (uint64_t)std::locale::locale((std::locale *)v8 + 2, (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    v8[40] = a2;
    goto LABEL_6;
  }
  uint64_t result = (uint64_t)operator new(0x18uLL);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 8);
  *(void *)uint64_t result = &unk_26C74AF08;
  *(void *)(result + 8) = v7;
  *(unsigned char *)(result + 16) = a2;
  *(void *)(v6 + 8) = result;
LABEL_7:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  return result;
}

void sub_21682CA78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21682CA8C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682CAD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_21682CAE4(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    uint64_t v8 = (std::locale *)operator new(0x30uLL);
    uint64_t v9 = v8;
    v8[1].__locale_ = *(std::locale::__imp **)(*(void *)(a1 + 56) + 8);
    int v10 = (std::locale::__imp *)&unk_26C74AF50;
LABEL_6:
    v8->__locale_ = v10;
    uint64_t result = std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(void *)(*(void *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    uint64_t v8 = (std::locale *)operator new(0x30uLL);
    uint64_t v9 = v8;
    v8[1].__locale_ = *(std::locale::__imp **)(*(void *)(a1 + 56) + 8);
    int v10 = (std::locale::__imp *)&unk_26C74AF98;
    goto LABEL_6;
  }
  uint64_t result = operator new(0x18uLL);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 8);
  *uint64_t result = &unk_26C74AFE0;
  result[1] = v7;
  *((_DWORD *)result + 4) = a2;
  *(void *)(v6 + 8) = result;
LABEL_7:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  return result;
}

uint64_t sub_21682CBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C74AE78;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 4sub_216817474((void **)this, 0) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_21682CC78(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  *uint64_t v1 = &unk_26C74ACE0;
  uint64_t v4 = v1[1];
  if (v4) {
    sub_217323E0C(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *sub_21682CCB8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AE78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_21682CD44(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AE78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t sub_21682CDE0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v5;
  return result;
}

std::locale *sub_21682CE74(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AEC0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_21682CF00(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AEC0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t sub_21682CF9C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v3;
  return result;
}

void *sub_21682CFE4(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21682D050(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_21682D0CC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v3;
  return result;
}

std::locale *sub_21682D114(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AF50;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_21682D1A0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AF50;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t sub_21682D23C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v6;
  return result;
}

std::locale *sub_21682D354(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AF98;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_21682D3E0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74AF98;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t sub_21682D47C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v8;
  return result;
}

void *sub_21682D50C(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_21682D578(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

unsigned int *sub_21682D5F4(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_21682CA8C();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v10;
  return result;
}

void *sub_21682D6B4(uint64_t a1, char a2)
{
  uint64_t v4 = operator new(0xB0uLL);
  sub_21682D978((uint64_t)v4, a1, *(void *)(*(void *)(a1 + 56) + 8), a2, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(void *)(*(void *)(a1 + 56) + 8) = v4;
  *(void *)(a1 + 56) = v4;
  return v4;
}

void sub_21682D71C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21682D730(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        long long v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          long long v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_21677CB10();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      char v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        long long v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  long long v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 4sub_216817474((void **)this, 0) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t sub_21682D978(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = &unk_26C74B028;
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_216817474((void **)this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 17sub_216817474((void **)this, 0) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_21682DAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_216782F20((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  sub_21682E488((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void sub_21682DB5C(std::locale *a1)
{
  uint64_t v1 = sub_21682E5BC(a1);

  operator delete(v1);
}

void sub_21682DB84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(signed __int8 **)(a2 + 16);
  unsigned int v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v37 = 0;
    int v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_58;
  }
  signed __int8 v6 = *v4;
  unsigned __int8 v125 = *v4;
  signed __int8 v7 = v4[1];
  unsigned __int8 v126 = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v125 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    unsigned __int8 v126 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  uint64_t v8 = a1 + 16;
  sub_21682E75C(a1 + 16, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    int v36 = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120) - v9;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unsigned char *)(v9 + 1);
    do
    {
      if (v125 == *(v12 - 1) && v126 == *v12) {
        goto LABEL_218;
      }
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v36 = 0;
  }
  else
  {
    sub_21682E6A4(a1 + 16, (char *)&v125, (char *)&v127);
    uint64_t v14 = *(void *)(a1 + 88);
    char v15 = v124;
    uint64_t v16 = *(void *)(a1 + 96) - v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = *(char *)(v14 + 23);
        if (v23 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          size_t v24 = *(void *)(v14 + 8);
        }
        if (v23 >= 0) {
          char v25 = (const void *)v14;
        }
        else {
          char v25 = *(const void **)v14;
        }
        if (v24 >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = v24;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= v24;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = *(char *)(v14 + 47);
          if (v29 >= 0) {
            size_t v30 = *(unsigned __int8 *)(v14 + 47);
          }
          else {
            size_t v30 = *(void *)(v14 + 32);
          }
          if (v29 >= 0) {
            unsigned int v31 = (const void *)(v14 + 24);
          }
          else {
            unsigned int v31 = *(const void **)(v14 + 24);
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(v31, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        v14 += 48;
        if (v21 == v17)
        {
          int v35 = 0;
          int v36 = 0;
          goto LABEL_162;
        }
      }
      int v36 = 1;
      int v35 = 5;
LABEL_162:
      uint64_t v8 = a1 + 16;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      int v36 = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_200;
  }
  sub_21682E9B4(v8, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  uint64_t v89 = *(void *)(a1 + 136);
  uint64_t v90 = v124;
  uint64_t v91 = *(void *)(a1 + 144) - v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    uint64_t v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      int v99 = (unsigned __int8 **)(v89 + 24 * v92);
      int v100 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
      int v101 = (char)v100;
      if ((char)v100 < 0) {
        int v100 = v99[1];
      }
      if ((unsigned __int8 *)v96 == v100)
      {
        if (v101 >= 0) {
          int v102 = (unsigned __int8 *)(v89 + 24 * v92);
        }
        else {
          int v102 = *v99;
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            int v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != *v102) {
                goto LABEL_188;
              }
              int v103 = (void **)((char *)v103 + 1);
              ++v102;
              --v104;
            }
            while (v104);
            int v36 = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          int v36 = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            int v109 = *(_DWORD *)(a1 + 164);
            goto LABEL_213;
          }
          int v106 = *(_DWORD *)(a1 + 160);
          uint64_t v107 = *(void *)(*(void *)(a1 + 24) + 16);
          int v108 = *(_DWORD *)(v107 + 4 * v125);
          if ((v108 & v106) == 0 && (v125 != 95 || (v106 & 0x80) == 0)
            || (char)v126 < 0
            || (*(_DWORD *)(v107 + 4 * v126) & v106) == 0 && ((v106 & 0x80) == 0 || v126 != 95))
          {
            int v109 = *(_DWORD *)(a1 + 164);
            if ((v108 & v109) != 0 || v125 == 95 && (v109 & 0x80) != 0)
            {
LABEL_217:
              int v110 = v36;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v126) & v109) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (v109 & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              int v36 = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    int v36 = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = **(unsigned char **)(a2 + 16);
  unsigned __int8 v125 = v39;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v39 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v39);
    unsigned __int8 v125 = v39;
  }
  long long v40 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v41 = *(void *)(a1 + 48) - (void)v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    int v36 = 1;
    goto LABEL_221;
  }
LABEL_66:
  unsigned int v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v39) & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    uint64_t v45 = *(void **)(a1 + 72);
    unsigned int v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(void *)(a1 + 64));
    uint64_t v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45) {
      goto LABEL_77;
    }
  }
  uint64_t v49 = *(void *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(unsigned char *)(a1 + 170))
    {
      sub_21682E6A4(a1 + 16, (char *)&v125, (char *)&v126);
      uint64_t v49 = *(void *)(a1 + 88);
      uint64_t v48 = *(void *)(a1 + 96);
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    uint64_t v50 = v48 - v49;
    if (v50)
    {
      uint64_t v119 = v37;
      int v116 = v36;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        float v54 = &__p;
      }
      else {
        float v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = *(char *)(v49 + 23);
        if (v57 >= 0) {
          size_t v58 = *(unsigned __int8 *)(v49 + 23);
        }
        else {
          size_t v58 = *(void *)(v49 + 8);
        }
        if (v57 >= 0) {
          int v59 = (const void *)v49;
        }
        else {
          int v59 = *(const void **)v49;
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = *(char *)(v49 + 47);
          if (v63 >= 0) {
            size_t v64 = *(unsigned __int8 *)(v49 + 47);
          }
          else {
            size_t v64 = *(void *)(v49 + 32);
          }
          if (v63 >= 0) {
            __int16 v65 = (const void *)(v49 + 24);
          }
          else {
            __int16 v65 = *(const void **)(v49 + 24);
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        v49 += 48;
        if (v55 == v51)
        {
          int v36 = v116;
          goto LABEL_123;
        }
      }
      int v36 = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_154;
  }
  sub_21682E9B4(a1 + 16, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  uint64_t v69 = *(void *)(a1 + 136);
  uint64_t v70 = v124;
  uint64_t v71 = *(void *)(a1 + 144) - v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    uint64_t v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      int v79 = (unsigned __int8 **)(v69 + 24 * v72);
      int v80 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
      int v81 = (char)v80;
      if ((char)v80 < 0) {
        int v80 = v79[1];
      }
      if ((unsigned __int8 *)v76 == v80)
      {
        if (v81 >= 0) {
          uint64_t v82 = (unsigned __int8 *)(v69 + 24 * v72);
        }
        else {
          uint64_t v82 = *v79;
        }
        if ((v70 & 0x80) != 0)
        {
          int v117 = v36;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          int v36 = v117;
          if (!v86)
          {
            int v36 = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            int v36 = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          uint64_t v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == *v82)
          {
            uint64_t v83 = (void **)((char *)v83 + 1);
            ++v82;
            if (!--v84)
            {
              int v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    unsigned int v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v125) & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v111 = 0;
    int v112 = -993;
  }
  else
  {
    *(void *)(a2 + 16) += v37;
    uint64_t v111 = *(void *)(a1 + 8);
    int v112 = -995;
  }
  *(_DWORD *)a2 = v112;
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v111;
}

void sub_21682E488(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_21682E520((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21682E520(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_21682E578(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *sub_21682E5BC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C74B028;
  signed __int8 v7 = a1 + 17;
  sub_216782F20((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  sub_21682E488((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_26C74ACE0;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_21682E6A4(uint64_t a1, char *a2, char *a3)
{
  sub_21682E90C(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21682E740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21682E75C(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_21682E90C(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_21682E8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21682E90C(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_216778FC4();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void sub_21682E9B4(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_21682E90C(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21682EAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21682EAC4()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682EB08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_21682EB1C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = sub_21682F0AC(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = sub_21682EECC(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = sub_21682F168(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          uint64_t v14 = sub_21682F394(a1, v13, a3, &v26);
        }
        else
        {
          uint64_t v14 = (char *)sub_21682F258(a1, (unsigned __int8 *)v13, a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    uint64_t v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          sub_21682F9C4(v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      sub_21682D730(v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = sub_21682F168(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)sub_21682F394(a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)sub_21682F258(a1, (unsigned __int8 *)v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_21682F59C(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_21682EE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21682EECC(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    sub_21682EAC4();
  sub_21682E75C(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    sub_21682FC20();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  sub_21682E9B4(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    sub_21682FC78(a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      sub_21682F9C4((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        sub_21682FC20();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      sub_21682D730((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_21682F074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21682F0AC(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    sub_21682EAC4();
  int v7 = sub_21682FD14(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    sub_21682FCBC();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t sub_21682F168(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    sub_21682EAC4();
  sub_21682E75C(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    sub_21682FC20();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_21682F258(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this, uint64_t a5)
{
  if (a2 == (unsigned __int8 *)a3) {
    sub_21682C4A0();
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_21682D730(a5, 95);
        return a2 + 1;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        long long v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }
      if (v6 != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 16sub_216817474((void **)this, 0) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return a2 + 1;
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_21682FDE8(a5, 95);
    return a2 + 1;
  }
LABEL_25:

  return sub_21682C688(a1, a2, a3, this);
}

char *sub_21682F394(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    sub_21682C4A0();
  uint64_t v5 = *a2;
  if ((int)v5 > 97)
  {
    switch((int)v5)
    {
      case 'n':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        uint64_t v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        uint64_t v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        uint64_t v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        uint64_t v5 = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          uint64_t v5 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          uint64_t v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if ((int)v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      uint64_t v5 = 7;
LABEL_49:
      sub_21682C98C(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    sub_21682C98C(a1, v7);
  }
  return v8;
}

void sub_21682F59C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        char v20 = a2;
        if (a2[23] < 0) {
          char v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    sub_21682E6A4(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    sub_21682E6A4(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)long long v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    sub_216830030((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      sub_21683019C();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(unsigned char **)v4;
      }
      *size_t v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      unsigned char *v35 = v34;
    }
    *(_OWORD *)long long v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    sub_216830030((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_21682F978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void sub_21682F9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)sub_216780E70(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)sub_216780E70(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_21677CB10();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)sub_216780E70(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 12sub_216817474((void **)this, 0) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 12sub_216817474((void **)this, 0) = v26;
}

void sub_21682FC20()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682FC64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21682FC78(uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = sub_2167E9A44(v3, a2);
  }
  else
  {
    sub_2167E99E4(v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void sub_21682FCBC()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_21682FD00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21682FD14(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  sub_21682E90C(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    __int16 v8 = __p;
  }
  else {
    __int16 v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_21682FDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21682FDE8(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      __int16 v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned __int8 v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_21677CB10();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned __int8 v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 8sub_216817474((void **)this, 0) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void **sub_216830030(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    _DWORD v19[4] = result;
    if (v14) {
      unint64_t v15 = (char *)sub_2168073F4((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_2168301F4(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_2168303B0(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4sub_216817474((void **)this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_216830188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168303B0((void **)va);
  _Unwind_Resume(a1);
}

void sub_21683019C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2168301E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168301F4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21683026C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21683026C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 4sub_216817474((void **)this, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_216830324((uint64_t)v13);
  return a6;
}

uint64_t sub_216830324(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21683035C((uint64_t *)a1);
  }
  return a1;
}

void sub_21683035C(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_21682E520(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_2168303B0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_2168303E4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_21682E520(v4, i - 48);
  }
}

void *sub_21683042C(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216830498(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_216830514(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = *(void *)(result + 8);
  return result;
}

void *sub_216830544(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2168305B0(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_21683062C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = *(void *)(result + 8);
  return result;
}

void *sub_216830664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  char v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  void *v14 = &unk_26C74AC68;
  v14[1] = v16;
  *(void *)(v15 + 8) = 0;
  long long v17 = operator new(0x38uLL);
  int v18 = *(_DWORD *)(a1 + 32);
  v17[1] = *(void *)(a4 + 8);
  void v17[2] = v14;
  *long long v17 = &unk_26C74B100;
  void v17[3] = a2;
  _DWORD v17[4] = a3;
  *((_DWORD *)v17 + 1sub_216817474((void **)this, 0) = v18;
  *((_DWORD *)v17 + 11) = a5;
  *((_DWORD *)v17 + 12) = a6;
  *((unsigned char *)v17 + 52) = a7;
  *(void *)(a4 + 8) = 0;
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C74B190;
  result[1] = v17;
  *(void *)(*(void *)(a1 + 56) + 8) = result;
  *(void *)(a1 + 56) = v17[2];
  *(void *)(a4 + 8) = v17;
  *(_DWORD *)(a1 + 32) = v18 + 1;
  return result;
}

void sub_216830778(_Unwind_Exception *a1)
{
  uint64_t v3 = sub_216830A2C(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2168307A0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            sub_216830840();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void sub_216830840()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_216830884(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216830898()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_2168308DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2168308F4(void *a1)
{
  uint64_t v1 = sub_216830A2C(a1);

  operator delete(v1);
}

unsigned int *sub_21683091C(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return sub_216830AE0(result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *sub_2168309D0(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return sub_216830AE0(result, a3);
  }
  return result;
}

void sub_216830A04(void *a1)
{
  uint64_t v1 = sub_216830A2C(a1);

  operator delete(v1);
}

void *sub_216830A2C(void *a1)
{
  *a1 = &unk_26C74B160;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_26C74ACE0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

unsigned int *sub_216830AE0(unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_216830B3C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = *(void *)(result + 8);
  return result;
}

void sub_216830B54(void *a1)
{
  uint64_t v1 = sub_216830A2C(a1);

  operator delete(v1);
}

void sub_216830B7C(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_216830B88(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 8sub_216817474((void **)this, 0) = *(void *)(result + v3);
  return result;
}

uint64_t sub_216830BB4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = *(void *)(result + 8);
  return result;
}

void sub_216830BC8()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21D447760](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_216830C0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216830C20(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  BOOL v8 = (unsigned __int8 *)sub_216830CBC(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  int v9 = *(_DWORD *)(a1 + 28) + 1;

  return sub_216830DCC(a1, v8, (unsigned __int8 *)a3, v6, v7 + 1, v9);
}

char *sub_216830CBC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = sub_216830F70(a1, a2, a3);
  int v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        sub_21682C20C((void *)a1);
        int v10 = *(_DWORD *)(a1 + 28);
        do
        {
          long long v11 = (char *)v9;
          uint64_t v9 = sub_216830C20(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          sub_21682A74C();
        }
        int v7 = v11 + 2;
        sub_21682C280((void *)a1, v10);
      }
      else
      {
        int v13 = sub_21683123C(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_216830DCC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    int v11 = *a2;
    if (v11 == 42)
    {
      sub_216830664(a1, 0, -1, a4, a5, a6, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      int v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = sub_2168307A0(a1, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        uint64_t v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          long long v17 = sub_2168307A0(a1, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            uint64_t v19 = v24;
            uint64_t v18 = v25;
            if (v24 == -1)
            {
              uint64_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              sub_216830840();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            int v20 = a5;
            int v21 = a6;
            uint64_t v22 = a1;
LABEL_23:
            sub_216830664(v22, v18, v19, a4, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          uint64_t v18 = v25;
          int v20 = a5;
          int v21 = a6;
          uint64_t v22 = a1;
          uint64_t v19 = v25;
          goto LABEL_23;
        }
      }
      sub_216830898();
    }
  }
  return v6;
}

char *sub_216830F70(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = sub_216831098(a1, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      sub_21682C98C(a1, (char)v6);
      return a2 + 1;
    }
    uint64_t result = sub_216831098(a1, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46)
    {
      uint64_t v9 = operator new(0x10uLL);
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = *(void *)(v10 + 8);
      *uint64_t v9 = &unk_26C74B268;
      v9[1] = v11;
      *(void *)(v10 + 8) = v9;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a2 + 1;
    }
  }

  return sub_21682C0F8(a1, a2, a3);
}

unsigned char *sub_216831098(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      sub_21682C98C(a1, (char)v4);
      v3 += 2;
    }
  }
  return v3;
}

void *sub_216831114(void *a1)
{
  *a1 = &unk_26C74ACE0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216831180(void *__p)
{
  void *__p = &unk_26C74ACE0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

uint64_t sub_2168311FC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8sub_216817474((void **)this, 0) = v3;
  return result;
}

uint64_t sub_21683123C(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > *(_DWORD *)(a1 + 28)) {
    sub_21682CA8C();
  }
  sub_21682CAE4(a1, a2 - 48);
  return 1;
}

unsigned __int8 *sub_21683129C(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_2168312FC(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    sub_216830BC8();
  }
  do
  {
    int v7 = v6;
    int v6 = sub_2168312FC(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_2168312FC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = sub_216831440(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != a2 || v8 == a3) {
    goto LABEL_12;
  }
  int v10 = *a2;
  if (v10 == 36)
  {
    sub_21682A5CC(a1);
    goto LABEL_8;
  }
  if (v10 == 40)
  {
    sub_21682C20C((void *)a1);
    int v11 = *(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 36);
    unint64_t v12 = (char *)sub_216829600(a1, a2 + 1, a3);
    if (v12 == a3 || (int v13 = v12, *v12 != 41)) {
      sub_21682A74C();
    }
    sub_21682C280((void *)a1, v11);
    --*(_DWORD *)(a1 + 36);
    uint64_t v9 = (unsigned __int8 *)(v13 + 1);
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (v10 != 94) {
    return (unsigned __int8 *)a2;
  }
  sub_21682A558(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)(a2 + 1);
LABEL_13:
  int v14 = *(_DWORD *)(a1 + 28) + 1;

  return sub_21682A254(a1, v9, (unsigned __int8 *)a3, v6, v7 + 1, v14);
}

char *sub_216831440(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = sub_216831518(a1, a2, a3);
  if (result == a2)
  {
    uint64_t result = sub_2168315A4(a1, a2, a3);
    if (result == a2)
    {
      if (a2 == a3 || *a2 != 46)
      {
        return sub_21682C0F8(a1, a2, a3);
      }
      else
      {
        int v7 = operator new(0x10uLL);
        uint64_t v8 = *(void *)(a1 + 56);
        uint64_t v9 = *(void *)(v8 + 8);
        void *v7 = &unk_26C74B268;
        v7[1] = v9;
        *(void *)(v8 + 8) = v7;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 1;
      }
    }
  }
  return result;
}

char *sub_216831518(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = *a2;
    uint64_t v5 = (v4 - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (v4 - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((v4 - 123) < 2) {
        return v3;
      }
    }
    sub_21682C98C(a1, *a2);
    ++v3;
  }
  return v3;
}

char *sub_2168315A4(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  signed __int8 v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    sub_21682C98C(a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    int v9 = sub_21683123C(a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    v3 += v10;
    return v3;
  }

  return sub_21682F394(a1, v4, a3, 0);
}

uint64_t sub_21683167C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  sub_21682AFCC(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_2168319E8(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(void *)(a4 + 8) == *(void *)a4) {
      uint64_t v10 = (uint64_t *)(a4 + 24);
    }
    else {
      uint64_t v10 = *(uint64_t **)a4;
    }
LABEL_8:
    uint64_t v11 = *v10;
    *(void *)(a4 + 56) = *v10;
    *(unsigned char *)(a4 + 64) = *(void *)(a4 + 48) != v11;
    uint64_t v12 = v10[1];
    *(void *)(a4 + 72) = v12;
    *(unsigned char *)(a4 + 88) = v12 != *(void *)(a4 + 80);
    return 1;
  }
  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    uint64_t v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_21682B4B0((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
        int v16 = sub_2168319E8(a1, v15, a3, (uint64_t *)a4, v14, 0);
        uint64_t v18 = *(void *)a4;
        uint64_t v17 = *(void *)(a4 + 8);
        if (v16) {
          break;
        }
        sub_21682B4B0((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (long long *)(a4 + 24));
        if (++v15 == a3) {
          goto LABEL_14;
        }
      }
      if (v17 == v18) {
        uint64_t v10 = (uint64_t *)(a4 + 24);
      }
      else {
        uint64_t v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
LABEL_14:
    sub_21682B4B0((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
    if (sub_2168319E8(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(void *)(a4 + 8) == *(void *)a4) {
        uint64_t v10 = (uint64_t *)(a4 + 24);
      }
      else {
        uint64_t v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  *(void *)(a4 + 8) = *(void *)a4;
  return result;
}

void sub_216831858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  sub_2168337D4(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v11 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      uint64_t v17 = (void *)(v15 + v12);
      if (v16 <= v13) {
        uint64_t v18 = a4 + 3;
      }
      else {
        uint64_t v18 = v17;
      }
      *(void *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        uint64_t v19 = a4 + 3;
      }
      else {
        uint64_t v19 = (uint64_t *)(*a4 + v12);
      }
      *(void *)(*(void *)a1 + v12 + 8) = a2 + v19[1] - v10;
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        int v20 = a4 + 3;
      }
      else {
        int v20 = (uint64_t *)(*a4 + v12);
      }
      char v21 = *((unsigned char *)v20 + 16);
      uint64_t v11 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 4sub_216817474((void **)this, 0) = 0;
  uint64_t v23 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 8sub_216817474((void **)this, 0) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v23;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t sub_2168319E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return sub_21682B040(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return sub_216831FB8(a1, a2, a3, a4, a5, a6);
  }
  return sub_216831A08(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_216831A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v60, 0, 21);
    sub_216832580(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    unint64_t v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_21682B6A8(*(void *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 8sub_216817474((void **)this, 0) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        sub_21682B6D8();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            sub_216832684(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                sub_21682BB08((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  int v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_216832718((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_216832684(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          sub_21682BE84(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          sub_21682BF04((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          sub_216832580(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          sub_21682B730();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  sub_216833324(&v61);
  return v50;
}

void sub_216831F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_216833324((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_216831FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  char v55 = 0;
  BOOL v56 = 0;
  v57[0] = 0;
  *(_DWORD *)unint64_t v52 = 0;
  memset(&v52[8], 0, 32);
  long long v53 = 0u;
  memset(v54, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v50 = a3;
    *((void *)&v50 + 1) = a3;
    char v51 = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v49, 0, 21);
    BOOL v56 = (_OWORD *)sub_21682B788((uint64_t *)&v55, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    int v42 = a4;
    uint64_t v11 = v56;
    *((_DWORD *)v56 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 1sub_216817474((void **)this, 0) = a2;
    *((void *)v11 - 9) = a3;
    sub_21682B66C((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v50);
    sub_21682B6A8((uint64_t)v56 - 40, *(unsigned int *)(a1 + 32));
    uint64_t v43 = a3;
    uint64_t v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = a3 - a2;
    uint64_t v15 = v56;
    *((void *)v56 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        sub_21682B6D8();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = *((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = v20 - *((void *)v15 - 11);
          uint64_t v29 = v44;
          if ((v27 & (v44 >= v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)unint64_t v52 = *(_OWORD *)v19;
            *(_OWORD *)&v52[16] = v30;
            if (v52 != v19)
            {
              sub_2168334CC(&v52[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              sub_216833684(v54, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v54[3] + 5) = *(void **)((char *)v15 - 11);
            v54[3] = v31;
            uint64_t v29 = v28;
          }
          char v32 = v56;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v55;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              sub_21682BB08((uint64_t)v57, v32);
            }
            BOOL v56 = (_OWORD *)v33;
            char v12 = 1;
            uint64_t v44 = v14;
          }
          else
          {
            uint64_t v44 = v29;
            unint64_t v34 = v56 - 6;
            sub_21682BB08((uint64_t)v57, (void *)v56 - 12);
            BOOL v56 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v56 - 6;
          sub_21682BB08((uint64_t)v57, (void *)v56 - 12);
          BOOL v56 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          sub_21682BE84(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          sub_21682BF04((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v56;
          if ((unint64_t)v56 >= v57[0])
          {
            BOOL v56 = (_OWORD *)sub_21682B788((uint64_t *)&v55, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *BOOL v56 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            uint64_t v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 1sub_216817474((void **)this, 0) = v26;
            BOOL v56 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          sub_21682B730();
      }
      uint64_t v15 = v56;
    }
    while (v55 != v56);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = a2 + v44;
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v53 != *(void *)&v52[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *(void *)&v52[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v52[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  if (*(void *)&v52[32])
  {
    *(void *)&long long v53 = *(void *)&v52[32];
    operator delete(*(void **)&v52[32]);
  }
  *(void *)unint64_t v52 = &v55;
  sub_21682BFBC((void ***)v52);
  return v6;
}

void sub_2168324F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_21682B628(&a17);
  sub_21682B628(&a33);
  a33 = v33 - 120;
  sub_21682BFBC((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 sub_216832580(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_21683280C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 4sub_216817474((void **)this, 0) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_216817474((void **)this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 8sub_216817474((void **)this, 0) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_216832684(void *a1)
{
  uint64_t v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  sub_21682BB08((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return sub_216832F90(a1, 1);
}

int64x2_t sub_216832718(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_216833008((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 8sub_216817474((void **)this, 0) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_216817474((void **)this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 4sub_216817474((void **)this, 0) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 4sub_216817474((void **)this, 0) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_21740B8C0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_21683280C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_216832D5C(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_216832AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216832B24(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_21677CB28(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      char v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_216832C3C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_21677CB28(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_216832D5C(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_21677CB28(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_216832E74(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_21677CB28(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_216832F90(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_216833008(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_21677CB28(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      sub_216832D5C(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_21677CB28((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      uint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        sub_216832B24(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      sub_216832C3C((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_216832C3C((uint64_t)a1, &__p);
  }
}

void sub_2168332D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216833324(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_21682BB08((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return sub_21683347C((uint64_t)a1);
}

uint64_t sub_21683347C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

char *sub_2168334CC(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          unsigned char v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = sub_216782E84(a1, v12);
    int64_t v15 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  void *v14 = &v13[v18];
  return result;
}

char *sub_216833684(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = sub_21682BF78(a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

void sub_2168337D4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_216833810((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_216833810(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_216782ED8(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = &v12[24 * v8];
    long long v16 = &v15[24 * a2];
    uint64_t v17 = 24 * a2;
    int64_t v18 = v15;
    do
    {
      *(void *)int64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = &v12[24 * v11];
    uint64_t v21 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v15 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Arch_Error(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4, const char *a5)
{
  unint64_t v8 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], " ArchError: %s\n", (const char *)this);
  fprintf(*v8, "  Function: %s\n", a2);
  fprintf(*v8, "      File: %s\n", a4);
  fprintf(*v8, "      Line: %zu\n", (size_t)a3);
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchAbort((pxrInternal__aapl__pxrReserved__ *)1, v9);
  return pxrInternal__aapl__pxrReserved__::Arch_Warning(v10, v11, v12, v13, v14);
}

uint64_t pxrInternal__aapl__pxrReserved__::Arch_Warning(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4, const char *a5)
{
  unint64_t v8 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], " ArchWarn: %s\n", (const char *)this);
  fprintf(*v8, " Function: %s\n", a2);
  fprintf(*v8, "     File: %s\n", a4);
  return fprintf(*v8, "     Line: %zu\n", (size_t)a3);
}

void *pxrInternal__aapl__pxrReserved__::ArchStrerror@<X0>(void *a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  BOOL v3 = __error();
  strerror_r(*v3, __strerrbuf, 0x100uLL);
  return sub_216779094(a1, __strerrbuf);
}

void *pxrInternal__aapl__pxrReserved__::ArchStrerror@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  strerror_r((int)this, __strerrbuf, 0x100uLL);
  return sub_216779094(a2, __strerrbuf);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchStatIsWritable(uint64_t this, const stat *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    if ((*(_WORD *)(this + 4) & 2) != 0 || getegid() == *(_DWORD *)(this + 20) && (*(_WORD *)(v2 + 4) & 0x10) != 0)
    {
      return 1;
    }
    else if (geteuid() == *(_DWORD *)(v2 + 16))
    {
      return (*(unsigned __int16 *)(v2 + 4) >> 7) & 1;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchGetModificationTime(pxrInternal__aapl__pxrReserved__ *this, double *a2, double *a3)
{
  int v4 = stat((const char *)this, &v6);
  if (!v4) {
    *a2 = (double)v6.st_mtimespec.tv_nsec * 0.000000001 + (double)v6.st_mtimespec.tv_sec;
  }
  return v4 == 0;
}

double pxrInternal__aapl__pxrReserved__::ArchGetModificationTime(pxrInternal__aapl__pxrReserved__ *this, const stat *a2)
{
  return (double)*((uint64_t *)this + 7) * 0.000000001 + (double)*((uint64_t *)this + 6);
}

char *pxrInternal__aapl__pxrReserved__::ArchNormPath@<X0>(char *result@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = result;
  LODWORD(v4) = result[23];
  if ((v4 & 0x80000000) != 0)
  {
    int64x2_t result = (char *)sub_216778F24(a2, *(void **)result, *((void *)result + 1));
    LODWORD(v4) = v2[23];
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t v7 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 1);
      int v5 = 1;
      goto LABEL_5;
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)result;
    a2->__r_.__value_.__r.__words[2] = *((void *)result + 2);
  }
  int v5 = 0;
  uint64_t v6 = v4;
  uint64_t v7 = v2;
LABEL_5:
  unint64_t v8 = &v7[v6];
  if (v6)
  {
    while (*v7 == 47)
    {
      ++v7;
      if (!--v6)
      {
        uint64_t v7 = v8;
        goto LABEL_14;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_14:
    BOOL v9 = v8;
  }
  else
  {
    int64x2_t result = v8;
    BOOL v9 = v7;
    while (*v9 != 47)
    {
      if (++v9 == v8)
      {
        unint64_t v8 = v7;
        BOOL v9 = result;
        goto LABEL_16;
      }
    }
    unint64_t v8 = v7;
  }
LABEL_16:
  unint64_t v10 = *(char **)v2;
  if (v5) {
    unint64_t v11 = *(char **)v2;
  }
  else {
    unint64_t v11 = v2;
  }
  unint64_t v12 = v7 - v11;
  if (v12 > 2) {
    std::string::size_type v13 = 1;
  }
  else {
    std::string::size_type v13 = v12;
  }
  BOOL v14 = (int)v4 < 0;
  BOOL v15 = (int)v4 < 0;
  uint64_t v4 = v4;
  if (v14) {
    long long v16 = *(char **)v2;
  }
  else {
    long long v16 = v2;
  }
  if (v14) {
    uint64_t v4 = *((void *)v2 + 1);
  }
  if (v8 == &v16[v4])
  {
LABEL_110:
    LOBYTE(v44) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
    goto LABEL_111;
  }
  std::string::size_type v17 = v13;
  while (1)
  {
LABEL_29:
    uint64_t v18 = v9 - v8;
    if (v9 - v8 != 2)
    {
      if (v18 == 1 && *v8 == 46) {
        goto LABEL_65;
      }
LABEL_45:
      if (!v15) {
        unint64_t v10 = v2;
      }
      if (&v10[v17] == v8)
      {
        v17 += v18;
        std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) != 0) {
          std::string::size_type size = a2->__r_.__value_.__l.__size_;
        }
        if (v17 != size) {
          ++v17;
        }
      }
      else
      {
        while (v8 != v9)
        {
          std::string::value_type v28 = *v8++;
          std::string::value_type v27 = v28;
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v29 = a2;
          }
          else {
            uint64_t v29 = (std::string *)a2->__r_.__value_.__r.__words[0];
          }
          v29->__r_.__value_.__s.__data_[v17++] = v27;
        }
        std::string::size_type v30 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        int v31 = (char)v30;
        if ((v30 & 0x80u) != 0) {
          std::string::size_type v30 = a2->__r_.__value_.__l.__size_;
        }
        if (v17 != v30)
        {
          if (v31 >= 0) {
            uint64_t v32 = a2;
          }
          else {
            uint64_t v32 = (std::string *)a2->__r_.__value_.__r.__words[0];
          }
          v32->__r_.__value_.__s.__data_[v17++] = 47;
        }
      }
      goto LABEL_65;
    }
    if (*v8 != 46 || v8[1] != 46) {
      goto LABEL_45;
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = (std::string::size_type)a2;
    }
    else {
      std::string::size_type v19 = a2->__r_.__value_.__r.__words[0];
    }
    unint64_t v20 = (char *)(v19 + v13);
    uint64_t v21 = (char *)(v19 + v13);
    long long v22 = (char *)(v19 + v17);
    std::string::size_type v23 = v13 - v17;
    if (v13 != v17)
    {
      long long v22 = (char *)(v19 + v17);
      int64x2_t result = (char *)(v19 + v17);
      while (1)
      {
        int v36 = *--result;
        if (v36 != 47) {
          break;
        }
        long long v22 = result;
        if (!++v23)
        {
          long long v25 = (char *)(v19 + v13);
          goto LABEL_85;
        }
      }
    }
    if (v22 == v20)
    {
      long long v25 = v22;
LABEL_85:
      long long v22 = (char *)(v19 + v13);
      if (!v13)
      {
LABEL_89:
        *(unsigned char *)(v19 + v17) = 46;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = a2;
        }
        else {
          uint64_t v37 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        std::string::size_type v38 = (std::string::size_type)v37 + v17;
        std::string::size_type v39 = v17 + 2;
        *(unsigned char *)(v38 + 1) = 46;
        std::string::size_type v40 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        int v41 = (char)v40;
        if ((v40 & 0x80u) != 0) {
          std::string::size_type v40 = a2->__r_.__value_.__l.__size_;
        }
        if (v39 == v40)
        {
          v17 += 2;
        }
        else
        {
          v17 += 3;
          if (v41 >= 0) {
            uint64_t v43 = a2;
          }
          else {
            uint64_t v43 = (std::string *)a2->__r_.__value_.__r.__words[0];
          }
          v43->__r_.__value_.__s.__data_[v39] = 47;
        }
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v21 = v22;
      int64x2_t result = v22;
      while (1)
      {
        int v24 = *--result;
        if (v24 == 47) {
          break;
        }
        uint64_t v21 = result;
        if (result == v20)
        {
          uint64_t v21 = (char *)(v13 + v19);
          break;
        }
      }
      long long v25 = v22;
    }
    if (v25 - v21 == 2 && *(v22 - 1) == 46 && *(v22 - 2) == 46) {
      goto LABEL_89;
    }
    uint64_t v42 = &v21[-v19];
    if (v22 != v20) {
      std::string::size_type v17 = (std::string::size_type)v42;
    }
LABEL_65:
    BOOL v15 = v2[23] < 0;
    unint64_t v10 = *(char **)v2;
    uint64_t v33 = v2[23];
    if (v2[23] >= 0) {
      unint64_t v34 = v2;
    }
    else {
      unint64_t v34 = *(char **)v2;
    }
    if (v2[23] < 0) {
      uint64_t v33 = *((void *)v2 + 1);
    }
    uint64_t v35 = &v34[v33];
    if (v9 != &v34[v33])
    {
      while (*v9 == 47)
      {
        if (++v9 == v35)
        {
          unint64_t v8 = &v34[v33];
          goto LABEL_75;
        }
      }
    }
    unint64_t v8 = v9;
LABEL_75:
    if (v8 == v35) {
      break;
    }
    BOOL v9 = v8;
    while (*v9 != 47)
    {
      if (++v9 == v35)
      {
        BOOL v9 = v35;
        goto LABEL_29;
      }
    }
  }
  if (v17 <= v13)
  {
    std::string::size_type v13 = v17;
    goto LABEL_110;
  }
  int v44 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  uint64_t v45 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v44 >= 0) {
    uint64_t v45 = a2;
  }
  if (v45->__r_.__value_.__s.__data_[v17 - 1] == 47) {
    std::string::size_type v13 = v17 - 1;
  }
  else {
    std::string::size_type v13 = v17;
  }
LABEL_111:
  std::string::size_type v46 = a2->__r_.__value_.__l.__size_;
  std::string::size_type v47 = v44;
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v48 = v44;
  }
  else {
    std::string::size_type v48 = a2->__r_.__value_.__l.__size_;
  }
  if (v13 != v48)
  {
    int64x2_t result = (char *)std::string::erase(a2, v13, 0xFFFFFFFFFFFFFFFFLL);
    std::string::size_type v47 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    std::string::size_type v46 = a2->__r_.__value_.__l.__size_;
    LOBYTE(v44) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v49 = v47;
  }
  else {
    std::string::size_type v49 = v46;
  }
  if (!v49) {
    return (char *)MEMORY[0x21D4477E0](a2, ".");
  }
  return result;
}

void sub_216834088(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchAbsPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v4 = (unsigned char *)a1;
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
    goto LABEL_5;
  }
  uint64_t v4 = *(unsigned char **)a1;
  if (*(void *)(a1 + 8))
  {
LABEL_5:
    if (*v4 == 47)
    {
      pxrInternal__aapl__pxrReserved__::ArchNormPath((char *)a1, a2);
    }
    else
    {
      int v5 = (char *)operator new[](0x400uLL);
      if (getcwd(v5, 0x400uLL))
      {
        sub_216779094(&v13, v5);
        uint64_t v6 = std::string::append(&v13, "/");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        int v8 = *(char *)(a1 + 23);
        if (v8 >= 0) {
          BOOL v9 = (const std::string::value_type *)a1;
        }
        else {
          BOOL v9 = *(const std::string::value_type **)a1;
        }
        if (v8 >= 0) {
          std::string::size_type v10 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          std::string::size_type v10 = *(void *)(a1 + 8);
        }
        unint64_t v11 = std::string::append(&v14, v9, v10);
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        pxrInternal__aapl__pxrReserved__::ArchNormPath((char *)__p, a2);
        if (SHIBYTE(v16) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
      }
      else if (*(char *)(a1 + 23) < 0)
      {
        sub_216778F24(a2, *(void **)a1, *(void *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      }
      operator delete[](v5);
    }
    return;
  }

  sub_216778F24(a2, v4, 0);
}

void sub_216834264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  operator delete[](v28);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchGetStatMode(pxrInternal__aapl__pxrReserved__ *this, char *a2, int *a3)
{
  int v4 = stat((const char *)this, &v6);
  if (!v4) {
    *(_DWORD *)a2 = v6.st_mode;
  }
  return v4 == 0;
}

double pxrInternal__aapl__pxrReserved__::ArchGetAccessTime(pxrInternal__aapl__pxrReserved__ *this, const stat *a2)
{
  return (double)*((uint64_t *)this + 5) * 0.000000001 + (double)*((uint64_t *)this + 4);
}

double pxrInternal__aapl__pxrReserved__::ArchGetStatusChangeTime(pxrInternal__aapl__pxrReserved__ *this, const stat *a2)
{
  return (double)*((uint64_t *)this + 9) * 0.000000001 + (double)*((uint64_t *)this + 8);
}

off_t pxrInternal__aapl__pxrReserved__::ArchGetFileLength(FILE *this, __sFILE *a2)
{
  if (!this) {
    return -1;
  }
  int v2 = fileno(this);
  if (fstat(v2, &v4) < 0) {
    return -1;
  }
  else {
    return v4.st_size;
  }
}

off_t pxrInternal__aapl__pxrReserved__::ArchGetFileLength(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  if (stat((const char *)this, &v3) < 0) {
    return -1;
  }
  else {
    return v3.st_size;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetFileName@<X0>(FILE *this@<X0>, void *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = fileno(this);
  uint64_t result = fcntl(v4, 50, v6);
  if (result != -1) {
    return MEMORY[0x21D4477E0](a2, v6);
  }
  return result;
}

void sub_216834448(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName(uint64_t *a1, uint64_t *a2)
{
  int v4 = (char *)qword_26798E208;
  if (!qword_26798E208)
  {
    sub_216834958();
    int v4 = (char *)qword_26798E208;
  }
  sub_216779094(__p, v4);
  uint64_t add = atomic_fetch_add(dword_26798AF70, 1u);
  uint64_t v6 = getpid();
  if (v13 >= 0) {
    BOOL v9 = __p;
  }
  else {
    BOOL v9 = (void **)__p[0];
  }
  if (*((char *)a1 + 23) >= 0) {
    std::string::size_type v10 = a1;
  }
  else {
    std::string::size_type v10 = (uint64_t *)*a1;
  }
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = (uint64_t *)*a2;
  }
  if (add == 1) {
    pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.%d%s", v7, v8, v9, v10, v6, v11);
  }
  else {
    pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.%d.%d%s", v7, v8, v9, v10, v6, add, v11);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216834558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t result = qword_26798E208;
  if (!qword_26798E208)
  {
    sub_216834958();
    return qword_26798E208;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile(const char *a1, char *a2)
{
  int v4 = (char *)qword_26798E208;
  if (!qword_26798E208)
  {
    sub_216834958();
    int v4 = (char *)qword_26798E208;
  }
  sub_216779094(__p, v4);
  uint64_t TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((uint64_t *)__p, a1, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return TmpFile;
}

void sub_21683461C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((char *)a1 + 23) >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (uint64_t *)*a1;
  }
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.XXXXXX", a2, a3, v4);
  if ((char)v18 < 0)
  {
    MEMORY[0x270FA5388](v5, (char *)v17[1] + 1, v6);
    char v8 = (char *)v17 - ((v11 + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, v12);
    std::string::size_type v10 = (const char *)v17[0];
  }
  else
  {
    MEMORY[0x270FA5388](v5, v18 + 1, v6);
    char v8 = (char *)v17 - v7;
    bzero((char *)v17 - v7, v9);
    std::string::size_type v10 = (const char *)v17;
  }
  char v13 = strcpy(v8, v10);
  uint64_t v14 = mkstemp(v13);
  uint64_t v15 = v14;
  if (v14 != -1)
  {
    fchmod(v14, 0x1A0u);
    if (a3) {
      MEMORY[0x21D4477E0](a3, v8);
    }
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  return v15;
}

void sub_216834798(_Unwind_Exception *exception_object)
{
}

void pxrInternal__aapl__pxrReserved__::ArchMakeTmpSubdir(uint64_t *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.XXXXXX", a2, a3, v5);
  if ((char)v18 < 0)
  {
    size_t v9 = (char *)v17[1] + 1;
    MEMORY[0x270FA5388](v6, v7, v8);
    uint64_t v11 = (char *)v17 - ((v13 + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v11, (size_t)v9);
    size_t v12 = (const char *)v17[0];
  }
  else
  {
    size_t v9 = (char *)(v18 + 1);
    MEMORY[0x270FA5388](v6, v7, v8);
    uint64_t v11 = (char *)v17 - v10;
    bzero((char *)v17 - v10, (size_t)v9);
    size_t v12 = (const char *)v17;
  }
  uint64_t v14 = strncpy(v11, v12, (size_t)v9);
  uint64_t v15 = mkdtemp(v14);
  std::string::size_type v16 = v15;
  if (v15)
  {
    chmod(v15, 0x1E8u);
    MEMORY[0x21D4477E0](a4, v16);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_216834924(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216834958()
{
  sub_216779094(__p, "TMPDIR");
  pxrInternal__aapl__pxrReserved__::ArchGetEnv((const char *)__p, __s1);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  char v0 = v6;
  if (v6 < 0)
  {
    if (__s1[1])
    {
      uint64_t v1 = __s1[0];
      goto LABEL_8;
    }
  }
  else if (v6)
  {
    uint64_t v1 = (const char *)__s1;
LABEL_8:
    TemporaryDirectory = strdup(v1);
    goto LABEL_10;
  }
  TemporaryDirectory = (char *)__DarwinGetTemporaryDirectory();
  char v0 = v6;
LABEL_10:
  qword_26798E208 = (uint64_t)TemporaryDirectory;
  if (v0 < 0) {
    operator delete(__s1[0]);
  }
}

void sub_2168349EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t *pxrInternal__aapl__pxrReserved__::Arch_Unmapper::operator()(size_t *result, void *a2)
{
  if (a2) {
    return (size_t *)munmap(a2, *result);
  }
  return result;
}

{
  if (a2) {
    return (size_t *)munmap(a2, *result);
  }
  return result;
}

double sub_216834A50@<D0>(FILE *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  off_t FileLength = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(a1, (__sFILE *)a2);
  if (FileLength < 0)
  {
    *a3 = 0;
    a3[1] = -1;
  }
  else
  {
    size_t v8 = FileLength;
    int v9 = fileno(a1);
    uint64_t v10 = mmap(0, v8, 1, 2, v9, 0);
    if (v10 == (void *)-1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    *a3 = v11;
    a3[1] = v8;
    if (a2 && !v11)
    {
      int v12 = *__error();
      uint64_t v13 = "system limit on mapped regions exceeded, or out of memory";
      if (v12 == 12 || v12 == 24) {
        goto LABEL_11;
      }
      if (v12 == 22)
      {
        uint64_t v13 = "bad arguments to mmap()";
LABEL_11:
        MEMORY[0x21D4477E0](a2, v13);
        return result;
      }
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v14);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = *(double *)&v14;
      *(_OWORD *)a2 = v14;
      *(void *)(a2 + 16) = v15;
    }
  }
  return result;
}

void sub_216834B3C(_Unwind_Exception *a1)
{
  sub_2168351F0(v1, 0);
  _Unwind_Resume(a1);
}

double sub_216834B5C@<D0>(FILE *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  off_t FileLength = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(a1, (__sFILE *)a2);
  if (FileLength < 0)
  {
    *a3 = 0;
    a3[1] = -1;
  }
  else
  {
    size_t v8 = FileLength;
    int v9 = fileno(a1);
    uint64_t v10 = mmap(0, v8, 3, 2, v9, 0);
    if (v10 == (void *)-1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    *a3 = v11;
    a3[1] = v8;
    if (a2 && !v11)
    {
      int v12 = *__error();
      uint64_t v13 = "system limit on mapped regions exceeded, or out of memory";
      if (v12 == 12 || v12 == 24) {
        goto LABEL_11;
      }
      if (v12 == 22)
      {
        uint64_t v13 = "bad arguments to mmap()";
LABEL_11:
        MEMORY[0x21D4477E0](a2, v13);
        return result;
      }
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v14);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = *(double *)&v14;
      *(_OWORD *)a2 = v14;
      *(void *)(a2 + 16) = v15;
    }
  }
  return result;
}

void sub_216834C48(_Unwind_Exception *a1)
{
  sub_216835220(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(const char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v5 = fopen(a1, "rb");
  if (v5)
  {
    char v6 = v5;
    sub_216834A50(v5, a2, a3);
    fclose(v6);
  }
  else
  {
    if (a2)
    {
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v7);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v7;
      *(void *)(a2 + 16) = v8;
    }
    *a3 = 0;
    a3[1] = -1;
  }
}

void sub_216834D24(_Unwind_Exception *a1)
{
  fclose(v1);
  _Unwind_Resume(a1);
}