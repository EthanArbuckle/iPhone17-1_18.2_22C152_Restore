void *sub_2171241E0()
{
  return &unk_26C776380;
}

void *sub_2171241EC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  char v4 = *(unsigned char *)a1;
  *a2 = 1;
  v5 = operator new(0x10uLL);
  *(void *)v5 = &unk_26C776410;
  v5[8] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217124278(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217124288()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776458;
  return result;
}

void sub_2171242C0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776458;
}

uint64_t sub_2171242E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712433C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171242F0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7764D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217124330()
{
  return &unk_26C7764D0;
}

uint64_t sub_21712433C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  v32 = 0;
  LODWORD(v27[0]) = 0;
  DWORD2(v27[0]) = 0;
  v29[0] = 0;
  v29[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v30, a2, a3, v27, v29);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v31, a4);
  if (v31)
  {
    v8 = *(uint64_t **)(v31 + 16);
    uint64_t v9 = *(void *)(v31 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_21690833C((uint64_t)v27, v11);
    sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v31 + 16);
    uint64_t v18 = *(void *)(v31 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = v18 >> 3;
      if ((unint64_t)(v18 >> 3) <= 1) {
        uint64_t v19 = 1;
      }
      size_t v20 = 1;
      do
      {
        uint64_t v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v31, v20);
        v16 = (char *)__dst;
      }
    }
    long long v24 = v27[0];
    long long v25 = v27[1];
    v26 = v16;
    if (v16)
    {
      v22 = (atomic_ullong *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        v22 = (atomic_ullong *)(v16 - 16);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_2171244E8(a5, (uint64_t)&v24);
    sub_2168F83DC((uint64_t)&v24);
    sub_2168F83DC((uint64_t)v27);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v30);
  if (v32) {
    sub_216784EC4(v32);
  }
  return v13;
}

void sub_21712449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171244E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C7764B8[v2])(&v5, a1);
}

uint64_t sub_21712453C()
{
  return 1;
}

uint64_t sub_217124544(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712456C(long long ***a1, uint64_t *a2)
{
  return sub_21712457C(*a2, **a1);
}

BOOL sub_21712457C(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E471ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C430B8(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_2171245FC()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7764F0;
  return result;
}

void sub_217124634(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7764F0;
}

void *sub_21712465C@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  return sub_2171246CC(a1, a2);
}

uint64_t sub_217124680(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7764D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171246C0()
{
  return &unk_26C7764D0;
}

void *sub_2171246CC@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (size_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(size_t **)a1;
  }
  size_t v5 = *v4;
  v6 = operator new[](*v4);
  uint64_t v7 = v6;
  if (v5)
  {
    v8 = (char *)v4[4];
    size_t v9 = v5;
    unint64_t v10 = v6;
    do
    {
      char v11 = *v8++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  uint64_t v12 = operator new(0x10uLL);
  *uint64_t v12 = &unk_26C776560;
  v12[1] = v7;
  result = sub_217122B64(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217124780(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217124794(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C776560;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_2171247E0(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C776560;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_21712483C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217124844(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  size_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_2171248F0(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171248F0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 6;
  WORD2(v6) = 1;
  v9[0] = &unk_26C7765A8;
  unint64_t v10 = v9;
  v7[0] = &unk_26C776640;
  v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 6;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  v8 = v7;
  v9[0] = &unk_26C7766F8;
  unint64_t v10 = v9;
  v7[0] = &unk_26C776790;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217124A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217124A88()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7765A8;
  return result;
}

void sub_217124AC0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7765A8;
}

uint64_t sub_217124AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217124B3C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217124AF0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776620)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217124B30()
{
  return &unk_26C776620;
}

uint64_t sub_217124B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_217124BC4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217124BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217124BC4(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(int **, uint64_t))off_26C776608[v2])(&v5, a1);
}

uint64_t sub_217124C18()
{
  return 1;
}

uint64_t sub_217124C20(int **a1, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = &unk_26C750543;
  *(_DWORD *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_217124C84(_DWORD **a1, uint64_t *a2)
{
  return sub_217124C94(*a2, *a1);
}

BOOL sub_217124C94(uint64_t a1, _DWORD *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(_DWORD **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

void *sub_217124D04()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776640;
  return result;
}

void sub_217124D3C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776640;
}

void *sub_217124D64@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217124DD4(a1, a2);
}

uint64_t sub_217124D88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776620)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217124DC8()
{
  return &unk_26C776620;
}

void *sub_217124DD4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  int v4 = *(_DWORD *)a1;
  *a2 = 1;
  BOOL v5 = operator new(0x10uLL);
  *(void *)BOOL v5 = &unk_26C7766B0;
  v5[2] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217124E60(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217124E70()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7766F8;
  return result;
}

void sub_217124EA8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7766F8;
}

uint64_t sub_217124ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217124F24(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217124ED8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776770)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217124F18()
{
  return &unk_26C776770;
}

uint64_t sub_217124F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  v32 = 0;
  LODWORD(v27[0]) = 0;
  DWORD2(v27[0]) = 0;
  v29[0] = 0;
  v29[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v30, a2, a3, v27, v29);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v31, a4);
  if (v31)
  {
    uint64_t v8 = *(uint64_t **)(v31 + 16);
    uint64_t v9 = *(void *)(v31 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_216907954((uint64_t)v27, v11);
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v31 + 16);
    uint64_t v18 = *(void *)(v31 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v31, 4 * v20);
        v16 = (char *)__dst;
      }
    }
    long long v24 = v27[0];
    long long v25 = v27[1];
    v26 = v16;
    if (v16)
    {
      v22 = (atomic_ullong *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        v22 = (atomic_ullong *)(v16 - 16);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_2171250D4(a5, (uint64_t)&v24);
    sub_2168F83DC((uint64_t)&v24);
    sub_2168F83DC((uint64_t)v27);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v30);
  if (v32) {
    sub_216784EC4(v32);
  }
  return v13;
}

void sub_217125088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171250D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  BOOL v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C776758[v2])(&v5, a1);
}

uint64_t sub_217125128()
{
  return 1;
}

uint64_t sub_217125130(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217125158(long long ***a1, uint64_t *a2)
{
  return sub_217125168(*a2, **a1);
}

BOOL sub_217125168(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E54BCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2169DCE38(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_2171251E8()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776790;
  return result;
}

void sub_217125220(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776790;
}

void *sub_217125248@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_2171252B8(a1, a2);
}

uint64_t sub_21712526C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776770)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171252AC()
{
  return &unk_26C776770;
}

void *sub_2171252B8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if ((unint64_t)*v4 >> 62) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 4 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (int *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      int v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C776800;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217125378(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712538C(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C776800;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_2171253D8(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C776800;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217125434(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_21712543C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_2171254E8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171254E8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 5;
  WORD2(v6) = 1;
  v9[0] = &unk_26C776848;
  uint64_t v10 = v9;
  v7[0] = &unk_26C7768E0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 5;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C776998;
  uint64_t v10 = v9;
  v7[0] = &unk_26C776A30;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217125650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217125680()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776848;
  return result;
}

void sub_2171256B8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776848;
}

uint64_t sub_2171256E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217125734(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171256E8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7768C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217125728()
{
  return &unk_26C7768C0;
}

uint64_t sub_217125734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_2171257BC(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171257A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171257BC(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(int **, uint64_t))off_26C7768A8[v2])(&v5, a1);
}

uint64_t sub_217125810()
{
  return 1;
}

uint64_t sub_217125818(int **a1, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = &unk_26C7505FB;
  *(_DWORD *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_21712587C(_DWORD **a1, uint64_t *a2)
{
  return sub_21712588C(*a2, *a1);
}

BOOL sub_21712588C(uint64_t a1, _DWORD *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C260] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(_DWORD **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

void *sub_2171258FC()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7768E0;
  return result;
}

void sub_217125934(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7768E0;
}

void *sub_21712595C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_2171259CC(a1, a2);
}

uint64_t sub_217125980(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7768C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171259C0()
{
  return &unk_26C7768C0;
}

void *sub_2171259CC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  int v4 = *(_DWORD *)a1;
  *a2 = 1;
  BOOL v5 = operator new(0x10uLL);
  *(void *)BOOL v5 = &unk_26C776950;
  v5[2] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217125A58(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217125A68()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776998;
  return result;
}

void sub_217125AA0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776998;
}

uint64_t sub_217125AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217125B1C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217125AD0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776A10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217125B10()
{
  return &unk_26C776A10;
}

uint64_t sub_217125B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  v32 = 0;
  LODWORD(v27[0]) = 0;
  DWORD2(v27[0]) = 0;
  v29[0] = 0;
  v29[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v30, a2, a3, v27, v29);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v31, a4);
  if (v31)
  {
    uint64_t v8 = *(uint64_t **)(v31 + 16);
    uint64_t v9 = *(void *)(v31 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_216906CDC((uint64_t)v27, v11);
    sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v31 + 16);
    uint64_t v18 = *(void *)(v31 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v31, 4 * v20);
        v16 = (char *)__dst;
      }
    }
    long long v24 = v27[0];
    long long v25 = v27[1];
    v26 = v16;
    if (v16)
    {
      v22 = (atomic_ullong *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        v22 = (atomic_ullong *)(v16 - 16);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217125CCC(a5, (uint64_t)&v24);
    sub_2168F83DC((uint64_t)&v24);
    sub_2168F83DC((uint64_t)v27);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v30);
  if (v32) {
    sub_216784EC4(v32);
  }
  return v13;
}

void sub_217125C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217125CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  BOOL v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C7769F8[v2])(&v5, a1);
}

uint64_t sub_217125D20()
{
  return 1;
}

uint64_t sub_217125D28(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217125D50(long long ***a1, uint64_t *a2)
{
  return sub_217125D60(*a2, **a1);
}

BOOL sub_217125D60(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x8000000217478D60 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2169DE964(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217125DE0()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776A30;
  return result;
}

void sub_217125E18(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776A30;
}

void *sub_217125E40@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217125EB0(a1, a2);
}

uint64_t sub_217125E64(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776A10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217125EA4()
{
  return &unk_26C776A10;
}

void *sub_217125EB0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if ((unint64_t)*v4 >> 62) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 4 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (int *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      int v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C776AA0;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217125F70(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217125F84(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C776AA0;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217125FD0(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C776AA0;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_21712602C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217126034(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C290], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_2171260E0(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171260E0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 8;
  WORD2(v6) = 1;
  v9[0] = &unk_26C776AE8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C776B80;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 8;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C776C38;
  uint64_t v10 = v9;
  v7[0] = &unk_26C776CD0;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217126248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217126278()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776AE8;
  return result;
}

void sub_2171262B0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776AE8;
}

uint64_t sub_2171262D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712632C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171262E0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776B60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217126320()
{
  return &unk_26C776B60;
}

uint64_t sub_21712632C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[1] = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_2171263E8(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171263C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171263E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C776B48[v2])(&v5, a1);
}

uint64_t sub_21712643C()
{
  return 1;
}

uint64_t sub_217126444(uint64_t **a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *uint64_t v2 = v3;
  v2[1] = &unk_26C750823;
  return 1;
}

BOOL sub_2171264A4(void **a1, uint64_t *a2)
{
  return sub_2171264B4(*a2, *a1);
}

BOOL sub_2171264B4(uint64_t a1, void *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C290] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(void **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

void *sub_217126524()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776B80;
  return result;
}

void sub_21712655C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776B80;
}

void *sub_217126584@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  return sub_2171265F4(a1, a2);
}

uint64_t sub_2171265A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776B60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171265E8()
{
  return &unk_26C776B60;
}

void *sub_2171265F4@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  uint64_t v4 = *a1;
  *a2 = 1;
  BOOL v5 = operator new(0x10uLL);
  void *v5 = &unk_26C776BF0;
  v5[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_21712667C(uint64_t a1)
{
  return a1 + 8;
}

void *sub_21712668C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776C38;
  return result;
}

void sub_2171266C4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776C38;
}

uint64_t sub_2171266EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217126740(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171266F4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776CB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217126734()
{
  return &unk_26C776CB0;
}

uint64_t sub_217126740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  v32 = 0;
  LODWORD(v27[0]) = 0;
  DWORD2(v27[0]) = 0;
  v29[0] = 0;
  v29[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v30, a2, a3, v27, v29);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v31, a4);
  if (v31)
  {
    uint64_t v8 = *(uint64_t **)(v31 + 16);
    uint64_t v9 = *(void *)(v31 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169AD8FC((uint64_t)v27, v11);
    sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v31 + 16);
    uint64_t v18 = *(void *)(v31 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v31, 8 * v20);
        v16 = (char *)__dst;
      }
    }
    long long v24 = v27[0];
    long long v25 = v27[1];
    v26 = v16;
    if (v16)
    {
      v22 = (atomic_ullong *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        v22 = (atomic_ullong *)(v16 - 16);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_2171268F0(a5, (uint64_t)&v24);
    sub_2168F83DC((uint64_t)&v24);
    sub_2168F83DC((uint64_t)v27);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v30);
  if (v32) {
    sub_216784EC4(v32);
  }
  return v13;
}

void sub_2171268A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171268F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  BOOL v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C776C98[v2])(&v5, a1);
}

uint64_t sub_217126944()
{
  return 1;
}

uint64_t sub_21712694C(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217126974(long long ***a1, uint64_t *a2)
{
  return sub_217126984(*a2, **a1);
}

BOOL sub_217126984(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174695E8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2169DDD0C(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217126A04()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776CD0;
  return result;
}

void sub_217126A3C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776CD0;
}

void *sub_217126A64@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217126AD4(a1, a2);
}

uint64_t sub_217126A88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776CB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217126AC8()
{
  return &unk_26C776CB0;
}

void *sub_217126AD4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if ((unint64_t)*v4 >> 61) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 8 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (uint64_t *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C776D40;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217126B94(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217126BA8(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C776D40;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217126BF4(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C776D40;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217126C50(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217126C58(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C298], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217126D04(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217126D04(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 7;
  WORD2(v6) = 1;
  v9[0] = &unk_26C776D88;
  uint64_t v10 = v9;
  v7[0] = &unk_26C776E20;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 7;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C776ED8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C776F70;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217126E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217126E9C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776D88;
  return result;
}

void sub_217126ED4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776D88;
}

uint64_t sub_217126EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217126F50(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217126F04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776E00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217126F44()
{
  return &unk_26C776E00;
}

uint64_t sub_217126F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[1] = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_21712700C(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217126FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712700C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C776DE8[v2])(&v5, a1);
}

uint64_t sub_217127060()
{
  return 1;
}

uint64_t sub_217127068(uint64_t **a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *uint64_t v2 = v3;
  v2[1] = &unk_26C7508DB;
  return 1;
}

BOOL sub_2171270C8(void **a1, uint64_t *a2)
{
  return sub_2171270D8(*a2, *a1);
}

BOOL sub_2171270D8(uint64_t a1, void *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C298] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(void **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

void *sub_217127148()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776E20;
  return result;
}

void sub_217127180(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776E20;
}

void *sub_2171271A8@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  return sub_217127218(a1, a2);
}

uint64_t sub_2171271CC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776E00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712720C()
{
  return &unk_26C776E00;
}

void *sub_217127218@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  uint64_t v4 = *a1;
  *a2 = 1;
  BOOL v5 = operator new(0x10uLL);
  void *v5 = &unk_26C776E90;
  v5[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_2171272A0(uint64_t a1)
{
  return a1 + 8;
}

void *sub_2171272B0()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776ED8;
  return result;
}

void sub_2171272E8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776ED8;
}

uint64_t sub_217127310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217127364(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217127318(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776F50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217127358()
{
  return &unk_26C776F50;
}

uint64_t sub_217127364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  v32 = 0;
  LODWORD(v27[0]) = 0;
  DWORD2(v27[0]) = 0;
  v29[0] = 0;
  v29[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v30, a2, a3, v27, v29);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v31, a4);
  if (v31)
  {
    uint64_t v8 = *(uint64_t **)(v31 + 16);
    uint64_t v9 = *(void *)(v31 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169AE9CC((uint64_t)v27, v11);
    sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27, v14, v15);
    v16 = (char *)__dst;
    v17 = *(uint64_t **)(v31 + 16);
    uint64_t v18 = *(void *)(v31 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v31, 8 * v20);
        v16 = (char *)__dst;
      }
    }
    long long v24 = v27[0];
    long long v25 = v27[1];
    v26 = v16;
    if (v16)
    {
      v22 = (atomic_ullong *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        v22 = (atomic_ullong *)(v16 - 16);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217127514(a5, (uint64_t)&v24);
    sub_2168F83DC((uint64_t)&v24);
    sub_2168F83DC((uint64_t)v27);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v30);
  if (v32) {
    sub_216784EC4(v32);
  }
  return v13;
}

void sub_2171274C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217127514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  BOOL v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C776F38[v2])(&v5, a1);
}

uint64_t sub_217127568()
{
  return 1;
}

uint64_t sub_217127570(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217127598(long long ***a1, uint64_t *a2)
{
  return sub_2171275A8(*a2, **a1);
}

BOOL sub_2171275A8(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x800000021746964CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2169DF578(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217127628()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C776F70;
  return result;
}

void sub_217127660(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776F70;
}

void *sub_217127688@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_2171276F8(a1, a2);
}

uint64_t sub_2171276AC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776F50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171276EC()
{
  return &unk_26C776F50;
}

void *sub_2171276F8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if ((unint64_t)*v4 >> 61) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 8 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (uint64_t *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C776FE0;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_2171277B8(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171277CC(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C776FE0;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217127818(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C776FE0;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217127874(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_21712787C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C510, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217127928(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217127928(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 9;
  WORD2(v6) = 1;
  v9[0] = &unk_26C777028;
  uint64_t v10 = v9;
  v7[0] = &unk_26C7770C0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 9;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C777178;
  uint64_t v10 = v9;
  v7[0] = &unk_26C777210;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217127A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217127AC0()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777028;
  return result;
}

void sub_217127AF8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777028;
}

uint64_t sub_217127B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217127B74(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217127B28(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7770A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217127B68()
{
  return &unk_26C7770A0;
}

uint64_t sub_217127B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = 0;
  v10[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v11, a2, a3, v10);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v11, (uint64_t)&v12, a4, 0);
  __int16 v7 = sub_217127C64((uint64_t)v10, &v12);
  uint64_t v8 = sub_217127C08(a5, v7);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v11);
  return v8;
}

void sub_217127BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217127C08(uint64_t a1, __int16 a2)
{
  __int16 v5 = a2;
  int v4 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v6 = &v4;
  return ((uint64_t (*)(__int16 ***, uint64_t))off_26C777088[v2])(&v6, a1);
}

uint64_t sub_217127C64(uint64_t a1, __int16 *a2)
{
  int v2 = *a2;
  unsigned int v3 = (v2 & 0x7FFF) << 13;
  unsigned int v4 = v2 & 0x80000000;
  unsigned int v5 = __clz(v3);
  unsigned int v6 = (v4 | 0x38800000 | (v3 << (v5 - 8))) - ((v5 - 8) << 23);
  if (!v3) {
    unsigned int v6 = v4;
  }
  int v7 = v3 | v4;
  int v8 = v7 | 0x7F800000;
  unsigned int v9 = v7 + 939524096;
  if (v3 >> 23 > 0x1E) {
    unsigned int v9 = v8;
  }
  if (v3 >= 0x800000) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v6;
  }
  if ((v10 & 0x7FFFFFFF) == 0) {
    return WORD1(v10);
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
  }
         + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)v10);
}

uint64_t sub_217127D0C()
{
  return 1;
}

uint64_t sub_217127D14(__int16 ***a1, void *a2)
{
  uint64_t v2 = *a2;
  __int16 v3 = ***a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_217127D7C(_WORD ***a1, uint64_t *a2)
{
  return sub_217127D88(*a1, *a2);
}

BOOL sub_217127D88(_WORD **a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x80000002174E4222 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  else {
    **(_WORD **)(a2 + 8) = **a1;
  }
  return v4 == 0;
}

void *sub_217127E00()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7770C0;
  return result;
}

void sub_217127E38(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7770C0;
}

void *sub_217127E60@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217127ED0(a1, a2);
}

uint64_t sub_217127E84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7770A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217127EC4()
{
  return &unk_26C7770A0;
}

void *sub_217127ED0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  sub_217127F68((uint64_t)&v6, (unsigned __int16 *)a1, &v7);
  *a2 = 1;
  int v4 = operator new(0x10uLL);
  *(void *)int v4 = &unk_26C777130;
  v4[4] = v7;
  result = sub_217122B64(a2 + 1, (uint64_t)v4);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217127F68(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  float v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  unsigned int v4 = LODWORD(v3) & 0x7FFFFFFF;
  int v5 = HIWORD(LODWORD(v3));
  int v6 = HIWORD(LODWORD(v3)) & 0x8000;
  if ((LODWORD(v3) >> 23) < 0x71u)
  {
    if (v4 >= 0x33000001)
    {
      unsigned int v9 = LODWORD(v3) & 0x7FFFFF | 0x800000;
      unsigned int v10 = v9 << ((v4 >> 23) - 94);
      unsigned int v11 = v9 >> (126 - (v4 >> 23));
      LOWORD(v6) = v11 | v5 & 0x8000;
      if (v10 > 0x80000000 || ((int v12 = v11 & 1, v10 == 0x80000000) ? (v13 = v12 == 0) : (v13 = 1), !v13)) {
        LOWORD(v6) = v6 + 1;
      }
    }
  }
  else
  {
    unsigned int v7 = v6 | ((LODWORD(v3) + 134221823 + ((LODWORD(v3) >> 13) & 1)) >> 13);
    v6 |= 0x7C00u;
    if (v4 >= 0x477FF000) {
      LOWORD(v7) = v6;
    }
    int v8 = (((LODWORD(v3) >> 13) & 0x3FF) == 0) | (LODWORD(v3) >> 13) & 0x3FF | v6;
    if (v4 != 2139095040) {
      LOWORD(v6) = v8;
    }
    if (v4 >> 23 < 0xFF) {
      LOWORD(v6) = v7;
    }
  }
  *a3 = v6;
}

uint64_t sub_217128054(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217128064()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777178;
  return result;
}

void sub_21712809C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777178;
}

uint64_t sub_2171280C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217128118(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171280CC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7771F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712810C()
{
  return &unk_26C7771F0;
}

uint64_t sub_217128118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = 0;
  v35 = 0;
  LODWORD(v30[0]) = 0;
  DWORD2(v30[0]) = 0;
  v32[0] = 0;
  v32[2] = 0;
  Alembic::Abc::v12::IArrayProperty::IArrayProperty(v33, a2, a3, v30, v32);
  Alembic::Abc::v12::IArrayProperty::get((uint64_t)v33, (uint64_t)&v34, a4);
  if (v34)
  {
    unsigned int v7 = *(uint64_t **)(v34 + 16);
    uint64_t v8 = *(void *)(v34 + 24) - (void)v7;
    if (v8)
    {
      unint64_t v9 = v8 >> 3;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    sub_2168F8F50((uint64_t)v30, v10);
    sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v30, v13, v14);
    v15 = v31;
    v16 = *(uint64_t **)(v34 + 16);
    uint64_t v17 = *(void *)(v34 + 24) - (void)v16;
    if (v17)
    {
      uint64_t v18 = *(__int16 **)v34;
      uint64_t v19 = v17 >> 3;
      if ((unint64_t)(v17 >> 3) <= 1) {
        uint64_t v19 = 1;
      }
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = v20;
        uint64_t v23 = *v16++;
        uint64_t v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        uint64_t v24 = v21 * v22;
        do
        {
          *v15++ = sub_217127C64((uint64_t)v32, v18++);
          --v24;
        }
        while (v24);
        v15 = v31;
      }
    }
    long long v27 = v30[0];
    long long v28 = v30[1];
    v29 = v15;
    if (v15)
    {
      long long v25 = (atomic_ullong *)*((void *)&v28 + 1);
      if (!*((void *)&v28 + 1)) {
        long long v25 = (atomic_ullong *)(v15 - 8);
      }
      atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = sub_2171282F4(a5, (uint64_t)&v27);
    sub_2168F83DC((uint64_t)&v27);
    sub_2168F83DC((uint64_t)v30);
  }
  else
  {
    uint64_t v12 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v33);
  if (v35) {
    sub_216784EC4(v35);
  }
  return v12;
}

void sub_2171282A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a21);
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 40);
  if (v23) {
    sub_216784EC4(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171282F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  int v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C7771D8[v2])(&v5, a1);
}

uint64_t sub_217128348()
{
  return 1;
}

uint64_t sub_217128350(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217128378(long long ***a1, uint64_t *a2)
{
  return sub_217128388(*a2, **a1);
}

BOOL sub_217128388(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E551CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C441D0(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217128408()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777210;
  return result;
}

void sub_217128440(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777210;
}

void *sub_217128468@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2171284D8(a1, a2);
}

uint64_t sub_21712848C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7771F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171284CC()
{
  return &unk_26C7771F0;
}

void *sub_2171284D8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if (*v4 < 0) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 2 * *v4;
  }
  unsigned int v7 = (char *)operator new[](v6);
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v5;
    do
    {
      sub_217127F68((uint64_t)&v12, (unsigned __int16 *)(v4[4] + v8), &v7[v8]);
      v8 += 2;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  unint64_t v10 = operator new(0x10uLL);
  *unint64_t v10 = &unk_26C777280;
  v10[1] = v7;
  result = sub_217122B64(a2 + 1, (uint64_t)v10);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_2171285B0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171285C4(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C777280;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217128610(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C777280;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_21712866C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217128674(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217128720(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217128720(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 10;
  WORD2(v6) = 1;
  v9[0] = &unk_26C7772C8;
  unint64_t v10 = v9;
  v7[0] = &unk_26C777348;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 10;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C777400;
  unint64_t v10 = v9;
  v7[0] = &unk_26C777498;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217128888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_2171288B8()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7772C8;
  return result;
}

void sub_2171288F0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7772C8;
}

uint64_t sub_217128918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712896C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217128920(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777328)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217128960()
{
  return &unk_26C777328;
}

uint64_t sub_21712896C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_21711675C(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171289DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

void *sub_2171289FC()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777348;
  return result;
}

void sub_217128A34(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777348;
}

void *sub_217128A5C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217128ACC(a1, a2);
}

uint64_t sub_217128A80(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777328)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217128AC0()
{
  return &unk_26C777328;
}

void *sub_217128ACC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  int v4 = *(_DWORD *)a1;
  *a2 = 1;
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &unk_26C7773B8;
  v5[2] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217128B60(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217128B70()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777400;
  return result;
}

void sub_217128BA8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777400;
}

uint64_t sub_217128BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217128C24(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217128BD8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777478)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217128C18()
{
  return &unk_26C777478;
}

uint64_t sub_217128C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  v32 = 0;
  LODWORD(v27[0]) = 0;
  DWORD2(v27[0]) = 0;
  v29[0] = 0;
  v29[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v30, a2, a3, v27, v29);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v31, a4);
  if (v31)
  {
    uint64_t v8 = *(uint64_t **)(v31 + 16);
    uint64_t v9 = *(void *)(v31 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168F8250((uint64_t)v27, v11);
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27, v14, v15);
    v16 = (char *)__dst;
    uint64_t v17 = *(uint64_t **)(v31 + 16);
    uint64_t v18 = *(void *)(v31 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v31, 4 * v20);
        v16 = (char *)__dst;
      }
    }
    long long v24 = v27[0];
    long long v25 = v27[1];
    v26 = v16;
    if (v16)
    {
      uint64_t v22 = (atomic_ullong *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        uint64_t v22 = (atomic_ullong *)(v16 - 16);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217128DD4(a5, (uint64_t)&v24);
    sub_2168F83DC((uint64_t)&v24);
    sub_2168F83DC((uint64_t)v27);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v30);
  if (v32) {
    sub_216784EC4(v32);
  }
  return v13;
}

void sub_217128D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217128DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C777460[v2])(&v5, a1);
}

uint64_t sub_217128E28()
{
  return 1;
}

uint64_t sub_217128E30(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217128E58(long long ***a1, uint64_t *a2)
{
  return sub_217128E68(*a2, **a1);
}

BOOL sub_217128E68(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2169412D4(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217128EE8()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777498;
  return result;
}

void sub_217128F20(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777498;
}

void *sub_217128F48@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217128FB8(a1, a2);
}

uint64_t sub_217128F6C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777478)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217128FAC()
{
  return &unk_26C777478;
}

void *sub_217128FB8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if ((unint64_t)*v4 >> 62) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 4 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (int *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      int v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777508;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217129078(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712908C(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C777508;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_2171290D8(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C777508;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217129134(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_21712913C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_2171291E8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171291E8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 11;
  WORD2(v6) = 1;
  v9[0] = &unk_26C777550;
  uint64_t v10 = v9;
  v7[0] = &unk_26C7775E8;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 11;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C7776A0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C777738;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217129350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217129380()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777550;
  return result;
}

void sub_2171293B8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777550;
}

uint64_t sub_2171293E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217129434(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171293E8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7775C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217129428()
{
  return &unk_26C7775C8;
}

uint64_t sub_217129434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[1] = *(double *)MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_2171294F0(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171294D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171294F0(uint64_t a1, double a2)
{
  double v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(double **, uint64_t))off_26C7775B0[v2])(&v5, a1);
}

uint64_t sub_217129540()
{
  return 1;
}

uint64_t sub_217129548(uint64_t **a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  v2[1] = &unk_26C750B03;
  *uint64_t v2 = v3;
  return 1;
}

BOOL sub_2171295B4(void **a1, uint64_t *a2)
{
  return sub_2171295C4(*a2, *a1);
}

BOOL sub_2171295C4(uint64_t a1, void *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(void **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

void *sub_217129634()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7775E8;
  return result;
}

void sub_21712966C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7775E8;
}

void *sub_217129694@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  return sub_217129704(a1, a2);
}

uint64_t sub_2171296B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7775C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171296F8()
{
  return &unk_26C7775C8;
}

void *sub_217129704@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  uint64_t v4 = *a1;
  *a2 = 1;
  BOOL v5 = operator new(0x10uLL);
  void *v5 = &unk_26C777658;
  v5[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217129798(uint64_t a1)
{
  return a1 + 8;
}

void *sub_2171297A8()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7776A0;
  return result;
}

void sub_2171297E0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7776A0;
}

uint64_t sub_217129808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712985C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217129810(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777718)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217129850()
{
  return &unk_26C777718;
}

uint64_t sub_21712985C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  v32 = 0;
  LODWORD(v27[0]) = 0;
  DWORD2(v27[0]) = 0;
  v29[0] = 0;
  v29[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v30, a2, a3, v27, v29);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v31, a4);
  if (v31)
  {
    uint64_t v8 = *(uint64_t **)(v31 + 16);
    uint64_t v9 = *(void *)(v31 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168F9ADC((uint64_t)v27, v11);
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27, v14, v15);
    v16 = (char *)__dst;
    uint64_t v17 = *(uint64_t **)(v31 + 16);
    uint64_t v18 = *(void *)(v31 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = (unint64_t)(v18 >> 3) <= 1 ? 1 : v18 >> 3;
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = *v17++;
        v20 *= v21;
        --v19;
      }
      while (v19);
      if (v20)
      {
        memmove(__dst, *(const void **)v31, 8 * v20);
        v16 = (char *)__dst;
      }
    }
    long long v24 = v27[0];
    long long v25 = v27[1];
    v26 = v16;
    if (v16)
    {
      uint64_t v22 = (atomic_ullong *)*((void *)&v25 + 1);
      if (!*((void *)&v25 + 1)) {
        uint64_t v22 = (atomic_ullong *)(v16 - 16);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217129A0C(a5, (uint64_t)&v24);
    sub_2168F83DC((uint64_t)&v24);
    sub_2168F83DC((uint64_t)v27);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v30);
  if (v32) {
    sub_216784EC4(v32);
  }
  return v13;
}

void sub_2171299C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217129A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  BOOL v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C777700[v2])(&v5, a1);
}

uint64_t sub_217129A60()
{
  return 1;
}

uint64_t sub_217129A68(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217129A90(long long ***a1, uint64_t *a2)
{
  return sub_217129AA0(*a2, **a1);
}

BOOL sub_217129AA0(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_21693E46C(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217129B20()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777738;
  return result;
}

void sub_217129B58(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777738;
}

void *sub_217129B80@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217129BF0(a1, a2);
}

uint64_t sub_217129BA4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777718)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217129BE4()
{
  return &unk_26C777718;
}

void *sub_217129BF0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if ((unint64_t)*v4 >> 61) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 8 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (uint64_t *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C7777A8;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217129CB0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217129CC4(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C7777A8;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217129D10(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C7777A8;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217129D6C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217129D74(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C747090, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217129E20(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217129E20(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 12;
  WORD2(v6) = 1;
  v9[0] = &unk_26C7777F0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C777888;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 12;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C777940;
  uint64_t v10 = v9;
  v7[0] = &unk_26C7779D8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217129F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217129FB8()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7777F0;
  return result;
}

void sub_217129FF0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7777F0;
}

uint64_t sub_21712A018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712A06C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712A020(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777868)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712A060()
{
  return &unk_26C777868;
}

uint64_t sub_21712A06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  v11[0] = 0;
  double v11[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v12, a2, a3, v11);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v12, (uint64_t)&v13, a4, 0);
  if (SHIBYTE(v14) < 0)
  {
    sub_216778F24(__p, (void *)v13, *((unint64_t *)&v13 + 1));
  }
  else
  {
    *(_OWORD *)__p = v13;
    uint64_t v10 = v14;
  }
  uint64_t v7 = sub_21712A1A0(a5, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v12);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
  return v7;
}

void sub_21712A158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a18);
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712A1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C777850[v2])(&v5, a1);
}

uint64_t sub_21712A1F4()
{
  return 1;
}

uint64_t sub_21712A1FC(uint64_t **a1, uint64_t *a2)
{
  return 1;
}

BOOL sub_21712A224(const std::string ***a1, uint64_t *a2)
{
  return sub_21712A234(*a2, **a1);
}

BOOL sub_21712A234(uint64_t a1, const std::string *a2)
{
  int v4 = strcmp((const char *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    std::string::operator=(*(std::string **)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712A2B4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777888;
  return result;
}

void sub_21712A2EC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777888;
}

void sub_21712A314(uint64_t a1@<X1>, void *a2@<X8>)
{
}

uint64_t sub_21712A338(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777868)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712A378()
{
  return &unk_26C777868;
}

void sub_21712A384(uint64_t a1@<X1>, void *a2@<X8>)
{
  memset(&v5, 0, sizeof(v5));
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (const std::string *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(const std::string **)a1;
  }
  std::string::operator=(&v5, v4);
  sub_21712A41C(a2, (long long *)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_21712A3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21712A41C(void *a1, long long *a2)
{
  *a1 = 1;
  int v4 = operator new(0x20uLL);
  sub_21712A48C(v4, a2);
  sub_217122B64(a1 + 1, (uint64_t)v4);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_21712A478(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21712A48C(void *a1, long long *a2)
{
  *a1 = &unk_26C7778F8;
  uint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return a1;
}

uint64_t sub_21712A4F4(uint64_t a1)
{
  *(void *)a1 = &unk_26C7778F8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_21712A544(void **__p)
{
  *__p = &unk_26C7778F8;
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

uint64_t sub_21712A5A4(uint64_t a1)
{
  return a1 + 8;
}

void *sub_21712A5B4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777940;
  return result;
}

void sub_21712A5EC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777940;
}

uint64_t sub_21712A614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712A668(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712A61C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7779B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712A65C()
{
  return &unk_26C7779B8;
}

uint64_t sub_21712A668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  LODWORD(v26[0]) = 0;
  DWORD2(v26[0]) = 0;
  v28[0] = 0;
  v28[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v29, a2, a3, v26, v28);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v30, a4);
  if (v30)
  {
    uint64_t v8 = *(uint64_t **)(v30 + 16);
    uint64_t v9 = *(void *)(v30 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169B19A0((uint64_t)v26, v11);
    sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v14, v15);
    v16 = *(uint64_t **)(v30 + 16);
    uint64_t v17 = *(void *)(v30 + 24) - (void)v16;
    if (v17)
    {
      unint64_t v18 = v17 >> 3;
      if (v18 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v18;
      }
      uint64_t v17 = 1;
      do
      {
        uint64_t v20 = *v16++;
        v17 *= v20;
        --v19;
      }
      while (v19);
    }
    sub_21680F908(*(std::string **)v30, (std::string *)(*(void *)v30 + 24 * v17), v27);
    long long v23 = v26[0];
    long long v24 = v26[1];
    long long v25 = v27;
    if (v27)
    {
      p_size = (atomic_ullong *)&v27[-1].__r_.__value_.__l.__size_;
      if (*((void *)&v24 + 1)) {
        p_size = (atomic_ullong *)*((void *)&v24 + 1);
      }
      atomic_fetch_add_explicit(p_size, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712A818(a5, (uint64_t)&v23);
    sub_2169B1EE4(&v23);
    sub_2169B1EE4(v26);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v29);
  if (v31) {
    sub_216784EC4(v31);
  }
  return v13;
}

void sub_21712A7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_2169B1EE4(&a9);
  sub_2169B1EE4(&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712A818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  std::string v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C7779A0[v2])(&v5, a1);
}

uint64_t sub_21712A86C()
{
  return 1;
}

uint64_t sub_21712A874(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712A89C(long long ***a1, uint64_t *a2)
{
  return sub_21712A8AC(*a2, **a1);
}

BOOL sub_21712A8AC(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x800000021746967CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2169E0154(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712A92C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7779D8;
  return result;
}

void sub_21712A964(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7779D8;
}

void sub_21712A98C(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
}

uint64_t sub_21712A9B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7779B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712A9F0()
{
  return &unk_26C7779B8;
}

void sub_21712A9FC(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(unint64_t **)a1;
  }
  unint64_t v5 = *v4;
  BOOL v6 = !is_mul_ok(*v4, 0x18uLL);
  if (24 * *v4 >= 0xFFFFFFFFFFFFFFF0) {
    BOOL v6 = 1;
  }
  if (v6) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 24 * v5 + 16;
  }
  uint64_t v8 = operator new[](v7);
  void *v8 = 24;
  v8[1] = v5;
  uint64_t v9 = v8 + 2;
  if (v5)
  {
    bzero(v8 + 2, 24 * ((24 * v5 - 24) / 0x18) + 24);
    uint64_t v10 = 0;
    uint64_t v15 = v9;
    unint64_t v11 = v5;
    do
    {
      std::string::operator=((std::string *)&v9[v10], (const std::string *)(v4[4] + v10 * 8));
      v10 += 3;
      --v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v15 = v8 + 2;
  }
  *a2 = v5;
  uint64_t v12 = operator new(0x10uLL);
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  *uint64_t v12 = &unk_26C777A48;
  v12[1] = v13;
  sub_217122B64(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  uint64_t v14 = (uint64_t)v15;
  uint64_t v15 = 0;
  if (v14) {
    sub_21712AC1C((uint64_t)&v15, v14);
  }
}

void sub_21712AB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_21712AC1C((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21712AB64(void *a1)
{
  *a1 = &unk_26C777A48;
  uint64_t v4 = a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_21712AC1C((uint64_t)v2, v3);
  }
  return a1;
}

void sub_21712ABB4(void *__p)
{
  *__p = &unk_26C777A48;
  uint64_t v4 = __p[1];
  uint64_t v2 = __p + 1;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_21712AC1C((uint64_t)v2, v3);
  }

  operator delete(__p);
}

uint64_t sub_21712AC14(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_21712AC1C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)(a2 - 16);
    uint64_t v4 = *(void *)(a2 - 8);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      do
      {
        if (*(char *)(a2 + v5 - 1) < 0) {
          operator delete(*(void **)(a2 + v5 - 24));
        }
        v5 -= 24;
      }
      while (v5);
    }
    operator delete[](v3);
  }
}

void *sub_21712AC90(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 6;
  WORD2(v6) = 2;
  v9[0] = &unk_26C777A90;
  uint64_t v10 = v9;
  v7[0] = &unk_26C777B28;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 6;
  WORD2(v6) = 258;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C777B98;
  uint64_t v10 = v9;
  v7[0] = &unk_26C777C30;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712ADF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712AE28()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777A90;
  return result;
}

void sub_21712AE60(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777A90;
}

uint64_t sub_21712AE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712AEDC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712AE90(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777B08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712AED0()
{
  return &unk_26C777B08;
}

uint64_t sub_21712AEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[1] = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_21712AF98(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712AF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712AF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = &v5;
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v6 = &v4;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_26C777AF0[v2])(&v6, a1);
}

uint64_t sub_21712AFF0()
{
  return 1;
}

uint64_t sub_21712AFF8(uint64_t ***a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = ***a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *uint64_t v2 = v3;
  v2[1] = (char *)&off_26C755DE0 + 3;
  return 1;
}

BOOL sub_21712B05C(void ***a1, uint64_t *a2)
{
  return sub_21712B068(*a1, *a2);
}

BOOL sub_21712B068(void **a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x80000002174E4396 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  else {
    **(void **)(a2 + 8) = **a1;
  }
  return v4 == 0;
}

void *sub_21712B0E0()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777B28;
  return result;
}

void sub_21712B118(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777B28;
}

void *sub_21712B140@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_21712B1B0(a1, a2);
}

uint64_t sub_21712B164(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777B08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712B1A4()
{
  return &unk_26C777B08;
}

void *sub_21712B1B0@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](8uLL);
  uint64_t v5 = a1[1];
  if ((v5 & 4) != 0) {
    a1 = (void *)(*(uint64_t (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  *int v4 = *a1;
  *a2 = 2;
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = &unk_26C776800;
  v6[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712B24C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712B26C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777B98;
  return result;
}

void sub_21712B2A4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777B98;
}

uint64_t sub_21712B2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712B320(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712B2D4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777C10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712B314()
{
  return &unk_26C777C10;
}

uint64_t sub_21712B320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    uint64_t v8 = *(uint64_t **)(v36 + 16);
    uint64_t v9 = *(void *)(v36 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169B94DC((uint64_t)v32, v11);
    sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    v16 = v33;
    uint64_t v17 = *(uint64_t **)(v36 + 16);
    uint64_t v18 = *(void *)(v36 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = *(uint64_t **)v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          uint64_t v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    uint64_t v31 = v16;
    if (v16)
    {
      long long v27 = v16 - 2;
      if (*((void *)&v30 + 1)) {
        long long v27 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712B4E0(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_21712B494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712B4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C777BF8[v2])(&v5, a1);
}

uint64_t sub_21712B534()
{
  return 1;
}

uint64_t sub_21712B53C(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712B564(long long ***a1, uint64_t *a2)
{
  return sub_21712B574(*a2, **a1);
}

BOOL sub_21712B574(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E52A0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C47800(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712B5F4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777C30;
  return result;
}

void sub_21712B62C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777C30;
}

void *sub_21712B654@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_21712B6C4(a1, a2);
}

uint64_t sub_21712B678(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777C10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712B6B8()
{
  return &unk_26C777C10;
}

void *sub_21712B6C4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 2 * *v4;
  if ((((unint64_t)*v4 >> 61) & 3) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 8 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (uint64_t *)v4[4];
    unint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C776800;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712B78C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712B7A0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 9;
  WORD2(v6) = 2;
  v9[0] = &unk_26C777CA0;
  unint64_t v10 = v9;
  v7[0] = &unk_26C777D38;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 9;
  WORD2(v6) = 258;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C777DF0;
  unint64_t v10 = v9;
  v7[0] = &unk_26C777E88;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712B908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712B938()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777CA0;
  return result;
}

void sub_21712B970(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777CA0;
}

uint64_t sub_21712B998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712B9EC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712B9A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777D18)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712B9E0()
{
  return &unk_26C777D18;
}

uint64_t sub_21712B9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_21712BA74(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712BA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712BA74(uint64_t a1, int a2)
{
  int v5 = a2;
  int v4 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v6 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_26C777D00[v2])(&v6, a1);
}

uint64_t sub_21712BAD0()
{
  return 1;
}

uint64_t sub_21712BAD8(int ***a1, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = ***a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = (char *)&off_26C74E2B0 + 3;
  *(_DWORD *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_21712BB40(_DWORD ***a1, uint64_t *a2)
{
  return sub_21712BB4C(*a1, *a2);
}

BOOL sub_21712BB4C(_DWORD **a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x80000002174E4366 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  else {
    **(_DWORD **)(a2 + 8) = **a1;
  }
  return v4 == 0;
}

void *sub_21712BBC4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777D38;
  return result;
}

void sub_21712BBFC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777D38;
}

void *sub_21712BC24@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_21712BC94(a1, a2);
}

uint64_t sub_21712BC48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777D18)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712BC88()
{
  return &unk_26C777D18;
}

void *sub_21712BC94@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](4uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  *int v4 = *(_DWORD *)a1;
  *a2 = 2;
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = &unk_26C777DA8;
  v6[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712BD30(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712BD48(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C777DA8;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_21712BD94(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C777DA8;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_21712BDF0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_21712BE00()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777DF0;
  return result;
}

void sub_21712BE38(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777DF0;
}

uint64_t sub_21712BE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712BEB4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712BE68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777E68)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712BEA8()
{
  return &unk_26C777E68;
}

uint64_t sub_21712BEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    uint64_t v8 = (uint64_t *)v36[2];
    uint64_t v9 = (char *)v36[3] - (char *)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168FB500((uint64_t)v32, v11);
    sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    v16 = v33;
    uint64_t v17 = (uint64_t *)v36[2];
    uint64_t v18 = (char *)v36[3] - (char *)v17;
    if (v18)
    {
      uint64_t v19 = *v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          int v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    uint64_t v31 = v16;
    if (v16)
    {
      long long v27 = (atomic_ullong *)(v16 - 4);
      if (*((void *)&v30 + 1)) {
        long long v27 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712C074(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_21712C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712C074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C777E50[v2])(&v5, a1);
}

uint64_t sub_21712C0C8()
{
  return 1;
}

uint64_t sub_21712C0D0(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712C0F8(long long ***a1, uint64_t *a2)
{
  return sub_21712C108(*a2, **a1);
}

BOOL sub_21712C108(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E52DCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C47BF8(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712C188()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777E88;
  return result;
}

void sub_21712C1C0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777E88;
}

void *sub_21712C1E8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_21712C258(a1, a2);
}

uint64_t sub_21712C20C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777E68)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712C24C()
{
  return &unk_26C777E68;
}

void *sub_21712C258@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 2 * *v4;
  if ((*v4 & 0x4000000000000000) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 4 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (int *)v4[4];
    unint64_t v11 = v8;
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777DA8;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712C31C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712C330(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 11;
  WORD2(v6) = 2;
  v9[0] = &unk_26C777EF8;
  unint64_t v10 = v9;
  v7[0] = &unk_26C777F90;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 11;
  WORD2(v6) = 258;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778000;
  unint64_t v10 = v9;
  v7[0] = &unk_26C778098;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712C4C8()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777EF8;
  return result;
}

void sub_21712C500(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777EF8;
}

uint64_t sub_21712C528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712C57C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712C530(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777F70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712C570()
{
  return &unk_26C777F70;
}

uint64_t sub_21712C57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11[2] = *(double *)MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_21712C638(a5, v11[0], v11[1]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712C618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712C638(uint64_t a1, double a2, double a3)
{
  *(double *)uint64_t v6 = a2;
  *(double *)&v6[1] = a3;
  uint64_t v5 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  uint64_t v7 = &v5;
  return ((uint64_t (*)(void **, uint64_t))off_26C777F58[v3])(&v7, a1);
}

uint64_t sub_21712C690()
{
  return 1;
}

uint64_t sub_21712C698(_OWORD ***a1, unsigned int ***a2)
{
  return 1;
}

BOOL sub_21712C6C4(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else {
    *(_OWORD *)*(void *)(v3 + 8) = ***a1;
  }
  return v4 == 0;
}

void *sub_21712C740()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C777F90;
  return result;
}

void sub_21712C778(uint64_t a1, void *a2)
{
  *a2 = &unk_26C777F90;
}

void *sub_21712C7A0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_21712C810(a1, a2);
}

uint64_t sub_21712C7C4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C777F70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712C804()
{
  return &unk_26C777F70;
}

void *sub_21712C810@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x10uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *(_OWORD **)a1;
  }
  *int v4 = *v6;
  *a2 = 2;
  uint64_t v7 = operator new(0x10uLL);
  *uint64_t v7 = &unk_26C7777A8;
  v7[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712C8AC(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712C8CC()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778000;
  return result;
}

void sub_21712C904(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778000;
}

uint64_t sub_21712C92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712C980(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712C934(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778078)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712C974()
{
  return &unk_26C778078;
}

uint64_t sub_21712C980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    uint64_t v8 = (uint64_t *)v36[2];
    uint64_t v9 = (char *)v36[3] - (char *)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168FC144((uint64_t)v32, v11);
    sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    v16 = v33;
    uint64_t v17 = (uint64_t *)v36[2];
    uint64_t v18 = (char *)v36[3] - (char *)v17;
    if (v18)
    {
      uint64_t v19 = *v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          long long v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    uint64_t v31 = v16;
    if (v16)
    {
      long long v27 = (atomic_ullong *)(v16 - 1);
      if (*((void *)&v30 + 1)) {
        long long v27 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712CB40(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_21712CAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712CB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C778060[v2])(&v5, a1);
}

uint64_t sub_21712CB94()
{
  return 1;
}

uint64_t sub_21712CB9C(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712CBC4(long long ***a1, uint64_t *a2)
{
  return sub_21712CBD4(*a2, **a1);
}

BOOL sub_21712CBD4(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E5264 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C48340(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712CC54()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778098;
  return result;
}

void sub_21712CC8C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778098;
}

void *sub_21712CCB4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_21712CD24(a1, a2);
}

uint64_t sub_21712CCD8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778078)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712CD18()
{
  return &unk_26C778078;
}

void *sub_21712CD24@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 2 * *v4;
  if ((((unint64_t)*v4 >> 60) & 7) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 16 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (long long *)v4[4];
    unint64_t v11 = v8;
    do
    {
      long long v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C7777A8;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712CDEC(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712CE00(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 6;
  WORD2(v6) = 3;
  v9[0] = &unk_26C778108;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7781A0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 6;
  WORD2(v6) = 259;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778210;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7782A8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712CF98()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778108;
  return result;
}

void sub_21712CFD0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778108;
}

uint64_t sub_21712CFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712D04C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712D000(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778180)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712D040()
{
  return &unk_26C778180;
}

uint64_t sub_21712D04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_21712D10C(a5, v11, v12);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712D10C(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = a3;
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  uint64_t v8 = &v5;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_26C778168[v3])(&v8, a1);
}

uint64_t sub_21712D168()
{
  return 1;
}

uint64_t sub_21712D170(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712D19C(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E4456 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else
  {
    uint64_t v5 = **a1;
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t v7 = *v5;
    *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
    *(void *)uint64_t v6 = v7;
  }
  return v4 == 0;
}

void *sub_21712D220()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7781A0;
  return result;
}

void sub_21712D258(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7781A0;
}

void *sub_21712D280@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  return sub_21712D2F0(a1, a2);
}

uint64_t sub_21712D2A4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778180)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712D2E4()
{
  return &unk_26C778180;
}

void *sub_21712D2F0@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0xCuLL);
  uint64_t v5 = a1[1];
  if ((v5 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = *(void *)v6;
  v4[2] = *(_DWORD *)(v6 + 8);
  *(void *)int v4 = v7;
  *a2 = 3;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = &unk_26C776800;
  v8[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712D394(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712D3B4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778210;
  return result;
}

void sub_21712D3EC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778210;
}

uint64_t sub_21712D414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712D468(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712D41C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778288)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712D45C()
{
  return &unk_26C778288;
}

uint64_t sub_21712D468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v37 = 0;
  v38 = 0;
  LODWORD(v33[0]) = 0;
  DWORD2(v33[0]) = 0;
  v35[0] = 0;
  v35[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v36, a2, a3, v33, v35);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v37, a4);
  if (v37)
  {
    uint64_t v8 = (uint64_t *)v37[2];
    uint64_t v9 = v37[3] - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169BB3AC((uint64_t)v33, v11);
    sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v33, v14, v15);
    uint64_t v16 = v34;
    uint64_t v17 = (uint64_t *)v37[2];
    uint64_t v18 = v37[3] - (void)v17;
    if (v18)
    {
      uint64_t v19 = *v37;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        long long v26 = (_DWORD *)(v34 + 8);
        do
        {
          int v27 = *(_DWORD *)(v19 + 8);
          *((void *)v26 - 1) = *(void *)v19;
          _DWORD *v26 = v27;
          v26 += 3;
          v19 += 12;
          --v25;
        }
        while (v25);
        uint64_t v16 = v34;
      }
    }
    long long v30 = v33[0];
    long long v31 = v33[1];
    uint64_t v32 = v16;
    if (v16)
    {
      long long v28 = (atomic_ullong *)(v16 - 16);
      if (*((void *)&v31 + 1)) {
        long long v28 = (atomic_ullong *)*((void *)&v31 + 1);
      }
      atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712D638(a5, (uint64_t)&v30);
    sub_2168F83DC((uint64_t)&v30);
    sub_2168F83DC((uint64_t)v33);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v36);
  if (v38) {
    sub_216784EC4(v38);
  }
  return v13;
}

void sub_21712D5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712D638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C778270[v2])(&v5, a1);
}

uint64_t sub_21712D68C()
{
  return 1;
}

uint64_t sub_21712D694(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712D6BC(long long ***a1, uint64_t *a2)
{
  return sub_21712D6CC(*a2, **a1);
}

BOOL sub_21712D6CC(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x8000000217456E68 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C48754(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712D74C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7782A8;
  return result;
}

void sub_21712D784(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7782A8;
}

void *sub_21712D7AC@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  return sub_21712D81C(a1, a2);
}

uint64_t sub_21712D7D0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778288)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712D810()
{
  return &unk_26C778288;
}

void *sub_21712D81C@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = 3 * *v4;
  if (v6 >> 62) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 12 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (uint64_t *)v4[4];
    unint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v10;
      uint64_t v11[2] = *((_DWORD *)v10 + 2);
      *(void *)unint64_t v11 = v12;
      v11 += 3;
      unint64_t v10 = (uint64_t *)((char *)v10 + 12);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C776800;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712D8F0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712D904(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 6;
  WORD2(v6) = 4;
  v9[0] = &unk_26C778318;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7783B0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 6;
  WORD2(v6) = 260;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778420;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7784B8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712DA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712DA9C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778318;
  return result;
}

void sub_21712DAD4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778318;
}

uint64_t sub_21712DAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712DB50(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712DB04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778390)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712DB44()
{
  return &unk_26C778390;
}

uint64_t sub_21712DB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11[2] = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_21712DC0C(a5, v11[0], v11[1]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712DC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v5 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  uint64_t v7 = &v5;
  return ((uint64_t (*)(void **, uint64_t))off_26C778378[v3])(&v7, a1);
}

uint64_t sub_21712DC68()
{
  return 1;
}

uint64_t sub_21712DC70(_OWORD ***a1, unsigned int ***a2)
{
  return 1;
}

BOOL sub_21712DC9C(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E4516 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else {
    *(_OWORD *)*(void *)(v3 + 8) = ***a1;
  }
  return v4 == 0;
}

void *sub_21712DD18()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7783B0;
  return result;
}

void sub_21712DD50(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7783B0;
}

void *sub_21712DD78@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_21712DDE8(a1, a2);
}

uint64_t sub_21712DD9C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778390)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712DDDC()
{
  return &unk_26C778390;
}

void *sub_21712DDE8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x10uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *(_OWORD **)a1;
  }
  *int v4 = *v6;
  *a2 = 4;
  uint64_t v7 = operator new(0x10uLL);
  *uint64_t v7 = &unk_26C776800;
  v7[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712DE84(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712DEA4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778420;
  return result;
}

void sub_21712DEDC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778420;
}

uint64_t sub_21712DF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712DF58(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712DF0C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778498)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712DF4C()
{
  return &unk_26C778498;
}

uint64_t sub_21712DF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    uint64_t v8 = (uint64_t *)v36[2];
    uint64_t v9 = (char *)v36[3] - (char *)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169BD4D8((uint64_t)v32, v11);
    sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    uint64_t v16 = v33;
    uint64_t v17 = (uint64_t *)v36[2];
    uint64_t v18 = (char *)v36[3] - (char *)v17;
    if (v18)
    {
      uint64_t v19 = *v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          long long v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        uint64_t v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    long long v31 = v16;
    if (v16)
    {
      int v27 = (atomic_ullong *)(v16 - 1);
      if (*((void *)&v30 + 1)) {
        int v27 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712E118(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_21712E0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712E118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C778480[v2])(&v5, a1);
}

uint64_t sub_21712E16C()
{
  return 1;
}

uint64_t sub_21712E174(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712E19C(long long ***a1, uint64_t *a2)
{
  return sub_21712E1AC(*a2, **a1);
}

BOOL sub_21712E1AC(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E5392 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C496C8(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712E22C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7784B8;
  return result;
}

void sub_21712E264(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7784B8;
}

void *sub_21712E28C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_21712E2FC(a1, a2);
}

uint64_t sub_21712E2B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778498)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712E2F0()
{
  return &unk_26C778498;
}

void *sub_21712E2FC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 60) & 3) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 16 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (long long *)v4[4];
    unint64_t v11 = v8;
    do
    {
      long long v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C776800;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712E3C4(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712E3D8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 9;
  WORD2(v6) = 4;
  v9[0] = &unk_26C778528;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7785C0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 9;
  WORD2(v6) = 260;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778630;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7786C8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712E540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712E570()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778528;
  return result;
}

void sub_21712E5A8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778528;
}

uint64_t sub_21712E5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712E624(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712E5D8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7785A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712E618()
{
  return &unk_26C7785A0;
}

uint64_t sub_21712E624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[1] = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_21712E6E0(a5, v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712E6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712E6E0(uint64_t a1, uint64_t a2)
{
  int v4 = &v5;
  uint64_t v5 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v6 = &v4;
  return ((uint64_t (*)(uint64_t ***, uint64_t))off_26C778588[v2])(&v6, a1);
}

uint64_t sub_21712E738()
{
  return 1;
}

uint64_t sub_21712E740(uint64_t ***a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = ***a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *uint64_t v2 = v3;
  v2[1] = (char *)&off_26C74E700 + 3;
  return 1;
}

BOOL sub_21712E7A4(void ***a1, uint64_t *a2)
{
  return sub_21712E7B0(*a1, *a2);
}

BOOL sub_21712E7B0(void **a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x80000002174E44E6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  else {
    **(void **)(a2 + 8) = **a1;
  }
  return v4 == 0;
}

void *sub_21712E828()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7785C0;
  return result;
}

void sub_21712E860(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7785C0;
}

void *sub_21712E888@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_21712E8F8(a1, a2);
}

uint64_t sub_21712E8AC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7785A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712E8EC()
{
  return &unk_26C7785A0;
}

void *sub_21712E8F8@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](8uLL);
  uint64_t v5 = a1[1];
  if ((v5 & 4) != 0) {
    a1 = (void *)(*(uint64_t (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  *int v4 = *a1;
  *a2 = 4;
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = &unk_26C777DA8;
  v6[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712E994(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712E9B4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778630;
  return result;
}

void sub_21712E9EC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778630;
}

uint64_t sub_21712EA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712EA68(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712EA1C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7786A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712EA5C()
{
  return &unk_26C7786A8;
}

uint64_t sub_21712EA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    uint64_t v8 = *(uint64_t **)(v36 + 16);
    uint64_t v9 = *(void *)(v36 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_216900518((uint64_t)v32, v11);
    sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    uint64_t v16 = v33;
    uint64_t v17 = *(uint64_t **)(v36 + 16);
    uint64_t v18 = *(void *)(v36 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = *(uint64_t **)v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          uint64_t v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        uint64_t v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    long long v31 = v16;
    if (v16)
    {
      int v27 = v16 - 2;
      if (*((void *)&v30 + 1)) {
        int v27 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712EC28(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_21712EBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712EC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C778690[v2])(&v5, a1);
}

uint64_t sub_21712EC7C()
{
  return 1;
}

uint64_t sub_21712EC84(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712ECAC(long long ***a1, uint64_t *a2)
{
  return sub_21712ECBC(*a2, **a1);
}

BOOL sub_21712ECBC(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E53CELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C49AC0(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712ED3C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7786C8;
  return result;
}

void sub_21712ED74(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7786C8;
}

void *sub_21712ED9C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_21712EE0C(a1, a2);
}

uint64_t sub_21712EDC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7786A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712EE00()
{
  return &unk_26C7786A8;
}

void *sub_21712EE0C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 4 * *v4;
  if ((*v4 & 0x2000000000000000) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 8 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (uint64_t *)v4[4];
    unint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777DA8;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712EED0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712EEE4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 10;
  WORD2(v6) = 4;
  v9[0] = &unk_26C778738;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7787D0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 10;
  WORD2(v6) = 260;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778840;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7788D8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712F04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712F07C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778738;
  return result;
}

void sub_21712F0B4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778738;
}

uint64_t sub_21712F0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712F130(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712F0E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7787B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712F124()
{
  return &unk_26C7787B0;
}

uint64_t sub_21712F130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_21712F1F0(a5, v11[0], v11[1], v11[2], v11[3]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712F1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712F1F0(uint64_t a1, float a2, float a3, float a4, float a5)
{
  *(float *)uint64_t v8 = a2;
  *(float *)&v8[1] = a3;
  *(float *)&v8[2] = a4;
  *(float *)&v8[3] = a5;
  uint64_t v7 = v8;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    sub_2168BBB60();
  }
  uint64_t v9 = &v7;
  return ((uint64_t (*)(void **, uint64_t))off_26C778798[v5])(&v9, a1);
}

uint64_t sub_21712F24C()
{
  return 1;
}

uint64_t sub_21712F254(_OWORD ***a1, unsigned int ***a2)
{
  return 1;
}

BOOL sub_21712F280(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else {
    *(_OWORD *)*(void *)(v3 + 8) = ***a1;
  }
  return v4 == 0;
}

void *sub_21712F2FC()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7787D0;
  return result;
}

void sub_21712F334(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7787D0;
}

void *sub_21712F35C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_21712F3CC(a1, a2);
}

uint64_t sub_21712F380(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7787B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712F3C0()
{
  return &unk_26C7787B0;
}

void *sub_21712F3CC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x10uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *(_OWORD **)a1;
  }
  *int v4 = *v6;
  *a2 = 4;
  uint64_t v7 = operator new(0x10uLL);
  *uint64_t v7 = &unk_26C777508;
  v7[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712F468(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712F488()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778840;
  return result;
}

void sub_21712F4C0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778840;
}

uint64_t sub_21712F4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712F53C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712F4F0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7788B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712F530()
{
  return &unk_26C7788B8;
}

uint64_t sub_21712F53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    uint64_t v8 = (uint64_t *)v36[2];
    uint64_t v9 = (char *)v36[3] - (char *)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168FF930((uint64_t)v32, v11);
    sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    uint64_t v16 = v33;
    uint64_t v17 = (uint64_t *)v36[2];
    uint64_t v18 = (char *)v36[3] - (char *)v17;
    if (v18)
    {
      uint64_t v19 = *v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          long long v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        uint64_t v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    long long v31 = v16;
    if (v16)
    {
      int v27 = (atomic_ullong *)(v16 - 1);
      if (*((void *)&v30 + 1)) {
        int v27 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_21712F6FC(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_21712F6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21712F6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C7788A0[v2])(&v5, a1);
}

uint64_t sub_21712F750()
{
  return 1;
}

uint64_t sub_21712F758(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712F780(long long ***a1, uint64_t *a2)
{
  return sub_21712F790(*a2, **a1);
}

BOOL sub_21712F790(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x8000000217456EDELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C49E68(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21712F810()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7788D8;
  return result;
}

void sub_21712F848(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7788D8;
}

void *sub_21712F870@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_21712F8E0(a1, a2);
}

uint64_t sub_21712F894(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7788B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712F8D4()
{
  return &unk_26C7788B8;
}

void *sub_21712F8E0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 60) & 3) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 16 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (long long *)v4[4];
    unint64_t v11 = v8;
    do
    {
      long long v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777508;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712F9A8(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712F9BC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 11;
  WORD2(v6) = 4;
  v9[0] = &unk_26C778948;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7789E0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 11;
  WORD2(v6) = 260;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778A50;
  unint64_t v10 = v9;
  v7[0] = &unk_26C778AE8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_21712FB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712FB54()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778948;
  return result;
}

void sub_21712FB8C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778948;
}

uint64_t sub_21712FBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712FC08(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712FBBC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7789C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712FBFC()
{
  return &unk_26C7789C0;
}

uint64_t sub_21712FC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v11[4] = *(double *)MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_21712FCC8(a5, v11[0], v11[1], v11[2], v11[3]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21712FCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21712FCC8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)uint64_t v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&v8[2] = a4;
  *(double *)&v8[3] = a5;
  uint64_t v7 = v8;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    sub_2168BBB60();
  }
  uint64_t v9 = &v7;
  return ((uint64_t (*)(void **, uint64_t))off_26C7789A8[v5])(&v9, a1);
}

uint64_t sub_21712FD24()
{
  return 1;
}

uint64_t sub_21712FD2C(_OWORD ***a1, void **a2)
{
  return 1;
}

BOOL sub_21712FD58(void **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else
  {
    uint64_t v5 = (_OWORD *)**a1;
    uint64_t v6 = *(_OWORD **)(v3 + 8);
    long long v7 = v5[1];
    _OWORD *v6 = *v5;
    v6[1] = v7;
  }
  return v4 == 0;
}

void *sub_21712FDD4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7789E0;
  return result;
}

void sub_21712FE0C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7789E0;
}

void *sub_21712FE34@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_21712FEA4(a1, a2);
}

uint64_t sub_21712FE58(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7789C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712FE98()
{
  return &unk_26C7789C0;
}

void *sub_21712FEA4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x20uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *(_OWORD **)a1;
  }
  long long v7 = v6[1];
  *int v4 = *v6;
  v4[1] = v7;
  *a2 = 4;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = &unk_26C7777A8;
  v8[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21712FF40(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21712FF60()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778A50;
  return result;
}

void sub_21712FF98(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778A50;
}

uint64_t sub_21712FFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217130014(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21712FFC8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778AC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217130008()
{
  return &unk_26C778AC8;
}

uint64_t sub_217130014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v38 = 0;
  v39 = 0;
  LODWORD(v34[0]) = 0;
  DWORD2(v34[0]) = 0;
  v36[0] = 0;
  v36[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v37, a2, a3, v34, v36);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v38, a4);
  if (v38)
  {
    uint64_t v8 = (uint64_t *)v38[2];
    uint64_t v9 = (char *)v38[3] - (char *)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_216901170((uint64_t)v34, v11);
    sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v34, v14, v15);
    uint64_t v16 = v35;
    uint64_t v17 = (uint64_t *)v38[2];
    uint64_t v18 = (char *)v38[3] - (char *)v17;
    if (v18)
    {
      uint64_t v19 = *v38;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        long long v26 = (_OWORD *)(v35 + 16);
        do
        {
          long long v27 = *v19;
          long long v28 = v19[1];
          v19 += 2;
          *(v26 - 1) = v27;
          _OWORD *v26 = v28;
          v26 += 2;
          --v25;
        }
        while (v25);
        uint64_t v16 = v35;
      }
    }
    long long v31 = v34[0];
    long long v32 = v34[1];
    uint64_t v33 = v16;
    if (v16)
    {
      long long v29 = (atomic_ullong *)(v16 - 16);
      if (*((void *)&v32 + 1)) {
        long long v29 = (atomic_ullong *)*((void *)&v32 + 1);
      }
      atomic_fetch_add_explicit(v29, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_2171301DC(a5, (uint64_t)&v31);
    sub_2168F83DC((uint64_t)&v31);
    sub_2168F83DC((uint64_t)v34);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v37);
  if (v39) {
    sub_216784EC4(v39);
  }
  return v13;
}

void sub_217130190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171301DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C778AB0[v2])(&v5, a1);
}

uint64_t sub_217130230()
{
  return 1;
}

uint64_t sub_217130238(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217130260(long long ***a1, uint64_t *a2)
{
  return sub_217130270(*a2, **a1);
}

BOOL sub_217130270(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E5356 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C4A210(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_2171302F0()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778AE8;
  return result;
}

void sub_217130328(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778AE8;
}

void *sub_217130350@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2171303C0(a1, a2);
}

uint64_t sub_217130374(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778AC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171303B4()
{
  return &unk_26C778AC8;
}

void *sub_2171303C0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 59) & 7) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 32 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (long long *)v4[4];
    unint64_t v11 = v8;
    do
    {
      long long v12 = *v10;
      long long v13 = v10[1];
      v10 += 2;
      *unint64_t v11 = v12;
      v11[1] = v13;
      v11 += 2;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v14 = operator new(0x10uLL);
  *uint64_t v14 = &unk_26C7777A8;
  v14[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v14);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217130488(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21713049C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 10;
  WORD2(v6) = 4;
  v9[0] = &unk_26C778B58;
  unint64_t v10 = v9;
  v7[0] = &unk_26C778BF0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 10;
  WORD2(v6) = 260;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778C60;
  unint64_t v10 = v9;
  v7[0] = &unk_26C778CF8;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217130604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217130634()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778B58;
  return result;
}

void sub_21713066C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778B58;
}

uint64_t sub_217130694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2171306E8(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21713069C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778BD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171306DC()
{
  return &unk_26C778BD0;
}

uint64_t sub_2171306E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_2171307A8(a5, v11[1], v11[2], v11[3], v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217130788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171307A8(uint64_t a1, float a2, float a3, float a4, float a5)
{
  *(float *)uint64_t v8 = a2;
  *(float *)&v8[1] = a3;
  *(float *)&v8[2] = a4;
  *(float *)&v8[3] = a5;
  uint64_t v7 = v8;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    sub_2168BBB60();
  }
  uint64_t v9 = &v7;
  return ((uint64_t (*)(void **, uint64_t))off_26C778BB8[v5])(&v9, a1);
}

uint64_t sub_217130804()
{
  return 1;
}

uint64_t sub_21713080C(_OWORD ***a1, unsigned int ***a2)
{
  return 1;
}

BOOL sub_217130838(_OWORD ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else {
    *(_OWORD *)*(void *)(v3 + 8) = ***a1;
  }
  return v4 == 0;
}

void *sub_2171308B4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778BF0;
  return result;
}

void sub_2171308EC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778BF0;
}

void *sub_217130914@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217130984(a1, a2);
}

uint64_t sub_217130938(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778BD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217130978()
{
  return &unk_26C778BD0;
}

void *sub_217130984@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x10uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (_DWORD *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *(_DWORD **)a1;
  }
  *int v4 = v6[3];
  v4[1] = *v6;
  v4[2] = v6[1];
  v4[3] = v6[2];
  *a2 = 4;
  uint64_t v7 = operator new(0x10uLL);
  *uint64_t v7 = &unk_26C777508;
  v7[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217130A38(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217130A58()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778C60;
  return result;
}

void sub_217130A90(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778C60;
}

uint64_t sub_217130AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217130B0C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217130AC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778CD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217130B00()
{
  return &unk_26C778CD8;
}

uint64_t sub_217130B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  _OWORD v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    uint64_t v8 = v36[2];
    uint64_t v9 = (char *)v36[3] - (char *)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = v8->i64[0];
        uint64_t v8 = (int8x16_t *)((char *)v8 + 8);
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_216903AC8((uint64_t)v32, v11);
    sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    uint64_t v16 = v33;
    uint64_t v17 = v36[2];
    uint64_t v18 = (char *)v36[3] - (char *)v17;
    if (v18)
    {
      uint64_t v19 = *v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = v17->i64[0];
        uint64_t v17 = (int8x16_t *)((char *)v17 + 8);
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          int8x16_t v26 = *v19++;
          *v16++ = vextq_s8(v26, v26, 4uLL);
          --v25;
        }
        while (v25);
        uint64_t v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    long long v31 = v16;
    if (v16)
    {
      i64 = v16[-1].i64;
      if (*((void *)&v30 + 1)) {
        i64 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(i64, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217130CD0(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_217130C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217130CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C778CC0[v2])(&v5, a1);
}

uint64_t sub_217130D24()
{
  return 1;
}

uint64_t sub_217130D2C(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217130D54(long long ***a1, uint64_t *a2)
{
  return sub_217130D64(*a2, **a1);
}

BOOL sub_217130D64(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174572AFLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C46FEC(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217130DE4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778CF8;
  return result;
}

void sub_217130E1C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778CF8;
}

void *sub_217130E44@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_217130EB4(a1, a2);
}

uint64_t sub_217130E68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778CD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217130EA8()
{
  return &unk_26C778CD8;
}

void *sub_217130EB4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 60) & 3) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 16 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (int *)(v4[4] + 8);
    unint64_t v11 = v8;
    do
    {
      *unint64_t v11 = v10[1];
      v11[1] = *(v10 - 2);
      uint64_t v11[2] = *(v10 - 1);
      int v12 = *v10;
      v10 += 4;
      uint64_t v11[3] = v12;
      v11 += 4;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777508;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217130F9C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217130FB0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 11;
  WORD2(v6) = 4;
  v9[0] = &unk_26C778D68;
  unint64_t v10 = v9;
  v7[0] = &unk_26C778E00;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 11;
  WORD2(v6) = 260;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C778E70;
  unint64_t v10 = v9;
  v7[0] = &unk_26C778F08;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217131118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217131148()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778D68;
  return result;
}

void sub_217131180(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778D68;
}

uint64_t sub_2171311A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2171311FC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171311B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778DE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171311F0()
{
  return &unk_26C778DE0;
}

uint64_t sub_2171311FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v11[4] = *(double *)MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_2171312BC(a5, v11[1], v11[2], v11[3], v11[0]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_21713129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171312BC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)uint64_t v8 = a2;
  *(double *)&v8[1] = a3;
  *(double *)&v8[2] = a4;
  *(double *)&v8[3] = a5;
  uint64_t v7 = v8;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    sub_2168BBB60();
  }
  uint64_t v9 = &v7;
  return ((uint64_t (*)(void **, uint64_t))off_26C778DC8[v5])(&v9, a1);
}

uint64_t sub_217131318()
{
  return 1;
}

uint64_t sub_217131320(_OWORD ***a1, void **a2)
{
  return 1;
}

BOOL sub_21713134C(void **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else
  {
    uint64_t v5 = (_OWORD *)**a1;
    uint64_t v6 = *(_OWORD **)(v3 + 8);
    long long v7 = v5[1];
    _OWORD *v6 = *v5;
    v6[1] = v7;
  }
  return v4 == 0;
}

void *sub_2171313C8()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778E00;
  return result;
}

void sub_217131400(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778E00;
}

void *sub_217131428@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217131498(a1, a2);
}

uint64_t sub_21713144C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778DE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21713148C()
{
  return &unk_26C778DE0;
}

void *sub_217131498@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x20uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *(void **)a1;
  }
  *int v4 = v6[3];
  v4[1] = *v6;
  v4[2] = v6[1];
  v4[3] = v6[2];
  *a2 = 4;
  long long v7 = operator new(0x10uLL);
  *long long v7 = &unk_26C7777A8;
  v7[1] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21713154C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_21713156C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778E70;
  return result;
}

void sub_2171315A4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778E70;
}

uint64_t sub_2171315CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217131620(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171315D4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778EE8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217131614()
{
  return &unk_26C778EE8;
}

uint64_t sub_217131620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v39 = 0;
  v40 = 0;
  LODWORD(v35[0]) = 0;
  DWORD2(v35[0]) = 0;
  v37[0] = 0;
  v37[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v38, a2, a3, v35, v37);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v39, a4);
  if (v39)
  {
    uint64_t v8 = v39[2];
    uint64_t v9 = (char *)v39[3] - (char *)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_216905300((uint64_t)v35, v11);
    sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v35, v14, v15);
    uint64_t v16 = v36;
    uint64_t v17 = v39[2];
    uint64_t v18 = (char *)v39[3] - (char *)v17;
    if (v18)
    {
      uint64_t v19 = *v39;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        int8x16_t v26 = (void *)(v36 + 24);
        do
        {
          uint64_t v27 = v19[3];
          uint64_t v28 = *v19;
          *(_OWORD *)(v26 - 3) = *(_OWORD *)(v19 + 1);
          *(v26 - 1) = v27;
          void *v26 = v28;
          v19 += 4;
          v26 += 4;
          --v25;
        }
        while (v25);
        uint64_t v16 = v36;
      }
    }
    long long v32 = v35[0];
    long long v33 = v35[1];
    uint64_t v34 = v16;
    if (v16)
    {
      long long v29 = (atomic_ullong *)*((void *)&v33 + 1);
      long long v30 = (atomic_ullong *)(v16 - 16);
      if (!*((void *)&v33 + 1)) {
        long long v29 = v30;
      }
      atomic_fetch_add_explicit(v29, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_2171317F8(a5, (uint64_t)&v32);
    sub_2168F83DC((uint64_t)&v32);
    sub_2168F83DC((uint64_t)v35);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v38);
  if (v40) {
    sub_216784EC4(v40);
  }
  return v13;
}

void sub_2171317AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171317F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C778ED0[v2])(&v5, a1);
}

uint64_t sub_21713184C()
{
  return 1;
}

uint64_t sub_217131854(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21713187C(long long ***a1, uint64_t *a2)
{
  return sub_21713188C(*a2, **a1);
}

BOOL sub_21713188C(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174572EALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C47408(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21713190C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778F08;
  return result;
}

void sub_217131944(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778F08;
}

void *sub_21713196C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2171319DC(a1, a2);
}

uint64_t sub_217131990(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778EE8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171319D0()
{
  return &unk_26C778EE8;
}

void *sub_2171319DC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 4 * *v4;
  if ((((unint64_t)*v4 >> 59) & 7) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 32 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (uint64_t *)(v4[4] + 16);
    unint64_t v11 = v8;
    do
    {
      *unint64_t v11 = v10[1];
      v11[1] = *(v10 - 2);
      uint64_t v11[2] = *(v10 - 1);
      uint64_t v12 = *v10;
      v10 += 4;
      uint64_t v11[3] = v12;
      v11 += 4;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C7777A8;
  v13[1] = v9;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217131AC4(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217131AD8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217131B84(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217131B84(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 2;
  WORD2(v6) = 1;
  v9[0] = &unk_26C778F78;
  unint64_t v10 = v9;
  v7[0] = &unk_26C778FF8;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 2;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C7790B0;
  unint64_t v10 = v9;
  v7[0] = &unk_26C779130;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217131CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217131D1C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778F78;
  return result;
}

void sub_217131D54(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778F78;
}

uint64_t sub_217131D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217131DD0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217131D84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778FD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217131DC4()
{
  return &unk_26C778FD8;
}

uint64_t sub_217131DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_217124BC4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217131E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

void *sub_217131E60()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C778FF8;
  return result;
}

void sub_217131E98(uint64_t a1, void *a2)
{
  *a2 = &unk_26C778FF8;
}

void *sub_217131EC0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217131F30(a1, a2);
}

uint64_t sub_217131EE4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C778FD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217131F24()
{
  return &unk_26C778FD8;
}

void *sub_217131F30@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  int v4 = *(_DWORD *)a1;
  *a2 = 1;
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &unk_26C779068;
  v5[8] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217131FBC(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217131FCC()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7790B0;
  return result;
}

void sub_217132004(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7790B0;
}

uint64_t sub_21713202C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217132080(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217132034(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779110)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217132074()
{
  return &unk_26C779110;
}

uint64_t sub_217132080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v31) = 0;
  DWORD2(v31) = 0;
  v34[0] = 0;
  _OWORD v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, &v31, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (!v36)
  {
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  uint64_t v8 = (uint64_t *)v36[2];
  uint64_t v9 = v36[3] - (void)v8;
  if (v9)
  {
    unint64_t v10 = v9 >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    unint64_t v11 = 1;
    do
    {
      uint64_t v12 = *v8++;
      v11 *= v12;
      --v10;
    }
    while (v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  sub_216907954((uint64_t)&v31, v11);
  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v31, v14, v15);
  uint64_t v16 = v33;
  uint64_t v17 = (uint64_t *)v36[2];
  uint64_t v18 = v36[3] - (void)v17;
  if (v18)
  {
    uint64_t v19 = *v36;
    unint64_t v20 = v18 >> 3;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    uint64_t v21 = 1;
    do
    {
      uint64_t v22 = v21;
      uint64_t v24 = *v17++;
      uint64_t v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      uint64_t v25 = 0;
      do
      {
        *(_DWORD *)(v16 + 4 * v25) = *(char *)(v19 + v25);
        ++v25;
      }
      while (v22 * v23 != v25);
      long long v28 = v31;
      long long v29 = v32;
      uint64_t v30 = v16;
      goto LABEL_20;
    }
  }
  long long v28 = v31;
  long long v29 = v32;
  uint64_t v30 = v33;
  if (v33)
  {
LABEL_20:
    int8x16_t v26 = (atomic_ullong *)(v16 - 16);
    if (*((void *)&v29 + 1)) {
      int8x16_t v26 = (atomic_ullong *)*((void *)&v29 + 1);
    }
    atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_2171250D4(a5, (uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v31);
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_21713220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

void *sub_217132260()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C779130;
  return result;
}

void sub_217132298(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779130;
}

void *sub_2171322C0@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  return sub_217132330(a1, a2);
}

uint64_t sub_2171322E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779110)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217132324()
{
  return &unk_26C779110;
}

void *sub_217132330@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (size_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(size_t **)a1;
  }
  size_t v5 = *v4;
  uint64_t v6 = operator new[](*v4);
  uint64_t v7 = v6;
  if (v5)
  {
    uint64_t v8 = (int *)v4[4];
    size_t v9 = v5;
    unint64_t v10 = v6;
    do
    {
      int v11 = *v8++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  uint64_t v12 = operator new(0x10uLL);
  *uint64_t v12 = &unk_26C7791A0;
  v12[1] = v7;
  result = sub_217122B64(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_2171323E4(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171323F8(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C7791A0;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217132444(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C7791A0;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_2171324A0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_2171324A8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  size_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217132554(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217132554(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 4;
  WORD2(v6) = 1;
  v9[0] = &unk_26C7791E8;
  unint64_t v10 = v9;
  v7[0] = &unk_26C779268;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 4;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C779320;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7793A0;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_2171326BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_2171326EC()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7791E8;
  return result;
}

void sub_217132724(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7791E8;
}

uint64_t sub_21713274C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2171327A0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217132754(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779248)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217132794()
{
  return &unk_26C779248;
}

uint64_t sub_2171327A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_217124BC4(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217132810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

void *sub_217132830()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C779268;
  return result;
}

void sub_217132868(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779268;
}

void *sub_217132890@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217132900(a1, a2);
}

uint64_t sub_2171328B4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779248)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171328F4()
{
  return &unk_26C779248;
}

void *sub_217132900@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  int v4 = *(_DWORD *)a1;
  *a2 = 1;
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &unk_26C7792D8;
  v5[4] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_21713298C(uint64_t a1)
{
  return a1 + 8;
}

void *sub_21713299C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C779320;
  return result;
}

void sub_2171329D4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779320;
}

uint64_t sub_2171329FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217132A50(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217132A04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779380)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217132A44()
{
  return &unk_26C779380;
}

uint64_t sub_217132A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v31) = 0;
  DWORD2(v31) = 0;
  v34[0] = 0;
  _OWORD v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, &v31, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (!v36)
  {
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  uint64_t v8 = (uint64_t *)v36[2];
  uint64_t v9 = v36[3] - (void)v8;
  if (v9)
  {
    unint64_t v10 = v9 >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    unint64_t v11 = 1;
    do
    {
      uint64_t v12 = *v8++;
      v11 *= v12;
      --v10;
    }
    while (v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  sub_216907954((uint64_t)&v31, v11);
  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v31, v14, v15);
  uint64_t v16 = v33;
  uint64_t v17 = (uint64_t *)v36[2];
  uint64_t v18 = v36[3] - (void)v17;
  if (v18)
  {
    uint64_t v19 = *v36;
    unint64_t v20 = v18 >> 3;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    uint64_t v21 = 1;
    do
    {
      uint64_t v22 = v21;
      uint64_t v24 = *v17++;
      uint64_t v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      uint64_t v25 = 0;
      do
      {
        *(_DWORD *)(v16 + 4 * v25) = *(__int16 *)(v19 + 2 * v25);
        ++v25;
      }
      while (v22 * v23 != v25);
      long long v28 = v31;
      long long v29 = v32;
      uint64_t v30 = v16;
      goto LABEL_20;
    }
  }
  long long v28 = v31;
  long long v29 = v32;
  uint64_t v30 = v33;
  if (v33)
  {
LABEL_20:
    int8x16_t v26 = (atomic_ullong *)(v16 - 16);
    if (*((void *)&v29 + 1)) {
      int8x16_t v26 = (atomic_ullong *)*((void *)&v29 + 1);
    }
    atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_2171250D4(a5, (uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v31);
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_217132BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

void *sub_217132C30()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7793A0;
  return result;
}

void sub_217132C68(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7793A0;
}

void *sub_217132C90@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_217132D00(a1, a2);
}

uint64_t sub_217132CB4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779380)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217132CF4()
{
  return &unk_26C779380;
}

void *sub_217132D00@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if (*v4 < 0) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 2 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (int *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      int v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C779410;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217132DBC(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217132DD0(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C779410;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217132E1C(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C779410;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217132E78(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217132E80(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217132F2C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217132F2C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 3;
  WORD2(v6) = 1;
  v9[0] = &unk_26C779458;
  uint64_t v10 = v9;
  v7[0] = &unk_26C7794D8;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 3;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C779590;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779610;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217133094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_2171330C4()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C779458;
  return result;
}

void sub_2171330FC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779458;
}

uint64_t sub_217133124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217133178(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21713312C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7794B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21713316C()
{
  return &unk_26C7794B8;
}

uint64_t sub_217133178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_2171257BC(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171331E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

void *sub_217133208()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7794D8;
  return result;
}

void sub_217133240(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7794D8;
}

void *sub_217133268@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_2171332D8(a1, a2);
}

uint64_t sub_21713328C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7794B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171332CC()
{
  return &unk_26C7794B8;
}

void *sub_2171332D8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  int v4 = *(_DWORD *)a1;
  *a2 = 1;
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &unk_26C779548;
  v5[4] = v4;
  result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217133364(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217133374()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C779590;
  return result;
}

void sub_2171333AC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779590;
}

uint64_t sub_2171333D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217133428(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171333DC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7795F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21713341C()
{
  return &unk_26C7795F0;
}

uint64_t sub_217133428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v31) = 0;
  DWORD2(v31) = 0;
  v34[0] = 0;
  _OWORD v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, &v31, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (!v36)
  {
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  uint64_t v8 = (uint64_t *)v36[2];
  uint64_t v9 = v36[3] - (void)v8;
  if (v9)
  {
    unint64_t v10 = v9 >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    unint64_t v11 = 1;
    do
    {
      uint64_t v12 = *v8++;
      v11 *= v12;
      --v10;
    }
    while (v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  sub_216906CDC((uint64_t)&v31, v11);
  sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v31, v14, v15);
  uint64_t v16 = v33;
  uint64_t v17 = (uint64_t *)v36[2];
  uint64_t v18 = v36[3] - (void)v17;
  if (v18)
  {
    uint64_t v19 = *v36;
    unint64_t v20 = v18 >> 3;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    uint64_t v21 = 1;
    do
    {
      uint64_t v22 = v21;
      uint64_t v24 = *v17++;
      uint64_t v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      uint64_t v25 = 0;
      do
      {
        *(_DWORD *)(v16 + 4 * v25) = *(unsigned __int16 *)(v19 + 2 * v25);
        ++v25;
      }
      while (v22 * v23 != v25);
      long long v28 = v31;
      long long v29 = v32;
      uint64_t v30 = v16;
      goto LABEL_20;
    }
  }
  long long v28 = v31;
  long long v29 = v32;
  uint64_t v30 = v33;
  if (v33)
  {
LABEL_20:
    int8x16_t v26 = (atomic_ullong *)(v16 - 16);
    if (*((void *)&v29 + 1)) {
      int8x16_t v26 = (atomic_ullong *)*((void *)&v29 + 1);
    }
    atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_217125CCC(a5, (uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v31);
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_2171335B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

void *sub_217133608()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C779610;
  return result;
}

void sub_217133640(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779610;
}

void *sub_217133668@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2171336D8(a1, a2);
}

uint64_t sub_21713368C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7795F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171336CC()
{
  return &unk_26C7795F0;
}

void *sub_2171336D8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  if (*v4 < 0) {
    size_t v6 = -1;
  }
  else {
    size_t v6 = 2 * *v4;
  }
  uint64_t v7 = operator new[](v6);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = (int *)v4[4];
    uint64_t v10 = v5;
    unint64_t v11 = v7;
    do
    {
      int v12 = *v9++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C779680;
  v13[1] = v8;
  result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217133794(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171337A8(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C779680;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_2171337F4(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  *__p = &unk_26C779680;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217133850(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217133858(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2C0, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  result = sub_217133904(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217133904(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 12;
  WORD2(v6) = 1;
  v9[0] = &unk_26C7796C8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779748;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 12;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C7797B8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779850;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217133A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217133A9C()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7796C8;
  return result;
}

void sub_217133AD4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7796C8;
}

uint64_t sub_217133AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217133B50(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217133B04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779728)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217133B44()
{
  return &unk_26C779728;
}

uint64_t sub_217133B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  v10[0] = 0;
  v10[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v11, a2, a3, v10);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v11, (uint64_t)v12, a4, 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9);
  uint64_t v7 = sub_2170F9F98(a5, (uint64_t)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v11);
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  return v7;
}

void sub_217133C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  if (*(char *)(v5 - 25) < 0) {
    operator delete(*(void **)(v5 - 48));
  }
  _Unwind_Resume(a1);
}

void *sub_217133C80()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C779748;
  return result;
}

void sub_217133CB8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779748;
}

void sub_217133CE0(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X1>, void *a2@<X8>)
{
  sub_217133D50((pxrInternal__aapl__pxrReserved__::TfToken *)&v2, a1, a2);
}

uint64_t sub_217133D04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779728)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217133D44()
{
  return &unk_26C779728;
}

void sub_217133D50(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  memset(&v6, 0, sizeof(v6));
  uint64_t v4 = *((void *)a2 + 1);
  if ((v4 & 4) != 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    a2 = a1;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  std::string::operator=(&v6, EmptyString);
  sub_21712A41C(a3, (long long *)&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_217133DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217133E08()
{
  result = operator new(0x10uLL);
  void *result = &unk_26C7797B8;
  return result;
}

void sub_217133E40(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7797B8;
}

uint64_t sub_217133E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217133EBC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217133E70(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217133EB0()
{
  return &unk_26C779830;
}

uint64_t sub_217133EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = 0;
  long long v31 = 0;
  LODWORD(v26[0]) = 0;
  DWORD2(v26[0]) = 0;
  v28[0] = 0;
  v28[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v29, a2, a3, v26, v28);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v30, a4);
  if (v30)
  {
    uint64_t v8 = (uint64_t *)v30[2];
    uint64_t v9 = v30[3] - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169B28F8((uint64_t)v26, v11);
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v14, v15);
    uint64_t v16 = (uint64_t *)v30[2];
    uint64_t v17 = v30[3] - (void)v16;
    if (v17)
    {
      unint64_t v18 = v17 >> 3;
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      uint64_t v19 = 1;
      do
      {
        uint64_t v20 = *v16++;
        v19 *= v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    sub_217134070((uint64_t)v28, v27, *v30, v19);
    long long v23 = v26[0];
    long long v24 = v26[1];
    uint64_t v25 = v27;
    if (v27)
    {
      uint64_t v21 = v27 - 2;
      if (*((void *)&v24 + 1)) {
        uint64_t v21 = (atomic_ullong *)*((void *)&v24 + 1);
      }
      atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217134120(a5, (uint64_t)&v23);
    sub_2169B2E0C(&v23);
    sub_2169B2E0C(v26);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v29);
  if (v31) {
    sub_216784EC4(v31);
  }
  return v13;
}

void sub_217134024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_2169B2E0C(&a9);
  sub_2169B2E0C(&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217134070(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    do
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9);
      if (a2 == &v9)
      {
        uint64_t v8 = v9;
      }
      else
      {
        if ((*a2 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v8 = 0;
        *a2 = v9;
        uint64_t v9 = 0;
      }
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      a3 += 24;
      ++a2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_217134120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C779818[v2])(&v5, a1);
}

uint64_t sub_217134174()
{
  return 1;
}

uint64_t sub_21713417C(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_2171341A4(long long ***a1, uint64_t *a2)
{
  return sub_2171341B4(*a2, **a1);
}

BOOL sub_2171341B4(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174696ECLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2169E06EC(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217134234()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C779850;
  return result;
}

void sub_21713426C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779850;
}

void sub_217134294(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
}

uint64_t sub_2171342B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171342F8()
{
  return &unk_26C779830;
}

void sub_217134304(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(unint64_t **)a1;
  }
  unint64_t v5 = *v4;
  BOOL v6 = !is_mul_ok(*v4, 0x18uLL);
  if (24 * *v4 >= 0xFFFFFFFFFFFFFFF0) {
    BOOL v6 = 1;
  }
  if (v6) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 24 * v5 + 16;
  }
  uint64_t v8 = operator new[](v7);
  void *v8 = 24;
  v8[1] = v5;
  uint64_t v9 = (std::string *)(v8 + 2);
  if (v5)
  {
    bzero(v8 + 2, 24 * ((24 * v5 - 24) / 0x18) + 24);
    uint64_t v11 = 0;
    uint64_t v16 = v9;
    do
    {
      if ((*(void *)(v4[4] + 8 * v11) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (const std::string *)((*(void *)(v4[4] + 8 * v11) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
      }
      unint64_t v10 = std::string::operator=(v9++, EmptyString);
      ++v11;
    }
    while (v5 != v11);
  }
  else
  {
    uint64_t v16 = (std::string *)(v8 + 2);
  }
  *a2 = v5;
  uint64_t v13 = operator new(0x10uLL);
  uint64_t v14 = v16;
  uint64_t v16 = 0;
  *uint64_t v13 = &unk_26C777A48;
  v13[1] = v14;
  sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  uint64_t v15 = (uint64_t)v16;
  uint64_t v16 = 0;
  if (v15) {
    sub_21712AC1C((uint64_t)&v16, v15);
  }
}

void sub_217134460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_21712AC1C((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217134484(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 10;
  WORD2(v6) = 16;
  v9[0] = &unk_26C7798C0;
  unint64_t v10 = v9;
  v7[0] = &unk_26C779940;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 10;
  WORD2(v6) = 272;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C7799B0;
  unint64_t v10 = v9;
  v7[0] = &unk_26C779A48;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_2171345EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21713461C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C7798C0;
  return result;
}

void sub_217134654(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7798C0;
}

uint64_t sub_21713467C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2171346D0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217134684(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779920)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171346C4()
{
  return &unk_26C779920;
}

uint64_t sub_2171346D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v10[0] = 0;
  v10[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v11, a2, a3, v10);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v11, (uint64_t)v12, a4, 0);
  sub_2171347A4(v12, v9);
  uint64_t v7 = sub_2170FF3B8(a5, (uint64_t)v9);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v11);
  return v7;
}

void sub_217134784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

double sub_2171347A4@<D0>(float32x4_t *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v3 = (float64x2_t *)&v10[v2];
    float32x4_t v4 = *a1++;
    *uint64_t v3 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
    v3[1] = vcvt_hight_f64_f32(v4);
    v2 += 2;
  }
  while (v2 != 8);
  long long v5 = v10[1];
  *a2 = v10[0];
  a2[1] = v5;
  long long v6 = v10[3];
  a2[2] = v10[2];
  a2[3] = v6;
  long long v7 = v10[5];
  a2[4] = v10[4];
  a2[5] = v7;
  double result = *(double *)&v11;
  long long v9 = v12;
  a2[6] = v11;
  a2[7] = v9;
  return result;
}

void *sub_21713483C()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779940;
  return result;
}

void sub_217134874(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779940;
}

void *sub_21713489C@<X0>(float64x2_t **a1@<X1>, void *a2@<X8>)
{
  return sub_21713490C(a1, a2);
}

uint64_t sub_2171348C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779920)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217134900()
{
  return &unk_26C779920;
}

void *sub_21713490C@<X0>(float64x2_t **a1@<X1>, void *a2@<X8>)
{
  float32x4_t v4 = (char *)operator new[](0x40uLL);
  long long v5 = a1[1];
  if ((v5 & 4) != 0) {
    long long v6 = (float64x2_t *)(*(uint64_t (**)(float64x2_t **))(((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    long long v6 = *a1;
  }
  for (uint64_t i = 0; i != 64; i += 16)
  {
    float64x2_t v9 = *v6;
    float64x2_t v8 = v6[1];
    v6 += 2;
    *(float32x4_t *)&v4[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v8);
  }
  *a2 = 16;
  unint64_t v10 = operator new(0x10uLL);
  *unint64_t v10 = &unk_26C777508;
  v10[1] = v4;
  double result = sub_217122B64(a2 + 1, (uint64_t)v10);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_2171349C0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171349E0()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C7799B0;
  return result;
}

void sub_217134A18(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7799B0;
}

uint64_t sub_217134A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217134A94(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217134A48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779A28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217134A88()
{
  return &unk_26C779A28;
}

uint64_t sub_217134A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = 0;
  v40 = 0;
  LODWORD(v41[0]) = 0;
  DWORD2(v41[0]) = 0;
  LODWORD(v36[0]) = 0;
  DWORD2(v36[0]) = 0;
  Alembic::Abc::v12::IArrayProperty::IArrayProperty(v38, a2, a3, v41, v36);
  Alembic::Abc::v12::IArrayProperty::get((uint64_t)v38, (uint64_t)&v39, a4);
  if (v39)
  {
    long long v7 = *(uint64_t **)(v39 + 16);
    uint64_t v8 = *(void *)(v39 + 24) - (void)v7;
    if (v8)
    {
      unint64_t v9 = v8 >> 3;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    sub_2169020B0((uint64_t)v36, v10);
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36, v13, v14);
    uint64_t v15 = v37;
    uint64_t v16 = *(uint64_t **)(v39 + 16);
    uint64_t v17 = *(void *)(v39 + 24) - (void)v16;
    if (v17)
    {
      unint64_t v18 = *(float32x4_t **)v39;
      uint64_t v19 = v17 >> 3;
      if ((unint64_t)(v17 >> 3) <= 1) {
        uint64_t v19 = 1;
      }
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = v20;
        uint64_t v23 = *v16++;
        uint64_t v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        uint64_t v24 = v21 * v22;
        do
        {
          sub_2171347A4(v18, v41);
          long long v25 = v41[0];
          long long v26 = v41[1];
          long long v27 = v41[3];
          v15[2] = v41[2];
          v15[3] = v27;
          _OWORD *v15 = v25;
          v15[1] = v26;
          long long v28 = v41[4];
          long long v29 = v41[5];
          long long v30 = v41[7];
          v15[6] = v41[6];
          v15[7] = v30;
          v15[4] = v28;
          v15[5] = v29;
          v18 += 4;
          v15 += 8;
          --v24;
        }
        while (v24);
        uint64_t v15 = v37;
      }
    }
    long long v33 = v36[0];
    long long v34 = v36[1];
    uint64_t v35 = v15;
    if (v15)
    {
      long long v31 = (atomic_ullong *)*((void *)&v34 + 1);
      if (!*((void *)&v34 + 1)) {
        long long v31 = (atomic_ullong *)(v15 - 1);
      }
      atomic_fetch_add_explicit(v31, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = sub_217134C98(a5, (uint64_t)&v33);
    sub_2168F83DC((uint64_t)&v33);
    sub_2168F83DC((uint64_t)v36);
  }
  else
  {
    uint64_t v12 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v38);
  if (v40) {
    sub_216784EC4(v40);
  }
  return v12;
}

void sub_217134C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a27) {
    sub_216784EC4(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217134C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  long long v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C779A10[v2])(&v5, a1);
}

uint64_t sub_217134CEC()
{
  return 1;
}

uint64_t sub_217134CF4(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217134D1C(long long ***a1, uint64_t *a2)
{
  return sub_217134D2C(*a2, **a1);
}

BOOL sub_217134D2C(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E544ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C467D8(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217134DAC()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779A48;
  return result;
}

void sub_217134DE4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779A48;
}

void *sub_217134E0C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_217134E7C(a1, a2);
}

uint64_t sub_217134E30(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779A28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217134E70()
{
  return &unk_26C779A28;
}

void *sub_217134E7C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 16 * *v4;
  if ((((unint64_t)*v4 >> 58) & 3) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = *v4 << 6;
  }
  uint64_t v8 = (char *)operator new[](v7);
  unint64_t v9 = v8;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (float64x2_t *)v4[4];
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = v11;
      do
      {
        float64x2_t v16 = *v14;
        float64x2_t v15 = v14[1];
        v14 += 2;
        *(float32x4_t *)&v12[v13] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16), v15);
        v13 += 16;
      }
      while (v13 != 64);
      v12 += 64;
      ++v10;
      v11 += 8;
    }
    while (v10 != v5);
  }
  *a2 = v6;
  uint64_t v17 = operator new(0x10uLL);
  void *v17 = &unk_26C777508;
  v17[1] = v9;
  double result = sub_217122B64(a2 + 1, (uint64_t)v17);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217134F70(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217134F8C()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779AB8;
  return result;
}

void sub_217134FC4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779AB8;
}

uint64_t sub_217134FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217135040(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217134FF4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779B30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217135034()
{
  return &unk_26C779B30;
}

uint64_t sub_217135040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_2171350D0(a5, v11 | ((unint64_t)v12 << 16));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171350B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171350D0(uint64_t a1, uint64_t a2)
{
  int v5 = a2;
  __int16 v6 = WORD2(a2);
  int v4 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v7 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_26C779B18[v2])(&v7, a1);
}

uint64_t sub_217135134()
{
  return 1;
}

uint64_t sub_21713513C(unsigned int ***a1, void *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = ***a1 | ((unint64_t)*((unsigned __int16 *)**a1 + 2) << 32);
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = (char *)&off_26C74E4D8 + 3;
  *(_DWORD *)uint64_t v2 = v3;
  *(_WORD *)(v2 + 4) = WORD2(v3);
  return 1;
}

BOOL sub_2171351B8(int ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E4426 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else
  {
    BOOL v5 = **a1;
    uint64_t v6 = *(void *)(v3 + 8);
    int v7 = *v5;
    *(_WORD *)(v6 + 4) = *((_WORD *)v5 + 2);
    *(_DWORD *)uint64_t v6 = v7;
  }
  return v4 == 0;
}

void *sub_21713523C()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779B50;
  return result;
}

void sub_217135274(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779B50;
}

void *sub_21713529C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_21713530C(a1, a2);
}

uint64_t sub_2171352C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779B30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217135300()
{
  return &unk_26C779B30;
}

void *sub_21713530C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](6uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  int v6 = *(_DWORD *)a1;
  v4[2] = *(_WORD *)(a1 + 4);
  *(_DWORD *)int v4 = v6;
  *a2 = 3;
  int v7 = operator new(0x10uLL);
  *int v7 = &unk_26C777DA8;
  v7[1] = v4;
  double result = sub_217122B64(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_2171353B0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171353D0()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779BC0;
  return result;
}

void sub_217135408(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779BC0;
}

uint64_t sub_217135430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217135484(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217135438(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779C38)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217135478()
{
  return &unk_26C779C38;
}

uint64_t sub_217135484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v37 = 0;
  v38 = 0;
  LODWORD(v33[0]) = 0;
  DWORD2(v33[0]) = 0;
  v35[0] = 0;
  _OWORD v35[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v36, a2, a3, v33, v35);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v37, a4);
  if (v37)
  {
    uint64_t v8 = (char *)v37[2];
    uint64_t v9 = (char *)v37[3] - v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *(void *)v8;
        v8 += 8;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168FDCC0((uint64_t)v33, v11);
    sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v33, v14, v15);
    uint64_t v16 = v34;
    uint64_t v17 = (char *)v37[2];
    uint64_t v18 = (char *)v37[3] - v17;
    if (v18)
    {
      uint64_t v19 = *v37;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *(void *)v17;
        v17 += 8;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          int v26 = *(_DWORD *)(v19 + 1);
          int v27 = *v19 | (v26 << 16);
          *(_WORD *)(v16 + 4) = HIWORD(v26);
          *(_DWORD *)uint64_t v16 = v27;
          v16 += 6;
          v19 += 3;
          --v25;
        }
        while (v25);
        uint64_t v16 = v34;
      }
    }
    long long v30 = v33[0];
    long long v31 = v33[1];
    uint64_t v32 = v16;
    if (v16)
    {
      long long v28 = (atomic_ullong *)(v16 - 16);
      if (*((void *)&v31 + 1)) {
        long long v28 = (atomic_ullong *)*((void *)&v31 + 1);
      }
      atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217135658(a5, (uint64_t)&v30);
    sub_2168F83DC((uint64_t)&v30);
    sub_2168F83DC((uint64_t)v33);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v36);
  if (v38) {
    sub_216784EC4(v38);
  }
  return v13;
}

void sub_21713560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217135658(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C779C20[v2])(&v5, a1);
}

uint64_t sub_2171356AC()
{
  return 1;
}

uint64_t sub_2171356B4(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_2171356DC(long long ***a1, uint64_t *a2)
{
  return sub_2171356EC(*a2, **a1);
}

BOOL sub_2171356EC(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x8000000217456EA3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C48B64(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21713576C()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779C58;
  return result;
}

void sub_2171357A4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779C58;
}

void *sub_2171357CC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_21713583C(a1, a2);
}

uint64_t sub_2171357F0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779C38)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217135830()
{
  return &unk_26C779C38;
}

void *sub_21713583C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 3 * *v4;
  if (v6 < 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 6 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (int *)v4[4];
    unint64_t v11 = v8;
    do
    {
      int v12 = *v10;
      uint64_t v11[2] = *((_WORD *)v10 + 2);
      *(_DWORD *)unint64_t v11 = v12;
      v11 += 3;
      unint64_t v10 = (int *)((char *)v10 + 6);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777DA8;
  v13[1] = v9;
  double result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21713590C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217135928()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779CC8;
  return result;
}

void sub_217135960(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779CC8;
}

uint64_t sub_217135988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2171359DC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217135990(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779D40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171359D0()
{
  return &unk_26C779D40;
}

uint64_t sub_2171359DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_217135A9C(a5, v11[0], v11[1], v11[2]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217135A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217135A9C(uint64_t a1, float a2, float a3, float a4)
{
  *(float *)uint64_t v7 = a2;
  *(float *)&v7[1] = a3;
  *(float *)&v7[2] = a4;
  uint64_t v6 = v7;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == -1) {
    sub_2168BBB60();
  }
  uint64_t v8 = &v6;
  return ((uint64_t (*)(void **, uint64_t))off_26C779D28[v4])(&v8, a1);
}

uint64_t sub_217135AF8()
{
  return 1;
}

uint64_t sub_217135B00(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217135B2C(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else
  {
    uint64_t v5 = **a1;
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t v7 = *v5;
    *(_DWORD *)(v6 + 8) = *((_DWORD *)v5 + 2);
    *(void *)uint64_t v6 = v7;
  }
  return v4 == 0;
}

void *sub_217135BB0()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779D60;
  return result;
}

void sub_217135BE8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779D60;
}

void *sub_217135C10@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  return sub_217135C80(a1, a2);
}

uint64_t sub_217135C34(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779D40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217135C74()
{
  return &unk_26C779D40;
}

void *sub_217135C80@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0xCuLL);
  uint64_t v5 = a1[1];
  if ((v5 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = *(void *)v6;
  v4[2] = *(_DWORD *)(v6 + 8);
  *(void *)int v4 = v7;
  *a2 = 3;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = &unk_26C777508;
  v8[1] = v4;
  double result = sub_217122B64(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217135D24(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217135D44()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779DD0;
  return result;
}

void sub_217135D7C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779DD0;
}

uint64_t sub_217135DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217135DF8(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217135DAC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779E30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217135DEC()
{
  return &unk_26C779E30;
}

uint64_t sub_217135DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v37 = 0;
  v38 = 0;
  LODWORD(v33[0]) = 0;
  DWORD2(v33[0]) = 0;
  v35[0] = 0;
  _OWORD v35[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v36, a2, a3, v33, v35);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v37, a4);
  if (v37)
  {
    uint64_t v8 = (uint64_t *)v37[2];
    uint64_t v9 = v37[3] - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168FD0E8((uint64_t)v33, v11);
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v33, v14, v15);
    uint64_t v16 = v34;
    uint64_t v17 = (uint64_t *)v37[2];
    uint64_t v18 = v37[3] - (void)v17;
    if (v18)
    {
      unint64_t v19 = v18 >> 3;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = v20;
        uint64_t v23 = *v17++;
        uint64_t v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        uint64_t v24 = (_DWORD *)(*v37 + 8);
        uint64_t v25 = v21 * v22;
        int v26 = (_DWORD *)(v34 + 8);
        do
        {
          int v27 = *v24;
          *((void *)v26 - 1) = *((void *)v24 - 1);
          _DWORD *v26 = v27;
          v26 += 3;
          v24 += 3;
          --v25;
        }
        while (v25);
        uint64_t v16 = v34;
      }
    }
    long long v30 = v33[0];
    long long v31 = v33[1];
    uint64_t v32 = v16;
    if (v16)
    {
      long long v28 = (atomic_ullong *)(v16 - 16);
      if (*((void *)&v31 + 1)) {
        long long v28 = (atomic_ullong *)*((void *)&v31 + 1);
      }
      atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_2170F8108(a5, (uint64_t)&v30);
    sub_2168F83DC((uint64_t)&v30);
    sub_2168F83DC((uint64_t)v33);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v36);
  if (v38) {
    sub_216784EC4(v38);
  }
  return v13;
}

void sub_217135F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

void *sub_217135FD4()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779E50;
  return result;
}

void sub_21713600C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779E50;
}

void *sub_217136034@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  return sub_2171360A4(a1, a2);
}

uint64_t sub_217136058(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779E30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217136098()
{
  return &unk_26C779E30;
}

void *sub_2171360A4@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = 3 * *v4;
  if (v6 >> 62) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 12 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (uint64_t *)v4[4];
    unint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v10;
      uint64_t v11[2] = *((_DWORD *)v10 + 2);
      *(void *)unint64_t v11 = v12;
      v11 += 3;
      unint64_t v10 = (uint64_t *)((char *)v10 + 12);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777508;
  v13[1] = v9;
  double result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217136178(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217136194()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779EC0;
  return result;
}

void sub_2171361CC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779EC0;
}

uint64_t sub_2171361F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217136248(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171361FC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779F38)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21713623C()
{
  return &unk_26C779F38;
}

uint64_t sub_217136248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v11[3] = *(double *)MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_217136308(a5, v11[0], v11[1], v11[2]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171362E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217136308(uint64_t a1, double a2, double a3, double a4)
{
  *(double *)uint64_t v7 = a2;
  *(double *)&v7[1] = a3;
  *(double *)&v7[2] = a4;
  unint64_t v6 = v7;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == -1) {
    sub_2168BBB60();
  }
  uint64_t v8 = &v6;
  return ((uint64_t (*)(void **, uint64_t))off_26C779F20[v4])(&v8, a1);
}

uint64_t sub_217136364()
{
  return 1;
}

uint64_t sub_21713636C(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_217136398(long long ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else
  {
    uint64_t v5 = **a1;
    uint64_t v6 = *(void *)(v3 + 8);
    long long v7 = *v5;
    *(void *)(v6 + 16) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return v4 == 0;
}

void *sub_21713641C()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779F58;
  return result;
}

void sub_217136454(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779F58;
}

void *sub_21713647C@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  return sub_2171364EC(a1, a2);
}

uint64_t sub_2171364A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C779F38)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171364E0()
{
  return &unk_26C779F38;
}

void *sub_2171364EC@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x18uLL);
  uint64_t v5 = a1[1];
  if ((v5 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v6 = *a1;
  }
  long long v7 = *(_OWORD *)v6;
  v4[2] = *(void *)(v6 + 16);
  *(_OWORD *)int v4 = v7;
  *a2 = 3;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = &unk_26C7777A8;
  v8[1] = v4;
  double result = sub_217122B64(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217136590(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171365B0()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C779FC8;
  return result;
}

void sub_2171365E8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C779FC8;
}

uint64_t sub_217136610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217136664(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217136618(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A040)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217136658()
{
  return &unk_26C77A040;
}

uint64_t sub_217136664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v37 = 0;
  v38 = 0;
  LODWORD(v33[0]) = 0;
  DWORD2(v33[0]) = 0;
  v35[0] = 0;
  _OWORD v35[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v36, a2, a3, v33, v35);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v37, a4);
  if (v37)
  {
    uint64_t v8 = (uint64_t *)v37[2];
    uint64_t v9 = v37[3] - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168FE9F8((uint64_t)v33, v11);
    sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v33, v14, v15);
    uint64_t v16 = v34;
    uint64_t v17 = (uint64_t *)v37[2];
    uint64_t v18 = v37[3] - (void)v17;
    if (v18)
    {
      unint64_t v19 = v18 >> 3;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      uint64_t v20 = 1;
      do
      {
        uint64_t v21 = v20;
        uint64_t v23 = *v17++;
        uint64_t v22 = v23;
        v20 *= v23;
        --v19;
      }
      while (v19);
      if (v20)
      {
        uint64_t v24 = (void *)(*v37 + 16);
        uint64_t v25 = v21 * v22;
        int v26 = (void *)(v34 + 16);
        do
        {
          uint64_t v27 = *v24;
          *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
          void *v26 = v27;
          v26 += 3;
          v24 += 3;
          --v25;
        }
        while (v25);
        uint64_t v16 = v34;
      }
    }
    long long v30 = v33[0];
    long long v31 = v33[1];
    uint64_t v32 = v16;
    if (v16)
    {
      long long v28 = (atomic_ullong *)(v16 - 16);
      if (*((void *)&v31 + 1)) {
        long long v28 = (atomic_ullong *)*((void *)&v31 + 1);
      }
      atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217136838(a5, (uint64_t)&v30);
    sub_2168F83DC((uint64_t)&v30);
    sub_2168F83DC((uint64_t)v33);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v36);
  if (v38) {
    sub_216784EC4(v38);
  }
  return v13;
}

void sub_2171367EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217136838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C77A028[v2])(&v5, a1);
}

uint64_t sub_21713688C()
{
  return 1;
}

uint64_t sub_217136894(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_2171368BC(long long ***a1, uint64_t *a2)
{
  return sub_2171368CC(*a2, **a1);
}

BOOL sub_2171368CC(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x8000000217456F54 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C492C4(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21713694C()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C77A060;
  return result;
}

void sub_217136984(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A060;
}

void *sub_2171369AC@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  return sub_217136A1C(a1, a2);
}

uint64_t sub_2171369D0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A040)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217136A10()
{
  return &unk_26C77A040;
}

void *sub_217136A1C@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = 3 * *v4;
  if (v6 >> 61) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 24 * *v4;
  }
  uint64_t v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (long long *)v4[4];
    unint64_t v11 = v8;
    do
    {
      long long v12 = *v10;
      uint64_t v11[2] = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v11 = v12;
      v11 += 3;
      unint64_t v10 = (long long *)((char *)v10 + 24);
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C7777A8;
  v13[1] = v9;
  double result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217136AF0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217136B0C()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C77A0D0;
  return result;
}

void sub_217136B44(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A0D0;
}

uint64_t sub_217136B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217136BC0(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217136B74(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A130)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217136BB4()
{
  return &unk_26C77A130;
}

uint64_t sub_217136BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v10[0] = 0;
  v10[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v11, a2, a3, v10);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v11, (uint64_t)v12, a4, 0);
  v9[0] = v12[0];
  v9[1] = v12[1];
  v9[2] = v12[2];
  void v9[3] = v12[3];
  _DWORD v9[4] = v12[4];
  v9[5] = v12[5];
  v9[6] = v12[6];
  v9[7] = v12[7];
  uint64_t v7 = sub_2170FF3B8(a5, (uint64_t)v9);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v11);
  return v7;
}

void sub_217136C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void *sub_217136CAC()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C77A150;
  return result;
}

void sub_217136CE4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A150;
}

void *sub_217136D0C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_217136D7C(a1, a2);
}

uint64_t sub_217136D30(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A130)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217136D70()
{
  return &unk_26C77A130;
}

void *sub_217136D7C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](0x80uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 4) != 0) {
    unint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    unint64_t v6 = *(const void **)a1;
  }
  memmove(v4, v6, 0x80uLL);
  *a2 = 16;
  uint64_t v7 = operator new(0x10uLL);
  *uint64_t v7 = &unk_26C7777A8;
  v7[1] = v4;
  double result = sub_217122B64(a2 + 1, (uint64_t)v7);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217136E20(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217136E40()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26C77A1C0;
  return result;
}

void sub_217136E78(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A1C0;
}

uint64_t sub_217136EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217136EF4(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217136EA8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A220)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217136EE8()
{
  return &unk_26C77A220;
}

uint64_t sub_217136EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v30 = 0;
  long long v31 = 0;
  LODWORD(v26[0]) = 0;
  DWORD2(v26[0]) = 0;
  v28[0] = 0;
  v28[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v29, a2, a3, v26, v28);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v30, a4);
  if (v30)
  {
    uint64_t v8 = (uint64_t *)v30[2];
    uint64_t v9 = v30[3] - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2169020B0((uint64_t)v26, v11);
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v14, v15);
    uint64_t v16 = (uint64_t *)v30[2];
    uint64_t v17 = v30[3] - (void)v16;
    if (v17)
    {
      unint64_t v18 = v17 >> 3;
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      uint64_t v19 = 1;
      do
      {
        uint64_t v20 = *v16++;
        v19 *= v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    sub_2171370A8((uint64_t)v28, v27, *v30, v19);
    long long v23 = v26[0];
    long long v24 = v26[1];
    uint64_t v25 = v27;
    if (v27)
    {
      uint64_t v21 = (atomic_ullong *)(v27 - 16);
      if (*((void *)&v24 + 1)) {
        uint64_t v21 = (atomic_ullong *)*((void *)&v24 + 1);
      }
      atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217134C98(a5, (uint64_t)&v23);
    sub_2168F83DC((uint64_t)&v23);
    sub_2168F83DC((uint64_t)v26);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v29);
  if (v31) {
    sub_216784EC4(v31);
  }
  return v13;
}

void sub_21713705C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

__n128 sub_2171370A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    int v4 = (_OWORD *)(a2 + 64);
    do
    {
      __n128 result = *(__n128 *)a3;
      long long v6 = *(_OWORD *)(a3 + 16);
      long long v7 = *(_OWORD *)(a3 + 32);
      long long v8 = *(_OWORD *)(a3 + 48);
      long long v9 = *(_OWORD *)(a3 + 64);
      long long v10 = *(_OWORD *)(a3 + 80);
      long long v11 = *(_OWORD *)(a3 + 96);
      long long v12 = *(_OWORD *)(a3 + 112);
      *(v4 - 4) = *(_OWORD *)a3;
      *(v4 - 3) = v6;
      *(v4 - 2) = v7;
      *(v4 - 1) = v8;
      *int v4 = v9;
      v4[1] = v10;
      a3 += 128;
      v4[2] = v11;
      v4[3] = v12;
      v4 += 8;
      --a4;
    }
    while (a4);
  }
  return result;
}

void *sub_2171370EC()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C77A240;
  return result;
}

void sub_217137124(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A240;
}

void *sub_21713714C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_2171371BC(a1, a2);
}

uint64_t sub_217137170(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A220)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171371B0()
{
  return &unk_26C77A220;
}

void *sub_2171371BC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 16 * *v4;
  if ((((unint64_t)*v4 >> 57) & 7) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = *v4 << 7;
  }
  long long v8 = (char *)operator new[](v7);
  long long v9 = v8;
  if (v5)
  {
    long long v10 = (char *)v4[4];
    long long v11 = v8;
    do
    {
      memmove(v11, v10, 0x80uLL);
      v11 += 128;
      v10 += 128;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  long long v12 = operator new(0x10uLL);
  *long long v12 = &unk_26C7777A8;
  v12[1] = v9;
  __n128 result = sub_217122B64(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217137294(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171372B0()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C77A2B0;
  return result;
}

void sub_2171372E8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A2B0;
}

uint64_t sub_217137310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217137364(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217137318(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A310)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217137358()
{
  return &unk_26C77A310;
}

uint64_t sub_217137364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)v11, a4, 0);
  uint64_t v7 = sub_217119B14(a5, v11[0], v11[1]);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217137400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

void *sub_217137428()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C77A330;
  return result;
}

void sub_217137460(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A330;
}

void *sub_217137488@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_2171374F8(a1, a2);
}

uint64_t sub_2171374AC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A310)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171374EC()
{
  return &unk_26C77A310;
}

void *sub_2171374F8@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new[](8uLL);
  uint64_t v5 = a1[1];
  if ((v5 & 4) != 0) {
    a1 = (void *)(*(uint64_t (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  *int v4 = *a1;
  *a2 = 2;
  uint64_t v6 = operator new(0x10uLL);
  void *v6 = &unk_26C777508;
  v6[1] = v4;
  __n128 result = sub_217122B64(a2 + 1, (uint64_t)v6);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217137594(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2171375B4()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C77A3A0;
  return result;
}

void sub_2171375EC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A3A0;
}

uint64_t sub_217137614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217137668(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_21713761C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A418)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21713765C()
{
  return &unk_26C77A418;
}

uint64_t sub_217137668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  v37 = 0;
  LODWORD(v32[0]) = 0;
  DWORD2(v32[0]) = 0;
  v34[0] = 0;
  _OWORD v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, v32, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (v36)
  {
    long long v8 = *(uint64_t **)(v36 + 16);
    uint64_t v9 = *(void *)(v36 + 24) - (void)v8;
    if (v9)
    {
      unint64_t v10 = v9 >> 3;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = *v8++;
        v11 *= v12;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    sub_2168FA95C((uint64_t)v32, v11);
    sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v14, v15);
    uint64_t v16 = v33;
    uint64_t v17 = *(uint64_t **)(v36 + 16);
    uint64_t v18 = *(void *)(v36 + 24) - (void)v17;
    if (v18)
    {
      uint64_t v19 = *(uint64_t **)v36;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      uint64_t v21 = 1;
      do
      {
        uint64_t v22 = v21;
        uint64_t v24 = *v17++;
        uint64_t v23 = v24;
        v21 *= v24;
        --v20;
      }
      while (v20);
      if (v21)
      {
        uint64_t v25 = v22 * v23;
        do
        {
          uint64_t v26 = *v19++;
          *v16++ = v26;
          --v25;
        }
        while (v25);
        uint64_t v16 = v33;
      }
    }
    long long v29 = v32[0];
    long long v30 = v32[1];
    long long v31 = v16;
    if (v16)
    {
      uint64_t v27 = v16 - 2;
      if (*((void *)&v30 + 1)) {
        uint64_t v27 = (atomic_ullong *)*((void *)&v30 + 1);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = sub_217137828(a5, (uint64_t)&v29);
    sub_2168F83DC((uint64_t)&v29);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_2171377DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217137828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C77A400[v2])(&v5, a1);
}

uint64_t sub_21713787C()
{
  return 1;
}

uint64_t sub_217137884(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_2171378AC(long long ***a1, uint64_t *a2)
{
  return sub_2171378BC(*a2, **a1);
}

BOOL sub_2171378BC(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x8000000217456F19 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C47F9C(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_21713793C()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C77A438;
  return result;
}

void sub_217137974(uint64_t a1, void *a2)
{
  *a2 = &unk_26C77A438;
}

void *sub_21713799C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_217137A0C(a1, a2);
}

uint64_t sub_2171379C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A418)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217137A00()
{
  return &unk_26C77A418;
}

void *sub_217137A0C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(uint64_t **)a1;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = 2 * *v4;
  if ((((unint64_t)*v4 >> 61) & 3) != 0) {
    size_t v7 = -1;
  }
  else {
    size_t v7 = 8 * *v4;
  }
  long long v8 = operator new[](v7);
  uint64_t v9 = v8;
  if (v5)
  {
    unint64_t v10 = (uint64_t *)v4[4];
    unint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
      --v5;
    }
    while (v5);
  }
  *a2 = v6;
  uint64_t v13 = operator new(0x10uLL);
  *uint64_t v13 = &unk_26C777508;
  v13[1] = v9;
  __n128 result = sub_217122B64(a2 + 1, (uint64_t)v13);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217137AD4(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_217137AE8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::UsdAbc_AlembicDataWriter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *this)
{
  uint64_t v2 = (char *)operator new(0x88uLL);
  *(_OWORD *)uint64_t v2 = xmmword_2174B04C0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 2) = v2 + 24;
  *((void *)v2 + 4) = 0;
  *((_DWORD *)v2 + 10) = 2;
  sub_216779094((void *)v2 + 6, "");
  *((void *)v2 + 16) = 0;
  *((void *)v2 + 15) = 0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 13) = 0;
  *((void *)v2 + 14) = v2 + 120;
  *(void *)this = v2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_217137BC4(_Unwind_Exception *a1)
{
  sub_2168CB05C(v2, v1[3]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::~UsdAbc_AlembicDataWriter(void **this)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Close((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)this);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  uint64_t v2 = (uint64_t)*this;
  *this = 0;
  if (v2) {
    sub_2171599D4((uint64_t)this, v2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Close(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *this)
{
  uint64_t v1 = *(void *)this;
  int v3 = 2;
  sub_216779094(v4, "");
  v4[3] = 0;
  v4[4] = 0;
  sub_217137F00(v1, (uint64_t)&v3);
  Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)&v3);
  return 1;
}

void sub_217137C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Open(uint64_t a1, std::string *__str, uint64_t a3)
{
  if (*(char *)(a1 + 31) < 0)
  {
    **(unsigned char **)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 31) = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(__str, &v18);
  std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  if (!size
    || (pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)&v18, 0) & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::TfMakeDirs((uint64_t)&v18, 0xFFFFFFFFLL, 0) & 1) != 0)
  {
    uint64_t v7 = *(void *)a1;
    Alembic::AbcCoreOgawa::v12::WriteArchive::WriteArchive((Alembic::AbcCoreOgawa::v12::WriteArchive *)&v15);
    sub_216779094(__p, "UsdAbc_AlembicData");
    v12[0] = 0;
    v12[2] = 0;
    v11[0] = 0;
    float v11[2] = 0;
    sub_217159A70((long long *)__str, (uint64_t)__p, a3, v12, v11, (uint64_t)v16, 0.0);
    sub_217137F00(v7, (uint64_t)v16);
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)v16);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = 1;
  }
  else
  {
    v16[0] = "usdAbc/alembicWriter.cpp";
    v16[1] = "Open";
    v16[2] = 3738;
    v16[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Open(const std::string &, const std::string &)";
    char v17 = 0;
    unint64_t v10 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not create directory '%s'", (const char *)v10);
    uint64_t v8 = 0;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_217137E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_217137F00(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 8));
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  uint64_t v8 = *(void **)(a1 + 120);
  uint64_t v7 = (void *)(a1 + 120);
  sub_217138ABC((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *uint64_t v7 = 0;
  v7[1] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Write(uint64_t *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (*(char *)(*a1 + 71) < 0)
  {
    if (*(void *)(v4 + 56)) {
      return 1;
    }
  }
  else if (*(unsigned char *)(*a1 + 71))
  {
    return 1;
  }
  if (*(void *)(v4 + 72))
  {
    uint64_t v5 = sub_216AA03A8((void *)a2);
    if (v6 & 1 | (unint64_t)v5)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95ED0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B95ED0))
      {
        sub_217138B1C();
        __cxa_atexit((void (*)(void *))sub_21713A66C, &unk_267B95EA0, &dword_216758000);
        __cxa_guard_release(&qword_267B95ED0);
      }
      *(void *)(*a1 + 88) = &unk_267B95EA0;
      uint64_t v7 = *a1;
      *(void *)(v7 + 96) = *(void *)a2;
      sub_2168CD2FC((atomic_uint **)(v7 + 104), (atomic_uint **)(a2 + 8));
      char v17 = 0;
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216A5B4F4((uint64_t *)a2);
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v8);
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v10) {
        unint64_t v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 112))(v8, v9, (uint64_t)v10 + 440, &v16)&& sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0) {
          unint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        }
        else {
          unint64_t v11 = &v16;
        }
        *(void *)uint64_t v7 = *v11;
      }
      sub_2168EE084((uint64_t)&v16);
      uint64_t v12 = (void *)*a1;
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_217138964(&v16);
      char v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v13);
      sub_217138250(v12, &v16, v14);
      if (v17) {
        sub_216784EC4(v17);
      }
    }
  }
  return 1;
}

void sub_217138160(_Unwind_Exception *a1, int a2)
{
  __cxa_guard_abort(&qword_267B95ED0);
  if (a2 == 1)
  {
    uint64_t v5 = __cxa_begin_catch(a1);
    char v6 = (std::string *)(v2 + 8);
    uint64_t v7 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v5 + 16))(v5);
    std::string::append(v6, v7);
    std::string::append(v6, "\n");
    __cxa_end_catch();
    JUMPOUT(0x2171380C4);
  }
  _Unwind_Resume(a1);
}

void sub_217138250(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  v51[2] = *(void ***)MEMORY[0x263EF8340];
  char v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_217138964(&v38);
  if (*(void *)a3 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6))
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v7) {
      uint64_t v7 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    }
    uint64_t v8 = *((void *)v7 + 7);
    uint64_t v37 = v8;
    if ((v8 & 7) != 0)
    {
      uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v37 = (uint64_t)v9;
      }
    }
  }
  else
  {
    if (a1[13])
    {
      if (*(unsigned char *)(sub_216850B68(a1 + 13) + 14)) {
        uint64_t v10 = a1[12];
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v11) {
      unint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v10 + 136))(&v42, v10, a3, (uint64_t)v11 + 448);
    if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v42))
    {
      if ((v43 & 4) != 0) {
        uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(&v42);
      }
      else {
        uint64_t v12 = &v42;
      }
      uint64_t v13 = *v12;
      uint64_t v37 = v13;
      if ((v13 & 7) != 0)
      {
        char v14 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v37 = (uint64_t)v14;
        }
      }
      char v15 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      if (!v15) {
        char v15 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      }
      if ((v37 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, v51);
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v16) {
          uint64_t v16 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v51, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 1032), &v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v51 + 1);
        sub_21697C414(v51);
        if (a1[13])
        {
          if (*(unsigned char *)(sub_216850B68(a1 + 13) + 14)) {
            uint64_t v17 = a1[12];
          }
          else {
            uint64_t v17 = 0;
          }
        }
        else
        {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v18) {
          uint64_t v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        (*(void (**)(void ***__return_ptr, uint64_t, int *, uint64_t))(*(void *)v17 + 136))(v51, v17, &v40, (uint64_t)v18 + 88);
        sub_2168ED33C(&v42, v51);
        sub_2168EE084((uint64_t)v51);
        if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v42))
        {
          uint64_t v19 = (v43 & 4) != 0
              ? (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(uint64_t *))((v43 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(&v42)
              : (pxrInternal__aapl__pxrReserved__::TfToken *)&v42;
          if (pxrInternal__aapl__pxrReserved__::TfToken::operator==(v19, "none"))
          {
            unint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
            if (!v20) {
              unint64_t v20 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
            }
            sub_2168D2318(&v37, (void *)v20 + 6);
          }
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_21697C414(&v40);
      }
    }
    else
    {
      uint64_t v37 = 0;
    }
    sub_2168EE084((uint64_t)&v42);
  }
  sub_2171592E4(&v42, (uint64_t)a1, a2, a3);
  uint64_t v21 = a1[11];
  uint64_t v22 = sub_216A8E1C4(v21 + 24, &v37);
  uint64_t v23 = v22;
  if ((void *)(v21 + 32) == v22)
  {
    v51[0] = 0;
    uint64_t v25 = sub_216A8E1C4(v21 + 24, (uint64_t *)v51);
    if (((uint64_t)v51[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v51[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v23 == v25)
    {
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B95F80, memory_order_acquire))
      {
        uint64_t v24 = &qword_267B95F68;
      }
      else
      {
        uint64_t v24 = &qword_267B95F68;
        if (__cxa_guard_acquire(&qword_267B95F80))
        {
          qword_267B95F68 = 0;
          unk_267B95F70 = 0;
          qword_267B95F78 = 0;
          __cxa_atexit((void (*)(void *))sub_2171449A0, &qword_267B95F68, &dword_216758000);
          __cxa_guard_release(&qword_267B95F80);
        }
      }
    }
    else
    {
      uint64_t v24 = v25 + 5;
    }
  }
  else
  {
    uint64_t v24 = v22 + 5;
  }
  uint64_t v27 = *v24;
  for (uint64_t i = v24[1]; v27 != i; v27 += 32)
  {
    v51[0] = (void **)&v42;
    uint64_t v28 = *(void *)(v27 + 24);
    if (!v28) {
      sub_21683A7CC();
    }
    (*(void (**)(uint64_t, void ***))(*(void *)v28 + 48))(v28, v51);
  }
  uint64_t v30 = v43;
  long long v29 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = v39;
  uint64_t v38 = v30;
  uint64_t v39 = v29;
  if (v31) {
    sub_216784EC4(v31);
  }
  v51[0] = (void **)&v50;
  sub_216889A04(v51);
  sub_2167FB780((uint64_t)v49, v49[1]);
  if (v48 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
  sub_21697C414(&v45);
  if (v44) {
    sub_216784EC4(v44);
  }
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a1[13])
  {
    if (*(unsigned char *)(sub_216850B68(a1 + 13) + 14)) {
      uint64_t v32 = a1[12];
    }
    else {
      uint64_t v32 = 0;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  long long v33 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v33) {
    long long v33 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v32 + 136))(&v42, v32, a3, (uint64_t)v33 + 32);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v42))
  {
    uint64_t v34 = (v43 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(&v42) : v42;
    uint64_t v35 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v34;
    uint64_t v36 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v34 + 8);
    if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v34 != v36)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, v35, v51);
        sub_217138250(a1, &v38, v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v51 + 1);
        sub_21697C414(v51);
        uint64_t v35 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v35 + 8);
      }
      while (v35 != v36);
    }
  }
  sub_2168EE084((uint64_t)&v42);
  if (v39) {
    sub_216784EC4(v39);
  }
}

void sub_21713885C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168EE084((uint64_t)va);
  if (a4) {
    sub_216784EC4(a4);
  }
  _Unwind_Resume(a1);
}

void *sub_217138964(void *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  int v3 = operator new(0x38uLL);
  v3[2] = 2;
  sub_216779094((void *)v3 + 2, "");
  *(void *)int v3 = &unk_26C7495D0;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = 0;
  sub_217145B1C(&v7, (uint64_t)v3);
  uint64_t v5 = v7;
  uint64_t v4 = v8;
  *uint64_t v2 = &unk_26C77A520;
  v2[1] = v5;
  v2[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217145C2C(a1, (uint64_t)v2);
  if (v8) {
    sub_216784EC4(v8);
  }
  return a1;
}

void sub_217138A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::GetErrors@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[31] < 0) {
    return (char *)sub_216778F24((unsigned char *)a2, *((void **)this + 1), *((void *)this + 2));
  }
  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  *(void *)(a2 + 16) = *((void *)this + 3);
  return this;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::SetFlag(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  int v3 = (uint64_t **)(*(void *)this + 16);
  if (a3) {
    return sub_216AE2E60((uint64_t)v3, a2, (uint64_t *)a2);
  }
  else {
    return (uint64_t *)sub_21711C264(v3, a2);
  }
}

void sub_217138ABC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_217138ABC(a1, *a2);
    sub_217138ABC(a1, a2[1]);
    sub_2167FB780((uint64_t)(a2 + 4), (void *)a2[5]);
    operator delete(a2);
  }
}

void *sub_217138B1C()
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions::UsdAbc_AlembicConversions((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *)&unk_267B95EA0);
  qword_267B95EC0 = 0;
  qword_267B95EC8 = 0;
  qword_267B95EB8 = (uint64_t)&qword_267B95EC0;
  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v0) {
    v0 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v1 = *((void *)v0 + 8);
  unint64_t v33 = v1;
  if ((v1 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v33 = v1 & 0xFFFFFFFFFFFFFFF8;
    v1 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v40 = sub_21713A6AC((uint64_t *)&v33);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713A9FC;
  v57 = &v55;
  sub_21713A81C(&v40, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_21713ADB4;
  v54 = &v52;
  sub_21713A81C(&v40, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713B150;
  v51 = &v49;
  sub_21713A81C(&v40, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713B240;
  char v48 = &v46;
  sub_21713A81C(&v40, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713B330;
  int v45 = &v43;
  sub_21713A81C(&v40, (uint64_t)&v43);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v2) {
    uint64_t v2 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v3 = *((void *)v2 + 9);
  unint64_t v32 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v32 = v3 & 0xFFFFFFFFFFFFFFF8;
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v40 = sub_21713A6AC((uint64_t *)&v32);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713B4E4;
  v57 = &v55;
  sub_21713A81C(&v40, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_21713ADB4;
  v54 = &v52;
  sub_21713A81C(&v40, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713B150;
  v51 = &v49;
  sub_21713A81C(&v40, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713B240;
  char v48 = &v46;
  sub_21713A81C(&v40, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713B330;
  int v45 = &v43;
  sub_21713A81C(&v40, (uint64_t)&v43);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v4) {
    uint64_t v4 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v5 = *((void *)v4 + 3);
  unint64_t v30 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v30 = v5 & 0xFFFFFFFFFFFFFFF8;
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v31 = sub_21713A6AC((uint64_t *)&v30);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713BED8;
  v57 = &v55;
  sub_21713A81C(&v31, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_21713BF64;
  v54 = &v52;
  sub_21713A81C(&v31, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713DB4C;
  v51 = &v49;
  sub_21713A81C(&v31, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713E298;
  char v48 = &v46;
  sub_21713A81C(&v31, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713ADB4;
  int v45 = &v43;
  sub_21713A81C(&v31, (uint64_t)&v43);
  int v40 = (uint64_t *)&unk_26C77A5E0;
  int v41 = sub_21713B150;
  uint64_t v42 = &v40;
  sub_21713A81C(&v31, (uint64_t)&v40);
  uint64_t v37 = &unk_26C77A5E0;
  uint64_t v38 = sub_21713B240;
  uint64_t v39 = &v37;
  sub_21713A81C(&v31, (uint64_t)&v37);
  uint64_t v34 = &unk_26C77A5E0;
  uint64_t v35 = sub_21713B330;
  uint64_t v36 = &v34;
  sub_21713A81C(&v31, (uint64_t)&v34);
  sub_21713B460(&v34);
  sub_21713B460(&v37);
  sub_21713B460(&v40);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  char v6 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v6) {
    char v6 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v7 = *((void *)v6 + 6);
  unint64_t v29 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v29 = v7 & 0xFFFFFFFFFFFFFFF8;
    v7 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v31 = sub_21713A6AC((uint64_t *)&v29);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713BED8;
  v57 = &v55;
  sub_21713A81C(&v31, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_21713E39C;
  v54 = &v52;
  sub_21713A81C(&v31, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713DB4C;
  v51 = &v49;
  sub_21713A81C(&v31, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713E298;
  char v48 = &v46;
  sub_21713A81C(&v31, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713ADB4;
  int v45 = &v43;
  sub_21713A81C(&v31, (uint64_t)&v43);
  int v40 = (uint64_t *)&unk_26C77A5E0;
  int v41 = sub_21713B150;
  uint64_t v42 = &v40;
  sub_21713A81C(&v31, (uint64_t)&v40);
  uint64_t v37 = &unk_26C77A5E0;
  uint64_t v38 = sub_21713B240;
  uint64_t v39 = &v37;
  sub_21713A81C(&v31, (uint64_t)&v37);
  uint64_t v34 = &unk_26C77A5E0;
  uint64_t v35 = sub_21713B330;
  uint64_t v36 = &v34;
  sub_21713A81C(&v31, (uint64_t)&v34);
  sub_21713B460(&v34);
  sub_21713B460(&v37);
  sub_21713B460(&v40);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v8) {
    uint64_t v8 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v9 = *((void *)v8 + 4);
  unint64_t v28 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v28 = v9 & 0xFFFFFFFFFFFFFFF8;
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v31 = sub_21713A6AC((uint64_t *)&v28);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713BED8;
  v57 = &v55;
  sub_21713A81C(&v31, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_21713FA44;
  v54 = &v52;
  sub_21713A81C(&v31, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713DB4C;
  v51 = &v49;
  sub_21713A81C(&v31, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713E298;
  char v48 = &v46;
  sub_21713A81C(&v31, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713ADB4;
  int v45 = &v43;
  sub_21713A81C(&v31, (uint64_t)&v43);
  int v40 = (uint64_t *)&unk_26C77A5E0;
  int v41 = sub_21713B150;
  uint64_t v42 = &v40;
  sub_21713A81C(&v31, (uint64_t)&v40);
  uint64_t v37 = &unk_26C77A5E0;
  uint64_t v38 = sub_21713B240;
  uint64_t v39 = &v37;
  sub_21713A81C(&v31, (uint64_t)&v37);
  uint64_t v34 = &unk_26C77A5E0;
  uint64_t v35 = sub_21713B330;
  uint64_t v36 = &v34;
  sub_21713A81C(&v31, (uint64_t)&v34);
  sub_21713B460(&v34);
  sub_21713B460(&v37);
  sub_21713B460(&v40);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v10) {
    uint64_t v10 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v11 = *(void *)v10;
  unint64_t v27 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v27 = v11 & 0xFFFFFFFFFFFFFFF8;
    v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v31 = sub_21713A6AC((uint64_t *)&v27);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713BED8;
  v57 = &v55;
  sub_21713A81C(&v31, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_217140634;
  v54 = &v52;
  sub_21713A81C(&v31, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713DB4C;
  v51 = &v49;
  sub_21713A81C(&v31, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713E298;
  char v48 = &v46;
  sub_21713A81C(&v31, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713ADB4;
  int v45 = &v43;
  sub_21713A81C(&v31, (uint64_t)&v43);
  int v40 = (uint64_t *)&unk_26C77A5E0;
  int v41 = sub_21713B150;
  uint64_t v42 = &v40;
  sub_21713A81C(&v31, (uint64_t)&v40);
  uint64_t v37 = &unk_26C77A5E0;
  uint64_t v38 = sub_21713B240;
  uint64_t v39 = &v37;
  sub_21713A81C(&v31, (uint64_t)&v37);
  uint64_t v34 = &unk_26C77A5E0;
  uint64_t v35 = sub_21713B330;
  uint64_t v36 = &v34;
  sub_21713A81C(&v31, (uint64_t)&v34);
  sub_21713B460(&v34);
  sub_21713B460(&v37);
  sub_21713B460(&v40);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v12) {
    uint64_t v12 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v13 = *((void *)v12 + 2);
  unint64_t v26 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v26 = v13 & 0xFFFFFFFFFFFFFFF8;
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v31 = sub_21713A6AC((uint64_t *)&v26);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713BED8;
  v57 = &v55;
  sub_21713A81C(&v31, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_217141278;
  v54 = &v52;
  sub_21713A81C(&v31, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713DB4C;
  v51 = &v49;
  sub_21713A81C(&v31, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713E298;
  char v48 = &v46;
  sub_21713A81C(&v31, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713ADB4;
  int v45 = &v43;
  sub_21713A81C(&v31, (uint64_t)&v43);
  int v40 = (uint64_t *)&unk_26C77A5E0;
  int v41 = sub_21713B150;
  uint64_t v42 = &v40;
  sub_21713A81C(&v31, (uint64_t)&v40);
  uint64_t v37 = &unk_26C77A5E0;
  uint64_t v38 = sub_21713B240;
  uint64_t v39 = &v37;
  sub_21713A81C(&v31, (uint64_t)&v37);
  uint64_t v34 = &unk_26C77A5E0;
  uint64_t v35 = sub_21713B330;
  uint64_t v36 = &v34;
  sub_21713A81C(&v31, (uint64_t)&v34);
  sub_21713B460(&v34);
  sub_21713B460(&v37);
  sub_21713B460(&v40);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  char v14 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v14) {
    char v14 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v15 = *((void *)v14 + 5);
  unint64_t v25 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v25 = v15 & 0xFFFFFFFFFFFFFFF8;
    v15 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v31 = sub_21713A6AC((uint64_t *)&v25);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713BED8;
  v57 = &v55;
  sub_21713A81C(&v31, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_217141E60;
  v54 = &v52;
  sub_21713A81C(&v31, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713DB4C;
  v51 = &v49;
  sub_21713A81C(&v31, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713E298;
  char v48 = &v46;
  sub_21713A81C(&v31, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713ADB4;
  int v45 = &v43;
  sub_21713A81C(&v31, (uint64_t)&v43);
  int v40 = (uint64_t *)&unk_26C77A5E0;
  int v41 = sub_21713B150;
  uint64_t v42 = &v40;
  sub_21713A81C(&v31, (uint64_t)&v40);
  uint64_t v37 = &unk_26C77A5E0;
  uint64_t v38 = sub_21713B240;
  uint64_t v39 = &v37;
  sub_21713A81C(&v31, (uint64_t)&v37);
  uint64_t v34 = &unk_26C77A5E0;
  uint64_t v35 = sub_21713B330;
  uint64_t v36 = &v34;
  sub_21713A81C(&v31, (uint64_t)&v34);
  sub_21713B460(&v34);
  sub_21713B460(&v37);
  sub_21713B460(&v40);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v16) {
    uint64_t v16 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v17 = *((void *)v16 + 1);
  uint64_t v34 = (void *)v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    uint64_t v34 = (void *)(v17 & 0xFFFFFFFFFFFFFFF8);
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v40 = sub_21713A6AC((uint64_t *)&v34);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713BED8;
  v57 = &v55;
  sub_21713A81C(&v40, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = (uint64_t (*)())sub_217142EF8;
  v54 = &v52;
  sub_21713A81C(&v40, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713B150;
  v51 = &v49;
  sub_21713A81C(&v40, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713B240;
  char v48 = &v46;
  sub_21713A81C(&v40, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713B330;
  int v45 = &v43;
  sub_21713A81C(&v40, (uint64_t)&v43);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  sub_21713B460(&v55);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v18) {
    uint64_t v18 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v19 = *((void *)v18 + 10);
  long long v31 = (uint64_t *)v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    long long v31 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF8);
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  v52 = sub_21713A6AC((uint64_t *)&v31);
  v55 = &unk_26C77A5E0;
  v56 = sub_217143B00;
  v57 = &v55;
  sub_21713A81C(&v52, (uint64_t)&v55);
  sub_21713B460(&v55);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v20) {
    unint64_t v20 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  unint64_t v21 = *((void *)v20 + 7);
  unint64_t v24 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v24 = v21 & 0xFFFFFFFFFFFFFFF8;
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  v52 = sub_21713A6AC((uint64_t *)&v24);
  v55 = &unk_26C77A5E0;
  v56 = sub_217144350;
  v57 = &v55;
  sub_21713A81C(&v52, (uint64_t)&v55);
  sub_21713B460(&v55);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v52 = 0;
  uint64_t v23 = sub_21713A6AC((uint64_t *)&v52);
  v55 = &unk_26C77A5E0;
  v56 = sub_21713A9FC;
  v57 = &v55;
  sub_21713A81C(&v23, (uint64_t)&v55);
  v52 = (uint64_t *)&unk_26C77A5E0;
  v53 = nullsub_1445;
  v54 = &v52;
  sub_21713A81C(&v23, (uint64_t)&v52);
  v49 = &unk_26C77A5E0;
  uint64_t v50 = sub_21713E298;
  v51 = &v49;
  sub_21713A81C(&v23, (uint64_t)&v49);
  int v46 = &unk_26C77A5E0;
  v47 = sub_21713ADB4;
  char v48 = &v46;
  sub_21713A81C(&v23, (uint64_t)&v46);
  uint64_t v43 = &unk_26C77A5E0;
  v44 = sub_21713B150;
  int v45 = &v43;
  sub_21713A81C(&v23, (uint64_t)&v43);
  int v40 = (uint64_t *)&unk_26C77A5E0;
  int v41 = sub_21713B240;
  uint64_t v42 = &v40;
  sub_21713A81C(&v23, (uint64_t)&v40);
  uint64_t v37 = &unk_26C77A5E0;
  uint64_t v38 = sub_21713B330;
  uint64_t v39 = &v37;
  sub_21713A81C(&v23, (uint64_t)&v37);
  sub_21713B460(&v37);
  sub_21713B460(&v40);
  sub_21713B460(&v43);
  sub_21713B460(&v46);
  sub_21713B460(&v49);
  sub_21713B460(&v52);
  return sub_21713B460(&v55);
}

void sub_21713A408(_Unwind_Exception *a1)
{
  sub_217159968(*(void ***)(v1 + 32));
  *(void *)(v2 - 72) = v1;
  sub_217119CC0((void ***)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_21713A66C(uint64_t a1)
{
  sub_217159968(*(void ***)(a1 + 32));
  unint64_t v3 = (void **)a1;
  sub_217119CC0(&v3);
  return a1;
}

uint64_t *sub_21713A6AC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v11 = v1;
  if ((v1 & 7) != 0)
  {
    uint64_t v2 = (atomic_uint *)(v1 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v2, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v11 = (uint64_t)v2;
    }
  }
  uint64_t v3 = qword_267B95EC0;
  if (!qword_267B95EC0)
  {
    uint64_t v4 = &qword_267B95EC0;
    unint64_t v5 = &qword_267B95EC0;
LABEL_13:
    unint64_t v7 = (uint64_t *)operator new(0x40uLL);
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    v7[4] = v8;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v5;
    *uint64_t v4 = (uint64_t)v7;
    unint64_t v9 = v7;
    if (*(void *)qword_267B95EB8)
    {
      qword_267B95EB8 = *(void *)qword_267B95EB8;
      unint64_t v9 = (uint64_t *)*v4;
    }
    sub_21677B3B0((uint64_t *)qword_267B95EC0, v9);
    ++qword_267B95EC8;
    goto LABEL_16;
  }
  uint64_t v4 = &qword_267B95EC0;
  while (1)
  {
    while (1)
    {
      unint64_t v5 = (uint64_t *)v3;
      char v6 = (uint64_t *)(v3 + 32);
      if (!sub_2168BE1F8((uint64_t)&qword_267B95EC8, &v11, (uint64_t *)(v3 + 32))) {
        break;
      }
      uint64_t v3 = *v5;
      uint64_t v4 = v5;
      if (!*v5) {
        goto LABEL_13;
      }
    }
    if (!sub_2168BE1F8((uint64_t)&qword_267B95EC8, v6, &v11)) {
      break;
    }
    uint64_t v4 = v5 + 1;
    uint64_t v3 = v5[1];
    if (!v3) {
      goto LABEL_13;
    }
  }
  unint64_t v7 = (uint64_t *)*v4;
  if (!*v4) {
    goto LABEL_13;
  }
LABEL_16:
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v7 + 5;
}

void sub_21713A7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_21713A81C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v6 = (*a1)[2];
  if (v5 < v6)
  {
    sub_2171449FC((*a1)[1], a2);
    uint64_t v7 = v5 + 32;
    v4[1] = v5 + 32;
    goto LABEL_25;
  }
  uint64_t v8 = (uint64_t)(v5 - *v4) >> 5;
  if ((unint64_t)(v8 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = v6 - *v4;
  uint64_t v10 = v9 >> 4;
  if (v9 >> 4 <= (unint64_t)(v8 + 1)) {
    uint64_t v10 = v8 + 1;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v28 = (uint64_t)(*a1 + 2);
  if (v11)
  {
    if (v11 >> 59) {
      sub_21677CA1C();
    }
    uint64_t v12 = (char *)operator new(32 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v24 = v12;
  unint64_t v25 = &v12[32 * v8];
  unint64_t v27 = &v12[32 * v11];
  sub_2171449FC((uint64_t)v25, a2);
  uint64_t v13 = (uint64_t)v25;
  uint64_t v7 = (uint64_t)(v25 + 32);
  unint64_t v26 = v25 + 32;
  uint64_t v15 = *v4;
  uint64_t v14 = v4[1];
  if (v14 != *v4)
  {
    uint64_t v16 = (void *)(v14 - 8);
    while (1)
    {
      uint64_t v17 = v13 - 32;
      uint64_t v18 = (void *)*v16;
      if (*v16)
      {
        if (v16 - 3 == v18)
        {
          *(void *)(v13 - 8) = v17;
          (*(void (**)(void, uint64_t))(*(void *)*v16 + 24))(*v16, v17);
          goto LABEL_21;
        }
        *(void *)(v13 - 8) = v18;
        unint64_t v19 = v16;
      }
      else
      {
        unint64_t v19 = (void *)(v13 - 8);
      }
      *unint64_t v19 = 0;
LABEL_21:
      unint64_t v20 = v16 - 3;
      v16 -= 4;
      uint64_t v13 = v17;
      if (v20 == (void *)v15)
      {
        uint64_t v21 = *v4;
        uint64_t v14 = v4[1];
        uint64_t v13 = v17;
        uint64_t v7 = (uint64_t)v26;
        goto LABEL_24;
      }
    }
  }
  uint64_t v21 = v4[1];
LABEL_24:
  *uint64_t v4 = v13;
  unint64_t v24 = (char *)v21;
  unint64_t v25 = (char *)v21;
  v4[1] = v7;
  unint64_t v26 = (char *)v14;
  uint64_t v22 = (char *)v4[2];
  v4[2] = (uint64_t)v27;
  unint64_t v27 = v22;
  sub_217144AA4((uint64_t)&v24);
LABEL_25:
  v4[1] = v7;
  return a1;
}

void sub_21713A9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217144AA4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21713A9FC(uint64_t *a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  sub_217144AF4(a1, (uint64_t)v33);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v3 = *a1;
  if (*(unsigned char *)(sub_216850B68((uint64_t *)(*a1 + 104)) + 14)) {
    uint64_t v4 = *(void *)(v3 + 96);
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 136))(&v34);
  if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v34))
  {
    unint64_t v5 = (v35 & 4) != 0
       ? (uint64_t *)(*(uint64_t (**)(uint64_t *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(&v34)
       : &v34;
    if (*v5)
    {
      unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v6) {
        unint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*((void *)v6 + 56) & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+<char>();
      if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (const std::string *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      }
      uint64_t v28 = &v30;
      uint64_t v9 = sub_21677B174(v33, (const void **)&v30, (uint64_t)&unk_2174BFD90, (long long **)&v28);
      std::string::operator=((std::string *)(v9 + 7), EmptyString);
      if (v32 < 0) {
        operator delete(v30);
      }
    }
  }
  uint64_t v10 = operator new(0x38uLL);
  uint64_t v11 = *(void *)(a1[1] + 8);
  int v23 = *(_DWORD *)(v11 + 8);
  if (*(char *)(v11 + 39) < 0)
  {
    sub_216778F24(&v24, *(void **)(v11 + 16), *(void *)(v11 + 24));
  }
  else
  {
    long long v12 = *(_OWORD *)(v11 + 16);
    uint64_t v25 = *(void *)(v11 + 32);
    long long v24 = v12;
  }
  uint64_t v14 = *(void *)(v11 + 40);
  uint64_t v13 = *(void *)(v11 + 48);
  uint64_t v22 = &unk_26C7495D0;
  uint64_t v26 = v14;
  uint64_t v27 = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)&v30);
  int v20 = 3;
  uint64_t v21 = v33;
  v19[0] = 0;
  v19[2] = 0;
  v18[0] = 0;
  v18[2] = 0;
  Alembic::Abc::v12::OObject::OObject(v10, &v22, &v30, &v20, v19, v18);
  sub_217145B1C(&v28, (uint64_t)v10);
  if (v32 < 0) {
    operator delete(v30);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v22);
  sub_2171450C8(&v30, (uint64_t *)&v28);
  uint64_t v16 = (uint64_t)v30;
  uint64_t v15 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)a1[2];
  a1[1] = v16;
  a1[2] = (uint64_t)v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  if (v31) {
    sub_216784EC4(v31);
  }
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2168EE084((uint64_t)&v34);
  sub_2167877AC((uint64_t)v33, v33[1]);
}

void sub_21713ACFC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1 - 56);
  sub_2167877AC(v1 - 80, *(void **)(v1 - 72));
  _Unwind_Resume(a1);
}

void *sub_21713ADB4(uint64_t a1)
{
  _DWORD v36[4] = *MEMORY[0x263EF8340];
  v36[0] = &unk_26C77A780;
  v36[1] = sub_217145F6C;
  v36[3] = v36;
  int v12 = 2;
  char v13 = 1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    uint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  sub_216779094(__p, "visible");
  Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(*(void *)(a1 + 8) + 8), (uint64_t)&v14);
  v32[0] = 0;
  v32[1] = 0;
  long long v31 = v32;
  if ((void **)(a1 + 56) == &v31)
  {
    uint64_t v3 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)(a1 + 56), v32, v32);
    uint64_t v3 = (void *)v32[0];
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 1256);
  sub_2167FB780((uint64_t)&v31, v3);
  memset(v30, 0, 24);
  sub_2171471F0(a1, v4, (uint64_t)v30, (uint64_t)&v31);
  if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*(void *)a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v35)[3])
  {
    int v25 = v14;
    if (SHIBYTE(v16) < 0)
    {
      sub_216778F24(&v26, (void *)v15, *((unint64_t *)&v15 + 1));
    }
    else
    {
      long long v26 = v15;
      uint64_t v27 = v16;
    }
    uint64_t v28 = v17;
    uint64_t v29 = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    sub_21714611C((uint64_t *)a1, v4, (uint64_t)&v31, (uint64_t)v21);
    int v23 = 3;
    long long v24 = v21;
    v20[0] = 0;
    v20[2] = 0;
    v19[0] = 0;
    v19[2] = 0;
    Alembic::Abc::v12::OScalarProperty::OScalarProperty(v30, &v25, __p, &v12, &v23, v20, v19);
    sub_2167877AC((uint64_t)v21, v22);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v25);
    unint64_t v5 = *(double **)(a1 + 56);
    if (v5 != (double *)(a1 + 64))
    {
      do
      {
        sub_217146A60(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*(void *)a1 + 88), (uint64_t)v36, &v31, (Alembic::Abc::v12::OScalarProperty *)v30, v5[4]);
        unint64_t v6 = (double *)*((void *)v5 + 1);
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            unint64_t v6 = *(double **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (double *)*((void *)v5 + 2);
            BOOL v8 = *(void *)v7 == (void)v5;
            unint64_t v5 = v7;
          }
          while (!v8);
        }
        unint64_t v5 = v7;
      }
      while (v7 != (double *)(a1 + 64));
    }
    sub_217146B60((double **)a1, a1 + 56);
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::Abc::v12::OScalarProperty *)v30);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)v30);
  }
  if (v34) {
    sub_216784EC4(v34);
  }
  if (v33) {
    sub_216784EC4(v33);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_21697C414(&v31);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v14);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return sub_217119D70(v36);
}

void sub_21713B0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_217119D70((void *)(v38 - 88));
  _Unwind_Resume(a1);
}

void *sub_21713B150(uint64_t a1)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v3) {
    uint64_t v3 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  }
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77A820;
  v4[1] = sub_217149898;
  v4[2] = 0;
  v4[3] = v2;
  v6[3] = v4;
  sub_217149194(a1, v3, (uint64_t)v6);
  return sub_21714A9A0(v6);
}

void sub_21713B22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21714A9A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21713B240(uint64_t a1)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v3) {
    uint64_t v3 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  }
  uint64_t v4 = (void *)((char *)v3 + 8);
  unint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26C77A820;
  v5[1] = sub_21714AA24;
  v5[2] = 0;
  v5[3] = v2;
  void v7[3] = v5;
  sub_217149194(a1, v4, (uint64_t)v7);
  return sub_21714A9A0(v7);
}

void sub_21713B31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21714A9A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21713B330(uint64_t a1)
{
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  sub_21698FA28(&v10, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  uint64_t v2 = v10;
  uint64_t v3 = v11;
  while (v2 != v3)
  {
    Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(*(void *)(a1 + 8) + 8), (uint64_t)v9);
    if ((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(__p, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v6 = *(_OWORD *)EmptyString;
      uint64_t v8 = EmptyString[2];
      *(_OWORD *)__p = v6;
    }
    sub_2171498C0((uint64_t *)a1, v9, v2, (uint64_t)__p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v9);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v2 + 8);
  }
  __p[0] = &v10;
  sub_216889A04((void ***)__p);
}

void sub_21713B41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&a15);
  __p = (void *)(v15 - 56);
  sub_216889A04((void ***)&__p);
  _Unwind_Resume(a1);
}

void *sub_21713B460(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

_DWORD *sub_21713B4E4(uint64_t a1)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  *((void *)&__p + 1) = 0;
  *(void *)&long long v83 = 0;
  *(void *)&long long __p = (char *)&__p + 8;
  uint64_t v1 = (uint64_t **)(a1 + 56);
  if ((long long *)(a1 + 56) == &__p)
  {
    uint64_t v2 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)(a1 + 56), (void *)&__p + 1, (void *)&__p + 1);
    uint64_t v2 = (void *)*((void *)&__p + 1);
  }
  sub_2167FB780((uint64_t)&__p, v2);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4) {
    uint64_t v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1336), (uint64_t *)v4 + 68, (uint64_t)&v73);
  uint64_t v5 = *(void *)(a1 + 72);
  *((void *)&__p + 1) = 0;
  *(void *)&long long v83 = 0;
  *(void *)&long long __p = (char *)&__p + 8;
  if (v1 == (uint64_t **)&__p)
  {
    long long v6 = 0;
  }
  else
  {
    sub_217146FFC(v1, (void *)&__p + 1, (void *)&__p + 1);
    long long v6 = (void *)*((void *)&__p + 1);
  }
  sub_2167FB780((uint64_t)&__p, v6);
  v52 = v1;
  if (v5)
  {
    unint64_t v7 = sub_21714AAE8();
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8) {
      uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21714AAE8();
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10) {
      uint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_21714AA4C(a1, v9, (uint64_t *)v10 + 45, (uint64_t)&v69);
    if (v72) {
      sub_216784EC4(v72);
    }
    if (v71) {
      sub_216784EC4(v71);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v70);
    sub_21697C414(&v69);
    *((void *)&__p + 1) = 0;
    *(void *)&long long v83 = 0;
    *(void *)&long long __p = (char *)&__p + 8;
    if (v52 == (uint64_t **)&__p)
    {
      char v11 = 0;
    }
    else
    {
      sub_217146FFC(v52, (void *)&__p + 1, (void *)&__p + 1);
      char v11 = (void *)*((void *)&__p + 1);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 8);
    sub_2167FB780((uint64_t)&__p, v11);
  }
  else
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21714AAE8();
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8) {
      uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
  }
  sub_21714AA4C(a1, v12, (uint64_t *)v8 + 45, (uint64_t)&v65);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  sub_21698FA28(&v90, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v90;
  int v14 = v91;
  if (v90 != v91)
  {
    do
    {
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v15, v13))
      {
        *(void *)&long long __p = "usdAbc/alembicWriter.cpp";
        *((void *)&__p + 1) = "_WriteXform";
        *(void *)&long long v83 = 2731;
        *((void *)&v83 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_WriteXform(_PrimWriterContext *)";
        LOBYTE(v84) = 0;
        unint64_t v16 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          uint64_t v17 = (const char *)(v16 + 16);
          if (*(char *)(v16 + 39) < 0) {
            uint64_t v17 = *(const char **)v17;
          }
        }
        else
        {
          uint64_t v17 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Found unextracted property '%s' in xformOp namespace.", v17);
      }
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)((char *)v15 + 8);
    }
    while (v15 != (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v14);
  }
  *(void *)&long long __p = &v90;
  sub_216889A04((void ***)&__p);
  sub_217144AF4((uint64_t *)a1, (uint64_t)v64);
  sub_21714611C((uint64_t *)a1, v12, (uint64_t)&v65, (uint64_t)&__p);
  uint64_t v18 = __p;
  if ((long long *)__p != (long long *)((char *)&__p + 8))
  {
    do
    {
      if (*(char *)(v18 + 79) < 0)
      {
        if (*(void *)(v18 + 64))
        {
LABEL_39:
          std::operator+<char>();
          v54 = (void **)&v90;
          unint64_t v19 = sub_21677B174(v64, (const void **)&v90, (uint64_t)&unk_2174BFD90, (long long **)&v54);
          std::string::operator=((std::string *)(v19 + 7), (const std::string *)(v18 + 56));
          if (SHIBYTE(v92) < 0) {
            operator delete(v90);
          }
        }
      }
      else if (*(unsigned char *)(v18 + 79))
      {
        goto LABEL_39;
      }
      int v20 = *(long long **)(v18 + 8);
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          int v20 = *(long long **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = *(long long **)(v18 + 16);
          BOOL v22 = *(void *)v21 == v18;
          uint64_t v18 = (uint64_t)v21;
        }
        while (!v22);
      }
      uint64_t v18 = (uint64_t)v21;
    }
    while (v21 != (long long *)((char *)&__p + 8));
  }
  sub_2167877AC((uint64_t)&__p, *((void **)&__p + 1));
  int v23 = operator new(0x200uLL);
  uint64_t v24 = *(void *)(*(void *)(a1 + 8) + 8);
  int v57 = *(_DWORD *)(v24 + 8);
  if (*(char *)(v24 + 39) < 0)
  {
    sub_216778F24(&v58, *(void **)(v24 + 16), *(void *)(v24 + 24));
  }
  else
  {
    long long v25 = *(_OWORD *)(v24 + 16);
    uint64_t v59 = *(void *)(v24 + 32);
    long long v58 = v25;
  }
  uint64_t v27 = *(void *)(v24 + 40);
  uint64_t v26 = *(void *)(v24 + 48);
  v56 = &unk_26C7495D0;
  uint64_t v60 = v27;
  uint64_t v61 = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054(a1, (uint64_t)&__p);
  LODWORD(v90) = 3;
  v91 = v64;
  LODWORD(v54) = 0;
  int v55 = 0;
  LODWORD(v79) = 0;
  int v80 = 0;
  sub_21714AD50((uint64_t)v23, (uint64_t)&v56, &__p, &v90, &v54, &v79);
  sub_21714BABC(&v62, (uint64_t)v23);
  if (SBYTE7(v83) < 0) {
    operator delete((void *)__p);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v56);
  uint64_t v28 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  unint64_t v30 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v62;
  uint64_t v29 = v63;
  if (v63) {
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77A520;
  v28->~__shared_weak_count_0 = v30;
  v28->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v29;
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v29);
  }
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77A990;
  long long v31 = (std::__shared_weak_count *)operator new(0x20uLL);
  v31->__shared_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77A9E0;
  v31->__shared_weak_owners_ = 0;
  v31[1].__vftable = v28;
  atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  char v32 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v28;
  *(void *)(a1 + 16) = v31;
  if (v32) {
    sub_216784EC4(v32);
  }
  sub_216784EC4(v31);
  Alembic::AbcGeom::v12::XformSample::XformSample((uint64_t)&v54);
  unint64_t v33 = *(double **)(a1 + 56);
  if (v33 != (double *)(a1 + 64))
  {
    do
    {
      double v34 = v33[4];
      Alembic::AbcGeom::v12::XformSample::reset((Alembic::AbcGeom::v12::XformSample *)&v54);
      uint64_t v35 = sub_2171489A0((uint64_t)&v65, v34);
      uint64_t v36 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(&v94, v35);
      if (sub_21695529C(v36))
      {
        if ((v95 & 4) != 0) {
          uint64_t v39 = (long long *)(*(uint64_t (**)(long long **))((v95 & 0xFFFFFFFFFFFFFFF8) + 168))(&v94);
        }
        else {
          uint64_t v39 = v94;
        }
        Alembic::AbcGeom::v12::XformOp::XformOp(&v90, 3, 0);
        long long v40 = v39[1];
        long long __p = *v39;
        long long v83 = v40;
        long long v41 = v39[3];
        long long v84 = v39[2];
        long long v85 = v41;
        long long v42 = v39[5];
        long long v86 = v39[4];
        long long v87 = v42;
        long long v43 = v39[7];
        long long v88 = v39[6];
        long long v89 = v43;
        Alembic::AbcGeom::v12::XformSample::addOp((uint64_t)&v54, (Alembic::AbcGeom::v12::XformOp *)&v90, (uint64_t)&__p);
        sub_2167FB780((uint64_t)v93, v93[1]);
        v44 = v91;
        if (!v91) {
          goto LABEL_74;
        }
        v92 = v91;
      }
      else
      {
        *(void *)&long long __p = "usdAbc/alembicWriter.cpp";
        *((void *)&__p + 1) = "_CopyXform";
        *(void *)&long long v83 = 1738;
        *((void *)&v83 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyXform(double, const U"
                                "sdSamples &, XformSample *)";
        LOBYTE(v84) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v94, v37, v38, (uint64_t)v77);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v77, (uint64_t)&v79);
        if (v81 >= 0) {
          int v46 = &v79;
        }
        else {
          int v46 = v79;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'GfMatrix4d', got '%s'", v45, v46);
        if (v81 < 0) {
          operator delete(v79);
        }
        if ((v78 & 0x80000000) == 0) {
          goto LABEL_74;
        }
        v44 = (uint64_t **)v77[0];
      }
      operator delete(v44);
LABEL_74:
      sub_2168EE084((uint64_t)&v94);
      Alembic::AbcGeom::v12::XformSample::setInheritsXforms((uint64_t)&v54, 1);
      Alembic::AbcGeom::v12::OXformSchema::set((Alembic::AbcGeom::v12::OXformSchema *)(v62 + 56), (int **)&v54);
      v47 = (double *)*((void *)v33 + 1);
      if (v47)
      {
        do
        {
          char v48 = v47;
          v47 = *(double **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          char v48 = (double *)*((void *)v33 + 2);
          BOOL v22 = *(void *)v48 == (void)v33;
          unint64_t v33 = v48;
        }
        while (!v22);
      }
      unint64_t v33 = v48;
    }
    while (v48 != (double *)(a1 + 64));
  }
  uint64_t v49 = v62;
  uint64_t v50 = sub_217146B60((double **)a1, (uint64_t)v52);
  Alembic::AbcGeom::v12::OXformSchema::setTimeSampling((Alembic::AbcGeom::v12::OXformSchema *)(v49 + 56), v50);
  *(void *)&long long __p = &v55;
  sub_216802314((void ***)&__p);
  if (v63) {
    sub_216784EC4(v63);
  }
  sub_2167877AC((uint64_t)v64, v64[1]);
  if (v68) {
    sub_216784EC4(v68);
  }
  if (v67) {
    sub_216784EC4(v67);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v66);
  sub_21697C414(&v65);
  if (v76) {
    sub_216784EC4(v76);
  }
  if (v75) {
    sub_216784EC4(v75);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v74);
  return sub_21697C414(&v73);
}

void sub_21713BD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  operator delete(v48);
  sub_2167877AC((uint64_t)&a27, (void *)a28);
  sub_217146FA4((uint64_t)&a30);
  sub_217146FA4((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_21713BED8(uint64_t a1)
{
  sub_21713B4E4(a1);
  sub_216779094(__p, "Shape");
  if ((v5 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v3 = v5;
  }
  else {
    std::string::size_type v3 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v2, v3);
  if ((char)v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21713BF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21713BF64(void *a1)
{
  uint64_t v244 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  std::string::size_type v3 = operator new(0x4C8uLL);
  uint64_t v4 = *(void *)(a1[1] + 8);
  int v215 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_216778F24(&v216, *(void **)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 16);
    uint64_t v217 = *(void *)(v4 + 32);
    long long v216 = v5;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  v214 = &unk_26C7495D0;
  uint64_t v218 = v7;
  uint64_t v219 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)__p);
  sub_217144AF4(a1, (uint64_t)&v229);
  int v209 = 3;
  v211 = &v229;
  int v204 = 0;
  v205[1] = 0;
  int v199 = 0;
  v200[1] = 0;
  sub_21714D310((uint64_t)v3, (uint64_t)&v214, (long long *)__p, &v209, &v204, &v199);
  sub_21714E498(&v220, (uint64_t)v3);
  sub_2167877AC((uint64_t)&v229, *((void **)&v229 + 1));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v214);
  uint64_t v8 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  uint64_t v9 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v220;
  uint64_t v10 = v221;
  if (v221) {
    atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77A520;
  v8->~__shared_weak_count_0 = v9;
  v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v10);
  }
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77AB08;
  char v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77AB58;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v8;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = (std::__shared_weak_count *)a1[2];
  a1[1] = v8;
  a1[2] = v11;
  if (v12) {
    sub_216784EC4(v12);
  }
  sub_216784EC4(v11);
  *(void *)&__p[16] = 0;
  *(void *)&__p[8] = 0;
  *(void *)long long __p = &__p[8];
  if (a1 + 7 == (void *)__p)
  {
    char v13 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)a1 + 7, &__p[8], &__p[8]);
    char v13 = *(void **)&__p[8];
  }
  sub_2167FB780((uint64_t)__p, v13);
  int v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14) {
    int v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 296), (uint64_t *)v15 + 77, (uint64_t)&v209);
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16) {
    unint64_t v16 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17) {
    uint64_t v17 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 816), (uint64_t *)v17 + 83, (uint64_t)&v204);
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18) {
    uint64_t v18 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19) {
    unint64_t v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1216), (uint64_t *)v19 + 86, (uint64_t)&v199);
  int v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20) {
    int v20 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21) {
    uint64_t v21 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 344), (uint64_t *)v21 + 58, (uint64_t)v196);
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22) {
    BOOL v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23) {
    int v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 336), (uint64_t *)v23 + 58, (uint64_t)&v192);
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24) {
    uint64_t v24 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  long long v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25) {
    long long v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 1032), (uint64_t *)v25 + 11, (uint64_t)&v187);
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26) {
    uint64_t v26 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27) {
    uint64_t v27 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 480), (uint64_t *)v27 + 11, (uint64_t)&v183);
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28) {
    uint64_t v28 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29) {
    uint64_t v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 328), (uint64_t *)v29 + 11, (uint64_t)&v179);
  unint64_t v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v30) {
    unint64_t v30 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  long long v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31) {
    long long v31 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 424), (uint64_t *)v31 + 58, (uint64_t)&v174);
  char v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v32) {
    char v32 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v33) {
    unint64_t v33 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v32 + 144), (uint64_t *)v33 + 58, (uint64_t)&v170);
  double v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v34) {
    double v34 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v35) {
    uint64_t v35 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v34 + 152), (uint64_t *)v35 + 64, (uint64_t)&v166);
  uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v36) {
    uint64_t v36 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v37) {
    uint64_t v37 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v36 + 184), (uint64_t *)v37 + 58, (uint64_t)&v162);
  uint64_t v38 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v38) {
    uint64_t v38 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v39) {
    uint64_t v39 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v38 + 192), (uint64_t *)v39 + 58, (uint64_t)&v158);
  long long v40 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v40) {
    long long v40 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  long long v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v41) {
    long long v41 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v40 + 200), (uint64_t *)v41 + 64, (uint64_t)&v154);
  long long v42 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
  if (!v42) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  int v43 = *v42;
  v44 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (v43)
  {
    if (!v44) {
      v44 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    int v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v45) {
      int v45 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    int v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v46) {
      int v46 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_21714BEC4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v44 + 48), (uint64_t *)v45 + 105, (uint64_t *)v46 + 76, (uint64_t)&v147);
  }
  else
  {
    if (!v44) {
      v44 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v47) {
      v47 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v44 + 48), (uint64_t *)v47 + 105, (uint64_t)&v147);
  }
  if (*(void *)(v152 + 16))
  {
    char v48 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v48) {
      char v48 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    sub_21714BF64(a1, (void *)v48 + 4);
    uint64_t v49 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v49) {
      uint64_t v49 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    uint64_t v50 = (void *)((char *)v49 + 40);
  }
  else
  {
    v51 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    if (!v51) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    int v52 = *v51;
    v53 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (v52)
    {
      if (!v53) {
        v53 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      v54 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v54) {
        v54 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      int v55 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v55) {
        int v55 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      sub_21714BEC4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v53 + 32), (uint64_t *)v54 + 105, (uint64_t *)v55 + 76, (uint64_t)__p);
    }
    else
    {
      if (!v53) {
        v53 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v56) {
        v56 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v53 + 32), (uint64_t *)v56 + 105, (uint64_t)__p);
    }
    sub_21697DE94(&v147, (int *)__p);
    sub_21697DEEC(&v148, (int *)&__p[4]);
    int v57 = v133;
    long long v58 = *(_OWORD *)&__p[8];
    v133 = 0;
    *(void *)&__p[16] = 0;
    long long v149 = v58;
    uint64_t v59 = v150;
    v150 = v57;
    if (v59) {
      sub_216784EC4(v59);
    }
    long long v60 = v134;
    long long v134 = 0uLL;
    uint64_t v61 = (std::__shared_weak_count *)*((void *)&v151 + 1);
    long long v151 = v60;
    if (v61)
    {
      sub_216784EC4(v61);
      long long v152 = v135;
      uint64_t v153 = v136;
      if (*((void *)&v134 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v134 + 1));
      }
    }
    else
    {
      long long v152 = v135;
      uint64_t v153 = v136;
    }
    if (v133) {
      sub_216784EC4(v133);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__p[4]);
    sub_21697C414(__p);
    uint64_t v62 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v62) {
      uint64_t v62 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    uint64_t v50 = (void *)((char *)v62 + 56);
  }
  sub_21714BF64(a1, v50);
  sub_21714BFFC(a1, v196, (uint64_t)&v192);
  sub_21714ECE0((uint64_t)__p);
  v63 = (double *)a1[7];
  if (v63 != (double *)(a1 + 8))
  {
    do
    {
      double v64 = v63[4];
      sub_21714C4B4((uint64_t)__p);
      int v138 = 1;
      int v137 = 1;
      int v65 = sub_2171489A0((uint64_t)&v209, v64);
      sub_2168EE4C4(&v225, v65);
      if (sub_2168FD6AC((pxrInternal__aapl__pxrReserved__::VtValue *)&v225))
      {
        if ((v226 & 4) != 0) {
          uint64_t v68 = (*(uint64_t (**)(unint64_t *))((v226 & 0xFFFFFFFFFFFFFFF8) + 168))(&v225);
        }
        else {
          uint64_t v68 = v225;
        }
        int v69 = *(float32x2_t **)(v68 + 32);
        float64x2_t v142 = vcvtq_f64_f32(*v69);
        float64x2_t v143 = vcvtq_f64_f32(v69[1]);
        float64x2_t v144 = vcvtq_f64_f32(v69[2]);
      }
      else
      {
        *(void *)&long long v229 = "usdAbc/alembicWriter.cpp";
        *((void *)&v229 + 1) = "_CopySelfBounds";
        uint64_t v230 = 1759;
        v231 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &,"
               " DST *) [DST = Alembic::AbcGeom::v12::OSubDSchema::Sample]";
        LOBYTE(v232) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v225, v66, v67, (uint64_t)v222);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v222, (uint64_t)&v239);
        if (SHIBYTE(v240) >= 0) {
          v71 = &v239;
        }
        else {
          v71 = (long long *)v239;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v229, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v70, v71);
        if (SHIBYTE(v240) < 0) {
          operator delete((void *)v239);
        }
        if (SHIBYTE(v223) < 0) {
          operator delete(v222[0]);
        }
      }
      sub_2168EE084((uint64_t)&v225);
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v208);
      int v73 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v204, v64);
      LODWORD(v229) = 10;
      BYTE4(v229) = 3;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v208, v73, v2, (uint64_t)Converter, (int *)&v229, 0, (uint64_t)&v225);
      if (sub_217148A90((uint64_t)&v225, &v204, (uint64_t)&v208))
      {
        uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v226 + 16))(v226);
        sub_21714EF5C(&v229, v74, v225 / 3);
        *(void *)long long __p = v229;
        *(void *)&__p[5] = *(void *)((char *)&v229 + 5);
        sub_21677CC7C(&__p[16], (char *)v230, (uint64_t)v231, (uint64_t)&v231[-v230] >> 3);
        if (v230)
        {
          v231 = (const char *)v230;
          operator delete((void *)v230);
        }
      }
      v75 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v203);
      v76 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v199, v64);
      LODWORD(v229) = 10;
      BYTE4(v229) = 3;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v203, v76, v2, (uint64_t)v75, (int *)&v229, 0, (uint64_t)&v128);
      if (sub_217148A90((uint64_t)&v128, &v199, (uint64_t)&v203))
      {
        uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 16))(v129);
        sub_21714EFF4(&v229, v77, v128 / 3);
        v145[0] = v229;
        *(void *)((char *)v145 + 5) = *(void *)((char *)&v229 + 5);
        sub_21677CC7C(v146, (char *)v230, (uint64_t)v231, (uint64_t)&v231[-v230] >> 3);
        if (v230)
        {
          v231 = (const char *)v230;
          operator delete((void *)v230);
        }
      }
      sub_21714C67C(v2, v196, (uint64_t)__p, (void (*)(void *, void **))sub_21714C7EC, 0, (uint64_t)v125, v64);
      sub_21714C67C(v2, &v192, (uint64_t)__p, (void (*)(void *, void **))sub_21714C824, 0, (uint64_t)v122, v64);
      *(void *)&long long v239 = &unk_26C77A780;
      *((void *)&v239 + 1) = sub_21714C85C;
      v241 = (char *)&v239;
      char v78 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v187, v64);
      LODWORD(v222[0]) = 12;
      BYTE4(v222[0]) = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v191, v78, v2, (uint64_t)&v239, (int *)v222, 1, (uint64_t)&v229);
      if (sub_217148A90((uint64_t)&v229, &v187, (uint64_t)&v191))
      {
        v79 = (const std::string *)(*(uint64_t (**)(void))(**((void **)&v229 + 1) + 16))(*((void *)&v229 + 1));
        std::string::operator=(&v141, v79);
      }
      if (v232) {
        sub_216784EC4(v232);
      }
      if (v230) {
        sub_216784EC4((std::__shared_weak_count *)v230);
      }
      sub_217119D70(&v239);
      *(void *)&long long v229 = &unk_26C77A780;
      *((void *)&v229 + 1) = sub_21714CB48;
      v231 = (const char *)&v229;
      sub_21714CA28(v2, (uint64_t)&v229, &v183, (uint64_t)__p, (void (*)(void *, void))sub_21714C66C, 0, v64);
      sub_217119D70(&v229);
      *(void *)&long long v229 = &unk_26C77A780;
      *((void *)&v229 + 1) = sub_21714CD60;
      v231 = (const char *)&v229;
      sub_21714CA28(v2, (uint64_t)&v229, &v179, (uint64_t)__p, (void (*)(void *, void))sub_21714C674, 0, v64);
      sub_217119D70(&v229);
      int v80 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v178);
      char v81 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v174, v64);
      LODWORD(v229) = 6;
      BYTE4(v229) = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v178, v81, v2, (uint64_t)v80, (int *)&v229, 0, (uint64_t)&v118);
      if (sub_217148A90((uint64_t)&v118, &v174, (uint64_t)&v178))
      {
        uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v119 + 16))(v119);
        sub_21714F08C(&v229, v82, v118);
        v139[0] = v229;
        *(void *)((char *)v139 + 5) = *(void *)((char *)&v229 + 5);
        sub_21677CC7C(v140, (char *)v230, (uint64_t)v231, (uint64_t)&v231[-v230] >> 3);
        if (v230)
        {
          v231 = (const char *)v230;
          operator delete((void *)v230);
        }
      }
      sub_21714C67C(v2, &v170, (uint64_t)__p, (void (*)(void *, void **))sub_21714CFEC, 0, (uint64_t)v115, v64);
      sub_21714D024(v2, &v166, (uint64_t)__p, (void (*)(void *, void **))sub_21714D194, 0, (uint64_t)v112, v64);
      sub_21714C67C(v2, &v162, (uint64_t)__p, (void (*)(void *, void **))sub_21714D1CC, 0, (uint64_t)v109, v64);
      sub_21714C67C(v2, &v158, (uint64_t)__p, (void (*)(void *, void **))sub_21714D204, 0, (uint64_t)v106, v64);
      sub_21714D024(v2, &v154, (uint64_t)__p, (void (*)(void *, void **))sub_21714D23C, 0, (uint64_t)v103, v64);
      long long v83 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v153);
      long long v84 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v147, v64);
      LODWORD(v229) = 10;
      BYTE4(v229) = 2;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v153, v84, v2, (uint64_t)v83, (int *)&v229, 0, (uint64_t)&v98);
      if (!sub_217148A90((uint64_t)&v98, &v147, (uint64_t)&v153)) {
        goto LABEL_172;
      }
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
        sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v149 + 136))(&v242);
      if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v242))
      {
        if ((v243 & 4) != 0) {
          long long v86 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v243 & 0xFFFFFFFFFFFFFFF8) + 168))(&v242);
        }
        else {
          long long v86 = &v242;
        }
        int v87 = sub_217148184(v86);
      }
      else
      {
        int v87 = 127;
      }
      sub_21714F228((uint64_t)&v98);
      long long v88 = v101;
      long long v89 = v102;
      if (v102) {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v88)
      {
        sub_21714F788(&v239, *v88, (v88[1] - *v88) >> 2);
        uint64_t v90 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 16))(v99);
        sub_21714F820(v222, v90, v98 >> 1);
        sub_2167C729C((uint64_t)&v229, (uint64_t *)v222, (uint64_t *)&v239, v87);
        sub_21714D274(__p, (char *)&v229);
        if (v235)
        {
          v236 = v235;
          operator delete(v235);
        }
        if (v230)
        {
          v231 = (const char *)v230;
          operator delete((void *)v230);
        }
        v91 = v223;
        if (!v223) {
          goto LABEL_167;
        }
        v224 = v223;
      }
      else
      {
        uint64_t v92 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 16))(v99);
        sub_21714F820(&v239, v92, v98 >> 1);
        *(void *)&long long v229 = v239;
        *(void *)((char *)&v229 + 5) = *(void *)((char *)&v239 + 5);
        v231 = 0;
        v232 = 0;
        uint64_t v230 = 0;
        sub_21677EA60(&v230, v240, (uint64_t)v241, (v241 - (unsigned char *)v240) >> 3);
        uint64_t v233 = 0;
        uint64_t v234 = 0x100000005;
        v236 = 0;
        uint64_t v237 = 0;
        v235 = 0;
        int v238 = v87;
        sub_21714D274(__p, (char *)&v229);
        if (v235)
        {
          v236 = v235;
          operator delete(v235);
        }
        v91 = (void *)v230;
        if (!v230) {
          goto LABEL_167;
        }
        v231 = (const char *)v230;
      }
      operator delete(v91);
LABEL_167:
      if (v240)
      {
        v241 = (char *)v240;
        operator delete(v240);
      }
      if (v89) {
        sub_216784EC4(v89);
      }
      sub_2168EE084((uint64_t)&v242);
LABEL_172:
      Alembic::AbcGeom::v12::OSubDSchema::set((Alembic::AbcGeom::v12::OSubDSchema *)(v220 + 56), (uint64_t)__p);
      if (v102) {
        sub_216784EC4(v102);
      }
      if (v100) {
        sub_216784EC4(v100);
      }
      if (v105) {
        sub_216784EC4(v105);
      }
      if (v104) {
        sub_216784EC4(v104);
      }
      if (v108) {
        sub_216784EC4(v108);
      }
      if (v107) {
        sub_216784EC4(v107);
      }
      if (v111) {
        sub_216784EC4(v111);
      }
      if (v110) {
        sub_216784EC4(v110);
      }
      if (v114) {
        sub_216784EC4(v114);
      }
      if (v113) {
        sub_216784EC4(v113);
      }
      if (v117) {
        sub_216784EC4(v117);
      }
      if (v116) {
        sub_216784EC4(v116);
      }
      if (v121) {
        sub_216784EC4(v121);
      }
      if (v120) {
        sub_216784EC4(v120);
      }
      if (v124) {
        sub_216784EC4(v124);
      }
      if (v123) {
        sub_216784EC4(v123);
      }
      if (v127) {
        sub_216784EC4(v127);
      }
      if (v126) {
        sub_216784EC4(v126);
      }
      if (v131) {
        sub_216784EC4(v131);
      }
      if (v130) {
        sub_216784EC4(v130);
      }
      if (v228) {
        sub_216784EC4(v228);
      }
      if (v227) {
        sub_216784EC4(v227);
      }
      v93 = (double *)*((void *)v63 + 1);
      if (v93)
      {
        do
        {
          v94 = v93;
          v93 = *(double **)v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (double *)*((void *)v63 + 2);
          BOOL v95 = *(void *)v94 == (void)v63;
          v63 = v94;
        }
        while (!v95);
      }
      v63 = v94;
    }
    while (v94 != (double *)(a1 + 8));
  }
  uint64_t v96 = v220;
  int v97 = sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OSubDSchema::setTimeSampling((Alembic::AbcGeom::v12::OSubDSchema *)(v96 + 56), v97);
  sub_21714F8B8((uint64_t)__p);
  if (*((void *)&v151 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v151 + 1));
  }
  if (v150) {
    sub_216784EC4(v150);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
  sub_21697C414(&v147);
  if (v157) {
    sub_216784EC4(v157);
  }
  if (v156) {
    sub_216784EC4(v156);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v155);
  sub_21697C414(&v154);
  if (v161) {
    sub_216784EC4(v161);
  }
  if (v160) {
    sub_216784EC4(v160);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v159);
  sub_21697C414(&v158);
  if (v165) {
    sub_216784EC4(v165);
  }
  if (v164) {
    sub_216784EC4(v164);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v163);
  sub_21697C414(&v162);
  if (v169) {
    sub_216784EC4(v169);
  }
  if (v168) {
    sub_216784EC4(v168);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v167);
  sub_21697C414(&v166);
  if (v173) {
    sub_216784EC4(v173);
  }
  if (v172) {
    sub_216784EC4(v172);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v171);
  sub_21697C414(&v170);
  if (v177) {
    sub_216784EC4(v177);
  }
  if (v176) {
    sub_216784EC4(v176);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v175);
  sub_21697C414(&v174);
  if (v182) {
    sub_216784EC4(v182);
  }
  if (v181) {
    sub_216784EC4(v181);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v180);
  sub_21697C414(&v179);
  if (v186) {
    sub_216784EC4(v186);
  }
  if (v185) {
    sub_216784EC4(v185);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v184);
  sub_21697C414(&v183);
  if (v190) {
    sub_216784EC4(v190);
  }
  if (v189) {
    sub_216784EC4(v189);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v188);
  sub_21697C414(&v187);
  if (v195) {
    sub_216784EC4(v195);
  }
  if (v194) {
    sub_216784EC4(v194);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v193);
  sub_21697C414(&v192);
  if (v198) {
    sub_216784EC4(v198);
  }
  if (v197) {
    sub_216784EC4(v197);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v196 + 1);
  sub_21697C414(v196);
  if (v202) {
    sub_216784EC4(v202);
  }
  if (v201) {
    sub_216784EC4(v201);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v200);
  sub_21697C414(&v199);
  if (v207) {
    sub_216784EC4(v207);
  }
  if (v206) {
    sub_216784EC4(v206);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v205);
  sub_21697C414(&v204);
  if (v213) {
    sub_216784EC4(v213);
  }
  if (v212) {
    sub_216784EC4(v212);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v210);
  sub_21697C414(&v209);
  if (v221) {
    sub_216784EC4(v221);
  }
}

void sub_21713D6DC(_Unwind_Exception *a1)
{
  if (STACK[0x8B8]) {
    sub_216784EC4((std::__shared_weak_count *)STACK[0x8B8]);
  }
  _Unwind_Resume(a1);
}

void sub_21713DB38()
{
}

void sub_21713DB40()
{
}

_DWORD *sub_21713DB4C(double **a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95F50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95F50))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B95F48, "primvars:displayColor");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B95F48, &dword_216758000);
    __cxa_guard_release(&qword_267B95F50);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95F60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95F60))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95F58, "adskDiffuseColor");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95F58, &dword_216758000);
    __cxa_guard_release(&qword_267B95F60);
  }
  sub_21714594C((uint64_t)a1, &v39);
  sub_21714759C((uint64_t)&v45, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B95F48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
  sub_21697C414(&v39);
  uint64_t v2 = *a1;
  if (*((void *)*a1 + 13))
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)*a1 + 13) + 14)) {
      uint64_t v3 = *((void *)v2 + 12);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  sub_21714594C((uint64_t)a1, &__str);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B95F48, (int *)&v39);
  int v4 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 72))(v3, &v39);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
  sub_21697C414(&v39);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
  sub_21697C414(&__str);
  if (v4)
  {
    sub_21714594C((uint64_t)a1, &__str);
    long long v5 = *a1;
    if (*(unsigned char *)(sub_216850B68((uint64_t *)*a1 + 13) + 14)) {
      uint64_t v6 = *((void *)v5 + 12);
    }
    else {
      uint64_t v6 = 0;
    }
    sub_2171476A8((uint64_t)&v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B95F48, v6);
    sub_21697DE94((int *)&v45, (int *)&v39);
    sub_21697DEEC((int *)&v45 + 1, (int *)&v39 + 1);
    uint64_t v7 = v41;
    long long v8 = v40;
    *((void *)&v40 + 1) = 0;
    long long v41 = 0;
    long long v46 = v8;
    uint64_t v9 = v47;
    v47 = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    long long v10 = v42;
    long long v42 = 0uLL;
    char v11 = (std::__shared_weak_count *)*((void *)&v48 + 1);
    long long v48 = v10;
    if (v11)
    {
      sub_216784EC4(v11);
      long long v49 = v43;
      uint64_t v50 = v44;
      if (*((void *)&v42 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v42 + 1));
      }
    }
    else
    {
      long long v49 = v43;
      uint64_t v50 = v44;
    }
    if (v41) {
      sub_216784EC4(v41);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
    sub_21697C414(&v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
    sub_21697C414(&__str);
  }
  if (*(void *)(v49 + 16))
  {
    v37[0] = 0;
    v37[1] = 0;
    uint64_t v36 = (uint64_t *)v37;
    sub_217147628(&v45, &v36);
    v35[0] = 0;
    v35[1] = 0;
    double v34 = (uint64_t *)v35;
    sub_216779094(&v39, "interpretation");
    sub_216779094(&__str, "rgba");
    uint64_t v29 = &v39;
    uint64_t v12 = sub_21677B174(&v34, (const void **)&v39, (uint64_t)&unk_2174BFD90, (long long **)&v29);
    std::string::operator=((std::string *)(v12 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(v39);
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *(**)(void *__return_ptr))(*(void *)a1[1] + 16))(v33);
    if ((qword_267B95F58 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((qword_267B95F58 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
    }
    int v31 = 10;
    char v32 = 4;
    LODWORD(__str.__r_.__value_.__l.__data_) = 3;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v34;
    LODWORD(v29) = 0;
    int v30 = 0;
    v28[0] = 0;
    v28[2] = 0;
    Alembic::Abc::v12::OScalarProperty::OScalarProperty(&v39, v33, EmptyString, &v31, &__str, &v29, v28);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v33);
    uint64_t v17 = v36;
    if (v36 != (uint64_t *)v37)
    {
      do
      {
        double v18 = *((double *)v17 + 4);
        unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *)*((void *)*a1 + 11);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C77A780;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)sub_21714F9AC;
        p_str = &__str;
        sub_217146A60(v19, (uint64_t)&__str, &v45, (Alembic::Abc::v12::OScalarProperty *)&v39, v18);
        sub_217119D70(&__str);
        int v20 = (uint64_t *)v17[1];
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            int v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (uint64_t *)v17[2];
            BOOL v22 = *v21 == (void)v17;
            uint64_t v17 = v21;
          }
          while (!v22);
        }
        uint64_t v17 = v21;
      }
      while (v21 != (uint64_t *)v37);
    }
    sub_217146B60(a1, (uint64_t)&v36);
    Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::Abc::v12::OScalarProperty *)&v39);
    memset(&__str, 0, sizeof(__str));
    sub_2171471F0((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95F58, (uint64_t)&__str, (uint64_t)&v24);
    if (v27) {
      sub_216784EC4(v27);
    }
    if (v26) {
      sub_216784EC4(v26);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v25);
    sub_21697C414(&v24);
    Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v39);
    sub_2167877AC((uint64_t)&v34, v35[0]);
    sub_2167FB780((uint64_t)&v36, v37[0]);
  }
  else
  {
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *(**)(int *__return_ptr))(*(void *)a1[1] + 16))(v38);
    if ((qword_267B95F58 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t v16 = (uint64_t *)((qword_267B95F58 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
    }
    sub_2171498C0((uint64_t *)a1, v38, (pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95F58, (uint64_t)v16);
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v38);
  }
  if (*((void *)&v48 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
  }
  if (v47) {
    sub_216784EC4(v47);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  return sub_21697C414(&v45);
}

void sub_21713E154(_Unwind_Exception *a1)
{
}

void sub_21713E298(uint64_t *a1)
{
  Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(a1[1] + 8), (uint64_t)v6);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    uint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*((void *)v3 + 91) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  std::operator+<char>();
  sub_2171498C0(a1, v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 728), (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v6);
}

void sub_21713E36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_21713E39C(void *a1)
{
  uint64_t v188 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  uint64_t v3 = operator new(0x398uLL);
  uint64_t v4 = *(void *)(a1[1] + 8);
  int v154 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_216778F24(&v155, *(void **)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 16);
    uint64_t v156 = *(void *)(v4 + 32);
    long long v155 = v5;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v153 = &unk_26C7495D0;
  uint64_t v157 = v7;
  uint64_t v158 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)__p);
  sub_217144AF4(a1, (uint64_t)&v164);
  int v148 = 3;
  v150 = &v164;
  int v143 = 0;
  v144[1] = 0;
  int v138 = 0;
  v139[1] = 0;
  sub_21714FE5C((uint64_t)v3, (uint64_t)&v153, (long long *)__p, &v148, &v143, &v138);
  sub_217150B8C(&v159, (uint64_t)v3);
  sub_2167877AC((uint64_t)&v164, *((void **)&v164 + 1));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v153);
  long long v8 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  uint64_t v9 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v159;
  long long v10 = v160;
  if (v160) {
    atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77A520;
  v8->~__shared_weak_count_0 = v9;
  v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v10);
  }
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77ACF8;
  char v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77AD48;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v8;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = (std::__shared_weak_count *)a1[2];
  a1[1] = v8;
  a1[2] = v11;
  if (v12) {
    sub_216784EC4(v12);
  }
  sub_216784EC4(v11);
  *(void *)&__p[8] = 0;
  *(void *)&__p[16] = 0;
  *(void *)long long __p = &__p[8];
  if (a1 + 7 == (void *)__p)
  {
    char v13 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)a1 + 7, &__p[8], &__p[8]);
    char v13 = *(void **)&__p[8];
  }
  sub_2167FB780((uint64_t)__p, v13);
  int v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14) {
    int v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 296), (uint64_t *)v15 + 77, (uint64_t)&v148);
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16) {
    unint64_t v16 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17) {
    uint64_t v17 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 816), (uint64_t *)v17 + 83, (uint64_t)&v143);
  double v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18) {
    double v18 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19) {
    unint64_t v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1216), (uint64_t *)v19 + 86, (uint64_t)&v138);
  int v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20) {
    int v20 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21) {
    uint64_t v21 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 344), (uint64_t *)v21 + 58, (uint64_t)v135);
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22) {
    BOOL v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23) {
    int v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 336), (uint64_t *)v23 + 58, (uint64_t)&v131);
  int v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24) {
    int v24 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  long long v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25) {
    long long v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 704), (uint64_t *)v25 + 89, (uint64_t)&v125);
  uint64_t v26 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
  if (!v26) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  int v27 = *v26;
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (v27)
  {
    if (!v28) {
      uint64_t v28 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29) {
      uint64_t v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    int v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v30) {
      int v30 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_21714BEC4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v28 + 48), (uint64_t *)v29 + 105, (uint64_t *)v30 + 76, (uint64_t)&v118);
  }
  else
  {
    if (!v28) {
      uint64_t v28 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    int v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v31) {
      int v31 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v28 + 48), (uint64_t *)v31 + 105, (uint64_t)&v118);
  }
  if (*(void *)(v123 + 16))
  {
    char v32 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v32) {
      char v32 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    sub_21714BF64(a1, (void *)v32 + 4);
    unint64_t v33 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v33) {
      unint64_t v33 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    double v34 = (void *)((char *)v33 + 40);
  }
  else
  {
    uint64_t v35 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_FLOAT2_AS_UV);
    if (!v35) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    int v36 = *v35;
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (v36)
    {
      if (!v37) {
        uint64_t v37 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v38) {
        uint64_t v38 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      uint64_t v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v39) {
        uint64_t v39 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      sub_21714BEC4((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v37 + 32), (uint64_t *)v38 + 105, (uint64_t *)v39 + 76, (uint64_t)__p);
    }
    else
    {
      if (!v37) {
        uint64_t v37 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      long long v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v40) {
        long long v40 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v37 + 32), (uint64_t *)v40 + 105, (uint64_t)__p);
    }
    sub_21697DE94(&v118, (int *)__p);
    sub_21697DEEC(&v119, (int *)&__p[4]);
    long long v41 = v109;
    long long v42 = *(_OWORD *)&__p[8];
    *(void *)&__p[16] = 0;
    v109 = 0;
    long long v120 = v42;
    long long v43 = v121;
    v121 = v41;
    if (v43) {
      sub_216784EC4(v43);
    }
    long long v44 = v110;
    long long v110 = 0uLL;
    uint64_t v45 = (std::__shared_weak_count *)*((void *)&v122 + 1);
    long long v122 = v44;
    if (v45)
    {
      sub_216784EC4(v45);
      long long v123 = v111;
      uint64_t v124 = v112;
      if (*((void *)&v110 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v110 + 1));
      }
    }
    else
    {
      long long v123 = v111;
      uint64_t v124 = v112;
    }
    if (v109) {
      sub_216784EC4(v109);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&__p[4]);
    sub_21697C414(__p);
    long long v46 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v46) {
      long long v46 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    double v34 = (void *)((char *)v46 + 56);
  }
  sub_21714BF64(a1, v34);
  sub_21714BFFC(a1, v135, (uint64_t)&v131);
  sub_2171513D4((uint64_t)__p);
  v47 = (double *)a1[7];
  if (v47 != (double *)(a1 + 8))
  {
    while (1)
    {
      double v48 = v47[4];
      sub_21714FA68((uint64_t)__p);
      long long v49 = sub_2171489A0((uint64_t)&v148, v48);
      uint64_t v50 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(&v182, v49);
      if (sub_2168FD6AC(v50))
      {
        uint64_t v53 = (v183 & 4) != 0
            ? (*(uint64_t (**)(unint64_t *))((v183 & 0xFFFFFFFFFFFFFFF8) + 168))(&v182)
            : v182;
        v54 = *(float32x2_t **)(v53 + 32);
        float64x2_t v113 = vcvtq_f64_f32(*v54);
        float64x2_t v114 = vcvtq_f64_f32(v54[1]);
        float64x2_t v115 = vcvtq_f64_f32(v54[2]);
      }
      else
      {
        *(void *)&long long v164 = "usdAbc/alembicWriter.cpp";
        *((void *)&v164 + 1) = "_CopySelfBounds";
        __src = (void *)1759;
        int v166 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &,"
               " DST *) [DST = Alembic::AbcGeom::v12::OPolyMeshSchema::Sample]";
        LOBYTE(v167) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v182, v51, v52, (uint64_t)v161);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v161, (uint64_t)v174);
        v56 = v174;
        if (SHIBYTE(v175) < 0) {
          v56 = *(unsigned char **)v174;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v164, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v55, v56);
        if (SHIBYTE(v175) < 0) {
          operator delete(*(void **)v174);
        }
        if (SHIBYTE(v162) < 0) {
          operator delete(v161[0]);
        }
      }
      sub_2168EE084((uint64_t)&v182);
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v147);
      long long v58 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v143, v48);
      LODWORD(v164) = 10;
      BYTE4(v164) = 3;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v147, v58, v2, (uint64_t)Converter, (int *)&v164, 0, (uint64_t)&v182);
      if (sub_217148A90((uint64_t)&v182, &v143, (uint64_t)&v147))
      {
        uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v183 + 16))(v183);
        sub_21714EF5C(&v164, v59, v182 / 3);
        *(void *)long long __p = v164;
        *(void *)&__p[5] = *(void *)((char *)&v164 + 5);
        sub_21677CC7C(&__p[16], (char *)__src, (uint64_t)v166, (v166 - (unsigned char *)__src) >> 3);
        if (__src)
        {
          int v166 = (const char *)__src;
          operator delete(__src);
        }
      }
      long long v60 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v142);
      uint64_t v61 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v138, v48);
      LODWORD(v164) = 10;
      BYTE4(v164) = 3;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v142, v61, v2, (uint64_t)v60, (int *)&v164, 0, (uint64_t)&v104);
      if (sub_217148A90((uint64_t)&v104, &v138, (uint64_t)&v142))
      {
        uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v105 + 16))(v105);
        sub_21714EFF4(&v164, v62, v104 / 3);
        v116[0] = v164;
        *(void *)((char *)v116 + 5) = *(void *)((char *)&v164 + 5);
        sub_21677CC7C(v117, (char *)__src, (uint64_t)v166, (v166 - (unsigned char *)__src) >> 3);
        if (__src)
        {
          int v166 = (const char *)__src;
          operator delete(__src);
        }
      }
      sub_21714FB4C(v2, v135, (uint64_t)__p, (void (*)(void *, void **))sub_21714FCBC, 0, (uint64_t)v101, v48);
      sub_21714FB4C(v2, &v131, (uint64_t)__p, (void (*)(void *, void **))sub_21714FCF4, 0, (uint64_t)v98, v48);
      v63 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v130);
      double v64 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v125, v48);
      LODWORD(v164) = 10;
      BYTE4(v164) = 3;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v130, v64, v2, (uint64_t)v63, (int *)&v164, 0, (uint64_t)&v93);
      if (sub_217148A90((uint64_t)&v93, &v125, (uint64_t)&v130)) {
        break;
      }
LABEL_130:
      int v73 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v124);
      uint64_t v74 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v118, v48);
      LODWORD(v164) = 10;
      BYTE4(v164) = 2;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v124, v74, v2, (uint64_t)v73, (int *)&v164, 0, (uint64_t)&v177);
      if (sub_217148A90((uint64_t)&v177, &v118, (uint64_t)&v124))
      {
        if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
          sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v120 + 136))(&v186);
        if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v186))
        {
          if ((v187 & 4) != 0) {
            v76 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v187 & 0xFFFFFFFFFFFFFFF8) + 168))(&v186);
          }
          else {
            v76 = &v186;
          }
          int v77 = sub_217148184(v76);
        }
        else
        {
          int v77 = 127;
        }
        sub_21714F228((uint64_t)&v177);
        char v78 = v180;
        v79 = v181;
        if (v181) {
          atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v78)
        {
          sub_21714F788(v174, *v78, (v78[1] - *v78) >> 2);
          uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)v178 + 16))(v178);
          sub_21714F820(v161, v80, v177 >> 1);
          sub_2167C729C((uint64_t)&v164, (uint64_t *)v161, (uint64_t *)v174, v77);
          sub_21714FDC8(__p, (uint64_t)&v164);
          if (v170)
          {
            v171 = v170;
            operator delete(v170);
          }
          if (__src)
          {
            int v166 = (const char *)__src;
            operator delete(__src);
          }
          char v81 = v162;
          if (v162)
          {
            v163 = v162;
            goto LABEL_151;
          }
        }
        else
        {
          uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v178 + 16))(v178);
          sub_21714F820(v174, v82, v177 >> 1);
          *(void *)&long long v164 = *(void *)v174;
          *(void *)((char *)&v164 + 5) = *(void *)&v174[5];
          int v166 = 0;
          uint64_t v167 = 0;
          __src = 0;
          sub_21677EA60(&__src, v175, (uint64_t)v176, (v176 - (unsigned char *)v175) >> 3);
          uint64_t v168 = 0;
          uint64_t v169 = 0x100000005;
          v171 = 0;
          uint64_t v172 = 0;
          int v170 = 0;
          int v173 = v77;
          sub_21714FDC8(__p, (uint64_t)&v164);
          if (v170)
          {
            v171 = v170;
            operator delete(v170);
          }
          char v81 = __src;
          if (__src)
          {
            int v166 = (const char *)__src;
LABEL_151:
            operator delete(v81);
          }
        }
        if (v175)
        {
          v176 = v175;
          operator delete(v175);
        }
        if (v79) {
          sub_216784EC4(v79);
        }
        sub_2168EE084((uint64_t)&v186);
      }
      Alembic::AbcGeom::v12::OPolyMeshSchema::set((Alembic::AbcGeom::v12::OPolyMeshSchema *)(v159 + 56), (uint64_t)__p);
      if (v181) {
        sub_216784EC4(v181);
      }
      if (v179) {
        sub_216784EC4(v179);
      }
      if (v97) {
        sub_216784EC4(v97);
      }
      if (v95) {
        sub_216784EC4(v95);
      }
      if (v100) {
        sub_216784EC4(v100);
      }
      if (v99) {
        sub_216784EC4(v99);
      }
      if (v103) {
        sub_216784EC4(v103);
      }
      if (v102) {
        sub_216784EC4(v102);
      }
      if (v107) {
        sub_216784EC4(v107);
      }
      if (v106) {
        sub_216784EC4(v106);
      }
      if (v185) {
        sub_216784EC4(v185);
      }
      if (v184) {
        sub_216784EC4(v184);
      }
      long long v83 = (double *)*((void *)v47 + 1);
      if (v83)
      {
        do
        {
          long long v84 = v83;
          long long v83 = *(double **)v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          long long v84 = (double *)*((void *)v47 + 2);
          BOOL v85 = *(void *)v84 == (void)v47;
          v47 = v84;
        }
        while (!v85);
      }
      v47 = v84;
      if (v84 == (double *)(a1 + 8)) {
        goto LABEL_191;
      }
    }
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
      sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v127 + 136))(&v177);
    if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v177))
    {
      if ((v178 & 4) != 0) {
        v66 = (unint64_t *)(*(uint64_t (**)(unint64_t *))((v178 & 0xFFFFFFFFFFFFFFF8) + 168))(&v177);
      }
      else {
        v66 = &v177;
      }
      int v67 = sub_217148184(v66);
    }
    else
    {
      int v67 = 127;
    }
    sub_217151504((uint64_t)&v93);
    uint64_t v68 = v96;
    int v69 = v97;
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v68)
    {
      sub_21714F788(v174, *v68, (v68[1] - *v68) >> 2);
      uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 16))(v94);
      sub_217151998(v161, v70, v93 / 3);
      sub_2167C8C94((uint64_t)&v164, (uint64_t *)v161, (uint64_t *)v174, v67);
      sub_21714FD2C(__p, (char *)&v164);
      if (v170)
      {
        v171 = v170;
        operator delete(v170);
      }
      if (__src)
      {
        int v166 = (const char *)__src;
        operator delete(__src);
      }
      v71 = v162;
      if (!v162) {
        goto LABEL_125;
      }
      v163 = v162;
    }
    else
    {
      uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 16))(v94);
      sub_217151998(v174, v72, v93 / 3);
      *(void *)&long long v164 = *(void *)v174;
      *(void *)((char *)&v164 + 5) = *(void *)&v174[5];
      int v166 = 0;
      uint64_t v167 = 0;
      __src = 0;
      sub_21677EA60(&__src, v175, (uint64_t)v176, (v176 - (unsigned char *)v175) >> 3);
      uint64_t v168 = 0;
      uint64_t v169 = 0x100000005;
      v171 = 0;
      uint64_t v172 = 0;
      int v170 = 0;
      int v173 = v67;
      sub_21714FD2C(__p, (char *)&v164);
      if (v170)
      {
        v171 = v170;
        operator delete(v170);
      }
      v71 = __src;
      if (!__src) {
        goto LABEL_125;
      }
      int v166 = (const char *)__src;
    }
    operator delete(v71);
LABEL_125:
    if (v175)
    {
      v176 = v175;
      operator delete(v175);
    }
    if (v69) {
      sub_216784EC4(v69);
    }
    sub_2168EE084((uint64_t)&v177);
    goto LABEL_130;
  }
LABEL_191:
  long long v86 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v86) {
    long long v86 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  long long v164 = 0uLL;
  __src = 0;
  sub_2171471F0((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v86 + 1032), (uint64_t)&v164, (uint64_t)&v89);
  if (v92) {
    sub_216784EC4(v92);
  }
  if (v91) {
    sub_216784EC4(v91);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v90);
  sub_21697C414(&v89);
  uint64_t v87 = v159;
  int v88 = sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OPolyMeshSchema::setTimeSampling((Alembic::AbcGeom::v12::OPolyMeshSchema *)(v87 + 56), v88);
  sub_217151A30(__p);
  if (*((void *)&v122 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v122 + 1));
  }
  if (v121) {
    sub_216784EC4(v121);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v119);
  sub_21697C414(&v118);
  if (v129) {
    sub_216784EC4(v129);
  }
  if (v128) {
    sub_216784EC4(v128);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v126);
  sub_21697C414(&v125);
  if (v134) {
    sub_216784EC4(v134);
  }
  if (v133) {
    sub_216784EC4(v133);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v132);
  sub_21697C414(&v131);
  if (v137) {
    sub_216784EC4(v137);
  }
  if (v136) {
    sub_216784EC4(v136);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v135 + 1);
  sub_21697C414(v135);
  if (v141) {
    sub_216784EC4(v141);
  }
  if (v140) {
    sub_216784EC4(v140);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v139);
  sub_21697C414(&v138);
  if (v146) {
    sub_216784EC4(v146);
  }
  if (v145) {
    sub_216784EC4(v145);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v144);
  sub_21697C414(&v143);
  if (v152) {
    sub_216784EC4(v152);
  }
  if (v151) {
    sub_216784EC4(v151);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v149);
  sub_21697C414(&v148);
  if (v160) {
    sub_216784EC4(v160);
  }
}

void sub_21713F6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p)
{
  sub_2168EE084(v48 - 168);
  sub_217151A30(&__p);
  sub_217146FA4((uint64_t)&STACK[0x2B8]);
  sub_217146FA4((uint64_t)&STACK[0x300]);
  sub_217146FA4((uint64_t)&STACK[0x348]);
  sub_217146FA4((uint64_t)&STACK[0x390]);
  sub_217146FA4((uint64_t)&STACK[0x3D8]);
  sub_217146FA4((uint64_t)&STACK[0x420]);
  sub_217146FA4((uint64_t)&STACK[0x468]);
  if (STACK[0x4F0]) {
    sub_216784EC4((std::__shared_weak_count *)STACK[0x4F0]);
  }
  _Unwind_Resume(a1);
}

void sub_21713FA28()
{
}

void sub_21713FA30()
{
}

void sub_21713FA38()
{
}

void sub_21713FA44(void *a1)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  uint64_t v3 = operator new(0x4A8uLL);
  uint64_t v4 = *(void *)(a1[1] + 8);
  int v101 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_216778F24(&v102, *(void **)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 16);
    uint64_t v103 = *(void *)(v4 + 32);
    long long v102 = v5;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  v100 = &unk_26C7495D0;
  uint64_t v104 = v7;
  uint64_t v105 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)&__p);
  sub_217144AF4(a1, (uint64_t)&v95);
  int v90 = 3;
  uint64_t v92 = &v95;
  int v86 = 0;
  v87[1] = 0;
  int v82 = 0;
  v83[1] = 0;
  sub_217152CB8((uint64_t)v3, (uint64_t)&v100, (long long *)__p.i8, &v90, &v86, &v82);
  sub_217154C54(&v106, (uint64_t)v3);
  sub_2167877AC((uint64_t)&v95, v97);
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)__p.i64[0]);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v100);
  sub_217151AD4(&__p, &v106);
  int64x2_t v8 = __p;
  if (__p.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  *(int64x2_t *)(a1 + 1) = v8;
  if (v9) {
    sub_216784EC4(v9);
  }
  if (__p.i64[1]) {
    sub_216784EC4((std::__shared_weak_count *)__p.i64[1]);
  }
  __p.i64[1] = 0;
  uint64_t v58 = 0;
  __p.i64[0] = (uint64_t)&__p.i64[1];
  if (a1 + 7 == (void *)&__p)
  {
    long long v10 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)a1 + 7, &__p.i64[1], &__p.i64[1]);
    long long v10 = (void *)__p.i64[1];
  }
  sub_2167FB780((uint64_t)&__p, v10);
  char v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11) {
    char v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v12) {
    uint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v11 + 296), (uint64_t *)v12 + 77, (uint64_t)&v95);
  char v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v13) {
    char v13 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v14) {
    int v14 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v13 + 816), (uint64_t *)v14 + 83, (uint64_t)&v90);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v15) {
    uint64_t v15 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v16) {
    unint64_t v16 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v15 + 1216), (uint64_t *)v16 + 86, (uint64_t)&v86);
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v17) {
    uint64_t v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  double v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v18) {
    double v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v17 + 704), (uint64_t *)v18 + 89, (uint64_t)&v82);
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v19) {
    unint64_t v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v20) {
    int v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v19 + 224), (uint64_t *)v20 + 58, (uint64_t)&v78);
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v21) {
    uint64_t v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v22) {
    BOOL v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v21 + 1312), (uint64_t *)v22 + 64, (uint64_t)&v74);
  int v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v23) {
    int v23 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v24) {
    int v24 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v23 + 512), (uint64_t *)v24 + 65, (uint64_t)&v69);
  long long v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v25) {
    long long v25 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v26) {
    uint64_t v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v25 + 720), (uint64_t *)v26 + 58, (uint64_t)&v64);
  sub_21715549C((uint64_t)&__p);
  int v27 = (double *)a1[7];
  if (v27 != (double *)(a1 + 8))
  {
    do
    {
      double v28 = v27[4];
      sub_217151BB8(&__p);
      sub_217151CDC((uint64_t)&v95, (uint64_t)&__p, v28);
      sub_217151E7C(v2, &v90, (uint64_t)&__p, (uint64_t)v54, v28);
      sub_217151FF4(v2, &v86, (uint64_t)&__p, (uint64_t)v51, v28);
      sub_217152170(v2, (uint64_t)&v82, __p.i8, (uint64_t)v48, v28);
      sub_2171525C8(v2, &v78, (uint64_t)&__p, (uint64_t)v45, v28);
      sub_217152734(v2, (uint64_t)&v74, __p.i8, (uint64_t)v42, v28);
      uint64_t v112 = &unk_26C77A780;
      float64x2_t v113 = sub_217152B64;
      float64x2_t v115 = &v112;
      uint64_t v29 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v69, v28);
      *(_DWORD *)v108 = 10;
      v108[4] = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73, v29, v2, (uint64_t)&v112, (int *)v108, 1, (uint64_t)&v38);
      if (sub_217148A90((uint64_t)&v38, &v69, (uint64_t)&v73))
      {
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 16))(v39);
        sub_21714F190(v108, v30, v38);
        v62[0] = *(void *)v108;
        *(void *)((char *)v62 + 5) = *(void *)&v108[5];
        sub_21677CC7C(v63, v109, (uint64_t)v110, (v110 - v109) >> 3);
        if (v109)
        {
          long long v110 = v109;
          operator delete(v109);
        }
      }
      sub_217119D70(&v112);
      v111[0] = &unk_26C77A780;
      v111[1] = sub_217152C10;
      v111[3] = v111;
      int v31 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v64, v28);
      *(_DWORD *)v108 = 1;
      v108[4] = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v68, v31, v2, (uint64_t)v111, (int *)v108, 1, (uint64_t)&v112);
      if (sub_217148A90((uint64_t)&v112, &v64, (uint64_t)&v68))
      {
        uint64_t v32 = (*(uint64_t (**)(void (*)(uint64_t@<X0>, int64_t *@<X8>)))(*(void *)v113
                                                                                                  + 16))(v113);
        sub_217155BA8(v108, v32, (uint64_t)v112);
        v60[0] = *(void *)v108;
        *(void *)((char *)v60 + 5) = *(void *)&v108[5];
        sub_21677CC7C(v61, v109, (uint64_t)v110, (v110 - v109) >> 3);
        if (v109)
        {
          long long v110 = v109;
          operator delete(v109);
        }
      }
      sub_217119D70(v111);
      int v59 = 2;
      Alembic::AbcGeom::v12::OCurvesSchema::set((Alembic::AbcGeom::v12::OCurvesSchema *)(v106 + 56), (uint64_t)&__p);
      if (v116) {
        sub_216784EC4(v116);
      }
      if (v114) {
        sub_216784EC4(v114);
      }
      if (v41) {
        sub_216784EC4(v41);
      }
      if (v40) {
        sub_216784EC4(v40);
      }
      if (v44) {
        sub_216784EC4(v44);
      }
      if (v43) {
        sub_216784EC4(v43);
      }
      if (v47) {
        sub_216784EC4(v47);
      }
      if (v46) {
        sub_216784EC4(v46);
      }
      if (v50) {
        sub_216784EC4(v50);
      }
      if (v49) {
        sub_216784EC4(v49);
      }
      if (v53) {
        sub_216784EC4(v53);
      }
      if (v52) {
        sub_216784EC4(v52);
      }
      if (v56) {
        sub_216784EC4(v56);
      }
      if (v55) {
        sub_216784EC4(v55);
      }
      unint64_t v33 = (double *)*((void *)v27 + 1);
      if (v33)
      {
        do
        {
          double v34 = v33;
          unint64_t v33 = *(double **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          double v34 = (double *)*((void *)v27 + 2);
          BOOL v35 = *(void *)v34 == (void)v27;
          int v27 = v34;
        }
        while (!v35);
      }
      int v27 = v34;
    }
    while (v34 != (double *)(a1 + 8));
  }
  uint64_t v36 = v106;
  int v37 = sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)(v36 + 56), v37);
  sub_217155D4C(&__p);
  if (v67) {
    sub_216784EC4(v67);
  }
  if (v66) {
    sub_216784EC4(v66);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v65);
  sub_21697C414(&v64);
  if (v72) {
    sub_216784EC4(v72);
  }
  if (v71) {
    sub_216784EC4(v71);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v70);
  sub_21697C414(&v69);
  if (v77) {
    sub_216784EC4(v77);
  }
  if (v76) {
    sub_216784EC4(v76);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v75);
  sub_21697C414(&v74);
  if (v81) {
    sub_216784EC4(v81);
  }
  if (v80) {
    sub_216784EC4(v80);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v79);
  sub_21697C414(&v78);
  if (v85) {
    sub_216784EC4(v85);
  }
  if (v84) {
    sub_216784EC4(v84);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v83);
  sub_21697C414(&v82);
  if (v89) {
    sub_216784EC4(v89);
  }
  if (v88) {
    sub_216784EC4(v88);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v87);
  sub_21697C414(&v86);
  if (v94) {
    sub_216784EC4(v94);
  }
  if (v93) {
    sub_216784EC4(v93);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v91);
  sub_21697C414(&v90);
  if (v99) {
    sub_216784EC4(v99);
  }
  if (v98) {
    sub_216784EC4(v98);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v96);
  sub_21697C414(&v95);
  if (v107) {
    sub_216784EC4(v107);
  }
}

void sub_2171403F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_217140634(void *a1)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  uint64_t v3 = operator new(0x4A8uLL);
  uint64_t v4 = *(void *)(a1[1] + 8);
  int v101 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_216778F24(&v102, *(void **)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 16);
    uint64_t v103 = *(void *)(v4 + 32);
    long long v102 = v5;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  v100 = &unk_26C7495D0;
  uint64_t v104 = v7;
  uint64_t v105 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)&__p);
  sub_217144AF4(a1, (uint64_t)&v95);
  int v90 = 3;
  uint64_t v92 = &v95;
  int v86 = 0;
  v87[1] = 0;
  int v82 = 0;
  v83[1] = 0;
  sub_217152CB8((uint64_t)v3, (uint64_t)&v100, (long long *)__p.i8, &v90, &v86, &v82);
  sub_217154C54(&v106, (uint64_t)v3);
  sub_2167877AC((uint64_t)&v95, v97);
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)__p.i64[0]);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v100);
  sub_217151AD4(&__p, &v106);
  int64x2_t v8 = __p;
  if (__p.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  *(int64x2_t *)(a1 + 1) = v8;
  if (v9) {
    sub_216784EC4(v9);
  }
  if (__p.i64[1]) {
    sub_216784EC4((std::__shared_weak_count *)__p.i64[1]);
  }
  __p.i64[1] = 0;
  uint64_t v55 = 0;
  __p.i64[0] = (uint64_t)&__p.i64[1];
  if (a1 + 7 == (void *)&__p)
  {
    long long v10 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)a1 + 7, &__p.i64[1], &__p.i64[1]);
    long long v10 = (void *)__p.i64[1];
  }
  sub_2167FB780((uint64_t)&__p, v10);
  char v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11) {
    char v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v12) {
    uint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v11 + 296), (uint64_t *)v12 + 77, (uint64_t)&v95);
  char v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v13) {
    char v13 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v14) {
    int v14 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v13 + 816), (uint64_t *)v14 + 83, (uint64_t)&v90);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v15) {
    uint64_t v15 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v16) {
    unint64_t v16 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v15 + 1216), (uint64_t *)v16 + 86, (uint64_t)&v86);
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v17) {
    uint64_t v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  double v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v18) {
    double v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v17 + 704), (uint64_t *)v18 + 89, (uint64_t)&v82);
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v19) {
    unint64_t v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v20) {
    int v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v19 + 224), (uint64_t *)v20 + 58, (uint64_t)&v78);
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v21) {
    uint64_t v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v22) {
    BOOL v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v21 + 1312), (uint64_t *)v22 + 64, (uint64_t)&v74);
  int v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v23) {
    int v23 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v24) {
    int v24 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v23 + 32), (uint64_t *)v24 + 11, (uint64_t)&v69);
  long long v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v25) {
    long long v25 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v26) {
    uint64_t v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v25 + 1128), (uint64_t *)v26 + 11, (uint64_t)&v64);
  int v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v27) {
    int v27 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  double v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v28) {
    double v28 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v27 + 1320), (uint64_t *)v28 + 11, (uint64_t)&v59);
  sub_21715549C((uint64_t)&__p);
  uint64_t v29 = (double *)a1[7];
  if (v29 != (double *)(a1 + 8))
  {
    do
    {
      double v30 = v29[4];
      sub_217151BB8(&__p);
      sub_217151CDC((uint64_t)&v95, (uint64_t)&__p, v30);
      sub_217151E7C(v2, &v90, (uint64_t)&__p, (uint64_t)v51, v30);
      sub_217151FF4(v2, &v86, (uint64_t)&__p, (uint64_t)v48, v30);
      sub_217152170(v2, (uint64_t)&v82, __p.i8, (uint64_t)v45, v30);
      sub_2171525C8(v2, &v78, (uint64_t)&__p, (uint64_t)v42, v30);
      sub_217152734(v2, (uint64_t)&v74, __p.i8, (uint64_t)&v39, v30);
      float64x2_t v114 = &unk_26C77A780;
      float64x2_t v115 = sub_217155E30;
      v116 = &v114;
      int v31 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v69, v30);
      int v112 = 1;
      char v113 = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v73, v31, v2, (uint64_t)&v114, &v112, 1, (uint64_t)v108);
      if (sub_217148A90((uint64_t)v108, &v69, (uint64_t)&v73)) {
        int v58 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v109 + 16))(v109);
      }
      if (v111) {
        sub_216784EC4(v111);
      }
      if (v110) {
        sub_216784EC4(v110);
      }
      sub_217119D70(&v114);
      float64x2_t v114 = &unk_26C77A780;
      float64x2_t v115 = sub_2171560B0;
      v116 = &v114;
      uint64_t v32 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v64, v30);
      int v112 = 1;
      char v113 = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v68, v32, v2, (uint64_t)&v114, &v112, 1, (uint64_t)v108);
      if (sub_217148A90((uint64_t)v108, &v64, (uint64_t)&v68)) {
        int v56 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v109 + 16))(v109);
      }
      if (v111) {
        sub_216784EC4(v111);
      }
      if (v110) {
        sub_216784EC4(v110);
      }
      sub_217119D70(&v114);
      float64x2_t v114 = &unk_26C77A780;
      float64x2_t v115 = sub_21715628C;
      v116 = &v114;
      unint64_t v33 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v59, v30);
      int v112 = 1;
      char v113 = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v63, v33, v2, (uint64_t)&v114, &v112, 1, (uint64_t)v108);
      if (sub_217148A90((uint64_t)v108, &v59, (uint64_t)&v63)) {
        int v57 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v109 + 16))(v109);
      }
      if (v111) {
        sub_216784EC4(v111);
      }
      if (v110) {
        sub_216784EC4(v110);
      }
      sub_217119D70(&v114);
      Alembic::AbcGeom::v12::OCurvesSchema::set((Alembic::AbcGeom::v12::OCurvesSchema *)(v106 + 56), (uint64_t)&__p);
      if (v41) {
        sub_216784EC4(v41);
      }
      if (v40) {
        sub_216784EC4(v40);
      }
      if (v44) {
        sub_216784EC4(v44);
      }
      if (v43) {
        sub_216784EC4(v43);
      }
      if (v47) {
        sub_216784EC4(v47);
      }
      if (v46) {
        sub_216784EC4(v46);
      }
      if (v50) {
        sub_216784EC4(v50);
      }
      if (v49) {
        sub_216784EC4(v49);
      }
      if (v53) {
        sub_216784EC4(v53);
      }
      if (v52) {
        sub_216784EC4(v52);
      }
      double v34 = (double *)*((void *)v29 + 1);
      if (v34)
      {
        do
        {
          BOOL v35 = v34;
          double v34 = *(double **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          BOOL v35 = (double *)*((void *)v29 + 2);
          BOOL v36 = *(void *)v35 == (void)v29;
          uint64_t v29 = v35;
        }
        while (!v36);
      }
      uint64_t v29 = v35;
    }
    while (v35 != (double *)(a1 + 8));
  }
  uint64_t v37 = v106;
  int v38 = sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)(v37 + 56), v38);
  sub_217155D4C(&__p);
  if (v62) {
    sub_216784EC4(v62);
  }
  if (v61) {
    sub_216784EC4(v61);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v60);
  sub_21697C414(&v59);
  if (v67) {
    sub_216784EC4(v67);
  }
  if (v66) {
    sub_216784EC4(v66);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v65);
  sub_21697C414(&v64);
  if (v72) {
    sub_216784EC4(v72);
  }
  if (v71) {
    sub_216784EC4(v71);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v70);
  sub_21697C414(&v69);
  if (v77) {
    sub_216784EC4(v77);
  }
  if (v76) {
    sub_216784EC4(v76);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v75);
  sub_21697C414(&v74);
  if (v81) {
    sub_216784EC4(v81);
  }
  if (v80) {
    sub_216784EC4(v80);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v79);
  sub_21697C414(&v78);
  if (v85) {
    sub_216784EC4(v85);
  }
  if (v84) {
    sub_216784EC4(v84);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v83);
  sub_21697C414(&v82);
  if (v89) {
    sub_216784EC4(v89);
  }
  if (v88) {
    sub_216784EC4(v88);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v87);
  sub_21697C414(&v86);
  if (v94) {
    sub_216784EC4(v94);
  }
  if (v93) {
    sub_216784EC4(v93);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v91);
  sub_21697C414(&v90);
  if (v99) {
    sub_216784EC4(v99);
  }
  if (v98) {
    sub_216784EC4(v98);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v96);
  sub_21697C414(&v95);
  if (v107) {
    sub_216784EC4(v107);
  }
}

void sub_21714107C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_217141278(void *a1)
{
  v109[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  uint64_t v3 = operator new(0x4A8uLL);
  uint64_t v4 = *(void *)(a1[1] + 8);
  int v98 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_216778F24(&v99, *(void **)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 16);
    uint64_t v100 = *(void *)(v4 + 32);
    long long v99 = v5;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  int v97 = &unk_26C7495D0;
  uint64_t v101 = v7;
  uint64_t v102 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)&__p);
  sub_217144AF4(a1, (uint64_t)v55);
  int v92 = 3;
  uint64_t v94 = v55;
  int v88 = 0;
  v89[1] = 0;
  int v84 = 0;
  v85[1] = 0;
  sub_217152CB8((uint64_t)v3, (uint64_t)&v97, (long long *)__p.i8, &v92, &v88, &v84);
  sub_217154C54(&v103, (uint64_t)v3);
  sub_2167877AC((uint64_t)v55, (void *)v55[1]);
  if (SHIBYTE(v63[0]) < 0) {
    operator delete((void *)__p.i64[0]);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v97);
  sub_217151AD4(&__p, &v103);
  int64x2_t v8 = __p;
  if (__p.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  *(int64x2_t *)(a1 + 1) = v8;
  if (v9) {
    sub_216784EC4(v9);
  }
  if (__p.i64[1]) {
    sub_216784EC4((std::__shared_weak_count *)__p.i64[1]);
  }
  __p.i64[1] = 0;
  v63[0] = 0;
  __p.i64[0] = (uint64_t)&__p.i64[1];
  if (a1 + 7 == (void *)&__p)
  {
    long long v10 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)a1 + 7, &__p.i64[1], &__p.i64[1]);
    long long v10 = (void *)__p.i64[1];
  }
  sub_2167FB780((uint64_t)&__p, v10);
  char v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11) {
    char v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v12) {
    uint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v11 + 296), (uint64_t *)v12 + 77, (uint64_t)&v92);
  char v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v13) {
    char v13 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v14) {
    int v14 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v13 + 816), (uint64_t *)v14 + 83, (uint64_t)&v88);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v15) {
    uint64_t v15 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v16) {
    unint64_t v16 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v15 + 1048), (uint64_t *)v16 + 86, (uint64_t)&v84);
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v17) {
    uint64_t v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  double v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v18) {
    double v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v17 + 1216), (uint64_t *)v18 + 86, (uint64_t)&v79);
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v19) {
    unint64_t v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v20) {
    int v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v19 + 704), (uint64_t *)v20 + 89, (uint64_t)&v75);
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v21) {
    uint64_t v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v22) {
    BOOL v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v21 + 224), (uint64_t *)v22 + 58, (uint64_t)&v71);
  int v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v23) {
    int v23 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v24) {
    int v24 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v23 + 1312), (uint64_t *)v24 + 64, (uint64_t)&v67);
  if (*(void *)(v83 + 16))
  {
    __p.i64[0] = (uint64_t)"usdAbc/alembicWriter.cpp";
    __p.i64[1] = (uint64_t)"_WriteHermiteCurves";
    v63[0] = 3378;
    v63[1] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_WriteHermiteCurves(_PrimWriterContext *)";
    char v64 = 0;
    sub_216981010(v55, &v79);
    sub_21698105C((_DWORD *)v55 + 1, v80);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v55);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Writing '%s' from HermiteCurves to AbcGeom::OCurvesSchema is undefined.", v26, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v55 + 1);
    sub_21697C414(v55);
  }
  sub_21715549C((uint64_t)&__p);
  int v27 = (double *)a1[7];
  if (v27 != (double *)(a1 + 8))
  {
    do
    {
      double v28 = v27[4];
      sub_217151BB8(&__p);
      sub_217151CDC((uint64_t)&v92, (uint64_t)&__p, v28);
      uint64_t v29 = sub_2171489A0((uint64_t)&v88, v28);
      sub_2168EE4C4(v109, v29);
      double v30 = sub_2171489A0((uint64_t)&v84, v28);
      sub_2168EE4C4(v108, v30);
      sub_217148CAC(&v59);
      uint64_t v31 = sub_2168FDC2C((pxrInternal__aapl__pxrReserved__::VtValue *)v109);
      uint64_t v32 = (long long *)sub_2168FDC2C((pxrInternal__aapl__pxrReserved__::VtValue *)v108);
      sub_217156540((uint64_t)v55, v31, v32);
      if (v55[0])
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::Interleave((pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays *)v55, (uint64_t)&v52);
        unint64_t v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v33) {
          unint64_t v33 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        double v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v33 + 664);
        Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v33 + 664));
        v107[1] = off_26C74F110;
        BOOL v36 = operator new(0x30uLL);
        long long v37 = v53;
        *(_OWORD *)BOOL v36 = v52;
        *((_OWORD *)v36 + 1) = v37;
        int v38 = v54;
        *((void *)v36 + 4) = v54;
        if (v38)
        {
          p_shared_owners = &v38[-1].__shared_owners_;
          if (*((void *)v36 + 3)) {
            p_shared_owners = (atomic_ullong *)*((void *)v36 + 3);
          }
          atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        }
        atomic_store(0, (unsigned int *)v36 + 10);
        v107[0] = v36;
        atomic_fetch_add_explicit((atomic_uint *volatile)v36 + 10, 1u, memory_order_relaxed);
        int v105 = 10;
        char v106 = 3;
        sub_21714849C(v34, (pxrInternal__aapl__pxrReserved__::VtValue *)v107, v2, (uint64_t)Converter, &v105, 0, (uint64_t)v50);
        unint64_t v59 = *(void *)v50;
        long long v40 = *(_OWORD *)&v50[8];
        *(void *)&v50[8] = 0;
        *(void *)&v50[16] = 0;
        long long v41 = (std::__shared_weak_count *)*((void *)&v60 + 1);
        long long v60 = v40;
        if (v41) {
          sub_216784EC4(v41);
        }
        long long v42 = v51;
        long long v51 = 0uLL;
        long long v43 = (std::__shared_weak_count *)*((void *)&v61 + 1);
        long long v61 = v42;
        if (v43)
        {
          sub_216784EC4(v43);
          if (*((void *)&v51 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v51 + 1));
          }
        }
        if (*(void *)&v50[16]) {
          sub_216784EC4(*(std::__shared_weak_count **)&v50[16]);
        }
        sub_2168EE084((uint64_t)v107);
        if (sub_217148A90((uint64_t)&v59, &v88, (uint64_t)v34))
        {
          uint64_t v44 = (*(uint64_t (**)(void))(*(void *)v60 + 16))(v60);
          sub_21714EF5C(v50, v44, v59 / 3);
          __p.i64[0] = *(void *)v50;
          *(uint64_t *)((char *)__p.i64 + 5) = *(void *)&v50[5];
          sub_21677CC7C((char *)v63, *(char **)&v50[16], v51, (uint64_t)(v51 - *(void *)&v50[16]) >> 3);
          if (*(void *)&v50[16])
          {
            *(void *)&long long v51 = *(void *)&v50[16];
            operator delete(*(void **)&v50[16]);
          }
        }
        sub_2168F83DC((uint64_t)&v52);
      }
      sub_2168F83DC((uint64_t)&v58);
      sub_2168F83DC((uint64_t)v55);
      sub_217152170(v2, (uint64_t)&v75, __p.i8, (uint64_t)v55, v28);
      sub_2171525C8(v2, &v71, (uint64_t)&__p, (uint64_t)&v52, v28);
      sub_217152734(v2, (uint64_t)&v67, __p.i8, (uint64_t)v50, v28);
      int v66 = 4;
      uint64_t v65 = 0;
      Alembic::AbcGeom::v12::OCurvesSchema::set((Alembic::AbcGeom::v12::OCurvesSchema *)(v103 + 56), (uint64_t)&__p);
      if (*((void *)&v51 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v51 + 1));
      }
      if (*(void *)&v50[16]) {
        sub_216784EC4(*(std::__shared_weak_count **)&v50[16]);
      }
      if (v54) {
        sub_216784EC4(v54);
      }
      if ((void)v53) {
        sub_216784EC4((std::__shared_weak_count *)v53);
      }
      if (v57) {
        sub_216784EC4(v57);
      }
      if (v56) {
        sub_216784EC4(v56);
      }
      if (*((void *)&v61 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v61 + 1));
      }
      if (*((void *)&v60 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v60 + 1));
      }
      sub_2168EE084((uint64_t)v108);
      sub_2168EE084((uint64_t)v109);
      uint64_t v45 = (double *)*((void *)v27 + 1);
      if (v45)
      {
        do
        {
          long long v46 = v45;
          uint64_t v45 = *(double **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          long long v46 = (double *)*((void *)v27 + 2);
          BOOL v47 = *(void *)v46 == (void)v27;
          int v27 = v46;
        }
        while (!v47);
      }
      int v27 = v46;
    }
    while (v46 != (double *)(a1 + 8));
  }
  uint64_t v48 = v103;
  int v49 = sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OCurvesSchema::setTimeSampling((Alembic::AbcGeom::v12::OCurvesSchema *)(v48 + 56), v49);
  sub_217155D4C(&__p);
  if (v70) {
    sub_216784EC4(v70);
  }
  if (v69) {
    sub_216784EC4(v69);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
  sub_21697C414(&v67);
  if (v74) {
    sub_216784EC4(v74);
  }
  if (v73) {
    sub_216784EC4(v73);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v72);
  sub_21697C414(&v71);
  if (v78) {
    sub_216784EC4(v78);
  }
  if (v77) {
    sub_216784EC4(v77);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v76);
  sub_21697C414(&v75);
  if (v82) {
    sub_216784EC4(v82);
  }
  if (v81) {
    sub_216784EC4(v81);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v80);
  sub_21697C414(&v79);
  if (v87) {
    sub_216784EC4(v87);
  }
  if (v86) {
    sub_216784EC4(v86);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v85);
  sub_21697C414(&v84);
  if (v91) {
    sub_216784EC4(v91);
  }
  if (v90) {
    sub_216784EC4(v90);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v89);
  sub_21697C414(&v88);
  if (v96) {
    sub_216784EC4(v96);
  }
  if (v95) {
    sub_216784EC4(v95);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v93);
  sub_21697C414(&v92);
  if (v104) {
    sub_216784EC4(v104);
  }
}

void sub_217141C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p)
{
  sub_2168F83DC((uint64_t)&a19);
  sub_217156504((uint64_t)&a24);
  sub_217148C70((uint64_t)&a34);
  sub_2168EE084(v39 - 144);
  sub_2168EE084(v39 - 128);
  sub_217155D4C(&__p);
  sub_217146FA4((uint64_t)&STACK[0x328]);
  sub_217146FA4((uint64_t)&STACK[0x370]);
  sub_217146FA4((uint64_t)&STACK[0x3B8]);
  sub_217146FA4((uint64_t)&STACK[0x400]);
  sub_217146FA4((uint64_t)&STACK[0x448]);
  sub_217146FA4((uint64_t)&STACK[0x490]);
  sub_217146FA4((uint64_t)&STACK[0x4D8]);
  long long v41 = *(std::__shared_weak_count **)(v39 - 176);
  if (v41) {
    sub_216784EC4(v41);
  }
  _Unwind_Resume(a1);
}

void sub_217141E60(void *a1)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  uint64_t v3 = operator new(0x288uLL);
  uint64_t v4 = *(void *)(a1[1] + 8);
  int v108 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_216778F24(&v109, *(void **)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 16);
    uint64_t v110 = *(void *)(v4 + 32);
    long long v109 = v5;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  v107 = &unk_26C7495D0;
  uint64_t v111 = v7;
  uint64_t v112 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)&__p);
  sub_217144AF4(a1, (uint64_t)&v115);
  int v102 = 3;
  uint64_t v104 = &v115;
  int v97 = 0;
  v98[1] = 0;
  int v92 = 0;
  v93[1] = 0;
  sub_2171568B8((uint64_t)v3, (uint64_t)&v107, &__p, &v102, &v97, &v92);
  sub_2171574EC(&v113, (uint64_t)v3);
  sub_2167877AC((uint64_t)&v115, *((void **)&v115 + 1));
  if (SHIBYTE(v68[0]) < 0) {
    operator delete((void *)__p);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v107);
  int64x2_t v8 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  uint64_t v9 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v113;
  long long v10 = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77A520;
  v8->~__shared_weak_count_0 = v9;
  v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v10);
  }
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77B198;
  char v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77B1E8;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v8;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = (std::__shared_weak_count *)a1[2];
  a1[1] = v8;
  a1[2] = v11;
  if (v12) {
    sub_216784EC4(v12);
  }
  sub_216784EC4(v11);
  *((void *)&__p + 1) = 0;
  v68[0] = 0;
  *(void *)&long long __p = (char *)&__p + 8;
  if (a1 + 7 == (void *)&__p)
  {
    char v13 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)a1 + 7, (void *)&__p + 1, (void *)&__p + 1);
    char v13 = (void *)*((void *)&__p + 1);
  }
  sub_2167FB780((uint64_t)&__p, v13);
  int v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14) {
    int v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 296), (uint64_t *)v15 + 77, (uint64_t)&v102);
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16) {
    unint64_t v16 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17) {
    uint64_t v17 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 816), (uint64_t *)v17 + 83, (uint64_t)&v97);
  double v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18) {
    double v18 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19) {
    unint64_t v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1216), (uint64_t *)v19 + 86, (uint64_t)&v92);
  int v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20) {
    int v20 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21) {
    uint64_t v21 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 1312), (uint64_t *)v21 + 64, (uint64_t)&v86);
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22) {
    BOOL v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23) {
    int v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 448), (uint64_t *)v23 + 61, (uint64_t)&v81);
  sub_217157D34((uint64_t)&__p);
  int v24 = (double *)a1[7];
  if (v24 != (double *)(a1 + 8))
  {
    char v25 = 1;
    while (1)
    {
      double v26 = v24[4];
      sub_217156658((uint64_t)&__p);
      int v27 = sub_2171489A0((uint64_t)&v102, v26);
      double v28 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(&v129, v27);
      if (sub_2168FD6AC(v28))
      {
        uint64_t v31 = (v130 & 4) != 0
            ? (*(uint64_t (**)(unint64_t *))((v130 & 0xFFFFFFFFFFFFFFF8) + 168))(&v129)
            : v129;
        uint64_t v32 = *(float32x2_t **)(v31 + 32);
        float64x2_t v78 = vcvtq_f64_f32(*v32);
        float64x2_t v79 = vcvtq_f64_f32(v32[1]);
        float64x2_t v80 = vcvtq_f64_f32(v32[2]);
      }
      else
      {
        *(void *)&long long v115 = "usdAbc/alembicWriter.cpp";
        *((void *)&v115 + 1) = "_CopySelfBounds";
        __src = (void *)1759;
        uint64_t v117 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &,"
               " DST *) [DST = Alembic::AbcGeom::v12::OPointsSchema::Sample]";
        LOBYTE(v118) = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v129, v29, v30, (uint64_t)v133);
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v133, (uint64_t)&v125);
        double v34 = &v125;
        if (SHIBYTE(v126) < 0) {
          double v34 = (long long *)v125;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v115, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v33, v34);
        if (SHIBYTE(v126) < 0) {
          operator delete((void *)v125);
        }
        if (SHIBYTE(v134) < 0) {
          operator delete(v133[0]);
        }
      }
      sub_2168EE084((uint64_t)&v129);
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v101);
      BOOL v36 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v97, v26);
      LODWORD(v115) = 10;
      BYTE4(v115) = 3;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v101, v36, v2, (uint64_t)Converter, (int *)&v115, 0, (uint64_t)&v129);
      if (sub_217148A90((uint64_t)&v129, &v97, (uint64_t)&v101))
      {
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v130 + 16))(v130);
        sub_21714EF5C(&v115, v37, v129 / 3);
        *(void *)&long long __p = v115;
        *(void *)((char *)&__p + 5) = *(void *)((char *)&v115 + 5);
        sub_21677CC7C((char *)v68, (char *)__src, (uint64_t)v117, (v117 - (unsigned char *)__src) >> 3);
        if (__src)
        {
          uint64_t v117 = (const char *)__src;
          operator delete(__src);
        }
      }
      int v38 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v96);
      uint64_t v39 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v92, v26);
      LODWORD(v115) = 10;
      BYTE4(v115) = 3;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v96, v39, v2, (uint64_t)v38, (int *)&v115, 0, (uint64_t)&v63);
      if (sub_217148A90((uint64_t)&v63, &v92, (uint64_t)&v96))
      {
        uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 16))(v64);
        sub_21714EFF4(&v115, v40, v63 / 3);
        v69[0] = v115;
        *(void *)((char *)v69 + 5) = *(void *)((char *)&v115 + 5);
        sub_21677CC7C((char *)v70, (char *)__src, (uint64_t)v117, (v117 - (unsigned char *)__src) >> 3);
        if (__src)
        {
          uint64_t v117 = (const char *)__src;
          operator delete(__src);
        }
      }
      long long v41 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v91);
      long long v42 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v86, v26);
      LODWORD(v115) = 10;
      BYTE4(v115) = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v91, v42, v2, (uint64_t)v41, (int *)&v115, 0, (uint64_t)&v58);
      if (sub_217148A90((uint64_t)&v58, &v86, (uint64_t)&v91)) {
        break;
      }
LABEL_82:
      v133[0] = &unk_26C77A780;
      v133[1] = sub_217156798;
      long long v135 = v133;
      long long v51 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v81, v26);
      LODWORD(v115) = 7;
      BYTE4(v115) = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v85, v51, v2, (uint64_t)v133, (int *)&v115, 1, (uint64_t)&v125);
      if (sub_217148A90((uint64_t)&v125, &v81, (uint64_t)&v85))
      {
        uint64_t v52 = (*(uint64_t (**)(void))(**((void **)&v125 + 1) + 16))(*((void *)&v125 + 1));
        sub_217157F30(&v115, v52, v125);
        *(void *)int v71 = v115;
        *(void *)&v71[5] = *(void *)((char *)&v115 + 5);
        sub_21677CC7C((char *)&v72, (char *)__src, (uint64_t)v117, (v117 - (unsigned char *)__src) >> 3);
        if (__src)
        {
          uint64_t v117 = (const char *)__src;
          operator delete(__src);
        }
      }
      sub_217119D70(v133);
      if (v25)
      {
        if (*(_DWORD *)&v71[8] != 127 && (*(void *)v71 || v73 != v72))
        {
          char v25 = 1;
          goto LABEL_93;
        }
        sub_217157F30(&v115, (uint64_t)&unk_2174C2468, 0);
        *(void *)int v71 = v115;
        *(void *)&v71[5] = *(void *)((char *)&v115 + 5);
        sub_21677CC7C((char *)&v72, (char *)__src, (uint64_t)v117, (v117 - (unsigned char *)__src) >> 3);
        if (__src)
        {
          uint64_t v117 = (const char *)__src;
          operator delete(__src);
        }
      }
      char v25 = 0;
LABEL_93:
      Alembic::AbcGeom::v12::OPointsSchema::set((Alembic::AbcGeom::v12::OPointsSchema *)(v113 + 56), (uint64_t)&__p);
      if (v128) {
        sub_216784EC4(v128);
      }
      if (v126) {
        sub_216784EC4(v126);
      }
      if (v62) {
        sub_216784EC4(v62);
      }
      if (v60) {
        sub_216784EC4(v60);
      }
      if (v66) {
        sub_216784EC4(v66);
      }
      if (v65) {
        sub_216784EC4(v65);
      }
      if (v132) {
        sub_216784EC4(v132);
      }
      if (v131) {
        sub_216784EC4(v131);
      }
      long long v53 = (double *)*((void *)v24 + 1);
      if (v53)
      {
        do
        {
          v54 = v53;
          long long v53 = *(double **)v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (double *)*((void *)v24 + 2);
          BOOL v55 = *(void *)v54 == (void)v24;
          int v24 = v54;
        }
        while (!v55);
      }
      int v24 = v54;
      if (v54 == (double *)(a1 + 8)) {
        goto LABEL_118;
      }
    }
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
      sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v88 + 136))(&v136);
    if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v136))
    {
      if ((v137 & 4) != 0) {
        uint64_t v44 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v137 & 0xFFFFFFFFFFFFFFF8) + 168))(&v136);
      }
      else {
        uint64_t v44 = &v136;
      }
      int v45 = sub_217148184(v44);
    }
    else
    {
      int v45 = 127;
    }
    sub_21715566C((uint64_t)&v58);
    long long v46 = v61;
    BOOL v47 = v62;
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v46)
    {
      sub_21714F788(&v125, *v46, (v46[1] - *v46) >> 2);
      uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 16))(v59);
      sub_21714F190(v133, v48, v58);
      sub_2167CA0D8((uint64_t)&v115, (uint64_t *)v133, (uint64_t *)&v125, v45);
      sub_217156704((char *)&__p, (uint64_t)&v115);
      if (v121)
      {
        long long v122 = v121;
        operator delete(v121);
      }
      if (__src)
      {
        uint64_t v117 = (const char *)__src;
        operator delete(__src);
      }
      int v49 = v134;
      if (!v134) {
        goto LABEL_77;
      }
      long long v135 = (void **)v134;
    }
    else
    {
      uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 16))(v59);
      sub_21714F190(&v125, v50, v58);
      *(void *)&long long v115 = v125;
      *(void *)((char *)&v115 + 5) = *(void *)((char *)&v125 + 5);
      uint64_t v117 = 0;
      uint64_t v118 = 0;
      __src = 0;
      sub_21677EA60(&__src, v126, (uint64_t)v127, ((char *)v127 - (char *)v126) >> 3);
      uint64_t v119 = 0;
      uint64_t v120 = 0x100000005;
      long long v122 = 0;
      uint64_t v123 = 0;
      v121 = 0;
      int v124 = v45;
      sub_217156704((char *)&__p, (uint64_t)&v115);
      if (v121)
      {
        long long v122 = v121;
        operator delete(v121);
      }
      int v49 = __src;
      if (!__src) {
        goto LABEL_77;
      }
      uint64_t v117 = (const char *)__src;
    }
    operator delete(v49);
LABEL_77:
    if (v126)
    {
      uint64_t v127 = v126;
      operator delete(v126);
    }
    if (v47) {
      sub_216784EC4(v47);
    }
    sub_2168EE084((uint64_t)&v136);
    goto LABEL_82;
  }
LABEL_118:
  uint64_t v56 = v113;
  int v57 = sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
  Alembic::AbcGeom::v12::OPointsSchema::setTimeSampling((Alembic::AbcGeom::v12::OPointsSchema *)(v56 + 56), v57);
  if (v76)
  {
    int v77 = v76;
    operator delete(v76);
  }
  if (v74)
  {
    int v75 = v74;
    operator delete(v74);
  }
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  if (v68[0])
  {
    v68[1] = v68[0];
    operator delete(v68[0]);
  }
  if (v84) {
    sub_216784EC4(v84);
  }
  if (v83) {
    sub_216784EC4(v83);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v82);
  sub_21697C414(&v81);
  if (v90) {
    sub_216784EC4(v90);
  }
  if (v89) {
    sub_216784EC4(v89);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v87);
  sub_21697C414(&v86);
  if (v95) {
    sub_216784EC4(v95);
  }
  if (v94) {
    sub_216784EC4(v94);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v93);
  sub_21697C414(&v92);
  if (v100) {
    sub_216784EC4(v100);
  }
  if (v99) {
    sub_216784EC4(v99);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v98);
  sub_21697C414(&v97);
  if (v106) {
    sub_216784EC4(v106);
  }
  if (v105) {
    sub_216784EC4(v105);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v103);
  sub_21697C414(&v102);
  if (v114) {
    sub_216784EC4(v114);
  }
}

void sub_217142BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_2168EE084(v72 - 208);
  sub_217156844(&__p);
  sub_217146FA4((uint64_t)&a63);
  sub_217146FA4((uint64_t)&a72);
  sub_217146FA4((uint64_t)&STACK[0x240]);
  sub_217146FA4((uint64_t)&STACK[0x288]);
  sub_217146FA4((uint64_t)&STACK[0x2D0]);
  if (STACK[0x358]) {
    sub_216784EC4((std::__shared_weak_count *)STACK[0x358]);
  }
  _Unwind_Resume(a1);
}

void sub_217142EDC()
{
}

void sub_217142EE4()
{
}

void sub_217142EEC()
{
}

void sub_217142EF8(uint64_t a1)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x258uLL);
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
  int v87 = *(_DWORD *)(v3 + 8);
  if (*(char *)(v3 + 39) < 0)
  {
    sub_216778F24(&v88, *(void **)(v3 + 16), *(void *)(v3 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 16);
    uint64_t v89 = *(void *)(v3 + 32);
    long long v88 = v4;
  }
  uint64_t v6 = *(void *)(v3 + 40);
  uint64_t v5 = *(void *)(v3 + 48);
  int v86 = &unk_26C7495D0;
  uint64_t v90 = v6;
  uint64_t v91 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054(a1, (uint64_t)&__p);
  sub_217144AF4((uint64_t *)a1, (uint64_t)&v80);
  int v75 = 3;
  int v77 = &v80;
  int v71 = 0;
  v72[1] = 0;
  int v67 = 0;
  v68[1] = 0;
  sub_2171582C8((uint64_t)v2, (uint64_t)&v86, &__p, &v75, &v71, &v67);
  sub_217158D3C(&v92, (uint64_t)v2);
  sub_2167877AC((uint64_t)&v80, v82);
  if (SHIBYTE(v103) < 0) {
    operator delete((void *)__p);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v86);
  uint64_t v7 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  int64x2_t v8 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v92;
  uint64_t v9 = v93;
  if (v93) {
    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v7->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77A520;
  v7->~__shared_weak_count_0 = v8;
  v7->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v9);
  }
  v7->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77B310;
  long long v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77B360;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v7;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  char v11 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v10;
  if (v11) {
    sub_216784EC4(v11);
  }
  sub_216784EC4(v10);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v13 = *(void *)a1;
  if (*(unsigned char *)(sub_216850B68((uint64_t *)(*(void *)a1 + 104)) + 14)) {
    uint64_t v14 = *(void *)(v13 + 96);
  }
  else {
    uint64_t v14 = 0;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v14 + 136))(&__p);
  sub_217157FC8((pxrInternal__aapl__pxrReserved__::VtValue *)&__p, &v85);
  sub_2168EE084((uint64_t)&__p);
  double v103 = 0.0;
  *((void *)&__p + 1) = 0;
  *(void *)&long long __p = (char *)&__p + 8;
  if ((long long *)(a1 + 56) == &__p)
  {
    uint64_t v15 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)(a1 + 56), (void *)&__p + 1, (void *)&__p + 1);
    uint64_t v15 = (void *)*((void *)&__p + 1);
  }
  sub_2167FB780((uint64_t)&__p, v15);
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v16) {
    unint64_t v16 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17) {
    uint64_t v17 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v16 + 360), (uint64_t *)v17 + 7, (uint64_t)&v80);
  double v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18) {
    double v18 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19) {
    unint64_t v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 432), (uint64_t *)v19 + 7, (uint64_t)&v75);
  int v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20) {
    int v20 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21) {
    uint64_t v21 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v20 + 1232), (uint64_t *)v21 + 7, (uint64_t)&v71);
  BOOL v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22) {
    BOOL v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23) {
    int v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 440), (uint64_t *)v23 + 7, (uint64_t)&v67);
  int v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v24) {
    int v24 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25) {
    char v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 1240), (uint64_t *)v25 + 7, (uint64_t)&v63);
  double v26 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v26) {
    double v26 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27) {
    int v27 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v26 + 120), (uint64_t *)v27 + 19, (uint64_t)&v58);
  unint64_t v28 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
  if (!v28) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
  }
  uint64_t v29 = sub_2168CB120((void *)(v28 + 32), &v85);
  uint64_t v54 = a1 + 56;
  if (v29) {
    uint64_t v30 = v29[3];
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(double **)(a1 + 56);
  if (v31 != (double *)(a1 + 64))
  {
    int64x2_t v55 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v56 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    while (1)
    {
      double v32 = v31[4];
      int64x2_t v107 = v56;
      long long v108 = xmmword_217409FA0;
      int64x2_t v109 = v55;
      memset(v110, 0, sizeof(v110));
      sub_2167B3334((uint64_t)&__p);
      LODWORD(v100[0]) = 0;
      unint64_t v33 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v33) {
        unint64_t v33 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if (sub_21715805C((uint64_t)&v75, v30, (void *)v33 + 54, (uint64_t (**)(void, uint64_t))v100, v32))*((double *)&__p + 1) = *(float *)v100 / 10.0; {
      LODWORD(v100[0]) = 0;
      }
      double v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v34) {
        double v34 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if (sub_21715805C((uint64_t)&v71, v30, (void *)v34 + 154, (uint64_t (**)(void, uint64_t))v100, v32))double v104 = *(float *)v100 / 10.0; {
      LODWORD(v100[0]) = 0;
      }
      BOOL v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v35) {
        BOOL v35 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if (sub_21715805C((uint64_t)&v67, v30, (void *)v35 + 55, (uint64_t (**)(void, uint64_t))v100, v32))double v103 = *(float *)v100 / 10.0; {
      LODWORD(v100[0]) = 0;
      }
      BOOL v36 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v36) {
        BOOL v36 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if (sub_21715805C((uint64_t)&v63, v30, (void *)v36 + 155, (uint64_t (**)(void, uint64_t))v100, v32))double v105 = *(float *)v100 / 10.0; {
      LODWORD(v100[0]) = 0;
      }
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v37) {
        uint64_t v37 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if (sub_21715805C((uint64_t)&v80, v30, (void *)v37 + 45, (uint64_t (**)(void, uint64_t))v100, v32))*(double *)&long long __p = *(float *)v100; {
      int v38 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if (!v38) {
        int v38 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t v39 = (void *)((char *)v38 + 120);
      if (*(void *)(v62 + 16)) {
        break;
      }
      if (v30 && sub_217159214(v30, v39, &v57)) {
        goto LABEL_82;
      }
LABEL_99:
      Alembic::AbcGeom::v12::OCameraSchema::set((Alembic::AbcGeom::v12::OCameraSchema *)(v92 + 56), (uint64_t **)&__p);
      v100[0] = (void **)v110;
      sub_2167D05B4(v100);
      uint64_t v50 = (double *)*((void *)v31 + 1);
      if (v50)
      {
        do
        {
          long long v51 = v50;
          uint64_t v50 = *(double **)v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          long long v51 = (double *)*((void *)v31 + 2);
          BOOL v52 = *(void *)v51 == (void)v31;
          uint64_t v31 = v51;
        }
        while (!v52);
      }
      uint64_t v31 = v51;
      if (v51 == (double *)(a1 + 64)) {
        goto LABEL_107;
      }
    }
    uint64_t v40 = sub_2171489A0((uint64_t)&v58, v32);
    long long v41 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(&v111, v40);
    if (!sub_2169456CC(v41))
    {
      v100[0] = (void **)"usdAbc/alembicWriter.cpp";
      v100[1] = (void **)"_ExtractWithFallback";
      v100[2] = (void **)2536;
      v100[3] = (void **)"BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExtractWithFallback(const UsdSam"
                         "ples &, double, const UsdPrimDefinition *, const TfToken &, T *) [T = pxrInternal__aapl__pxrRes"
                         "erved__::GfVec2f]";
      char v101 = 0;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v98);
      if (v99 >= 0) {
        int v45 = v98;
      }
      else {
        int v45 = (void **)v98[0];
      }
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v111, v43, v44, (uint64_t)v94);
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v94, (uint64_t)v96);
      BOOL v47 = v96;
      if (v97 < 0) {
        BOOL v47 = (void **)v96[0];
      }
      unint64_t v48 = *v39 & 0xFFFFFFFFFFFFFFF8;
      if (v48)
      {
        int v49 = (const char *)(v48 + 16);
        if (*(char *)(v48 + 39) < 0) {
          int v49 = *(const char **)v49;
        }
      }
      else
      {
        int v49 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v100, (pxrInternal__aapl__pxrReserved__ *)"Expected type '%s', but found '%s' for %s", v46, v45, v47, v49, v54);
      if (v97 < 0) {
        operator delete(v96[0]);
      }
      if (v95 < 0) {
        operator delete(v94[0]);
      }
      if (v99 < 0) {
        operator delete(v98[0]);
      }
      sub_2168EE084((uint64_t)&v111);
      goto LABEL_99;
    }
    if ((v112 & 4) != 0) {
      long long v42 = (float32x2_t *)(*(uint64_t (**)(uint64_t *))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(&v111);
    }
    else {
      long long v42 = (float32x2_t *)&v111;
    }
    float32x2_t v57 = *v42;
    sub_2168EE084((uint64_t)&v111);
LABEL_82:
    float64x2_t v106 = vcvtq_f64_f32(v57);
    goto LABEL_99;
  }
LABEL_107:
  uint64_t v53 = v92;
  sub_217146B60((double **)a1, v54);
  Alembic::AbcGeom::v12::OCameraSchema::setTimeSampling((Alembic::AbcGeom::v12::OCameraSchema *)(v53 + 56));
  if (v61) {
    sub_216784EC4(v61);
  }
  if (v60) {
    sub_216784EC4(v60);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v59);
  sub_21697C414(&v58);
  if (v66) {
    sub_216784EC4(v66);
  }
  if (v65) {
    sub_216784EC4(v65);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v64);
  sub_21697C414(&v63);
  if (v70) {
    sub_216784EC4(v70);
  }
  if (v69) {
    sub_216784EC4(v69);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
  sub_21697C414(&v67);
  if (v74) {
    sub_216784EC4(v74);
  }
  if (v73) {
    sub_216784EC4(v73);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v72);
  sub_21697C414(&v71);
  if (v79) {
    sub_216784EC4(v79);
  }
  if (v78) {
    sub_216784EC4(v78);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
  sub_21697C414(&v75);
  if (v84) {
    sub_216784EC4(v84);
  }
  if (v83) {
    sub_216784EC4(v83);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v81);
  sub_21697C414(&v80);
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v93) {
    sub_216784EC4(v93);
  }
}

void sub_217143910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_217143B00(void *a1)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  uint64_t v3 = operator new(0x198uLL);
  uint64_t v4 = *(void *)(a1[1] + 8);
  int v67 = *(_DWORD *)(v4 + 8);
  if (*(char *)(v4 + 39) < 0)
  {
    sub_216778F24(&v68, *(void **)(v4 + 16), *(void *)(v4 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 16);
    uint64_t v69 = *(void *)(v4 + 32);
    long long v68 = v5;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(v4 + 48);
  int v66 = &unk_26C7495D0;
  uint64_t v70 = v7;
  uint64_t v71 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217145054((uint64_t)a1, (uint64_t)&__p);
  sub_217144AF4(a1, (uint64_t)&v40);
  int v60 = 3;
  uint64_t v62 = &v40;
  int v45 = 0;
  v46[1] = 0;
  *(_DWORD *)int v74 = 0;
  *(_DWORD *)&v74[8] = 0;
  sub_2167E8E14((uint64_t)v3, (uint64_t)&v66, &__p, &v60, &v45, v74);
  sub_217159584(&v72, (uint64_t)v3);
  sub_2167877AC((uint64_t)&v40, *((void **)&v40 + 1));
  if (SHIBYTE(v51) < 0) {
    operator delete((void *)__p);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v66);
  int64x2_t v8 = operator new(0x18uLL);
  uint64_t v9 = v72;
  long long v10 = v73;
  if (v73)
  {
    atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
    void *v8 = &unk_26C77A520;
    v8[1] = v9;
    v8[2] = v10;
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    void *v8 = &unk_26C77A520;
    v8[1] = v9;
    v8[2] = 0;
  }
  sub_217145C2C(&__p, (uint64_t)v8);
  if (v10) {
    sub_216784EC4(v10);
  }
  long long v11 = __p;
  if (*((void *)&__p + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[2];
  *(_OWORD *)(a1 + 1) = v11;
  if (v12) {
    sub_216784EC4(v12);
  }
  if (*((void *)&__p + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&__p + 1));
  }
  *((void *)&__p + 1) = 0;
  long long v51 = 0;
  *(void *)&long long __p = (char *)&__p + 8;
  if (a1 + 7 == (void *)&__p)
  {
    uint64_t v13 = 0;
  }
  else
  {
    sub_217146FFC((uint64_t **)a1 + 7, (void *)&__p + 1, (void *)&__p + 1);
    uint64_t v13 = (void *)*((void *)&__p + 1);
  }
  sub_2167FB780((uint64_t)&__p, v13);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14) {
    uint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 464), (uint64_t *)v15 + 58, (uint64_t)&v60);
  sub_21714594C((uint64_t)a1, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v58);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  sub_2171592E4((uint64_t *)&__p, *a1, a1 + 1, &v58);
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v16) {
    unint64_t v16 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17) {
    uint64_t v17 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21714AA4C((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v16 + 24), (uint64_t *)v17 + 11, (uint64_t)&v45);
  sub_217159694((uint64_t)&v40);
  double v18 = (double *)a1[7];
  if (v18 != (double *)(a1 + 8))
  {
    int64x2_t v35 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v34 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      double v19 = v18[4];
      *(void *)&long long v40 = 0;
      DWORD2(v40) = 127;
      BYTE12(v40) = 0;
      sub_21677CC7C((char *)v41, 0, 0, 0);
      int64x2_t v42 = v35;
      long long v43 = xmmword_217409FA0;
      int64x2_t v44 = v34;
      Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(v2, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v65);
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v60, v19);
      *(_DWORD *)int v74 = 6;
      v74[4] = 1;
      sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v65, v21, v2, (uint64_t)Converter, (int *)v74, 0, (uint64_t)&v36);
      if (sub_217148A90((uint64_t)&v36, &v60, (uint64_t)&v65))
      {
        uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
        sub_21714F08C(v74, v22, v36);
        *(void *)&long long v40 = *(void *)v74;
        *(void *)((char *)&v40 + 5) = *(void *)&v74[5];
        sub_21677CC7C((char *)v41, v75, (uint64_t)v76, (v76 - v75) >> 3);
        if (v75)
        {
          int v76 = v75;
          operator delete(v75);
        }
      }
      Alembic::AbcGeom::v12::OFaceSetSchema::set(v72 + 56, (uint64_t)&v40);
      if (v39) {
        sub_216784EC4(v39);
      }
      if (v38) {
        sub_216784EC4(v38);
      }
      int v23 = (double *)*((void *)v18 + 1);
      if (v23)
      {
        do
        {
          int v24 = v23;
          int v23 = *(double **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          int v24 = (double *)*((void *)v18 + 2);
          BOOL v25 = *(void *)v24 == (void)v18;
          double v18 = v24;
        }
        while (!v25);
      }
      double v18 = v24;
    }
    while (v24 != (double *)(a1 + 8));
  }
  if (*(void *)(v49 + 16))
  {
    double v26 = sub_2171489A0((uint64_t)&v45, -1.79769313e308);
    int v27 = v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = (uint64_t)(a1 + 7);
    if ((v28 & 4) != 0) {
      int v27 = (void *)(*(uint64_t (**)(void *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v26);
    }
    if (!*v27) {
      goto LABEL_55;
    }
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v30) {
      uint64_t v30 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*v27 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v30 + 96) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_57;
    }
    uint64_t v31 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v31) {
      uint64_t v31 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*v27 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v31 + 86) & 0xFFFFFFFFFFFFFFF8)) {
LABEL_57:
    }
      int v32 = 1;
    else {
LABEL_55:
    }
      int v32 = 0;
  }
  else
  {
    int v32 = 0;
    uint64_t v29 = (uint64_t)(a1 + 7);
  }
  Alembic::AbcGeom::v12::OFaceSetSchema::setFaceExclusivity((Alembic::AbcGeom::v12::OFaceSetSchema *)(v72 + 56), v32);
  uint64_t v33 = v72;
  sub_217146B60((double **)a1, v29);
  Alembic::AbcGeom::v12::OFaceSetSchema::setTimeSampling((Alembic::AbcGeom::v12::OFaceSetSchema *)(v33 + 56));
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (v48) {
    sub_216784EC4(v48);
  }
  if (v47) {
    sub_216784EC4(v47);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v46);
  sub_21697C414(&v45);
  *(void *)&long long v40 = &v57;
  sub_216889A04((void ***)&v40);
  sub_2167FB780((uint64_t)v56, v56[1]);
  if (v55 < 0) {
    operator delete(v54);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
  sub_21697C414(&v52);
  if (v51) {
    sub_216784EC4(v51);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
  sub_21697C414(&v58);
  if (v64) {
    sub_216784EC4(v64);
  }
  if (v63) {
    sub_216784EC4(v63);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
  sub_21697C414(&v60);
  if (v73) {
    sub_216784EC4(v73);
  }
}

void sub_2171441C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,int a60,__int16 a61,char a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  sub_217146FA4((uint64_t)&a34);
  sub_21715950C((uint64_t)&a43);
  sub_21697B754(&a59);
  sub_217146FA4((uint64_t)&a61);
  uint64_t v65 = *(std::__shared_weak_count **)(v63 - 152);
  if (v65) {
    sub_216784EC4(v65);
  }
  _Unwind_Resume(a1);
}

void sub_217144350(uint64_t *a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *a1 + 40;
  LODWORD(__p) = 0;
  LODWORD(v30) = 0;
  LODWORD(v33) = 0;
  LODWORD(v34[0]) = 0;
  LODWORD(__str.__r_.__value_.__l.__data_) = 0;
  LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
  sub_2171598A8((uint64_t)v2, v3, 0, &__p, &v33, &__str);
  sub_217145B1C(&v35, (uint64_t)v2);
  sub_2171450C8(&__p, (uint64_t *)&v35);
  long long v5 = __p;
  uint64_t v4 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  a1[1] = (uint64_t)v5;
  a1[2] = (uint64_t)v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v30) {
    sub_216784EC4(v30);
  }
  v34[0] = 0;
  v34[1] = 0;
  uint64_t v33 = (uint64_t *)v34;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  sub_217159750(&v33, a1, (void *)v7 + 40, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int64x2_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    int64x2_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  sub_217159750(&v33, a1, (void *)v8 + 18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  long long v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10) {
    long long v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v9, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 440));
  double v12 = *(double *)sub_21691CEA0(Fallback);
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13) {
    uint64_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v9, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 168));
  double v15 = *(double *)sub_21691CEA0(v14);
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v16) {
    unint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v16 + 55) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
  }
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::TfStringify(v12, &__str);
  v27[0] = (long long *)&__p;
  uint64_t v17 = sub_21677B174(&v33, (const void **)&__p, (uint64_t)&unk_2174BFD90, v27);
  std::string::operator=((std::string *)(v17 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(__p);
  }
  double v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v18) {
    double v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v18 + 21) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
  }
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::TfStringify(v15, &__str);
  v27[0] = (long long *)&__p;
  double v19 = sub_21677B174(&v33, (const void **)&__p, (uint64_t)&unk_2174BFD90, v27);
  std::string::operator=((std::string *)(v19 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(__p);
  }
  int v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20) {
    int v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  sub_217159750(&v33, a1, (void *)v20 + 55, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21) {
    uint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  sub_217159750(&v33, a1, (void *)v21 + 21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  sub_217159750(&v33, a1, (void *)v22 + 61, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    int v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  sub_217159750(&v33, a1, (void *)v23 + 60, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24) {
    int v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = 0;
  sub_217145484(&v33, a1, (void *)v24 + 12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  BOOL v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v25) {
    BOOL v25 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  long long __p = 0;
  sub_217145484(&v33, a1, (void *)v25 + 148, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  Alembic::Abc::v12::OObject::getProperties(v35, (uint64_t)v28);
  sub_216779094(&__str, "Usd");
  LODWORD(v27[0]) = 3;
  v27[1] = (long long *)&v33;
  v26[0] = 0;
  _OWORD v26[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&__p, v28, &__str, v27, v26);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v28);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p);
  sub_2167877AC((uint64_t)&v33, v34[0]);
  if (v36) {
    sub_216784EC4(v36);
  }
}

void sub_2171448AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_2167877AC(v24 - 88, *(void **)(v24 - 80));
  double v26 = *(std::__shared_weak_count **)(v24 - 56);
  if (v26) {
    sub_216784EC4(v26);
  }
  _Unwind_Resume(a1);
}

void **sub_2171449A0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_21713B460(v3 - 4);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2171449FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(void *)(a1 + 24) = a1;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 24) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 24) = result;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_217144AA4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_21713B460((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_217144AF4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = *a1;
  if (*(unsigned char *)(sub_216850B68((uint64_t *)(*a1 + 104)) + 14)) {
    uint64_t v6 = *(void *)(v5 + 96);
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)v6 + 136))(__p);
  uint64_t v7 = __p[1];
  sub_2168EE084((uint64_t)__p);
  if (v7)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v9 = *a1;
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(*a1 + 104)) + 14)) {
      uint64_t v10 = *(void *)(v9 + 96);
    }
    else {
      uint64_t v10 = 0;
    }
    (*(void (**)(void **__return_ptr))(*(void *)v10 + 136))(__p);
    if (sub_216A94450((pxrInternal__aapl__pxrReserved__::VtValue *)__p))
    {
      if (((uint64_t)__p[1] & 4) != 0) {
        long long v11 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8) + 168))(__p);
      }
      else {
        long long v11 = __p;
      }
      int v12 = *(_DWORD *)v11;
      sub_2168EE084((uint64_t)__p);
      if (v12 != 1) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_2168EE084((uint64_t)__p);
    }
  }
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13) {
    uint64_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v13 + 39) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  }
  std::operator+<char>();
  sub_216779094(&__str, "over");
  BOOL v25 = __p;
  uint64_t v14 = sub_21677B174((uint64_t **)a2, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v25);
  std::string::operator=((std::string *)(v14 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
LABEL_26:
  double v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v15) {
    double v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  __p[0] = 0;
  sub_217145184((uint64_t **)a2, a1, v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v16) {
    unint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  __p[0] = 0;
  sub_217145184((uint64_t **)a2, a1, (void *)v16 + 22, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v17) {
    uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  __p[0] = 0;
  sub_217145314((uint64_t **)a2, a1, (void *)v17 + 13, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  double v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v18) {
    double v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  __p[0] = 0;
  sub_217145314((uint64_t **)a2, a1, (void *)v18 + 17, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  double v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v19) {
    double v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  __p[0] = 0;
  sub_217145484((uint64_t **)a2, a1, (void *)v19 + 26, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20) {
    int v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21) {
    uint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v21 + 27) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
  }
  std::operator+<char>();
  sub_2171455FC(a1, (uint64_t)v20 + 216, (long long *)__p, (uint64_t **)a2);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22) {
    uint64_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  int v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    int v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v23 + 34) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
  }
  std::operator+<char>();
  sub_2171455FC(a1, (uint64_t)v22 + 272, (long long *)__p, (uint64_t **)a2);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
}

void sub_217144FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_2168EE084((uint64_t)&__p);
  sub_2167877AC(v23, *(void **)(v23 + 8));
  _Unwind_Resume(a1);
}

_DWORD *sub_217145054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21714594C(a1, &v6);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)Name, (const void **)(a1 + 32), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_2171450B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *sub_2171450C8(void *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *uint64_t v4 = &unk_26C77A520;
    v4[1] = v5;
    v4[2] = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *uint64_t v4 = &unk_26C77A520;
    v4[1] = v5;
    v4[2] = 0;
  }
  sub_217145C2C(a1, (uint64_t)v4);
  if (v6) {
    sub_216784EC4(v6);
  }
  return a1;
}

void sub_21714516C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217145184(uint64_t **a1, uint64_t *a2, void *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_217145778(a2, (uint64_t)a3, a4);
  int v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v6)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    }
    std::operator+<char>();
    if ((v16 & 4) != 0) {
      int v7 = (unsigned char *)(*(uint64_t (**)(unsigned char *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
    }
    else {
      int v7 = v15;
    }
    if (*v7) {
      int64x2_t v8 = "true";
    }
    else {
      int64x2_t v8 = "false";
    }
    sub_216779094(&__str, v8);
    uint64_t v14 = __p;
    uint64_t v9 = sub_21677B174(a1, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v14);
    std::string::operator=((std::string *)(v9 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_2168EE084((uint64_t)v15);
}

void sub_2171452C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_2168EE084(v21 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_217145314(uint64_t **a1, uint64_t *a2, void *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_217145778(a2, (uint64_t)a3, a4);
  int v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  if (v6)
  {
    if ((v14 & 4) != 0)
    {
      int v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken **))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&v13);
      int v7 = v6;
    }
    else
    {
      int v7 = v13;
    }
    if (*((char *)v7 + 23) < 0)
    {
      if (!*((void *)v7 + 1)) {
        return sub_2168EE084((uint64_t)&v13);
      }
    }
    else if (!*((unsigned char *)v7 + 23))
    {
      return sub_2168EE084((uint64_t)&v13);
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    }
    std::operator+<char>();
    int v12 = __p;
    int64x2_t v8 = sub_21677B174(a1, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v12);
    std::string::operator=((std::string *)(v8 + 7), (const std::string *)v7);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_2168EE084((uint64_t)&v13);
}

void sub_217145448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_217145484(uint64_t **a1, uint64_t *a2, void *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_217145778(a2, (uint64_t)a3, a4);
  int v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v6)
  {
    if ((v16 & 4) != 0)
    {
      int v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(unsigned char *))((v16 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 168))(v15);
      int v7 = v6;
    }
    else
    {
      int v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)v15;
    }
    if (*(void *)v7)
    {
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      int64x2_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+<char>();
      if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (const std::string *)((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      uint64_t v14 = __p;
      uint64_t v10 = sub_21677B174(a1, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v14);
      std::string::operator=((std::string *)(v10 + 7), EmptyString);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return sub_2168EE084((uint64_t)v15);
}

void sub_2171455C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_2171455FC(uint64_t *a1, uint64_t a2, long long *a3, uint64_t **a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  if (*(unsigned char *)(sub_216850B68((uint64_t *)(*a1 + 104)) + 14)) {
    uint64_t v7 = *(void *)(v6 + 96);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)v7 + 136))(&v13);
  if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v13))
  {
    if ((v14 & 4) != 0) {
      int64x2_t v8 = (void *)(*(uint64_t (**)(void **))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&v13);
    }
    else {
      int64x2_t v8 = v13;
    }
    if (*v8 != v8[1])
    {
      sub_2171459D4((uint64_t)v8);
      int v12 = a3;
      uint64_t v9 = sub_21677B174(a4, (const void **)a3, (uint64_t)&unk_2174BFD90, &v12);
      std::string::operator=((std::string *)(v9 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return sub_2168EE084((uint64_t)&v13);
}

void sub_21714573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

_DWORD *sub_217145778(uint64_t *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (*(void *)a3)
  {
    return sub_217145838(a1, a3, a2);
  }
  else
  {
    uint64_t v4 = *a1;
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(*a1 + 104)) + 14)) {
      uint64_t v5 = *(void *)(v4 + 96);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 136);
    return (_DWORD *)v6();
  }
}

_DWORD *sub_217145838(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a1;
  uint64_t v9 = *(void *)(v7 + 104);
  int64x2_t v8 = (uint64_t *)(v7 + 104);
  if (v9)
  {
    if (*(unsigned char *)(sub_216850B68(v8) + 14)) {
      uint64_t v10 = *(void *)(v6 + 96);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  sub_21714594C((uint64_t)a1, &v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, a2, &v14);
  (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v10 + 136))(v10, &v14, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_217145928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
}

_DWORD *sub_21714594C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24)))
  {
    return pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v4, a2);
  }
  else
  {
    sub_216981010(a2, v4);
    return sub_21698105C(a2 + 1, (_DWORD *)(a1 + 28));
  }
}

uint64_t sub_2171459D4(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  sub_216A8DE90(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_217145B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_217145B1C(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C77A4A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217145B74(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217145B90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217145BB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217145BE8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A4F8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217145C2C(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C77A568;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217145C84(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325288(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217145C9C(void *a1)
{
  *a1 = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_217145CE8(void *__p)
{
  void *__p = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

void *sub_217145D44@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 2;
  uint64_t result = sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void *sub_217145D80@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 2;
  uint64_t result = sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void *sub_217145DBC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 2;
  uint64_t result = sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return result;
}

void sub_217145DFC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217145E24(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217145E54(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A5B8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217145EA0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C77A5E0;
  result[1] = v3;
  return result;
}

uint64_t sub_217145EE8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C77A5E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_217145F14(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t sub_217145F20(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A660)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217145F60()
{
  return &unk_26C77A660;
}

void sub_217145F6C(void *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  char v4 = a1;
  uint64_t v6 = a1[1];
  if ((v6 & 4) != 0) {
    char v4 = (void *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  if (!*v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 59) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_13:
    *a4 = 1;
    char v11 = operator new(0x10uLL);
    *(void *)char v11 = &unk_26C779068;
    v11[8] = -1;
LABEL_14:
    sub_217122B64(a4 + 1, (uint64_t)v11);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  int64x2_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    int64x2_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v9 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v9 == (*((void *)v8 + 62) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    char v11 = operator new(0x10uLL);
    *(void *)char v11 = &unk_26C779068;
    v11[8] = 0;
    goto LABEL_14;
  }
  if (v9)
  {
    uint64_t v10 = (const char *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0) {
      uint64_t v10 = *(const char **)v10;
    }
  }
  else
  {
    uint64_t v10 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported invisibility '%s'", a2, a3, v10);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v13 < 0) {
    operator delete((void *)__p);
  }
}

void sub_217146100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21714611C@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  uint64_t v55 = 0;
  int64x2_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    int64x2_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_217145184((uint64_t **)a4, a1, (void *)v8 + 8, a2);
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9) {
    unint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_217145838(a1, a2, (uint64_t)v9 + 448);
  sub_2168ED33C(&v54, &__p);
  sub_2168EE084((uint64_t)&__p);
  if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
  {
    if ((v55 & 4) != 0) {
      uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(&v54);
    }
    else {
      uint64_t v10 = &v54;
    }
    uint64_t v11 = *v10;
    uint64_t v50 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v50 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    uint64_t v50 = 0;
  }
  int v12 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t Type = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50);
  char v13 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
  __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(v13, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  Converter = (void *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(v13, (const pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *)&__p);
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, &Converter))
  {
    int v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v14) {
      int v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*((void *)v14 + 56) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    }
    int v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+<char>();
    if ((v50 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (const std::string *)((v50 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    uint64_t v17 = sub_21677B174((uint64_t **)a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&__str);
    std::string::operator=((std::string *)(v17 + 7), EmptyString);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (!*(unsigned char *)(a3 + 56) && *(void *)(*(void *)(a3 + 48) + 16) == 1)
  {
    double v18 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
    if (!v18) {
      double v18 = sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
    }
    if ((*((void *)v18 + 3) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    }
    std::operator+<char>();
    sub_216779094(&__str, "true");
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    double v19 = sub_21677B174((uint64_t **)a4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v47);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  Role = (void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v21) {
    uint64_t v21 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*(void *)v21 & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v28 = "point";
    goto LABEL_68;
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v22) {
    uint64_t v22 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v28 = "normal";
    goto LABEL_68;
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v23) {
    uint64_t v23 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v28 = "vector";
    goto LABEL_68;
  }
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v24) {
    uint64_t v24 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29) {
      uint64_t v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v28 = "rgba";
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (void **)v29 + 21))
    {
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v30) {
        uint64_t v30 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (void **)v30 + 24)) {
        uint64_t v28 = "rgb";
      }
    }
    goto LABEL_68;
  }
  BOOL v25 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v25) {
    BOOL v25 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  if ((*Role & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v28 = "matrix";
    goto LABEL_68;
  }
  double v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v26) {
    double v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (void **)v26 + 42)) {
    goto LABEL_55;
  }
  char v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27) {
    char v27 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&Type, (void **)v27 + 41))
  {
LABEL_55:
    uint64_t v28 = "quat";
LABEL_68:
    sub_216779094(&__p, v28);
    goto LABEL_69;
  }
  memset(&__p, 0, sizeof(__p));
LABEL_69:
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_216779094(&__str, "interpretation");
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    int v32 = sub_21677B174((uint64_t **)a4, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v47);
    std::string::operator=((std::string *)(v32 + 7), &__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v33) {
    uint64_t v33 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_217145314((uint64_t **)a4, a1, (void *)v33 + 13, a2);
  int64x2_t v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v34) {
    int64x2_t v34 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_217145314((uint64_t **)a4, a1, (void *)v34 + 17, a2);
  int64x2_t v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v35) {
    int64x2_t v35 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_217145184((uint64_t **)a4, a1, (void *)v35 + 22, a2);
  uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v36) {
    uint64_t v36 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_217145838(a1, a2, (uint64_t)v36 + 464);
  sub_2168ED33C(&v54, &__str);
  sub_2168EE084((uint64_t)&__str);
  if (sub_2169DC5C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
  {
    uint64_t v37 = (v55 & 4) != 0
        ? (uint64_t *)(*(uint64_t (**)(uint64_t *))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(&v54)
        : &v54;
    if (*(_DWORD *)v37 == 1)
    {
      int v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v38) {
        int v38 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*((void *)v38 + 58) & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
      }
      std::operator+<char>();
      sub_216779094(&v47, "uniform");
      p_str = &__str;
      uint64_t v39 = sub_21677B174((uint64_t **)a4, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&p_str);
      std::string::operator=((std::string *)(v39 + 7), &v47);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  long long v40 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v40) {
    long long v40 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  sub_217145838(a1, a2, (uint64_t)v40 + 488);
  sub_2168ED33C(&v54, &__str);
  sub_2168EE084((uint64_t)&__str);
  if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
  {
    if ((v55 & 4) != 0) {
      long long v41 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(&v54);
    }
    else {
      long long v41 = &v54;
    }
    int v42 = sub_217148184(v41);
    sub_2167C4D74((uint64_t **)a4, v42);
  }
  long long v43 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if (!v43) {
    long long v43 = sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  }
  sub_217145314((uint64_t **)a4, a1, (void *)v43 + 1, a2);
  int64x2_t v44 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if (!v44) {
    int64x2_t v44 = sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  }
  sub_217145314((uint64_t **)a4, a1, (void *)v44 + 2, a2);
  int v45 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  if (!v45) {
    int v45 = sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
  }
  sub_217145184((uint64_t **)a4, a1, v45, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return sub_2168EE084((uint64_t)&v54);
}

void sub_21714699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168EE084(v33 - 88);
  sub_2167877AC(v32, *(void **)(v32 + 8));
  _Unwind_Resume(a1);
}

void sub_217146A60(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1, uint64_t a2, _DWORD *a3, Alembic::Abc::v12::OScalarProperty *a4, double a5)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a3 + 16);
  uint64_t v11 = (int *)(sub_2167B8A1C((uint64_t)a4) + 56);
  int v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a3, a5);
  sub_21714849C(v10, v12, a1, a2, v11, 1, (uint64_t)v14);
  if (sub_217148A90((uint64_t)v14, a3, (uint64_t)v10))
  {
    char v13 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    Alembic::Abc::v12::OScalarProperty::set(a4, v13);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
}

void sub_217146B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217148C70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217146B60(double **a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = *a1;
  char v4 = (uint64_t **)(*a1 + 14);
  uint64_t v5 = sub_217148D08((uint64_t)v4, a2);
  if (v3 + 15 == (double *)v5)
  {
    *(void *)&long long v47 = a2;
    uint64_t v7 = sub_217148E8C(v4, (double **)a2, (uint64_t)&unk_2174BFD90, (uint64_t *)&v47);
    int64x2_t v8 = v7;
    long long v51 = 0;
    uint64_t v52 = 0;
    uint64_t v50 = (uint64_t *)&v51;
    uint64_t v11 = *(double **)a2;
    unint64_t v9 = (double *)(a2 + 8);
    uint64_t v10 = v11;
    if (v11 == v9)
    {
      uint64_t v15 = (uint64_t *)&v51;
    }
    else
    {
      do
      {
        *(double *)&long long v47 = (v10[4] - v3[1]) / *v3;
        uint64_t v7 = sub_21708827C(&v50, (double *)&v47, (uint64_t *)&v47);
        int v12 = (double *)*((void *)v10 + 1);
        if (v12)
        {
          do
          {
            char v13 = v12;
            int v12 = *(double **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            char v13 = (double *)*((void *)v10 + 2);
            BOOL v14 = *(void *)v13 == (void)v10;
            uint64_t v10 = v13;
          }
          while (!v14);
        }
        uint64_t v10 = v13;
      }
      while (v13 != v9);
      uint64_t v15 = v50;
    }
    uint64_t v16 = (uint64_t *)v15[1];
    if (v16)
    {
      do
      {
        uint64_t v17 = v16;
        uint64_t v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      double v18 = v15;
      do
      {
        uint64_t v17 = (uint64_t *)v18[2];
        BOOL v14 = *v17 == (void)v18;
        double v18 = v17;
      }
      while (!v14);
    }
    if (v52 == 1)
    {
      Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling((Alembic::AbcCoreAbstract::v12::TimeSampling *)&v47, 1.0, *((double *)v15 + 4));
      uint64_t v19 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)(v3 + 5));
    }
    else
    {
      if (v52 != 2)
      {
        int64x2_t v44 = 0;
        int v45 = 0;
        uint64_t v46 = 0;
        *(void *)&long long v47 = &v44;
        if (v17 == (uint64_t *)&v51)
        {
          uint64_t v28 = 0;
          char v27 = 0;
        }
        else
        {
          uint64_t v21 = v15;
          uint64_t v22 = (double *)v17;
          do
          {
            *(double *)int v42 = v22[4] - *((double *)v21 + 4);
            uint64_t v7 = sub_216C650B8((uint64_t *)&v47, v42);
            uint64_t v23 = (double *)*((void *)v22 + 1);
            uint64_t v24 = v22;
            if (v23)
            {
              do
              {
                uint64_t v22 = v23;
                uint64_t v23 = *(double **)v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v22 = (double *)*((void *)v24 + 2);
                BOOL v14 = *(void *)v22 == (void)v24;
                uint64_t v24 = v22;
              }
              while (!v14);
            }
            BOOL v25 = (uint64_t *)v21[1];
            if (v25)
            {
              do
              {
                double v26 = v25;
                BOOL v25 = (uint64_t *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                double v26 = (uint64_t *)v21[2];
                BOOL v14 = *v26 == (void)v21;
                uint64_t v21 = v26;
              }
              while (!v14);
            }
            uint64_t v21 = v26;
          }
          while (v22 != (double *)&v51);
          uint64_t v28 = v44;
          char v27 = v45;
        }
        uint64_t v29 = (Alembic::AbcCoreAbstract::v12::TimeSamplingType *)Alembic::AbcCoreAbstract::v12::TimeSamplingType::AcyclicNumSamples((Alembic::AbcCoreAbstract::v12::TimeSamplingType *)v7);
        int v30 = (int)v29;
        LODWORD(v43) = v29;
        double v32 = Alembic::AbcCoreAbstract::v12::TimeSamplingType::AcyclicTimePerCycle(v29);
        uint64_t v33 = (v27 - v28) >> 3;
        *((double *)&v43 + 1) = v32;
        if (v33 != 2)
        {
          uint64_t v34 = 1;
          uint64_t v35 = 8;
          while (v34 != v33)
          {
            uint64_t v36 = 8 * v33;
            uint64_t v37 = (double *)v44;
            while (v37[(unint64_t)v35 / 8] == *v37)
            {
              ++v37;
              v36 -= 8;
              if (v35 == v36)
              {
                LODWORD(v33) = v34;
                goto LABEL_55;
              }
            }
            int v38 = (uint64_t *)v17[1];
            uint64_t v39 = v17;
            if (v38)
            {
              do
              {
                uint64_t v17 = v38;
                int v38 = (uint64_t *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                uint64_t v17 = (uint64_t *)v39[2];
                BOOL v14 = *v17 == (void)v39;
                uint64_t v39 = v17;
              }
              while (!v14);
            }
            ++v34;
            v35 += 8;
            if (v34 == v33 - 1) {
              goto LABEL_56;
            }
          }
LABEL_55:
          char v31 = sub_216799AC8((double *)&v47, v33, *((double *)v17 + 4) - *((double *)v15 + 4));
          long long v43 = v47;
          int v30 = v47;
        }
LABEL_56:
        if (v30 == Alembic::AbcCoreAbstract::v12::TimeSamplingType::AcyclicNumSamples((Alembic::AbcCoreAbstract::v12::TimeSamplingType *)v31)) {
          long long v40 = (uint64_t *)&v51;
        }
        else {
          long long v40 = v17;
        }
        sub_216931F20(v42, v15, v40);
        Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling(&v47, &v43, v42);
        uint64_t v6 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)(v3 + 5));
        *((_DWORD *)v8 + 14) = v6;
        if (__p)
        {
          uint64_t v49 = __p;
          operator delete(__p);
        }
        if (v42[0])
        {
          v42[1] = v42[0];
          operator delete(v42[0]);
        }
        int v20 = v44;
        if (!v44) {
          goto LABEL_66;
        }
        int v45 = v44;
        goto LABEL_65;
      }
      Alembic::AbcCoreAbstract::v12::TimeSampling::TimeSampling((Alembic::AbcCoreAbstract::v12::TimeSampling *)&v47, *((double *)v17 + 4) - *((double *)v15 + 4), *((double *)v15 + 4));
      uint64_t v19 = Alembic::Abc::v12::OArchive::addTimeSampling((uint64_t)(v3 + 5));
    }
    uint64_t v6 = v19;
    *((_DWORD *)v8 + 14) = v19;
    int v20 = __p;
    if (!__p)
    {
LABEL_66:
      sub_2167FB780((uint64_t)&v50, v51);
      return v6;
    }
    uint64_t v49 = __p;
LABEL_65:
    operator delete(v20);
    goto LABEL_66;
  }
  return *(unsigned int *)(v5 + 56);
}

void sub_217146F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2167FB780(v22 - 88, *(void **)(v22 - 80));
  _Unwind_Resume(a1);
}

_DWORD *sub_217146FA4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_216784EC4(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t **sub_217146FFC(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int64x2_t v8 = (uint64_t *)v6[1];
    }
    else {
      int64x2_t v8 = v6;
    }
    BOOL v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          void v8[4] = v9[4];
          sub_216938DC8(v5, (uint64_t)v8);
          int64x2_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = sub_216799E28((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_2167FF3FC((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_217147160(v5, (double *)a2 + 4);
      int v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          int v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_21714714C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167FF3FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_217147160(uint64_t **a1, double *a2)
{
  char v4 = (uint64_t *)operator new(0x28uLL);
  double v5 = *a2;
  v4[4] = *(void *)a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v5 >= *((double *)v7 + 4)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        int64x2_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    int64x2_t v8 = v6 + 1;
  }
  else
  {
    int64x2_t v8 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v6, v8, v4);
  return v4;
}

_DWORD *sub_2171471F0@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v9 = *(void **)(a1 + 80);
  int64x2_t v8 = *(void **)(a1 + 88);
  if (v9 != v8)
  {
    while ((*v9 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v9 == v8)
      {
        unint64_t v9 = *(void **)(a1 + 88);
        break;
      }
    }
  }
  if (v9 == v8)
  {
    sub_21714594C(a1, v30);
    sub_21714759C((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)v30, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v30 + 1);
  }
  else
  {
    sub_216A8E2D8(v9 + 1, v8, v9);
    for (uint64_t i = *(void *)(a1 + 88); i != v10; i -= 8)
    {
      uint64_t v13 = *(void *)(i - 8);
      uint64_t v12 = v13;
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *(void *)(a1 + 88) = v10;
    sub_21714594C(a1, v30);
    uint64_t v14 = *(void *)a1;
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(*(void *)a1 + 104)) + 14)) {
      uint64_t v15 = *(void *)(v14 + 96);
    }
    else {
      uint64_t v15 = 0;
    }
    sub_2171476A8((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)v30, a2, v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v30 + 1);
  }
  sub_21697C414(v30);
  if (!*(void *)(v37 + 16)) {
    goto LABEL_22;
  }
  uint64_t v16 = *(void ***)a3;
  uint64_t v17 = *(void ***)(a3 + 8);
  if (*(void ***)a3 == v17) {
    goto LABEL_22;
  }
  double v32 = v38;
  while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v16, &v32))
  {
    if (++v16 == v17)
    {
      uint64_t v16 = v17;
      break;
    }
  }
  if (v16 == *(void ***)(a3 + 8))
  {
    v30[0] = "usdAbc/alembicWriter.cpp";
    v30[1] = "_ExtractSamples";
    _OWORD v30[2] = 968;
    v30[3] = "UsdSamples pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PrimWriterContext::_ExtractSamples(con"
             "st TfToken &, const std::vector<SdfValueTypeName> &)";
    char v31 = 0;
    sub_21714594C(a1, &v26);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, a2, &v28);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v32, (atomic_uint **)&v25);
    unint64_t v23 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        uint64_t v24 = *(const char **)v24;
      }
    }
    else
    {
      uint64_t v24 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v30, (pxrInternal__aapl__pxrReserved__ *)"Property '%s' did not have expected type (got '%s')", v22, Text, v24);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_21697C414(&v26);
    sub_21714594C(a1, v30);
    sub_21714759C(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)v30, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v30 + 1);
    sub_21697C414(v30);
    if (*((void *)&v36 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  else
  {
LABEL_22:
    sub_217147628(&v33, (uint64_t **)(a1 + 56));
    sub_21697D878((_DWORD *)a4, &v33);
    sub_21697D8B4((_DWORD *)(a4 + 4), (_DWORD *)&v33 + 1);
    *(_OWORD *)(a4 + 8) = v34;
    *(void *)(a4 + 24) = v35;
    *((void *)&v34 + 1) = 0;
    uint64_t v35 = 0;
    long long v18 = v36;
    long long v36 = 0uLL;
    long long v19 = v37;
    *(_OWORD *)(a4 + 32) = v18;
    *(_OWORD *)(a4 + 48) = v19;
    *(void *)(a4 + 64) = v38;
  }
  if (v35) {
    sub_216784EC4(v35);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  return sub_21697C414(&v33);
}

void sub_217147504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_217146FA4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21714759C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64));
  sub_217147B0C(a1);
  return a1;
}

void sub_2171475F0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    sub_216784EC4(v3);
  }
  char v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    sub_216784EC4(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v1 + 4));
  sub_21697C414((_DWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_217147628(uint64_t *result, uint64_t **a2)
{
  uint64_t v2 = (void *)result[6];
  double v5 = (double *)*v2;
  uint64_t v3 = (double *)(v2 + 1);
  char v4 = v5;
  if (v5 != v3)
  {
    do
    {
      uint64_t result = sub_21708827C(a2, v4 + 4, (uint64_t *)v4 + 4);
      uint64_t v7 = (double *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int64x2_t v8 = v7;
          uint64_t v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int64x2_t v8 = (double *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

uint64_t sub_2171476A8(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(this, a3, (int *)a1);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v6 = (uint64_t ***)(a1 + 32);
  *(void *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v7 = (uint64_t ****)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64));
  uint64_t v32 = 0;
  int64x2_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    int64x2_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a4 + 112))(a4, a1, (uint64_t)v8 + 432, &v31))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v12) {
      uint64_t v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a4 + 112))(a4, a1, (uint64_t)v12 + 88, &v31))goto LABEL_27; {
    uint64_t v13 = operator new(0x18uLL);
    }
    v13[2] = 0;
    v13[1] = 0;
    *uint64_t v13 = v13 + 1;
    sub_217147B88((void *)(a1 + 32), (uint64_t)v13);
    uint64_t v14 = *v6;
    uint64_t v25 = 0;
    int v26 = (char *)&v25;
    uint64_t v15 = sub_216A9E780(v14, (double *)&v25, (uint64_t)&unk_2174BFD90, (uint64_t **)&v26);
    sub_21697DC0C(v15 + 5, &v31);
    char v11 = 0;
    goto LABEL_11;
  }
  if ((sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)&v31) & 1) == 0)
  {
    int v26 = "usdAbc/alembicWriter.cpp";
    int v27 = "UsdSamples";
    uint64_t v28 = 195;
    int v29 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::UsdSamples(const SdfPath &, const TfToken"
          " &, const SdfAbstractData &)";
    char v30 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "value.IsHolding<SdfTimeSampleMap>()", 0) & 1) == 0)
    {
LABEL_27:
      sub_217147B0C(a1);
      goto LABEL_28;
    }
  }
  BOOL v9 = operator new(0x10uLL);
  v9[1] = 0;
  sub_217147AC4((void *)(a1 + 16), (uint64_t)v9);
  sub_21697DC0C(*v7, &v31);
  uint64_t v6 = *v7;
  uint64_t v10 = (*v7)[1];
  if ((v10 & 4) == 0)
  {
    char v11 = 1;
LABEL_11:
    uint64_t v16 = (uint64_t)*v6;
    goto LABEL_12;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t ***))(((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8) + 168))(*v7);
  char v11 = 1;
LABEL_12:
  *(void *)(a1 + 48) = v16;
  *(unsigned char *)(a1 + 56) = v11;
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v17) {
    uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a4 + 112))(a4, a1, (uint64_t)v17 + 448, &v31) & 1) == 0)
  {
    int v26 = "usdAbc/alembicWriter.cpp";
    int v27 = "UsdSamples";
    uint64_t v28 = 217;
    int v29 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::UsdSamples(const SdfPath &, const TfToken"
          " &, const SdfAbstractData &)";
    char v30 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
    unint64_t v23 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No type name on <%s>", v21, v22, Text);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "data.Has(_propPath, SdfFieldKeys->TypeName, &value)", v23) & 1) == 0)goto LABEL_27; {
  }
    }
  if ((sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v31) & 1) == 0)
  {
    int v26 = "usdAbc/alembicWriter.cpp";
    int v27 = "UsdSamples";
    uint64_t v28 = 218;
    int v29 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::UsdSamples(const SdfPath &, const TfToken"
          " &, const SdfAbstractData &)";
    char v30 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "value.IsHolding<TfToken>()", 0) & 1) == 0) {
      goto LABEL_27;
    }
  }
  long long v18 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  if ((v32 & 4) != 0) {
    long long v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(uint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                                  + 168))(&v31);
  else {
    long long v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31;
  }
  *(void *)(a1 + 64) = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v18, v19);
  sub_217147BD0(a1);
LABEL_28:
  sub_2168EE084((uint64_t)&v31);
  return a1;
}

void sub_217147A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2168EE084((uint64_t)va);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 40);
  if (v12) {
    sub_216784EC4(v12);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 24);
  if (v13) {
    sub_216784EC4(v13);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v10 + 4));
  sub_21697C414((_DWORD *)v10);
  _Unwind_Resume(a1);
}

void sub_217147AC4(void *a1, uint64_t a2)
{
  sub_217147EC8(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

pxrInternal__aapl__pxrReserved__::SdfValueTypeName *sub_217147B0C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = operator new(0x18uLL);
  v3[2] = 0;
  v3[1] = 0;
  *uint64_t v3 = v3 + 1;
  sub_217147B88((void *)(a1 + 32), (uint64_t)v3);
  *(void *)(a1 + 48) = *(void *)(a1 + 32);
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v5);
  *(void *)(a1 + 64) = v5;
  return result;
}

void sub_217147B88(void *a1, uint64_t a2)
{
  sub_217147FE4(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void sub_217147BD0(uint64_t a1)
{
  uint64_t v2 = *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64));
  uint64_t v45 = v2;
  if (*(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], v3, v4) == v2) {
    uint64_t v2 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], v5, v6);
  }
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v10 = (void *)*v7;
  BOOL v9 = v7 + 1;
  int64x2_t v8 = v10;
  if (v10 != v9)
  {
    char v11 = (uint64_t ***)(a1 + 32);
    do
    {
      while (1)
      {
        uint64_t v12 = (double *)(v8 + 5);
        uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5), v5, v6);
        if (v45 != Type) {
          break;
        }
LABEL_16:
        uint64_t v22 = (void *)v8[1];
        if (v22)
        {
          do
          {
            unint64_t v23 = v22;
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unint64_t v23 = (void *)v8[2];
            BOOL v20 = *v23 == (void)v8;
            int64x2_t v8 = v23;
          }
          while (!v20);
        }
        int64x2_t v8 = v23;
        if (v23 == v9) {
          return;
        }
      }
      if (v2 != pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5), v5, v6))
      {
        v43[0] = (uint64_t *)"usdAbc/alembicWriter.cpp";
        v43[1] = (uint64_t *)"_Validate";
        v43[2] = (uint64_t *)247;
        v43[3] = (uint64_t *)"BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::UsdSamples::_Validate()";
        char v44 = 0;
        sub_216981010(&v41, (_DWORD *)a1);
        sub_21698105C(&v42, (_DWORD *)(a1 + 4));
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
        uint64_t v27 = v8[4];
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v45);
        uint64_t v31 = *(char *)(TypeName + 23) >= 0 ? TypeName : *(void *)TypeName;
        uint64_t v37 = v31;
        uint64_t v40 = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 5), v29, v30);
        uint64_t v32 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v40);
        uint64_t v35 = *(char *)(v32 + 23) >= 0 ? v32 : *(void *)v32;
        long long v36 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Expected sample at <%s> time %f of type '%s', got '%s'", v33, v34, Text, v27, v37, v35);
        char v39 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v43, "v.second.GetType() == backupType", v36);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_21697C414(&v41);
        if ((v39 & 1) == 0)
        {
          sub_217147B0C(a1);
          return;
        }
      }
      uint64_t v14 = *v11;
      if (*v11)
      {
        uint64_t v15 = v8[6];
        if ((v15 & 4) != 0)
        {
          uint64_t v12 = (double *)(*(uint64_t (**)(void *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v8 + 5);
          uint64_t v14 = *v11;
        }
        double v16 = *v12;
        v43[0] = v8 + 4;
        uint64_t v17 = sub_216A9E780(v14, (double *)v8 + 4, (uint64_t)&unk_2174BFD90, v43);
        long long v18 = v17;
        uint64_t v19 = v17[6];
        if (v19) {
          BOOL v20 = (v17[6] & 3) == 3;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20) {
          (*(void (**)(uint64_t *))((v19 & 0xFFFFFFFFFFFFFFF8) + 32))(v17 + 5);
        }
        float v21 = v16;
        v18[6] = (uint64_t)&unk_26C750A4B;
        *((float *)v18 + 10) = v21;
        goto LABEL_16;
      }
      uint64_t v24 = (uint64_t *)operator new(0x18uLL);
      sub_216997AE0(v24, *(void *)(a1 + 48));
      sub_217147B88((void *)(a1 + 32), (uint64_t)v24);
      uint64_t v25 = *(void **)(a1 + 32);
      *(void *)(a1 + 48) = v25;
      int v26 = (void *)*v25;
      BOOL v9 = v25 + 1;
      int64x2_t v8 = v26;
    }
    while (v26 != v9);
  }
}

void sub_217147EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *sub_217147EC8(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C77A690;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217147F20(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_2168EE084(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_217147F40(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_217147F68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_2168EE084(v1);
    operator delete(v2);
  }
}

uint64_t sub_217147FA0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A6E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217147FE4(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C77A708;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  uint64_t v6 = 0;
  sub_217148130(&v6, 0);
  return a1;
}

void sub_217148058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217148130((void ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_217148074(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21714809C(uint64_t a1)
{
}

uint64_t sub_2171480A4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A758)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171480E8(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_216997EC4((uint64_t)a2, a2[1]);
    operator delete(a2);
  }
}

void sub_217148130(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_216997EC4((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

uint64_t sub_217148184(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95EE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95EE0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95ED8, "constant");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95ED8, &dword_216758000);
    __cxa_guard_release(&qword_267B95EE0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95EF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95EF0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95EE8, "uniform");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95EE8, &dword_216758000);
    __cxa_guard_release(&qword_267B95EF0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95F00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95F00))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95EF8, "varying");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95EF8, &dword_216758000);
    __cxa_guard_release(&qword_267B95F00);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95F10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95F10))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95F08, "vertex");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95F08, &dword_216758000);
    __cxa_guard_release(&qword_267B95F10);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95F20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95F20))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95F18, "faceVarying");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95F18, &dword_216758000);
    __cxa_guard_release(&qword_267B95F20);
  }
  if (!*a1) {
    return 0;
  }
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v2 == (qword_267B95ED8 & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  if (v2 == (qword_267B95EE8 & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  if (v2 == (qword_267B95EF8 & 0xFFFFFFFFFFFFFFF8)) {
    return 2;
  }
  if (v2 == (qword_267B95F08 & 0xFFFFFFFFFFFFFFF8)) {
    return 3;
  }
  if (v2 == (qword_267B95F18 & 0xFFFFFFFFFFFFFFF8)) {
    return 4;
  }
  return 127;
}

void sub_217148444(_Unwind_Exception *a1)
{
}

void sub_21714849C(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X3>, pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a3@<X0>, uint64_t a4@<X1>, int *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (*((void *)a2 + 1))
  {
    if (!*(void *)(a4 + 24))
    {
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, (atomic_uint **)__p);
      unint64_t v19 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
      if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        BOOL v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          BOOL v20 = *(const char **)v20;
        }
      }
      else
      {
        BOOL v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No conversion for '%s'", v17, v18, v20);
      pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((long long *)&v41, (void *)a7);
      if (SHIBYTE(v42) < 0) {
        operator delete(v41);
      }
      goto LABEL_51;
    }
    if ((a6 & 1) == 0)
    {
      uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(a3, a1);
      if (__PAIR64__(*((unsigned __int8 *)a5 + 4), *a5) != __PAIR64__(BYTE4(Converter), Converter))
      {
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, (atomic_uint **)&Type);
        unint64_t v27 = Type & 0xFFFFFFFFFFFFFFF8;
        if ((Type & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v28 = (const char *)(v27 + 16);
          if (*(char *)(v27 + 39) < 0) {
            uint64_t v28 = *(const char **)v28;
          }
        }
        else
        {
          uint64_t v28 = "";
        }
        uint64_t v29 = *((unsigned __int8 *)a5 + 4);
        uint64_t v30 = *a5;
        if (v29 < 2)
        {
          if (v30 > 0xD) {
            uint64_t v32 = "UNKNOWN";
          }
          else {
            uint64_t v32 = off_264294748[v30];
          }
          sub_216779094(__p, v32);
        }
        else
        {
          if (v30 > 0xD) {
            uint64_t v31 = "UNKNOWN";
          }
          else {
            uint64_t v31 = off_264294748[v30];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s[%d]", v25, v26, v31, v29);
        }
        uint64_t v40 = __p;
        if (v46 < 0) {
          uint64_t v40 = (void **)__p[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Internal error: trying to convert '%s' to '%s'", v38, v39, v28, v40);
        pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((long long *)&v41, (void *)a7);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41);
        }
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v37 = Type;
        goto LABEL_63;
      }
    }
    uint64_t v13 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    int v41 = 0;
    uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v13, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v41);
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)&Type, (void **)a1))
    {
      uint64_t v14 = (void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(a1);
      if (*v14 != *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type))
      {
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, (atomic_uint **)__p);
        unint64_t v15 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          double v16 = (const char *)(v15 + 16);
          if (*(char *)(v15 + 39) < 0) {
            double v16 = *(const char **)v16;
          }
        }
        else
        {
          double v16 = "";
        }
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&Type, (atomic_uint **)&v44);
        unint64_t v35 = v44 & 0xFFFFFFFFFFFFFFF8;
        if ((v44 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          long long v36 = (const char *)(v35 + 16);
          if (*(char *)(v35 + 39) < 0) {
            long long v36 = *(const char **)v36;
          }
        }
        else
        {
          long long v36 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Internal error: Trying to use conversion for '%s' to convert from '%s'", v33, v34, v16, v36);
        pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((long long *)&v41, (void *)a7);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41);
        }
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_51:
        uint64_t v37 = (uint64_t)__p[0];
LABEL_63:
        if ((v37 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        return;
      }
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_21683A7CC();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v21 + 48))(&v41);
    unint64_t v24 = *((unsigned __int8 *)a5 + 4);
    if (v24 == 1 || !((unint64_t)v41 % v24))
    {
      *(void *)a7 = v41;
      *(_OWORD *)(a7 + 8) = v42;
      long long v42 = 0uLL;
      *(_OWORD *)(a7 + 24) = v43;
      long long v43 = 0uLL;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Internal error: didn't get a multiple of the extent (%zd %% %d = %zd)", v22, v23, v41, *((unsigned __int8 *)a5 + 4), (unint64_t)v41 % v24);
      pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((long long *)__p, (void *)a7);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      if (*((void *)&v43 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v43 + 1));
      }
    }
    if (*((void *)&v42 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  else
  {
    sub_217148CAC((void *)a7);
  }
}

void sub_2171488B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_217148C70((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void *sub_2171489A0(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(v2 + 16))
  {
    long long v5 = *(void **)(v2 + 8);
    uint64_t v3 = (void *)(v2 + 8);
    long long v4 = v5;
    if (v5)
    {
      uint64_t v6 = v3;
      uint64_t v7 = v4;
      do
      {
        int64x2_t v8 = v7 + 1;
        if (*((double *)v7 + 4) >= a2)
        {
          int64x2_t v8 = v7;
          uint64_t v6 = v7;
        }
        uint64_t v7 = (void *)*v8;
      }
      while (*v8);
      if (v6 == v3)
      {
        do
        {
          uint64_t v6 = v4;
          long long v4 = (void *)v4[1];
        }
        while (v4);
      }
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v3[2];
        BOOL v9 = *v6 == (void)v3;
        uint64_t v3 = v6;
      }
      while (v9);
    }
    return v6 + 5;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B95F38, memory_order_acquire))
  {
    return &unk_267B95F28;
  }
  else
  {
    if (__cxa_guard_acquire(&qword_267B95F38))
    {
      qword_267B95F30 = 0;
      __cxa_atexit((void (*)(void *))sub_216B64E50, &unk_267B95F28, &dword_216758000);
      __cxa_guard_release(&qword_267B95F38);
    }
    return &unk_267B95F28;
  }
}

BOOL sub_217148A90(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  if ((*(unsigned int (**)(void, void **))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v18))
  {
    v16[0] = "usdAbc/alembicWriter.cpp";
    v16[1] = "_CheckSample";
    v16[2] = 1382;
    v16[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CheckSample(const _SampleForAlembic &, const"
             " UsdSamples &, const SdfValueTypeName &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(a3, (atomic_uint **)&v15);
    unint64_t v6 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
    }
    else
    {
      uint64_t v7 = "";
    }
    sub_216981010(&v13, a2);
    sub_21698105C(&v14, a2 + 1);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
    char v11 = v18;
    if (v19 < 0) {
      char v11 = (void **)v18[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v16, (pxrInternal__aapl__pxrReserved__ *)"Can't convert from '%s' on <%s>: %s", v10, v7, Text, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    BOOL v8 = 0;
  }
  else
  {
    BOOL v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) != 0;
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  return v8;
}

void sub_217148C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  if (*(char *)(v14 - 33) < 0) {
    operator delete(*(void **)(v14 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217148C70(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_216784EC4(v3);
  }
  return a1;
}

void *sub_217148CAC(void *a1)
{
  *a1 = 0;
  uint64_t v2 = operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_EmptyHolder::_EmptyHolder(v2);
  sub_217122B64(a1 + 1, (uint64_t)v2);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_217148CF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217148D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_217148D78(a1, (double **)a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  if (sub_217148DEC(*(double **)a2, (double *)(a2 + 8), *(double **)(v5 + 32), (double *)(v5 + 40))) {
    return v3;
  }
  return v5;
}

uint64_t sub_217148D78(uint64_t a1, double **a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    uint64_t v7 = (double *)(a2 + 1);
    do
    {
      int v8 = sub_217148DEC(*(double **)(v5 + 32), (double *)(v5 + 40), *a2, v7);
      BOOL v9 = (uint64_t *)(v5 + 8);
      if (!v8)
      {
        BOOL v9 = (uint64_t *)v5;
        a4 = v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
  }
  return a4;
}

uint64_t sub_217148DEC(double *a1, double *a2, double *a3, double *a4)
{
  if (a3 == a4) {
    return 0;
  }
  while (a1 != a2)
  {
    double v4 = a1[4];
    double v5 = a3[4];
    if (v4 < v5) {
      break;
    }
    if (v5 >= v4)
    {
      unint64_t v6 = (double *)*((void *)a1 + 1);
      uint64_t v7 = a1;
      if (v6)
      {
        do
        {
          a1 = v6;
          unint64_t v6 = *(double **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          a1 = (double *)*((void *)v7 + 2);
          BOOL v8 = *(void *)a1 == (void)v7;
          uint64_t v7 = a1;
        }
        while (!v8);
      }
      BOOL v9 = (double *)*((void *)a3 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = *(double **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (double *)*((void *)a3 + 2);
          BOOL v8 = *(void *)v10 == (void)a3;
          a3 = v10;
        }
        while (!v8);
      }
      a3 = v10;
      if (v10 != a4) {
        continue;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t *sub_217148E8C(uint64_t **a1, double **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)sub_217148F24((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_217148FDC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, (uint64_t)v9, v6, v8);
    return v8;
  }
  return result;
}

double *sub_217148F24(uint64_t a1, double **a2, double **a3)
{
  double v5 = (double *)(a1 + 8);
  double v4 = *(double **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = (double *)(a3 + 1);
    do
    {
      while (1)
      {
        BOOL v8 = v4;
        BOOL v9 = v4 + 5;
        if (!sub_217148DEC(*a3, v7, *((double **)v4 + 4), v4 + 5)) {
          break;
        }
        double v4 = *(double **)v8;
        double v5 = v8;
        if (!*(void *)v8) {
          goto LABEL_10;
        }
      }
      if (!sub_217148DEC(*((double **)v8 + 4), v9, *a3, v7)) {
        break;
      }
      double v5 = v8 + 1;
      double v4 = (double *)*((void *)v8 + 1);
    }
    while (v4);
  }
  else
  {
    BOOL v8 = (double *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_217148FDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (uint64_t *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2170E53B4(v6 + 4, *a2);
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217149048(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_217149064(v3, v2);
  _Unwind_Resume(a1);
}

void sub_217149064(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2167FB780((uint64_t)(a2 + 4), a2[5]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void *sub_2171490C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C77A780;
  result[1] = v3;
  return result;
}

uint64_t sub_217149110(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C77A780;
  a2[1] = v2;
  return result;
}

uint64_t sub_21714913C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_217149148(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A7F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217149188()
{
  return &unk_26C77A7F0;
}

void sub_217149194(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v63 = 0;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698FA28(&v63, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  uint64_t v7 = v63;
  std::string::size_type v8 = v64.__r_.__value_.__r.__words[0];
  if (v63 == (uint64_t *)v64.__r_.__value_.__l.__data_)
  {
LABEL_8:
    int v58 = (void **)&v63;
    sub_216889A04(&v58);
    return;
  }
  while (1)
  {
    BOOL v9 = (*v7 & 0xFFFFFFFFFFFFFFF8) != 0
       ? (unsigned __int8 *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 16)
       : (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens(v9, (uint64_t *)&v58);
    if (v59.__r_.__value_.__r.__words[0] - (unint64_t)v58 >= 9
      && ((unint64_t)*v58 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      break;
    }
    int v41 = (void **)&v58;
    sub_216889A04(&v41);
    if (++v7 == (uint64_t *)v8) {
      goto LABEL_8;
    }
  }
  int v41 = (void **)&v58;
  sub_216889A04(&v41);
  int v58 = (void **)&v63;
  sub_216889A04(&v58);
  uint64_t v10 = *(void *)(a3 + 24);
  if (!v10) {
    sub_21683A7CC();
  }
  (*(void (**)(void ***__return_ptr))(*(void *)v10 + 48))(&v58);
  char v11 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v59.__r_.__value_.__l.__size_) {
      goto LABEL_14;
    }
LABEL_15:
    Alembic::Abc::v12::OObject::getProperties(*(Alembic::Abc::v12::OObject **)(*(void *)(a1 + 8) + 8), (uint64_t)&v63);
    LODWORD(v58) = v63;
    std::string::operator=(&v59, &v64);
    uint64_t v13 = v65;
    uint64_t v12 = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v61;
    uint64_t v60 = v13;
    int v61 = v12;
    if (v14) {
      sub_216784EC4(v14);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v63);
    char v11 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    goto LABEL_20;
  }
  if (*((unsigned char *)&v59.__r_.__value_.__s + 23)) {
    goto LABEL_15;
  }
LABEL_14:
  if (!v60) {
    goto LABEL_15;
  }
LABEL_20:
  int v52 = (int)v58;
  if (v11 < 0) {
    sub_216778F24(&v53, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else {
    std::string v53 = v59;
  }
  uint64_t v54 = v60;
  uint64_t v55 = v61;
  if (v61) {
    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v57[0] = 0;
  v57[1] = 0;
  uint64_t v56 = v57;
  uint64_t v63 = 0;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
  v62[0] = &v63;
  unint64_t v15 = sub_217149FF0((uint64_t **)&v56, &v63, (uint64_t)&unk_2174BFD90, (uint64_t *)v62);
  *((_DWORD *)v15 + 14) = v52;
  std::string::operator=((std::string *)(v15 + 8), &v53);
  uint64_t v17 = v54;
  uint64_t v16 = (uint64_t)v55;
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = (std::__shared_weak_count *)v15[12];
  v15[11] = v17;
  v15[12] = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  int v41 = (void **)&v63;
  sub_216889A04(&v41);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v52);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_21698FA28(&v49, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  uint64_t v19 = v49;
  for (i = v50; v19 != i; uint64_t v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v19 + 8))
  {
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (!v21) {
      uint64_t v21 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    }
    unint64_t v22 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
    if (v22 == (*((void *)v21 + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      if (!v21) {
        uint64_t v21 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      unint64_t v22 = *((void *)v21 + 5) & 0xFFFFFFFFFFFFFFF8;
      if (!v22)
      {
LABEL_38:
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
        goto LABEL_39;
      }
    }
    else if (!v22)
    {
      goto LABEL_38;
    }
    EmptyString = (uint64_t *)(v22 + 16);
LABEL_39:
    pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)EmptyString, (uint64_t *)&v47);
    if ((unint64_t)((char *)v48 - (char *)v47) >= 9
      && (*v47 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216A8E2D8(v47 + 1, v48, v47);
      for (j = v48; j != v25; --j)
      {
        uint64_t v28 = *(j - 1);
        uint64_t v27 = v28;
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      unint64_t v48 = v25;
      if ((*(v25 - 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v29 = (uint64_t *)((*(v25 - 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
      }
      if (*((char *)v29 + 23) < 0)
      {
        sub_216778F24(__p, (void *)*v29, v29[1]);
      }
      else
      {
        long long v30 = *(_OWORD *)v29;
        uint64_t v46 = v29[2];
        *(_OWORD *)std::string __p = v30;
      }
      uint64_t v31 = v48 - 1;
      uint64_t v32 = *(v48 - 1);
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v48 = v31;
      v62[0] = &v47;
      uint64_t v33 = sub_21714A5FC((uint64_t **)&v56, &v47, (uint64_t)&unk_2174BFD90, v62);
      long long v34 = v33;
      LODWORD(v63) = *((_DWORD *)v33 + 14);
      if (*((char *)v33 + 87) < 0) {
        sub_216778F24(&v64, (void *)v33[8], v33[9]);
      }
      else {
        std::string v64 = *(std::string *)(v33 + 8);
      }
      uint64_t v35 = v34[12];
      uint64_t v65 = v34[11];
      int v66 = (std::__shared_weak_count *)v35;
      if (v35) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v64.__r_.__value_.__l.__size_ && v65)
        {
          LODWORD(v41) = v63;
          sub_216778F24(&v42, v64.__r_.__value_.__l.__data_, 0);
          uint64_t v36 = v65;
          goto LABEL_65;
        }
      }
      else if (!*((unsigned char *)&v64.__r_.__value_.__s + 23))
      {
        uint64_t v36 = v65;
        if (v65)
        {
          LODWORD(v41) = v63;
          std::string v42 = v64;
LABEL_65:
          uint64_t v43 = v36;
          unint64_t v44 = v66;
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
LABEL_68:
          Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v63);
          int v37 = (int)v41;
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            sub_216778F24(&v38, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
          }
          else {
            std::string v38 = v42;
          }
          uint64_t v39 = v43;
          uint64_t v40 = v44;
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_2171498C0((uint64_t *)a1, &v37, v19, (uint64_t)__p);
          Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v37);
          Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v41);
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_75;
        }
      }
      memset(v62, 0, sizeof(v62));
      sub_21698FA28(v62, v47, v48, v48 - v47);
      sub_21714A384((uint64_t **)&v56, (uint64_t)v62, (uint64_t)&v41);
      int v67 = v62;
      sub_216889A04((void ***)&v67);
      goto LABEL_68;
    }
LABEL_75:
    uint64_t v63 = (uint64_t *)&v47;
    sub_216889A04((void ***)&v63);
  }
  uint64_t v63 = (uint64_t *)&v49;
  sub_216889A04((void ***)&v63);
  sub_21714A31C((uint64_t)&v56, v57[0]);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v58);
}

void sub_21714978C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v43 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_217149898(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 24))();
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *sub_2171498C0(uint64_t *a1, int *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  if (sub_21714A794(a1, a3) == 1)
  {
    int v52 = 0;
    uint64_t v53 = 0;
    uint64_t v51 = &v52;
    if (a1 + 7 == (uint64_t *)&v51)
    {
      std::string::size_type v8 = 0;
    }
    else
    {
      sub_217146FFC((uint64_t **)a1 + 7, &v52, &v52);
      std::string::size_type v8 = (char *)v52;
    }
    sub_2167FB780((uint64_t)&v51, v8);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v50 = 0;
    sub_2171471F0((uint64_t)a1, a3, (uint64_t)__p, (uint64_t)&v51);
    if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v57)[3])
    {
      uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v57);
      BOOL IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v57);
      unint64_t v15 = (long long *)(a2 + 2);
      if (IsArray)
      {
        int v44 = *a2;
        if (*((char *)a2 + 31) < 0)
        {
          sub_216778F24(&v45, *((void **)a2 + 1), *((void *)a2 + 2));
        }
        else
        {
          long long v45 = *v15;
          uint64_t v46 = *((void *)a2 + 3);
        }
        uint64_t v21 = *((void *)a2 + 5);
        uint64_t v47 = *((void *)a2 + 4);
        uint64_t v48 = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v43 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v57) & 0xFFFFFFFFFFLL;
        sub_21714611C(a1, a3, (uint64_t)&v51, (uint64_t)&v65);
        LODWORD(v58) = 3;
        std::string v59 = &v65;
        LODWORD(v63) = 0;
        LODWORD(v64) = 0;
        int v41 = 0;
        int v42 = 0;
        Alembic::Abc::v12::OArrayProperty::OArrayProperty(__p, &v44, a4, &v43, &v58, &v63, &v41);
        sub_2167877AC((uint64_t)&v65, v66);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v44);
        unint64_t v22 = (double *)a1[7];
        if (v22 != (double *)(a1 + 8))
        {
          do
          {
            double v23 = v22[4];
            unint64_t v24 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88);
            uint64_t v25 = sub_2167C5C4C((uint64_t)__p);
            int v26 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)&v51, v23);
            sub_21714849C((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v57, v26, v24, (uint64_t)Converter, (int *)(v25 + 56), 1, (uint64_t)&v65);
            if (sub_217148A90((uint64_t)&v65, &v51, (uint64_t)&v57))
            {
              unint64_t v58 = v65 / *(unsigned __int8 *)(v25 + 60);
              sub_2167864B4(&v63, 1uLL, &v58);
              uint64_t v27 = (*(uint64_t (**)(void *))(*v66 + 16))(v66);
              uint64_t v28 = *(unint64_t **)(v25 + 56);
              unint64_t v58 = v27;
              std::string v59 = v28;
              int v61 = 0;
              uint64_t v62 = 0;
              uint64_t v60 = 0;
              sub_21677EA60(&v60, v63, (uint64_t)v64, (v64 - (unsigned char *)v63) >> 3);
              Alembic::Abc::v12::OArrayProperty::set((uint64_t)__p);
              if (v60)
              {
                int v61 = v60;
                operator delete(v60);
              }
              if (v63)
              {
                std::string v64 = v63;
                operator delete(v63);
              }
            }
            if (v68) {
              sub_216784EC4(v68);
            }
            if (v67) {
              sub_216784EC4(v67);
            }
            uint64_t v29 = (uint64_t *)*((void *)v22 + 1);
            if (v29)
            {
              do
              {
                long long v30 = v29;
                uint64_t v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                long long v30 = (uint64_t *)*((void *)v22 + 2);
                BOOL v31 = *v30 == (void)v22;
                unint64_t v22 = (double *)v30;
              }
              while (!v31);
            }
            unint64_t v22 = (double *)v30;
          }
          while (v30 != a1 + 8);
        }
        sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
        Alembic::Abc::v12::OArrayProperty::setTimeSampling((Alembic::Abc::v12::OArrayProperty *)__p);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)__p);
      }
      else
      {
        int v36 = *a2;
        if (*((char *)a2 + 31) < 0)
        {
          sub_216778F24(&v37, *((void **)a2 + 1), *((void *)a2 + 2));
        }
        else
        {
          long long v37 = *v15;
          uint64_t v38 = *((void *)a2 + 3);
        }
        uint64_t v32 = *((void *)a2 + 5);
        uint64_t v39 = *((void *)a2 + 4);
        uint64_t v40 = v32;
        if (v32) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v43 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v57) & 0xFFFFFFFFFFLL;
        sub_21714611C(a1, a3, (uint64_t)&v51, (uint64_t)&v65);
        LODWORD(v58) = 3;
        std::string v59 = &v65;
        LODWORD(v63) = 0;
        LODWORD(v64) = 0;
        int v41 = 0;
        int v42 = 0;
        Alembic::Abc::v12::OScalarProperty::OScalarProperty(__p, &v36, a4, &v43, &v58, &v63, &v41);
        sub_2167877AC((uint64_t)&v65, v66);
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v36);
        uint64_t v33 = (uint64_t *)a1[7];
        if (v33 != a1 + 8)
        {
          do
          {
            sub_217146A60(*(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion **)(*a1 + 88), (uint64_t)Converter, &v51, (Alembic::Abc::v12::OScalarProperty *)__p, *((double *)v33 + 4));
            long long v34 = (uint64_t *)v33[1];
            if (v34)
            {
              do
              {
                uint64_t v35 = v34;
                long long v34 = (uint64_t *)*v34;
              }
              while (v34);
            }
            else
            {
              do
              {
                uint64_t v35 = (uint64_t *)v33[2];
                BOOL v31 = *v35 == (void)v33;
                uint64_t v33 = v35;
              }
              while (!v31);
            }
            uint64_t v33 = v35;
          }
          while (v35 != a1 + 8);
        }
        sub_217146B60((double **)a1, (uint64_t)(a1 + 7));
        Alembic::Abc::v12::OScalarProperty::setTimeSampling((Alembic::Abc::v12::OScalarProperty *)__p);
        Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)__p);
      }
    }
    if (v56) {
      sub_216784EC4(v56);
    }
    if (v54) {
      sub_216784EC4(v54);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
    BOOL v20 = (unint64_t *)&v51;
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)sub_21697C414(v20);
  }
  uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!result) {
    uint64_t result = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  }
  uint64_t v10 = *(void **)(*a1 + 24);
  if (v10)
  {
    unint64_t v11 = *(void *)result & 0xFFFFFFFFFFFFFFF8;
    do
    {
      unint64_t v12 = v10[4] & 0xFFFFFFFFFFFFFFF8;
      if (v11 >= v12)
      {
        if (v12 >= v11)
        {
          uint64_t v51 = (const char **)"usdAbc/alembicWriter.cpp";
          int v52 = "_WriteOutOfSchemaProperty";
          uint64_t v53 = 2098;
          uint64_t v54 = (std::__shared_weak_count *)"BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_WriteOutOfSch"
                                            "emaProperty(_PrimWriterContext *, OCompoundProperty, const TfToken &, const std::string &)";
          char v55 = 0;
          sub_21714594C((uint64_t)a1, &v58);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, a3, (int *)&v65);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65);
          unsigned int v17 = sub_21714A794(a1, a3);
          pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&stru_26C755200, v17, (uint64_t)__p);
          if (v50 >= 0) {
            uint64_t v19 = __p;
          }
          else {
            uint64_t v19 = (void **)__p[0];
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__ *)"No conversion for <%s> with spec type '%s'", v18, Text, v19);
          if (SHIBYTE(v50) < 0) {
            operator delete(__p[0]);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
          sub_21697C414(&v65);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
          BOOL v20 = &v58;
          return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)sub_21697C414(v20);
        }
        ++v10;
      }
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  return result;
}

void sub_217149EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36)
{
}

uint64_t *sub_217149FF0(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)sub_21714A088((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_21714A120((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_21714A088(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  double v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        if (!sub_21714A1A4(*a3, a3[1], (uint64_t *)v4[4], (uint64_t *)v4[5], (uint64_t)&v9)) {
          break;
        }
        double v4 = (uint64_t *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_21714A1A4((uint64_t *)v7[4], (uint64_t *)v7[5], *a3, a3[1], (uint64_t)&v10)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      double v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_21714A120@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_21714A248((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21714A188(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21714A2C8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_21714A1A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  if (a3 == a4) {
    return 0;
  }
  uint64_t v7 = a3;
  while (a1 != a2 && (sub_2168BE1F8(a5, a1, v7) & 1) == 0)
  {
    char v10 = sub_2168BE1F8(a5, v7, a1);
    uint64_t result = 0;
    if ((v10 & 1) == 0)
    {
      ++a1;
      if (++v7 != a4) {
        continue;
      }
    }
    return result;
  }
  return 1;
}

uint64_t sub_21714A248(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_216779094((void *)(a1 + 32), "");
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_21714A2B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21714A2C8(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(__p + 7));
    uint64_t v3 = __p + 4;
    sub_216889A04(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_21714A31C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_21714A31C(a1, *(void *)a2);
    sub_21714A31C(a1, *((void *)a2 + 1));
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a2 + 56));
    double v4 = (void **)(a2 + 32);
    sub_216889A04(&v4);
    operator delete(a2);
  }
}

unsigned char *sub_21714A384@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = (uint64_t **)a2;
  unint64_t v6 = sub_21714A5FC(a1, (uint64_t **)a2, (uint64_t)&unk_2174BFD90, &v32);
  uint64_t v7 = v6;
  if (*((char *)v6 + 87) < 0)
  {
    if (!v6[9]) {
      goto LABEL_5;
    }
  }
  else if (!*((unsigned char *)v6 + 87))
  {
LABEL_5:
    if (v6[11]) {
      goto LABEL_28;
    }
  }
  uint64_t v8 = *(void *)(a2 + 8);
  unint64_t v9 = *(void *)(v8 - 8);
  if ((v9 & 7) != 0)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v8 = *(void *)(a2 + 8);
    unint64_t v9 = *(void *)(v8 - 8);
  }
  else
  {
    unint64_t v10 = *(void *)(v8 - 8);
  }
  uint64_t v11 = v8 - 8;
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(a2 + 8) = v11;
  sub_21714A384(&v32, a1, a2);
  int v23 = (int)v32;
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)&v24;
  if (SHIBYTE(v34) < 0)
  {
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216778F24(&v24, (void *)v33, *((unint64_t *)&v33 + 1));
  }
  else
  {
    long long v24 = v33;
    uint64_t v25 = v34;
  }
  uint64_t v26 = v35;
  uint64_t v27 = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)(v13 + 4);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  }
  v22[0] = 0;
  v22[2] = 0;
  v21[0] = 0;
  v21[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v28, &v23, EmptyString, v22, v21);
  *((_DWORD *)v7 + 14) = v28;
  std::string::operator=((std::string *)(v7 + 8), &v29);
  uint64_t v16 = v30;
  uint64_t v15 = v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = (std::__shared_weak_count *)v7[12];
  v7[11] = v16;
  v7[12] = v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v28);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v32);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
LABEL_28:
  *(_DWORD *)a3 = *((_DWORD *)v7 + 14);
  uint64_t result = (unsigned char *)(a3 + 8);
  if (*((char *)v7 + 87) < 0)
  {
    uint64_t result = sub_216778F24(result, (void *)v7[8], v7[9]);
  }
  else
  {
    long long v19 = *((_OWORD *)v7 + 4);
    *(void *)(a3 + 24) = v7[10];
    *(_OWORD *)uint64_t result = v19;
  }
  *(void *)(a3 + 32) = v7[11];
  uint64_t v20 = v7[12];
  *(void *)(a3 + 40) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21714A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)va);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v6 - 96));
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21714A5FC(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t v6 = (uint64_t **)sub_21714A088((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_21714A694((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_21714A694@<X0>(uint64_t a1@<X0>, uint64_t ***a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_21714A718((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21714A6FC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21714A2C8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_21714A718(uint64_t a1, uint64_t **a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_21698FA28((void *)a1, *a2, a2[1], a2[1] - *a2);
  *(_DWORD *)(a1 + 24) = 2;
  sub_216779094((void *)(a1 + 32), "");
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_21714A77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21714A794(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a1;
  uint64_t v7 = *(void *)(v5 + 104);
  uint64_t v6 = (uint64_t *)(v5 + 104);
  if (v7)
  {
    if (*(unsigned char *)(sub_216850B68(v6) + 14)) {
      uint64_t v8 = *(void *)(v4 + 96);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_21714594C((uint64_t)a1, &v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a2, &v13);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 96))(v8, &v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  return v9;
}

void sub_21714A874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
}

__n128 sub_21714A8A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C77A820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21714A8F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C77A820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21714A92C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_21714A954(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A8B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21714A994()
{
  return &unk_26C77A8B8;
}

void *sub_21714A9A0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_21714AA24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 32))();
}

void sub_21714AA4C(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a3;
  uint64_t v8 = operator new(8uLL);
  void *v8 = v7;
  v9[1] = v8 + 1;
  v9[2] = v8 + 1;
  v9[0] = v8;
  sub_2171471F0(a1, a2, (uint64_t)v9, a4);

  operator delete(v8);
}

void sub_21714AAD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_21714AAE8()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B95F40);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "transform", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "xformOp:transform", 0);
    uint64_t v3 = *(atomic_uint **)v0;
    uint64_t v15 = v3;
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    uint64_t v16 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    int v13 = (void **)(v0 + 16);
    char v14 = 0;
    uint64_t v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      uint64_t v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      int v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B95F40, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      int v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B95F40);
    }
  }
  return (unint64_t)v0;
}

void sub_21714ACC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_21714AD50(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v12 = (_DWORD *)(a1 + 8);
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77A8E0;
  sub_21714B8D0(a1 + 56);
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  uint64_t v38 = 0;
  __p[0] = &__p[1];
  int v50 = v13;
  sub_2167898D0((uint64_t *)v51, (const void ***)__p);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  uint64_t v55 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a4, (uint64_t)&v50);
  sub_2167A030C(a5, (uint64_t)&v50);
  sub_2167A030C(a6, (uint64_t)&v50);
  *uint64_t v12 = v50;
  uint64_t v48 = v12;
  uint64_t v49 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  char v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    sub_216778A5C((uint64_t)__p);
    sub_216779180(&v38, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_216778E70(&__str, &v46);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int v28 = sub_216779038(exception, (uint64_t)&__str);
    __cxa_throw(v28, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v46, v51);
  if (HIDWORD(v55) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Xform_v3");
    uint64_t v40 = __p;
    uint64_t v17 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaObjTitle");
    sub_21714B518(&__str);
    uint64_t v40 = __p;
    long long v18 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  sub_2167A94C0(&__str, a3, (const void ***)&v46);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v19 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v19;
  if (v20)
  {
    sub_216784EC4(v20);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v22 = v52;
  uint64_t v21 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v23 = (*(uint64_t (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v23 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  uint64_t v40 = (void **)v41;
  if (HIDWORD(v55) == 1)
  {
    sub_216779094(__p, "replace");
    sub_216779094(&v39, "1");
    long long v33 = __p;
    long long v24 = sub_21677B174((uint64_t **)&v40, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v33);
    std::string::operator=((std::string *)(v24 + 7), &v39);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v35);
  sub_216779094(&v39, ".xform");
  int v25 = *v12;
  LODWORD(v33) = 1;
  int v34 = v25;
  v32[0] = 2;
  void v32[2] = v23;
  int v30 = 3;
  uint64_t v31 = (uint64_t **)&v40;
  v29[0] = 6;
  v29[2] = v16;
  Alembic::AbcGeom::v12::OXformSchema::OXformSchema(__p, &v35, &v39, &v33, v32, &v30, v29);
  sub_21714B5F8(a1 + 56, (uint64_t)__p);
  sub_2168064DC((uint64_t)__p);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v36) {
    sub_216784EC4(v36);
  }
  sub_2167877AC((uint64_t)&v40, v41[0]);
  if (v21) {
    sub_216784EC4(v21);
  }
  sub_2167877AC((uint64_t)v45, v45[1]);
  if (v44 < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v46, *((void **)&v46 + 1));
  if (v14) {
    sub_216784EC4(v14);
  }
  if (v53) {
    sub_216784EC4(v53);
  }
  sub_2167877AC((uint64_t)v51, v51[1]);
  return a1;
}

void sub_21714B2CC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(__p, a12);
  sub_216779148((std::exception *)&STACK[0x248]);
  sub_216778D38((uint64_t)__p);
  if (v14) {
    sub_216784EC4(v14);
  }
  long long v18 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v19 = (uint64_t)v18;
    sub_2168046F4(v13);
    sub_2167A9424(v12);
    sub_21679FA64(v15 - 168, v19);
  }
  else
  {
    sub_2168046F4(v13);
    sub_2167A9424(v12);
    sub_21679F9F4(v15 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21714B214);
}

void sub_21714B464()
{
}

void sub_21714B470()
{
}

void sub_21714B484()
{
}

void sub_21714B49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x21714B3E8);
}

void sub_21714B4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
}

void sub_21714B4EC()
{
}

void sub_21714B4F4(_Unwind_Exception *a1)
{
  sub_2167A03C4(v3 - 152);
  sub_2168064DC(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_21714B518(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_Xform_v3");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".xform");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_21714B5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21714B5F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v7;
  if (a1 != a2) {
    sub_21677CC7C((char *)(a1 + 88), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  uint64_t v9 = *(void *)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v9;
  *(void *)(a1 + 152) = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  long long v11 = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = v11;
  if (v12) {
    sub_216784EC4(v12);
  }
  long long v13 = *(_OWORD *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  char v14 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = v13;
  if (v14) {
    sub_216784EC4(v14);
  }
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  uint64_t v16 = *(void *)(a2 + 224);
  uint64_t v15 = *(void *)(a2 + 232);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 232);
  *(void *)(a1 + 224) = v16;
  *(void *)(a1 + 232) = v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  uint64_t v19 = *(void *)(a2 + 272);
  uint64_t v18 = *(void *)(a2 + 280);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 280);
  *(void *)(a1 + 272) = v19;
  *(void *)(a1 + 280) = v18;
  if (v20) {
    sub_216784EC4(v20);
  }
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  sub_216801EAC((void **)(a1 + 296));
  uint64_t v21 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v21;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v23 = *(void *)(a2 + 376);
  uint64_t v22 = *(void *)(a2 + 384);
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v24 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v23;
  *(void *)(a1 + 384) = v22;
  if (v24) {
    sub_216784EC4(v24);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v26 = *(void *)(a2 + 424);
  uint64_t v25 = *(void *)(a2 + 432);
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v26;
  *(void *)(a1 + 432) = v25;
  if (v27) {
    sub_216784EC4(v27);
  }
  long long v28 = *(_OWORD *)(a2 + 440);
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0;
  std::string v29 = *(std::__shared_weak_count **)(a1 + 448);
  *(_OWORD *)(a1 + 440) = v28;
  if (v29) {
    sub_216784EC4(v29);
  }
  return a1;
}

void sub_21714B824(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77A8E0;
  sub_2168064DC((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_21714B878(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77A8E0;
  sub_2168064DC((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  operator delete(v2);
}

uint64_t sub_21714B8D0(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A1A0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_216779094((void *)(a1 + 120), "");
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_216779094((void *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_216779094((void *)(a1 + 248), "");
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 288);
  *(unsigned char *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(unsigned char *)(a1 + 336) = 1;
  return a1;
}

void sub_21714BA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v16);
  a10 = v10 + 37;
  sub_216802314((void ***)&a10);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v14);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13);
  uint64_t v18 = (std::__shared_weak_count *)v10[23];
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)v10[21];
  if (v19) {
    sub_216784EC4(v19);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v12);
  uint64_t v20 = *v15;
  if (*v15)
  {
    v10[12] = v20;
    operator delete(v20);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v11);
  _Unwind_Resume(a1);
}

void sub_21714BAB4()
{
}

void *sub_21714BABC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77A918;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21714BB14(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714BB30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21714BB58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21714BB88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77A968)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_21714BBCC(void *a1)
{
  *a1 = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_21714BC18(void *__p)
{
  void *__p = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

void sub_21714BC74(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_216778F24(v5, *(void **)(v4 + 72), *(void *)(v4 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 72);
    *(void *)(a2 + 24) = *(void *)(v4 + 88);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(v4 + 104);
  *(void *)(a2 + 32) = *(void *)(v4 + 96);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21714BD24(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714BD3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::AbcGeom::v12::OXformSchema::getArbGeomParams((Alembic::AbcGeom::v12::OXformSchema *)(v2 + 56), a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21714BD98(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714BDB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::AbcGeom::v12::OXformSchema::getUserProperties((Alembic::AbcGeom::v12::OXformSchema *)(v2 + 56), a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21714BE0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714BE28(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21714BE50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21714BE80(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77AA30)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_21714BEC4(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  unint64_t v10 = operator new(0x10uLL);
  v11[1] = v10 + 2;
  float v11[2] = v10 + 2;
  *unint64_t v10 = v8;
  v10[1] = v9;
  v11[0] = v10;
  sub_2171471F0(a1, a2, (uint64_t)v11, a5);

  operator delete(v10);
}

void sub_21714BF50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21714BF64(void *result, void *a2)
{
  long long v3 = result;
  uint64_t v5 = (void *)result[10];
  uint64_t v4 = (void *)result[11];
  if (v5 != v4)
  {
    unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while ((*v5 & 0xFFFFFFFFFFFFFFF8) != v6)
    {
      if (++v5 == v4)
      {
        uint64_t v5 = (void *)result[11];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    uint64_t result = sub_216A8E2D8(v5 + 1, v4, v5);
    for (uint64_t i = v3[11]; i != v7; i -= 8)
    {
      uint64_t v10 = *(void *)(i - 8);
      uint64_t v9 = v10;
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    void v3[11] = v7;
  }
  return result;
}

uint64_t sub_21714BFFC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5) {
    uint64_t v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v5 + 728);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_217145838(a1, v6, (uint64_t)v7 + 88);
  if (!sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v59)) {
    goto LABEL_11;
  }
  if ((v60 & 4) != 0) {
    uint64_t v8 = (char *)(*(uint64_t (**)(char *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v59);
  }
  else {
    uint64_t v8 = v59;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v9 + 66) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_11:
    v53[0] = 0;
    v53[1] = 0;
    uint64_t v52 = (uint64_t *)v53;
    uint64_t v10 = (void *)a2[6];
    long long v11 = (double *)*v10;
    long long v46 = a2;
    char v47 = (double *)(v10 + 1);
    if ((void *)*v10 != v10 + 1)
    {
      do
      {
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0(a3, v11[4]);
        if ((sub_216907880((pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 5)) & 1) != 0
          || (int v54 = "usdAbc/alembicWriter.cpp",
              uint64_t v55 = "_ReverseWindingOrder",
              uint64_t v56 = 1175,
              uint64_t v57 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReverseWindingOrder(UsdSamples *, con"
                    "st UsdSamples &) [T = int]",
              char v58 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v54, "valuesValue.IsHolding<ValueArray>()", 0) & 1) != 0))
        {
          if ((sub_216907880(v12) & 1) != 0
            || (int v54 = "usdAbc/alembicWriter.cpp",
                uint64_t v55 = "_ReverseWindingOrder",
                uint64_t v56 = 1178,
                uint64_t v57 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReverseWindingOrder(UsdSamples *, c"
                      "onst UsdSamples &) [T = int]",
                char v58 = 0,
                (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v54, "countsValue.IsHolding<CountArray>()", 0) & 1) != 0))
          {
            uint64_t v15 = *((void *)v11 + 6);
            if ((v15 & 4) != 0) {
              uint64_t v16 = (*(uint64_t (**)(void *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))((void *)v11 + 5);
            }
            else {
              uint64_t v16 = *((void *)v11 + 5);
            }
            long long v17 = *(_OWORD *)(v16 + 16);
            __n128 v49 = *(__n128 *)v16;
            long long v50 = v17;
            uint64_t v18 = *(void *)(v16 + 32);
            uint64_t v51 = v18;
            if (v18)
            {
              uint64_t v19 = (atomic_ullong *)(v18 - 16);
              if (*((void *)&v50 + 1)) {
                uint64_t v19 = (atomic_ullong *)*((void *)&v50 + 1);
              }
              atomic_fetch_add_explicit(v19, 1uLL, memory_order_relaxed);
            }
            uint64_t v20 = *((void *)v12 + 1);
            if ((v20 & 4) != 0) {
              uint64_t v21 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v12);
            }
            else {
              uint64_t v21 = *(uint64_t **)v12;
            }
            uint64_t v22 = *v21;
            if (*v21)
            {
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              unint64_t v25 = v49.n128_u64[0];
              while (1)
              {
                uint64_t v26 = *(int *)(v21[4] + 4 * v23);
                if (v24 + v26 > v25)
                {
                  int v54 = "usdAbc/alembicUtil.h";
                  uint64_t v55 = "UsdAbc_ReverseOrderImpl";
                  uint64_t v56 = 1048;
                  uint64_t v57 = "BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_ReverseOrderImpl(VtArray<T> &,"
                        " const VtArray<int> &) [T = int]";
                  char v58 = 0;
                  if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v54, "j + count <= n", 0))break; {
                }
                  }
                sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v49, v13, v14);
                uint64_t v27 = v51;
                sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v49, v28, v29);
                unint64_t v30 = v27 + 4 * v24;
                uint64_t v31 = v51 + 4 * v24 + 4 * v26;
                uint64_t v32 = (_DWORD *)(v31 - 4);
                if (v30 != v31 && (unint64_t)v32 > v30)
                {
                  unint64_t v34 = v30 + 4;
                  do
                  {
                    int v35 = *(_DWORD *)(v34 - 4);
                    *(_DWORD *)(v34 - 4) = *v32;
                    *v32-- = v35;
                    BOOL v36 = v34 >= (unint64_t)v32;
                    v34 += 4;
                  }
                  while (!v36);
                }
                ++v23;
                v24 += v26;
                if (v23 == v22) {
                  goto LABEL_37;
                }
              }
            }
            else
            {
LABEL_37:
              int v54 = (char *)(v11 + 4);
              long long v37 = sub_216A9E780(&v52, v11 + 4, (uint64_t)&unk_2174BFD90, (uint64_t **)&v54);
              sub_216907D0C((pxrInternal__aapl__pxrReserved__::VtValue *)(v37 + 5), &v49);
            }
            sub_2168F83DC((uint64_t)&v49);
          }
        }
        uint64_t v38 = (double *)*((void *)v11 + 1);
        if (v38)
        {
          do
          {
            std::string v39 = v38;
            uint64_t v38 = *(double **)v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            std::string v39 = (double *)*((void *)v11 + 2);
            BOOL v40 = *(void *)v39 == (void)v11;
            long long v11 = v39;
          }
          while (!v40);
        }
        long long v11 = v39;
      }
      while (v39 != v47);
    }
    int v42 = (uint64_t **)(v46 + 4);
    int v41 = (uint64_t *)v46[4];
    if (!v41)
    {
      uint64_t v43 = (std::__shared_weak_count *)v46[3];
      v46[2] = 0;
      v46[3] = 0;
      if (v43) {
        sub_216784EC4(v43);
      }
      char v44 = operator new(0x18uLL);
      v44[2] = 0;
      v44[1] = 0;
      void *v44 = v44 + 1;
      sub_217147B88(v42, (uint64_t)v44);
      int v41 = *v42;
    }
    sub_2168A6B2C(v41, (uint64_t)&v52);
    v46[6] = v46[4];
    sub_217147BD0((uint64_t)v46);
    sub_216997EC4((uint64_t)&v52, v53[0]);
  }
  return sub_2168EE084((uint64_t)v59);
}

void sub_21714C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
  sub_216997EC4((uint64_t)&a18, a19);
  sub_2168EE084(v19 - 112);
  _Unwind_Resume(a1);
}

char *sub_21714C4B4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(unsigned char *)(a1 + 12) = 0;
  sub_21677CC7C((char *)(a1 + 16), 0, 0, 0);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(unsigned char *)(a1 + 52) = 0;
  sub_21677CC7C((char *)(a1 + 56), 0, 0, 0);
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 127;
  *(unsigned char *)(a1 + 92) = 0;
  sub_21677CC7C((char *)(a1 + 96), 0, 0, 0);
  *(void *)(a1 + 120) = 0xC0000000C0000000;
  *(_DWORD *)(a1 + 128) = -1073741824;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 127;
  *(unsigned char *)(a1 + 148) = 0;
  sub_21677CC7C((char *)(a1 + 152), 0, 0, 0);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 127;
  *(unsigned char *)(a1 + 188) = 0;
  sub_21677CC7C((char *)(a1 + 192), 0, 0, 0);
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 127;
  *(unsigned char *)(a1 + 228) = 0;
  sub_21677CC7C((char *)(a1 + 232), 0, 0, 0);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 127;
  *(unsigned char *)(a1 + 268) = 0;
  sub_21677CC7C((char *)(a1 + 272), 0, 0, 0);
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 127;
  *(unsigned char *)(a1 + 308) = 0;
  sub_21677CC7C((char *)(a1 + 312), 0, 0, 0);
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 127;
  *(unsigned char *)(a1 + 348) = 0;
  sub_21677CC7C((char *)(a1 + 352), 0, 0, 0);
  MEMORY[0x21D4477E0](a1 + 376, "catmull-clark");
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 127;
  *(unsigned char *)(a1 + 460) = 0;
  sub_21677CC7C((char *)(a1 + 464), 0, 0, 0);
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 416) = xmmword_217409FA0;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);

  return sub_21714EEF4(a1 + 488);
}

uint64_t sub_21714C66C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 128) = a2;
  return result;
}

uint64_t sub_21714C674(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  return result;
}

void sub_21714C67C(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *, void **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  char v14 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a2, a7);
  LODWORD(v19[0]) = 6;
  BYTE4(v19[0]) = 1;
  sub_21714849C(v14, v16, a1, (uint64_t)Converter, (int *)v19, 0, a6);
  if (sub_217148A90(a6, a2, (uint64_t)v14))
  {
    long long v17 = (void *)(a3 + (a5 >> 1));
    if (a5) {
      a4 = *(void (**)(void *, void **))(*v17 + a4);
    }
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8));
    sub_21714F08C(v19, v18, *(void *)a6);
    a4(v17, v19);
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_21714C7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    sub_216784EC4(v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 16);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21714C7EC(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 5);
  *((void *)result + 5) = *(void *)a2;
  *(void *)(result + 45) = v2;
  if (result + 40 != (char *)a2) {
    return sub_21677CC7C(result + 56, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return result;
}

char *sub_21714C824(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 5);
  *((void *)result + 10) = *(void *)a2;
  *(void *)(result + 85) = v2;
  if (result + 80 != (char *)a2) {
    return sub_21677CC7C(result + 96, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return result;
}

void sub_21714C85C(void *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1[1];
  if ((v6 & 4) != 0) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  if (!*v4) {
    goto LABEL_16;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    sub_216779094(__p, "catmull-clark");
    sub_21712A41C(a4, (long long *)__p);
  }
  else
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v8) {
      uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 69) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216779094(__p, "loop");
      sub_21712A41C(a4, (long long *)__p);
    }
    else
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v9) {
        uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      if (v10 == (*((void *)v9 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216779094(__p, "bilinear");
        sub_21712A41C(a4, (long long *)__p);
      }
      else
      {
        if (v10)
        {
          long long v11 = (const char *)(v10 + 16);
          if (*(char *)(v10 + 39) < 0) {
            long long v11 = *(const char **)v11;
          }
        }
        else
        {
          long long v11 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported subdivisionScheme '%s'", a2, a3, v11);
        pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((long long *)__p, a4);
      }
    }
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21714CA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714CA28(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1, uint64_t a2, _DWORD *a3, uint64_t a4, void (*a5)(void *, void), uint64_t a6, double a7)
{
  char v13 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a3 + 16);
  char v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a3, a7);
  int v21 = 6;
  char v22 = 1;
  sub_21714849C(v13, v14, a1, a2, &v21, 1, (uint64_t)&v17);
  if (sub_217148A90((uint64_t)&v17, a3, (uint64_t)v13))
  {
    uint64_t v15 = (void *)(a4 + (a6 >> 1));
    if (a6) {
      a5 = *(void (**)(void *, void))(*v15 + a5);
    }
    uint64_t v16 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    a5(v15, *v16);
  }
  if (v20) {
    sub_216784EC4(v20);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
}

void sub_21714CB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21714CB48(void *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1[1];
  if ((v6 & 4) != 0) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  if (!*v4) {
    goto LABEL_16;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 32) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    *a4 = 1;
    uint64_t v12 = operator new(0x10uLL);
    *(void *)uint64_t v12 = &unk_26C7766B0;
    v12[2] = 1;
LABEL_17:
    sub_217122B64(a4 + 1, (uint64_t)v12);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    uint64_t v12 = operator new(0x10uLL);
    *(void *)uint64_t v12 = &unk_26C7766B0;
    v12[2] = 0;
    goto LABEL_17;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == (*((void *)v9 + 33) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    uint64_t v12 = operator new(0x10uLL);
    *(void *)uint64_t v12 = &unk_26C7766B0;
    v12[2] = 2;
    goto LABEL_17;
  }
  if (v10)
  {
    long long v11 = (const char *)(v10 + 16);
    if (*(char *)(v10 + 39) < 0) {
      long long v11 = *(const char **)v11;
    }
  }
  else
  {
    long long v11 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported interpolateBoundary '%s'", a2, a3, v11);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v14 < 0) {
    operator delete((void *)__p);
  }
}

void sub_21714CD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714CD60(void *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1[1];
  if ((v6 & 4) != 0) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  if (!*v4) {
    goto LABEL_25;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 21) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_25;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 20) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_25;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 22) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_25:
    *a4 = 1;
    uint64_t v15 = operator new(0x10uLL);
    *(void *)uint64_t v15 = &unk_26C7766B0;
    v15[2] = 1;
LABEL_26:
    sub_217122B64(a4 + 1, (uint64_t)v15);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10) {
    unint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    uint64_t v15 = operator new(0x10uLL);
    *(void *)uint64_t v15 = &unk_26C7766B0;
    v15[2] = 0;
    goto LABEL_26;
  }
  long long v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11) {
    long long v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
    int v16 = 2;
LABEL_31:
    LODWORD(__p[0]) = v16;
    sub_21714F124(a4, __p);
    return;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v12) {
    uint64_t v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v13 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v13 == (*((void *)v12 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    int v16 = 3;
    goto LABEL_31;
  }
  if (v13)
  {
    char v14 = (const char *)(v13 + 16);
    if (*(char *)(v13 + 39) < 0) {
      char v14 = *(const char **)v14;
    }
  }
  else
  {
    char v14 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported faceVaryingLinearInterpolation '%s'", a2, a3, v14);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((long long *)__p, a4);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21714CFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21714CFEC(char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(result + 261) = *(uint64_t *)((char *)a2 + 5);
  *((void *)result + 32) = v2;
  if (result + 256 != (char *)a2) {
    return sub_21677CC7C(result + 272, (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  }
  return result;
}

void sub_21714D024(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *, void **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  char v14 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  int v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a2, a7);
  LODWORD(v19[0]) = 10;
  BYTE4(v19[0]) = 1;
  sub_21714849C(v14, v16, a1, (uint64_t)Converter, (int *)v19, 0, a6);
  if (sub_217148A90(a6, a2, (uint64_t)v14))
  {
    uint64_t v17 = (void *)(a3 + (a5 >> 1));
    if (a5) {
      a4 = *(void (**)(void *, void **))(*v17 + a4);
    }
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8));
    sub_21714F190(v19, v18, *(void *)a6);
    a4(v17, v19);
    if (__p)
    {
      int v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_21714D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    sub_216784EC4(v15);
  }
  int v16 = *(std::__shared_weak_count **)(v13 + 16);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21714D194(char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(result + 301) = *(uint64_t *)((char *)a2 + 5);
  *((void *)result + 37) = v2;
  if (result + 296 != (char *)a2) {
    return sub_21677CC7C(result + 312, (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  }
  return result;
}

char *sub_21714D1CC(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 5);
  *((void *)result + 17) = *(void *)a2;
  *(void *)(result + 141) = v2;
  if (result + 136 != (char *)a2) {
    return sub_21677CC7C(result + 152, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return result;
}

char *sub_21714D204(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 5);
  *((void *)result + 22) = *(void *)a2;
  *(void *)(result + 181) = v2;
  if (result + 176 != (char *)a2) {
    return sub_21677CC7C(result + 192, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return result;
}

char *sub_21714D23C(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 5);
  *((void *)result + 27) = *(void *)a2;
  *(void *)(result + 221) = v2;
  if (result + 216 != (char *)a2) {
    return sub_21677CC7C(result + 232, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return result;
}

char *sub_21714D274(char *result, char *a2)
{
  long long v3 = result;
  uint64_t v4 = *(void *)a2;
  *(void *)(result + 493) = *(void *)(a2 + 5);
  *((void *)result + 61) = v4;
  if (result + 488 == a2)
  {
    uint64_t v6 = *((void *)a2 + 5);
    *(void *)(result + 533) = *(void *)(a2 + 45);
    *((void *)result + 66) = v6;
  }
  else
  {
    sub_21677CC7C(result + 504, *((char **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3);
    uint64_t v5 = *((void *)a2 + 5);
    *(void *)(v3 + 533) = *(void *)(a2 + 45);
    *((void *)v3 + 66) = v5;
    uint64_t result = sub_21677CC7C(v3 + 544, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 142) = *((_DWORD *)a2 + 20);
  return result;
}

uint64_t sub_21714D310(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v12 = (_DWORD *)(a1 + 8);
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77AA58;
  sub_21714E014(a1 + 56);
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  uint64_t v39 = 0;
  __p[0] = &__p[1];
  int v50 = v13;
  sub_2167898D0((uint64_t *)v51, (const void ***)__p);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  uint64_t v55 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a4, (uint64_t)&v50);
  sub_2167A030C(a5, (uint64_t)&v50);
  sub_2167A030C(a6, (uint64_t)&v50);
  *uint64_t v12 = v50;
  uint64_t v48 = v12;
  __n128 v49 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  char v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    sub_216778A5C((uint64_t)__p);
    sub_216779180(&v39, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_216778E70(&__str, &v46);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v28 = sub_216779038(exception, (uint64_t)&__str);
    __cxa_throw(v28, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v46, v51);
  if (HIDWORD(v55) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_SubD_v1");
    BOOL v40 = __p;
    uint64_t v17 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaObjTitle");
    sub_21714DA9C(&__str);
    BOOL v40 = __p;
    uint64_t v18 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaBaseType");
    sub_216779094(&__str, "AbcGeom_GeomBase_v1");
    BOOL v40 = __p;
    uint64_t v19 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  sub_2167A94C0(&__str, a3, (const void ***)&v46);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v21 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v20;
  if (v21)
  {
    sub_216784EC4(v21);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v22 = v52;
  uint64_t v23 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v24 = (*(uint64_t (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v24 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  BOOL v40 = (void **)v41;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v36);
  sub_216779094(v34, ".geom");
  int v25 = *v12;
  v33[0] = 1;
  _OWORD v33[2] = v25;
  v32[0] = 2;
  void v32[2] = v24;
  int v30 = 3;
  uint64_t v31 = (long long **)&v40;
  v29[0] = 6;
  v29[2] = v16;
  Alembic::AbcGeom::v12::OSubDSchema::OSubDSchema(__p, &v36, v34, v33, v32, &v30, v29);
  sub_21714DB7C(a1 + 56, (uint64_t)__p);
  sub_2167F5E94((uint64_t)__p);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37) {
    sub_216784EC4(v37);
  }
  sub_2167877AC((uint64_t)&v40, v41[0]);
  if (v23) {
    sub_216784EC4(v23);
  }
  sub_2167877AC((uint64_t)v45, v45[1]);
  if (v44 < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v46, *((void **)&v46 + 1));
  if (v14) {
    sub_216784EC4(v14);
  }
  if (v53) {
    sub_216784EC4(v53);
  }
  sub_2167877AC((uint64_t)v51, v51[1]);
  return a1;
}

void sub_21714D880(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(__p, a16);
  sub_216779148((std::exception *)&STACK[0x518]);
  sub_216778D38((uint64_t)__p);
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v22 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v23 = (uint64_t)v22;
    sub_2167F548C(v17);
    sub_2167A9424(v16);
    sub_21679FA64(v19 - 168, v23);
  }
  else
  {
    sub_2167F548C(v17);
    sub_2167A9424(v16);
    sub_21679F9F4(v19 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21714D7C8);
}

void sub_21714DA30()
{
}

void sub_21714DA3C()
{
}

void sub_21714DA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

void sub_21714DA70()
{
}

void sub_21714DA78(_Unwind_Exception *a1)
{
  sub_2167A03C4(v3 - 152);
  sub_2167F5E94(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_21714DA9C(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_SubD_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_21714DB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21714DB7C(uint64_t a1, uint64_t a2)
{
  sub_2167E7F50(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v8 = *(void *)(a2 + 328);
  uint64_t v7 = *(void *)(a2 + 336);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v8;
  *(void *)(a1 + 336) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v11 = *(void *)(a2 + 376);
  uint64_t v10 = *(void *)(a2 + 384);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v11;
  *(void *)(a1 + 384) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v14 = *(void *)(a2 + 424);
  uint64_t v13 = *(void *)(a2 + 432);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v14;
  *(void *)(a1 + 432) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  uint64_t v17 = *(void *)(a2 + 472);
  uint64_t v16 = *(void *)(a2 + 480);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 480);
  *(void *)(a1 + 472) = v17;
  *(void *)(a1 + 480) = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  uint64_t v19 = *(void *)(a2 + 520);
  uint64_t v20 = *(void *)(a2 + 528);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 520) = v19;
  int v21 = *(std::__shared_weak_count **)(a1 + 528);
  *(void *)(a1 + 528) = v20;
  if (v21) {
    sub_216784EC4(v21);
  }
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  uint64_t v22 = *(void *)(a2 + 568);
  uint64_t v23 = *(void *)(a2 + 576);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 568) = v22;
  int v24 = *(std::__shared_weak_count **)(a1 + 576);
  *(void *)(a1 + 576) = v23;
  if (v24) {
    sub_216784EC4(v24);
  }
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  uint64_t v25 = *(void *)(a2 + 616);
  uint64_t v26 = *(void *)(a2 + 624);
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 616) = v25;
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 624);
  *(void *)(a1 + 624) = v26;
  if (v27) {
    sub_216784EC4(v27);
  }
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 640));
  uint64_t v28 = *(void *)(a2 + 664);
  uint64_t v29 = *(void *)(a2 + 672);
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 664) = v28;
  int v30 = *(std::__shared_weak_count **)(a1 + 672);
  *(void *)(a1 + 672) = v29;
  if (v30) {
    sub_216784EC4(v30);
  }
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  std::string::operator=((std::string *)(a1 + 688), (const std::string *)(a2 + 688));
  uint64_t v31 = *(void *)(a2 + 712);
  uint64_t v32 = *(void *)(a2 + 720);
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 712) = v31;
  long long v33 = *(std::__shared_weak_count **)(a1 + 720);
  *(void *)(a1 + 720) = v32;
  if (v33) {
    sub_216784EC4(v33);
  }
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 736));
  uint64_t v34 = *(void *)(a2 + 760);
  uint64_t v35 = *(void *)(a2 + 768);
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 760) = v34;
  uint64_t v36 = *(std::__shared_weak_count **)(a1 + 768);
  *(void *)(a1 + 768) = v35;
  if (v36) {
    sub_216784EC4(v36);
  }
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  uint64_t v37 = *(void *)(a2 + 808);
  uint64_t v38 = *(void *)(a2 + 816);
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 808) = v37;
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 816);
  *(void *)(a1 + 816) = v38;
  if (v39) {
    sub_216784EC4(v39);
  }
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 832));
  uint64_t v40 = *(void *)(a2 + 856);
  uint64_t v41 = *(void *)(a2 + 864);
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 856) = v40;
  int v42 = *(std::__shared_weak_count **)(a1 + 864);
  *(void *)(a1 + 864) = v41;
  if (v42) {
    sub_216784EC4(v42);
  }
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a2 + 880));
  uint64_t v43 = *(void *)(a2 + 904);
  uint64_t v44 = *(void *)(a2 + 912);
  if (v44) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 904) = v43;
  long long v45 = *(std::__shared_weak_count **)(a1 + 912);
  *(void *)(a1 + 912) = v44;
  if (v45) {
    sub_216784EC4(v45);
  }
  sub_2167C5310(a1 + 920, (long long *)(a2 + 920));
  long long v46 = (void **)(a1 + 1096);
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*v46);
  }
  long long v47 = *(_OWORD *)(a2 + 1096);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(_OWORD *)long long v46 = v47;
  *(unsigned char *)(a2 + 1119) = 0;
  *(unsigned char *)(a2 + 1096) = 0;
  sub_21714E42C(a1 + 1120, (void *)(a2 + 1120));
  long long v48 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1144) = v48;
  return a1;
}

void sub_21714DF68(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77AA58;
  sub_2167F5E94((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_21714DFBC(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77AA58;
  sub_2167F5E94((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  operator delete(v2);
}

uint64_t sub_21714E014(uint64_t a1)
{
  uint64_t v2 = sub_21714E308(a1);
  *(void *)uint64_t v2 = &unk_26C74A0C8;
  *(_DWORD *)(v2 + 248) = 2;
  sub_216779094((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_216779094((void *)(a1 + 448), "");
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_216779094((void *)(a1 + 496), "");
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_216779094((void *)(a1 + 544), "");
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_216779094((void *)(a1 + 592), "");
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_216779094((void *)(a1 + 640), "");
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_216779094((void *)(a1 + 688), "");
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_216779094((void *)(a1 + 736), "");
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_216779094((void *)(a1 + 784), "");
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_216779094((void *)(a1 + 832), "");
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_216779094((void *)(a1 + 880), "");
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  sub_2167DB444(a1 + 920);
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(void *)(a1 + 1120) = a1 + 1128;
  *(unsigned char *)(a1 + 1144) = 0;
  *(void *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1160) = 0;
  return a1;
}

void sub_21714E210(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 103));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 97));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 91));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 85));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 79));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 73));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 67));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 61));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 55));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 49));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_2167EE864(v1);
  _Unwind_Resume(a1);
}

void sub_21714E2B8()
{
}

void sub_21714E2C0()
{
}

void sub_21714E2C8()
{
}

void sub_21714E2D0()
{
}

void sub_21714E2D8()
{
}

void sub_21714E2E0()
{
}

void sub_21714E2E8()
{
}

void sub_21714E2F0()
{
}

void sub_21714E2F8()
{
}

void sub_21714E300()
{
}

uint64_t sub_21714E308(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C74A150;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_21714E3E8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_21714E42C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_2167E8494(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void *sub_21714E498(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77AA90;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21714E4F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714E50C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21714E534(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21714E564(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77AAE0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_21714E5A8(void *a1)
{
  *a1 = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_21714E5F4(void *__p)
{
  void *__p = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

void sub_21714E650(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_216778F24(v5, *(void **)(v4 + 72), *(void *)(v4 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 72);
    *(void *)(a2 + 24) = *(void *)(v4 + 88);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(v4 + 104);
  *(void *)(a2 + 32) = *(void *)(v4 + 96);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21714E700(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714E718(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21714E800(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21714E774(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714E78C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21714EA20(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21714E7E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_21714E800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getArbGeomParams()";
  int v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 168)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 183))
  {
LABEL_5:
    if (*(void *)(a1 + 184)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 152) = v17;
  std::string::operator=((std::string *)(a1 + 160), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 160);
    *(void *)(a2 + 24) = *(void *)(a1 + 176);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a2 + 32) = *(void *)(a1 + 184);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21714E960(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x21714E94CLL);
}

void sub_21714EA00(_Unwind_Exception *a1)
{
}

unsigned char *sub_21714EA20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getUserProperties()";
  int v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 216)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 231))
  {
LABEL_5:
    if (*(void *)(a1 + 232)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".userProperties");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 200) = v17;
  std::string::operator=((std::string *)(a1 + 208), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v7;
  *(void *)(a1 + 240) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 208), *(void *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 208);
    *(void *)(a2 + 24) = *(void *)(a1 + 224);
  }
  uint64_t v10 = *(void *)(a1 + 240);
  *(void *)(a2 + 32) = *(void *)(a1 + 232);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21714EB80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x21714EB6CLL);
}

void sub_21714EC20(_Unwind_Exception *a1)
{
}

void sub_21714EC44(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21714EC6C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21714EC9C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77ABA8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_21714ECE0(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 48) = 0x100000006;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0x100000006;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0x100000006;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0x100000006;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0x10000000ALL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0x100000006;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0x10000000ALL;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 344) = 0x100000006;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 416) = xmmword_217409FA0;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0x30000000ALL;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = 0x20000000ALL;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 536) = 0x100000005;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = 127;
  sub_21714C4B4(a1);
  return a1;
}

void sub_21714EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v20 = v18;
  sub_2167C5204(v20);
  uint64_t v22 = *(void **)(v10 + 464);
  if (v22)
  {
    *(void *)(v10 + 472) = v22;
    operator delete(v22);
  }
  if (*(char *)(v10 + 399) < 0) {
    operator delete(*(void **)(v10 + 376));
  }
  uint64_t v23 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 360) = v23;
    operator delete(v23);
  }
  int v24 = *v19;
  if (*v19)
  {
    *(void *)(v10 + 320) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 280) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *v17;
  if (*v17)
  {
    *(void *)(v10 + 240) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v16;
  if (*v16)
  {
    *(void *)(v10 + 200) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *v15;
  if (*v15)
  {
    *(void *)(v10 + 160) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 104) = v29;
    operator delete(v29);
  }
  int v30 = *v13;
  if (*v13)
  {
    *(void *)(v10 + 64) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 24) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

char *sub_21714EEF4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(unsigned char *)(a1 + 12) = 0;
  sub_21677CC7C((char *)(a1 + 16), 0, 0, 0);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(unsigned char *)(a1 + 52) = 0;
  uint64_t result = sub_21677CC7C((char *)(a1 + 56), 0, 0, 0);
  *(_DWORD *)(a1 + 80) = 127;
  return result;
}

void *sub_21714EF5C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21714EFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21714EFF4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21714F070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21714F08C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000006;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21714F108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21714F124(void *a1, _DWORD *a2)
{
  *a1 = 1;
  int v4 = operator new(0x10uLL);
  *(void *)int v4 = &unk_26C7766B0;
  v4[2] = *a2;
  sub_217122B64(a1 + 1, (uint64_t)v4);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void *sub_21714F190(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x10000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21714F20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714F228(uint64_t a1)
{
  unint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)a1 >> 1;
  int v4 = operator new(0x18uLL);
  LODWORD(v54) = 0;
  unint64_t v52 = v3;
  sub_21700D064(v4, v3, &v54);
  sub_21714F690(&v62, (uint64_t)v4);
  uint64_t v51 = v62;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  std::string v59 = &v60;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  int v50 = (uint64_t *)a1;
  if (v2 >= 2)
  {
    uint64_t v8 = v5;
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    uint64_t v53 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v12 = v60;
      uint64_t v13 = &v60;
      char v14 = &v60;
      if (v60)
      {
        uint64_t v13 = &v60;
LABEL_6:
        while (2)
        {
          uint64_t v15 = 0;
          char v14 = (uint64_t **)v12;
          uint64_t v16 = v12[4];
          while (1)
          {
            float v17 = *(float *)(v8 + v15);
            float v18 = *(float *)(v16 + v15);
            if (v17 < v18) {
              break;
            }
            BOOL v19 = v18 < v17 || v15 == 4;
            v15 += 4;
            if (v19)
            {
              uint64_t v20 = 0;
              do
              {
                float v21 = *(float *)(v16 + v20);
                float v22 = *(float *)(v8 + v20);
                if (v21 < v22)
                {
                  uint64_t v13 = v14 + 1;
                  uint64_t v12 = v14[1];
                  if (v12) {
                    goto LABEL_6;
                  }
                  goto LABEL_27;
                }
                BOOL v23 = v22 < v21 || v20 == 4;
                v20 += 4;
              }
              while (!v23);
              if (!v14) {
                goto LABEL_27;
              }
              int v24 = v14;
              goto LABEL_47;
            }
          }
          uint64_t v12 = *v14;
          uint64_t v13 = v14;
          if (*v14) {
            continue;
          }
          break;
        }
      }
LABEL_27:
      int v24 = operator new(0x30uLL);
      v24[4] = v8;
      *((_DWORD *)v24 + 10) = v11;
      *int v24 = 0;
      v24[1] = 0;
      v24[2] = v14;
      *uint64_t v13 = v24;
      uint64_t v25 = v24;
      if (*v59)
      {
        std::string v59 = (uint64_t **)*v59;
        uint64_t v25 = *v13;
      }
      sub_21677B3B0(v60, v25);
      ++v61;
      if (v9 >= v53)
      {
        uint64_t v26 = (v9 - v6) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_21677CB10();
        }
        if ((v53 - v6) >> 2 > v27) {
          unint64_t v27 = (v53 - v6) >> 2;
        }
        if ((unint64_t)(v53 - v6) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          if (v28 >> 61) {
            sub_21677CA1C();
          }
          uint64_t v29 = (char *)operator new(8 * v28);
        }
        else
        {
          uint64_t v29 = 0;
        }
        int v30 = &v29[8 * v26];
        *(void *)int v30 = v24[4];
        uint64_t v7 = v30 + 8;
        if (v9 != v6)
        {
          do
          {
            uint64_t v31 = *((void *)v9 - 1);
            v9 -= 8;
            *((void *)v30 - 1) = v31;
            v30 -= 8;
          }
          while (v9 != v6);
          uint64_t v9 = v6;
        }
        uint64_t v6 = v30;
        uint64_t v53 = &v29[8 * v28];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v24[4];
        uint64_t v7 = v9 + 8;
      }
      ++v11;
      uint64_t v9 = v7;
LABEL_47:
      *(_DWORD *)(*v51 + 4 * v10) = *((_DWORD *)v24 + 10);
      v8 += 8;
      ++v10;
    }
    while (v10 != v3);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v32 = v7 - v6;
  if (v7 - v6 + 4 * v52 < 8 * v52)
  {
    if (v32 < 0) {
      size_t v33 = -1;
    }
    else {
      size_t v33 = v7 - v6;
    }
    uint64_t v34 = operator new[](v33);
    uint64_t v35 = v34;
    if (v7 != v6)
    {
      uint64_t v36 = v32 >> 3;
      uint64_t v37 = v6;
      uint64_t v38 = v34;
      do
      {
        uint64_t v39 = *(void **)v37;
        v37 += 8;
        *v38++ = *v39;
        --v36;
      }
      while (v36);
    }
    uint64_t v54 = v32 >> 2;
    uint64_t v40 = operator new(0x10uLL);
    void *v40 = &unk_26C777508;
    v40[1] = v35;
    sub_217122B64(&v55, (uint64_t)v40);
    uint64_t v57 = 0;
    char v58 = 0;
    int v42 = v62;
    uint64_t v41 = v63;
    if (v63)
    {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v43 = v58;
      uint64_t v57 = v42;
      char v58 = v41;
      if (v43) {
        sub_216784EC4(v43);
      }
    }
    else
    {
      uint64_t v57 = v62;
      char v58 = 0;
    }
    uint64_t v44 = v55;
    *int v50 = v54;
    long long v45 = v56;
    if (v56) {
      atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v46 = (std::__shared_weak_count *)v50[2];
    v50[1] = v44;
    v50[2] = (uint64_t)v45;
    if (v46) {
      sub_216784EC4(v46);
    }
    uint64_t v48 = (uint64_t)v57;
    long long v47 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __n128 v49 = (std::__shared_weak_count *)v50[4];
    v50[3] = v48;
    v50[4] = (uint64_t)v47;
    if (v49) {
      sub_216784EC4(v49);
    }
    if (v58) {
      sub_216784EC4(v58);
    }
    if (v56) {
      sub_216784EC4(v56);
    }
  }
  if (v6) {
    operator delete(v6);
  }
  sub_216F510C4(v60);
  if (v63) {
    sub_216784EC4(v63);
  }
}

void sub_21714F62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (v22) {
    operator delete(v22);
  }
  sub_216F510C4(a19);
  if (a22) {
    sub_216784EC4(a22);
  }
  _Unwind_Resume(a1);
}

void *sub_21714F690(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &unk_26C77ABD0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21714F6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_216C51FD4((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21714F714(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21714F73C(uint64_t a1)
{
}

uint64_t sub_21714F744(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77AC20)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_21714F788(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000005;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21714F804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21714F820(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x20000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_21714F89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21714F8B8(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 544);
  if (v2)
  {
    *(void *)(a1 + 552) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(void *)(a1 + 512) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 464);
  if (v4)
  {
    *(void *)(a1 + 472) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  uint64_t v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 360) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 312);
  if (v6)
  {
    *(void *)(a1 + 320) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(void *)(a1 + 280) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 232);
  if (v8)
  {
    *(void *)(a1 + 240) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 192);
  if (v9)
  {
    *(void *)(a1 + 200) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(void *)(a1 + 160) = v10;
    operator delete(v10);
  }
  int v11 = *(void **)(a1 + 96);
  if (v11)
  {
    *(void *)(a1 + 104) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 56);
  if (v12)
  {
    *(void *)(a1 + 64) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

void *sub_21714F9AC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    uint64_t v4 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    uint64_t v4 = *a1;
  }
  uint64_t v5 = operator new[](0x10uLL);
  uint64_t v6 = *(void *)(v4 + 32);
  int v7 = *(_DWORD *)(v6 + 8);
  *(void *)uint64_t v5 = *(void *)v6;
  v5[2] = v7;
  v5[3] = 1065353216;
  *a2 = 4;
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = &unk_26C777508;
  v8[1] = v5;
  uint64_t result = sub_217122B64(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_21714FA54(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

char *sub_21714FA68(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(unsigned char *)(a1 + 12) = 0;
  sub_21677CC7C((char *)(a1 + 16), 0, 0, 0);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(unsigned char *)(a1 + 52) = 0;
  sub_21677CC7C((char *)(a1 + 56), 0, 0, 0);
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 127;
  *(unsigned char *)(a1 + 92) = 0;
  sub_21677CC7C((char *)(a1 + 96), 0, 0, 0);
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 136) = xmmword_217409FA0;
  *(int64x2_t *)(a1 + 152) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 127;
  *(unsigned char *)(a1 + 180) = 0;
  sub_21677CC7C((char *)(a1 + 184), 0, 0, 0);
  sub_21714EEF4(a1 + 208);

  return sub_21714EEF4(a1 + 296);
}

void sub_21714FB4C(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *, void **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  char v14 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a2, a7);
  LODWORD(v19[0]) = 6;
  BYTE4(v19[0]) = 1;
  sub_21714849C(v14, v16, a1, (uint64_t)Converter, (int *)v19, 0, a6);
  if (sub_217148A90(a6, a2, (uint64_t)v14))
  {
    float v17 = (void *)(a3 + (a5 >> 1));
    if (a5) {
      a4 = *(void (**)(void *, void **))(*v17 + a4);
    }
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8));
    sub_21714F08C(v19, v18, *(void *)a6);
    a4(v17, v19);
    if (__p)
    {
      float v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_21714FC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    sub_216784EC4(v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 16);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21714FCBC(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 5);
  *((void *)result + 5) = *(void *)a2;
  *(void *)(result + 45) = v2;
  if (result + 40 != (char *)a2) {
    return sub_21677CC7C(result + 56, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return result;
}

char *sub_21714FCF4(char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 5);
  *((void *)result + 10) = *(void *)a2;
  *(void *)(result + 85) = v2;
  if (result + 80 != (char *)a2) {
    return sub_21677CC7C(result + 96, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return result;
}

char *sub_21714FD2C(char *result, char *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  *(void *)(result + 301) = *(void *)(a2 + 5);
  *((void *)result + 37) = v4;
  if (result + 296 == a2)
  {
    uint64_t v6 = *((void *)a2 + 5);
    *(void *)(result + 341) = *(void *)(a2 + 45);
    *((void *)result + 42) = v6;
  }
  else
  {
    sub_21677CC7C(result + 312, *((char **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3);
    uint64_t v5 = *((void *)a2 + 5);
    *(void *)(v3 + 341) = *(void *)(a2 + 45);
    *((void *)v3 + 42) = v5;
    uint64_t result = sub_21677CC7C(v3 + 352, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 94) = *((_DWORD *)a2 + 20);
  return result;
}

char *sub_21714FDC8(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 5);
  *((void *)result + 26) = *(void *)a2;
  *(void *)(result + 213) = v4;
  if (result + 208 == (char *)a2)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(result + 253) = *(void *)(a2 + 45);
    *((void *)result + 31) = v6;
  }
  else
  {
    sub_21677CC7C(result + 224, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(v3 + 253) = *(void *)(a2 + 45);
    *((void *)v3 + 31) = v5;
    uint64_t result = sub_21677CC7C(v3 + 264, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 72) = *(_DWORD *)(a2 + 80);
  return result;
}

uint64_t sub_21714FE5C(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v12 = (_DWORD *)(a1 + 8);
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77AC48;
  sub_2171508F0(a1 + 56);
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  uint64_t v39 = 0;
  __p[0] = &__p[1];
  int v50 = v13;
  sub_2167898D0((uint64_t *)v51, (const void ***)__p);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  uint64_t v55 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a4, (uint64_t)&v50);
  sub_2167A030C(a5, (uint64_t)&v50);
  sub_2167A030C(a6, (uint64_t)&v50);
  *uint64_t v12 = v50;
  uint64_t v48 = v12;
  __n128 v49 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  char v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    sub_216778A5C((uint64_t)__p);
    sub_216779180(&v39, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_216778E70(&__str, &v46);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    unint64_t v28 = sub_216779038(exception, (uint64_t)&__str);
    __cxa_throw(v28, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v46, v51);
  if (HIDWORD(v55) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_PolyMesh_v1");
    uint64_t v40 = __p;
    float v17 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaObjTitle");
    sub_2171505E8(&__str);
    uint64_t v40 = __p;
    uint64_t v18 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaBaseType");
    sub_216779094(&__str, "AbcGeom_GeomBase_v1");
    uint64_t v40 = __p;
    BOOL v19 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  sub_2167A94C0(&__str, a3, (const void ***)&v46);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  float v21 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v20;
  if (v21)
  {
    sub_216784EC4(v21);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v22 = v52;
  BOOL v23 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v24 = (*(uint64_t (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v24 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  uint64_t v40 = (void **)v41;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v36);
  sub_216779094(v34, ".geom");
  int v25 = *v12;
  v33[0] = 1;
  _OWORD v33[2] = v25;
  v32[0] = 2;
  void v32[2] = v24;
  int v30 = 3;
  uint64_t v31 = (long long **)&v40;
  v29[0] = 6;
  v29[2] = v16;
  Alembic::AbcGeom::v12::OPolyMeshSchema::OPolyMeshSchema(__p, &v36, v34, v33, v32, &v30, v29);
  sub_2171506C8(a1 + 56, (uint64_t)__p);
  sub_2167E9B68((uint64_t)__p);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37) {
    sub_216784EC4(v37);
  }
  sub_2167877AC((uint64_t)&v40, v41[0]);
  if (v23) {
    sub_216784EC4(v23);
  }
  sub_2167877AC((uint64_t)v45, v45[1]);
  if (v44 < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v46, *((void **)&v46 + 1));
  if (v14) {
    sub_216784EC4(v14);
  }
  if (v53) {
    sub_216784EC4(v53);
  }
  sub_2167877AC((uint64_t)v51, v51[1]);
  return a1;
}

void sub_2171503CC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(__p, a16);
  sub_216779148((std::exception *)&STACK[0x3E8]);
  sub_216778D38((uint64_t)__p);
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v22 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v23 = (uint64_t)v22;
    sub_2167E7CD4(v17);
    sub_2167A9424(v16);
    sub_21679FA64(v19 - 168, v23);
  }
  else
  {
    sub_2167E7CD4(v17);
    sub_2167A9424(v16);
    sub_21679F9F4(v19 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217150314);
}

void sub_21715057C()
{
}

void sub_217150588()
{
}

void sub_2171505A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

void sub_2171505BC()
{
}

void sub_2171505C4(_Unwind_Exception *a1)
{
  sub_2167A03C4(v3 - 152);
  sub_2167E9B68(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_2171505E8(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_PolyMesh_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_217150694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171506C8(uint64_t a1, uint64_t a2)
{
  sub_2167E7F50(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v8 = *(void *)(a2 + 328);
  uint64_t v7 = *(void *)(a2 + 336);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v8;
  *(void *)(a1 + 336) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v11 = *(void *)(a2 + 376);
  uint64_t v10 = *(void *)(a2 + 384);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v11;
  *(void *)(a1 + 384) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v14 = *(void *)(a2 + 424);
  uint64_t v13 = *(void *)(a2 + 432);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v14;
  *(void *)(a1 + 432) = v13;
  if (v15) {
    sub_216784EC4(v15);
  }
  sub_21714E42C(a1 + 440, (void *)(a2 + 440));
  sub_2167C5310(a1 + 464, (long long *)(a2 + 464));
  sub_2167C5310(a1 + 640, (long long *)(a2 + 640));
  uint64_t v16 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 816);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 839) = 0;
  *(unsigned char *)(a2 + 816) = 0;
  long long v18 = *(_OWORD *)(a2 + 840);
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 840) = v18;
  return a1;
}

void sub_217150844(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77AC48;
  sub_2167E9B68((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_217150898(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77AC48;
  sub_2167E9B68((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  operator delete(v2);
}

uint64_t sub_2171508F0(uint64_t a1)
{
  uint64_t v2 = sub_217150A68(a1);
  *(void *)uint64_t v2 = &unk_26C749EA8;
  *(_DWORD *)(v2 + 248) = 2;
  sub_216779094((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  sub_2167DB444(a1 + 464);
  sub_2167DB374(a1 + 640);
  *(void *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  return a1;
}

void sub_2171509E4(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  sub_2167C5410(v5);
  sub_2167E8494((uint64_t)(v1 + 55), *v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 49));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_2167E4260(v1);
  _Unwind_Resume(a1);
}

void sub_217150A60()
{
}

uint64_t sub_217150A68(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749F30;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_217150B48(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_217150B8C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77AC80;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217150BE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217150C00(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217150C28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217150C58(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77ACD0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217150C9C(void *a1)
{
  *a1 = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_217150CE8(void *__p)
{
  void *__p = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

void sub_217150D44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_216778F24(v5, *(void **)(v4 + 72), *(void *)(v4 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 72);
    *(void *)(a2 + 24) = *(void *)(v4 + 88);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(v4 + 104);
  *(void *)(a2 + 32) = *(void *)(v4 + 96);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217150DF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217150E0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217150EF4(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217150E68(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217150E80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217151114(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217150EDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_217150EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getArbGeomParams()";
  int v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 168)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 183))
  {
LABEL_5:
    if (*(void *)(a1 + 184)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 152) = v17;
  std::string::operator=((std::string *)(a1 + 160), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 160);
    *(void *)(a2 + 24) = *(void *)(a1 + 176);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a2 + 32) = *(void *)(a1 + 184);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_217151054(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  int v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x217151040);
}

void sub_2171510F4(_Unwind_Exception *a1)
{
}

unsigned char *sub_217151114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getUserProperties()";
  int v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 216)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 231))
  {
LABEL_5:
    if (*(void *)(a1 + 232)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".userProperties");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 200) = v17;
  std::string::operator=((std::string *)(a1 + 208), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v7;
  *(void *)(a1 + 240) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 208), *(void *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 208);
    *(void *)(a2 + 24) = *(void *)(a1 + 224);
  }
  uint64_t v10 = *(void *)(a1 + 240);
  *(void *)(a2 + 32) = *(void *)(a1 + 232);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_217151274(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  int v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x217151260);
}

void sub_217151314(_Unwind_Exception *a1)
{
}

void sub_217151338(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217151360(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217151390(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77AD98)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2171513D4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0x100000006;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0x100000006;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 136) = xmmword_217409FA0;
  *(int64x2_t *)(a1 + 152) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0x30000000ALL;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0x20000000ALL;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0x100000005;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 127;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0x30000000ALL;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 344) = 0x100000005;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 127;
  sub_21714FA68(a1);
  return a1;
}

void sub_2171514BC(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  sub_2167C5204(v6);
  sub_2167C5204(v1 + 26);
  uint64_t v8 = (void *)v1[23];
  if (v8)
  {
    v1[24] = v8;
    operator delete(v8);
  }
  sub_2173252AC(v4, v3, v2, v1);
  _Unwind_Resume(a1);
}

void sub_217151504(uint64_t a1)
{
  unint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)a1 / 3uLL;
  int v4 = operator new(0x18uLL);
  LODWORD(v55) = 0;
  sub_21700D064(v4, v3, &v55);
  sub_21714F690(&v63, (uint64_t)v4);
  uint64_t v53 = v63;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = &v61;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v52 = (unint64_t *)a1;
  if (v2 >= 3)
  {
    uint64_t v8 = v5;
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    int v54 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v12 = v61;
      uint64_t v13 = &v61;
      char v14 = &v61;
      if (v61)
      {
        uint64_t v13 = &v61;
LABEL_6:
        while (2)
        {
          uint64_t v15 = 0;
          char v14 = (uint64_t **)v12;
          uint64_t v16 = v12[4];
          while (1)
          {
            float v17 = *(float *)(v8 + v15);
            float v18 = *(float *)(v16 + v15);
            if (v17 < v18) {
              break;
            }
            BOOL v19 = v18 < v17 || v15 == 8;
            v15 += 4;
            if (v19)
            {
              uint64_t v20 = 0;
              do
              {
                float v21 = *(float *)(v16 + v20);
                float v22 = *(float *)(v8 + v20);
                if (v21 < v22)
                {
                  uint64_t v13 = v14 + 1;
                  uint64_t v12 = v14[1];
                  if (v12) {
                    goto LABEL_6;
                  }
                  goto LABEL_27;
                }
                BOOL v23 = v22 < v21 || v20 == 8;
                v20 += 4;
              }
              while (!v23);
              if (!v14) {
                goto LABEL_27;
              }
              int v24 = v14;
              goto LABEL_47;
            }
          }
          uint64_t v12 = *v14;
          uint64_t v13 = v14;
          if (*v14) {
            continue;
          }
          break;
        }
      }
LABEL_27:
      int v24 = operator new(0x30uLL);
      v24[4] = v8;
      *((_DWORD *)v24 + 10) = v11;
      *int v24 = 0;
      v24[1] = 0;
      v24[2] = v14;
      *uint64_t v13 = v24;
      int v25 = v24;
      if (*v60)
      {
        uint64_t v60 = (uint64_t **)*v60;
        int v25 = *v13;
      }
      sub_21677B3B0(v61, v25);
      ++v62;
      if (v9 >= v54)
      {
        uint64_t v26 = (v9 - v6) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_21677CB10();
        }
        if ((v54 - v6) >> 2 > v27) {
          unint64_t v27 = (v54 - v6) >> 2;
        }
        if ((unint64_t)(v54 - v6) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          if (v28 >> 61) {
            sub_21677CA1C();
          }
          uint64_t v29 = (char *)operator new(8 * v28);
        }
        else
        {
          uint64_t v29 = 0;
        }
        int v30 = &v29[8 * v26];
        *(void *)int v30 = v24[4];
        uint64_t v7 = v30 + 8;
        if (v9 != v6)
        {
          do
          {
            uint64_t v31 = *((void *)v9 - 1);
            v9 -= 8;
            *((void *)v30 - 1) = v31;
            v30 -= 8;
          }
          while (v9 != v6);
          uint64_t v9 = v6;
        }
        uint64_t v6 = v30;
        int v54 = &v29[8 * v28];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v24[4];
        uint64_t v7 = v9 + 8;
      }
      ++v11;
      uint64_t v9 = v7;
LABEL_47:
      *(_DWORD *)(*v53 + 4 * v10) = *((_DWORD *)v24 + 10);
      v8 += 12;
      ++v10;
    }
    while (v10 != v3);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v32 = v7 - v6;
  if (12 * v3 > 4 * (((unint64_t)(v7 - v6) >> 2) + ((v7 - v6) >> 3)) + 4 * v3)
  {
    uint64_t v33 = v32 >> 3;
    unint64_t v34 = 3 * (v32 >> 3);
    if (v34 >> 62) {
      size_t v35 = -1;
    }
    else {
      size_t v35 = 4 * (((unint64_t)(v7 - v6) >> 2) + ((v7 - v6) >> 3));
    }
    uint64_t v36 = operator new[](v35);
    uint64_t v37 = v36;
    if (v7 != v6)
    {
      uint64_t v38 = v6;
      uint64_t v39 = v36;
      do
      {
        uint64_t v40 = *(uint64_t **)v38;
        v38 += 8;
        uint64_t v41 = *v40;
        v39[2] = *((_DWORD *)v40 + 2);
        *(void *)uint64_t v39 = v41;
        v39 += 3;
        --v33;
      }
      while (v33);
    }
    unint64_t v55 = v34;
    int v42 = operator new(0x10uLL);
    *int v42 = &unk_26C777508;
    v42[1] = v37;
    sub_217122B64(&v56, (uint64_t)v42);
    char v58 = 0;
    std::string v59 = 0;
    char v44 = v63;
    uint64_t v43 = v64;
    if (v64)
    {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v45 = v59;
      char v58 = v44;
      std::string v59 = v43;
      if (v45) {
        sub_216784EC4(v45);
      }
    }
    else
    {
      char v58 = v63;
      std::string v59 = 0;
    }
    unint64_t v46 = v56;
    unint64_t *v52 = v55;
    char v47 = v57;
    if (v57) {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = (std::__shared_weak_count *)v52[2];
    v52[1] = v46;
    v52[2] = (unint64_t)v47;
    if (v48) {
      sub_216784EC4(v48);
    }
    int v50 = v58;
    __n128 v49 = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v51 = (std::__shared_weak_count *)v52[4];
    v52[3] = (unint64_t)v50;
    v52[4] = (unint64_t)v49;
    if (v51) {
      sub_216784EC4(v51);
    }
    if (v59) {
      sub_216784EC4(v59);
    }
    if (v57) {
      sub_216784EC4(v57);
    }
  }
  if (v6) {
    operator delete(v6);
  }
  sub_216F510C4(v61);
  if (v64) {
    sub_216784EC4(v64);
  }
}

void sub_217151934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (v22) {
    operator delete(v22);
  }
  sub_216F510C4(a19);
  if (a22) {
    sub_216784EC4(a22);
  }
  _Unwind_Resume(a1);
}

void *sub_217151998(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_217151A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217151A30(void *a1)
{
  unint64_t v2 = (void *)a1[44];
  if (v2)
  {
    a1[45] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[33];
  if (v4)
  {
    a1[34] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[23];
  if (v6)
  {
    a1[24] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
  }
  return a1;
}

void *sub_217151AD4(void *a1, uint64_t *a2)
{
  int v4 = operator new(0x18uLL);
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *int v4 = &unk_26C77A520;
  v4[1] = v6;
  v4[2] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
  }
  *int v4 = &unk_26C77AF48;
  *a1 = v4;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_26C77AF98;
  v7[1] = 0;
  v7[2] = 0;
  void v7[3] = v4;
  a1[1] = v7;
  return a1;
}

void sub_217151BA4(_Unwind_Exception *a1)
{
  sub_217154DB0(v1);
  _Unwind_Resume(a1);
}

int64x2_t sub_217151BB8(int64x2_t *a1)
{
  a1->i64[0] = 0;
  a1->i32[2] = 127;
  a1->i8[12] = 0;
  sub_21677CC7C(a1[1].i8, 0, 0, 0);
  a1[25].i64[0] = 0;
  a1[25].i32[2] = 127;
  a1[25].i8[12] = 0;
  sub_21677CC7C(a1[26].i8, 0, 0, 0);
  a1[2].i64[1] = 0;
  a1[3].i32[0] = 127;
  a1[3].i8[4] = 0;
  sub_21677CC7C(&a1[3].i8[8], 0, 0, 0);
  sub_21714EEF4((uint64_t)&a1[13].i64[1]);
  sub_21714EEF4((uint64_t)a1[19].i64);
  sub_21714EEF4((uint64_t)a1[8].i64);
  a1[5].i64[0] = 0;
  a1[5].i32[2] = 127;
  a1[5].i8[12] = 0;
  sub_21677CC7C(a1[6].i8, 0, 0, 0);
  a1[27].i64[1] = 0;
  a1[28].i32[0] = 127;
  a1[28].i8[4] = 0;
  sub_21677CC7C(&a1[28].i8[8], 0, 0, 0);
  a1[30].i64[0] = 0;
  a1[30].i32[2] = 127;
  a1[30].i8[12] = 0;
  sub_21677CC7C(a1[31].i8, 0, 0, 0);
  a1[32].i64[1] = 0x7FEFFFFFFFFFFFFFLL;
  int64x2_t result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[33] = result;
  a1[34] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  a1[35].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  a1[7].i64[1] = 0;
  a1[24].i32[2] = 1;
  return result;
}

uint64_t sub_217151CDC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v4 = sub_2171489A0(a1, a3);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(&v19, v4);
  if (sub_2168FD6AC(v5))
  {
    if ((v20 & 4) != 0) {
      uint64_t v8 = (*(uint64_t (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
    }
    else {
      uint64_t v8 = v19;
    }
    uint64_t v9 = *(float32x2_t **)(v8 + 32);
    *(float64x2_t *)(a2 + 520) = vcvtq_f64_f32(*v9);
    *(float64x2_t *)(a2 + 536) = vcvtq_f64_f32(v9[1]);
    *(float64x2_t *)(a2 + 552) = vcvtq_f64_f32(v9[2]);
  }
  else
  {
    v17[0] = "usdAbc/alembicWriter.cpp";
    v17[1] = "_CopySelfBounds";
    v17[2] = 1759;
    v17[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &, D"
             "ST *) [DST = Alembic::AbcGeom::v12::OCurvesSchema::Sample]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v19, v6, v7, (uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v13, (uint64_t)__p);
    if (v16 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v17, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v10, v11);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  return sub_2168EE084((uint64_t)&v19);
}

void sub_217151E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2168EE084(v22 - 40);
  _Unwind_Resume(a1);
}

void sub_217151E7C(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a2, a5);
  *(_DWORD *)char v14 = 10;
  v14[4] = 3;
  sub_21714849C(v10, v12, a1, (uint64_t)Converter, (int *)v14, 0, a4);
  if (sub_217148A90(a4, a2, (uint64_t)v10))
  {
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 16))(*(void *)(a4 + 8));
    sub_21714EF5C(v14, v13, *(void *)a4 / 3uLL);
    *(void *)a3 = *(void *)v14;
    *(void *)(a3 + 5) = *(void *)&v14[5];
    if (v14 != (unsigned char *)a3) {
      sub_21677CC7C((char *)(a3 + 16), (char *)__p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 3);
    }
    if (__p)
    {
      char v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_217151FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    sub_216784EC4(v15);
  }
  char v16 = *(std::__shared_weak_count **)(v13 + 16);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_217151FF4(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a2, a5);
  *(_DWORD *)char v14 = 10;
  v14[4] = 3;
  sub_21714849C(v10, v12, a1, (uint64_t)Converter, (int *)v14, 0, a4);
  if (sub_217148A90(a4, a2, (uint64_t)v10))
  {
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 16))(*(void *)(a4 + 8));
    sub_21714EFF4(v14, v13, *(void *)a4 / 3uLL);
    *(void *)(a3 + 40) = *(void *)v14;
    *(void *)(a3 + 45) = *(void *)&v14[5];
    if ((unsigned char *)(a3 + 40) != v14) {
      sub_21677CC7C((char *)(a3 + 56), (char *)__p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 3);
    }
    if (__p)
    {
      char v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_217152130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    sub_216784EC4(v15);
  }
  char v16 = *(std::__shared_weak_count **)(v13 + 16);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217152170@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64));
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0(a2, a5);
  *(_DWORD *)int v25 = 10;
  v25[4] = 3;
  sub_21714849C(v10, v12, a1, (uint64_t)Converter, (int *)v25, 0, a4);
  uint64_t result = sub_217148A90(a4, (_DWORD *)a2, (uint64_t)v10);
  if ((result & 1) == 0) {
    return result;
  }
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
    sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 8) + 136))(&v38);
  if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v38))
  {
    if ((v39 & 4) != 0) {
      uint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(&v38);
    }
    else {
      uint64_t v15 = &v38;
    }
    int v16 = sub_217148184(v15);
  }
  else
  {
    int v16 = 127;
  }
  sub_217151504(a4);
  float v17 = *(uint64_t **)(a4 + 24);
  char v18 = *(std::__shared_weak_count **)(a4 + 32);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v17)
  {
    sub_21714F788(v35, *v17, (v17[1] - *v17) >> 2);
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 16))(*(void *)(a4 + 8));
    sub_217151998(v22, v19, *(void *)a4 / 3uLL);
    sub_2167C8C94((uint64_t)v25, v22, (uint64_t *)v35, v16);
    sub_21715252C(a3, v25);
    if (__p)
    {
      uint64_t v32 = __p;
      operator delete(__p);
    }
    if (v26)
    {
      unint64_t v27 = v26;
      operator delete(v26);
    }
    uint64_t v20 = v23;
    if (!v23) {
      goto LABEL_23;
    }
    int v24 = v23;
  }
  else
  {
    uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 16))(*(void *)(a4 + 8));
    sub_217151998(v35, v21, *(void *)a4 / 3uLL);
    *(void *)int v25 = *(void *)v35;
    *(void *)&int v25[5] = *(void *)&v35[5];
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    sub_21677EA60(&v26, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 3);
    uint64_t v29 = 0;
    uint64_t v30 = 0x100000005;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    va_list __p = 0;
    int v34 = v16;
    sub_21715252C(a3, v25);
    if (__p)
    {
      uint64_t v32 = __p;
      operator delete(__p);
    }
    uint64_t v20 = v26;
    if (!v26) {
      goto LABEL_23;
    }
    unint64_t v27 = v26;
  }
  operator delete(v20);
LABEL_23:
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  return sub_2168EE084((uint64_t)&v38);
}

void sub_217152490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  sub_2167C5204(&a14);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2168EE084(v30 - 104);
  sub_217148C70(v28);
  _Unwind_Resume(a1);
}

char *sub_21715252C(char *result, char *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  *(void *)(result + 309) = *(void *)(a2 + 5);
  *((void *)result + 38) = v4;
  if (result + 304 == a2)
  {
    uint64_t v6 = *((void *)a2 + 5);
    *(void *)(result + 349) = *(void *)(a2 + 45);
    *((void *)result + 43) = v6;
  }
  else
  {
    sub_21677CC7C(result + 320, *((char **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3);
    uint64_t v5 = *((void *)a2 + 5);
    *(void *)(v3 + 349) = *(void *)(a2 + 45);
    *((void *)v3 + 43) = v5;
    uint64_t result = sub_21677CC7C(v3 + 360, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 96) = *((_DWORD *)a2 + 20);
  return result;
}

void sub_2171525C8(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0((uint64_t)a2, a5);
  *(_DWORD *)char v14 = 6;
  v14[4] = 1;
  sub_21714849C(v10, v12, a1, (uint64_t)Converter, (int *)v14, 0, a4);
  if (sub_217148A90(a4, a2, (uint64_t)v10))
  {
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 16))(*(void *)(a4 + 8));
    sub_21714F08C(v14, v13, *(void *)a4);
    *(void *)(a3 + 80) = *(void *)v14;
    *(void *)(a3 + 85) = *(void *)&v14[5];
    if ((unsigned char *)(a3 + 80) != v14) {
      sub_21677CC7C((char *)(a3 + 96), (char *)__p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 3);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_2171526F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    sub_216784EC4(v15);
  }
  int v16 = *(std::__shared_weak_count **)(v13 + 16);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217152734@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64);
  uint64_t Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64));
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2171489A0(a2, a5);
  *(_DWORD *)int v25 = 10;
  v25[4] = 1;
  sub_21714849C(v10, v12, a1, (uint64_t)Converter, (int *)v25, 0, a4);
  uint64_t result = sub_217148A90(a4, (_DWORD *)a2, (uint64_t)v10);
  if ((result & 1) == 0) {
    return result;
  }
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
    sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 8) + 136))(&v38);
  if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v38))
  {
    if ((v39 & 4) != 0) {
      uint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(&v38);
    }
    else {
      uint64_t v15 = &v38;
    }
    int v16 = sub_217148184(v15);
  }
  else
  {
    int v16 = 127;
  }
  sub_21715566C(a4);
  float v17 = *(uint64_t **)(a4 + 24);
  char v18 = *(std::__shared_weak_count **)(a4 + 32);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v17)
  {
    sub_21714F788(v35, *v17, (v17[1] - *v17) >> 2);
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 16))(*(void *)(a4 + 8));
    sub_21714F190(v22, v19, *(void *)a4);
    sub_2167CA0D8((uint64_t)v25, v22, (uint64_t *)v35, v16);
    sub_217152AD0(a3, (uint64_t)v25);
    if (__p)
    {
      uint64_t v32 = __p;
      operator delete(__p);
    }
    if (v26)
    {
      unint64_t v27 = v26;
      operator delete(v26);
    }
    uint64_t v20 = v23;
    if (!v23) {
      goto LABEL_23;
    }
    int v24 = v23;
  }
  else
  {
    uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 16))(*(void *)(a4 + 8));
    sub_21714F190(v35, v21, *(void *)a4);
    *(void *)int v25 = *(void *)v35;
    *(void *)&int v25[5] = *(void *)&v35[5];
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    sub_21677EA60(&v26, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 3);
    uint64_t v29 = 0;
    uint64_t v30 = 0x100000005;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    va_list __p = 0;
    int v34 = v16;
    sub_217152AD0(a3, (uint64_t)v25);
    if (__p)
    {
      uint64_t v32 = __p;
      operator delete(__p);
    }
    uint64_t v20 = v26;
    if (!v26) {
      goto LABEL_23;
    }
    unint64_t v27 = v26;
  }
  operator delete(v20);
LABEL_23:
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  return sub_2168EE084((uint64_t)&v38);
}

void sub_217152A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  sub_2167C5204(&a14);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v29) {
    sub_216784EC4(v29);
  }
  sub_2168EE084(v30 - 104);
  sub_217148C70(v28);
  _Unwind_Resume(a1);
}

char *sub_217152AD0(char *result, uint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 5);
  *((void *)result + 16) = *(void *)a2;
  *(void *)(result + 133) = v4;
  if (result + 128 == (char *)a2)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(result + 173) = *(void *)(a2 + 45);
    *((void *)result + 21) = v6;
  }
  else
  {
    sub_21677CC7C(result + 144, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(v3 + 173) = *(void *)(a2 + 45);
    *((void *)v3 + 21) = v5;
    uint64_t result = sub_21677CC7C(v3 + 184, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 52) = *(_DWORD *)(a2 + 80);
  return result;
}

void sub_217152B64(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    uint64_t v4 = *(unint64_t **)a1;
  }
  uint64_t v5 = (double *)v4[4];
  unint64_t v6 = *v4;
  uint64_t v7 = &v5[*v4];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  va_list __p = 0;
  sub_217155A8C((char *)&__p, v5, v7, v6);
  *a2 = (v9 - (unsigned char *)__p) >> 2;
  sub_217155B04((uint64_t)&__p, a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_217152BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_217152C10(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (size_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    uint64_t v4 = *(size_t **)a1;
  }
  uint64_t v5 = (int *)v4[4];
  size_t v6 = *v4;
  uint64_t v7 = &v5[*v4];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  va_list __p = 0;
  sub_217155C3C((char *)&__p, v5, v7, v6);
  *a2 = v9 - (unsigned char *)__p;
  sub_217155CB0((uint64_t)&__p, a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_217152C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217152CB8(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v12 = (_DWORD *)(a1 + 8);
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77ADC0;
  sub_2171537EC(a1 + 56);
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  uint64_t v39 = 0;
  __p[0] = &__p[1];
  int v50 = v13;
  sub_2167898D0((uint64_t *)v51, (const void ***)__p);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  uint64_t v55 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a4, (uint64_t)&v50);
  sub_2167A030C(a5, (uint64_t)&v50);
  sub_2167A030C(a6, (uint64_t)&v50);
  *uint64_t v12 = v50;
  uint64_t v48 = v12;
  __n128 v49 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  char v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    sub_216778A5C((uint64_t)__p);
    sub_216779180(&v39, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_216778E70(&__str, &v46);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v28 = sub_216779038(exception, (uint64_t)&__str);
    __cxa_throw(v28, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v46, v51);
  if (HIDWORD(v55) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Curve_v2");
    uint64_t v40 = __p;
    float v17 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaObjTitle");
    sub_217153444(&__str);
    uint64_t v40 = __p;
    char v18 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaBaseType");
    sub_216779094(&__str, "AbcGeom_GeomBase_v1");
    uint64_t v40 = __p;
    uint64_t v19 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  sub_2167A94C0(&__str, a3, (const void ***)&v46);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v20;
  if (v21)
  {
    sub_216784EC4(v21);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v22 = v52;
  BOOL v23 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v24 = (*(uint64_t (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v24 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  uint64_t v40 = (void **)v41;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v36);
  sub_216779094(v34, ".geom");
  int v25 = *v12;
  v33[0] = 1;
  _OWORD v33[2] = v25;
  v32[0] = 2;
  void v32[2] = v24;
  int v30 = 3;
  uint64_t v31 = (long long **)&v40;
  v29[0] = 6;
  v29[2] = v16;
  sub_217153E44((uint64_t)__p, &v36, (uint64_t)v34, v33, v32, &v30, v29);
  sub_217153524(a1 + 56, (uint64_t)__p);
  sub_217154B1C((uint64_t)__p);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37) {
    sub_216784EC4(v37);
  }
  sub_2167877AC((uint64_t)&v40, v41[0]);
  if (v23) {
    sub_216784EC4(v23);
  }
  sub_2167877AC((uint64_t)v45, v45[1]);
  if (v44 < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v46, *((void **)&v46 + 1));
  if (v14) {
    sub_216784EC4(v14);
  }
  if (v53) {
    sub_216784EC4(v53);
  }
  sub_2167877AC((uint64_t)v51, v51[1]);
  return a1;
}

void sub_217153228(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(__p, a16);
  sub_216779148((std::exception *)&STACK[0x4F8]);
  sub_216778D38((uint64_t)__p);
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v22 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v23 = (uint64_t)v22;
    sub_217153BA0(v17);
    sub_2167A9424(v16);
    sub_21679FA64(v19 - 168, v23);
  }
  else
  {
    sub_217153BA0(v17);
    sub_2167A9424(v16);
    sub_21679F9F4(v19 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217153170);
}

void sub_2171533D8()
{
}

void sub_2171533E4()
{
}

void sub_217153404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

void sub_217153418()
{
}

void sub_217153420(_Unwind_Exception *a1)
{
  sub_2167A03C4(v3 - 152);
  sub_217154B1C(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_217153444(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_Curve_v2");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_2171534F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217153524(uint64_t a1, uint64_t a2)
{
  sub_2167E7F50(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v8 = *(void *)(a2 + 328);
  uint64_t v7 = *(void *)(a2 + 336);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v8;
  *(void *)(a1 + 336) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  long long v10 = *(_OWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = v10;
  sub_2167C5310(a1 + 368, (long long *)(a2 + 368));
  sub_2167C5310(a1 + 544, (long long *)(a2 + 544));
  sub_2167C5310(a1 + 720, (long long *)(a2 + 720));
  *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  uint64_t v11 = *(void *)(a2 + 928);
  uint64_t v12 = *(void *)(a2 + 936);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 928) = v11;
  int v13 = *(std::__shared_weak_count **)(a1 + 936);
  *(void *)(a1 + 936) = v12;
  if (v13) {
    sub_216784EC4(v13);
  }
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 944);
  std::string::operator=((std::string *)(a1 + 952), (const std::string *)(a2 + 952));
  uint64_t v14 = *(void *)(a2 + 976);
  uint64_t v15 = *(void *)(a2 + 984);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 976) = v14;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 984);
  *(void *)(a1 + 984) = v15;
  if (v16) {
    sub_216784EC4(v16);
  }
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a2 + 992);
  std::string::operator=((std::string *)(a1 + 1000), (const std::string *)(a2 + 1000));
  uint64_t v17 = *(void *)(a2 + 1024);
  uint64_t v18 = *(void *)(a2 + 1032);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1024) = v17;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 1032);
  *(void *)(a1 + 1032) = v18;
  if (v19) {
    sub_216784EC4(v19);
  }
  *(_DWORD *)(a1 + 1040) = *(_DWORD *)(a2 + 1040);
  std::string::operator=((std::string *)(a1 + 1048), (const std::string *)(a2 + 1048));
  uint64_t v20 = *(void *)(a2 + 1072);
  uint64_t v21 = *(void *)(a2 + 1080);
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1072) = v20;
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 1080);
  *(void *)(a1 + 1080) = v21;
  if (v22) {
    sub_216784EC4(v22);
  }
  *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
  std::string::operator=((std::string *)(a1 + 1096), (const std::string *)(a2 + 1096));
  uint64_t v23 = *(void *)(a2 + 1120);
  uint64_t v24 = *(void *)(a2 + 1128);
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1120) = v23;
  int v25 = *(std::__shared_weak_count **)(a1 + 1128);
  *(void *)(a1 + 1128) = v24;
  if (v25) {
    sub_216784EC4(v25);
  }
  return a1;
}

void sub_217153740(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77ADC0;
  sub_217154B1C((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_217153794(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77ADC0;
  sub_217154B1C((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  operator delete(v2);
}

uint64_t sub_2171537EC(uint64_t a1)
{
  uint64_t v2 = sub_2171539E8(a1);
  *(void *)uint64_t v2 = &unk_26C77ADF8;
  *(_DWORD *)(v2 + 248) = 2;
  sub_216779094((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  sub_2167DB444(a1 + 368);
  sub_2167DB374(a1 + 544);
  sub_2167E1CE0(a1 + 720);
  *(_DWORD *)(a1 + 896) = 2;
  sub_216779094((void *)(a1 + 904), "");
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  sub_216779094((void *)(a1 + 952), "");
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 2;
  sub_216779094((void *)(a1 + 1000), "");
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1040) = 2;
  sub_216779094((void *)(a1 + 1048), "");
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1088) = 2;
  sub_216779094((void *)(a1 + 1096), "");
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1120) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  return a1;
}

void sub_217153940(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v7);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 124));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 118));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 112));
  sub_2167C5410(v5);
  sub_2167C5410(v4);
  sub_2167C5410(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_217153B0C(v1);
  _Unwind_Resume(a1);
}

void sub_2171539C0()
{
}

void sub_2171539C8()
{
}

void sub_2171539D0()
{
}

void sub_2171539D8()
{
}

void sub_2171539E0()
{
}

uint64_t sub_2171539E8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77AE80;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_217153AC8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_217153B0C(void *a1)
{
  *a1 = &unk_26C77AE80;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_217153B78(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217154B1C(a1);

  operator delete(v1);
}

void sub_217153BA0(uint64_t a1)
{
  sub_2167A13A4(a1 + 248);
  sub_2167A13A4(a1 + 944);
  sub_2167C5E20(a1 + 368);
  sub_2167C5E20(a1 + 544);
  sub_2167C5E20(a1 + 720);
  sub_2167A13A4(a1 + 296);
  sub_2167A13A4(a1 + 992);
  sub_2167A13A4(a1 + 1040);
  sub_2167A13A4(a1 + 1088);

  sub_217153D5C(a1);
}

uint64_t sub_217153C1C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return *(unsigned char *)(a1 + 344) != 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return *(unsigned char *)(a1 + 344) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return *(unsigned char *)(a1 + 344) != 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return *(unsigned char *)(a1 + 344) != 0;
    }
    if (*(void *)(a1 + 280)) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 344) != 0;
}

void *sub_217153C74(void *a1)
{
  *a1 = &unk_26C77AE80;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_217153CE0(void *a1)
{
  *a1 = &unk_26C77AE80;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  operator delete(a1);
}

void sub_217153D5C(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_217153DB0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_217153DDC(uint64_t a1)
{
  return a1;
}

void sub_217153E08(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217153E44(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v26 = *a2;
  unint64_t v27 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217154234(a1, &v26, a3, a4, a5, a6, a7);
  if (v27) {
    sub_216784EC4(v27);
  }
  *(void *)a1 = &unk_26C77ADF8;
  *(_DWORD *)(a1 + 248) = 2;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  sub_2167DB444(a1 + 368);
  sub_2167DB374(a1 + 544);
  sub_2167E1CE0(a1 + 720);
  *(_DWORD *)(a1 + 896) = 2;
  sub_216779094((void *)(a1 + 904), "");
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  sub_216779094((void *)(a1 + 952), "");
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 2;
  sub_216779094((void *)(a1 + 1000), "");
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1040) = 2;
  sub_216779094((void *)(a1 + 1048), "");
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1088) = 2;
  sub_216779094((void *)(a1 + 1096), "");
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1120) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v24);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v24)
  {
    uint64_t v15 = *a2;
    uint64_t v16 = (std::__shared_weak_count *)a2[1];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 24))(&v20);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v20 + 24))(&v22);
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 48))(v22, v24);
    if (v23) {
      sub_216784EC4(v23);
    }
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  else
  {
    int v17 = v14;
  }
  char v18 = sub_2167CD0F8(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OCurvesSchema::init((Alembic::AbcGeom::v12::OCurvesSchema *)a1, v17, v18);
  if (v25) {
    sub_216784EC4(v25);
  }
  return a1;
}

void sub_21715411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (v20) {
    sub_216784EC4(v20);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v16 + 136));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 130));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 124));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 118));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 112));
  sub_2167C5410(v19);
  sub_2167C5410(v18);
  sub_2167C5410(a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v16 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v17);
  sub_217153B0C(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_217154234(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v13 = (std::__shared_weak_count *)a2[1];
  uint64_t v24 = *a2;
  int v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21715451C(a1, &v24, a3, a4, a5, a6, a7);
  if (v25) {
    sub_216784EC4(v25);
  }
  *(void *)a1 = &unk_26C77AE80;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_2167CC320(a4, a5, a6, a7, &v22);
  int v14 = sub_2167CC43C(a4, a5, a6, a7);
  if (v22)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v18);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 24))(&v20);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v22);
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v19) {
      sub_216784EC4(v19);
    }
  }
  else
  {
    int v15 = v14;
  }
  char v16 = sub_2167CD0F8(a4, a5, a6, a7);
  sub_217154618(a1, v15, v16);
  if (v23) {
    sub_216784EC4(v23);
  }
  return a1;
}

void sub_217154474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Alembic::Abc::v12::OScalarProperty *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v21);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(v18 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_21715451C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77AEB0;
  int v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  int v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2171546F4(a1, (uint64_t)&v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_216784EC4(v17);
  }
  return a1;
}

void sub_2171545F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v10);
  _Unwind_Resume(a1);
}

void sub_217154618(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0) {
    sub_2167C4FF0(a1, a2, 0);
  }
}

void sub_217154664(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = __cxa_begin_catch(a1);
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v9 + 16);
  if (a2 == 2)
  {
    uint64_t v13 = (uint64_t)v11;
    v12(v9);
    sub_21679FA64((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217154650);
}

void sub_2171546D4(_Unwind_Exception *a1)
{
}

void sub_2171546F4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v23 = 0;
  v24[0] = 0;
  uint64_t v22 = (uint64_t *)&v23;
  int v25 = 2;
  sub_2167898D0((uint64_t *)v26, (const void ***)&v22);
  v26[3] = 0;
  unint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = 1;
  sub_2167877AC((uint64_t)&v22, v23);
  sub_2167A030C(a4, (uint64_t)&v25);
  sub_2167A030C(a5, (uint64_t)&v25);
  sub_2167A030C(a6, (uint64_t)&v25);
  sub_2167A030C(a7, (uint64_t)&v25);
  *(_DWORD *)(a1 + 8) = v25;
  v24[33] = a1 + 8;
  v24[34] = "OSchema::OSchema::init()";
  if (!*(void *)a2)
  {
    sub_216778A5C((uint64_t)&v22);
    sub_216779180(v24, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v18, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v22, v26);
  if (HIDWORD(v29) != 1)
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Curve_v2");
    int v30 = __p;
    uint64_t v13 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v30);
    std::string::operator=((std::string *)(v13 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (HIDWORD(v29) != 1)
    {
      sub_216779094(__p, "schemaBaseType");
      sub_216779094(&__str, "AbcGeom_GeomBase_v1");
      int v30 = __p;
      int v14 = sub_21677B174(&v22, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v30);
      std::string::operator=((std::string *)(v14 + 7), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 112))(__p);
  long long v15 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v15;
  if (v16)
  {
    sub_216784EC4(v16);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_2167877AC((uint64_t)&v22, v23);
  if (v27) {
    sub_216784EC4(v27);
  }
  sub_2167877AC((uint64_t)v26, v26[1]);
}

void sub_2171549EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167A13A4(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217154938);
}

void sub_217154AD0(_Unwind_Exception *a1)
{
  sub_2167A03C4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_217154B1C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77ADF8;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 1088));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 1040));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 992));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 944));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 896));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 848));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 792));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 744));
  if (*(char *)(a1 + 743) < 0) {
    operator delete(*(void **)(a1 + 720));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 672));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 616));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 568));
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 496));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 440));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 392));
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(void *)a1 = &unk_26C77AE80;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

void *sub_217154C54(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77AED0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217154CAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217154CC8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217154CF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217154D20(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77AF20)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217154D64(void *a1)
{
  *a1 = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_217154DB0(void *__p)
{
  void *__p = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

void sub_217154E0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_216778F24(v5, *(void **)(v4 + 72), *(void *)(v4 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 72);
    *(void *)(a2 + 24) = *(void *)(v4 + 88);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(v4 + 104);
  *(void *)(a2 + 32) = *(void *)(v4 + 96);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217154EBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217154ED4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217154FBC(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217154F30(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217154F48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2171551DC(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217154FA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_217154FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getArbGeomParams()";
  int v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 168)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 183))
  {
LABEL_5:
    if (*(void *)(a1 + 184)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 152) = v17;
  std::string::operator=((std::string *)(a1 + 160), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 160);
    *(void *)(a2 + 24) = *(void *)(a1 + 176);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a2 + 32) = *(void *)(a1 + 184);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21715511C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x217155108);
}

void sub_2171551BC(_Unwind_Exception *a1)
{
}

unsigned char *sub_2171551DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getUserProperties()";
  int v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 216)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 231))
  {
LABEL_5:
    if (*(void *)(a1 + 232)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".userProperties");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 200) = v17;
  std::string::operator=((std::string *)(a1 + 208), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v7;
  *(void *)(a1 + 240) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 208), *(void *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 208);
    *(void *)(a2 + 24) = *(void *)(a1 + 224);
  }
  uint64_t v10 = *(void *)(a1 + 240);
  *(void *)(a2 + 32) = *(void *)(a1 + 232);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21715533C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x217155328);
}

void sub_2171553DC(_Unwind_Exception *a1)
{
}

void sub_217155400(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217155428(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217155458(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77AFE8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_21715549C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0x30000000ALL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0x100000006;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0x10000000ALL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0x100000005;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 127;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0x20000000ALL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0x100000005;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 127;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0x30000000ALL;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0x100000005;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 127;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0x10000000ALL;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 448) = 0x100000001;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 488) = 0x10000000ALL;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0x7FEFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 528) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 544) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 560) = 0xFFEFFFFFFFFFFFFFLL;
  sub_217151BB8((int64x2_t *)a1);
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 392) = 1;
  return a1;
}

void sub_2171555E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v20 = *v13;
  if (*v13)
  {
    v10[63] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v19;
  if (*v19)
  {
    v10[58] = v21;
    operator delete(v21);
  }
  uint64_t v22 = *v18;
  if (*v18)
  {
    v10[53] = v22;
    operator delete(v22);
  }
  sub_2167C5204(v14);
  sub_2167C5204(v12);
  sub_2167C5204(v11);
  uint64_t v23 = *v17;
  if (*v17)
  {
    v10[13] = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v16;
  if (*v16)
  {
    v10[8] = v24;
    operator delete(v24);
  }
  uint64_t v25 = *v15;
  if (*v15)
  {
    v10[3] = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void sub_21715566C(uint64_t a1)
{
  unint64_t v2 = *(void *)a1;
  uint64_t v3 = operator new(0x18uLL);
  LODWORD(v46) = 0;
  unint64_t v45 = v2;
  sub_21700D064(v3, v2, &v46);
  sub_21714F690(&v54, (uint64_t)v3);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v44 = v54;
  uint64_t v51 = &v52;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v43 = (uint64_t *)a1;
  if (v2)
  {
    uint64_t v5 = (float *)v4;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v12 = v52;
      uint64_t v13 = &v52;
      char v14 = &v52;
      if (v52)
      {
        float v15 = *v5;
        while (1)
        {
          while (1)
          {
            uint64_t v13 = (uint64_t **)v12;
            float v16 = *(float *)v12[4];
            if (v15 >= v16) {
              break;
            }
            uint64_t v12 = (uint64_t *)*v12;
            char v14 = v13;
            if (!*v13) {
              goto LABEL_11;
            }
          }
          if (v16 >= v15) {
            break;
          }
          uint64_t v12 = (uint64_t *)v12[1];
          if (!v12)
          {
            char v14 = v13 + 1;
            goto LABEL_11;
          }
        }
        int v17 = v12;
      }
      else
      {
LABEL_11:
        int v17 = operator new(0x30uLL);
        void v17[4] = v5;
        *((_DWORD *)v17 + 10) = v11;
        void *v17 = 0;
        v17[1] = 0;
        v17[2] = v13;
        *char v14 = v17;
        std::string v18 = v17;
        if (*v51)
        {
          uint64_t v51 = (uint64_t **)*v51;
          std::string v18 = *v14;
        }
        sub_21677B3B0(v52, v18);
        ++v53;
        if (v7 >= v8)
        {
          uint64_t v19 = (v7 - v6) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            sub_21677CB10();
          }
          if ((v8 - v6) >> 2 > v20) {
            unint64_t v20 = (v8 - v6) >> 2;
          }
          if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21)
          {
            if (v21 >> 61) {
              sub_21677CA1C();
            }
            uint64_t v22 = (char *)operator new(8 * v21);
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v19];
          *(void *)uint64_t v23 = v17[4];
          uint64_t v9 = v23 + 8;
          if (v7 != v6)
          {
            do
            {
              uint64_t v24 = *((void *)v7 - 1);
              v7 -= 8;
              *((void *)v23 - 1) = v24;
              v23 -= 8;
            }
            while (v7 != v6);
            uint64_t v7 = v6;
          }
          uint64_t v6 = v23;
          uint64_t v8 = &v22[8 * v21];
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v17[4];
          uint64_t v9 = v7 + 8;
        }
        ++v11;
        uint64_t v7 = v9;
      }
      *(_DWORD *)(*v44 + 4 * v10) = *((_DWORD *)v17 + 10);
      ++v5;
      ++v10;
    }
    while (v10 != v45);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v25 = v9 - v6;
  if (4 * v45 > 4 * (v45 + ((v9 - v6) >> 3)))
  {
    if (v25 < 0) {
      size_t v26 = -1;
    }
    else {
      size_t v26 = v25 >> 1;
    }
    unint64_t v27 = operator new[](v26);
    int v28 = v27;
    if (v9 != v6)
    {
      uint64_t v29 = v6;
      uint64_t v30 = v27;
      uint64_t v31 = v25 >> 3;
      do
      {
        uint64_t v32 = *(_DWORD **)v29;
        v29 += 8;
        *v30++ = *v32;
        --v31;
      }
      while (v31);
    }
    uint64_t v46 = v25 >> 3;
    uint64_t v33 = operator new(0x10uLL);
    void *v33 = &unk_26C777508;
    v33[1] = v28;
    sub_217122B64(&v47, (uint64_t)v33);
    __n128 v49 = 0;
    int v50 = 0;
    char v35 = v54;
    int v34 = v55;
    if (v55)
    {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v36 = v50;
      __n128 v49 = v35;
      int v50 = v34;
      if (v36) {
        sub_216784EC4(v36);
      }
    }
    else
    {
      __n128 v49 = v54;
      int v50 = 0;
    }
    uint64_t v37 = v47;
    *uint64_t v43 = v46;
    uint64_t v38 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = (std::__shared_weak_count *)v43[2];
    v43[1] = v37;
    v43[2] = (uint64_t)v38;
    if (v39) {
      sub_216784EC4(v39);
    }
    uint64_t v41 = (uint64_t)v49;
    uint64_t v40 = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v42 = (std::__shared_weak_count *)v43[4];
    v43[3] = v41;
    v43[4] = (uint64_t)v40;
    if (v42) {
      sub_216784EC4(v42);
    }
    if (v50) {
      sub_216784EC4(v50);
    }
    if (v48) {
      sub_216784EC4(v48);
    }
  }
  if (v6) {
    operator delete(v6);
  }
  sub_216F510C4(v52);
  if (v55) {
    sub_216784EC4(v55);
  }
}

void sub_217155A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (v22) {
    operator delete(v22);
  }
  sub_216F510C4(a19);
  if (a22) {
    sub_216784EC4(a22);
  }
  _Unwind_Resume(a1);
}

char *sub_217155A8C(char *result, double *a2, double *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = (float *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      double v8 = *a2++;
      float v9 = v8;
      *v7++ = v9;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_217155AE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217155B04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(unsigned char **)a1;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  if ((uint64_t)&v4[-*(void *)a1] < 0) {
    size_t v5 = -1;
  }
  else {
    size_t v5 = (size_t)&v4[-*(void *)a1];
  }
  uint64_t v6 = operator new[](v5);
  uint64_t v7 = v6;
  if (v4 != v3) {
    memmove(v6, v3, v4 - v3);
  }
  double v8 = operator new(0x10uLL);
  void *v8 = &unk_26C777508;
  v8[1] = v7;

  return sub_217122B64(a2, (uint64_t)v8);
}

void sub_217155B94(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217155BA8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000001;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    double v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_217155C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_217155C3C(char *result, int *a2, int *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216780490(result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_217155C94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217155CB0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(unsigned char **)a1;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  size_t v5 = operator new[]((size_t)&v4[-*(void *)a1]);
  uint64_t v6 = v5;
  if (v4 != v3) {
    memmove(v5, v3, v4 - v3);
  }
  uint64_t v7 = operator new(0x10uLL);
  *uint64_t v7 = &unk_26C776560;
  v7[1] = v6;

  return sub_217122B64(a2, (uint64_t)v7);
}

void sub_217155D38(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217155D4C(void *a1)
{
  unint64_t v2 = (void *)a1[62];
  if (v2)
  {
    a1[63] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[57];
  if (v3)
  {
    a1[58] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[52];
  if (v4)
  {
    a1[53] = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)a1[45];
  if (v5)
  {
    a1[46] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[40];
  if (v6)
  {
    a1[41] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[34];
  if (v7)
  {
    a1[35] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[29];
  if (v8)
  {
    a1[30] = v8;
    operator delete(v8);
  }
  float v9 = (void *)a1[23];
  if (v9)
  {
    a1[24] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[18];
  if (v10)
  {
    a1[19] = v10;
    operator delete(v10);
  }
  int v11 = (void *)a1[12];
  if (v11)
  {
    a1[13] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[7];
  if (v12)
  {
    a1[8] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[2];
  if (v13)
  {
    a1[3] = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_217155E30(void *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1[1];
  if ((v6 & 4) != 0) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  if (!*v4) {
    goto LABEL_19;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_19:
    *a4 = 1;
    uint64_t v13 = operator new(0x10uLL);
    *(void *)uint64_t v13 = &unk_26C77B010;
    v13[2] = 0;
LABEL_20:
    sub_217122B64(a4 + 1, (uint64_t)v13);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    int v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    uint64_t v13 = operator new(0x10uLL);
    *(void *)uint64_t v13 = &unk_26C77B010;
    v13[2] = 1;
    goto LABEL_20;
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    float v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    char v14 = operator new(0x10uLL);
    uint64_t v13 = v14;
    *char v14 = &unk_26C77B010;
    int v15 = 2;
LABEL_25:
    *((_DWORD *)v14 + 2) = v15;
    goto LABEL_20;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10) {
    uint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v11 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v11 == (*((void *)v10 + 13) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    char v14 = operator new(0x10uLL);
    uint64_t v13 = v14;
    *char v14 = &unk_26C77B010;
    int v15 = 3;
    goto LABEL_25;
  }
  if (v11)
  {
    uint64_t v12 = (const char *)(v11 + 16);
    if (*(char *)(v11 + 39) < 0) {
      uint64_t v12 = *(const char **)v12;
    }
  }
  else
  {
    uint64_t v12 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported curve basis '%s'", a2, a3, v12);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v17 < 0) {
    operator delete((void *)__p);
  }
}

void sub_217156094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171560B0(void *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1[1];
  if ((v6 & 4) != 0) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  if (!*v4) {
    goto LABEL_16;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 85) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_16;
  }
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    int v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 68) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    uint64_t v12 = operator new(0x10uLL);
    *(void *)uint64_t v12 = &unk_26C77B058;
    v12[2] = 1;
    goto LABEL_17;
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    float v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == (*((void *)v9 + 27) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    *a4 = 1;
    uint64_t v12 = operator new(0x10uLL);
    *(void *)uint64_t v12 = &unk_26C77B058;
    v12[2] = 0;
LABEL_17:
    sub_217122B64(a4 + 1, (uint64_t)v12);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  if (v10)
  {
    unint64_t v11 = (const char *)(v10 + 16);
    if (*(char *)(v10 + 39) < 0) {
      unint64_t v11 = *(const char **)v11;
    }
  }
  else
  {
    unint64_t v11 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported curve type '%s'", a2, a3, v11);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v14 < 0) {
    operator delete((void *)__p);
  }
}

void sub_217156270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21715628C(void *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1[1];
  if ((v6 & 4) != 0) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  if (!*v4) {
    goto LABEL_16;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 85) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_16;
  }
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    int v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 87) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    *a4 = 1;
    uint64_t v12 = operator new(0x10uLL);
    *(void *)uint64_t v12 = &unk_26C77B0A0;
    v12[2] = 0;
LABEL_17:
    sub_217122B64(a4 + 1, (uint64_t)v12);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    float v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == (*((void *)v9 + 97) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    uint64_t v12 = operator new(0x10uLL);
    *(void *)uint64_t v12 = &unk_26C77B0A0;
    v12[2] = 1;
    goto LABEL_17;
  }
  if (v10)
  {
    unint64_t v11 = (const char *)(v10 + 16);
    if (*(char *)(v10 + 39) < 0) {
      unint64_t v11 = *(const char **)v11;
    }
  }
  else
  {
    unint64_t v11 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported curve wrap '%s'", a2, a3, v11);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v14 < 0) {
    operator delete((void *)__p);
  }
}

void sub_21715644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21715646C(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::~_Holder(a1);

  operator delete(v1);
}

uint64_t sub_217156494(uint64_t a1)
{
  return a1 + 8;
}

void sub_2171564A0(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::~_Holder(a1);

  operator delete(v1);
}

uint64_t sub_2171564C8(uint64_t a1)
{
  return a1 + 8;
}

void sub_2171564D4(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::~_Holder(a1);

  operator delete(v1);
}

uint64_t sub_2171564FC(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_217156504(uint64_t a1)
{
  return a1;
}

uint64_t sub_217156540(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  long long v7 = *a3;
  *(_OWORD *)(a1 + 56) = a3[1];
  *(_OWORD *)(a1 + 40) = v7;
  uint64_t v8 = *((void *)a3 + 4);
  *(void *)(a1 + 72) = v8;
  if (v8)
  {
    float v9 = (atomic_ullong *)(v8 - 16);
    if (*(void *)(a1 + 64)) {
      float v9 = *(atomic_ullong **)(a1 + 64);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a1 != *(void *)(a1 + 40))
  {
    v11[0] = "usdGeom/hermiteCurves.h";
    v11[1] = "PointAndTangentArrays";
    float v11[2] = 242;
    void v11[3] = "pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::PointAndTangentArrays(const "
             "VtVec3fArray &, const VtVec3fArray &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Points and tangents must be the same size.");
    sub_2168F845C((void *)a1);
    sub_2168F845C((void *)(a1 + 40));
  }
  return a1;
}

void sub_217156630(_Unwind_Exception *a1)
{
  sub_2168F83DC(v2);
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

int64x2_t sub_217156658(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(unsigned char *)(a1 + 12) = 0;
  sub_21677CC7C((char *)(a1 + 16), 0, 0, 0);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(unsigned char *)(a1 + 52) = 0;
  sub_21677CC7C((char *)(a1 + 56), 0, 0, 0);
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 127;
  *(unsigned char *)(a1 + 92) = 0;
  sub_21677CC7C((char *)(a1 + 96), 0, 0, 0);
  sub_21714EEF4(a1 + 120);
  *(int64x2_t *)(a1 + 208) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 224) = xmmword_217409FA0;
  int64x2_t result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 240) = result;
  return result;
}

char *sub_217156704(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 5);
  *((void *)result + 15) = *(void *)a2;
  *(void *)(result + 125) = v4;
  if (result + 120 == (char *)a2)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(result + 165) = *(void *)(a2 + 45);
    *((void *)result + 20) = v6;
  }
  else
  {
    sub_21677CC7C(result + 136, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(v3 + 165) = *(void *)(a2 + 45);
    *((void *)v3 + 20) = v5;
    int64x2_t result = sub_21677CC7C(v3 + 176, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 50) = *(_DWORD *)(a2 + 80);
  return result;
}

void sub_217156798(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    uint64_t v4 = *(unint64_t **)a1;
  }
  uint64_t v5 = (uint64_t *)v4[4];
  unint64_t v6 = *v4;
  long long v7 = &v5[*v4];
  float v9 = 0;
  uint64_t v10 = 0;
  long long __p = 0;
  sub_217157E18((char *)&__p, v5, v7, v6);
  *a2 = (v9 - (unsigned char *)__p) >> 3;
  sub_217157E8C((uint64_t)&__p, a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  if (__p)
  {
    float v9 = __p;
    operator delete(__p);
  }
}

void sub_217156828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217156844(void *a1)
{
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_2171568B8(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  char v12 = (_DWORD *)(a1 + 8);
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77B0E8;
  sub_2171572C8(a1 + 56);
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  uint64_t v39 = 0;
  __p[0] = &__p[1];
  int v50 = v13;
  sub_2167898D0((uint64_t *)v51, (const void ***)__p);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  uint64_t v55 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a4, (uint64_t)&v50);
  sub_2167A030C(a5, (uint64_t)&v50);
  sub_2167A030C(a6, (uint64_t)&v50);
  *char v12 = v50;
  uint64_t v48 = v12;
  __n128 v49 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  char v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    sub_216778A5C((uint64_t)__p);
    sub_216779180(&v39, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_216778E70(&__str, &v46);
    if (v47 < 0) {
      operator delete((void *)v46);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int v28 = sub_216779038(exception, (uint64_t)&__str);
    __cxa_throw(v28, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v46, v51);
  if (HIDWORD(v55) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Points_v1");
    uint64_t v40 = __p;
    char v17 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaObjTitle");
    sub_217157044(&__str);
    uint64_t v40 = __p;
    std::string v18 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaBaseType");
    sub_216779094(&__str, "AbcGeom_GeomBase_v1");
    uint64_t v40 = __p;
    uint64_t v19 = sub_21677B174((uint64_t **)&v46, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v40);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  sub_2167A94C0(&__str, a3, (const void ***)&v46);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v20;
  if (v21)
  {
    sub_216784EC4(v21);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v22 = v52;
  uint64_t v23 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v24 = (*(uint64_t (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v24 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  uint64_t v40 = (void **)v41;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v36);
  sub_216779094(v34, ".geom");
  int v25 = *v12;
  v33[0] = 1;
  _OWORD v33[2] = v25;
  v32[0] = 2;
  void v32[2] = v24;
  int v30 = 3;
  uint64_t v31 = (long long **)&v40;
  v29[0] = 6;
  v29[2] = v16;
  Alembic::AbcGeom::v12::OPointsSchema::OPointsSchema(__p, &v36, v34, v33, v32, &v30, v29);
  sub_217157124(a1 + 56, (uint64_t)__p);
  sub_2167E2B14((uint64_t)__p);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37) {
    sub_216784EC4(v37);
  }
  sub_2167877AC((uint64_t)&v40, v41[0]);
  if (v23) {
    sub_216784EC4(v23);
  }
  sub_2167877AC((uint64_t)v45, v45[1]);
  if (v44 < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v46, *((void **)&v46 + 1));
  if (v14) {
    sub_216784EC4(v14);
  }
  if (v53) {
    sub_216784EC4(v53);
  }
  sub_2167877AC((uint64_t)v51, v51[1]);
  return a1;
}

void sub_217156E28(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(__p, a16);
  sub_216779148((std::exception *)&STACK[0x2D8]);
  sub_216778D38((uint64_t)__p);
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v22 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v23 = (uint64_t)v22;
    sub_2167E1AAC(v17);
    sub_2167A9424(v16);
    sub_21679FA64(v19 - 168, v23);
  }
  else
  {
    sub_2167E1AAC(v17);
    sub_2167A9424(v16);
    sub_21679F9F4(v19 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217156D70);
}

void sub_217156FD8()
{
}

void sub_217156FE4()
{
}

void sub_217157004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

void sub_217157018()
{
}

void sub_217157020(_Unwind_Exception *a1)
{
  sub_2167A03C4(v3 - 152);
  sub_2167E2B14(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_217157044(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_Points_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_2171570F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217157124(uint64_t a1, uint64_t a2)
{
  sub_2167E7F50(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v8 = *(void *)(a2 + 328);
  uint64_t v7 = *(void *)(a2 + 336);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  float v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v8;
  *(void *)(a1 + 336) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v11 = *(void *)(a2 + 376);
  uint64_t v10 = *(void *)(a2 + 384);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  char v12 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v11;
  *(void *)(a1 + 384) = v10;
  if (v12) {
    sub_216784EC4(v12);
  }
  sub_2167C5310(a1 + 392, (long long *)(a2 + 392));
  int v13 = *(_DWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_DWORD *)(a1 + 584) = v13;
  return a1;
}

void sub_21715721C(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77B0E8;
  sub_2167E2B14((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_217157270(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26C77B0E8;
  sub_2167E2B14((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  operator delete(v2);
}

uint64_t sub_2171572C8(uint64_t a1)
{
  uint64_t v2 = sub_2171573C8(a1);
  *(void *)uint64_t v2 = &unk_26C749DD0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_216779094((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  sub_2167E1CE0(a1 + 392);
  *(unsigned char *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  return a1;
}

void sub_217157380(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_2167DF1A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171573C8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749E58;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_2171574A8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_2171574EC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77B120;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217157544(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217157560(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217157588(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171575B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77B170)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_2171575FC(void *a1)
{
  *a1 = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_217157648(void *__p)
{
  void *__p = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

void sub_2171576A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_216778F24(v5, *(void **)(v4 + 72), *(void *)(v4 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 72);
    *(void *)(a2 + 24) = *(void *)(v4 + 88);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(v4 + 104);
  *(void *)(a2 + 32) = *(void *)(v4 + 96);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217157754(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21715776C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217157854(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_2171577C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171577E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217157A74(v2 + 56, a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21715783C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_217157854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getArbGeomParams()";
  int v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 168)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 183))
  {
LABEL_5:
    if (*(void *)(a1 + 184)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 152) = v17;
  std::string::operator=((std::string *)(a1 + 160), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 160);
    *(void *)(a2 + 24) = *(void *)(a1 + 176);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a2 + 32) = *(void *)(a1 + 184);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2171579B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  int v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x2171579A0);
}

void sub_217157A54(_Unwind_Exception *a1)
{
}

unsigned char *sub_217157A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getUserProperties()";
  int v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 216)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 231))
  {
LABEL_5:
    if (*(void *)(a1 + 232)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216779094(__p, ".userProperties");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  float v11[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 200) = v17;
  std::string::operator=((std::string *)(a1 + 208), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v7;
  *(void *)(a1 + 240) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a1 + 208), *(void *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 208);
    *(void *)(a2 + 24) = *(void *)(a1 + 224);
  }
  uint64_t v10 = *(void *)(a1 + 240);
  *(void *)(a2 + 32) = *(void *)(a1 + 232);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_217157BD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  int v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v23 - 48, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v23 - 48, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)uint64_t v22 = 2;
  sub_216779094((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x217157BC0);
}

void sub_217157C74(_Unwind_Exception *a1)
{
}

void sub_217157C98(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217157CC0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217157CF0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77B238)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_217157D34(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0x30000000ALL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0x100000007;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0x10000000ALL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0x100000005;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 127;
  *(int64x2_t *)(a1 + 208) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 224) = xmmword_217409FA0;
  *(int64x2_t *)(a1 + 240) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_217156658(a1);
  return a1;
}

void sub_217157DE4(_Unwind_Exception *a1)
{
  sub_2167C5204(v1 + 15);
  uint64_t v5 = (void *)v1[12];
  if (v5)
  {
    v1[13] = v5;
    operator delete(v5);
  }
  sub_217325328(v3, v2, (uint64_t)v1);
  _Unwind_Resume(a1);
}

char *sub_217157E18(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_217157E70(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217157E8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = *(unsigned char **)a1;
  int v4 = *(unsigned char **)(a1 + 8);
  if ((uint64_t)&v4[-*(void *)a1] < 0) {
    size_t v5 = -1;
  }
  else {
    size_t v5 = (size_t)&v4[-*(void *)a1];
  }
  uint64_t v6 = operator new[](v5);
  uint64_t v7 = v6;
  if (v4 != v3) {
    memmove(v6, v3, v4 - v3);
  }
  uint64_t v8 = operator new(0x10uLL);
  void *v8 = &unk_26C776FE0;
  v8[1] = v7;

  return sub_217122B64(a2, (uint64_t)v8);
}

void sub_217157F1C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217157F30(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  sub_2167864B4(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000007;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_21677EA60(a1 + 2, __p, (uint64_t)v8, (v8 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_217157FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_217157FC8@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, void *a2@<X8>)
{
  if (sub_21695DC44(a1))
  {
    return sub_216ABA6B8(a1, a2);
  }
  else
  {
    uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21695DC7C, (uint64_t)&stru_26C74C2C0);
    uint64_t v5 = *result;
    *a2 = *result;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v6;
      }
    }
  }
  return result;
}

void *sub_21715805C(uint64_t a1, uint64_t a2, void *a3, uint64_t (**a4)(void, uint64_t), double a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(a1 + 48) + 16))
  {
    uint64_t v7 = sub_2171489A0(a1, a5);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(&v27, v7);
    uint64_t v9 = sub_21691FA2C(v8);
    if (v9)
    {
      if ((v28 & 4) != 0) {
        uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(&v27);
      }
      else {
        uint64_t v10 = &v27;
      }
      *(_DWORD *)a4 = *(_DWORD *)v10;
    }
    else
    {
      v25[0] = "usdAbc/alembicWriter.cpp";
      v25[1] = "_ExtractWithFallback";
      v25[2] = 2536;
      v25[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExtractWithFallback(const UsdSamples &, do"
               "uble, const UsdPrimDefinition *, const TfToken &, T *) [T = float]";
      char v26 = 0;
      char v12 = v23;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v23);
      if (v24 < 0) {
        char v12 = (void **)v23[0];
      }
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v27, v13, v14, (uint64_t)v19);
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v19, (uint64_t)__p);
      if (v22 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      unint64_t v17 = *a3 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        std::string v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0) {
          std::string v18 = *(const char **)v18;
        }
      }
      else
      {
        std::string v18 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v25, (pxrInternal__aapl__pxrReserved__ *)"Expected type '%s', but found '%s' for %s", v15, v12, v16, v18);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    sub_2168EE084((uint64_t)&v27);
    return (void *)v9;
  }
  if (!a2) {
    return 0;
  }

  return sub_217159144(a2, a3, a4);
}

void sub_217158260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  sub_2168EE084(v29 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_2171582C8(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  char v12 = (_DWORD *)(a1 + 8);
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C77B260;
  sub_2167D02FC((int64x2_t *)(a1 + 56));
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  uint64_t v38 = 0;
  __p[0] = &__p[1];
  int v57 = v13;
  sub_2167898D0((uint64_t *)v58, (const void ***)__p);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  int v61 = 0;
  uint64_t v62 = 1;
  sub_2167877AC((uint64_t)__p, (void *)__p[1]);
  sub_2167A030C(a4, (uint64_t)&v57);
  sub_2167A030C(a5, (uint64_t)&v57);
  sub_2167A030C(a6, (uint64_t)&v57);
  *char v12 = v57;
  uint64_t v55 = v12;
  unint64_t v56 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  char v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    sub_216778A5C((uint64_t)__p);
    sub_216779180(&v38, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_216778E70(&__str, &v53);
    if (v54 < 0) {
      operator delete((void *)v53);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v28 = sub_216779038(exception, (uint64_t)&__str);
    __cxa_throw(v28, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  sub_2167898D0((uint64_t *)&v53, v58);
  if (HIDWORD(v62) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_216779094(__p, "schema");
    sub_216779094(&__str, "AbcGeom_Camera_v1");
    char v47 = __p;
    unint64_t v17 = sub_21677B174((uint64_t **)&v53, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v47);
    std::string::operator=((std::string *)(v17 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    sub_216779094(__p, "schemaObjTitle");
    sub_217158AF0(&__str);
    char v47 = __p;
    std::string v18 = sub_21677B174((uint64_t **)&v53, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v47);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  sub_2167A94C0(&__str, a3, (const void ***)&v53);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v19 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  char v20 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v19;
  if (v20)
  {
    sub_216784EC4(v20);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  uint64_t v22 = v59;
  uint64_t v21 = v60;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v23 = (*(uint64_t (**)(void *, uint64_t))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v23 = v61;
  }
  v48[1] = 0;
  v48[0] = 0;
  char v47 = (void **)v48;
  if (HIDWORD(v62) == 1)
  {
    sub_216779094(__p, "replace");
    sub_216779094(&v46, "1");
    uint64_t v33 = __p;
    char v24 = sub_21677B174((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v33);
    std::string::operator=((std::string *)(v24 + 7), &v46);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v35);
  sub_216779094(&v46, ".geom");
  int v25 = *v12;
  LODWORD(v33) = 1;
  int v34 = v25;
  v32[0] = 2;
  void v32[2] = v23;
  int v30 = 3;
  uint64_t v31 = (uint64_t **)&v47;
  v29[0] = 6;
  v29[2] = v16;
  sub_2167D064C((int64x2_t *)__p, &v35, (uint64_t)&v46, &v33, v32, &v30, v29);
  sub_2167CF624(a1 + 56, (uint64_t)__p);
  __p[0] = &unk_26C749BA8;
  uint64_t v63 = (void **)&v45;
  sub_2167D05B4(&v63);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v44);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v43);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v42);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v41);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v40);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v39);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&__p[1]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v36) {
    sub_216784EC4(v36);
  }
  sub_2167877AC((uint64_t)&v47, v48[0]);
  if (v21) {
    sub_216784EC4(v21);
  }
  sub_2167877AC((uint64_t)v52, v52[1]);
  if (v51 < 0) {
    operator delete(v50);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v53, *((void **)&v53 + 1));
  if (v14) {
    sub_216784EC4(v14);
  }
  if (v60) {
    sub_216784EC4(v60);
  }
  sub_2167877AC((uint64_t)v58, v58[1]);
  return a1;
}

void sub_2171588A4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(__p, a12);
  sub_216779148((std::exception *)&STACK[0x2A0]);
  sub_216778D38((uint64_t)__p);
  if (v14) {
    sub_216784EC4(v14);
  }
  std::string v18 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v19 = (uint64_t)v18;
    sub_2167B7E1C(v13);
    sub_2167A9424(v12);
    sub_21679FA64(v15 - 176, v19);
  }
  else
  {
    sub_2167B7E1C(v13);
    sub_2167A9424(v12);
    sub_21679F9F4(v15 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2171587ECLL);
}

void sub_217158A3C()
{
}

void sub_217158A48()
{
}

void sub_217158A5C()
{
}

void sub_217158A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x2171589C0);
}

void sub_217158AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
}

void sub_217158AC4()
{
}

void sub_217158ACC(_Unwind_Exception *a1)
{
  sub_2167A03C4(v3 - 160);
  sub_2167CF080(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_217158AF0(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_Camera_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_217158B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_217158BD0(uint64_t a1)
{
  *(void *)a1 = &unk_26C77B260;
  *(void *)(a1 + 56) = &unk_26C749BA8;
  uint64_t v2 = (void **)(a1 + 576);
  sub_2167D05B4(&v2);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 304));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 208));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 112));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 64));
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);
}

void sub_217158C84(uint64_t a1)
{
  *(void *)a1 = &unk_26C77B260;
  *(void *)(a1 + 56) = &unk_26C749BA8;
  long long v3 = (void **)(a1 + 576);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 304));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 208));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 112));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 64));
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);
  operator delete(v2);
}

void *sub_217158D3C(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = operator new(0x20uLL);
  *int v4 = &unk_26C77B298;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217158D94(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217158DB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217158DD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217158E08(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77B2E8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217158E4C(void *a1)
{
  *a1 = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_217158E98(void *__p)
{
  void *__p = &unk_26C77A520;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

void sub_217158EF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  std::string v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_216778F24(v5, *(void **)(v4 + 72), *(void *)(v4 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 72);
    *(void *)(a2 + 24) = *(void *)(v4 + 88);
    *(_OWORD *)std::string v5 = v6;
  }
  uint64_t v7 = *(void *)(v4 + 104);
  *(void *)(a2 + 32) = *(void *)(v4 + 96);
  *(void *)(a2 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217158FA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217158FBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::AbcGeom::v12::OCameraSchema::getArbGeomParams((Alembic::AbcGeom::v12::OCameraSchema *)(v2 + 56), a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_217159018(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217159030(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Alembic::AbcGeom::v12::OCameraSchema::getUserProperties((Alembic::AbcGeom::v12::OCameraSchema *)(v2 + 56), a2);
  if (v3)
  {
    sub_216784EC4(v3);
  }
}

void sub_21715908C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171590A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171590D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217159100(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77B3B0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217159144(uint64_t a1, void *a2, uint64_t (**a3)(void, uint64_t))
{
  long long v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    long long v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_2171591B4(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88), a3);
}

void *sub_2171591B4(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  uint64_t result = sub_2168CB120((void *)(a1 + 16), a2);
  if (result)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3];
    return (void *)sub_216D02B70(v8, v7, a3, a4);
  }
  return result;
}

void *sub_217159214(uint64_t a1, void *a2, uint64_t (**a3)(void, uint64_t))
{
  long long v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    long long v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_217159284(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88), a3);
}

void *sub_217159284(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  uint64_t result = sub_2168CB120((void *)(a1 + 16), a2);
  if (result)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3];
    return (void *)sub_216D08BAC(v8, v7, a3, a4);
  }
  return result;
}

uint64_t *sub_2171592E4(uint64_t *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *a1 = a2;
  a1[1] = *a3;
  uint64_t v6 = a3[1];
  a1[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)a1 + 6, a4);
  sub_21698105C((_DWORD *)a1 + 7, a4 + 1);
  a1[4] = 0;
  a1[8] = 0;
  a1[7] = (uint64_t)(a1 + 8);
  a1[5] = 0;
  a1[6] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  uint64_t v13 = 0;
  uint64_t v7 = *a1;
  if (*(void *)(*a1 + 104))
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(*a1 + 104)) + 14)) {
      uint64_t v8 = *(void *)(v7 + 96);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v9) {
    uint64_t v9 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t ***))(*(void *)v8 + 112))(v8, a1 + 3, (uint64_t)v9 + 40, &v12)&& sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v12))
  {
    if ((v13 & 4) != 0) {
      uint64_t v10 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(&v12);
    }
    else {
      uint64_t v10 = v12;
    }
    if (a1 + 10 != (uint64_t *)v10) {
      sub_216ABF1B0(a1 + 10, *v10, v10[1], v10[1] - *v10);
    }
  }
  sub_2168EE084((uint64_t)&v12);
  return a1;
}

void sub_2171594A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  sub_216889A04((void ***)va);
  sub_2167FB780(v5, *(void **)(v2 + 64));
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_21697C414(v3);
  uint64_t v8 = *(std::__shared_weak_count **)(v2 + 16);
  if (v8) {
    sub_216784EC4(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21715950C(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 80);
  sub_216889A04(&v4);
  sub_2167FB780(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void *sub_217159584(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77B3D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171595DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325264(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171595F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217159620(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217159650(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77B428)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_217159694(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  int64x2_t v4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 56) = xmmword_217409FA0;
  int64x2_t v3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 72) = v3;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 127;
  sub_21677CC7C((char *)(a1 + 16), 0, 0, 0);
  *(int64x2_t *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 56) = xmmword_217409FA0;
  *(int64x2_t *)(a1 + 72) = v3;
  return a1;
}

void sub_217159734(_Unwind_Exception *exception_object)
{
  int64x2_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217159750(uint64_t **a1, uint64_t *a2, void *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_217145778(a2, (uint64_t)a3, a4);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  if (v6)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    }
    std::operator+<char>();
    sub_216928738((uint64_t)v13);
    uint64_t v12 = __p;
    uint64_t v7 = sub_21677B174(a1, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v12);
    std::string::operator=((std::string *)(v7 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_2168EE084((uint64_t)v13);
}

void sub_217159858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_2168EE084(v21 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_2171598A8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)a1 = &unk_26C7495D0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  Alembic::Abc::v12::OObject::init(a1, a2, a4, a5, a6);
  return a1;
}

void sub_217159940(_Unwind_Exception *exception_object)
{
  int64x2_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    sub_216784EC4(v4);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_217159968(void **a1)
{
  if (a1)
  {
    sub_217159968(*a1);
    sub_217159968(a1[1]);
    sub_2171449A0(a1 + 5);
    unint64_t v2 = (unint64_t)a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void sub_2171599D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_217138ABC(a2 + 112, *(void **)(a2 + 120));
    int64x2_t v3 = *(atomic_uint **)(a2 + 104);
    if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)(a2 + 40));
    sub_2168CB05C(a2 + 16, *(void **)(a2 + 24));
    operator delete((void *)a2);
  }
}

void sub_217159A70(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  LODWORD(__p) = 0;
  int v28 = 0;
  LODWORD(p_p) = 0;
  LODWORD(v22) = 0;
  sub_217159E04(a4, a5, &__p, &p_p, (uint64_t *)v25);
  LODWORD(__p) = 0;
  int v28 = 0;
  LODWORD(p_p) = 0;
  LODWORD(v22) = 0;
  int v14 = sub_2167ECA64(a4, a5, &__p, &p_p);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    goto LABEL_7;
  }
  sub_216779094(&__p, "_ai_Application");
  p_p = &__p;
  uint64_t v15 = sub_21677B174(v25, (const void **)&__p, (uint64_t)&unk_2174BFD90, (long long **)&p_p);
  std::string::operator=((std::string *)(v15 + 7), (const std::string *)a2);
  if (v29 < 0) {
    operator delete(__p);
  }
LABEL_7:
  time_t v24 = 0;
  time(&v24);
  ctime_r(&v24, (char *)&__p);
  size_t v16 = strlen((const char *)&__p);
  if (v16 && *((unsigned char *)&__p + v16 - 1) == 10) {
    *((unsigned char *)&__p + v16 - 1) = 0;
  }
  sub_216779094(&p_p, "_ai_DateWritten");
  sub_216779094(&__str, (char *)&__p);
  p_p_p = &p_p;
  unint64_t v17 = sub_21677B174(v25, (const void **)&p_p, (uint64_t)&unk_2174BFD90, (long long **)&p_p_p);
  std::string::operator=((std::string *)(v17 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(p_p);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(a3 + 23))
  {
    goto LABEL_20;
  }
  sub_216779094(&p_p, "_ai_Description");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  std::string v18 = sub_21677B174(v25, (const void **)&p_p, (uint64_t)&unk_2174BFD90, (long long **)&__str);
  std::string::operator=((std::string *)(v18 + 7), (const std::string *)a3);
  if (v23 < 0) {
    operator delete(p_p);
  }
LABEL_20:
  if (a7 > 0.0)
  {
    sub_216779094(&p_p, "_ai_DCC_FPS");
    std::to_string(&__str, a7);
    p_p_p = &p_p;
    uint64_t v19 = sub_21677B174(v25, (const void **)&p_p, (uint64_t)&unk_2174BFD90, (long long **)&p_p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v23 < 0) {
      operator delete(p_p);
    }
  }
  LODWORD(p_p) = 3;
  uint64_t v22 = v25;
  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
  LODWORD(__str.__r_.__value_.__r.__words[1]) = v14;
  sub_217159F14(a6, a1, &p_p, &__str);
  sub_2167877AC((uint64_t)v25, v25[1]);
}

void sub_217159D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_2167877AC((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void sub_217159E04(_DWORD *a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, _DWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (const void **)v11;
  int v12 = 2;
  sub_2167898D0((uint64_t *)v13, &v10);
  v13[3] = 0;
  int v14 = 0;
  int v15 = 0;
  uint64_t v16 = 1;
  sub_2167877AC((uint64_t)&v10, v11[0]);
  sub_2167A030C(a1, (uint64_t)&v12);
  sub_2167A030C(a2, (uint64_t)&v12);
  sub_2167A030C(a3, (uint64_t)&v12);
  sub_2167A030C(a4, (uint64_t)&v12);
  sub_2167898D0(a5, v13);
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_2167877AC((uint64_t)v13, v13[1]);
}

void sub_217159EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_217159F14(uint64_t a1, long long *a2, _DWORD *a3, _DWORD *a4)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  v13[0] = 0;
  v13[1] = 0;
  int v12 = (const void **)v13;
  int v14 = 2;
  sub_2167898D0((uint64_t *)v15, &v12);
  v15[3] = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 1;
  sub_2167877AC((uint64_t)&v12, v13[0]);
  sub_2167A030C(a3, (uint64_t)&v14);
  sub_2167A030C(a4, (uint64_t)&v14);
  *(_DWORD *)a1 = v14;
  int v12 = (const void **)a1;
  v13[0] = "OArchive::OArchive( iFileName)";
  Alembic::AbcCoreOgawa::v12::WriteArchive::operator()(a2, v15, &v11);
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  if (v9)
  {
    sub_216784EC4(v9);
    if (*((void *)&v11 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  sub_2167877AC((uint64_t)v15, v15[1]);
  return a1;
}

void sub_21715A040(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v6 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v7 = (uint64_t)v6;
    sub_2167A13A4(v4);
    sub_21679FA64((uint64_t)va, v7);
  }
  else
  {
    sub_2167A13A4(v4);
    sub_21679F9F4((uint64_t)va, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21715A00CLL);
}

void sub_21715A08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2167A03C4((uint64_t)va);
  uint64_t v9 = *(std::__shared_weak_count **)(v6 + 40);
  if (v9) {
    sub_216784EC4(v9);
  }
  if (*(char *)(v6 + 31) < 0) {
    operator delete(*v7);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::~UsdXpcFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *this)
{
  uint64_t v7 = (void **)((char *)this + 48);
  sub_216889A04(&v7);
  uint64_t v2 = *((void *)this + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 4);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::UsdXpcFileFormatTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "xpc", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "usd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "obj", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "stl", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "ply", 0);
  uint64_t v3 = *this;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v21 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v22 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v22 = v6;
    }
  }
  uint64_t v7 = this[2];
  char v23 = v7;
  if ((v7 & 7) != 0)
  {
    long long v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      char v23 = v8;
    }
  }
  uint64_t v9 = this[3];
  time_t v24 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      time_t v24 = v10;
    }
  }
  long long v11 = this[4];
  int v25 = v11;
  if ((v11 & 7) != 0)
  {
    int v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      int v25 = v12;
    }
  }
  uint64_t v13 = this[5];
  char v26 = v13;
  if ((v13 & 7) != 0)
  {
    int v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      char v26 = v14;
    }
  }
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  int v15 = (atomic_uint *)operator new(0x30uLL);
  unint64_t v16 = 0;
  this[6] = v15;
  this[7] = v15;
  this[8] = v15 + 12;
  do
  {
    int v17 = (&v21)[v16 / 2];
    *(void *)&v15[v16] = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v15[v16] &= 0xFFFFFFFFFFFFFFF8;
    }
    v16 += 2;
  }
  while (v16 != 12);
  this[7] = v15 + 12;
  for (uint64_t i = 5; i != -1; --i)
  {
    uint64_t v19 = (&v21)[i];
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *)this;
}

void sub_21715A430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v19 = 40;
  while (1)
  {
    uint64_t v20 = *(void *)(&a12 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_21715A52C()
{
  v0 = sub_21715B2FC();

  return sub_21715B428(v0);
}

pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::UsdXpcFileFormat(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *this)
{
  *(void *)&long long v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v2) {
    uint64_t v2 = (uint64_t *)sub_21715B58C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  }
  uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v3) {
    uint64_t v3 = sub_21715B58C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  }
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v4) {
    uint64_t v4 = sub_21715B58C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  }
  uint64_t v5 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v5) {
    uint64_t v5 = sub_21715B58C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  }
  if (((unint64_t)v5[3] & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)(((unint64_t)v5[3] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v5);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v7 = *(_OWORD *)EmptyString;
    uint64_t v22 = EmptyString[2];
    long long __dst = v7;
  }
  long long v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v8) {
    long long v8 = sub_21715B58C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  }
  if (((unint64_t)v8[4] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v9 = (uint64_t *)(((unint64_t)v8[4] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  }
  if (*((char *)v9 + 23) < 0)
  {
    sub_216778F24(&v23, (void *)*v9, v9[1]);
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    uint64_t v24 = v9[2];
    long long v23 = v10;
  }
  long long v11 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v11) {
    long long v11 = sub_21715B58C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  }
  if (((unint64_t)v11[5] & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v12 = (uint64_t *)(((unint64_t)v11[5] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v11);
  }
  if (*((char *)v12 + 23) < 0)
  {
    sub_216778F24(&v25, (void *)*v12, v12[1]);
  }
  else
  {
    long long v13 = *(_OWORD *)v12;
    uint64_t v26 = v12[2];
    long long v25 = v13;
  }
  unint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v16;
  char v20 = 0;
  unint64_t v16 = (char *)operator new(0x48uLL);
  int v17 = v16;
  uint64_t v18 = v16 + 72;
  int v17 = sub_21695F6C0((uint64_t)&v18, &__dst, &v27, v16);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (long long **)&v16);
  uint64_t v19 = &v16;
  sub_216782F20((void ***)&v19);
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    if (*((char *)&v26 + i + 7) < 0) {
      operator delete(*(void **)((char *)&v25 + i));
    }
  }
  *(void *)this = &unk_26C77B450;
  return this;
}

void sub_21715A7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::~UsdXpcFileFormat(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::CanRead()
{
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::CallbackFromXPC(int a1, xpc_object_t xdict)
{
  string = (char *)xpc_dictionary_get_string(xdict, "consume");
  if (string)
  {
    sub_216779094(&__p, string);
    uint64_t v4 = (char *)sandbox_extension_issue_file();
    remote_connection = xpc_dictionary_get_remote_connection(xdict);
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    long long v7 = reply;
    if (v4)
    {
      xpc_dictionary_set_string(reply, "consumeToken", v4);
      free(v4);
    }
    xpc_connection_send_message(remote_connection, v7);
    if (v9 < 0) {
      operator delete(__p);
    }
  }
}

void sub_21715A970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::Read(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3)
{
  uint64_t v6 = xpc_connection_create("com.apple.USDLib.FormatLoader", 0);
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 3221225472;
  handler[2] = sub_21715AC9C;
  handler[3] = &unk_2642947B8;
  handler[4] = a1;
  xpc_connection_set_event_handler(v6, handler);
  xpc_connection_resume(v6);
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  long long v8 = v7;
  if (*(char *)(a3 + 23) >= 0) {
    char v9 = (const char *)a3;
  }
  else {
    char v9 = *(const char **)a3;
  }
  xpc_dictionary_set_string(v7, "filename", v9);
  long long v10 = (char *)sandbox_extension_issue_file();
  if (v10) {
    xpc_dictionary_set_string(v8, "extensionToken", v10);
  }
  free(v10);
  xpc_object_t v11 = xpc_connection_send_message_with_reply_sync(v6, v8);
  if (!v11
    || (int v12 = v11, v13 = MEMORY[0x21D448F10](), v14 = MEMORY[0x263EF8708], v13 != MEMORY[0x263EF8708])
    || (string = xpc_dictionary_get_string(v12, "error")) != 0 && *string
    || (xpc_object_t value = xpc_dictionary_get_value(v12, "object")) == 0
    || (xpc_object_t v19 = value, MEMORY[0x21D448F10]() != v14))
  {
    xpc_release(v8);
    return 0;
  }
  char v20 = (xpc_object_t *)operator new(0x10uLL);
  serialize::Serializer::Serializer(v20);
  v20[1] = v19;
  uint64_t v21 = serialize::Serializer::load(v20);
  operator delete(v20);
  xpc_release(v8);
  if (!v21) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::XpcConverter::XpcConverter(v26);
  pxrInternal__aapl__pxrReserved__::XpcConverter::makeUsdStage((serialize::Prim *)v21, &v25);
  (*(void (**)(char *))(*(void *)v21 + 16))(v21);
  BOOL v15 = v25 != 0;
  if (v25)
  {
    sub_216ABBA60(&v23, (uint64_t *)&v25);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, &v23);
    uint64_t v22 = v24;
    if (v24)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
  }
  sub_216ABB798(&v25);
  pxrInternal__aapl__pxrReserved__::XpcConverter::~XpcConverter((pxrInternal__aapl__pxrReserved__::XpcConverter *)v26);
  return v15;
}

void sub_21715AC1C(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  if (a3)
  {
    if (atomic_fetch_add_explicit(a3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a3 + 8))(a3);
    }
  }
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  pxrInternal__aapl__pxrReserved__::XpcConverter::~XpcConverter((pxrInternal__aapl__pxrReserved__::XpcConverter *)va1);
  _Unwind_Resume(a1);
}

void sub_21715AC9C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = MEMORY[0x21D448F10](a2);
    if (v3 == MEMORY[0x263EF8708])
    {
      pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::CallbackFromXPC(v3, a2);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::ReadFromString(uint64_t a1, uint64_t a2, const std::string *a3)
{
  sub_21715AE48(v5, a3, 24);
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x263F8C318] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](&v7);
  return 1;
}

uint64_t *sub_21715AE48(uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  uint64_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  long long v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  uint64_t v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  sub_216D8E974(v9, a2, a3);
  return a1;
}

void sub_21715B0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::WriteToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7) {
    uint64_t v7 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v12);
  uint64_t v8 = sub_216979288(&v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 88))(v8, a2, a3, a4);
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

void sub_21715B1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::WriteToStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7) {
    uint64_t v7 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v12);
  uint64_t v8 = sub_216979288(&v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 80))(v8, a2, a3, a4);
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

void sub_21715B2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21715B2FC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B76D4C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21715B3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_21715B428(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C77B508;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21715B4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21715B4D8(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_21715B500@<X0>(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat **a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::UsdXpcFileFormat(v2);
  *a1 = v2;
  char v4 = 0;
  return sub_21715B55C(&v4);
}

void sub_21715B548(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_21715B55C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

atomic_uint **sub_21715B58C(atomic_ullong *a1)
{
  uint64_t result = sub_21715B5D4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::~UsdXpcFileFormatTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_21715B5D4()
{
  v0 = (atomic_uint **)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::UsdXpcFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_21715B604(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::converterUtils::makeValidIdentifier@<D0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  memset(&v25, 0, sizeof(v25));
  BOOL v3 = *((char *)a1 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  if (!v4) {
    goto LABEL_43;
  }
  unint64_t v6 = 0;
  uint64_t v7 = MEMORY[0x263EF8318];
  do
  {
    if (v3) {
      uint64_t v8 = (uint64_t *)*a1;
    }
    else {
      uint64_t v8 = a1;
    }
    unsigned int v9 = *((char *)v8 + v6);
    if ((v9 & 0x80000000) != 0) {
      int v10 = __maskrune(v9, 0x500uLL);
    }
    else {
      int v10 = *(_DWORD *)(v7 + 4 * v9 + 60) & 0x500;
    }
    if (v10)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = (uint64_t *)*a1;
      }
      std::string::push_back(&v25, *((unsigned char *)v11 + v6));
    }
    else
    {
      std::string::append(&v25, "_");
    }
    ++v6;
    BOOL v3 = *((char *)a1 + 23) < 0;
    unint64_t v12 = *((unsigned __int8 *)a1 + 23);
    if ((v12 & 0x80u) != 0) {
      unint64_t v12 = a1[1];
    }
  }
  while (v6 < v12);
  uint64_t v13 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v25;
  }
  else {
    uint64_t v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  int v15 = v14->__r_.__value_.__s.__data_[0];
  if ((v15 & 0x80000000) == 0 && (*(_DWORD *)(v7 + 4 * v15 + 60) & 0x400) != 0)
  {
    std::operator+<char>();
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::string v25 = v24;
    uint64_t v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v25;
  }
  int v16 = v13->__r_.__value_.__s.__data_[0];
  if (!v13->__r_.__value_.__s.__data_[0]
    || (v16 - 48) < 0xA
    || v16 != 95 && (v16 & 0xFFFFFFDF) - 65 > 0x19)
  {
    goto LABEL_43;
  }
  do
  {
    int v18 = v13->__r_.__value_.__s.__data_[0];
    uint64_t v13 = (std::string *)((char *)v13 + 1);
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (!v17)
  {
    double result = *(double *)&v25.__r_.__value_.__l.__data_;
    *a2 = v25;
  }
  else
  {
LABEL_43:
    sub_216779094(a2, "defaultIdentifier");
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  return result;
}

void sub_21715B808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath(pxrInternal__aapl__pxrReserved__::converterUtils::Asset *this@<X0>, std::string *a2@<X8>)
{
  sub_216779094(&v11, "/");
  unint64_t v6 = (const std::string::value_type *)*((void *)this + 1);
  uint64_t v5 = (char *)this + 8;
  uint64_t v4 = v6;
  int v7 = v5[23];
  if (v7 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v4;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = v5[23];
  }
  else {
    std::string::size_type v9 = *((void *)v5 + 1);
  }
  int v10 = std::string::append(&v11, v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_21715B8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getMaterialsPath@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = this + 8;
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5)) {
      return sub_216778F24((unsigned char *)a2, *(void **)(v2 + 32), *(void *)(v2 + 40));
    }
  }
  else if (*((unsigned char *)this + 55))
  {
LABEL_16:
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(void *)(a2 + 16) = *((void *)v4 + 2);
    return this;
  }
  pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath((pxrInternal__aapl__pxrReserved__::converterUtils::Asset *)this, &v15);
  uint64_t v5 = std::string::append(&v15, "/Materials");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
  *(void *)int v16 = v5->__r_.__value_.__l.__size_;
  *(void *)&v16[7] = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  char v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*(void **)v4);
  }
  uint64_t v8 = *(void *)v16;
  *(void *)(v2 + 32) = v6;
  *(void *)(v2 + 40) = v8;
  *(void *)(v2 + 47) = *(void *)&v16[7];
  *(unsigned char *)(v2 + 55) = v7;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70((uint64_t *)v2);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v15, v4);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v16, "Scope");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (void **)v16, (uint64_t)&v10);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  if ((v16[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v15.__r_.__value_.__r.__words + 1);
  this = sub_21697C414(&v15);
  if ((*(char *)(v2 + 55) & 0x80000000) == 0) {
    goto LABEL_16;
  }
  return sub_216778F24((unsigned char *)a2, *(void **)(v2 + 32), *(void *)(v2 + 40));
}

void sub_21715BA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getGeomPath@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = this + 14;
  if (*((char *)this + 79) < 0)
  {
    if (*((void *)this + 8)) {
      return sub_216778F24((unsigned char *)a2, *(void **)(v2 + 56), *(void *)(v2 + 64));
    }
  }
  else if (*((unsigned char *)this + 79))
  {
LABEL_16:
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(void *)(a2 + 16) = *((void *)v4 + 2);
    return this;
  }
  pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath((pxrInternal__aapl__pxrReserved__::converterUtils::Asset *)this, &v15);
  uint64_t v5 = std::string::append(&v15, "/Geom");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
  *(void *)int v16 = v5->__r_.__value_.__l.__size_;
  *(void *)&v16[7] = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  char v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*(void **)v4);
  }
  uint64_t v8 = *(void *)v16;
  *(void *)(v2 + 56) = v6;
  *(void *)(v2 + 64) = v8;
  *(void *)(v2 + 71) = *(void *)&v16[7];
  *(unsigned char *)(v2 + 79) = v7;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70((uint64_t *)v2);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v15, v4);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v16, "Scope");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (void **)v16, (uint64_t)&v10);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  if ((v16[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v15.__r_.__value_.__r.__words + 1);
  this = sub_21697C414(&v15);
  if ((*(char *)(v2 + 79) & 0x80000000) == 0) {
    goto LABEL_16;
  }
  return sub_216778F24((unsigned char *)a2, *(void **)(v2 + 56), *(void *)(v2 + 64));
}

void sub_21715BCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Asset::makeUsdStage(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  sub_216779094(&__p, ".usda");
  *(_OWORD *)&v10.__r_.__value_.__r.__words[1] = 0uLL;
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v10, &v9);
  sub_2167877AC((uint64_t)&v10, (void *)v10.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_216ABBA60((uint64_t *)&__p, &v9);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&__p, 0, (pxrInternal__aapl__pxrReserved__ **)&v10);
  uint64_t v2 = *this;
  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v10.__r_.__value_.__r.__words[0];
  v10.__r_.__value_.__r.__words[0] = 0;
  sub_2168BD378((int)this, v2);
  sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v10);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
  }
  sub_2170519EC((uint64_t *)&__p, (uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v10, "Y");
  pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis((uint64_t *)&__p, &v10);
  if ((v10.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string::size_type v4 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70((uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath((pxrInternal__aapl__pxrReserved__::converterUtils::Asset *)this, &v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(v7, &v10);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v6, "Xform");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7, (void **)&v6.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if ((v6.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
  sub_21697C414(v7);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v7, "name");
  v10.__r_.__value_.__l.__size_ = (std::string::size_type)&off_26C750BB8;
  sub_21691B31C((unsigned int **)&v10, (uint64_t)(this + 1));
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)v7, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v10);
}

void sub_21715C12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21715C328(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  v9[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v9[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v9, a4);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadataByDictKey(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_21715C3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdMaterial(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  sub_2170519EC(&v8, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v10, a1);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define(&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
  sub_2168BD80C((uint64_t *)&v7);
  pxrInternal__aapl__pxrReserved__::converterUtils::Material::_createSurfaceShader(a1, a3, (uint64_t *)&v7, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v8);
  sub_216E10FB8(&v7);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v8);
}

void sub_21715C4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Material::_createSurfaceShader(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2@<X1>, uint64_t *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  sub_216D1E2AC((uint64_t)a2, &v32);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v32);
  if (*((char *)String + 23) < 0)
  {
    sub_216778F24(__dst, (void *)*String, String[1]);
  }
  else
  {
    long long v9 = *(_OWORD *)String;
    uint64_t v31 = String[2];
    *(_OWORD *)long long __dst = v9;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32.__vftable + 1);
  sub_21697C414(&v32);
  sub_2170519EC(&v28, a3);
  if (v31 >= 0) {
    size_t v10 = HIBYTE(v31);
  }
  else {
    size_t v10 = (size_t)__dst[1];
  }
  int v11 = __p;
  sub_2167940B4((uint64_t)__p, v10 + 14);
  if (v20 < 0) {
    int v11 = (void **)__p[0];
  }
  if (v10)
  {
    if (v31 >= 0) {
      int v12 = __dst;
    }
    else {
      int v12 = (void **)__dst[0];
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/surfaceShader");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v26, __p);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(&v28, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v32);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v32.__type_name;
  if (v32.__type_name) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32.__type_name + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(atomic_ullong **)(a1 + 32);
  *(void *)(a1 + 32) = type_name;
  if (v14) {
    sub_216D16E0C(v14);
  }
  sub_2169C487C((int *)(a1 + 40), &v33);
  sub_2169C48D4((int *)(a1 + 44), &v34);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_21697C414(&v26);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = v29;
  if (v29 && atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "UsdPreviewSurface");
  int v16 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(a1 + 24);
  v32.__vftable = (std::type_info_vtbl *)__p[0];
  v32.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70 + 1;
  if (((uint64_t)__p[0] & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32.__vftable = (std::type_info_vtbl *)((unint64_t)v32.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(v16, &v32, 0, (uint64_t)v21);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  sub_2168EE084((uint64_t)&v32);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v17) {
    uint64_t v17 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(a2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v17 + 216), (uint64_t)&v32);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI(v16, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v28, "surface");
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v18);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ConnectToSource(&v32, __p, &v28, 2, v18);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_21697C414(&v33);
  if (v32.__type_name) {
    sub_216D16E0C((atomic_ullong *)v32.__type_name);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a4, v16);
  *(void *)a4 = &unk_26C76DDF0;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21715C914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdUVTexture(uint64_t a1, const void **a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a4, uint64_t *a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  size_t v10 = &v22;
  sub_2167940B4((uint64_t)&v22, v9 + 10);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v10 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v11 = a2;
    }
    else {
      int v11 = *a2;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "/uvReader_");
  int v12 = *(char *)(a3 + 175);
  if (v12 >= 0) {
    int v13 = (const std::string::value_type *)(a3 + 152);
  }
  else {
    int v13 = *(const std::string::value_type **)(a3 + 152);
  }
  if (v12 >= 0) {
    std::string::size_type v14 = *(unsigned __int8 *)(a3 + 175);
  }
  else {
    std::string::size_type v14 = *(void *)(a3 + 160);
  }
  uint64_t v15 = std::string::append(&v22, v13, v14);
  std::type_info v16 = *(std::type_info *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v31 = v15->__r_.__value_.__r.__words[2];
  std::type_info v30 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(v29, &v30);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30.__vftable);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = sub_2170519EC((uint64_t *)&v30, a5);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v29, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v28);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v30.__type_name;
  if (v30.__type_name
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v30.__type_name + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(void *)type_name + 8))(type_name);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v22, "UsdPrimvarReader_float2");
  v30.__vftable = (std::type_info_vtbl *)v22.__r_.__value_.__r.__words[0];
  v30.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70 + 1;
  if ((v22.__r_.__value_.__s.__data_[0] & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30.__vftable = (std::type_info_vtbl *)((unint64_t)v30.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v28, &v30, 0, (uint64_t)v23);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_21697C414(&v25);
  if (v24) {
    sub_216D16E0C(v24);
  }
  sub_2168EE084((uint64_t)&v30);
  if ((v22.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(_DWORD *)(a3 + 64))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v22, "varname");
    unsigned int v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v19) {
      unsigned int v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 88), (uint64_t)&v30);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v21);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v22, "frame:stPrimvarName");
  char v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v20) {
    char v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v20 + 88), (uint64_t)&v30);
  if ((v22.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_21715D640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v36 - 176));
  sub_21697B754((_DWORD *)(v36 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_21715D98C(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798D948, memory_order_acquire) & 1) == 0)
  {
    int v2 = a1;
    int v3 = __cxa_guard_acquire(&qword_26798D948);
    a1 = v2;
    if (v3)
    {
      std::string::size_type v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v4) {
        std::string::size_type v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      qword_26798D910[0] = *((void *)v4 + 32);
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v5) {
        uint64_t v5 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      qword_26798D918 = *((void *)v5 + 35);
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v6) {
        uint64_t v6 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      qword_26798D920 = *((void *)v6 + 7);
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v7) {
        uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      qword_26798D928 = *((void *)v7 + 35);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v8) {
        uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      qword_26798D930 = *((void *)v8 + 7);
      size_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v9) {
        size_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      qword_26798D938 = *((void *)v9 + 7);
      size_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v10) {
        size_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      qword_26798D940 = *((void *)v10 + 7);
      __cxa_guard_release(&qword_26798D948);
      a1 = v2;
    }
  }
  return qword_26798D910[a1];
}

void sub_21715DAFC(_Unwind_Exception *a1)
{
}

char *sub_21715DB14(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798D9F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798D9F8))
  {
    sub_216779094(qword_26798D950, "normal");
    sub_216779094(qword_26798D968, "diffuseColor");
    sub_216779094(qword_26798D980, "opacity");
    sub_216779094(qword_26798D998, "emissiveColor");
    sub_216779094(qword_26798D9B0, "occlusion");
    sub_216779094(qword_26798D9C8, "metallic");
    sub_216779094(qword_26798D9E0, "roughness");
    __cxa_atexit((void (*)(void *))sub_21715DE34, 0, &dword_216758000);
    __cxa_guard_release(&qword_26798D9F8);
  }
  return (char *)&qword_26798D950[3 * a1];
}

void sub_21715DC38(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeConstInput(pxrInternal__aapl__pxrReserved__::converterUtils::Material *this, serialize::MapInput *a2, pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a3)
{
  uint64_t v11 = sub_21715D98C(*((_DWORD *)a2 + 16));
  if (*((char *)a2 + 103) < 0) {
    uint64_t v5 = *((void *)a2 + 11);
  }
  else {
    uint64_t v5 = *((unsigned __int8 *)a2 + 103);
  }
  if (v5 == 3)
  {
    int v6 = *((_DWORD *)a2 + 19);
    uint64_t v9 = *(void *)((char *)a2 + 68);
    int v10 = v6;
    sub_21715DB14(*((_DWORD *)a2 + 16));
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v7);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::converterUtils::Material *)((char *)this + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v11, (uint64_t)v8);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  }
  sub_21715DB14(*((_DWORD *)a2 + 16));
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::converterUtils::Material *)((char *)this + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v11, (uint64_t)v8);
  LODWORD(v7) = *((_DWORD *)a2 + 17);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
}

void sub_21715DDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_21715DE34()
{
  for (uint64_t i = 0; i != -168; i -= 24)
  {
    if (*((char *)&unk_26798D950 + i + 167) < 0) {
      operator delete(*(void **)((char *)&unk_26798D950 + i + 144));
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::XpcConverter::XpcConverter(void *this)
{
  this[3] = 0;
  this[2] = 0;
  *this = &unk_26C77B548;
  this[1] = this + 2;
  return this;
}

{
  this[3] = 0;
  this[2] = 0;
  *this = &unk_26C77B548;
  this[1] = this + 2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::~XpcConverter(pxrInternal__aapl__pxrReserved__::XpcConverter *this)
{
  *(void *)this = &unk_26C77B548;
  sub_21715FDF0((uint64_t)this + 8, *((void **)this + 2));
}

{
  *(void *)this = &unk_26C77B548;
  sub_21715FDF0((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C77B548;
  sub_21715FDF0((uint64_t)this + 8, *((void **)this + 2));

  operator delete(this);
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::createMaterial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (const void **)(a2 + 16);
  sub_21715F838((char *)__p, (long long *)(a2 + 16));
  uint64_t v8 = (uint64_t *)(a3 + 8);
  uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 + 8);
  if (v7)
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(a3 + 8)) + 14)) {
      uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a3;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  unsigned int v19 = v7;
  sub_2168BD80C((uint64_t *)&v19);
  pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdMaterial((uint64_t)__p, (uint64_t *)&v19, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v20);
  sub_216E10FB8(&v19);
  uint64_t v9 = *(serialize::MapInput ***)(a2 + 40);
  int v10 = *(serialize::MapInput ***)(a2 + 48);
  while (v9 != v10)
  {
    uint64_t v11 = (uint64_t)*v9;
    int v12 = *((_DWORD *)*v9 + 2);
    if (v12 == 8)
    {
      uint64_t v13 = *v8;
      if (*v8)
      {
        if (*(unsigned char *)(sub_216850B68((uint64_t *)(a3 + 8)) + 14)) {
          uint64_t v13 = *(void *)a3;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      uint64_t v18 = v13;
      sub_2168BD80C(&v18);
      pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdUVTexture((uint64_t)__p, v6, v11, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v20, &v18);
    }
    if (v12 == 7) {
      pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeConstInput((pxrInternal__aapl__pxrReserved__::converterUtils::Material *)__p, *v9, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v20);
    }
    ++v9;
  }
  uint64_t v27 = v6;
  std::string::size_type v14 = sub_21715FE9C((uint64_t **)(a1 + 8), v6, (uint64_t)&unk_2174BFD90, (long long **)&v27);
  uint64_t v15 = v14;
  uint64_t v16 = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (atomic_ullong *)v14[8];
  unsigned char v15[8] = v16;
  if (v17) {
    sub_216D16E0C(v17);
  }
  sub_2169C487C((int *)v15 + 18, &v22);
  sub_2169C48D4((int *)v15 + 19, &v23);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v20);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v26);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21715E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)va);
  sub_21715E1BC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21715E1BC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::createMesh(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v7[6] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 72) != *(void *)(a2 + 64))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(v7, a2 + 16);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
    sub_21697C414(v7);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v5, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v6);
    v5[3] = 0;
    v5[0] = &unk_26C76D128;
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v6, (uint64_t)v7);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
      sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
}

void sub_21715EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168F83DC((uint64_t)&a29);
  sub_2168F83DC((uint64_t)&a35);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)(v35 - 200));
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)(v35 - 168));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *sub_21715EEFC@<X0>(int a1@<W0>, atomic_uint **a2@<X8>)
{
  if (a1 == 3)
  {
    double result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!result) {
      double result = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    std::string::size_type v4 = (atomic_uint *)*((void *)result + 40);
  }
  else if (a1 == 1)
  {
    double result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!result) {
      double result = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    std::string::size_type v4 = (atomic_uint *)*((void *)result + 145);
  }
  else
  {
    double result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!result) {
      double result = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    std::string::size_type v4 = (atomic_uint *)*((void *)result + 153);
  }
  *a2 = v4;
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::createPointCloud(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v31, a2 + 16);
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Define(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31.__vftable + 1);
  sub_21697C414(&v31);
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  sub_21715F950((unint64_t *)&v27, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2));
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  while (v6 != v7)
  {
    int v8 = *(_DWORD *)(v6 + 8);
    v31.__vftable = *(std::type_info_vtbl **)v6;
    LODWORD(v31.__type_name) = v8;
    sub_21715FA00((uint64_t)&v27, (uint64_t *)&v31);
    v6 += 12;
  }
  v31.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)off_26C74F110;
  uint64_t v9 = operator new(0x30uLL);
  long long v10 = v28;
  *(_OWORD *)uint64_t v9 = v27;
  *((_OWORD *)v9 + 1) = v10;
  uint64_t v11 = v29;
  *((void *)v9 + 4) = v29;
  if (v11)
  {
    int v12 = (atomic_ullong *)(v11 - 16);
    if (*((void *)v9 + 3)) {
      int v12 = (atomic_ullong *)*((void *)v9 + 3);
    }
    atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
  }
  atomic_store(0, (unsigned int *)v9 + 10);
  v31.__vftable = (std::type_info_vtbl *)v9;
  atomic_fetch_add_explicit((atomic_uint *volatile)v9 + 10, 1u, memory_order_relaxed);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v30, &v31, 0, (uint64_t)v22);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  if (v23) {
    sub_216D16E0C(v23);
  }
  sub_2168EE084((uint64_t)&v31);
  if (*(void *)(a2 + 96) != *(void *)(a2 + 88))
  {
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v13) {
      uint64_t v13 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::CreateDisplayColorPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v30, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v13 + 1224), -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v31);
    if ((void)v27) {
      sub_2168F845C(&v27);
    }
    sub_21715F950((unint64_t *)&v27, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2));
    uint64_t v14 = *(void *)(a2 + 88);
    uint64_t v15 = *(void *)(a2 + 96);
    while (v14 != v15)
    {
      int v16 = *(_DWORD *)(v14 + 8);
      char v20 = *(void **)v14;
      int v21 = v16;
      sub_21715FA00((uint64_t)&v27, (uint64_t *)&v20);
      v14 += 12;
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  if (*(char *)(a2 + 135) < 0)
  {
    if (!*(void *)(a2 + 120)) {
      goto LABEL_30;
    }
  }
  else if (!*(unsigned char *)(a2 + 135))
  {
    goto LABEL_30;
  }
  v31.__vftable = (std::type_info_vtbl *)(a2 + 112);
  uint64_t v17 = sub_21715FE9C((uint64_t **)(a1 + 8), (const void **)(a2 + 112), (uint64_t)&unk_2174BFD90, (long long **)&v31);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v20, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v17 + 7));
  char v20 = &unk_26C76DAD0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v31, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v30);
  uint64_t v32 = 0;
  v31.__vftable = (std::type_info_vtbl *)&unk_26C76DC78;
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v18) {
    uint64_t v18 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  unsigned int v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v19) {
    unsigned int v19 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v31, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v20, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v18 + 40), v19);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v31);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v20);
LABEL_30:
  sub_2168F83DC((uint64_t)&v27);
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::~UsdGeomPoints((pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)v30);
}

void sub_21715F358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(v2 - 88));
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)va);
  sub_2168F83DC((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::~UsdGeomPoints((pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)va2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::makeUsdStage(serialize::Prim *a1@<X1>, void *a2@<X8>)
{
  if (*((_DWORD *)a1 + 2) == 2)
  {
    if (*((char *)a1 + 87) < 0)
    {
      sub_216778F24(__p, *((void **)a1 + 8), *((void *)a1 + 9));
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)a1 + 4);
      uint64_t v4 = *((void *)a1 + 10);
    }
    sub_21715FD9C((uint64_t)&v5, (uint64_t *)__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::converterUtils::Asset::makeUsdStage(&v5);
  }
  *a2 = 0;
}

void sub_21715F70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_21715F7D4(v32 - 144);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_21715F7D4(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  return sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

char *sub_21715F838(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  int v5 = 1;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
  uint64_t v9 = 0;
  *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5) = &unk_26C76DDF0;
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return __dst;
}

void sub_21715F92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D16AD8((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void sub_21715F950(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    int v7 = sub_2168FD4A4((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_2168FD4A4((uint64_t)a1, a2);
    int v7 = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = (char *)v6 + v8;
        uint64_t v10 = *(void *)(v3 + v8);
        *((_DWORD *)v9 + 2) = *(_DWORD *)(v3 + v8 + 8);
        *(void *)uint64_t v9 = v10;
        v8 += 12;
      }
      while (12 * v5 != v8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_21715FA00(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v10 = v9;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v11 = *(uint64_t **)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    uint64_t v14 = sub_2168FD4A4(a1, v13);
    uint64_t v15 = v14;
    if (v4)
    {
      uint64_t v16 = 12 * v4;
      uint64_t v17 = v14;
      do
      {
        uint64_t v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        void *v17 = v18;
        uint64_t v17 = (void *)((char *)v17 + 12);
        uint64_t v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    uint64_t v19 = *a2;
    char v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(void *)char v20 = v19;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  uint64_t v22[2] = 433;
  v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <pxrInternal__aapl__pxrReserved__::GfVec3f>]";
  char v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v21 = 4;
    }
    else {
      int v21 = 3;
    }
  }
  else
  {
    int v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

void sub_21715FB98(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    int v7 = sub_2168FACB0((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = sub_2168FACB0((uint64_t)a1, a2);
    int v7 = v6;
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        v6[i] = *(void *)(v3 + i * 8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_21715FC34(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(void *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(uint64_t **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_2168FACB0(a1, v11);
    unint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 8 * v4;
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <pxrInternal__aapl__pxrReserved__::GfVec2f>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_21715FD9C(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  pxrInternal__aapl__pxrReserved__::converterUtils::makeValidIdentifier(a2, (std::string *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_21715FDDC(_Unwind_Exception *a1)
{
  sub_216E10FB8(v1);
  _Unwind_Resume(a1);
}

void sub_21715FDF0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21715FDF0(a1, *a2);
    sub_21715FDF0(a1, a2[1]);
    sub_21715FE4C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21715FE4C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *sub_21715FE9C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_21715FF48((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    sub_2171600E0((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_21715FF48@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  double result = sub_21715FFC8(v6 + 32, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21715FFB0(_Unwind_Exception *a1)
{
  sub_2171600E0(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_21715FFC8(char *__dst, long long **a2)
{
  unint64_t v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    *((void *)__dst + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  int v6 = 1;
  int v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v9);
  uint64_t v10 = 0;
  *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6) = &unk_26C76DAD0;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return __dst;
}

void sub_2171600BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D16AD8((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void sub_2171600E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21715FE4C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

unsigned char *serialize::Serializer::Serializer(unsigned char *this)
{
  *this = 1;
  return this;
}

{
  *this = 1;
  return this;
}

char *serialize::Serializer::load(xpc_object_t *this)
{
  *(unsigned char *)this = 0;
  switch(xpc_dictionary_get_int64(this[1], "type"))
  {
    case 1u:
      uint64_t v2 = (char *)operator new(0x40uLL);
      sub_216779094(__p, "");
      *(void *)uint64_t v2 = &unk_26C77B578;
      *((_DWORD *)v2 + 2) = 1;
      unint64_t v3 = v2 + 16;
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
        *(_OWORD *)unint64_t v3 = *(_OWORD *)__p;
        *((void *)v2 + 4) = v13;
        *((void *)v2 + 6) = 0;
        *((void *)v2 + 7) = 0;
        *((void *)v2 + 5) = 0;
        goto LABEL_17;
      }
      sub_216778F24(v3, __p[0], (unint64_t)__p[1]);
      int v8 = SHIBYTE(v13);
      *((void *)v2 + 6) = 0;
      *((void *)v2 + 7) = 0;
      *((void *)v2 + 5) = 0;
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    case 2u:
      uint64_t v2 = (char *)operator new(0x68uLL);
      sub_2171614BC((uint64_t)v2);
      goto LABEL_17;
    case 3u:
      uint64_t v2 = (char *)operator new(0x88uLL);
      sub_216779094(__p, "");
      *(void *)uint64_t v2 = &unk_26C77B578;
      *((_DWORD *)v2 + 2) = 3;
      long long v4 = v2 + 16;
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
        *(_OWORD *)long long v4 = *(_OWORD *)__p;
        *((void *)v2 + 4) = v13;
        *((void *)v2 + 6) = 0;
        *((void *)v2 + 7) = 0;
        *((void *)v2 + 5) = 0;
        *(void *)uint64_t v2 = &unk_26C77B600;
        *((_OWORD *)v2 + 4) = 0u;
        *((_OWORD *)v2 + 5) = 0u;
        *((_OWORD *)v2 + 6) = 0u;
        *((_OWORD *)v2 + 7) = 0u;
        *((void *)v2 + 16) = 0;
        goto LABEL_17;
      }
      sub_216778F24(v4, __p[0], (unint64_t)__p[1]);
      int v9 = SHIBYTE(v13);
      *((void *)v2 + 6) = 0;
      *((void *)v2 + 7) = 0;
      *((void *)v2 + 5) = 0;
      *(void *)uint64_t v2 = &unk_26C77B600;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((void *)v2 + 16) = 0;
      if (v9 < 0) {
        goto LABEL_16;
      }
      goto LABEL_17;
    case 4u:
      uint64_t v2 = (char *)operator new(0x128uLL);
      sub_216779094(__p, "");
      *(void *)uint64_t v2 = &unk_26C77B578;
      *((_DWORD *)v2 + 2) = 4;
      uint64_t v5 = v2 + 16;
      if ((SHIBYTE(v13) & 0x80000000) == 0)
      {
        *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
        *((void *)v2 + 4) = v13;
        *((void *)v2 + 6) = 0;
        *((void *)v2 + 7) = 0;
        *((void *)v2 + 5) = 0;
        *(void *)uint64_t v2 = &unk_26C77B648;
        *((void *)v2 + 35) = 0;
        *((void *)v2 + 36) = 0;
        *((void *)v2 + 34) = 0;
        *((_OWORD *)v2 + 4) = 0u;
        *((_OWORD *)v2 + 5) = 0u;
        *((_OWORD *)v2 + 6) = 0u;
        *((_OWORD *)v2 + 7) = 0u;
        *((_OWORD *)v2 + 8) = 0u;
        *((_OWORD *)v2 + 9) = 0u;
        *((_OWORD *)v2 + 10) = 0u;
        *((_OWORD *)v2 + 11) = 0u;
        *((_OWORD *)v2 + 12) = 0u;
        *((_OWORD *)v2 + 13) = 0u;
        *((_OWORD *)v2 + 14) = 0u;
        *((_OWORD *)v2 + 15) = 0u;
        *(_OWORD *)(v2 + 252) = 0u;
        goto LABEL_17;
      }
      sub_216778F24(v5, __p[0], (unint64_t)__p[1]);
      int v10 = SHIBYTE(v13);
      *((void *)v2 + 6) = 0;
      *((void *)v2 + 7) = 0;
      *((void *)v2 + 5) = 0;
      *(void *)uint64_t v2 = &unk_26C77B648;
      *((void *)v2 + 35) = 0;
      *((void *)v2 + 36) = 0;
      *((void *)v2 + 34) = 0;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      *((_OWORD *)v2 + 12) = 0u;
      *((_OWORD *)v2 + 13) = 0u;
      *((_OWORD *)v2 + 14) = 0u;
      *((_OWORD *)v2 + 15) = 0u;
      *(_OWORD *)(v2 + 252) = 0u;
      if (v10 < 0) {
        goto LABEL_16;
      }
      goto LABEL_17;
    case 5u:
      uint64_t v2 = (char *)operator new(0x88uLL);
      sub_216779094(__p, "");
      sub_217161374((uint64_t)v2, (long long *)__p);
      goto LABEL_15;
    case 6u:
      uint64_t v2 = (char *)operator new(0x40uLL);
      sub_216779094(__p, "");
      *(void *)uint64_t v2 = &unk_26C77B578;
      *((_DWORD *)v2 + 2) = 6;
      int v6 = v2 + 16;
      if (SHIBYTE(v13) < 0)
      {
        sub_216778F24(v6, __p[0], (unint64_t)__p[1]);
        int v11 = SHIBYTE(v13);
        *((void *)v2 + 6) = 0;
        *((void *)v2 + 7) = 0;
        *((void *)v2 + 5) = 0;
        *(void *)uint64_t v2 = &unk_26C77B6D8;
        if (v11 < 0) {
LABEL_16:
        }
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)int v6 = *(_OWORD *)__p;
        *((void *)v2 + 4) = v13;
        *((void *)v2 + 6) = 0;
        *((void *)v2 + 7) = 0;
        *((void *)v2 + 5) = 0;
        *(void *)uint64_t v2 = &unk_26C77B6D8;
      }
LABEL_17:
      (*(void (**)(char *, xpc_object_t *))(*(void *)v2 + 24))(v2, this);
      return v2;
    case 7u:
      uint64_t v2 = (char *)operator new(0x68uLL);
      sub_2171615B8((uint64_t)v2, 1);
      goto LABEL_17;
    case 8u:
      uint64_t v2 = (char *)operator new(0xB0uLL);
      sub_216779094(__p, "");
      sub_2171616B0((uint64_t)v2, 1, (long long *)__p);
LABEL_15:
      if (SHIBYTE(v13) < 0) {
        goto LABEL_16;
      }
      goto LABEL_17;
    default:
      return 0;
  }
}

void sub_2171605AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t serialize::Serializer::save(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = xpc_dictionary_create(0, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1);
  return *(void *)(a1 + 8);
}

void serialize::Serializer::sync(unsigned __int8 *a1, const char *a2, int *a3)
{
  int v3 = *a1;
  long long v4 = (void *)*((void *)a1 + 1);
  if (v3)
  {
    int64_t v5 = *a3;
    xpc_dictionary_set_int64(v4, a2, v5);
  }
  else
  {
    *a3 = xpc_dictionary_get_int64(v4, a2);
  }
}

{
  int v3;
  void *v4;
  int64_t v5;
  uint64_t vars8;

  int v3 = *a1;
  long long v4 = (void *)*((void *)a1 + 1);
  if (v3)
  {
    int64_t v5 = *a3;
    xpc_dictionary_set_int64(v4, a2, v5);
  }
  else
  {
    *a3 = xpc_dictionary_get_int64(v4, a2);
  }
}

{
  int v3;
  void *v4;
  int64_t v5;
  uint64_t vars8;

  int v3 = *a1;
  long long v4 = (void *)*((void *)a1 + 1);
  if (v3)
  {
    int64_t v5 = *a3;
    xpc_dictionary_set_int64(v4, a2, v5);
  }
  else
  {
    *a3 = xpc_dictionary_get_int64(v4, a2);
  }
}

void serialize::Serializer::sync(unsigned __int8 *a1, const char *a2, const char *a3)
{
  int v3 = *a1;
  long long v4 = (void *)*((void *)a1 + 1);
  if (!v3)
  {
    xpc_dictionary_get_string(v4, a2);
    JUMPOUT(0x21D4477E0);
  }
  if (a3[23] < 0) {
    a3 = *(const char **)a3;
  }

  xpc_dictionary_set_string(v4, a2, a3);
}

float serialize::Serializer::sync(serialize::Serializer *this, const char *a2, float *a3)
{
  int v4 = *(unsigned __int8 *)this;
  int64_t v5 = (void *)*((void *)this + 1);
  if (v4)
  {
    double v6 = *a3;
    xpc_dictionary_set_double(v5, a2, v6);
  }
  else
  {
    float result = xpc_dictionary_get_double(v5, a2);
    *a3 = result;
  }
  return result;
}

void serialize::Serializer::sync(serialize::Serializer *this, const char *a2, unint64_t *a3)
{
  int v3 = *(unsigned __int8 *)this;
  int v4 = (void *)*((void *)this + 1);
  if (v3)
  {
    uint64_t v5 = *a3;
    xpc_dictionary_set_uint64(v4, a2, v5);
  }
  else
  {
    *a3 = xpc_dictionary_get_uint64(v4, a2);
  }
}

void serialize::Serializer::sync(serialize::Serializer *this, const char *a2, int *a3)
{
  int v3 = *(unsigned __int8 *)this;
  int v4 = (void *)*((void *)this + 1);
  if (v3)
  {
    uint64_t v5 = *a3;
    xpc_dictionary_set_uint64(v4, a2, v5);
  }
  else
  {
    *a3 = xpc_dictionary_get_uint64(v4, a2);
  }
}

void serialize::Serializer::sync(serialize::Serializer *a1, char *a2, float *a3)
{
  sub_216779094(&v15, a2);
  double v6 = std::string::append(&v15, ":x");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v17 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  serialize::Serializer::sync(a1, (const char *)v8, a3);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  sub_216779094(&v15, a2);
  int v9 = std::string::append(&v15, ":y");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v17 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    int v11 = __p;
  }
  else {
    int v11 = (void **)__p[0];
  }
  serialize::Serializer::sync(a1, (const char *)v11, a3 + 1);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  sub_216779094(&v15, a2);
  uint64_t v12 = std::string::append(&v15, ":z");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v17 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  serialize::Serializer::sync(a1, (const char *)v14, a3 + 2);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

{
  std::string *v6;
  long long v7;
  void **v8;
  std::string *v9;
  long long v10;
  void **v11;
  std::string *v12;
  long long v13;
  void **v14;
  std::string *v15;
  long long v16;
  void **v17;
  std::string v18;
  void *__p[2];
  int64_t v20;

  sub_216779094(&v18, a2);
  double v6 = std::string::append(&v18, ":x");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  char v20 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  serialize::Serializer::sync(a1, (const char *)v8, a3);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  sub_216779094(&v18, a2);
  int v9 = std::string::append(&v18, ":y");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  char v20 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    int v11 = __p;
  }
  else {
    int v11 = (void **)__p[0];
  }
  serialize::Serializer::sync(a1, (const char *)v11, a3 + 1);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  sub_216779094(&v18, a2);
  uint64_t v12 = std::string::append(&v18, ":z");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  char v20 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  serialize::Serializer::sync(a1, (const char *)v14, a3 + 2);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  sub_216779094(&v18, a2);
  std::string v15 = std::string::append(&v18, ":w");
  uint64_t v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  char v20 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0) {
    int64_t v17 = __p;
  }
  else {
    int64_t v17 = (void **)__p[0];
  }
  serialize::Serializer::sync(a1, (const char *)v17, a3 + 3);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_2171609EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_217160C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void serialize::Serializer::sync(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(unsigned char *)a1)
  {
    int v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    xpc_dictionary_set_data(v4, a2, v5, v6);
  }
  else
  {
    size_t length = 0;
    data = (char *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_216825D78((char *)a3, data, (uint64_t)&data[length & 0xFFFFFFFFFFFFFFFCLL], (uint64_t)length >> 2);
  }
}

{
  void *v4;
  const void *v5;
  size_t v6;
  char *data;
  size_t length;
  uint64_t vars8;

  if (*(unsigned char *)a1)
  {
    int v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    xpc_dictionary_set_data(v4, a2, v5, v6);
  }
  else
  {
    size_t length = 0;
    data = (char *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_216825D78((char *)a3, data, (uint64_t)&data[length & 0xFFFFFFFFFFFFFFFCLL], (uint64_t)length >> 2);
  }
}

void serialize::Serializer::sync(uint64_t a1, const char *a2, const void **a3)
{
  if (*(unsigned char *)a1)
  {
    int v4 = *(void **)(a1 + 8);
    uint64_t v5 = *a3;
    size_t v6 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    xpc_dictionary_set_data(v4, a2, v5, v6);
  }
  else
  {
    size_t length = 0;
    data = (uint64_t *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_217161774(a3, data, (uint64_t *)((char *)data + 12 * (length / 0xC)), length / 0xC);
  }
}

{
  void *v4;
  const void *v5;
  size_t v6;
  uint64_t *data;
  size_t length;
  uint64_t vars8;

  if (*(unsigned char *)a1)
  {
    int v4 = *(void **)(a1 + 8);
    uint64_t v5 = *a3;
    size_t v6 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    xpc_dictionary_set_data(v4, a2, v5, v6);
  }
  else
  {
    size_t length = 0;
    data = (uint64_t *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_217161934(a3, data, (uint64_t *)((char *)data + (length & 0xFFFFFFFFFFFFFFF8)), (uint64_t)length >> 3);
  }
}

void serialize::Serializer::sync(xpc_object_t *a1, char *a2, void **a3)
{
  unint64_t v46 = ((unsigned char *)a3[1] - (unsigned char *)*a3) >> 3;
  sub_216779094(&v43, a2);
  size_t v6 = std::string::append(&v43, ":count");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  uint64_t v45 = (char *)v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45) >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  serialize::Serializer::sync((serialize::Serializer *)a1, (const char *)v8, &v46);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  size_t v9 = v46;
  if (v46)
  {
    if (*(unsigned char *)a1)
    {
      key = a2;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v45 = 0;
      sub_2168265D4(__p, v46);
      long long v10 = (char *)*a3;
      int v11 = (char *)a3[1];
      if (*a3 != v11)
      {
        do
        {
          uint64_t v12 = *(void *)v10;
          v43.__r_.__value_.__s.__data_[0] = 1;
          v43.__r_.__value_.__l.__size_ = (std::string::size_type)xpc_dictionary_create(0, 0, 0);
          (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 24))(v12, &v43);
          std::string::size_type size = v43.__r_.__value_.__l.__size_;
          uint64_t v14 = (char *)__p[1];
          if (__p[1] >= v45)
          {
            int64_t v16 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_21677CB10();
            }
            unint64_t v17 = (v45 - (char *)__p[0]) >> 2;
            if (v17 <= v16 + 1) {
              unint64_t v17 = v16 + 1;
            }
            if ((unint64_t)(v45 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18) {
              char v19 = (char *)sub_21677CB28((uint64_t)&v45, v18);
            }
            else {
              char v19 = 0;
            }
            char v20 = (std::string::size_type *)&v19[8 * v16];
            *char v20 = size;
            std::string v15 = v20 + 1;
            int v22 = (char *)__p[0];
            int v21 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                std::string::size_type v23 = *((void *)v21 - 1);
                v21 -= 8;
                *--char v20 = v23;
              }
              while (v21 != v22);
              int v21 = (char *)__p[0];
            }
            __p[0] = v20;
            __p[1] = v15;
            uint64_t v45 = &v19[8 * v18];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(void *)__p[1] = v43.__r_.__value_.__l.__size_;
            std::string v15 = v14 + 8;
          }
          __p[1] = v15;
          v10 += 8;
        }
        while (v10 != v11);
      }
      xpc_object_t v24 = xpc_array_create((xpc_object_t *)__p[0], v9);
      xpc_dictionary_set_value(a1[1], key, v24);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      xpc_object_t value = xpc_dictionary_get_value(a1[1], a2);
      sub_2168265D4(a3, v9);
      size_t v26 = 0;
      do
      {
        xpc_object_t v27 = xpc_array_get_value(value, v26);
        LOBYTE(__p[0]) = 1;
        __p[1] = v27;
        long long v28 = serialize::Serializer::load(__p);
        if (v28)
        {
          uint64_t v29 = v28;
          std::type_info v31 = (char **)a3[1];
          unint64_t v30 = (unint64_t)a3[2];
          if ((unint64_t)v31 >= v30)
          {
            uint64_t v33 = ((char *)v31 - (unsigned char *)*a3) >> 3;
            if ((unint64_t)(v33 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v34 = v30 - (void)*a3;
            uint64_t v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
              uint64_t v35 = v33 + 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36) {
              uint64_t v37 = (char *)sub_21677CB28((uint64_t)(a3 + 2), v36);
            }
            else {
              uint64_t v37 = 0;
            }
            uint64_t v38 = (char **)&v37[8 * v33];
            std::__shared_weak_count *v38 = v29;
            uint64_t v32 = (char *)(v38 + 1);
            uint64_t v40 = (char *)*a3;
            uint64_t v39 = (char *)a3[1];
            if (v39 != *a3)
            {
              do
              {
                uint64_t v41 = (char *)*((void *)v39 - 1);
                v39 -= 8;
                *--uint64_t v38 = v41;
              }
              while (v39 != v40);
              uint64_t v39 = (char *)*a3;
            }
            *a3 = v38;
            a3[1] = v32;
            a3[2] = &v37[8 * v36];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *std::type_info v31 = v28;
            uint64_t v32 = (char *)(v31 + 1);
          }
          a3[1] = v32;
        }
        ++v26;
      }
      while (v26 != v9);
    }
  }
}

void sub_2171612A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171612FC(uint64_t a1, long long *a2, int a3)
{
  *(void *)a1 = &unk_26C77B578;
  *(_DWORD *)(a1 + 8) = a3;
  uint64_t v4 = a1 + 16;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_217161374(uint64_t a1, long long *a2)
{
  sub_216779094(__p, "");
  *(void *)a1 = &unk_26C77B578;
  *(_DWORD *)(a1 + 8) = 5;
  uint64_t v4 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v10) < 0)
  {
    sub_216778F24(v4, __p[0], (unint64_t)__p[1]);
    int v5 = SHIBYTE(v10);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(void *)a1 = &unk_26C77B690;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  size_t v6 = (unsigned char *)(a1 + 88);
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 104) = *((void *)a2 + 2);
    *(_OWORD *)size_t v6 = v7;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  return a1;
}

void sub_217161480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t v18 = *v16;
  if (*v16)
  {
    *((void *)v15 + 9) = v18;
    operator delete(v18);
  }
  serialize::Prim::~Prim(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_2171614BC(uint64_t a1)
{
  sub_216779094(__p, "");
  *(void *)a1 = &unk_26C77B578;
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v2 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v6) < 0)
  {
    sub_216778F24(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v6);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(void *)a1 = &unk_26C77B5B8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 1008981770;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = 24;
  return a1;
}

void sub_21716159C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171615B8(uint64_t a1, int a2)
{
  sub_216779094(__p, "");
  *(void *)a1 = &unk_26C77B578;
  *(_DWORD *)(a1 + 8) = 7;
  uint64_t v4 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v8) < 0)
  {
    sub_216778F24(v4, __p[0], (unint64_t)__p[1]);
    int v5 = SHIBYTE(v8);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(void *)a1 = &unk_26C77B720;
  *(_DWORD *)(a1 + 64) = a2;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = 0;
  return a1;
}

void sub_217161694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171616B0(uint64_t a1, int a2, long long *a3)
{
  uint64_t v5 = sub_2171612FC(a1, a3, 8);
  *(void *)uint64_t v5 = &unk_26C77B768;
  *(_DWORD *)(v5 + 64) = a2;
  *(_OWORD *)(v5 + 104) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v5 + 68) = _Q1;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  sub_216779094((void *)(v5 + 152), "st");
  return a1;
}

void sub_217161740(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*(void **)(v1 + 128));
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v2);
  }
  serialize::Prim::~Prim((serialize::Prim *)v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_217161774(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  float result = (_DWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_216BD0794(a1, v12);
    uint64_t v14 = (_DWORD *)a1[1];
    long long v13 = (_DWORD **)(a1 + 1);
    float result = v14;
    std::string v15 = (char *)v14;
    if (v6 != a3)
    {
      std::string v15 = (char *)result;
      do
      {
        *(void *)std::string v15 = *v6;
        *((_DWORD *)v15 + 2) = *((_DWORD *)v6 + 2);
        v15 += 12;
        uint64_t v6 = (uint64_t *)((char *)v6 + 12);
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v24 = v15 - (char *)result;
    goto LABEL_27;
  }
  unint64_t v17 = (_DWORD *)a1[1];
  long long v13 = (_DWORD **)(a1 + 1);
  int64_t v16 = v17;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - result);
  if (v18 >= a4)
  {
    std::string v15 = (char *)result;
    if (a2 != a3)
    {
      int v25 = result;
      do
      {
        uint64_t v26 = *v6;
        v25[2] = *((_DWORD *)v6 + 2);
        *(void *)int v25 = v26;
        v25 += 3;
        uint64_t v6 = (uint64_t *)((char *)v6 + 12);
        v15 += 12;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  uint64_t v19 = (uint64_t)a2 + 12 * v18;
  if (v16 != result)
  {
    uint64_t v20 = 12 * v18;
    do
    {
      uint64_t v21 = *v6;
      result[2] = *((_DWORD *)v6 + 2);
      *(void *)float result = v21;
      result += 3;
      uint64_t v6 = (uint64_t *)((char *)v6 + 12);
      v20 -= 12;
    }
    while (v20);
    float result = *v13;
  }
  int v22 = (char *)result;
  if ((uint64_t *)v19 != a3)
  {
    int v22 = (char *)result;
    std::string::size_type v23 = result;
    do
    {
      *(void *)std::string::size_type v23 = *(void *)v19;
      v23[2] = *(_DWORD *)(v19 + 8);
      v22 += 12;
      v19 += 12;
      v23 += 3;
    }
    while ((uint64_t *)v19 != a3);
  }
  int64_t v24 = v22 - (char *)result;
LABEL_27:
  *long long v13 = (_DWORD *)((char *)result + v24);
  return result;
}

void *sub_217161934(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  float result = (void *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_21677CACC(a1, v11);
    long long v13 = (void *)a1[1];
    unint64_t v12 = (void **)(a1 + 1);
    float result = v13;
    uint64_t v14 = (char *)v13;
    if (v6 != a3)
    {
      uint64_t v14 = (char *)result;
      do
      {
        uint64_t v15 = *v6++;
        *(void *)uint64_t v14 = v15;
        v14 += 8;
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v25 = v14 - (char *)result;
    goto LABEL_27;
  }
  unint64_t v17 = (void *)a1[1];
  unint64_t v12 = (void **)(a1 + 1);
  int64_t v16 = v17;
  unint64_t v18 = v17 - result;
  if (v18 >= a4)
  {
    uint64_t v14 = (char *)result;
    if (a2 != a3)
    {
      uint64_t v26 = result;
      do
      {
        uint64_t v27 = *v6++;
        *v26++ = v27;
        v14 += 8;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  uint64_t v19 = &a2[v18];
  if (v16 != result)
  {
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = *v6++;
      *result++ = v21;
      v20 -= 8;
    }
    while (v20);
    float result = *v12;
  }
  int v22 = (char *)result;
  if (v19 != a3)
  {
    int v22 = (char *)result;
    std::string::size_type v23 = result;
    do
    {
      uint64_t v24 = *v19++;
      *v23++ = v24;
      v22 += 8;
    }
    while (v19 != a3);
  }
  int64_t v25 = v22 - (char *)result;
LABEL_27:
  *unint64_t v12 = (void *)((char *)result + v25);
  return result;
}

void serialize::Prim::~Prim(serialize::Prim *this)
{
  *(void *)this = &unk_26C77B578;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  void *v1;
  uint64_t vars8;

  serialize::Prim::~Prim(this);

  operator delete(v1);
}

uint64_t serialize::Prim::release(serialize::Prim *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 5);
  int v3 = (uint64_t *)*((void *)this + 6);
  if (v2 == v3) {
    goto LABEL_4;
  }
  do
  {
    uint64_t v4 = *v2++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  while (v2 != v3);
  if (this)
  {
LABEL_4:
    uint64_t v6 = *(uint64_t (**)(serialize::Prim *))(*(void *)this + 8);
    return v6(this);
  }
  return result;
}

void serialize::Prim::serialize(serialize::Prim *this, serialize::Serializer *a2)
{
  serialize::Serializer::sync((unsigned __int8 *)a2, "type", (int *)this + 2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "path", (const char *)this + 16);

  serialize::Serializer::sync((xpc_object_t *)a2, "children", (void **)this + 5);
}

void serialize::Prim::addChild(serialize::Prim *this, serialize::Prim *a2)
{
  unint64_t v6 = *((void *)this + 7);
  uint64_t v4 = (char *)this + 56;
  unint64_t v5 = v6;
  long long v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    size_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_21677CB28((uint64_t)v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int64_t v16 = &v15[8 * v11];
    unint64_t v17 = &v15[8 * v14];
    *(void *)int64_t v16 = a2;
    uint64_t v8 = v16 + 8;
    uint64_t v19 = (char *)*((void *)this + 5);
    unint64_t v18 = (char *)*((void *)this + 6);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*v9;
    }
    *((void *)this + 5) = v16;
    *((void *)this + 6) = v8;
    *((void *)this + 7) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *long long v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 6) = v8;
}

void serialize::Stage::serialize(serialize::Stage *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "defaultPrim", (const char *)this + 64);
  serialize::Serializer::sync(a2, "metersPerUnit", (float *)this + 22);
  serialize::Serializer::sync(a2, "startTimeCode", (int *)this + 23);
  serialize::Serializer::sync(a2, "endTimeCode", (int *)this + 24);

  serialize::Serializer::sync(a2, "timeCodesPerSecond", (int *)this + 25);
}

void serialize::PointCloud::serialize(serialize::PointCloud *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((uint64_t)a2, "vertices", (const void **)this + 8);
  serialize::Serializer::sync((uint64_t)a2, "colors", (const void **)this + 11);

  serialize::Serializer::sync((unsigned __int8 *)a2, "materialPath", (const char *)this + 112);
}

void serialize::Mesh::serialize(serialize::Mesh *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((uint64_t)a2, "faceVertexCounts", (uint64_t)this + 64);
  serialize::Serializer::sync((uint64_t)a2, "indices", (uint64_t)this + 88);
  serialize::Serializer::sync((uint64_t)a2, "uvIndices", (uint64_t)this + 112);
  serialize::Serializer::sync((uint64_t)a2, "normalIndices", (uint64_t)this + 136);
  serialize::Serializer::sync((uint64_t)a2, "vertices", (const void **)this + 20);
  serialize::Serializer::sync((uint64_t)a2, "normals", (const void **)this + 23);
  serialize::Serializer::sync((uint64_t)a2, "colors", (const void **)this + 26);
  serialize::Serializer::sync((uint64_t)a2, "uvs", (const void **)this + 29);
  serialize::Serializer::sync((unsigned __int8 *)a2, "normalInterpolation", (int *)this + 64);
  serialize::Serializer::sync((unsigned __int8 *)a2, "colorInterpolation", (int *)this + 65);
  serialize::Serializer::sync((unsigned __int8 *)a2, "uvInterpolation", (int *)this + 66);

  serialize::Serializer::sync((unsigned __int8 *)a2, "materialPath", (const char *)this + 272);
}

void serialize::Subset::serialize(serialize::Subset *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((uint64_t)a2, "faces", (uint64_t)this + 64);
  serialize::Serializer::sync((unsigned __int8 *)a2, "name", (const char *)this + 88);

  serialize::Serializer::sync((unsigned __int8 *)a2, "materialPath", (const char *)this + 112);
}

void serialize::MapInput::serialize(serialize::MapInput *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "inputName", (int *)this + 16);
  serialize::Serializer::sync(a2, "value", (float *)this + 17);

  serialize::Serializer::sync((unsigned __int8 *)a2, "channels", (const char *)this + 80);
}

void serialize::Shader::serialize(serialize::Shader *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "inputName", (int *)this + 16);
  serialize::Serializer::sync(a2, "scale", (float *)this + 17);
  serialize::Serializer::sync(a2, "bias", (float *)this + 21);
  serialize::Serializer::sync((unsigned __int8 *)a2, "file", (const char *)this + 104);
  serialize::Serializer::sync((unsigned __int8 *)a2, "channels", (const char *)this + 128);

  serialize::Serializer::sync((unsigned __int8 *)a2, "texCoordSet", (const char *)this + 152);
}

void sub_2171620C4(void **this)
{
  *this = &unk_26C77B5B8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }

  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_217162124(void **this)
{
  *this = &unk_26C77B5B8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);

  operator delete(v2);
}

void sub_217162188(void **this)
{
  *this = &unk_26C77B600;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  uint64_t v2 = this[11];
  if (v2)
  {
    this[12] = v2;
    operator delete(v2);
  }
  int v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }

  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_217162208(void **this)
{
  *this = &unk_26C77B600;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  uint64_t v2 = this[11];
  if (v2)
  {
    this[12] = v2;
    operator delete(v2);
  }
  int v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);

  operator delete(v4);
}

void sub_217162290(void **a1)
{
  sub_2171625B0(a1);

  operator delete(v1);
}

void sub_2171622B8(void **this)
{
  *this = &unk_26C77B690;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  uint64_t v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }

  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_217162338(void **this)
{
  *this = &unk_26C77B690;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  uint64_t v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);

  operator delete(v3);
}

void sub_2171623C0(serialize::Prim *a1)
{
  serialize::Prim::~Prim(a1);

  operator delete(v1);
}

void sub_2171623E8(void **this)
{
  *this = &unk_26C77B720;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }

  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_217162448(void **this)
{
  *this = &unk_26C77B720;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);

  operator delete(v2);
}

void sub_2171624AC(void **this)
{
  *this = &unk_26C77B768;
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }

  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_21716252C(void **this)
{
  *this = &unk_26C77B768;
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);

  operator delete(v2);
}

void sub_2171625B0(void **this)
{
  *this = &unk_26C77B648;
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  uint64_t v2 = this[29];
  if (v2)
  {
    this[30] = v2;
    operator delete(v2);
  }
  int v3 = this[26];
  if (v3)
  {
    this[27] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[23];
  if (v4)
  {
    this[24] = v4;
    operator delete(v4);
  }
  unint64_t v5 = this[20];
  if (v5)
  {
    this[21] = v5;
    operator delete(v5);
  }
  unint64_t v6 = this[17];
  if (v6)
  {
    this[18] = v6;
    operator delete(v6);
  }
  long long v7 = this[14];
  if (v7)
  {
    this[15] = v7;
    operator delete(v7);
  }
  uint64_t v8 = this[11];
  if (v8)
  {
    this[12] = v8;
    operator delete(v8);
  }
  size_t v9 = this[8];
  if (v9)
  {
    this[9] = v9;
    operator delete(v9);
  }

  serialize::Prim::~Prim((serialize::Prim *)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::Init(uint64_t this)
{
  dword_267B95F88 = this;
  return this;
}

int *pxrInternal__aapl__pxrReserved__::UsdMetrics::GetType(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  return &dword_267B95F88;
}

void pxrInternal__aapl__pxrReserved__::UsdMetrics::AddField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string *__str, int a6)
{
  memset(&__p, 0, sizeof(__p));
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  long long v7 = std::string::operator=(&__p, __str);
  int v12 = a6;
  pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields((pxrInternal__aapl__pxrReserved__::UsdMetrics *)v7);
  uint64_t v8 = qword_267B95F98;
  if (qword_267B95F98 >= (unint64_t)qword_267B95FA0)
  {
    uint64_t v9 = sub_217163054(&qword_267B95F90, (uint64_t)v10);
  }
  else
  {
    sub_217162FD8((uint64_t)&qword_267B95F90, (uint64_t)v10);
    uint64_t v9 = v8 + 64;
  }
  qword_267B95F98 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_217162758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95FA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95FA8))
  {
    qword_267B95F90 = 0;
    qword_267B95F98 = 0;
    qword_267B95FA0 = 0;
    __cxa_atexit((void (*)(void *))sub_21716280C, &qword_267B95F90, &dword_216758000);
    __cxa_guard_release(&qword_267B95FA8);
  }
  return &qword_267B95F90;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMetrics::ReadFields(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  return &qword_267B95F90;
}

void **sub_21716280C(void **a1)
{
  int v3 = a1;
  sub_2171633B8(&v3);
  return a1;
}

double pxrInternal__aapl__pxrReserved__::UsdMetrics::GetField@<D0>(pxrInternal__aapl__pxrReserved__::UsdMetrics *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields(a1);
  uint64_t v4 = qword_267B95F90;
  uint64_t v5 = qword_267B95F98;
  if (qword_267B95F90 != qword_267B95F98)
  {
    unint64_t v6 = (const void **)(a2 + 32);
    do
    {
      long long v7 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v4;
      *(_OWORD *)(a2 + 16) = v7;
      if (*(char *)(v4 + 55) < 0)
      {
        sub_216778F24((unsigned char *)(a2 + 32), *(void **)(v4 + 32), *(void *)(v4 + 40));
      }
      else
      {
        long long v8 = *(_OWORD *)(v4 + 32);
        *(void *)(a2 + 48) = *(void *)(v4 + 48);
        *(_OWORD *)unint64_t v6 = v8;
      }
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(v4 + 56);
      if (*(char *)(a2 + 55) >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(a2 + 55);
      }
      else {
        uint64_t v9 = *(void *)(a2 + 40);
      }
      uint64_t v10 = *((unsigned __int8 *)a1 + 23);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *((void *)a1 + 1);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          int v12 = a1;
        }
        else {
          int v12 = *(pxrInternal__aapl__pxrReserved__::UsdMetrics **)a1;
        }
        if ((*(unsigned char *)(a2 + 55) & 0x80) != 0)
        {
          if (!memcmp(*v6, v12, *(void *)(a2 + 40))) {
            return *(double *)&v8;
          }
LABEL_24:
          operator delete((void *)*v6);
          goto LABEL_25;
        }
        if (!*(unsigned char *)(a2 + 55)) {
          return *(double *)&v8;
        }
        uint64_t v13 = (unsigned __int8 *)(a2 + 32);
        uint64_t v14 = *(unsigned __int8 *)(a2 + 55);
        while (*v13 == *(unsigned __int8 *)v12)
        {
          ++v13;
          int v12 = (pxrInternal__aapl__pxrReserved__::UsdMetrics *)((char *)v12 + 1);
          if (!--v14) {
            return *(double *)&v8;
          }
        }
      }
      if ((*(unsigned char *)(a2 + 55) & 0x80) != 0) {
        goto LABEL_24;
      }
LABEL_25:
      v4 += 64;
    }
    while (v4 != v5);
  }
  *(void *)&long long v8 = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return *(double *)&v8;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::GetTime(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)mach_absolute_time();

  return pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::GetUsedMemory(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  mach_msg_type_number_t task_info_outCnt = 12;
  if (task_info(*MEMORY[0x263EF8960], 0x14u, &task_info_out, &task_info_outCnt)) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::GetGPUMemory(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  sub_216779094(&v32, "footprint ");
  pid_t v1 = getpid();
  std::to_string(&v29, v1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v2 = &v29;
  }
  else {
    uint64_t v2 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  uint64_t v4 = std::string::append(&v32, (const std::string::value_type *)v2, size);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v31 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (v31 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  long long v7 = popen((const char *)v6, "r");
  long long v8 = v7;
  if (v7)
  {
    uint64_t v9 = 0;
    if (!feof(v7))
    {
      do
      {
        fgets((char *)&v32, 2048, v8);
        sub_216779094(&v29, (char *)&v32);
        int64_t v10 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        int v11 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
        int v12 = (void *)v29.__r_.__value_.__r.__words[0];
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          uint64_t v13 = &v29;
        }
        else
        {
          int64_t v10 = v29.__r_.__value_.__l.__size_;
          uint64_t v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
        }
        if (v10 >= 13)
        {
          uint64_t v14 = (char *)v13 + v10;
          uint64_t v15 = v13;
          do
          {
            int64_t v16 = (char *)memchr(v15, 73, v10 - 12);
            if (!v16) {
              break;
            }
            if (*(void *)v16 == 0x656C656363414F49 && *(void *)(v16 + 5) == 0x726F746172656C65)
            {
              if (v16 != v14 && v16 - (char *)v13 != -1)
              {
                uint64_t v28 = v9;
                uint64_t v18 = 0;
                for (uint64_t i = &v32; ; uint64_t i = (std::string *)((char *)i + 1))
                {
                  int v20 = v32.__r_.__value_.__s.__data_[v18];
                  if (v20 != 32 && v20 != 9) {
                    break;
                  }
                  ++v18;
                }
                uint64_t v27 = atoll((const char *)&v32 + v18);
                while (v20 > 0x20u || ((1 << v20) & 0x100000201) == 0)
                {
                  LOBYTE(v20) = *((unsigned char *)&v32.__r_.__value_.__l.__data_ + ++v18);
                  uint64_t i = (std::string *)((char *)i + 1);
                }
                while (v20 == 32 || v20 == 9)
                {
                  std::string::value_type v23 = i->__r_.__value_.__s.__data_[1];
                  uint64_t i = (std::string *)((char *)i + 1);
                  LOBYTE(v20) = v23;
                }
                if (!strncmp("KB", (const char *)i, 2uLL))
                {
                  uint64_t v25 = v27 << 10;
                }
                else if (!strncmp("MB", (const char *)i, 2uLL))
                {
                  uint64_t v25 = v27 << 20;
                }
                else if (!strncmp("GB", (const char *)i, 2uLL))
                {
                  uint64_t v25 = v27 << 30;
                }
                else
                {
                  int v24 = strncmp("TB", (const char *)i, 2uLL);
                  uint64_t v25 = v27 << 40;
                  if (v24) {
                    uint64_t v25 = v27;
                  }
                }
                uint64_t v9 = v25 + v28;
              }
              break;
            }
            uint64_t v15 = (std::string *)(v16 + 1);
            int64_t v10 = v14 - (char *)v15;
          }
          while (v14 - (char *)v15 >= 13);
        }
        if (v11 < 0) {
          operator delete(v12);
        }
      }
      while (!feof(v8));
    }
    pclose(v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_217162D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMetrics::Reset(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields(this);

  sub_21716340C(&qword_267B95F90);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26C77B7B0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 24), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v3;
  }
  int v4 = dword_267B95F88;
  *(_DWORD *)(a1 + 48) = dword_267B95F88;
  if (v4 == 2)
  {
    mach_msg_type_number_t task_info_outCnt = 12;
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdMetrics *)task_info(*MEMORY[0x263EF8960], 0x14u, &task_info_out, &task_info_outCnt);
    uint64_t v7 = v11;
    if (v6) {
      uint64_t v7 = 0;
    }
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = pxrInternal__aapl__pxrReserved__::UsdMetrics::GetGPUMemory(v6);
  }
  else if (v4 == 1)
  {
    long long v5 = (pxrInternal__aapl__pxrReserved__ *)mach_absolute_time();
    *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v5);
  }
  return a1;
}

void sub_217162E8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile(pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *this)
{
  *(void *)this = &unk_26C77B7B0;
  int v2 = *((_DWORD *)this + 12);
  if (v2 == 2)
  {
    uint64_t v3 = *((void *)this + 1);
    mach_msg_type_number_t task_info_outCnt = 12;
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdMetrics *)task_info(*MEMORY[0x263EF8960], 0x14u, &task_info_out, &task_info_outCnt);
    int v10 = (int)v9;
    uint64_t v11 = v17;
    uint64_t v12 = *((void *)this + 1);
    uint64_t v6 = *((void *)this + 2);
    uint64_t GPUMemory = pxrInternal__aapl__pxrReserved__::UsdMetrics::GetGPUMemory(v9);
    if (v10) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v11;
    }
    uint64_t v8 = v14 - v12;
    uint64_t v7 = GPUMemory - *((void *)this + 2);
  }
  else
  {
    if (v2 != 1) {
      goto LABEL_9;
    }
    uint64_t v3 = *((void *)this + 1);
    int v4 = (pxrInternal__aapl__pxrReserved__ *)mach_absolute_time();
    unint64_t v5 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v4);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = v5 - *((void *)this + 1);
  }
  pxrInternal__aapl__pxrReserved__::UsdMetrics::AddField(v3, v8, v6, v7, (std::string *)this + 1, *((_DWORD *)this + 12));
LABEL_9:
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile(this);

  operator delete(v1);
}

unsigned char *sub_217162FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  uint64_t result = (unsigned char *)(v4 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 32);
    *(void *)(v4 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t result = v7;
  }
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 8) = v4 + 64;
  return result;
}

void sub_21716304C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_217163054(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v20 = a1 + 2;
  if (v9) {
    int v10 = sub_2169B761C(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = (char *)&v10[16 * v4];
  v17[0] = v10;
  v17[1] = v11;
  uint64_t v18 = v11;
  uint64_t v19 = (char *)&v10[16 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  uint64_t v13 = v11 + 32;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_216778F24(v13, *(void **)(a2 + 32), *(void *)(a2 + 40));
    uint64_t v11 = v18;
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 32);
    *((void *)v11 + 6) = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t v13 = v14;
  }
  v10[16 * v4 + 14] = *(_DWORD *)(a2 + 56);
  uint64_t v18 = v11 + 64;
  sub_217163174(a1, v17);
  uint64_t v15 = a1[1];
  sub_217163328((uint64_t)v17);
  return v15;
}

void sub_217163160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217163328((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217163174(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171631EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171631EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 48);
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 48) = v10;
      long long v11 = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v11;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 64;
    }
    while (a3 + v7 != a5);
    *((void *)&v17 + 1) = a7 + v7;
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_2171632A8((uint64_t)v14);
  return v12;
}

uint64_t sub_2171632A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171632E0(a1);
  }
  return a1;
}

void sub_2171632E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    v1 += 64;
  }
}

uint64_t sub_217163328(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_217163360(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_2171633B8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_21716340C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_21716340C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

double pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs::UsdMetricsBenchmarkArgs(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *this)
{
  *((_WORD *)this + 2) = 0;
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  return result;
}

{
  double result;

  *((_WORD *)this + 2) = 0;
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs::Processing(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *this)
{
  if (*((char *)this + 87) < 0)
  {
    if (!*((void *)this + 9)) {
      goto LABEL_42;
    }
  }
  else if (!*((unsigned char *)this + 87))
  {
    goto LABEL_42;
  }
  size_t __idx = 0;
  int v2 = std::stoi((const std::string *)((char *)this + 64), &__idx, 10);
  int v3 = v2;
  if (*((char *)this + 87) < 0) {
    size_t v4 = *((void *)this + 9);
  }
  else {
    size_t v4 = *((unsigned __int8 *)this + 87);
  }
  int v5 = v2;
  if (__idx + 1 >= v4) {
    goto LABEL_22;
  }
  std::string::basic_string(&__str, (const std::string *)((char *)this + 64), __idx, 2uLL, (std::allocator<char> *)&v32);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 2)
    {
      int v5 = v3;
      if (LOWORD(__str.__r_.__value_.__l.__data_) == 11822) {
        goto LABEL_15;
      }
      goto LABEL_22;
    }
LABEL_21:
    int v5 = v3;
    goto LABEL_22;
  }
  if (__str.__r_.__value_.__l.__size_ != 2)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_21;
  }
  int v6 = *(unsigned __int16 *)__str.__r_.__value_.__l.__data_;
  operator delete(__str.__r_.__value_.__l.__data_);
  int v5 = v3;
  if (v6 == 11822)
  {
LABEL_15:
    std::string::basic_string(&__str, (const std::string *)((char *)this + 64), __idx + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    int v7 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v7 <= v3) {
      int v5 = v3;
    }
    else {
      int v5 = v7;
    }
  }
LABEL_22:
  uint64_t v8 = (void **)((char *)this + 88);
  sub_21681FE20((void **)this + 11, v5 - v3 + 1);
  if (v5 >= v3)
  {
    uint64_t v9 = (void *)((char *)this + 104);
    long long v10 = (char *)*((void *)this + 12);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        uint64_t v12 = (char *)*v8;
        uint64_t v13 = (v10 - (unsigned char *)*v8) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          sub_21677CB10();
        }
        uint64_t v15 = *v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          long long v17 = (char *)sub_21677EA28((uint64_t)this + 104, v16);
          uint64_t v12 = (char *)*((void *)this + 11);
          long long v10 = (char *)*((void *)this + 12);
        }
        else
        {
          long long v17 = 0;
        }
        uint64_t v18 = (int *)&v17[4 * v13];
        *uint64_t v18 = v3;
        long long v11 = (char *)(v18 + 1);
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *--uint64_t v18 = v19;
        }
        *((void *)this + 11) = v18;
        *((void *)this + 12) = v11;
        *((void *)this + 13) = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)long long v10 = v3;
        long long v11 = v10 + 4;
      }
      *((void *)this + 12) = v11;
      long long v10 = v11;
    }
    while (v3++ != v5);
  }
LABEL_42:
  *((_DWORD *)this + 52) = 0;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 55)) {
      goto LABEL_44;
    }
LABEL_47:
    MEMORY[0x21D4477E0]((char *)this + 160, "image");
    MEMORY[0x21D4477E0]((char *)this + 184, ".jpg");
    *((_DWORD *)this + 52) = 4;
    return result;
  }
  if (!*((void *)this + 5)) {
    goto LABEL_47;
  }
LABEL_44:
  std::string::size_type v21 = std::string::find((const std::string *)((char *)this + 32), 35, 0);
  std::string::size_type v23 = v21;
  if (*((char *)this + 55) < 0) {
    std::string::size_type v24 = *((void *)this + 5);
  }
  else {
    std::string::size_type v24 = *((unsigned __int8 *)this + 55);
  }
  if (v21 < v24)
  {
    std::string::basic_string(&__str, (const std::string *)((char *)this + 32), 0, v21, (std::allocator<char> *)&__idx);
    uint64_t v25 = (void **)((char *)this + 160);
    if (*((char *)this + 183) < 0) {
      operator delete(*v25);
    }
    *(_OWORD *)uint64_t v25 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((void *)this + 22) = *((void *)&__str.__r_.__value_.__l + 2);
    std::string::size_type v26 = *((unsigned __int8 *)this + 55);
    while (1)
    {
      std::string::size_type v27 = v26;
      if ((v26 & 0x80) != 0) {
        std::string::size_type v27 = *((void *)this + 5);
      }
      if (v23 >= v27) {
        break;
      }
      uint64_t v28 = (char *)this + 32;
      if ((v26 & 0x80) != 0) {
        uint64_t v28 = (char *)*((void *)this + 4);
      }
      if (v28[v23] != 35) {
        break;
      }
      ++*((_DWORD *)this + 52);
      ++v23;
    }
    std::string::basic_string(&__str, (const std::string *)((char *)this + 32), v23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__idx);
    std::string v29 = (void **)((char *)this + 184);
    if (*((char *)this + 207) < 0) {
      operator delete(*v29);
    }
    double result = *(double *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)std::string v29 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((void *)this + 25) = *((void *)&__str.__r_.__value_.__l + 2);
  }
  return result;
}

void sub_217163830(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2171635E4);
}

void sub_217163860(void *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs::GetImagePath(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *this@<X0>, int __val@<W1>, uint64_t a3@<X8>)
{
  v25[2] = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 52)) {
    goto LABEL_2;
  }
  int v20 = (_OWORD *)((char *)this + 32);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 55))
    {
      *(_OWORD *)a3 = *v20;
      *(void *)(a3 + 16) = *((void *)this + 6);
      return;
    }
    goto LABEL_2;
  }
  unint64_t v21 = *((void *)this + 5);
  if (!v21)
  {
LABEL_2:
    std::to_string(&v24, __val);
    std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    if (size < *((int *)this + 52))
    {
      do
      {
        sub_216779094(&v23, "0");
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v6 = &v24;
        }
        else {
          int v6 = (std::string *)v24.__r_.__value_.__r.__words[0];
        }
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v7 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v7 = v24.__r_.__value_.__l.__size_;
        }
        uint64_t v8 = std::string::append(&v23, (const std::string::value_type *)v6, v7);
        std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
        v25[0] = v8->__r_.__value_.__l.__size_;
        *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
        std::string::size_type v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
        v8->__r_.__value_.__r.__words[0] = 0;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        v24.__r_.__value_.__r.__words[0] = v9;
        v24.__r_.__value_.__l.__size_ = v25[0];
        *(std::string::size_type *)((char *)&v24.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v25 + 7);
        *((unsigned char *)&v24.__r_.__value_.__s + 23) = v10;
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v23.__r_.__value_.__l.__data_);
          std::string::size_type v10 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        }
        if ((v10 & 0x80u) == 0) {
          std::string::size_type v11 = v10;
        }
        else {
          std::string::size_type v11 = v24.__r_.__value_.__l.__size_;
        }
      }
      while (v11 < *((int *)this + 52));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)this + 20, (const void **)&v24.__r_.__value_.__l.__data_, (uint64_t)&v23);
    unint64_t v14 = (const std::string::value_type *)*((void *)this + 23);
    uint64_t v13 = (char *)this + 184;
    uint64_t v12 = v14;
    int v15 = v13[23];
    if (v15 >= 0) {
      unint64_t v16 = v13;
    }
    else {
      unint64_t v16 = v12;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = v13[23];
    }
    else {
      std::string::size_type v17 = *((void *)v13 + 1);
    }
    uint64_t v18 = std::string::append(&v23, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)(a3 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    return;
  }
  int v22 = *(void **)v20;

  sub_216778F24((unsigned char *)a3, v22, v21);
}

void sub_217163AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmark::usdBenchmark(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmark *this, const pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *a2, pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *a3)
{
  if (*((char *)a2 + 159) < 0)
  {
    if (*((void *)a2 + 18)) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)a2 + 159))
  {
LABEL_3:
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)a2 + 136, 0, &v14);
    if (*((unsigned char *)a2 + 5))
    {
      v8[0] = 0;
      v8[1] = 0;
      uint64_t v9 = 0;
      sub_216779094(__p, "export");
      pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(v12, __p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      int v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v14);
      pxrInternal__aapl__pxrReserved__::UsdStage::ExportToString(v5, (const char *)v8, 1);
      pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile((pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *)v12);
      if (*((unsigned char *)a2 + 4)) {
        pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::print((uint64_t)a3, (uint64_t)v8);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8[0]);
      }
    }
    sub_216779094(v8, "shutdown");
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(v12, v8);
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
    sub_216779094(__p, "shutdown USD");
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(v8, __p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    sub_217163D44(&v14);
    int v6 = v14;
    unint64_t v14 = 0;
    __p[0] = 0;
    sub_2168BD378((int)&v14, v6);
    sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile((pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *)v8);
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile((pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *)v12);
    sub_216E10FB8(&v14);
    return 0;
  }
  sub_216779094(v12, "usdFilePath is not specified");
  pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::error((uint64_t)a3, (uint64_t)v12);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return 1;
}

void sub_217163C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v30 - 24));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_217163D44(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  int v3 = 0;
  sub_2168BD378((int)a1, v1);
  return sub_216E10FB8(&v3);
}

void sub_217163D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::UsdMetricsConsole(pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *this)
{
  *(unsigned char *)this = 0;
  int v2 = (uint64_t *)((char *)this + 8);
  int v3 = (uint64_t *)((char *)this + 424);
  uint64_t v4 = MEMORY[0x263F8C310] + 64;
  *((void *)this + 53) = MEMORY[0x263F8C310] + 64;
  int v5 = (char *)this + 16;
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *((void *)this + 1) = v7;
  *(uint64_t *)((char *)v2 + *(void *)(v7 - 24)) = v6;
  uint64_t v8 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 1) - 24) + 8);
  std::ios_base::init(v8, (char *)this + 16);
  uint64_t v9 = MEMORY[0x263F8C310] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *int v2 = v9;
  *int v3 = v4;
  MEMORY[0x21D447900](v5);
  return this;
}

void sub_217163EE4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x21D447E60](v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::~UsdMetricsConsole(pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *this)
{
  int v2 = (void *)((char *)this + 8);
  if (*((void *)this + 17) && !std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
  }
  uint64_t v3 = MEMORY[0x263F8C2B0];
  uint64_t v4 = *MEMORY[0x263F8C2B0];
  *((void *)this + 1) = *MEMORY[0x263F8C2B0];
  *(void *)((char *)v2 + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  MEMORY[0x21D447910]((char *)this + 16);
  std::ostream::~ostream();
  MEMORY[0x21D447E60]((char *)this + 424);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::log(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = (void *)MEMORY[0x263F8C100];
  if (v3 && *((void *)a1 + 17)) {
    uint64_t v4 = a1 + 8;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v6 = v5;
  }
  uint64_t v7 = sub_216779180(v4, a2, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_217164108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::print(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v3 = v2;
  }
  uint64_t v4 = sub_216779180(MEMORY[0x263F8C100], a2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_2171641E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_216779180(MEMORY[0x263F8C0F8], (uint64_t)"\x1B[91m", 5);
  uint64_t v4 = sub_216779180(v3, (uint64_t)"Error: ", 7);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = sub_216779180(v4, v6, v7);
  uint64_t v9 = sub_216779180(v8, (uint64_t)"\x1B[0m", 4);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  std::locale v10 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_2171642EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::openFile(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a2 + 23))
  {
    return;
  }
  std::ofstream::open();
  if (*(void *)(a1 + 136))
  {
    *(unsigned char *)a1 = 1;
  }
  else
  {
    std::operator+<char>();
    uint64_t v3 = std::string::append(&v5, "'");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::error((uint64_t)v3, (uint64_t)__p);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2171643CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::CPU@<X0>(void *a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  bzero(__s, 0x400uLL);
  size_t v4 = 1024;
  sysctlbyname("machdep.cpu.brand_string", __s, &v4, 0, 0);
  __s[v4 - 1] = 0;
  return sub_216779094(a1, __s);
}

void *pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::GPU@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "unknown");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::GetVirtualMemory(pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform *this)
{
  mach_msg_type_number_t task_info_outCnt = 12;
  if (task_info(*MEMORY[0x263EF8960], 0x14u, task_info_out, &task_info_outCnt)) {
    return 0;
  }
  else {
    return *(void *)task_info_out;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::GetMaxMemory(pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform *this)
{
  mach_msg_type_number_t task_info_outCnt = 12;
  if (task_info(*MEMORY[0x263EF8960], 0x14u, task_info_out, &task_info_outCnt)) {
    return 0;
  }
  else {
    return v4;
  }
}

void sub_217164550()
{
  sub_216779094(v3, "USDMTLX_READER");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77B7D0, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  uint64_t v0 = sub_217164608();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USDMTLX_READER", "UsdMtlx reader details");
}

void sub_2171645DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217164608()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798DA08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798DA08))
  {
    uint64_t v1 = operator new(4uLL);
    _DWORD *v1 = 0;
    qword_26798DA00 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798DA08);
  }
  return qword_26798DA00;
}

void sub_21716466C(_Unwind_Exception *a1)
{
}

pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::UsdMtlxDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)this);
  *(void *)uint64_t v2 = &unk_26C77B7F0;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = v2 + 24;
  uint64_t v4 = v2 + 48;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  std::string v5 = pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths((pxrInternal__aapl__pxrReserved__ *)v2);
  if ((uint64_t *)v3 != v5) {
    sub_21680F694(v3, (std::string *)*v5, (long long *)v5[1], 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 3));
  }
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdMtlxSearchPaths((pxrInternal__aapl__pxrReserved__ *)v5);
  if ((void *)v4 != v6) {
    sub_21680F694(v4, *(std::string **)v6, *((long long **)v6 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v6 + 1) - *(void *)v6) >> 3));
  }
  return this;
}

void sub_217164748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  sub_216782F20((void ***)va);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(v2, v4);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::DiscoverNodes(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)__p, &v7);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v7)
  {
    sub_216779094(__p, "mtlx");
    sub_216779094(&v14, "mtlx");
    sub_217164D0C((uint64_t *)&v7, (uint64_t)&v10);
    sub_217164A20(a2, (uint64_t *)&v7, (long long *)__p, (uint64_t)&v10);
    sub_2167877AC((uint64_t)&v10, v11);
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v8) {
    sub_216784EC4(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxStandardFileExtensions((uint64_t)&v10);
  sub_216779094(&v7, "USDMTLX_PLUGIN_FOLLOW_SYMLINKS");
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)&v7, 0);
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles(a1 + 24, (uint64_t)&v10, v4, __p);
  if (v9 < 0) {
    operator delete(v7);
  }
  std::string::size_type v7 = &v10;
  sub_216782F20((void ***)&v7);
  std::string v5 = (long long *)__p[0];
  uint64_t v6 = (long long *)__p[1];
  while (v5 != v6)
  {
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)v5 + 24, &v7);
    if (v7)
    {
      sub_217164D0C((uint64_t *)&v7, (uint64_t)&v10);
      sub_217164A20(a2, (uint64_t *)&v7, v5, (uint64_t)&v10);
      sub_2167877AC((uint64_t)&v10, v11);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    v5 += 3;
  }
  std::locale v10 = __p;
  sub_21682E488(&v10);
}

void sub_21716492C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  sub_216BA5A40((void ***)&a15);
  _Unwind_Resume(a1);
}

void sub_217164A20(uint64_t *a1, uint64_t *a2, long long *a3, uint64_t a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95FB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95FB8))
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B95FB0, &dword_216758000);
    __cxa_guard_release(&qword_267B95FB8);
  }
  uint64_t v8 = *a2;
  char v9 = sub_21730D998();
  sub_2171653F0(v8, (uint64_t)v9, (uint64_t *)&v30);
  std::locale v10 = v30;
  for (uint64_t i = v31; v10 != i; v10 += 2)
  {
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v28);
    uint64_t v24 = *v10;
    std::locale v12 = (std::__shared_weak_count *)v10[1];
    uint64_t v25 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t Version = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v24, &v29);
    int v27 = v13;
    unint64_t v14 = (const void **)(*v10 + 48);
    uint64_t v15 = sub_21678C2D8(a4, v14);
    unint64_t v16 = (const void **)(v15 + 56);
    if (a4 + 8 == v15) {
      unint64_t v16 = v14;
    }
    if (*((char *)v16 + 23) < 0)
    {
      sub_216778F24(__p, (void *)*v16, (unint64_t)v16[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v16;
      std::string v23 = v16[2];
    }
    sub_2171651F0(*v10);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
    std::string::size_type v17 = (uint64_t *)sub_21716527C();
    uint64_t v18 = (uint64_t *)sub_21716527C();
    unint64_t v19 = a1[1];
    if (v19 >= a1[2])
    {
      uint64_t v20 = sub_2171657B4(a1, &v28, &Version, (long long *)__p, &v21, v17, v18, a3, (long long *)((char *)a3 + 24));
    }
    else
    {
      sub_217165930((uint64_t)(a1 + 2), v19, &v28, &Version, (long long *)__p, &v21, v17, v18, a3, (long long *)((char *)a3 + 24));
      uint64_t v20 = v19 + 216;
      a1[1] = v19 + 216;
    }
    a1[1] = v20;
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (v25) {
      sub_216784EC4(v25);
    }
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  __p[0] = &v30;
  sub_216787968((void ***)__p);
}

void sub_217164C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)(v25 + 8) = v26;
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    sub_216784EC4(a20);
  }
  if ((a23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __p = &a25;
  sub_216787968((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_217164D0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v2 = *a1;
  uint64_t v3 = sub_21730D998();
  sub_2171653F0(v2, (uint64_t)v3, (uint64_t *)&v33);
  BOOL v4 = v33;
  std::string v5 = v34;
  if (v33 != v34)
  {
    int64_t v31 = v34;
    do
    {
      if (sub_217165A34(*v4))
      {
        uint64_t v7 = *v4;
        uint64_t v6 = (std::__shared_weak_count *)v4[1];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95FE0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B95FE0))
        {
          sub_216779094(byte_267B95FC8, "inherit");
          __cxa_atexit(MEMORY[0x263F8C0B8], byte_267B95FC8, &dword_216758000);
          __cxa_guard_release(&qword_267B95FE0);
        }
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = v7 + 48;
        uint64_t v9 = v7;
        std::locale v10 = v6;
        do
        {
          char v11 = sub_2170396E4((void *)(v9 + 160), byte_267B95FC8);
          if (v11) {
            std::locale v12 = (long long *)(v11 + 40);
          }
          else {
            std::locale v12 = sub_21730D998();
          }
          if (*((char *)v12 + 23) < 0)
          {
            if (!*((void *)v12 + 1)) {
              break;
            }
          }
          else if (!*((unsigned char *)v12 + 23))
          {
            break;
          }
          sub_2172F5870(v9, &v35);
          int v13 = sub_2170396E4(v35 + 12, (unsigned __int8 *)v12);
          if (v13)
          {
            uint64_t v15 = *((void *)v13 + 5);
            unint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            unint64_t v14 = 0;
            uint64_t v15 = 0;
          }
          if (v36) {
            sub_216784EC4(v36);
          }
          if (v15)
          {
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v10) {
              sub_216784EC4(v10);
            }
            if (*(char *)(v15 + 71) < 0) {
              unint64_t v16 = *(void *)(v15 + 56);
            }
            else {
              unint64_t v16 = *(unsigned __int8 *)(v15 + 71);
            }
            if (*(char *)(v8 + 23) < 0) {
              unint64_t v17 = *(void *)(v8 + 8);
            }
            else {
              unint64_t v17 = *(unsigned __int8 *)(v8 + 23);
            }
            if (v16 < v17) {
              uint64_t v8 = v15 + 48;
            }
            uint64_t v9 = v15;
            std::locale v10 = v14;
          }
          if (v14) {
            sub_216784EC4(v14);
          }
        }
        while (v15);
        uint64_t v18 = sub_216856170((uint64_t **)a2, (const void **)(v7 + 48), (long long *)(v7 + 48), (long long *)v8);
        if (!v19)
        {
          unint64_t v20 = *(char *)(v8 + 23) < 0 ? *(void *)(v8 + 8) : *(unsigned __int8 *)(v8 + 23);
          unint64_t v21 = *((char *)v18 + 79) < 0 ? v18[8] : *((unsigned __int8 *)v18 + 79);
          if (v20 < v21) {
            std::string::operator=((std::string *)(v18 + 7), (const std::string *)v8);
          }
        }
        do
        {
          int v22 = sub_2170396E4((void *)(v7 + 160), byte_267B95FC8);
          if (v22) {
            std::string v23 = (long long *)(v22 + 40);
          }
          else {
            std::string v23 = sub_21730D998();
          }
          if (*((char *)v23 + 23) < 0)
          {
            if (!*((void *)v23 + 1)) {
              break;
            }
          }
          else if (!*((unsigned char *)v23 + 23))
          {
            break;
          }
          sub_2172F5870(v7, &v35);
          uint64_t v24 = sub_2170396E4(v35 + 12, (unsigned __int8 *)v23);
          if (v24)
          {
            uint64_t v25 = *((void *)v24 + 5);
            uint64_t v26 = (std::__shared_weak_count *)*((void *)v24 + 6);
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v25 = 0;
            uint64_t v26 = 0;
          }
          if (v36) {
            sub_216784EC4(v36);
          }
          if (v25)
          {
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v6) {
              sub_216784EC4(v6);
            }
            int v27 = sub_216856170((uint64_t **)a2, (const void **)(v25 + 48), (long long *)(v25 + 48), (long long *)v8);
            uint64_t v6 = v26;
            uint64_t v7 = v25;
            if (!v28)
            {
              unint64_t v29 = *(char *)(v8 + 23) < 0 ? *(void *)(v8 + 8) : *(unsigned __int8 *)(v8 + 23);
              unint64_t v30 = *((char *)v27 + 79) < 0 ? v27[8] : *((unsigned __int8 *)v27 + 79);
              uint64_t v6 = v26;
              uint64_t v7 = v25;
              if (v29 < v30)
              {
                std::string::operator=((std::string *)(v27 + 7), (const std::string *)v8);
                uint64_t v6 = v26;
                uint64_t v7 = v25;
              }
            }
          }
          if (v26) {
            sub_216784EC4(v26);
          }
        }
        while (v25);
        if (v10) {
          sub_216784EC4(v10);
        }
        std::string v5 = v31;
        if (v6) {
          sub_216784EC4(v6);
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  uint64_t v35 = (void **)&v33;
  sub_216787968(&v35);
}

void sub_2171650CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  __cxa_guard_abort(&qword_267B95FE0);
  if (v15) {
    sub_216784EC4(v15);
  }
  a15 = (void **)&a12;
  sub_216787968(&a15);
  sub_2167877AC(a11, *(void **)(a11 + 8));
  _Unwind_Resume(a1);
}

void sub_21716517C()
{
  if (v1)
  {
    sub_216784EC4(v1);
    if (!v0) {
      JUMPOUT(0x217165144);
    }
    JUMPOUT(0x21716513CLL);
  }
  JUMPOUT(0x217165138);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::GetSearchURIs(pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *this)
{
  return (uint64_t)this + 48;
}

uint64_t sub_21716519C()
{
  uint64_t v0 = sub_217165AB4();

  return sub_217165BE0(v0);
}

void sub_2171651C8(void **a1)
{
  sub_217165D44(a1);

  operator delete(v1);
}

long long *sub_2171651F0(uint64_t a1)
{
  sub_216779094(__p, off_26798DB48[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    uint64_t v3 = (long long *)(v2 + 40);
  }
  else {
    uint64_t v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_217165260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_21716527C()
{
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B95FC0);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "mtlx", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    char v6 = (void **)(v0 + 8);
    char v7 = 0;
    uint64_t v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    *uint64_t v3 = v2;
    BOOL v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B95FC0, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      char v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B95FC0);
    }
  }
  return (unint64_t)v0;
}

void sub_2171653A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2171653F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 136);
  BOOL v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      char v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F356C(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      int v13 = (const void **)(v8 + 24);
      unint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        int v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_217165554(a3, &v15);
    goto LABEL_22;
  }
}

void sub_21716551C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void **sub_217165554(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    unint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_217165670(a1, v18);
    int v9 = (void *)a1[1];
    double result = sub_216788028(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_21716565C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217165670(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171656E8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171656E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21716577C((uint64_t)v12);
  return v10;
}

uint64_t sub_21716577C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t sub_2171657B4(uint64_t *a1, uint64_t *a2, uint64_t *a3, long long *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, long long *a8, long long *a9)
{
  unint64_t v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684) {
    sub_21677CB10();
  }
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11) {
    unint64_t v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  }
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42) {
    unint64_t v19 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v19 = v11;
  }
  char v28 = a1 + 2;
  if (v19)
  {
    unint64_t v23 = v10;
    unint64_t v20 = (char *)sub_216BA76E0((uint64_t)(a1 + 2), v19);
    unint64_t v10 = v23;
  }
  else
  {
    unint64_t v20 = 0;
  }
  uint64_t v24 = v20;
  uint64_t v25 = &v20[216 * v10];
  int v27 = &v20[216 * v19];
  sub_217165930((uint64_t)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v26 = v25 + 216;
  sub_216BA7640(a1, &v24);
  uint64_t v21 = a1[1];
  sub_216BA7820((uint64_t)&v24);
  return v21;
}

void sub_21716591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BA7820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217165930(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, long long *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, long long *a9, long long *a10)
{
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  long long __p = 0uLL;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  sub_216BA6EEC(a2, a3, a4, a5, a6, a7, a8, a9, a10, &v15, (uint64_t)v13, &__p, &v10);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  sub_216BA5BB8((uint64_t)v13);
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_2171659FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21732491C((uint64_t)va, (uint64_t)va1, (uint64_t)va2, v7 - 40);
  _Unwind_Resume(a1);
}

BOOL sub_217165A34(uint64_t a1)
{
  sub_216779094(__p, off_26798DB78[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_217165A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_217165AB4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216BA541C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_217165B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_217165BE0(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C77B838;
  char v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  char v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_217165C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_217165C90(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_217165CB8@<X0>(pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin **a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::UsdMtlxDiscoveryPlugin(v2);
  *a1 = v2;
  char v4 = 0;
  return sub_217165D14(&v4);
}

void sub_217165D00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_217165D14(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_217165D44(void **a1)
{
  *a1 = &unk_26C77B7F0;
  uint64_t v2 = a1 + 3;
  char v4 = a1 + 6;
  sub_216782F20(&v4);
  char v4 = v2;
  sub_216782F20(&v4);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin((pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *)a1, v3);
}

void sub_217165DB0()
{
  if (!atomic_load((unint64_t *)off_26798DA10)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  char v5 = (_DWORD **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    a2 = *(char **)(a1 + 104);
    if (a2)
    {
      int v7 = *v5;
      if (a2 != (char *)4 || *v7 != 2020373613)
      {
        sub_216778F24(__p, v7, (unint64_t)a2);
        goto LABEL_18;
      }
LABEL_17:
      sub_216779094(__p, "");
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a1 + 119))
  {
    if (*(unsigned char *)(a1 + 119) != 4 || *(_DWORD *)v5 != 2020373613)
    {
      *(_OWORD *)long long __p = *(_OWORD *)v5;
      v108[0] = *(void **)(a1 + 112);
LABEL_18:
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)__p, &v130);
      std::string::size_type size = (std::__shared_weak_count *)v130.__r_.__value_.__l.__size_;
      uint64_t v11 = (void *)v130.__r_.__value_.__r.__words[0];
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = 0uLL;
      if (SHIBYTE(v108[0]) < 0) {
        operator delete(__p[0]);
      }
      if (v11)
      {
LABEL_21:
        if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
        }
        sub_2171680B4((uint64_t)v11, (unsigned __int8 *)EmptyString, &v115);
        if (!v115)
        {
          __p[0] = "usdMtlx/parser.cpp";
          __p[1] = "Parse";
          v108[0] = (void *)585;
          v108[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeD"
                    "iscoveryResult &)";
          LOBYTE(v109[0]) = 0;
          unint64_t v27 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
          if (v27)
          {
            char v28 = (const char *)(v27 + 16);
            if (*(char *)(v27 + 39) < 0) {
              char v28 = *(const char **)v28;
            }
          }
          else
          {
            char v28 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid MaterialX NodeDef; unknown node name ' %s '",
            v14,
            v28);
          pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a3);
          goto LABEL_235;
        }
        __p[0] = (void *)a1;
        LOBYTE(__p[1]) = 1;
        *(_OWORD *)long long v108 = 0u;
        *(_OWORD *)int64x2_t v109 = 0u;
        long long v110 = 0u;
        memset(v111, 0, sizeof(v111));
        sub_216BA71F4((uint64_t)v112, a1 + 144);
        v114[0] = 0;
        v114[1] = 0;
        uint64_t v113 = v114;
        uint64_t v16 = v115;
        long long v15 = v116;
        if (v116) {
          atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v16)
        {
          v130.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/parser.cpp";
          v130.__r_.__value_.__l.__size_ = (std::string::size_type)"ParseElement";
          v130.__r_.__value_.__r.__words[2] = 433;
          int v131 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ParseElement(ShaderBuilder *, const mx::C"
                 "onstNodeDefPtr &)";
          LOBYTE(v132) = 0;
          if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v130, "nodeDef", 0) & 1) == 0)
          {
LABEL_223:
            if (v15) {
              sub_216784EC4(v15);
            }
            if (LOBYTE(__p[1]))
            {
              double v103 = operator new(0x220uLL);
              memset(&v130, 0, sizeof(v130));
              pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode((uint64_t)v103, (uint64_t *)__p[0], (uint64_t *)__p[0] + 1, (long long *)((char *)__p[0] + 24), (uint64_t *)__p[0] + 6, (uint64_t *)v111, (uint64_t *)__p[0] + 8, (long long *)v108, (long long *)&v109[1], (uint64_t)v111 + 8, (uint64_t)v112, (long long *)&v130);
              *a3 = v103;
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v130.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode((uint64_t)__p[0], a3);
            }
            sub_2167877AC((uint64_t)&v113, v114[0]);
            sub_216BA5BB8((uint64_t)v112);
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v111 + 8;
            sub_216BA861C((void ***)&v130);
            if ((v111[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v111[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (SHIBYTE(v110) < 0) {
              operator delete(v109[1]);
            }
            if (SHIBYTE(v109[0]) < 0) {
              operator delete(v108[0]);
            }
LABEL_235:
            if (v116) {
              sub_216784EC4(v116);
            }
            goto LABEL_237;
          }
        }
        long long v17 = (unsigned __int8 *)(*(uint64_t (**)(std::string *))(v16->__r_.__value_.__r.__words[0] + 56))(v16);
        sub_2172F4170((uint64_t)v16, &v130);
        sub_217168150((uint64_t *)&v130, v17, &v129);
        if (v130.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
        }
        if (!v129)
        {
          uint64_t v18 = sub_216779094(&v130, "");
          pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)v18, &v126);
          sub_217168150((uint64_t *)&v126, v17, &__str);
          if ((v129 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          std::string::size_type v129 = __str.__r_.__value_.__r.__words[0];
          __str.__r_.__value_.__r.__words[0] = 0;
          if (v127) {
            sub_216784EC4(v127);
          }
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__r_.__value_.__l.__data_);
          }
          if (!v129)
          {
            unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
            if (!v19) {
              unint64_t v19 = sub_216FA376C(&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
            }
            sub_2168D2318(&v129, v19);
          }
        }
        sub_2168D2318(v111, &v129);
        v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v130.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SourceURI = (const std::string *)pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI((uint64_t *)&v130);
        std::string::operator=((std::string *)v108, SourceURI);
        if (v130.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
        }
        std::string::operator=((std::string *)&v109[1], (const std::string *)v108);
        uint64_t v21 = sub_2171651F0((uint64_t)v16);
        int v22 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        if (!v22) {
          int v22 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        }
        v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v22 + 32;
        unint64_t v23 = (std::string *)sub_216F95C60((uint64_t)v112, (void *)v22 + 4, (uint64_t)&unk_2174BFD90, (uint64_t **)&v130);
        std::string::operator=(v23 + 1, (const std::string *)v21);
        uint64_t v24 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        if (!v24) {
          uint64_t v24 = (uint64_t *)sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        }
        v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v130.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
        if ((*((void *)v25 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v26 = (uint64_t *)((*((void *)v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v25);
        }
        sub_2171682C4((uint64_t)__p, v24, (uint64_t)&v130, (unsigned __int8 *)v26);
        if (v15) {
          sub_216784EC4(v15);
        }
        unint64_t v29 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        if (!v29) {
          unint64_t v29 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        }
        v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v130.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v30 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
        if ((*((void *)v30 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
          int64_t v31 = (uint64_t *)((*((void *)v30 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          int64_t v31 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v30);
        }
        sub_2171682C4((uint64_t)__p, (uint64_t *)v29 + 3, (uint64_t)&v130, (unsigned __int8 *)v31);
        if (v130.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
        }
        char v32 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        if (!v32) {
          char v32 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        }
        v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v130.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
        if ((*((void *)v33 + 9) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v34 = (uint64_t *)((*((void *)v33 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v34 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        }
        sub_2171682C4((uint64_t)__p, (uint64_t *)v32 + 8, (uint64_t)&v130, (unsigned __int8 *)v34);
        if (v130.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
        }
        uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        if (!v35) {
          uint64_t v35 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        }
        v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v130.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
        if ((*((void *)v36 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v37 = (uint64_t *)((*((void *)v36 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
        }
        sub_2171682C4((uint64_t)__p, (uint64_t *)v35 + 1, (uint64_t)&v130, (unsigned __int8 *)v37);
        std::string::size_type v38 = v130.__r_.__value_.__l.__size_;
        if (v130.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
        }
        int v126 = 0;
        uint64_t v127 = 0;
        unint64_t v128 = 0;
        int v39 = HIBYTE(v16[2].__r_.__value_.__r.__words[2]);
        unint64_t v40 = v16[2].__r_.__value_.__l.__size_;
        if ((v39 & 0x80u) == 0) {
          unint64_t v40 = HIBYTE(v16[2].__r_.__value_.__r.__words[2]);
        }
        if (v40 >= 0x10)
        {
          uint64_t v41 = (v39 & 0x80u) == 0 ? (const char *)&v16[2] : (const char *)v16[2].__r_.__value_.__r.__words[0];
          std::string::size_type v38 = strncmp(v41, "ND_geompropvalue", 0x10uLL);
          if (!v38)
          {
            std::string::size_type v38 = (std::string::size_type)sub_216779094(&__str, "$geomprop");
            uint64_t v42 = v127;
            if ((unint64_t)v127 >= v128)
            {
              unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127 - (char *)v126) >> 3);
              unint64_t v47 = v46 + 1;
              if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              if (0x5555555555555556 * ((uint64_t)(v128 - (void)v126) >> 3) > v47) {
                unint64_t v47 = 0x5555555555555556 * ((uint64_t)(v128 - (void)v126) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v128 - (void)v126) >> 3) >= 0x555555555555555) {
                unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v48 = v47;
              }
              v132 = &v128;
              if (v48) {
                __n128 v49 = (char *)sub_216782ED8((uint64_t)&v128, v48);
              }
              else {
                __n128 v49 = 0;
              }
              std::string::size_type v50 = (std::string::size_type)&v49[24 * v46];
              v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
              v130.__r_.__value_.__l.__size_ = v50;
              int v131 = &v49[24 * v48];
              long long v51 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              *(void *)(v50 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
              *(_OWORD *)std::string::size_type v50 = v51;
              memset(&__str, 0, sizeof(__str));
              v130.__r_.__value_.__r.__words[2] = v50 + 24;
              sub_216790CCC((uint64_t *)&v126, &v130);
              uint64_t v52 = v127;
              std::string::size_type v38 = sub_216790E64((uint64_t)&v130);
              uint64_t v127 = v52;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              std::__shared_count v43 = *(std::__shared_count *)&__str.__r_.__value_.__l.__data_;
              v127->__shared_weak_owners_ = __str.__r_.__value_.__r.__words[2];
              v42->std::__shared_count = v43;
              uint64_t v127 = v42 + 1;
            }
            int v39 = HIBYTE(v16[2].__r_.__value_.__r.__words[2]);
          }
        }
        long long v53 = (std::string::__raw *)&v16[2];
        if ((v39 & 0x80) != 0)
        {
          if (v16[2].__r_.__value_.__l.__size_ != 19) {
            goto LABEL_135;
          }
          long long v53 = (std::string::__raw *)v53->__words[0];
        }
        else if (v39 != 19)
        {
          goto LABEL_135;
        }
        char v54 = (std::string::__raw *)v53->__words[0];
        std::string::size_type v55 = v53->__words[1];
        uint64_t v56 = *(std::string::size_type *)((char *)&v53->__words[1] + 3);
        if (v54 == (std::string::__raw *)0x6F637865745F444ELL
          && v55 == 0x746365765F64726FLL
          && v56 == 0x32726F746365765FLL)
        {
          sub_217168420((pxrInternal__aapl__pxrReserved__ *)v38, (uint64_t)&v130);
          uint64_t v59 = v127;
          if ((unint64_t)v127 >= v128)
          {
            int v61 = (std::__shared_weak_count *)sub_2167E9A44((uint64_t *)&v126, (long long *)&v130);
          }
          else
          {
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_216778F24(v127, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
            }
            else
            {
              std::__shared_count v60 = *(std::__shared_count *)&v130.__r_.__value_.__l.__data_;
              v127->__shared_weak_owners_ = v130.__r_.__value_.__r.__words[2];
              v59->std::__shared_count = v60;
            }
            int v61 = v59 + 1;
          }
          uint64_t v127 = v61;
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__r_.__value_.__l.__data_);
          }
        }
LABEL_135:
        uint64_t v62 = sub_21730D998();
        sub_2172DF0A4(v16, (uint64_t)v62, &v123);
        uint64_t v63 = v123;
        if (!v123) {
          goto LABEL_187;
        }
        std::string v64 = sub_21730D998();
        if (!sub_2171685A4(v63, (unsigned __int8 *)v64))
        {
          LOBYTE(v63) = 0;
          goto LABEL_187;
        }
        sub_2172F3618(v123, &v121);
        uint64_t v65 = v121;
        sub_216779094(&__str, "geompropvalue");
        sub_217169D68(v65, (uint64_t)&__str, (uint64_t *)&v130);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        float64x2_t v106 = a3;
        std::string::size_type v67 = v130.__r_.__value_.__l.__size_;
        std::string::size_type v66 = v130.__r_.__value_.__r.__words[0];
        if (v130.__r_.__value_.__r.__words[0] != v130.__r_.__value_.__l.__size_)
        {
          char v68 = 0;
          while (1)
          {
            uint64_t v69 = *(void *)v66;
            sub_216779094(&__str, "geomprop");
            sub_21716A12C(v69, (unsigned __int8 *)&__str, &v119);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (!v119) {
              goto LABEL_163;
            }
            uint64_t v70 = sub_217168678((uint64_t)v119);
            uint64_t v71 = v127;
            if ((unint64_t)v127 >= v128)
            {
              uint64_t v73 = (std::__shared_weak_count *)sub_2167E9A44((uint64_t *)&v126, v70);
            }
            else
            {
              if (*((char *)v70 + 23) < 0)
              {
                sub_216778F24(v127, *(void **)v70, *((void *)v70 + 1));
              }
              else
              {
                long long v72 = *v70;
                v127->__shared_weak_owners_ = *((void *)v70 + 2);
                v71->std::__shared_count = (std::__shared_count)v72;
              }
              uint64_t v73 = v71 + 1;
            }
            uint64_t v127 = v73;
            uint64_t v74 = (*(uint64_t (**)(void))(**(void **)v66 + 56))();
            int v75 = *(char *)(v74 + 23);
            if (v75 < 0)
            {
              if (*(void *)(v74 + 8) == 7)
              {
                uint64_t v74 = *(void *)v74;
LABEL_155:
                unsigned int v76 = bswap32(*(_DWORD *)v74);
                unsigned int v77 = 1986356084;
                if (v76 == 1986356084 && (v76 = bswap32(*(_DWORD *)(v74 + 3)), unsigned int v77 = 1953460786, v76 == 1953460786))
                {
                  int v78 = 0;
                }
                else if (v76 < v77)
                {
                  int v78 = -1;
                }
                else
                {
                  int v78 = 1;
                }
                if (!v78) {
                  char v68 = 1;
                }
              }
            }
            else if (v75 == 7)
            {
              goto LABEL_155;
            }
LABEL_163:
            if (v120) {
              sub_216784EC4(v120);
            }
            v66 += 16;
            if (v66 == v67) {
              goto LABEL_169;
            }
          }
        }
        char v68 = 0;
LABEL_169:
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
        sub_216787968((void ***)&__str);
        uint64_t v79 = v121;
        sub_216779094(&__str, "texcoord");
        sub_217169D68(v79, (uint64_t)&__str, (uint64_t *)&v130);
        long long v80 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
        uint64_t v119 = &v130;
        sub_216787968((void ***)&v119);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (*((void *)&v80 + 1) == (void)v80)
        {
          if (v68) {
            goto LABEL_184;
          }
          uint64_t v84 = v121;
          sub_216779094(&__str, "tiledimage");
          sub_217169D68(v84, (uint64_t)&__str, (uint64_t *)&v130);
          if (v130.__r_.__value_.__l.__size_ == v130.__r_.__value_.__r.__words[0])
          {
            uint64_t v104 = v121;
            sub_216779094(v117, "image");
            sub_217169D68(v104, (uint64_t)v117, (uint64_t *)&v119);
            BOOL v85 = v120 != (std::__shared_weak_count *)v119;
            v133 = &v119;
            sub_216787968((void ***)&v133);
            if (v118 < 0) {
              operator delete(v117[0]);
            }
          }
          else
          {
            BOOL v85 = 1;
          }
          uint64_t v119 = &v130;
          sub_216787968((void ***)&v119);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (!v85) {
            goto LABEL_184;
          }
          sub_217168420(v105, (uint64_t)&v130);
          int v82 = v127;
          if ((unint64_t)v127 < v128)
          {
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_174;
            }
            goto LABEL_179;
          }
        }
        else
        {
          sub_217168420(v81, (uint64_t)&v130);
          int v82 = v127;
          if ((unint64_t)v127 < v128)
          {
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_174:
              std::__shared_count v83 = *(std::__shared_count *)&v130.__r_.__value_.__l.__data_;
              v82->__shared_weak_owners_ = v130.__r_.__value_.__r.__words[2];
              v82->std::__shared_count = v83;
LABEL_180:
              int v86 = v82 + 1;
              goto LABEL_181;
            }
LABEL_179:
            sub_216778F24(v127, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
            goto LABEL_180;
          }
        }
        int v86 = (std::__shared_weak_count *)sub_2167E9A44((uint64_t *)&v126, (long long *)&v130);
LABEL_181:
        uint64_t v127 = v86;
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        char v68 = 1;
LABEL_184:
        if (v122) {
          sub_216784EC4(v122);
        }
        LOBYTE(v63) = v68;
        a3 = v106;
LABEL_187:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96030, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B96030))
        {
          sub_216779094(byte_267B96018, "internalgeomprops");
          __cxa_atexit(MEMORY[0x263F8C0B8], byte_267B96018, &dword_216758000);
          __cxa_guard_release(&qword_267B96030);
        }
        int v87 = sub_2170396E4(&v16[6].__r_.__value_.__r.__words[2], byte_267B96018);
        if (v87) {
          long long v88 = (long long *)(v87 + 40);
        }
        else {
          long long v88 = sub_21730D998();
        }
        if (*((char *)v88 + 23) < 0)
        {
          if (!*((void *)v88 + 1))
          {
LABEL_203:
            sub_217305764((uint64_t)v16, (uint64_t *)&v130);
            std::string::size_type v95 = v130.__r_.__value_.__l.__size_;
            for (uint64_t i = (std::string::size_type *)v130.__r_.__value_.__r.__words[0];
                  i != (std::string::size_type *)v95;
                  i += 2)
            {
              __str.__r_.__value_.__r.__words[0] = *i;
              uint64_t v96 = (std::__shared_weak_count *)i[1];
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)v96;
              if (v96) {
                atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_217168704((uint64_t *)__p, (uint64_t *)&__str, 0, (uint64_t *)&v126, v63);
              if (v96) {
                sub_216784EC4(v96);
              }
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
            sub_216787968((void ***)&__str);
            sub_2173059C4((uint64_t)v16, (uint64_t *)&v130);
            std::string::size_type v98 = v130.__r_.__value_.__l.__size_;
            for (j = (std::string::size_type *)v130.__r_.__value_.__r.__words[0];
                  j != (std::string::size_type *)v98;
                  j += 2)
            {
              __str.__r_.__value_.__r.__words[0] = *j;
              char v99 = (std::__shared_weak_count *)j[1];
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
              if (v99) {
                atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_217168704((uint64_t *)__p, (uint64_t *)&__str, 1, 0, 0);
              if (v99) {
                sub_216784EC4(v99);
              }
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
            sub_216787968((void ***)&__str);
            sub_216881C38("|", v126, (std::string *)v127, &v130);
            uint64_t v100 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
            if (!v100) {
              uint64_t v100 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
            }
            uint64_t v119 = (std::string *)((char *)v100 + 48);
            char v101 = sub_216F95C60((uint64_t)v112, (void *)v100 + 6, (uint64_t)&unk_2174BFD90, (uint64_t **)&v119);
            int v102 = (void **)(v101 + 3);
            if (*((char *)v101 + 47) < 0) {
              operator delete(*v102);
            }
            *(std::string *)int v102 = v130;
            if (v124) {
              sub_216784EC4(v124);
            }
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
            sub_216782F20((void ***)&v130);
            if ((v129 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            goto LABEL_223;
          }
        }
        else if (!*((unsigned char *)v88 + 23))
        {
          goto LABEL_203;
        }
        pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray((std::string *)v88, (uint64_t *)&v130);
        std::string::size_type v89 = v130.__r_.__value_.__l.__size_;
        uint64_t v90 = (std::string *)v130.__r_.__value_.__r.__words[0];
        if (v130.__r_.__value_.__r.__words[0] == v130.__r_.__value_.__l.__size_)
        {
          int v93 = (std::string *)v130.__r_.__value_.__r.__words[0];
        }
        else
        {
          do
          {
            unint64_t v91 = sub_21716746C();
            uint64_t v92 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v91 + 152), (unsigned __int8 *)v90);
            if (v92)
            {
              sub_217168420(v92, (uint64_t)&__str);
              std::string::operator=(v90, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            ++v90;
          }
          while (v90 != (std::string *)v89);
          uint64_t v90 = (std::string *)v130.__r_.__value_.__l.__size_;
          int v93 = (std::string *)v130.__r_.__value_.__r.__words[0];
        }
        sub_216866204((uint64_t *)&v126, (std::string *)v127, v93, (long long *)v90, 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)v93) >> 3));
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
        sub_216782F20((void ***)&__str);
        goto LABEL_203;
      }
      __p[0] = "usdMtlx/parser.cpp";
      __p[1] = "Parse";
      v108[0] = (void *)566;
      v108[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeDiscoveryResult &)";
      LOBYTE(v109[0]) = 0;
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "document", 0);
      if (v9)
      {
        uint64_t v11 = 0;
        goto LABEL_21;
      }
      pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a3);
LABEL_237:
      if (size) {
        sub_216784EC4(size);
      }
      return;
    }
    goto LABEL_17;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 143);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 128);
  }
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocumentFromString((const std::string *)(a1 + 120), __p);
    uint64_t v11 = __p[0];
    std::string::size_type size = (std::__shared_weak_count *)__p[1];
    if (__p[0]) {
      goto LABEL_21;
    }
    __p[0] = "usdMtlx/parser.cpp";
    __p[1] = "Parse";
    v108[0] = (void *)572;
    v108[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeDiscoveryResult &)";
    LOBYTE(v109[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid mtlx source code.", v10);
    pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a3);
    goto LABEL_237;
  }
  __p[0] = "usdMtlx/parser.cpp";
  __p[1] = "Parse";
  v108[0] = (void *)578;
  v108[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeDiscoveryResult &)";
  LOBYTE(v109[0]) = 0;
  unint64_t v44 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (v44)
  {
    uint64_t v45 = (const char *)(v44 + 16);
    if (*(char *)(v44 + 39) < 0) {
      uint64_t v45 = *(const char **)v45;
    }
  }
  else
  {
    uint64_t v45 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid NdrNodeDiscoveryResult for identifier '%s': both resolvedUri and sourceCode fields are empty.", a2, v45);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a3);
}

void sub_217166E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  __cxa_guard_abort(&qword_267B96030);
  char v54 = *(std::__shared_weak_count **)(v52 - 208);
  if (v54) {
    sub_216784EC4(v54);
  }
  *(void *)(v52 - 200) = v52 - 176;
  sub_216782F20((void ***)(v52 - 200));
  uint64_t v55 = *(void *)(v52 - 152);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v51) {
    sub_216784EC4(v51);
  }
  sub_2171672AC((uint64_t)&a17);
  if (a45) {
    sub_216784EC4(a45);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171672AC(uint64_t a1)
{
  sub_2167877AC(a1 + 136, *(void **)(a1 + 144));
  sub_216BA5BB8(a1 + 96);
  char v4 = (void **)(a1 + 72);
  sub_216BA861C(&v4);
  uint64_t v2 = *(void *)(a1 + 64);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::GetDiscoveryTypes(pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin *this)
{
  v4[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96000, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96000))
  {
    uint64_t v2 = *(void *)sub_21716746C();
    v4[0] = v2;
    if ((v2 & 7) != 0)
    {
      uint64_t v3 = (atomic_uint *)(v2 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
        v4[0] = (uint64_t)v3;
      }
    }
    sub_216D30CFC(qword_267B95FE8, v4, 1uLL);
    if ((v4[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B95FE8, &dword_216758000);
    __cxa_guard_release(&qword_267B96000);
  }
  return qword_267B95FE8;
}

void sub_217167434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B96000);
  _Unwind_Resume(a1);
}

unint64_t sub_21716746C()
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v0 = (unint64_t *)atomic_load((unint64_t *)&qword_267B96008);
  if (!v0)
  {
    uint64_t v0 = (unint64_t *)operator new(0xB8uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "mtlx", 0);
    unint64_t v46 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "", 0);
    uint64_t v45 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "defaultgeomprop", 0);
    unint64_t v44 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "defaultinput", 0);
    std::__shared_count v43 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "doc", 0);
    uint64_t v42 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "enum", 0);
    uint64_t v41 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "enumvalues", 0);
    unint64_t v40 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "nodecategory", 0);
    int v39 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "nodegroup", 0);
    std::string::size_type v38 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "target", 0);
    uint64_t v37 = (uint64_t *)(v0 + 10);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 10, "uifolder", 0);
    unint64_t v36 = (uint64_t *)(v0 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 11, "uimax", 0);
    uint64_t v35 = (uint64_t *)(v0 + 12);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 12, "uimin", 0);
    uint64_t v2 = (uint64_t *)(v0 + 13);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 13, "uiname", 0);
    uint64_t v3 = (uint64_t *)(v0 + 14);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 14, "uisoftmax", 0);
    char v4 = (uint64_t *)(v0 + 15);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 15, "uisoftmin", 0);
    char v5 = (uint64_t *)(v0 + 16);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "uistep", 0);
    uint64_t v6 = (uint64_t *)(v0 + 17);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 17, "unit", 0);
    int v7 = (uint64_t *)(v0 + 18);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 18, "unittype", 0);
    uint64_t v8 = (uint64_t *)(v0 + 19);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 19, "UV0", 0);
    unint64_t v9 = *v0;
    unint64_t v47 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v10 = *v46;
    uint64_t v48 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *v45;
    uint64_t v49 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = *v44;
    uint64_t v50 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *v43;
    uint64_t v51 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = *v42;
    uint64_t v52 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v52 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *v41;
    uint64_t v53 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = *v40;
    uint64_t v54 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = *v39;
    uint64_t v55 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v18 = *v38;
    uint64_t v56 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v56 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v19 = *v37;
    uint64_t v57 = v19;
    if ((v19 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v57 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v20 = *v36;
    uint64_t v58 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v58 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v21 = *v35;
    uint64_t v59 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v59 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v22 = *v2;
    uint64_t v60 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v60 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v23 = *v3;
    uint64_t v61 = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v61 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v24 = *v4;
    uint64_t v62 = v24;
    if ((v24 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v62 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v25 = *v5;
    uint64_t v63 = v25;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v63 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v26 = *v6;
    uint64_t v64 = v26;
    if ((v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v64 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v27 = *v7;
    uint64_t v65 = v27;
    if ((v27 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v65 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v28 = *v8;
    uint64_t v66 = v28;
    if ((v28 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v66 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[20] = 0;
    v0[21] = 0;
    v0[22] = 0;
    unint64_t v29 = (char *)operator new(0xA0uLL);
    uint64_t v30 = 0;
    v0[20] = (unint64_t)v29;
    v0[21] = (unint64_t)v29;
    v0[22] = (unint64_t)(v29 + 160);
    do
    {
      unint64_t v31 = *(unint64_t *)((char *)&v47 + v30);
      *(void *)&v29[v30] = v31;
      if ((v31 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v29[v30] &= 0xFFFFFFFFFFFFFFF8;
      }
      v30 += 8;
    }
    while (v30 != 160);
    v0[21] = (unint64_t)(v29 + 160);
    for (uint64_t i = 152; i != -8; i -= 8)
    {
      unint64_t v33 = *(unint64_t *)((char *)&v47 + i);
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v34 = 0;
    atomic_compare_exchange_strong(&qword_267B96008, (unint64_t *)&v34, (unint64_t)v0);
    if (v34)
    {
      unint64_t v47 = (unint64_t)(v0 + 20);
      sub_216889A04((void ***)&v47);
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B96008);
    }
  }
  return (unint64_t)v0;
}

void sub_217167D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void **a21,uint64_t a22,char a23)
{
  sub_216889A04(&a21);
  uint64_t v32 = 152;
  while (1)
  {
    uint64_t v33 = *(void *)(&a23 + v32);
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v32 -= 8;
    if (v32 == -8)
    {
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v23);
      _Unwind_Resume(a1);
    }
  }
}

void sub_217167FE4()
{
}

void sub_217167FEC()
{
}

void sub_217167FF4()
{
}

void sub_217167FFC()
{
}

void sub_217168004()
{
}

void sub_21716800C()
{
}

void sub_217168014()
{
}

void sub_21716801C()
{
}

void sub_217168024()
{
}

void sub_21716802C()
{
}

void sub_217168034()
{
}

void sub_21716803C()
{
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::GetSourceType(pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin *this)
{
  return sub_21716746C() + 8;
}

uint64_t sub_217168060()
{
  uint64_t v0 = sub_21716B864();

  return sub_21716B990(v0);
}

void sub_21716808C(pxrInternal__aapl__pxrReserved__::NdrParserPlugin *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::~NdrParserPlugin(a1, a2);

  operator delete(v2);
}

void sub_2171680B4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  char v4 = sub_2170396E4((void *)(a1 + 96), a2);
  if (!v4)
  {
    int v7 = 0;
    goto LABEL_10;
  }
  char v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  int v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  sub_2172F356C(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  sub_216784EC4(v7);
}

void sub_217168138(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217168150(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  if (!v4)
  {
LABEL_31:
    *a3 = 0;
    return;
  }
  sub_217169CCC(v4, a2, &v15);
  uint64_t v5 = v15;
  if (!v15) {
    goto LABEL_23;
  }
  sub_216779094(__p, "semantic");
  uint64_t v6 = sub_2170396E4((void *)(v5 + 160), (unsigned __int8 *)__p);
  if (v6) {
    int v7 = (long long *)(v6 + 40);
  }
  else {
    int v7 = sub_21730D998();
  }
  int v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (*((void *)v7 + 1) != 6)
    {
LABEL_17:
      BOOL v10 = 0;
      goto LABEL_18;
    }
    int v7 = *(long long **)v7;
  }
  else if (v8 != 6)
  {
    goto LABEL_17;
  }
  BOOL v10 = *(_DWORD *)v7 == 1684105331 && *((_WORD *)v7 + 2) == 29285;
LABEL_18:
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_20;
    }
LABEL_23:
    char v12 = 1;
    goto LABEL_28;
  }
  if (!v10) {
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v11 = v15;
  sub_216779094(__p, "context");
  if (!sub_2170396E4((void *)(v11 + 160), (unsigned __int8 *)__p)) {
    sub_21730D998();
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  char v12 = 0;
LABEL_28:
  if (v16) {
    sub_216784EC4(v16);
  }
  if (v12) {
    goto LABEL_31;
  }
}

void sub_21716828C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_2171682C4(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t result = (std::string *)sub_2170396E4((void *)(*(void *)a3 + 160), a4);
  if (result)
  {
    int v7 = (std::string *)((char *)result + 40);
  }
  else
  {
    uint64_t result = (std::string *)sub_21730D998();
    int v7 = result;
  }
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v7->__r_.__value_.__l.__size_) {
      return result;
    }
  }
  else if (!*((unsigned char *)&v7->__r_.__value_.__s + 23))
  {
    return result;
  }
  int v8 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v8) {
    int v8 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    int v10 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v10 < 0)
    {
      if (v7->__r_.__value_.__l.__size_ != 9) {
        goto LABEL_11;
      }
      uint64_t v11 = (std::string *)v7->__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v11 = v7;
      if (v10 != 9) {
        goto LABEL_11;
      }
    }
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
    int v13 = v11->__r_.__value_.__s.__data_[8];
    if (v12 == 0x3265727574786574 && v13 == 100)
    {
      uint64_t v16 = a2;
      uint64_t v15 = sub_216F95C60(a1 + 96, a2, (uint64_t)&unk_2174BFD90, &v16);
      return (std::string *)MEMORY[0x21D4477E0](v15 + 3, "texture");
    }
  }
LABEL_11:
  uint64_t v16 = a2;
  unint64_t v9 = (std::string *)sub_216F95C60(a1 + 96, a2, (uint64_t)&unk_2174BFD90, &v16);
  return std::string::operator=(v9 + 1, v7);
}

void sub_217168420(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96050, memory_order_acquire) & 1) == 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B96050);
    if (a1)
    {
      unint64_t v8 = atomic_load((unint64_t *)off_26798DA10);
      if (!v8) {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
      }
      if (*(char *)(v8 + 23) < 0)
      {
        sub_216778F24(&xmmword_267B96038, *(void **)v8, *(void *)(v8 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v8;
        unk_267B96048 = *(void *)(v8 + 16);
        xmmword_267B96038 = v9;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267B96038, &dword_216758000);
      __cxa_guard_release(&qword_267B96050);
    }
  }
  if (byte_267B9604F < 0)
  {
    unint64_t v3 = *((void *)&xmmword_267B96038 + 1);
    if (*((void *)&xmmword_267B96038 + 1))
    {
      uint64_t v4 = (void *)xmmword_267B96038;
      goto LABEL_13;
    }
  }
  else if (byte_267B9604F)
  {
    *(_OWORD *)a2 = xmmword_267B96038;
    *(void *)(a2 + 16) = unk_267B96048;
    return;
  }
  PrimaryUVSetName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimaryUVSetName(a1);
  if ((*(void *)PrimaryUVSetName & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)PrimaryUVSetName & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(PrimaryUVSetName);
  }
  if ((*((char *)EmptyString + 23) & 0x80000000) == 0)
  {
    long long v7 = *(_OWORD *)EmptyString;
    *(void *)(a2 + 16) = EmptyString[2];
    *(_OWORD *)a2 = v7;
    return;
  }
  uint64_t v4 = (void *)*EmptyString;
  unint64_t v3 = EmptyString[1];
LABEL_13:

  sub_216778F24((unsigned char *)a2, v4, v3);
}

void sub_21716858C(_Unwind_Exception *a1)
{
}

BOOL sub_2171685A4(uint64_t a1, unsigned __int8 *a2)
{
  sub_2172F3618(a1, &v12);
  uint64_t v4 = v12;
  if (v13) {
    sub_216784EC4(v13);
  }
  if (!v4) {
    return 0;
  }
  int v5 = (char)a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if (v5 >= 0) {
    uint64_t v6 = a2[23];
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  uint64_t v8 = (v7 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 47) : *(void *)(a1 + 32);
  if (v8 != v6) {
    return 0;
  }
  long long v9 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    int v10 = a2;
  }
  else {
    int v10 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return !memcmp(*v9, v10, *(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      long long v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v7) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

long long *sub_217168678(uint64_t a1)
{
  sub_216779094(__p, off_26798DB98[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    unint64_t v3 = (long long *)(v2 + 40);
  }
  else {
    unint64_t v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_2171686E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217168704(uint64_t *a1, uint64_t *a2, int a3, uint64_t *a4, char a5)
{
  uint64_t v188 = *MEMORY[0x263EF8340];
  unint64_t v177 = 0;
  long long v174 = 0u;
  long long v175 = 0u;
  int v176 = 1065353216;
  memset(v172, 0, sizeof(v172));
  int v173 = 1065353216;
  uint64_t v169 = 0;
  int v170 = 0;
  unint64_t v171 = 0;
  v183[1] = 0;
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 56))();
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v10, (uint64_t)&v166);
  if (v167)
  {
    sub_2168D2318(&v177, &v167);
    BOOL IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v166);
    if (v168) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = IsArray;
    }
    if (v12)
    {
      int v13 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v13) {
        int v13 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      }
      sub_21716A8CC((uint64_t)&v174, (void *)v13 + 8, (uint64_t *)v13 + 8, "");
    }
    char v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v14) {
      char v14 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v166, (void **)v14 + 12))
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v15) {
        uint64_t v15 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      }
      sub_21716A8CC((uint64_t)&v174, (void *)v15 + 15, (uint64_t *)v15 + 15, "");
    }
    uint64_t v16 = a2[1];
    *(void *)&unsigned long long v181 = *a2;
    *((void *)&v181 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue((uint64_t)&v181, a3, (uint64_t)&v184);
    sub_2168ED33C(v183, &v184);
    sub_2168EE084((uint64_t)&v184);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v181 + 1);
    if (*((void *)&v181 + 1)) {
LABEL_18:
    }
      sub_216784EC4(v17);
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v166))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v184);
    if ((v177 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v177 = v184.n128_u64[0];
    sub_2172F4170(*a2, &v181);
    sub_217169CCC(v181, (unsigned __int8 *)v10, &v184);
    unint64_t v18 = v184.n128_u64[0];
    if (v184.n128_u64[1]) {
      sub_216784EC4((std::__shared_weak_count *)v184.n128_u64[1]);
    }
    if (*((void *)&v181 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v181 + 1));
    }
    if (!v18)
    {
      v184.n128_u64[0] = (unint64_t)"usdMtlx/parser.cpp";
      v184.n128_u64[1] = (unint64_t)"AddProperty";
      uint64_t v185 = 258;
      uint64_t v186 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ShaderBuilder::AddProperty(const mx::ConstTyp"
             "edElementPtr &, BOOL, NdrStringVec *, BOOL)";
      LOBYTE(v187) = 0;
      int v19 = *(char *)(v10 + 23);
      uint64_t v20 = *(void *)v10;
      uint64_t v21 = *a2;
      uint64_t v164 = 0;
      v165 = 0;
      sub_2172F3EC4(v21, (uint64_t)&v164, (uint64_t)&v181);
      if (v19 >= 0) {
        uint64_t v23 = v10;
      }
      else {
        uint64_t v23 = v20;
      }
      if (v182 >= 0) {
        uint64_t v24 = (long long *)&v181;
      }
      else {
        uint64_t v24 = (long long *)v181;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v184, (pxrInternal__aapl__pxrReserved__ *)"MaterialX unrecognized type %s on %s", v22, v23, v24);
      if (SHIBYTE(v182) < 0) {
        operator delete((void *)v181);
      }
      uint64_t v17 = v165;
      if (v165) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v166, (atomic_uint **)&v184);
    if ((v177 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v177 = v184.n128_u64[0];
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25) {
      uint64_t v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v166, (void **)v25)) {
      goto LABEL_45;
    }
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v26) {
      uint64_t v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v166, (void **)v26 + 44))
    {
LABEL_45:
      uint64_t v27 = a2[1];
      *(void *)&unsigned long long v181 = *a2;
      *((void *)&v181 + 1) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue((uint64_t)&v181, a3, (uint64_t)&v184);
      sub_2168ED33C(v183, &v184);
      sub_2168EE084((uint64_t)&v184);
      if (*((void *)&v181 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v181 + 1));
      }
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v28) {
        uint64_t v28 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      }
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens(&v166, &v184);
      sub_21716A52C((uint64_t)&v174, (void *)v28 + 17, (uint64_t *)v28 + 17, v184.n128_u64[0]);
      *(void *)&unsigned long long v181 = &v184;
      sub_216889A04((void ***)&v181);
    }
  }
  uint64_t v29 = *a2;
  if (!a3)
  {
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
    if ((*((void *)v32 + 9) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v32 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
    }
    unint64_t v36 = sub_2170396E4((void *)(v29 + 160), (unsigned __int8 *)EmptyString);
    if (v36) {
      uint64_t v37 = (long long *)(v36 + 40);
    }
    else {
      uint64_t v37 = sub_21730D998();
    }
    if (*((char *)v37 + 23) < 0)
    {
      if (!*((void *)v37 + 1)) {
        goto LABEL_79;
      }
    }
    else if (!*((unsigned char *)v37 + 23))
    {
      goto LABEL_79;
    }
    int v39 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v39) {
      int v39 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    sub_21716AC34((uint64_t)&v174, (void *)v39 + 19, (uint64_t *)v39 + 19, v37);
LABEL_79:
    uint64_t v40 = *a2;
    uint64_t v41 = sub_21730D998();
    if (!sub_21716A1C8(v40, (unsigned __int8 *)v41)) {
      goto LABEL_112;
    }
    goto LABEL_80;
  }
  uint64_t v30 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
  if ((*((void *)v30 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v31 = (uint64_t *)((*((void *)v30 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t v31 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v30);
  }
  uint64_t v34 = sub_2170396E4((void *)(v29 + 160), (unsigned __int8 *)v31);
  if (v34) {
    uint64_t v35 = (long long *)(v34 + 40);
  }
  else {
    uint64_t v35 = sub_21730D998();
  }
  if (*((char *)v35 + 23) < 0)
  {
    if (!*((void *)v35 + 1)) {
      goto LABEL_80;
    }
  }
  else if (!*((unsigned char *)v35 + 23))
  {
    goto LABEL_80;
  }
  std::string::size_type v38 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v38) {
    std::string::size_type v38 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  }
  sub_21716AC34((uint64_t)&v174, (void *)v38 + 18, (uint64_t *)v38 + 18, v35);
LABEL_80:
  uint64_t v42 = sub_21716A29C(*a2);
  std::__shared_count v43 = v42;
  uint64_t v44 = *((unsigned __int8 *)v42 + 23);
  if ((v44 & 0x80u) != 0) {
    uint64_t v44 = *((void *)v42 + 1);
  }
  if (v44)
  {
    uint64_t v45 = *a2;
    unint64_t v46 = *(std::__shared_weak_count **)(*a2 + 232);
    if (v46)
    {
      unint64_t v46 = std::__shared_weak_count::lock(v46);
      unint64_t v47 = v46;
      if (v46) {
        unint64_t v46 = *(std::__shared_weak_count **)(v45 + 224);
      }
    }
    else
    {
      unint64_t v47 = 0;
    }
    uint64_t v48 = sub_21716A328((uint64_t)v46);
    uint64_t v49 = *((unsigned __int8 *)v43 + 23);
    if ((v49 & 0x80u) == 0) {
      uint64_t v50 = *((unsigned __int8 *)v43 + 23);
    }
    else {
      uint64_t v50 = *((void *)v43 + 1);
    }
    uint64_t v51 = *((unsigned __int8 *)v48 + 23);
    int v52 = (char)v51;
    if ((v51 & 0x80u) != 0) {
      uint64_t v51 = *((void *)v48 + 1);
    }
    if (v50 != v51)
    {
      if (v47) {
        sub_216784EC4(v47);
      }
LABEL_109:
      uint64_t v61 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v61) {
        uint64_t v61 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      }
      sub_21716AC34((uint64_t)&v174, (void *)v61 + 20, (uint64_t *)v61 + 20, v43);
      goto LABEL_112;
    }
    if (v52 >= 0) {
      uint64_t v53 = v48;
    }
    else {
      uint64_t v53 = *(long long **)v48;
    }
    if ((v49 & 0x80) != 0)
    {
      BOOL v59 = memcmp(*(const void **)v43, v53, *((void *)v43 + 1)) != 0;
      if (v47) {
        goto LABEL_105;
      }
      goto LABEL_135;
    }
    if (*((unsigned char *)v43 + 23))
    {
      uint64_t v54 = v49 - 1;
      uint64_t v55 = v43;
      do
      {
        int v57 = *(unsigned __int8 *)v55;
        uint64_t v55 = (long long *)((char *)v55 + 1);
        int v56 = v57;
        int v58 = *(unsigned __int8 *)v53;
        uint64_t v53 = (long long *)((char *)v53 + 1);
        BOOL v59 = v56 != v58;
      }
      while (v56 == v58 && v54-- != 0);
      if (v47)
      {
LABEL_105:
        sub_216784EC4(v47);
        if (!v59) {
          goto LABEL_112;
        }
        goto LABEL_109;
      }
LABEL_135:
      if (!v59) {
        goto LABEL_112;
      }
      goto LABEL_109;
    }
    if (v47) {
      sub_216784EC4(v47);
    }
  }
LABEL_112:
  uint64_t v62 = (std::string *)*a2;
  if (*(char *)(*a2 + 71) < 0) {
    sub_216778F24(&__dst, v62[2].__r_.__value_.__l.__data_, v62[2].__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v62[2];
  }
  if (a4 && (a3 & 1) == 0)
  {
    uint64_t v63 = *a2;
    uint64_t v64 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
    if ((*((void *)v64 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v65 = (uint64_t *)((*((void *)v64 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v65 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v64);
    }
    uint64_t v66 = sub_2170396E4((void *)(v63 + 160), (unsigned __int8 *)v65);
    if (v66) {
      uint64_t v67 = (long long *)(v66 + 40);
    }
    else {
      uint64_t v67 = sub_21730D998();
    }
    if (*((char *)v67 + 23) < 0)
    {
      if (!*((void *)v67 + 1)) {
        goto LABEL_146;
      }
    }
    else if (!*((unsigned char *)v67 + 23))
    {
      goto LABEL_146;
    }
    unint64_t v68 = sub_21716746C();
    uint64_t v69 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v68 + 152), (unsigned __int8 *)v67);
    if (v69)
    {
      if ((a5 & 1) == 0)
      {
        sub_217168420(v69, (uint64_t)&v184);
        uint64_t v70 = (__n128 *)a4[1];
        if ((unint64_t)v70 >= a4[2])
        {
          uint64_t v74 = sub_2167E9A44(a4, (long long *)&v184);
        }
        else
        {
          if (SHIBYTE(v185) < 0)
          {
            sub_216778F24((unsigned char *)a4[1], (void *)v184.n128_u64[0], v184.n128_u64[1]);
          }
          else
          {
            __n128 v71 = v184;
            v70[1].n128_u64[0] = v185;
            __n128 *v70 = v71;
          }
          uint64_t v74 = (uint64_t)&v70[1].n128_i64[1];
          a4[1] = (uint64_t)&v70[1].n128_i64[1];
        }
        a4[1] = v74;
        if (SHIBYTE(v185) < 0) {
          operator delete((void *)v184.n128_u64[0]);
        }
      }
    }
    else
    {
      unint64_t v72 = a4[1];
      if (v72 >= a4[2])
      {
        uint64_t v73 = sub_2167E9A44(a4, v67);
      }
      else
      {
        sub_2167E99E4(a4, v67);
        uint64_t v73 = v72 + 24;
      }
      a4[1] = v73;
    }
  }
LABEL_146:
  sub_2172F356C(*a2, &v184);
  if (v184.n128_u64[0])
  {
    int v75 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
    if (!v75) {
      int v75 = sub_21716B038(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
    }
    if ((*(void *)v75 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unsigned int v76 = (const std::string *)((*(void *)v75 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unsigned int v76 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v75);
    }
    std::string::operator=(&__dst, v76);
  }
  if (v184.n128_u64[1]) {
    sub_216784EC4((std::__shared_weak_count *)v184.n128_u64[1]);
  }
  uint64_t v77 = sub_21678C2D8((uint64_t)(a1 + 17), (const void **)&__dst.__r_.__value_.__l.__data_);
  if (a1 + 18 != (uint64_t *)v77)
  {
    int v78 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v78) {
      int v78 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    v184.n128_u64[0] = (unint64_t)v78 + 128;
    uint64_t v79 = (std::string *)sub_216F95C60((uint64_t)&v174, (void *)v78 + 16, (uint64_t)&unk_2174BFD90, (uint64_t **)&v184);
    std::string::operator=(v79 + 1, (const std::string *)(v77 + 56));
  }
  if ((a3 & 1) == 0)
  {
    long long v80 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v80) {
      long long v80 = (uint64_t *)sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    int v81 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v81;
    if (v81) {
      atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v82 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
    if ((*((void *)v82 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
      std::__shared_count v83 = (uint64_t *)((*((void *)v82 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      std::__shared_count v83 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v82);
    }
    sub_21716A3F8((uint64_t)&v174, v80, (uint64_t)&v184, (unsigned __int8 *)v83);
    if (v81) {
      sub_216784EC4(v81);
    }
    uint64_t v84 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v84) {
      uint64_t v84 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    unint64_t v85 = a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = v85;
    if (v85) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
    }
    int v86 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
    if ((*((void *)v86 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
      int v87 = (uint64_t *)((*((void *)v86 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      int v87 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v86);
    }
    sub_21716A3F8((uint64_t)&v174, (uint64_t *)v84 + 1, (uint64_t)&v184, (unsigned __int8 *)v87);
    if (v184.n128_u64[1]) {
      sub_216784EC4((std::__shared_weak_count *)v184.n128_u64[1]);
    }
    long long v88 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v88) {
      long long v88 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    unint64_t v89 = a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = v89;
    if (v89) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v90 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
    if ((*((void *)v90 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t v91 = (uint64_t *)((*((void *)v90 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t v91 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v90);
    }
    sub_21716A3F8((uint64_t)&v174, (uint64_t *)v88 + 2, (uint64_t)&v184, (unsigned __int8 *)v91);
    if (v184.n128_u64[1]) {
      sub_216784EC4((std::__shared_weak_count *)v184.n128_u64[1]);
    }
    uint64_t v92 = (uint64_t *)(sub_21716746C() + 96);
    int v93 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v93;
    if (v93) {
      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v92, (uint64_t *)&v184);
    if (v93) {
      sub_216784EC4(v93);
    }
    uint64_t v94 = (uint64_t *)(sub_21716746C() + 88);
    std::string::size_type v95 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v95;
    if (v95) {
      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v94, (uint64_t *)&v184);
    if (v95) {
      sub_216784EC4(v95);
    }
    uint64_t v96 = (uint64_t *)(sub_21716746C() + 120);
    char v97 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v97;
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v96, (uint64_t *)&v184);
    if (v97) {
      sub_216784EC4(v97);
    }
    std::string::size_type v98 = (uint64_t *)(sub_21716746C() + 112);
    char v99 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v99;
    if (v99) {
      atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v98, (uint64_t *)&v184);
    if (v99) {
      sub_216784EC4(v99);
    }
    uint64_t v100 = (uint64_t *)(sub_21716746C() + 128);
    char v101 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v101;
    if (v101) {
      atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v100, (uint64_t *)&v184);
    if (v101) {
      sub_216784EC4(v101);
    }
    int v102 = (uint64_t *)(sub_21716746C() + 136);
    double v103 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v103;
    if (v103) {
      atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v102, (uint64_t *)&v184);
    if (v103) {
      sub_216784EC4(v103);
    }
    uint64_t v104 = (uint64_t *)(sub_21716746C() + 144);
    double v105 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v105;
    if (v105) {
      atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v104, (uint64_t *)&v184);
    if (v105) {
      sub_216784EC4(v105);
    }
    float64x2_t v106 = (uint64_t *)(sub_21716746C() + 16);
    int64x2_t v107 = (std::__shared_weak_count *)a2[1];
    v184.n128_u64[0] = *a2;
    v184.n128_u64[1] = (unint64_t)v107;
    if (v107) {
      atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716A480((pxrInternal__aapl__pxrReserved__::TfToken *)&v174, v106, (uint64_t *)&v184);
    if (v107) {
      sub_216784EC4(v107);
    }
    long long v108 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v108) {
      long long v108 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    }
    if (!sub_2168CB120(&v174, (void *)v108 + 1))
    {
      unint64_t v118 = sub_21716746C();
      if (sub_2168CB120(&v174, (void *)(v118 + 136)))
      {
        uint64_t v119 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        if (!v119) {
          uint64_t v119 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        }
        *(void *)&unsigned long long v179 = sub_21716746C() + 136;
        uint64_t v120 = sub_216F95C60((uint64_t)&v174, (void *)v179, (uint64_t)&unk_2174BFD90, (uint64_t **)&v179);
        uint64_t v123 = v120 + 3;
        if (*((char *)v120 + 47) < 0) {
          uint64_t v123 = (void *)*v123;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unit is %s.", v121, v122, v123);
        sub_21716B3B4((uint64_t)&v174, (void *)v119 + 1, (uint64_t *)v119 + 1, &v184);
        if (SHIBYTE(v185) < 0) {
          operator delete((void *)v184.n128_u64[0]);
        }
      }
    }
    for (uint64_t i = (uint64_t *)v175; i; uint64_t i = (uint64_t *)*i)
    {
      uint64_t v110 = i[2];
      *(void *)&unsigned long long v179 = v110;
      if ((v110 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&unsigned long long v179 = v179 & 0xFFFFFFFFFFFFFFF8;
      }
      if (*((char *)i + 47) < 0)
      {
        sub_216778F24(&v181, (void *)i[3], i[4]);
      }
      else
      {
        unsigned long long v181 = *(_OWORD *)(i + 3);
        uint64_t v182 = i[5];
      }
      uint64_t v111 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v111) {
        uint64_t v111 = sub_216BB1D1C(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      }
      uint64_t v113 = (void *)*((void *)v111 + 21);
      uint64_t v112 = (void *)*((void *)v111 + 22);
      if (v113 != v112)
      {
        while ((*v113 & 0xFFFFFFFFFFFFFFF8) != (v179 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v113 == v112)
          {
            uint64_t v113 = (void *)*((void *)v111 + 22);
            break;
          }
        }
      }
      if (v113 == v112)
      {
        sub_21716B6B8((uint64_t *)&v184, (uint64_t *)&v179, (long long *)&v181);
        sub_216BBAD48((uint64_t)v172, &v184, (uint64_t *)&v184);
        if (SHIBYTE(v186) < 0) {
          operator delete((void *)v184.n128_u64[1]);
        }
        if ((v184.n128_u8[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v184.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      if (SHIBYTE(v182) < 0) {
        operator delete((void *)v181);
      }
      if ((v179 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v115 = *a2;
    float64x2_t v114 = (std::__shared_weak_count *)a2[1];
    if (v114) {
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v116 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
    if ((*((void *)v116 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v117 = (uint64_t *)((*((void *)v116 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v117 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v116);
    }
    int v124 = (void *)(v115 + 160);
    long long v125 = sub_2170396E4((void *)(v115 + 160), (unsigned __int8 *)v117);
    if (v125) {
      int v126 = (long long *)(v125 + 40);
    }
    else {
      int v126 = sub_21730D998();
    }
    if (*((char *)v126 + 23) < 0)
    {
      if (!*((void *)v126 + 1)) {
        goto LABEL_296;
      }
    }
    else if (!*((unsigned char *)v126 + 23))
    {
LABEL_296:
      if (v114) {
        sub_216784EC4(v114);
      }
      goto LABEL_298;
    }
    uint64_t v127 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21716746C();
    if ((*((void *)v127 + 6) & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t v128 = (uint64_t *)((*((void *)v127 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t v128 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v127);
    }
    std::string::size_type v129 = sub_2170396E4(v124, (unsigned __int8 *)v128);
    if (v129) {
      std::string v130 = (long long *)(v129 + 40);
    }
    else {
      std::string v130 = sub_21730D998();
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray((std::string *)v126, (uint64_t *)&v184);
    pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray((std::string *)v130, (uint64_t *)&v181);
    uint64_t v131 = *((void *)&v181 + 1);
    unint64_t v132 = v181;
    if ((void)v181 != *((void *)&v181 + 1))
    {
      unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v181 + 1) - v181) >> 3);
      unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184.n128_u64[1] - v184.n128_u64[0]) >> 3);
      if (v133 != v134)
      {
        if (v133 <= v134 || (unint64_t v135 = v133 / v134, v133 % v134))
        {
          do
          {
            if (*(char *)(v131 - 1) < 0) {
              operator delete(*(void **)(v131 - 24));
            }
            v131 -= 24;
          }
          while (v131 != v132);
          *((void *)&v181 + 1) = v132;
        }
        else
        {
          uint64_t v153 = 0;
          unint64_t v154 = 0;
          unsigned long long v179 = 0uLL;
          unint64_t v180 = 0;
          memset(&v178, 0, sizeof(v178));
          do
          {
            if (v154 % v135)
            {
              std::string::append(&v178, off_26798DDF0[0]);
              unint64_t v132 = v181;
            }
            int v155 = *(char *)(v132 + v153 + 23);
            if (v155 >= 0) {
              uint64_t v156 = (const std::string::value_type *)(v132 + v153);
            }
            else {
              uint64_t v156 = *(const std::string::value_type **)(v132 + v153);
            }
            if (v155 >= 0) {
              std::string::size_type v157 = *(unsigned __int8 *)(v132 + v153 + 23);
            }
            else {
              std::string::size_type v157 = *(void *)(v132 + v153 + 8);
            }
            std::string::append(&v178, v156, v157);
            if (!(++v154 % v135))
            {
              uint64_t v158 = (_OWORD *)*((void *)&v179 + 1);
              if (*((void *)&v179 + 1) >= v180)
              {
                uint64_t v160 = sub_2167E9A44((uint64_t *)&v179, (long long *)&v178);
              }
              else
              {
                if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_216778F24(*((unsigned char **)&v179 + 1), v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v159 = *(_OWORD *)&v178.__r_.__value_.__l.__data_;
                  *(void *)(*((void *)&v179 + 1) + 16) = *((void *)&v178.__r_.__value_.__l + 2);
                  *uint64_t v158 = v159;
                }
                uint64_t v160 = (uint64_t)v158 + 24;
              }
              *((void *)&v179 + 1) = v160;
              MEMORY[0x21D4477E0](&v178, "");
            }
            unint64_t v161 = *((void *)&v181 + 1);
            unint64_t v132 = v181;
            v153 += 24;
          }
          while (v154 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v181 + 1) - v181) >> 3));
          unsigned long long v181 = v179;
          unsigned long long v179 = __PAIR128__(v161, v132);
          unint64_t v162 = v182;
          uint64_t v182 = v180;
          unint64_t v180 = v162;
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v178.__r_.__value_.__l.__data_);
          }
          v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
          sub_216782F20((void ***)&v178);
        }
      }
    }
    unint64_t v136 = v184.n128_u64[0];
    if (v184.n128_u64[0] != v184.n128_u64[1])
    {
      uint64_t v137 = v181;
      do
      {
        *(void *)&unsigned long long v179 = 0;
        if (v137 != *((void *)&v181 + 1))
        {
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v178);
          if ((v179 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          v137 += 24;
          *(void *)&unsigned long long v179 = v178.__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v178);
        uint64_t v138 = v170;
        if ((unint64_t)v170 >= v171)
        {
          uint64_t v140 = sub_21716B74C((uint64_t *)&v169, &v178, (uint64_t *)&v179);
        }
        else
        {
          *int v170 = v178.__r_.__value_.__r.__words[0];
          v178.__r_.__value_.__r.__words[0] = 0;
          uint64_t v139 = v179;
          v138[1] = v179;
          if ((v139 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v138[1] &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v140 = (uint64_t)(v138 + 2);
        }
        int v170 = (void *)v140;
        if ((v178.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v178.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v179 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v136 += 24;
      }
      while (v136 != v184.n128_u64[1]);
    }
    *(void *)&unsigned long long v179 = &v181;
    sub_216782F20((void ***)&v179);
    *(void *)&unsigned long long v181 = &v184;
    sub_216782F20((void ***)&v181);
    goto LABEL_296;
  }
LABEL_298:
  std::string v141 = operator new(0x108uLL);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v181);
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty((uint64_t)v141, (uint64_t *)&v181, (atomic_uint **)&v177, v183, a3, (atomic_uint *)v168, &v174, (uint64_t)v172, &v169);
  unint64_t v142 = a1[11];
  int v143 = (void *)a1[10];
  if ((unint64_t)v143 >= v142)
  {
    uint64_t v145 = a1[9];
    uint64_t v146 = ((uint64_t)v143 - v145) >> 3;
    if ((unint64_t)(v146 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v147 = v142 - v145;
    uint64_t v148 = v147 >> 2;
    if (v147 >> 2 <= (unint64_t)(v146 + 1)) {
      uint64_t v148 = v146 + 1;
    }
    if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v149 = v148;
    }
    uint64_t v187 = a1 + 11;
    if (v149) {
      v150 = (char *)sub_21677CB28((uint64_t)(a1 + 11), v149);
    }
    else {
      v150 = 0;
    }
    long long v151 = &v150[8 * v146];
    v184.n128_u64[0] = (unint64_t)v150;
    v184.n128_u64[1] = (unint64_t)v151;
    uint64_t v186 = &v150[8 * v149];
    *(void *)long long v151 = v141;
    uint64_t v185 = (uint64_t)(v151 + 8);
    sub_216F99474(a1 + 9, &v184);
    float64x2_t v144 = (void *)a1[10];
    sub_216F99624((void **)&v184);
  }
  else
  {
    *int v143 = v141;
    float64x2_t v144 = v143 + 1;
    a1[10] = (uint64_t)v144;
  }
  a1[10] = (uint64_t)v144;
  if ((v181 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v181 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((v167 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168EE084((uint64_t)v183);
  v184.n128_u64[0] = (unint64_t)&v169;
  sub_216BB1A58((void ***)&v184);
  sub_216BA5BB8((uint64_t)v172);
  uint64_t result = sub_216BA5BB8((uint64_t)&v174);
  if ((v177 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2171699A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v44 - 153) < 0) {
    operator delete(*(void **)(v44 - 176));
  }
  uint64_t v46 = *(void *)(v44 - 208);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if ((a21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168EE084(v44 - 152);
  *(void *)(v44 - 176) = &a23;
  sub_216BB1A58((void ***)(v44 - 176));
  sub_216BA5BB8((uint64_t)&a26);
  sub_216BA5BB8((uint64_t)&a32);
  if ((a38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_217169CCC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = sub_2170396E4((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  int v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  sub_2172F38C8(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  sub_216784EC4(v7);
}

void sub_217169D50(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217169D68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v3 = *(uint64_t **)(a1 + 136);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F34C0(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      int v13 = (const void **)(v8 + 24);
      char v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        int v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_217169ECC(a3, &v15);
    goto LABEL_22;
  }
}

void sub_217169E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void **sub_217169ECC(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    char v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_217169FE8(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_217169FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217169FE8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21716A060((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21716A060(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21716A0F4((uint64_t)v12);
  return v10;
}

uint64_t sub_21716A0F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void sub_21716A12C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = sub_2170396E4((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  sub_2172F32BC(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  sub_216784EC4(v7);
}

void sub_21716A1B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21716A1C8(uint64_t a1, unsigned __int8 *a2)
{
  sub_2172F32BC(a1, &v12);
  uint64_t v4 = v12;
  if (v13) {
    sub_216784EC4(v13);
  }
  if (!v4) {
    return 0;
  }
  int v5 = (char)a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if (v5 >= 0) {
    uint64_t v6 = a2[23];
  }
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  uint64_t v8 = (v7 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 47) : *(void *)(a1 + 32);
  if (v8 != v6) {
    return 0;
  }
  long long v9 = (const void **)(a1 + 24);
  if (v5 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return !memcmp(*v9, v10, *(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      long long v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v7) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

long long *sub_21716A29C(uint64_t a1)
{
  sub_216779094(__p, off_26798DB70[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    unint64_t v3 = (long long *)(v2 + 40);
  }
  else {
    unint64_t v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_21716A30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21716A328(uint64_t a1)
{
  sub_216784F38(&v8, (void *)(a1 + 8));
  shared_weak_owners = v8;
  if (v8)
  {
    while (1)
    {
      BOOL v3 = sub_21716AFB8((uint64_t)shared_weak_owners);
      uint64_t v1 = (long long *)v8;
      if (v3) {
        break;
      }
      shared_weak_owners = (std::__shared_weak_count *)v8[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        uint64_t v4 = shared_weak_owners;
        if (shared_weak_owners) {
          shared_weak_owners = (std::__shared_weak_count *)*((void *)v1 + 28);
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      int v5 = v9;
      uint64_t v8 = shared_weak_owners;
      long long v9 = v4;
      if (v5)
      {
        sub_216784EC4(v5);
        shared_weak_owners = v8;
      }
      if (!shared_weak_owners) {
        goto LABEL_10;
      }
    }
    uint64_t v1 = sub_21716A29C((uint64_t)v8);
    int v6 = 0;
  }
  else
  {
LABEL_10:
    int v6 = 1;
  }
  if (v9) {
    sub_216784EC4(v9);
  }
  if (v6) {
    return sub_21730D998();
  }
  return v1;
}

void sub_21716A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21716A3F8(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t result = sub_2170396E4((void *)(*(void *)a3 + 160), a4);
  if (result)
  {
    uint64_t v7 = result + 5;
  }
  else
  {
    uint64_t result = sub_21730D998();
    uint64_t v7 = result;
  }
  if (*((char *)v7 + 23) < 0)
  {
    if (!v7[1]) {
      return result;
    }
  }
  else if (!*((unsigned char *)v7 + 23))
  {
    return result;
  }

  return sub_21716B0C4(a1, a2, a2, (long long *)v7);
}

void *sub_21716A480(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t result = sub_2170396E4((void *)(v5 + 160), (unsigned __int8 *)EmptyString);
  if (result)
  {
    uint64_t v8 = result + 5;
  }
  else
  {
    uint64_t result = sub_21730D998();
    uint64_t v8 = result;
  }
  if (*((char *)v8 + 23) < 0)
  {
    if (!v8[1]) {
      return result;
    }
  }
  else if (!*((unsigned char *)v8 + 23))
  {
    return result;
  }

  return sub_21716B0C4((uint64_t)a1, a2, a2, (long long *)v8);
}

void *sub_21716A52C(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_21716A794(a1, v7, a3, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *int v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  unint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v22, 0);
  return v11;
}

void sub_21716A77C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21716A794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint64_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_21716A81C((uint64_t)(v10 + 2), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_21716A804(_Unwind_Exception *a1)
{
  sub_216BA75E8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21716A81C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 8), (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)EmptyString;
    *(void *)(a1 + 24) = EmptyString[2];
    *(_OWORD *)(a1 + 8) = v6;
  }
  return a1;
}

void *sub_21716A8CC(uint64_t a1, void *a2, uint64_t *a3, char *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_21716AB34(a1, v7, a3, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *int v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  unint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v22, 0);
  return v11;
}

void sub_21716AB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_21716AB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint64_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_21716ABBC(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_21716ABA4(_Unwind_Exception *a1)
{
  sub_216BA75E8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_21716ABBC(uint64_t *a1, uint64_t *a2, char *__s)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216779094(a1 + 1, __s);
  return a1;
}

void *sub_21716AC34(uint64_t a1, void *a2, uint64_t *a3, long long *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_21716AE9C(a1, v7, a3, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *int v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  unint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v22, 0);
  return v11;
}

void sub_21716AE84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_21716AE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint64_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_21716AF24(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_21716AF0C(_Unwind_Exception *a1)
{
  sub_216BA75E8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_21716AF24(uint64_t *a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v5, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    a1[3] = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

BOOL sub_21716AFB8(uint64_t a1)
{
  sub_216779094(__p, off_26798DB70[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_21716B01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *sub_21716B038(atomic_ullong *a1)
{
  uint64_t result = sub_21716B080();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::~UsdMtlxTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *sub_21716B080()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::UsdMtlxTokens_StaticTokenType(v0);
  return v0;
}

void sub_21716B0B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21716B0C4(uint64_t a1, void *a2, uint64_t *a3, long long *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_21716B32C(a1, v7, a3, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *int v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  unint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v22, 0);
  return v11;
}

void sub_21716B314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_21716B32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint64_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_21716B6B8(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_21716B39C(_Unwind_Exception *a1)
{
  sub_216BA75E8(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_21716B3B4(uint64_t a1, void *a2, uint64_t *a3, __n128 *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_21716B61C(a1, v7, a3, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *int v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  unint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v22, 0);
  return v11;
}

void sub_21716B604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_21716B61C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t v11 = *a3;
  *((void *)v10 + 2) = *a3;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v10 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  __n128 result = *a4;
  *(__n128 *)(v10 + 24) = *a4;
  *((void *)v10 + 5) = a4[1].n128_u64[0];
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

uint64_t *sub_21716B6B8(uint64_t *a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  char v5 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v5, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    a1[3] = *((void *)a3 + 2);
    *(_OWORD *)char v5 = v6;
  }
  return a1;
}

uint64_t sub_21716B74C(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 3 > v6) {
    unint64_t v6 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  void v17[4] = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_216787EE0(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  float v13 = &v12[16 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v17[3] = &v12[16 * v11];
  *(void *)float v13 = *a2;
  *a2 = 0;
  uint64_t v14 = *a3;
  *((void *)v13 + 1) = *a3;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v13 + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  void v17[2] = v13 + 16;
  sub_216BB1AF8(a1, v17);
  uint64_t v15 = a1[1];
  sub_216BB1C94((uint64_t)v17);
  return v15;
}

void sub_21716B850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BB1C94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21716B864()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F9609C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21716B944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_21716B990(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C77B8C8;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21716BA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21716BA40(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

void *sub_21716BA68()
{
  uint64_t v0 = operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(v0);
  void *v0 = &unk_26C77B878;
  return v0;
}

void sub_21716BAB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::~UsdMtlxTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::UsdMtlxTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "out", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  char v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  *char v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_21716BC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdMtlxStandardLibraryPaths(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96070, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96070))
  {
    sub_21716BD08();
    __cxa_atexit((void (*)(void *))sub_216963C50, &unk_267B96058, &dword_216758000);
    __cxa_guard_release(&qword_267B96070);
  }
  return &unk_267B96058;
}

void sub_21716BCF0(_Unwind_Exception *a1)
{
}

void sub_21716BD08()
{
  *(void *)&long long v25 = *MEMORY[0x263EF8340];
  sub_21716C2EC("PXR_MTLX_STDLIB_SEARCH_PATHS", (uint64_t *)&unk_267B96058);
  sub_216779094(&v21, "");
  uint64_t v0 = dyld_image_path_containing_address();
  dyld_image_header_containing_address();
  uint64_t v1 = macho_dylib_install_name();
  uint64_t v2 = [NSURL fileURLWithPath:[NSString stringWithUTF8String:v0] URLByResolvingSymlinksInPath];
  uint64_t v3 = [[NSURL fileURLWithPath:[NSString stringWithUTF8String:v1]] URLByResolvingSymlinksInPath];
  sub_216779094(v19, (char *)[[[v2 URLByDeletingLastPathComponent] path] cStringUsingEncoding:4]);
  sub_216779094(__p, (char *)[v3 URLByDeletingLastPathComponent].path.cStringUsingEncoding:4);
  if ((v20 & 0x80u) == 0) {
    size_t v4 = v20;
  }
  else {
    size_t v4 = (size_t)v19[1];
  }
  uint64_t v5 = &v15;
  sub_2167940B4((uint64_t)&v15, v4 + 11);
  if ((v15.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::__fs::filesystem::path *)v15.__pn_.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if ((v20 & 0x80u) == 0) {
      uint64_t v6 = v19;
    }
    else {
      uint64_t v6 = (void **)v19[0];
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/libraries/");
  std::__fs::filesystem::path v16 = v15;
  if ((v18 & 0x80u) == 0) {
    size_t v7 = v18;
  }
  else {
    size_t v7 = (size_t)__p[1];
  }
  p_dst = &__dst;
  sub_2167940B4((uint64_t)&__dst, v7 + 11);
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if ((v18 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    memmove(p_dst, v9, v7);
  }
  strcpy((char *)p_dst + v7, "/libraries/");
  std::__fs::filesystem::path v15 = __dst;
  std::__fs::filesystem::__status(&v16, 0);
  if (__dst.__pn_.__r_.__value_.__s.__data_[0] && __dst.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(&__dst, v16.__pn_.__r_.__value_.__l.__data_, v16.__pn_.__r_.__value_.__l.__size_);
      goto LABEL_32;
    }
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__pn_.__r_.__value_.__l.__data_;
    std::string::size_type v10 = v16.__pn_.__r_.__value_.__r.__words[2];
  }
  else
  {
    std::__fs::filesystem::__status(&v15, 0);
    if (!__dst.__pn_.__r_.__value_.__s.__data_[0] || __dst.__pn_.__r_.__value_.__s.__data_[0] == 255) {
      goto LABEL_35;
    }
    if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(&__dst, v15.__pn_.__r_.__value_.__l.__data_, v15.__pn_.__r_.__value_.__l.__size_);
      goto LABEL_32;
    }
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__pn_.__r_.__value_.__l.__data_;
    std::string::size_type v10 = v15.__pn_.__r_.__value_.__r.__words[2];
  }
  __dst.__pn_.__r_.__value_.__r.__words[2] = v10;
LABEL_32:
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path v21 = __dst;
LABEL_35:
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v21.__pn_.__r_.__value_.__l.__size_) {
      goto LABEL_42;
    }
    sub_216778F24(&v24, v21.__pn_.__r_.__value_.__l.__data_, v21.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&v21.__pn_.__r_.__value_.__s + 23)) {
      goto LABEL_42;
    }
    std::__fs::filesystem::path v24 = v21;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  float v13 = 0;
  uint64_t v22 = (std::__fs::filesystem::path *)&v11;
  char v23 = 0;
  uint64_t v11 = (char *)operator new(0x18uLL);
  unint64_t v12 = v11;
  float v13 = v11 + 24;
  unint64_t v12 = sub_21695F6C0((uint64_t)&v13, (long long *)&v24, &v25, v11);
  sub_21716C4DC((long long **)&unk_267B96058, (uint64_t)&v11, (uint64_t)&__dst);
  sub_21680F694((uint64_t)&unk_267B96058, (std::string *)__dst.__pn_.__r_.__value_.__l.__data_, (long long *)__dst.__pn_.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__dst.__pn_.__r_.__value_.__l.__size_ - __dst.__pn_.__r_.__value_.__r.__words[0]) >> 3));
  uint64_t v22 = &__dst;
  sub_216782F20((void ***)&v22);
  uint64_t v22 = (std::__fs::filesystem::path *)&v11;
  sub_216782F20((void ***)&v22);
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
  }
LABEL_42:
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_21716C148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (*(char *)(v43 - 121) < 0) {
    operator delete(*(void **)(v43 - 144));
  }
  *(void *)(v43 - 144) = v42;
  sub_216782F20((void ***)(v43 - 144));
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96090))
  {
    sub_21716C2EC("PXR_MTLX_PLUGIN_SEARCH_PATHS", qword_267B96078);
    __cxa_atexit((void (*)(void *))sub_216963C50, qword_267B96078, &dword_216758000);
    __cxa_guard_release(&qword_267B96090);
  }
  return qword_267B96078;
}

void sub_21716C2D4(_Unwind_Exception *a1)
{
}

void sub_21716C2EC(char *__s@<X0>, uint64_t *a2@<X8>)
{
  sub_216779094(v7, __s);
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v7, (uint64_t)__p, (uint64_t)&__str);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_216779094(v7, ":");
    pxrInternal__aapl__pxrReserved__::TfStringSplit(&__str, (char *)v7, a2);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v4 < 0) {
LABEL_11:
    }
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_21716C3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::UsdMtlxSearchPaths(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B960B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B960B0);
    if (v2)
    {
      uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths(v2);
      pxrInternal__aapl__pxrReserved__::UsdMtlxStandardLibraryPaths((pxrInternal__aapl__pxrReserved__ *)v3);
      sub_21716C4DC((long long **)qword_267B96078, (uint64_t)&unk_267B96058, (uint64_t)&unk_267B96098);
      __cxa_atexit((void (*)(void *))sub_216963C50, &unk_267B96098, &dword_216758000);
      __cxa_guard_release(&qword_267B960B0);
    }
  }
  return &unk_267B96098;
}

void sub_21716C4C4(_Unwind_Exception *a1)
{
}

std::string *sub_21716C4DC@<X0>(long long **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_216812BD8((char *)a3, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  return sub_21695F4FC((uint64_t *)a3, *(std::string **)(a3 + 8), *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
}

void sub_21716C554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::UsdMtlxStandardFileExtensions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B960D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B960D0))
  {
    sub_216779094(__p, "mtlx");
    sub_216A3A700((uint64_t)&qword_267B960B8, (long long *)__p, 1uLL);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_216963C50, &qword_267B960B8, &dword_216758000);
    __cxa_guard_release(&qword_267B960D0);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  return sub_216812BD8((char *)a1, (long long *)qword_267B960B8, unk_267B960C0, 0xAAAAAAAAAAAAAAABLL * ((unk_267B960C0 - qword_267B960B8) >> 3));
}

void sub_21716C678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B960D0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(uint64_t a1@<X0>, std::string **a2@<X8>)
{
  sub_2172E0788(a2, a1);
  if (pxrInternal__aapl__pxrReserved__::TfIsFile((const char *)a1, 0))
  {
    char v4 = (std::__shared_weak_count *)a2[1];
    char v23 = *a2;
    std::__fs::filesystem::path v24 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_217171208(v22, (std::string *)a1);
    memset(v21, 0, sizeof(v21));
    sub_217321A30(&v23, (uint64_t)v22, v21, 0);
    __p[0] = v21;
    sub_217171258((void ***)__p);
    __p[0] = v22;
    sub_216782F20((void ***)__p);
    if (v24) {
      sub_216784EC4(v24);
    }
    char v5 = (std::__shared_weak_count *)a2[1];
    int v19 = *a2;
    unsigned __int8 v20 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v13 = 0;
    uint64_t v17 = 0;
    unsigned __int8 v18 = 0;
    sub_2173212D4((uint64_t *)&v19, (uint64_t *)__p, &v17);
    if (v18) {
      sub_216784EC4(v18);
    }
    v14[0] = __p;
    sub_217171258(v14);
    if (v20) {
      sub_216784EC4(v20);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v16);
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v15[0] = *a2;
    v15[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a1 + 23) < 0)
    {
      sub_216778F24(__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a1;
      uint64_t v13 = *(void *)(a1 + 16);
    }
    memset(v14, 0, sizeof(v14));
    sub_21716CAE8((pxrInternal__aapl__pxrReserved__ *)v15, (uint64_t)__p, (uint64_t *)v14, 0);
    long long v25 = v14;
    sub_217171258((void ***)&v25);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (v6) {
      sub_216784EC4(v6);
    }
    unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v8 = v16;
    unint64_t v9 = atomic_load((unint64_t *)(v7 + 144));
    if (v8 >= v9)
    {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v16);
    }
    else
    {
      BOOL IsCleanImpl = pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v16, (atomic_ullong *)v7);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v16);
      if (!IsCleanImpl)
      {
        uint64_t v11 = (std::__shared_weak_count *)a2[1];
        if (v11) {
          sub_216784EC4(v11);
        }
        *a2 = 0;
        a2[1] = 0;
      }
    }
  }
}

#error "21716CAB8: call analysis failed (funcsize=77)"

void sub_21716CAE8(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t *a3, long long **a4)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (__p.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(void *__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 24))(v19);
    std::string::size_type v10 = (void *)v19[0];
    unint64_t v9 = (std::__shared_weak_count *)v19[1];
    size_t v11 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0]);
  }
  else
  {
    std::string::size_type v10 = 0;
    unint64_t v9 = 0;
    size_t v11 = 0;
  }
  if (__p.__r_.__value_.__l.__size_) {
    sub_216784EC4((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (v10)
  {
    sub_216799F58(&__p, v10, v11);
    uint64_t v12 = *(void *)a1;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 1);
    v15[0] = v12;
    v15[1] = (uint64_t)v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716CF9C(v15, &__p, a2, a3, a4);
    if (v13) {
      sub_216784EC4(v13);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/utils.mm";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_ReadFromAsset";
    __p.__r_.__value_.__r.__words[2] = 387;
    uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::_ReadFromAsset(mx::DocumentPtr, const ArResolvedPath &, const mx::FileS"
          "earchPath &, const mx::XmlReadOptions *)";
    char v18 = 0;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v14 = (const char *)a2;
    }
    else {
      uint64_t v14 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open MaterialX document '%s'", v14);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_21716CC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    sub_216784EC4(v17);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocumentFromString(const std::string *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = sub_216891D24((uint64_t)__p, (uint64_t)a1);
  std::to_string(&v19, v4);
  sub_21716CF14();
  __p[0] = 0;
  char v5 = sub_217171F04((uint64_t **)&qword_267B961B8, (const void **)&v19.__r_.__value_.__l.__data_, (uint64_t)&v19);
  uint64_t v6 = v5;
  if (v7)
  {
    sub_2172E0788(&v17, v5);
    unint64_t v8 = v18;
    v16[0] = v17;
    v16[1] = (uint64_t)v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = 0;
    memset(v13, 0, sizeof(v13));
    sub_21716CF9C(v16, a1, (uint64_t)__p, v13, 0);
    unsigned __int8 v20 = (void **)v13;
    sub_217171258(&v20);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
    uint64_t v10 = v17;
    unint64_t v9 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v11 = (std::__shared_weak_count *)v6[8];
    v6[7] = v10;
    v6[8] = (uint64_t)v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  uint64_t v12 = v6[8];
  *a2 = v6[7];
  a2[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_21716CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  *(void *)(v24 - 56) = &a11;
  sub_217171258((void ***)(v24 - 56));
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v23) {
    sub_216784EC4(v23);
  }
  if (a23) {
    sub_216784EC4(a23);
  }
  if (a2 == 1)
  {
    uint64_t v27 = __cxa_begin_catch(a1);
    if (sub_216BA6B60(1))
    {
      (*(void (**)(void *))(*(void *)v27 + 16))(v27);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"MaterialX error reading source XML: %s", v28, v29);
    }
    __cxa_end_catch();
    JUMPOUT(0x21716CDF4);
  }
  if (*(char *)(v24 - 57) < 0) {
    operator delete(*(void **)(v24 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_21716CF14()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B961D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B961D0))
  {
    qword_267B961C8 = 0;
    qword_267B961C0 = 0;
    qword_267B961B8 = (uint64_t)&qword_267B961C0;
    __cxa_atexit((void (*)(void *))sub_2171712CC, &qword_267B961B8, &dword_216758000);
    __cxa_guard_release(&qword_267B961D0);
  }
}

void *sub_21716CF9C(uint64_t *a1, const std::string *a2, uint64_t a3, uint64_t *a4, long long **a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a5)
  {
    __int16 v21 = *(_WORD *)a5;
    sub_21717133C((uint64_t)v22, (uint64_t)(a5 + 1));
    memset(v23, 0, sizeof(v23));
    sub_216812BD8((char *)v23, a5[5], a5[6], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[6] - (char *)a5[5]) >> 3));
  }
  else
  {
    sub_217321CD8((uint64_t)&v21);
  }
  uint64_t v24 = (void **)&unk_26C77B938;
  uint64_t v25 = a3;
  uint64_t v27 = &v24;
  sub_2171718FC(&v24, v22);
  sub_2171713D4(&v24);
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v18 = *a1;
  std::string v19 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v17, 0, sizeof(v17));
  sub_217171B68(v17, *a4, a4[1], (a4[1] - *a4) >> 5);
  sub_217322A84(&v18, a2, v17, &v21);
  uint64_t v24 = (void **)v17;
  sub_217171258(&v24);
  if (v19) {
    sub_216784EC4(v19);
  }
  size_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v15 = *a1;
  unint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_2173212D4(&v15, (uint64_t *)&v24, &v13);
  if (v14) {
    sub_216784EC4(v14);
  }
  unsigned __int8 v20 = &v24;
  sub_217171258((void ***)&v20);
  if (v16) {
    sub_216784EC4(v16);
  }
  uint64_t v24 = (void **)v23;
  sub_216782F20(&v24);
  return sub_2171713D4(v22);
}

void sub_21716D188(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  sub_2171713D4(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_21716CF14();
  *(void *)&long long v27 = 0;
  unint64_t v4 = sub_217171F04((uint64_t **)&qword_267B961B8, (const void **)a1, a1);
  char v5 = v4;
  if (v6)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    if (v8)
    {
      pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(a1, (std::string **)&v27);
      long long v9 = v27;
      long long v27 = 0uLL;
      uint64_t v10 = (std::__shared_weak_count *)v5[8];
      *(_OWORD *)(v5 + 7) = v9;
      if (v10)
      {
        sub_216784EC4(v10);
        if (*((void *)&v27 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v27 + 1));
        }
      }
    }
    else
    {
      sub_2172E0788(&v27, v7);
      long long v12 = v27;
      long long v27 = 0uLL;
      uint64_t v13 = (std::__shared_weak_count *)v5[8];
      *(_OWORD *)(v5 + 7) = v12;
      if (v13)
      {
        sub_216784EC4(v13);
        uint64_t v13 = (std::__shared_weak_count *)*((void *)&v27 + 1);
        if (*((void *)&v27 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v27 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdMtlxStandardLibraryPaths((pxrInternal__aapl__pxrReserved__ *)v13);
      sub_21716D46C((uint64_t)&unk_267B96058, (void *)v5[7]);
      pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths(v14);
      sub_21716D46C((uint64_t)qword_267B96078, (void *)v5[7]);
    }
    unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v15) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v16 = v28;
    unint64_t v17 = atomic_load((unint64_t *)(v15 + 144));
    if (v16 < v17
      && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28, (atomic_ullong *)v15))
    {
      uint64_t v18 = sub_216862604(&v28, 0);
      for (i = sub_216878D10(); v18 != (void *)i; uint64_t v18 = (void *)v18[1])
      {
        if (sub_216BA6B60(1))
        {
          uint64_t v22 = v18 + 7;
          if (*((char *)v18 + 79) < 0) {
            uint64_t v22 = (void *)*v22;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s\n", v20, v21, v22);
        }
      }
      char v23 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v23) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      uint64_t v24 = sub_216862604(&v28, 0);
      LOBYTE(v27) = 0;
      uint64_t v25 = (void *)sub_2168520EC(v23 + 19, &v27);
      if (v25 != v24) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v23, v24, v25);
      }
    }
    uint64_t v26 = v5[8];
    *a2 = v5[7];
    a2[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28);
  }
  else
  {
    uint64_t v11 = v4[8];
    *a2 = v4[7];
    a2[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_21716D440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_21716D46C(uint64_t a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdMtlxStandardFileExtensions((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles(a1, (uint64_t)&v7, 0, &v11);
  long long v9 = (void **)&v7;
  sub_216782F20(&v9);
  uint64_t v4 = v12;
  if (v11 != v12)
  {
    uint64_t v5 = v11 + 24;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(v5, (std::string **)&v9);
      if (v9)
      {
        uint64_t v7 = v9;
        uint64_t v8 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_2172E0CBC(a2, (uint64_t *)&v7);
        if (v8) {
          sub_216784EC4(v8);
        }
      }
      if (v10) {
        sub_216784EC4(v10);
      }
      uint64_t v6 = v5 + 24;
      v5 += 48;
    }
    while (v6 != v4);
  }
  uint64_t v7 = (void **)&v11;
  sub_21682E488(&v7);
}

void sub_21716D610()
{
  if (v0) {
    sub_216784EC4();
  }
  JUMPOUT(0x21716D64CLL);
}

void sub_21716D618()
{
}

void sub_21716D634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216782F20((void ***)va);
  JUMPOUT(0x21716D65CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(uint64_t *a1, unsigned char *a2)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
  uint64_t v4 = sub_21716D7E8(*a1);
  if (*((char *)v4 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v14 = *((void *)v4 + 2);
    *(_OWORD *)std::string __p = v5;
  }
  uint64_t v6 = (void *)HIBYTE(v14);
  if (v14 < 0) {
    uint64_t v6 = __p[1];
  }
  if (!v6)
  {
    uint64_t v7 = 0;
    if (!a2) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((uint64_t)&v12, (uint64_t)__p);
  if (v12) {
    uint64_t v7 = v12;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a2) {
LABEL_13:
  }
    *a2 = sub_21716D874(*a1) ^ 1;
LABEL_14:
  uint64_t v8 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  long long v9 = sub_216862604(&v15, 0);
  LOBYTE(v12) = 0;
  uint64_t v10 = (void *)sub_2168520EC(v8 + 19, &v12);
  if (v10 != v9) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v8, v9, v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
  return v7;
}

void sub_21716D7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a17);
  _Unwind_Resume(a1);
}

long long *sub_21716D7E8(uint64_t a1)
{
  sub_216779094(__p, off_26798DD48[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    uint64_t v3 = (long long *)(v2 + 40);
  }
  else {
    uint64_t v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_21716D858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_21716D874(uint64_t a1)
{
  sub_216779094(__p, off_26798DD50[0]);
  uint64_t v2 = sub_217171D3C(a1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_21716D8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI(uint64_t *a1)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    while (1)
    {
      if (*(char *)(v4 + 95) < 0)
      {
        if (*(void *)(v4 + 80))
        {
LABEL_20:
          int v6 = 0;
          uint64_t v1 = (std::__shared_weak_count *)(v4 + 72);
          if (!v3) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
      }
      else if (*(unsigned char *)(v4 + 95))
      {
        goto LABEL_20;
      }
      char v5 = *(std::__shared_weak_count **)(v4 + 232);
      if (!v5) {
        break;
      }
      uint64_t v1 = std::__shared_weak_count::lock(v5);
      if (!v1)
      {
        uint64_t v4 = 0;
        if (!v3) {
          goto LABEL_12;
        }
LABEL_11:
        sub_216784EC4(v3);
        goto LABEL_12;
      }
      uint64_t v4 = *(void *)(v4 + 224);
      if (v3) {
        goto LABEL_11;
      }
LABEL_12:
      uint64_t v3 = v1;
      if (!v4)
      {
        int v6 = 1;
        uint64_t v3 = v1;
        if (v1) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    uint64_t v4 = 0;
    uint64_t v1 = 0;
    if (!v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  int v6 = 1;
  if (v3) {
LABEL_21:
  }
    sub_216784EC4(v3);
LABEL_22:
  if (v6) {
    return *a1 + 72;
  }
  else {
    return (uint64_t)v1;
  }
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v295 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B960E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B960E0))
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B960D8, &dword_216758000);
    __cxa_guard_release(&qword_267B960E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96100))
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v198);
    uint64_t v8 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
    }
    qword_267B960E8 = v198;
    qword_267B960F0 = v8;
    if ((v8 & 7) != 0)
    {
      long long v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        qword_267B960F0 &= 0xFFFFFFFFFFFFFFF8;
      }
      dword_267B960F8 = 0;
      byte_267B960FC = 0;
      atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      dword_267B960F8 = 0;
      byte_267B960FC = 0;
    }
    __cxa_atexit((void (*)(void *))sub_217170040, &qword_267B960E8, &dword_216758000);
    __cxa_guard_release(&qword_267B96100);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96130))
  {
    unint64_t v171 = a1;
    uint64_t v170 = a2;
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10) {
      uint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v11 = *(void *)v10;
    uint64_t v197 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0)
    {
      uint64_t v12 = qword_267B960D8;
      unint64_t v13 = qword_267B960D8 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v12 = v13; {
      uint64_t v197 = v12;
      }
    }
    unint64_t v14 = v197;
    if ((v197 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v197 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v14 = v197;
      }
      else {
        unint64_t v14 = v197 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v199, "BOOLean");
    v199[3] = v11;
    v199[4] = v14;
    int v200 = 0;
    char v201 = 1;
    unint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v15) {
      unint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v16 = *((void *)v15 + 76);
    uint64_t v196 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0)
    {
      uint64_t v17 = qword_267B960D8;
      unint64_t v18 = qword_267B960D8 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v17 = v18; {
      uint64_t v196 = v17;
      }
    }
    unint64_t v19 = v196;
    if ((v196 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v196 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v19 = v196;
      }
      else {
        unint64_t v19 = v196 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v202, "color2array");
    v202[3] = v16;
    v202[4] = v19;
    int v203 = 0;
    char v204 = 0;
    unsigned __int8 v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v20) {
      unsigned __int8 v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v21 = *((void *)v20 + 19);
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v22) {
      uint64_t v22 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v195 = *((void *)v22 + 2);
    if ((v195 & 7) != 0)
    {
      unint64_t v23 = *((void *)v22 + 2);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v23 = v195 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v195 = v23;
    }
    unint64_t v24 = v195;
    if ((v195 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v24 = v195;
      }
      else {
        unint64_t v24 = v195 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v205, "color2");
    v205[3] = v21;
    v205[4] = v24;
    int v206 = 2;
    char v207 = 0;
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25) {
      uint64_t v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v26 = *((void *)v25 + 92);
    long long v27 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v27) {
      long long v27 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v194 = *((void *)v27 + 4);
    if ((v194 & 7) != 0)
    {
      unint64_t v28 = *((void *)v27 + 4);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v194 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v28 = v194 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v194 = v28;
    }
    unint64_t v29 = v194;
    if ((v194 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v194 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v29 = v194;
      }
      else {
        unint64_t v29 = v194 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v208, "color3array");
    v208[3] = v26;
    v208[4] = v29;
    int v209 = 0;
    char v210 = 1;
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v30) {
      uint64_t v30 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v31 = *((void *)v30 + 35);
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v32) {
      uint64_t v32 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v193 = *((void *)v32 + 4);
    if ((v193 & 7) != 0)
    {
      unint64_t v33 = *((void *)v32 + 4);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v193 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v33 = v193 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v193 = v33;
    }
    unint64_t v34 = v193;
    if ((v193 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v193 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v34 = v193;
      }
      else {
        unint64_t v34 = v193 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v211, "color3");
    v211[3] = v31;
    v211[4] = v34;
    int v212 = 0;
    char v213 = 1;
    uint64_t v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v35) {
      uint64_t v35 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v36 = *((void *)v35 + 95);
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v37) {
      uint64_t v37 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v192 = *((void *)v37 + 5);
    if ((v192 & 7) != 0)
    {
      unint64_t v38 = *((void *)v37 + 5);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v38 = v192 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v192 = v38;
    }
    unint64_t v39 = v192;
    if ((v192 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v39 = v192;
      }
      else {
        unint64_t v39 = v192 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v214, "color4array");
    v214[3] = v36;
    v214[4] = v39;
    int v215 = 0;
    char v216 = 1;
    uint64_t v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v40) {
      uint64_t v40 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v41 = *((void *)v40 + 38);
    uint64_t v42 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v42) {
      uint64_t v42 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v191 = *((void *)v42 + 5);
    if ((v191 & 7) != 0)
    {
      unint64_t v43 = *((void *)v42 + 5);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v191 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v43 = v191 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v191 = v43;
    }
    unint64_t v44 = v191;
    if ((v191 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v191 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v44 = v191;
      }
      else {
        unint64_t v44 = v191 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v217, "color4");
    v217[3] = v41;
    v217[4] = v44;
    int v218 = 0;
    char v219 = 1;
    uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v45) {
      uint64_t v45 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v46 = *((void *)v45 + 12);
    unint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v47) {
      unint64_t v47 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v190 = *((void *)v47 + 1);
    if ((v190 & 7) != 0)
    {
      unint64_t v48 = *((void *)v47 + 1);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v190 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v48 = v190 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v190 = v48;
    }
    unint64_t v49 = v190;
    if ((v190 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v190 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v49 = v190;
      }
      else {
        unint64_t v49 = v190 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v220, "filename");
    v220[3] = v46;
    v220[4] = v49;
    int v221 = 0;
    char v222 = 1;
    uint64_t v50 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v50) {
      uint64_t v50 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v51 = *((void *)v50 + 64);
    int v52 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v52) {
      int v52 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v189 = *((void *)v52 + 2);
    if ((v189 & 7) != 0)
    {
      unint64_t v53 = *((void *)v52 + 2);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v53 = v189 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v189 = v53;
    }
    unint64_t v54 = v189;
    if ((v189 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v54 = v189;
      }
      else {
        unint64_t v54 = v189 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v223, "floatarray");
    v223[3] = v51;
    v223[4] = v54;
    int v224 = 0;
    char v225 = 1;
    uint64_t v55 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v55) {
      uint64_t v55 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v56 = *((void *)v55 + 7);
    int v57 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v57) {
      int v57 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v188 = *((void *)v57 + 2);
    if ((v188 & 7) != 0)
    {
      unint64_t v58 = *((void *)v57 + 2);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v188 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v58 = v188 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v188 = v58;
    }
    unint64_t v59 = v188;
    if ((v188 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v188 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v59 = v188;
      }
      else {
        unint64_t v59 = v188 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v226, "float");
    v226[3] = v56;
    v226[4] = v59;
    int v227 = 0;
    char v228 = 1;
    uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v60) {
      uint64_t v60 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v61 = *((void *)v60 + 6);
    uint64_t v62 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v62) {
      uint64_t v62 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v187 = *((void *)v62 + 3);
    if ((v187 & 7) != 0)
    {
      unint64_t v63 = *((void *)v62 + 3);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v63 = v187 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v187 = v63;
    }
    unint64_t v64 = v187;
    if ((v187 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v64 = v187;
      }
      else {
        unint64_t v64 = v187 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v229, "half");
    v229[3] = v61;
    v229[4] = v64;
    int v230 = 0;
    char v231 = 1;
    uint64_t v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v65) {
      uint64_t v65 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v66 = *((void *)v65 + 67);
    uint64_t v186 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0)
    {
      uint64_t v67 = qword_267B960D8;
      unint64_t v68 = qword_267B960D8 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v67 = v68; {
      uint64_t v186 = v67;
      }
    }
    unint64_t v69 = v186;
    if ((v186 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v69 = v186;
      }
      else {
        unint64_t v69 = v186 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v232, "geomnamearray");
    v232[3] = v66;
    v232[4] = v69;
    int v233 = 0;
    char v234 = 0;
    uint64_t v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v70) {
      uint64_t v70 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v71 = *((void *)v70 + 10);
    uint64_t v185 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0)
    {
      uint64_t v72 = qword_267B960D8;
      unint64_t v73 = qword_267B960D8 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v72 = v73; {
      uint64_t v185 = v72;
      }
    }
    unint64_t v74 = v185;
    if ((v185 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v185 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v74 = v185;
      }
      else {
        unint64_t v74 = v185 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v235, "geomname");
    v235[3] = v71;
    v235[4] = v74;
    int v236 = 0;
    char v237 = 0;
    int v75 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v75) {
      int v75 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v76 = *((void *)v75 + 58);
    uint64_t v77 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v77) {
      uint64_t v77 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v184 = *(void *)v77;
    if ((*(void *)v77 & 7) != 0)
    {
      unint64_t v78 = *(void *)v77;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v78 = v184 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v184 = v78;
    }
    unint64_t v79 = v184;
    if ((v184 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v79 = v184;
      }
      else {
        unint64_t v79 = v184 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v238, "integerarray");
    v238[3] = v76;
    v238[4] = v79;
    int v239 = 0;
    char v240 = 1;
    long long v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v80) {
      long long v80 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v81 = *((void *)v80 + 2);
    int v82 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v82) {
      int v82 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v183 = *(void *)v82;
    if ((*(void *)v82 & 7) != 0)
    {
      unint64_t v83 = *(void *)v82;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v183 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v83 = v183 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v183 = v83;
    }
    unint64_t v84 = v183;
    if ((v183 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v183 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v84 = v183;
      }
      else {
        unint64_t v84 = v183 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v241, "integer");
    v241[3] = v81;
    v241[4] = v84;
    int v242 = 0;
    char v243 = 1;
    unint64_t v85 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v85) {
      unint64_t v85 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v86 = *((void *)v85 + 44);
    uint64_t v182 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0)
    {
      uint64_t v87 = qword_267B960D8;
      unint64_t v88 = qword_267B960D8 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v87 = v88; {
      uint64_t v182 = v87;
      }
    }
    unint64_t v89 = v182;
    if ((v182 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v89 = v182;
      }
      else {
        unint64_t v89 = v182 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v244, "matrix33");
    v244[3] = v86;
    v244[4] = v89;
    int v245 = 0;
    char v246 = 1;
    uint64_t v90 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v90) {
      uint64_t v90 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v91 = *((void *)v90 + 45);
    uint64_t v92 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v92) {
      uint64_t v92 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v181 = *((void *)v92 + 9);
    if ((v181 & 7) != 0)
    {
      unint64_t v93 = *((void *)v92 + 9);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v181 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v93 = v181 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v181 = v93;
    }
    unint64_t v94 = v181;
    if ((v181 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v181 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v94 = v181;
      }
      else {
        unint64_t v94 = v181 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v247, "matrix44");
    v247[3] = v91;
    v247[4] = v94;
    int v248 = 0;
    char v249 = 1;
    std::string::size_type v95 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v95) {
      std::string::size_type v95 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v96 = *((void *)v95 + 67);
    char v97 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v97) {
      char v97 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v180 = *((void *)v97 + 1);
    if ((v180 & 7) != 0)
    {
      unint64_t v98 = *((void *)v97 + 1);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v98 = v180 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v180 = v98;
    }
    unint64_t v99 = v180;
    if ((v180 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v99 = v180;
      }
      else {
        unint64_t v99 = v180 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v250, "stringarray");
    v250[3] = v96;
    v250[4] = v99;
    int v251 = 0;
    char v252 = 1;
    uint64_t v100 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v100) {
      uint64_t v100 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v101 = *((void *)v100 + 10);
    int v102 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v102) {
      int v102 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v179 = *((void *)v102 + 1);
    if ((v179 & 7) != 0)
    {
      unint64_t v103 = *((void *)v102 + 1);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v103 = v179 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v179 = v103;
    }
    unint64_t v104 = v179;
    if ((v179 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v104 = v179;
      }
      else {
        unint64_t v104 = v179 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v253, "string");
    v253[3] = v101;
    v253[4] = v104;
    int v254 = 0;
    char v255 = 1;
    double v105 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v105) {
      double v105 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v106 = *((void *)v105 + 11);
    int64x2_t v107 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v107) {
      int64x2_t v107 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v178 = *((void *)v107 + 11);
    if ((v178 & 7) != 0)
    {
      unint64_t v108 = *((void *)v107 + 11);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v178 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v108 = v178 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v178 = v108;
    }
    unint64_t v109 = v178;
    if ((v178 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v178 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v109 = v178;
      }
      else {
        unint64_t v109 = v178 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v256, "surfaceshader");
    v256[3] = v106;
    v256[4] = v109;
    int v257 = 0;
    char v258 = 1;
    uint64_t v110 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v110) {
      uint64_t v110 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v111 = *((void *)v110 + 76);
    uint64_t v177 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0)
    {
      uint64_t v112 = qword_267B960D8;
      unint64_t v113 = qword_267B960D8 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v112 = v113; {
      uint64_t v177 = v112;
      }
    }
    unint64_t v114 = v177;
    if ((v177 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v114 = v177;
      }
      else {
        unint64_t v114 = v177 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v259, "vector2array");
    v259[3] = v111;
    v259[4] = v114;
    int v260 = 0;
    char v261 = 1;
    uint64_t v115 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v115) {
      uint64_t v115 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v116 = *((void *)v115 + 19);
    uint64_t v117 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v117) {
      uint64_t v117 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v176 = *((void *)v117 + 2);
    if ((v176 & 7) != 0)
    {
      unint64_t v118 = *((void *)v117 + 2);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v118 = v176 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v176 = v118;
    }
    unint64_t v119 = v176;
    if ((v176 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v119 = v176;
      }
      else {
        unint64_t v119 = v176 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v262, "vector2");
    v262[3] = v116;
    v262[4] = v119;
    int v263 = 2;
    char v264 = 1;
    uint64_t v120 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v120) {
      uint64_t v120 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v121 = *((void *)v120 + 16);
    long long v122 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v122) {
      long long v122 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v175 = *((void *)v122 + 2);
    if ((v175 & 7) != 0)
    {
      unint64_t v123 = *((void *)v122 + 2);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v123 = v175 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v175 = v123;
    }
    unint64_t v124 = v175;
    if ((v175 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v124 = v175;
      }
      else {
        unint64_t v124 = v175 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v265, "half2");
    v265[3] = v121;
    v265[4] = v124;
    int v266 = 2;
    char v267 = 1;
    long long v125 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v125) {
      long long v125 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v126 = *((void *)v125 + 13);
    uint64_t v127 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v127) {
      uint64_t v127 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v174 = *(void *)v127;
    if ((*(void *)v127 & 7) != 0)
    {
      unint64_t v128 = *(void *)v127;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v128 = v174 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v174 = v128;
    }
    unint64_t v129 = v174;
    if ((v174 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v129 = v174;
      }
      else {
        unint64_t v129 = v174 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v268, "integer2");
    v268[3] = v126;
    v268[4] = v129;
    int v269 = 2;
    char v270 = 1;
    std::string v130 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v130) {
      std::string v130 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v131 = *((void *)v130 + 77);
    uint64_t v173 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0)
    {
      uint64_t v132 = qword_267B960D8;
      unint64_t v133 = qword_267B960D8 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v132 = v133; {
      uint64_t v173 = v132;
      }
    }
    unint64_t v134 = v173;
    if ((v173 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v173 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v134 = v173;
      }
      else {
        unint64_t v134 = v173 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v271, "vector3array");
    v271[3] = v131;
    v271[4] = v134;
    int v272 = 0;
    char v273 = 1;
    unint64_t v135 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v135) {
      unint64_t v135 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v136 = *((void *)v135 + 20);
    uint64_t v137 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v137) {
      uint64_t v137 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v172 = *((void *)v137 + 2);
    if ((v172 & 7) != 0)
    {
      unint64_t v138 = *((void *)v137 + 2);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v138 = v172 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v172 = v138;
    }
    unint64_t v139 = v172;
    if ((v172 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v139 = v172;
      }
      else {
        unint64_t v139 = v172 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v274, "vector3");
    v274[3] = v136;
    v274[4] = v139;
    int v275 = 3;
    char v276 = 1;
    uint64_t v140 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v140) {
      uint64_t v140 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v141 = *((void *)v140 + 17);
    unint64_t v142 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v142) {
      unint64_t v142 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v143 = *((void *)v142 + 2);
    if ((v143 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v143 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v144 = v143;
    if ((v143 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v143 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v277, "half3");
    v277[3] = v141;
    v277[4] = v144;
    int v278 = 3;
    char v279 = 1;
    uint64_t v145 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v145) {
      uint64_t v145 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v146 = *((void *)v145 + 14);
    uint64_t v147 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v147) {
      uint64_t v147 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v148 = *(void *)v147;
    if ((*(void *)v147 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v148 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v149 = v148;
    if ((v148 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v149 = v148;
      }
      else {
        unint64_t v149 = v148 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v280, "integer3");
    v280[3] = v146;
    v280[4] = v149;
    int v281 = 3;
    char v282 = 1;
    v150 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v150) {
      v150 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v151 = *((void *)v150 + 78);
    uint64_t v152 = qword_267B960D8;
    if ((qword_267B960D8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B960D8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v152 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v153 = v152;
    if ((v152 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v283, "vector4array");
    v283[3] = v151;
    v283[4] = v153;
    int v284 = 0;
    char v285 = 1;
    unint64_t v154 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v154) {
      unint64_t v154 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v155 = *((void *)v154 + 21);
    uint64_t v156 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v156) {
      uint64_t v156 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v157 = *((void *)v156 + 2);
    if ((v157 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v157 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v158 = v157;
    if ((v157 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v158 = v157;
      }
      else {
        unint64_t v158 = v157 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v286, "vector4");
    v286[3] = v155;
    v286[4] = v158;
    int v287 = 4;
    char v288 = 1;
    long long v159 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v159) {
      long long v159 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v160 = *((void *)v159 + 18);
    unint64_t v161 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v161) {
      unint64_t v161 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v162 = *((void *)v161 + 2);
    if ((v162 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v162 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v163 = v162;
    if ((v162 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v163 = v162;
      }
      else {
        unint64_t v163 = v162 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v289, "half4");
    v289[3] = v160;
    v289[4] = v163;
    int v290 = 4;
    char v291 = 1;
    uint64_t v164 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v164) {
      uint64_t v164 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v165 = *((void *)v164 + 15);
    int v166 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v166) {
      int v166 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    unint64_t v167 = *(void *)v166;
    if ((*(void *)v166 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v167 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v168 = v167;
    if ((v167 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v168 = v167;
      }
      else {
        unint64_t v168 = v167 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    sub_216779094(v292, "integer4");
    v292[3] = v165;
    v292[4] = v168;
    int v293 = 4;
    char v294 = 1;
    sub_217172038((uint64_t)qword_267B96108, (unsigned __int8 *)v199, 32);
    for (uint64_t i = 186; i != -6; i -= 6)
      sub_21717005C((uint64_t)&v199[i]);
    if ((v167 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v162 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v157 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v152 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v148 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v143 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v172 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v173 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v173 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v174 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v175 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v176 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v177 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v178 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v178 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v179 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v180 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v181 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v181 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v182 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v183 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v183 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v184 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v185 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v186 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v187 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v188 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v188 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v189 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v190 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v190 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v191 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v191 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v192 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v193 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v193 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v194 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v194 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v195 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v196 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v196 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v197 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v197 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_2171700A8, qword_267B96108, &dword_216758000);
    __cxa_guard_release(&qword_267B96130);
    a2 = v170;
    a1 = v171;
  }
  uint64_t result = sub_2170396E4(qword_267B96108, a1);
  char v5 = (uint64_t *)(result + 40);
  if (!result) {
    char v5 = &qword_267B960E8;
  }
  uint64_t v6 = v5[1];
  *(void *)a2 = *v5;
  *(void *)(a2 + 8) = v6;
  if ((v6 & 7) != 0)
  {
    uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)(a2 + 8) = v7;
    }
  }
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v5 + 4);
  *(unsigned char *)(a2 + 20) = *((unsigned char *)v5 + 20);
  return result;
}

void sub_21716F5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_Unwind_Exception *exception_objecta,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a12) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a13) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a15) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a17) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a18) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a19) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a20) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a21) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a22) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a24) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a25) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a26) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a27) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a28) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a29) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a30) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a31) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a32) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a33) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a34) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a35) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a36) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a37) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a38) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a39) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a40) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  while (v69 != &a69)
  {
    v69 -= 48;
    sub_21717005C((uint64_t)v69);
  }
  __cxa_guard_abort(&qword_267B96130);
  _Unwind_Resume(a1);
}

uint64_t sub_217170040(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_21717005C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96150))
  {
    sub_216779094(qword_267B96138, "default");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267B96138, &dword_216758000);
    __cxa_guard_release(&qword_267B96150);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96170))
  {
    sub_216779094(byte_267B96158, off_26798DB90[0]);
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267B96158, &dword_216758000);
    __cxa_guard_release(&qword_267B96170);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96190))
  {
    sub_216779094(qword_267B96178, off_26798DB98[0]);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267B96178, &dword_216758000);
    __cxa_guard_release(&qword_267B96190);
  }
  if (*(void *)a1)
  {
    if (a2) {
      uint64_t v6 = (unsigned __int8 *)qword_267B96138;
    }
    else {
      uint64_t v6 = (unsigned __int8 *)qword_267B96178;
    }
    uint64_t v7 = sub_2170396E4((void *)(*(void *)a1 + 160), v6);
    if (v7) {
      uint64_t v8 = (long long *)(v7 + 40);
    }
    else {
      uint64_t v8 = sub_21730D998();
    }
    long long v9 = sub_2170396E4((void *)(*(void *)a1 + 160), byte_267B96158);
    if (v9) {
      uint64_t v10 = (long long *)(v9 + 40);
    }
    else {
      uint64_t v10 = sub_21730D998();
    }
    sub_2171702E4((uint64_t)v8, (unsigned __int8 *)v10, a3);
  }
  else
  {
    *(void *)(a3 + 8) = 0;
  }
}

void sub_2171702AC(_Unwind_Exception *a1)
{
}

void sub_2171702E4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B961F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B961F0))
  {
    sub_216779094(byte_267B961D8, "filename");
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267B961D8, &dword_216758000);
    __cxa_guard_release(&qword_267B961F0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96210, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96210))
  {
    sub_216779094(byte_267B961F8, "geomname");
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267B961F8, &dword_216758000);
    __cxa_guard_release(&qword_267B96210);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (!v6) {
    goto LABEL_113;
  }
  sub_217315CE4((std::string *)a1, a2, &v67);
  if ((void)v67)
  {
    if (sub_21730EBB0((const void *)v67))
    {
      char v7 = 0;
      char v8 = *sub_21730EC14((const void *)v67);
      *(void *)(a3 + 8) = &unk_26C7501AB;
      *(unsigned char *)a3 = v8;
      goto LABEL_110;
    }
    if (sub_21730E3EC((const void *)v67))
    {
      char v7 = 0;
      int v9 = *(_DWORD *)sub_21730E450((const void *)v67);
      *(void *)(a3 + 8) = &unk_26C750543;
LABEL_11:
      *(_DWORD *)a3 = v9;
      goto LABEL_110;
    }
    if (sub_21730EFC8((const void *)v67))
    {
      char v7 = 0;
      float v10 = *(float *)sub_21730F02C((const void *)v67);
LABEL_14:
      *(void *)(a3 + 8) = &unk_26C750A4B;
      *(float *)a3 = v10;
      goto LABEL_110;
    }
    if (sub_21730F7B8((const void *)v67))
    {
      uint64_t v11 = (__int16 *)sub_21730F81C((const void *)v67);
      float v12 = sub_217171D9C(v11);
      sub_217171E00(&v68, v12);
      char v7 = 0;
      *(void *)(a3 + 8) = (char *)&off_26C750990 + 3;
      *(_WORD *)a3 = v68;
      goto LABEL_110;
    }
    if (sub_217313828((const void *)v67))
    {
      if (sub_21691B1C8(a2, byte_267B961D8))
      {
        sub_21731388C((const void *)v67);
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v68);
        *(void *)(a3 + 8) = &off_26C755A30;
        sub_2169B3DA8((void *)a3, &v68);
        sub_21682E578((uint64_t)&v68);
      }
      else
      {
        sub_21691B1C8(a2, byte_267B961F8);
        uint64_t v21 = sub_21731388C((const void *)v67);
        *(void *)(a3 + 8) = &off_26C750BB8;
        sub_21691B31C((unsigned int **)a3, (uint64_t)v21);
      }
LABEL_57:
      char v7 = 0;
      goto LABEL_110;
    }
    if (sub_217313F10((const void *)v67))
    {
      unint64_t v13 = sub_217313F74((const void *)v67);
      *(void *)&long long v70 = 0;
      long long v68 = 0u;
      long long v69 = 0u;
      sub_217171E6C((unint64_t *)&v68, *((void *)v13 + 1));
      unint64_t v15 = *(void **)v13;
      unint64_t v14 = *((void *)v13 + 1);
      int v16 = v14 & 0x3F;
      if (v14 > 0x3F || (v14 & 0x3F) != 0)
      {
        int v17 = 0;
        int v18 = 0;
        unint64_t v19 = &v15[v14 >> 6];
        do
        {
          LOBYTE(__p[0]) = (*v15 >> v18) & 1;
          sub_216A31778((uint64_t)&v68, __p);
          v15 += v17 == 63;
          if (v17 == 63) {
            int v17 = 0;
          }
          else {
            int v17 = v18 + 1;
          }
          BOOL v20 = v15 == v19 && v16 == v17;
          int v18 = v17;
        }
        while (!v20);
      }
      *(void *)(a3 + 8) = &off_26C7553B0;
      sub_2168F8DBC((void *)a3, (uint64_t)&v68);
      sub_2168F83DC((uint64_t)&v68);
      goto LABEL_57;
    }
    if (sub_217313ACC((const void *)v67))
    {
      uint64_t v22 = sub_217313B30((const void *)v67);
      *(void *)&long long v70 = 0;
      long long v68 = 0u;
      long long v69 = 0u;
      sub_216F4DD50((unint64_t *)&v68, (uint64_t)(*((void *)v22 + 1) - *(void *)v22) >> 2);
      unint64_t v24 = *(_DWORD **)v22;
      unint64_t v23 = (_DWORD *)*((void *)v22 + 1);
      while (v24 != v23)
      {
        LODWORD(__p[0]) = *v24;
        sub_216F51340((uint64_t)&v68, __p);
        ++v24;
      }
      *(void *)(a3 + 8) = &off_26C74FA68;
      sub_2168F8DBC((void *)a3, (uint64_t)&v68);
      sub_2168F83DC((uint64_t)&v68);
      goto LABEL_57;
    }
    if (sub_2173142AC((const void *)v67))
    {
      uint64_t v25 = sub_217314310((const void *)v67);
      *(void *)&long long v70 = 0;
      long long v68 = 0u;
      long long v69 = 0u;
      sub_21700874C((unint64_t *)&v68, (uint64_t)(*((void *)v25 + 1) - *(void *)v25) >> 2);
      long long v27 = *(_DWORD **)v25;
      uint64_t v26 = (_DWORD *)*((void *)v25 + 1);
      while (v27 != v26)
      {
        LODWORD(__p[0]) = *v27;
        sub_21700CA54((uint64_t)&v68, __p);
        ++v27;
      }
      *(void *)(a3 + 8) = &off_26C74ECC0;
      sub_2168F8DBC((void *)a3, (uint64_t)&v68);
      sub_2168F83DC((uint64_t)&v68);
      goto LABEL_57;
    }
    if (sub_2173146F0((const void *)v67))
    {
      unint64_t v28 = sub_217314754((const void *)v67);
      *(void *)&long long v70 = 0;
      long long v68 = 0u;
      long long v69 = 0u;
      sub_216F98E54((unint64_t *)&v68, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v28 + 1) - *(void *)v28) >> 3));
      uint64_t v30 = *(long long **)v28;
      unint64_t v29 = (long long *)*((void *)v28 + 1);
      while (v30 != v29)
      {
        if (*((char *)v30 + 23) < 0)
        {
          sub_216778F24(__p, *(void **)v30, *((void *)v30 + 1));
        }
        else
        {
          long long v31 = *v30;
          uint64_t v66 = *((void *)v30 + 2);
          *(_OWORD *)std::string __p = v31;
        }
        sub_216A32084((uint64_t)&v68, (long long *)__p);
        if (SHIBYTE(v66) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v30 = (long long *)((char *)v30 + 24);
      }
      *(void *)(a3 + 8) = off_26C7558C0;
      sub_2168F8DBC((void *)a3, (uint64_t)&v68);
      sub_2169B1EE4(&v68);
      goto LABEL_57;
    }
    if (sub_21730FFF0((const void *)v67))
    {
      uint64_t v32 = sub_217310054((const void *)v67);
      *(void *)&long long v68 = *(void *)v32;
      DWORD2(v68) = *((_DWORD *)v32 + 2);
      *(void *)(a3 + 8) = (char *)&off_26C74E590 + 2;
      unint64_t v33 = operator new(0x10uLL);
LABEL_55:
      char v7 = 0;
      *(void *)unint64_t v33 = v68;
      _OWORD v33[2] = DWORD2(v68);
      unint64_t v34 = v33 + 3;
LABEL_61:
      atomic_store(0, v34);
      *(void *)a3 = v33;
      atomic_fetch_add_explicit((atomic_uint *volatile)v34, 1u, memory_order_relaxed);
      goto LABEL_110;
    }
    if (sub_217310474((const void *)v67))
    {
      long long v68 = *(_OWORD *)sub_2173104D8((const void *)v67);
      *(void *)(a3 + 8) = (char *)&off_26C74E7B8 + 2;
      unint64_t v33 = operator new(0x14uLL);
LABEL_60:
      char v7 = 0;
      *(_OWORD *)unint64_t v33 = v68;
      unint64_t v34 = v33 + 4;
      goto LABEL_61;
    }
    if (sub_2173108F4((const void *)v67))
    {
      char v7 = 0;
      uint64_t v35 = *(void *)sub_217310958((const void *)v67);
      unint64_t v36 = (unint64_t)&off_26C74E368;
LABEL_64:
      *(void *)a3 = v35;
      *(void *)(a3 + 8) = v36 | 3;
      goto LABEL_110;
    }
    if (sub_217310D78((const void *)v67))
    {
      uint64_t v37 = sub_217310DDC((const void *)v67);
      *(void *)&long long v68 = *(void *)v37;
      DWORD2(v68) = *((_DWORD *)v37 + 2);
      *(void *)(a3 + 8) = (char *)&off_26C74E590 + 2;
      unint64_t v33 = operator new(0x10uLL);
      goto LABEL_55;
    }
    if (sub_2173111FC((const void *)v67))
    {
      long long v68 = *(_OWORD *)sub_217311260((const void *)v67);
      *(void *)(a3 + 8) = (char *)&off_26C74E7B8 + 2;
      unint64_t v33 = operator new(0x14uLL);
      goto LABEL_60;
    }
    if (sub_21731167C((const void *)v67))
    {
      unint64_t v38 = sub_2173116E0((const void *)v67);
      for (uint64_t i = 0; i != 4; i += 2)
      {
        float v40 = sub_217171D9C((__int16 *)&v38[i]);
        sub_217171E00(__p, v40);
        *(_WORD *)((char *)&v68 + i) = __p[0];
      }
      char v7 = 0;
      *(void *)(a3 + 8) = (char *)&off_26C74E2B0 + 3;
      int v9 = v68;
      goto LABEL_11;
    }
    if (sub_217311A80((const void *)v67))
    {
      uint64_t v41 = sub_217311AE4((const void *)v67);
      for (uint64_t j = 0; j != 6; j += 2)
      {
        float v43 = sub_217171D9C((__int16 *)&v41[j]);
        sub_217171E00(__p, v43);
        *(_WORD *)((char *)&v68 + j) = __p[0];
      }
      char v7 = 0;
      *(void *)(a3 + 8) = (char *)&off_26C74E4D8 + 3;
      *(_DWORD *)a3 = v68;
      *(_WORD *)(a3 + 4) = WORD2(v68);
      goto LABEL_110;
    }
    if (sub_217311E88((const void *)v67))
    {
      unint64_t v44 = sub_217311EEC((const void *)v67);
      for (uint64_t k = 0; k != 8; k += 2)
      {
        float v46 = sub_217171D9C((__int16 *)&v44[k]);
        sub_217171E00(__p, v46);
        *(_WORD *)((char *)&v68 + k) = __p[0];
      }
      char v7 = 0;
      *(void *)a3 = v68;
      *(void *)(a3 + 8) = (char *)&off_26C74E700 + 3;
      goto LABEL_110;
    }
    if (sub_217312284((const void *)v67))
    {
      char v7 = 0;
      uint64_t v35 = *(void *)sub_2173122E8((const void *)v67);
      unint64_t v36 = (unint64_t)&off_26C755DE0;
      goto LABEL_64;
    }
    if (sub_217312688((const void *)v67))
    {
      unint64_t v47 = sub_2173126EC((const void *)v67);
      *(void *)&long long v68 = *(void *)v47;
      DWORD2(v68) = *((_DWORD *)v47 + 2);
      *(void *)(a3 + 8) = (char *)&off_26C755F50 + 2;
      unint64_t v33 = operator new(0x10uLL);
      goto LABEL_55;
    }
    if (sub_217312A8C((const void *)v67))
    {
      long long v68 = *(_OWORD *)sub_217312AF0((const void *)v67);
      *(void *)(a3 + 8) = (char *)&off_26C7560C0 + 2;
      unint64_t v33 = operator new(0x14uLL);
      goto LABEL_60;
    }
    if (sub_217312E88((const void *)v67))
    {
      unint64_t v48 = sub_217312EEC((const void *)v67);
      uint64_t v49 = 0;
      uint64_t v50 = &v68;
      do
      {
        for (uint64_t m = 0; m != 3; ++m)
          *((double *)v50 + m) = *(float *)&v48[4 * m];
        ++v49;
        uint64_t v50 = (long long *)((char *)v50 + 24);
        v48 += 12;
      }
      while (v49 != 3);
      *(void *)(a3 + 8) = (char *)&off_26C752928 + 2;
      unint64_t v33 = operator new(0x50uLL);
      char v7 = 0;
      long long v52 = v71;
      *((_OWORD *)v33 + 2) = v70;
      *((_OWORD *)v33 + 3) = v52;
      *((void *)v33 + 8) = v72;
      long long v53 = v69;
      *(_OWORD *)unint64_t v33 = v68;
      *((_OWORD *)v33 + 1) = v53;
      unint64_t v34 = v33 + 18;
      goto LABEL_61;
    }
    if (sub_217313358((const void *)v67))
    {
      unint64_t v54 = sub_2173133BC((const void *)v67);
      for (uint64_t n = 0; n != 4; ++n)
      {
        float32x4_t v56 = *(float32x4_t *)&v54[16 * n];
        int v57 = (float64x2_t *)(&v68 + 2 * n);
        *int v57 = vcvtq_f64_f32(*(float32x2_t *)v56.f32);
        v57[1] = vcvt_hight_f64_f32(v56);
      }
      *(void *)(a3 + 8) = (char *)&off_26C74E928 + 2;
      unint64_t v33 = operator new(0x88uLL);
      char v7 = 0;
      long long v58 = v73;
      *((_OWORD *)v33 + 4) = v72;
      *((_OWORD *)v33 + 5) = v58;
      long long v59 = v75;
      *((_OWORD *)v33 + 6) = v74;
      *((_OWORD *)v33 + 7) = v59;
      long long v60 = v69;
      *(_OWORD *)unint64_t v33 = v68;
      *((_OWORD *)v33 + 1) = v60;
      long long v61 = v71;
      *((_OWORD *)v33 + 2) = v70;
      *((_OWORD *)v33 + 3) = v61;
      unint64_t v34 = v33 + 32;
      goto LABEL_61;
    }
    if (sub_217314B88((const void *)v67))
    {
      char v7 = 0;
      uint64_t v62 = *(void *)sub_217314BEC((const void *)v67);
      *(void *)(a3 + 8) = &unk_26C750543;
      *(_DWORD *)a3 = v62;
      goto LABEL_110;
    }
    if (sub_217315404((const void *)v67))
    {
      char v7 = 0;
      float v10 = *(double *)sub_217315468((const void *)v67);
      goto LABEL_14;
    }
    *(void *)&long long v68 = "usdMtlx/utils.mm";
    *((void *)&v68 + 1) = "_GetUsdValue";
    *(void *)&long long v69 = 178;
    *((void *)&v69 + 1) = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetUsdValue(const std::str"
                            "ing &, const std::string &)";
    LOBYTE(v70) = 0;
    if ((a2[23] & 0x80u) == 0) {
      unint64_t v64 = (uint64_t *)a2;
    }
    else {
      unint64_t v64 = *(uint64_t **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v68, (pxrInternal__aapl__pxrReserved__ *)"MaterialX unsupported type %s", v63, v64);
  }
  char v7 = 1;
LABEL_110:
  if (*((void *)&v67 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v67 + 1));
  }
  if (v7) {
LABEL_113:
  }
    *(void *)(a3 + 8) = 0;
}

void sub_217170D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20)
{
  if (a19) {
    sub_216784EC4(a19);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetPackedUsdValues(std::string *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v6 = *((void *)a2 + 1);
  }
  if (v6 < 5 || (v7 >= 0 ? (char v8 = (const char *)a2) : (char v8 = *(const char **)a2), strcmp(&v8[v6 - 5], "array")))
  {
    sub_216779094(&__p, ",");
    pxrInternal__aapl__pxrReserved__::TfStringSplit(a1, (char *)&__p, &v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = v17;
    for (uint64_t i = v18; v9 != i; v9 += 24)
    {
      if (*(char *)(v9 + 23) < 0)
      {
        sub_216778F24(&__p, *(void **)v9, *(void *)(v9 + 8));
      }
      else
      {
        long long v11 = *(_OWORD *)v9;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &__p, &v15);
      sub_2171702E4((uint64_t)&v15, a2, (uint64_t)&v19);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      uint64_t v12 = v20;
      if (v20)
      {
        sub_216C6401C(a3, &v19);
      }
      else
      {
        uint64_t v14 = *a3;
        for (uint64_t j = a3[1]; j != v14; uint64_t j = sub_2168EE084(j - 16))
          ;
        a3[1] = v14;
      }
      sub_2168EE084((uint64_t)&v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v12) {
        break;
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    sub_216782F20((void ***)&__p);
  }
}

void sub_217171064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_216932118((void ***)&__p);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray@<Q0>(std::string *__str@<X0>, uint64_t *a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B961B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B961B0))
  {
    sub_216779094(&unk_267B96198, ",");
    __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267B96198, &dword_216758000);
    __cxa_guard_release(&qword_267B961B0);
  }
  sub_21730DD58(__str, (unsigned __int8 **)&unk_267B96198, a2);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    sub_21730E248((std::string *)v5, &v7);
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    __n128 result = *(__n128 *)&v7.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&v7.__r_.__value_.__l + 2);
    *(__n128 *)uint64_t v5 = result;
    v5 += 24;
  }
  return result;
}

void sub_2171711D8(_Unwind_Exception *a1)
{
}

void *sub_217171208(void *a1, std::string *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_2173200AC((uint64_t)a1, a2);
  return a1;
}

void sub_217171240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void sub_217171258(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_216782F20(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2171712CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_2171712F8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  sub_216782F20(&v3);
  sub_2171713D4((void *)(a1 + 8));
  return a1;
}

uint64_t sub_21717133C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2171713D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_217171460(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C77B938;
  result[1] = v3;
  return result;
}

uint64_t sub_2171714A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C77B938;
  a2[1] = v2;
  return result;
}

void sub_2171714D4(uint64_t a1, std::string::size_type *a2, char **a3, uint64_t *a4, long long ***a5)
{
  std::string::size_type v9 = *a2;
  char v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  float v10 = *a5;
  BOOL IsPackageRelativePath = pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(*(void *)(a1 + 8));
  if (!IsPackageRelativePath)
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsPackageRelativePath);
    sub_217320228(a3, 1, &v26);
    Identifier = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
    std::string v27 = v21;
    *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
    v21.__r_.__value_.__s.__data_[0] = 0;
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  memset(&v26, 0, sizeof(v26));
  memset(&__str, 0, sizeof(__str));
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(*(void *)(a1 + 8), (uint64_t)&v21);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  v20.__r_.__value_.__l.__size_ = (std::string::size_type)&__str;
  sub_21696AB3C(&v20, (long long *)&v21);
  if (v24 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__str, &v21);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v21.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_217320228(a3, 1, &v18);
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&v21.__r_.__value_.__l.__data_, (uint64_t)&v18, &v19);
  }
  else
  {
    sub_217320228(a3, 1, &v19);
  }
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v20, &v19, 0);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::string v21 = v20;
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (size && SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v26, (uint64_t)&v21, &v20);
  std::string v27 = v20;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
LABEL_12:
  }
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_13:
  std::string v15 = pxrInternal__aapl__pxrReserved__::ArGetResolver(Identifier);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)v15);
  std::string::size_type v16 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v16 = v26.__r_.__value_.__l.__size_;
  }
  if (v16)
  {
    v21.__r_.__value_.__r.__words[0] = v9;
    v21.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21716CAE8((pxrInternal__aapl__pxrReserved__ *)&v21, (uint64_t)&v26, a4, v10);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  else
  {
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/utils.mm";
    v21.__r_.__value_.__l.__size_ = (std::string::size_type)"operator()";
    v21.__r_.__value_.__r.__words[2] = 357;
    std::string __p = "auto pxrInternal__aapl__pxrReserved__::_ReadFromString(mx::DocumentPtr, const std::string &, const ArResolvedP"
          "ath &, const mx::FileSearchPath &, const mx::XmlReadOptions *)::(anonymous class)::operator()(mx::DocumentPtr,"
          " const mx::FilePath &, const mx::FileSearchPath &, const mx::XmlReadOptions *) const";
    char v23 = 0;
    uint64_t v17 = &v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open MaterialX document '%s'", (const char *)v17);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171717C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v40 - 113) < 0) {
    operator delete(*(void **)(v40 - 136));
  }
  if (v39) {
    sub_216784EC4(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171718B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77B9A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171718F0()
{
  return &unk_26C77B9A8;
}

void *sub_2171718FC(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_217171B5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

void *sub_217171B68(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168C5234(result, a4);
    __n128 result = (void *)sub_217171BF0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_217171BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_217171258(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_217171BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_216812BD8((char *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_217171CB8((uint64_t)v8);
  return v4;
}

void sub_217171CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217171CB8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217171CF0(a1);
  }
  return a1;
}

void sub_217171CF0(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    uint64_t v3 = v1;
    sub_216782F20(&v3);
  }
}

unsigned __int8 *sub_217171D3C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (void *)(a1 + 160);
  __n128 result = sub_2170396E4((void *)(a1 + 160), a2);
  if (result)
  {
    uint64_t v5 = sub_2170396E4(v3, a2);
    if (v5) {
      uint64_t v6 = (long long *)(v5 + 40);
    }
    else {
      uint64_t v6 = sub_21730D998();
    }
    return (unsigned __int8 *)sub_21730EDA0((uint64_t)v6);
  }
  return result;
}

void sub_217171D8C(void *a1)
{
}

float sub_217171D9C(__int16 *a1)
{
  int v1 = *a1;
  unsigned int v2 = v1 & 0x80000000;
  if ((v1 & 0x7C00) != 0) {
    unsigned int v3 = (v1 & 0x7FFF) + 114688;
  }
  else {
    unsigned int v3 = v1 & 0x7FFF;
  }
  if (v3 >> 10 > 0x8E) {
    v3 += 114688;
  }
  if (v3 < 0x400) {
    int v4 = -1;
  }
  else {
    int v4 = 1;
  }
  LODWORD(result) = COERCE_UNSIGNED_INT((float)(int)v3 * 0.000000059605) & v4 | (v3 << 13) & ~v4 | v2;
  return result;
}

_WORD *sub_217171E00(_WORD *a1, float a2)
{
  if (a2 == 0.0)
  {
    unsigned int v3 = HIWORD(LODWORD(a2));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a2) >> 23])
  {
    unsigned int v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a2) >> 23]
       + (((LODWORD(a2) & 0x7FFFFF) + ((LODWORD(a2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a2));
  }
  *a1 = v3;
  return a1;
}

void sub_217171E6C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    std::string v7 = sub_2169AAECC((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    int v4 = a1;
  }
  else {
    int v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_2169AAECC((uint64_t)a1, a2);
    std::string v7 = v6;
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *((unsigned char *)v6 + i) = *(unsigned char *)(v3 + i);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

uint64_t *sub_217171F04(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)sub_21677B220((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    std::string v7 = v5;
    sub_217171FA8((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    sub_21681534C((uint64_t)v9, 0);
  }
  return v6;
}

unsigned char *sub_217171FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  float result = v6 + 4;
  if (*(char *)(a2 + 23) < 0)
  {
    float result = sub_216778F24(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)float result = *(_OWORD *)a2;
    v6[6] = *(void *)(a2 + 16);
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217172020(_Unwind_Exception *a1)
{
  sub_21681534C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_217172038(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      sub_2171720B4(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_2171720A0(_Unwind_Exception *a1)
{
  sub_2171724C8(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2171720B4(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  std::string v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_216891D24(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168513F8(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_217172338(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_217172444((uint64_t)v25, 0);
  return i;
}

void sub_217172320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217172444((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_217172338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  float result = sub_2171723B0(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_217172398(_Unwind_Exception *a1)
{
  sub_217172444(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_2171723B0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::__fs::filesystem::path __dst = v4;
  }
  __dst[3] = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 4);
  __dst[4] = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    __dst[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  int v6 = *((_DWORD *)a2 + 10);
  *((unsigned char *)__dst + 44) = *((unsigned char *)a2 + 44);
  *((_DWORD *)__dst + 10) = v6;
  return __dst;
}

void sub_217172444(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717249C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_21717249C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_2171724C8(uint64_t a1)
{
  sub_217172504(a1, *(void **)(a1 + 16));
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_217172504(uint64_t a1, void *a2)
{
  if (a2)
  {
    unsigned int v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_21717249C((uint64_t)(v2 + 2));
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdMtlx_TestString(const std::string *a1@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  sub_2172E0788(&v17, a1);
  uint64_t v22 = v17;
  unint64_t v23 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_217322A84((uint64_t *)&v22, a1, (uint64_t *)&v19, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_217171258((void ***)&__p);
  if (v23) {
    sub_216784EC4(v23);
  }
  if (!v17)
  {
    *a3 = 0;
    goto LABEL_33;
  }
  sub_216779094(&__p, "tmp.usda");
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(&__p, (uint64_t *)&v19, 0, a3);
  int v6 = v20;
  if (v20
    && atomic_fetch_add_explicit((atomic_uint *volatile)&v20->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
  {
    ((void (*)(std::__shared_weak_count *))v6->~__shared_weak_count_0)(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2)
    {
LABEL_11:
      unint64_t v19 = v17;
      unint64_t v20 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2170519EC((uint64_t *)&v22, (uint64_t *)a3);
      sub_216779094(&__p, "/MaterialX");
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v15, &__p);
      pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs((uint64_t *)&v19, &v22, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = v23;
      if (v23
        && atomic_fetch_add_explicit((atomic_uint *volatile)&v23->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
      {
        ((void (*)(std::__shared_weak_count *))v7->~__shared_weak_count_0)(v7);
      }
      unint64_t v8 = v20;
      if (!v20) {
        goto LABEL_33;
      }
LABEL_32:
      sub_216784EC4(v8);
      goto LABEL_33;
    }
  }
  else if (a2)
  {
    goto LABEL_11;
  }
  uint64_t v22 = v17;
  unint64_t v23 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2170519EC(&v15, (uint64_t *)a3);
  sub_216779094(&__p, "/MaterialX");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v13, &__p);
  sub_216779094(&v19, "/ModelRoot");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v11, &v19);
  pxrInternal__aapl__pxrReserved__::UsdMtlxRead((uint64_t *)&v22, &v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = v16;
  if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t v8 = v23;
  if (v23) {
    goto LABEL_32;
  }
LABEL_33:
  if (v18) {
    sub_216784EC4(v18);
  }
}

#error "217172B24: call analysis failed (funcsize=105)"

void pxrInternal__aapl__pxrReserved__::UsdMtlx_TestFile(uint64_t a1@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(a1, &v21);
  if (!v21)
  {
    *a3 = 0;
    goto LABEL_29;
  }
  sub_216779094(&__p, "tmp.usda");
  unint64_t v10 = 0;
  int v11 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(&__p, (uint64_t *)&v10, 0, a3);
  uint64_t v5 = v11;
  if (v11
    && atomic_fetch_add_explicit((atomic_uint *volatile)&v11->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
  {
    ((void (*)(std::__shared_weak_count *))v5->~__shared_weak_count_0)(v5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2)
    {
LABEL_7:
      unint64_t v10 = v21;
      int v11 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2170519EC((uint64_t *)&v19, (uint64_t *)a3);
      sub_216779094(&__p, "/MaterialX");
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v17, &__p);
      pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs((uint64_t *)&v10, &v19, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
      sub_21697C414(&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v6 = v20;
      if (v20
        && atomic_fetch_add_explicit((atomic_uint *volatile)&v20->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
      {
        ((void (*)(std::__shared_weak_count *))v6->~__shared_weak_count_0)(v6);
      }
      uint64_t v7 = v11;
      if (!v11) {
        goto LABEL_29;
      }
LABEL_28:
      sub_216784EC4(v7);
      goto LABEL_29;
    }
  }
  else if (a2)
  {
    goto LABEL_7;
  }
  unint64_t v19 = v21;
  unint64_t v20 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2170519EC(&v17, (uint64_t *)a3);
  sub_216779094(&__p, "/MaterialX");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v15, &__p);
  sub_216779094(&v10, "/ModelRoot");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v13, &v10);
  pxrInternal__aapl__pxrReserved__::UsdMtlxRead((uint64_t *)&v19, &v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12 < 0) {
    operator delete(v10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = v18;
  if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v7 = v20;
  if (v20) {
    goto LABEL_28;
  }
LABEL_29:
  if (v22) {
    sub_216784EC4(v22);
  }
}

#error "2171730C0: call analysis failed (funcsize=106)"

void pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::~UsdMtlxFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *this)
{
  long long v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::UsdMtlxFileFormatTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "mtlx", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "usd", 0);
  uint64_t v3 = *this;
  int v15 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      int v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  int v16 = v5;
  if ((v5 & 7) != 0)
  {
    int v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      int v16 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    int v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    int v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *)this;
}

void sub_217173320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_2171733BC()
{
  uint64_t v0 = sub_217173F34();

  return sub_217174060(v0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::UsdMtlxFileFormat(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat *this)
{
  uint64_t v2 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v2) {
    uint64_t v2 = (uint64_t *)sub_2171741C4(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  }
  uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v3) {
    uint64_t v3 = sub_2171741C4(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  }
  long long v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v4) {
    long long v4 = sub_2171741C4(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v5) {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171741C4(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  }
  if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (uint64_t)EmptyString);
  *(void *)this = &unk_26C77B9E0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::~UsdMtlxFileFormat(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::CanRead(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfGetExtension(a2, &__p);
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(FormatId, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_217173568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::Read(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(0, &v12);
  sub_2170519EC(&v10, (uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(a3, &v24);
  BOOL v5 = v24 != 0;
  if (v24)
  {
    uint64_t v22 = v24;
    unint64_t v23 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216779094(&v13, "/MaterialX");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v20, &v13);
    sub_216779094(__p, "/ModelRoot");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v18, __p);
    pxrInternal__aapl__pxrReserved__::UsdMtlxRead((uint64_t *)&v22, &v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
    if (v15 < 0) {
      operator delete(v13);
    }
    if (v23) {
      sub_216784EC4(v23);
    }
  }
  if (v25) {
    sub_216784EC4(v25);
  }
  uint64_t v6 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v5)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v12);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v7, (uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, (uint64_t *)&v13);
    uint64_t v8 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
  }
  sub_216E10FB8(&v12);
  return v5;
}

void sub_217173760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
  sub_216E10FB8(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::WriteToFile()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::ReadFromString(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, const std::string *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(0, &v12);
  sub_2170519EC(&v10, (uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocumentFromString(a3, &v22);
  BOOL v5 = v22 != 0;
  if (v22)
  {
    sub_216779094(&v13, "/MaterialX");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v20, &v13);
    sub_216779094(__p, "/ModelRoot");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v18, __p);
    pxrInternal__aapl__pxrReserved__::UsdMtlxRead(&v22, &v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
    if (v15 < 0) {
      operator delete(v13);
    }
  }
  if (v23) {
    sub_216784EC4(v23);
  }
  uint64_t v6 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v5)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v12);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v7, (uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, (uint64_t *)&v13);
    uint64_t v8 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
  }
  sub_216E10FB8(&v12);
  return v5;
}

void sub_217173B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
  sub_216E10FB8(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::WriteToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7) {
    uint64_t v7 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v12);
  uint64_t v8 = sub_216979288(&v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 88))(v8, a2, a3, a4);
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

void sub_217173E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::WriteToStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7) {
    uint64_t v7 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v12);
  uint64_t v8 = sub_216979288(&v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 80))(v8, a2, a3, a4);
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

void sub_217173F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_217173F34()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B76D4C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_217174014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_217174060(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C77BA98;
  BOOL v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  BOOL v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2171740EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_217174110(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_217174138@<X0>(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat **a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::UsdMtlxFileFormat(v2);
  *a1 = v2;
  char v4 = 0;
  return sub_217174194(&v4);
}

void sub_217174180(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_217174194(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

atomic_uint **sub_2171741C4(atomic_ullong *a1)
{
  uint64_t result = sub_21717420C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::~UsdMtlxFileFormatTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_21717420C()
{
  uint64_t v0 = (atomic_uint **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::UsdMtlxFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_21717423C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  v468[7] = *MEMORY[0x263EF8340];
  if (!*a1)
  {
    v392 = "usdMtlx/reader.cpp";
    v393 = "UsdMtlxRead";
    uint64_t v394 = 2616;
    v395 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v396[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v392, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid MaterialX document");
    return;
  }
  char v4 = sub_216D24140(a2);
  if (!(v5 & 1 | (unint64_t)v4))
  {
    v392 = "usdMtlx/reader.cpp";
    v393 = "UsdMtlxRead";
    uint64_t v394 = 2620;
    v395 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v396[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v392, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
  {
    v392 = "usdMtlx/reader.cpp";
    v393 = "UsdMtlxRead";
    uint64_t v394 = 2624;
    v395 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v396[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v392, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid internal prim path");
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a4))
  {
    v392 = "usdMtlx/reader.cpp";
    v393 = "UsdMtlxRead";
    uint64_t v394 = 2628;
    v395 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v396[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v392, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid external prim path");
    return;
  }
  sub_2171799E8((uint64_t)&v392, a2, a3);
  sub_217179EF4();
  sub_217179F70((long long **)v454, (uint64_t)a1, (unsigned __int8 *)&qword_267B96230);
  if (*((char *)v454[0] + 23) < 0)
  {
    if (!*((void *)v454[0] + 1)) {
      goto LABEL_15;
    }
  }
  else if (!*((unsigned char *)v454[0] + 23))
  {
    goto LABEL_15;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a2);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v445);
  pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)v445);
  if (((uint64_t)v445[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v445[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_15:
  sub_217179EF4();
  sub_217179F70((long long **)v445, (uint64_t)a1, (unsigned __int8 *)&qword_267B96248);
  if ((*((char *)v445[0] + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v445[0] + 23)) {
      goto LABEL_23;
    }
LABEL_19:
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a2);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v454);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(v7, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v454);
    if (SHIBYTE(v456) < 0) {
      operator delete(*((void **)&v455 + 1));
    }
    if (SBYTE7(v455) < 0) {
      operator delete(v454[0]);
    }
    goto LABEL_23;
  }
  if (*((void *)v445[0] + 1)) {
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v8 = sub_21716A328(*a1);
  uint64_t v9 = *((unsigned __int8 *)v8 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)v8 + 1);
  }
  if (v9)
  {
    v445[0] = 0;
    v454[1] = &off_26C750BB8;
    sub_21691B31C((unsigned int **)v454, (uint64_t)v8);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v10) {
      uint64_t v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*((void *)v10 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v10 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
    }
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)v445, (long long *)EmptyString);
    sub_2168ED33C(v12, v454);
    sub_2168EE084((uint64_t)v454);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a2);
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v14) {
      uint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216DF8338(v13, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 80), (const void ****)v445);
    sub_2168EBBB8((void ***)v445, 0);
  }
  char v15 = (std::__shared_weak_count *)a1[1];
  v391[0] = *a1;
  v391[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217179FD4(v391, (uint64_t)&v392);
  if (v15) {
    sub_216784EC4(v15);
  }
  uint64_t v16 = *a1;
  char v17 = (std::__shared_weak_count *)a1[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v359 = v16;
  v360 = v17;
  sub_217184DCC(v16, (uint64_t *)&v417);
  int v18 = v417;
  for (uint64_t i = v418; v18 != i; v18 += 2)
  {
    if (sub_21717B790(0))
    {
      uint64_t v22 = (void *)(*v18 + 48);
      if (*(char *)(*v18 + 71) < 0) {
        uint64_t v22 = (void *)*v22;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding mtlxMaterial '%s'\n", v20, v21, v22);
    }
    uint64_t v23 = *v18;
    char v24 = (std::__shared_weak_count *)v18[1];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v414
      || (*((unsigned char *)v414 + 57) & 8) != 0
      || !(*(unsigned int (**)(uint64_t *))(v413 + 32))(&v413)
      || (v454[0] = "usdMtlx/reader.cpp",
          v454[1] = "BeginMaterial",
          *(void *)&long long v455 = 1484,
          *((void *)&v455 + 1) = "UsdShadeMaterial pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::B"
                                   "eginMaterial(const mx::ConstNodePtr &)",
          LOBYTE(v456) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v454, "!_usdMaterial", 0) & 1) != 0))
    {
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        sub_21717C1A8(v23 + 48, (uint64_t)v454);
      }
      else {
        v454[0] = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v396, (const pxrInternal__aapl__pxrReserved__::TfToken *)v454, &v435);
      if (((uint64_t)v454[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v454[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v24) {
        sub_216784EC4(v24);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define((uint64_t *)&v392, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v445);
      if (v445[1]
        && (*((unsigned char *)v445[1] + 57) & 8) == 0
        && (*((unsigned int (**)(void **))v445[0] + 4))(v445))
      {
        sub_216D16CFC((uint64_t)v454, (uint64_t *)&v445[1], v446);
        *(void *)&long long v466 = v23;
        *((void *)&v466 + 1) = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_21717E558((uint64_t)v454, (uint64_t)&v466);
        if (v24) {
          sub_216784EC4(v24);
        }
        if ((BYTE8(v455) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v455 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v455 + 1);
        sub_21697C414(&v455);
        if (v454[1]) {
          sub_216D16E0C((atomic_ullong *)v454[1]);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v454, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v445);
        *((void *)&v455 + 1) = 0;
        v454[0] = off_26C76D8C8;
        *(void *)&long long v466 = v23 + 48;
        uint64_t v25 = sub_2171850EC(&v408, (const void **)(v23 + 48), (uint64_t)&unk_2174BFD90, (long long **)&v466);
        sub_216779094(&v466, "");
        v440[0] = &v466;
        std::string v26 = sub_217185288((uint64_t **)v25 + 7, (const void **)&v466, (uint64_t)&unk_2174BFD90, (long long **)v440);
        uint64_t v27 = v26;
        unint64_t v28 = v454[1];
        if (v454[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v454[1] + 6, 1uLL, memory_order_relaxed);
        }
        unint64_t v29 = (atomic_ullong *)v26[8];
        v27[8] = (uint64_t)v28;
        if (v29) {
          sub_216D16E0C(v29);
        }
        sub_2169C487C((int *)v27 + 18, &v455);
        sub_2169C48D4((int *)v27 + 19, (_DWORD *)&v455 + 1);
        sub_2168D2318(v27 + 10, (void *)&v455 + 1);
        if (SBYTE7(v467) < 0) {
          operator delete((void *)v466);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v454);
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = v412;
        uint64_t v411 = v23;
        v412 = v24;
        if (v30) {
          sub_216784EC4(v30);
        }
        long long v31 = (atomic_ullong *)v445[1];
        if (v445[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v445[1] + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = v414;
        v414 = v31;
        if (v32) {
          sub_216D16E0C(v32);
        }
        sub_2169C487C(&v415, v446);
        sub_2169C48D4(&v416, (_DWORD *)v446 + 1);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v445);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v435.__r_.__value_.__r.__words + 1);
      sub_21697C414(&v435);
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v437, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v413);
    *(void *)v437 = &unk_26C76DAD0;
    if (v24) {
      sub_216784EC4(v24);
    }
    if (*(void *)&v437[8]
      && (*(unsigned char *)(*(void *)&v437[8] + 57) & 8) == 0
      && (*(unsigned int (**)(unsigned char *))(*(void *)v437 + 32))(v437))
    {
      sub_216779094(v454, off_26798DD90[0]);
      sub_217185518((uint64_t *)&v392, v18, (unsigned __int8 *)v454);
      if (SBYTE7(v455) < 0) {
        operator delete(v454[0]);
      }
      sub_216779094(v454, off_26798DDA0[0]);
      sub_217185518((uint64_t *)&v392, v18, (unsigned __int8 *)v454);
      if (SBYTE7(v455) < 0) {
        operator delete(v454[0]);
      }
      sub_216779094(v454, off_26798DD98[0]);
      sub_217185518((uint64_t *)&v392, v18, (unsigned __int8 *)v454);
      if (SBYTE7(v455) < 0) {
        operator delete(v454[0]);
      }
      sub_216779094(v454, off_26798DDA8[0]);
      sub_217185518((uint64_t *)&v392, v18, (unsigned __int8 *)v454);
      if (SBYTE7(v455) < 0) {
        operator delete(v454[0]);
      }
      if (v414
        && (*((unsigned char *)v414 + 57) & 8) == 0
        && ((*(uint64_t (**)(uint64_t *))(v413 + 32))(&v413) & 1) != 0
        || (v454[0] = "usdMtlx/reader.cpp",
            v454[1] = "EndMaterial",
            *(void *)&long long v455 = 1505,
            *((void *)&v455 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::EndMaterial()",
            LOBYTE(v456) = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v454, "_usdMaterial", 0) & 1) != 0))
      {
        v454[0] = (void *)(v411 + 48);
        unint64_t v34 = sub_21715FE9C(&v402, (const void **)(v411 + 48), (uint64_t)&unk_2174BFD90, (long long **)v454);
        uint64_t v35 = v34;
        unint64_t v36 = v414;
        if (v414) {
          atomic_fetch_add_explicit(v414 + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v37 = (atomic_ullong *)v34[8];
        v35[8] = (uint64_t)v36;
        if (v37) {
          sub_216D16E0C(v37);
        }
        sub_2169C487C((int *)v35 + 18, &v415);
        sub_2169C48D4((int *)v35 + 19, &v416);
        unint64_t v38 = v412;
        uint64_t v411 = 0;
        v412 = 0;
        if (v38) {
          sub_216784EC4(v38);
        }
        LODWORD(v454[0]) = 1;
        v454[1] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v455);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v455 + 1);
        *((void *)&v455 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v445, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v454);
        v445[0] = &unk_26C76DAD0;
        unint64_t v39 = (atomic_ullong *)v445[1];
        if (v445[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v445[1] + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v40 = v414;
        v414 = v39;
        if (v40) {
          sub_216D16E0C(v40);
        }
        sub_2169C487C(&v415, v446);
        sub_2169C48D4(&v416, (_DWORD *)v446 + 1);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v445);
        if ((BYTE8(v455) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v455 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v455 + 1);
        sub_21697C414(&v455);
        if (v454[1]) {
          sub_216D16E0C((atomic_ullong *)v454[1]);
        }
      }
    }
    else
    {
      v454[0] = "usdMtlx/reader.cpp";
      v454[1] = "ReadMaterials";
      *(void *)&long long v455 = 2386;
      *((void *)&v455 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ReadMaterials(mx::ConstDocu"
                               "mentPtr, _Context &)";
      LOBYTE(v456) = 0;
      uint64_t v41 = (void *)(*v18 + 48);
      if (*(char *)(*v18 + 71) < 0) {
        uint64_t v41 = (void *)*v41;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v454, (pxrInternal__aapl__pxrReserved__ *)"Failed to create material '%s'", v33, v41);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v437);
  }
  v454[0] = &v417;
  sub_216787968((void ***)v454);
  sub_217184DCC(v359, (uint64_t *)&v466);
  uint64_t v43 = *((void *)&v466 + 1);
  for (uint64_t j = v466; j != v43; j += 16)
  {
    sub_217184E48((uint64_t)&v392, (const void **)(*(void *)j + 48), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v417);
    if (v418 && (*((unsigned char *)v418 + 57) & 8) == 0 && ((unsigned int (*)(uint64_t **))v417[4])(&v417))
    {
      sub_217179EF4();
      sub_217179F70((long long **)v440, j, (unsigned __int8 *)&qword_267B96368);
      if (*((char *)v440[0] + 23) < 0)
      {
        if (*((void *)v440[0] + 1))
        {
LABEL_133:
          sub_217184E48((uint64_t)&v392, (const void **)v440[0], (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v437);
          if (*(void *)&v437[8]
            && (*(unsigned char *)(*(void *)&v437[8] + 57) & 8) == 0
            && (*(unsigned int (**)(unsigned char *))(*(void *)v437 + 32))(v437))
          {
            sub_216D16CFC((uint64_t)v445, (uint64_t *)&v418, &v419);
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes((pxrInternal__aapl__pxrReserved__::UsdPrim *)v445, (uint64_t)v454);
            sub_216D1E2AC((uint64_t)v437, &v435);
            pxrInternal__aapl__pxrReserved__::UsdSpecializes::AddSpecialize(v454, &v435, 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v435.__r_.__value_.__r.__words + 1);
            sub_21697C414(&v435);
            if ((BYTE8(v455) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v455 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v455 + 1);
            sub_21697C414(&v455);
            if (v454[1]) {
              sub_216D16E0C((atomic_ullong *)v454[1]);
            }
            if ((BYTE8(v446[0]) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
            sub_21697C414(v446);
            if (v445[1]) {
              sub_216D16E0C((atomic_ullong *)v445[1]);
            }
            if (sub_21717B790(0))
            {
              unint64_t v47 = (void *)(*(void *)j + 48);
              if (*(char *)(*(void *)j + 71) < 0) {
                unint64_t v47 = (void *)*v47;
              }
              unint64_t v48 = v440[0];
              if (*((char *)v440[0] + 23) < 0) {
                unint64_t v48 = *(void **)v440[0];
              }
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Material '%s' inherit from  '%s'\n", v45, v46, v47, v48);
            }
          }
          else
          {
            v454[0] = "usdMtlx/reader.cpp";
            v454[1] = "ReadMaterials";
            *(void *)&long long v455 = 2406;
            *((void *)&v455 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ReadMaterials(mx::Con"
                                     "stDocumentPtr, _Context &)";
            LOBYTE(v456) = 0;
            uint64_t v49 = (void *)(*(void *)j + 48);
            if (*(char *)(*(void *)j + 71) < 0) {
              uint64_t v49 = (void *)*v49;
            }
            uint64_t v50 = v440[0];
            if (*((char *)v440[0] + 23) < 0) {
              uint64_t v50 = *(void **)v440[0];
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v454, (pxrInternal__aapl__pxrReserved__ *)"Material '%s' attempted to inherit from unknown material '%s'", v44, v49, v50);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v437);
        }
      }
      else if (*((unsigned char *)v440[0] + 23))
      {
        goto LABEL_133;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v417);
  }
  v454[0] = &v466;
  sub_216787968((void ***)v454);
  if (v360) {
    sub_216784EC4(v360);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomGetFallbackUpAxis((atomic_uint **)v454);
  pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis(a2, v454);
  if (((uint64_t)v454[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v454[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSetStageMetersPerUnit(a2, 0.01);
  uint64_t v51 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a2);
  long long v52 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v52, a3, (uint64_t)v454);
  pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(v51, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v454);
  if ((BYTE8(v455) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v455 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v455 + 1);
  sub_21697C414(&v455);
  if (v454[1]) {
    sub_216D16E0C((atomic_ullong *)v454[1]);
  }
  uint64_t v53 = *a1;
  unint64_t v54 = sub_21730D998();
  sub_217189658(v53, (uint64_t)v54, (uint64_t *)v454);
  uint64_t v55 = v454[0];
  float32x4_t v56 = v454[1];
  v445[0] = v454;
  sub_216787968((void ***)v445);
  if (v55 == v56) {
    goto LABEL_838;
  }
  uint64_t v58 = *a1;
  int v57 = (std::__shared_weak_count *)a1[1];
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v362 = v57;
  sub_217179EF4();
  v445[1] = 0;
  v445[0] = 0;
  *(void *)&v446[0] = 0;
  long long v59 = *(long long **)(v58 + 136);
  long long v60 = *(long long **)(v58 + 144);
  if (v59 == v60) {
    goto LABEL_247;
  }
  do
  {
    uint64_t v61 = *(unsigned __int8 *)(*(void *)v59 + 47);
    if ((v61 & 0x80u) == 0) {
      uint64_t v62 = *(unsigned __int8 *)(*(void *)v59 + 47);
    }
    else {
      uint64_t v62 = *(void *)(*(void *)v59 + 32);
    }
    uint64_t v63 = byte_267B965BF;
    if (byte_267B965BF < 0) {
      uint64_t v63 = qword_267B965B0;
    }
    if (v62 == v63)
    {
      unint64_t v64 = (const void **)(*(void *)v59 + 24);
      if (byte_267B965BF >= 0) {
        uint64_t v65 = &qword_267B965A8;
      }
      else {
        uint64_t v65 = (uint64_t *)qword_267B965A8;
      }
      if ((v61 & 0x80) != 0)
      {
        if (memcmp(*v64, v65, *(void *)(*(void *)v59 + 32))) {
          goto LABEL_185;
        }
LABEL_184:
        sub_217189A1C((uint64_t *)v445, v59);
        goto LABEL_185;
      }
      if (!*(unsigned char *)(*(void *)v59 + 47)) {
        goto LABEL_184;
      }
      while (*(unsigned __int8 *)v64 == *(unsigned __int8 *)v65)
      {
        unint64_t v64 = (const void **)((char *)v64 + 1);
        uint64_t v65 = (uint64_t *)((char *)v65 + 1);
        if (!--v61) {
          goto LABEL_184;
        }
      }
    }
LABEL_185:
    ++v59;
  }
  while (v59 != v60);
  uint64_t v66 = v445[0];
  v368 = v445[1];
  if (v445[0] == v445[1]) {
    goto LABEL_247;
  }
  while (2)
  {
    *((void *)&v466 + 1) = 0;
    *(void *)&long long v467 = 0;
    *(void *)&long long v466 = (char *)&v466 + 8;
    sub_217179EF4();
    v418 = 0;
    v417 = 0;
    uint64_t v419 = 0;
    v371 = v66;
    long long v67 = *(long long **)(*v66 + 136);
    long long v68 = *(long long **)(*v66 + 144);
    if (v67 == v68) {
      goto LABEL_235;
    }
    while (2)
    {
      uint64_t v69 = *(unsigned __int8 *)(*(void *)v67 + 47);
      if ((v69 & 0x80u) == 0) {
        uint64_t v70 = *(unsigned __int8 *)(*(void *)v67 + 47);
      }
      else {
        uint64_t v70 = *(void *)(*(void *)v67 + 32);
      }
      uint64_t v71 = byte_267B9658F;
      if (byte_267B9658F < 0) {
        uint64_t v71 = qword_267B96580;
      }
      if (v70 == v71)
      {
        long long v72 = (const void **)(*(void *)v67 + 24);
        if (byte_267B9658F >= 0) {
          long long v73 = &qword_267B96578;
        }
        else {
          long long v73 = (uint64_t *)qword_267B96578;
        }
        if ((v69 & 0x80) != 0)
        {
          if (memcmp(*v72, v73, *(void *)(*(void *)v67 + 32))) {
            goto LABEL_204;
          }
        }
        else if (*(unsigned char *)(*(void *)v67 + 47))
        {
          while (*(unsigned __int8 *)v72 == *(unsigned __int8 *)v73)
          {
            long long v72 = (const void **)((char *)v72 + 1);
            long long v73 = (uint64_t *)((char *)v73 + 1);
            if (!--v69) {
              goto LABEL_203;
            }
          }
          goto LABEL_204;
        }
LABEL_203:
        sub_217189A1C((uint64_t *)&v417, v67);
      }
LABEL_204:
      if (++v67 != v68) {
        continue;
      }
      break;
    }
    long long v74 = v417;
    long long v75 = v418;
    v372 = v418;
    while (v74 != v75)
    {
      *(_OWORD *)&v437[8] = 0uLL;
      *(void *)v437 = &v437[8];
      v440[1] = 0;
      v440[0] = 0;
      v441 = 0;
      uint64_t v76 = *(uint64_t **)(*v74 + 136);
      uint64_t v77 = *(uint64_t **)(*v74 + 144);
      if (v76 != v77)
      {
        do
        {
          sub_2172F2E08(*v76, &v435);
          if (v435.__r_.__value_.__r.__words[0])
          {
            unint64_t v78 = v440[1];
            if (v440[1] >= v441)
            {
              int64_t v80 = ((char *)v440[1] - (char *)v440[0]) >> 4;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v82 = v441 - (char *)v440[0];
              if ((v441 - (char *)v440[0]) >> 3 > v81) {
                unint64_t v81 = v82 >> 3;
              }
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v81;
              }
              *(void *)&long long v456 = &v441;
              unint64_t v84 = (char *)sub_216787EE0((uint64_t)&v441, v83);
              unint64_t v85 = &v84[16 * v80];
              v454[0] = v84;
              v454[1] = v85;
              *((void *)&v455 + 1) = &v84[16 * v86];
              *(_OWORD *)unint64_t v85 = *(_OWORD *)&v435.__r_.__value_.__l.__data_;
              *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
              *(void *)&long long v455 = v85 + 16;
              sub_217189C80((uint64_t *)v440, v454);
              unint64_t v79 = v440[1];
              sub_216788028(v454);
            }
            else
            {
              *(void *)v440[1] = v435.__r_.__value_.__r.__words[0];
              v78[1] = v435.__r_.__value_.__l.__size_;
              *(_OWORD *)&v435.__r_.__value_.__l.__data_ = 0uLL;
              unint64_t v79 = v78 + 2;
            }
            v440[1] = v79;
          }
          if (v435.__r_.__value_.__l.__size_) {
            sub_216784EC4((std::__shared_weak_count *)v435.__r_.__value_.__l.__size_);
          }
          v76 += 2;
        }
        while (v76 != v77);
        uint64_t v87 = (uint64_t *)v440[0];
        unint64_t v88 = (uint64_t *)v440[1];
        while (v87 != v88)
        {
          v435.__r_.__value_.__r.__words[0] = *v87 + 48;
          unint64_t v89 = sub_217189DC4((uint64_t **)v437, (const void **)v435.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v435);
          uint64_t v91 = *v87;
          uint64_t v90 = v87[1];
          if (v90) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v92 = (std::__shared_weak_count *)v89[8];
          v89[7] = v91;
          v89[8] = v90;
          if (v92) {
            sub_216784EC4(v92);
          }
          v87 += 2;
        }
      }
      v454[0] = v440;
      sub_216787968((void ***)v454);
      if (*(void *)&v437[16])
      {
        v454[0] = (void *)(*v74 + 48);
        unint64_t v93 = sub_217189F04((uint64_t **)&v466, (const void **)v454[0], (uint64_t)&unk_2174BFD90, (long long **)v454);
        unint64_t v94 = v93 + 8;
        std::string::size_type v95 = v93 + 7;
        sub_216812ED4((uint64_t)(v93 + 7), (void *)v93[8]);
        uint64_t v96 = *(void **)&v437[8];
        *(v94 - 1) = *(void *)v437;
        void *v94 = v96;
        uint64_t v97 = *(void *)&v437[16];
        v94[1] = *(void *)&v437[16];
        if (v97)
        {
          v96[2] = v94;
          *(void *)v437 = &v437[8];
          *(_OWORD *)&v437[8] = 0uLL;
          uint64_t v96 = 0;
        }
        else
        {
          *std::string::size_type v95 = v94;
        }
      }
      else
      {
        uint64_t v96 = *(void **)&v437[8];
      }
      sub_216812ED4((uint64_t)v437, v96);
      v74 += 2;
      long long v75 = v372;
    }
LABEL_235:
    v454[0] = &v417;
    sub_216787968((void ***)v454);
    unint64_t v98 = v371;
    if ((void)v467)
    {
      uint64_t v99 = *v371;
      uint64_t v100 = (void *)(*v371 + 48);
      v454[0] = v100;
      uint64_t v101 = sub_21718A0A0(&v397, (const void **)v100, (uint64_t)&unk_2174BFD90, (long long **)v454);
      int v102 = v101 + 8;
      unint64_t v103 = v101 + 7;
      sub_21717AE64((uint64_t)(v101 + 7), (void *)v101[8]);
      uint64_t v104 = *((void *)&v466 + 1);
      *(v102 - 1) = v466;
      void *v102 = v104;
      uint64_t v105 = v467;
      v102[1] = v467;
      if (v105)
      {
        *(void *)(v104 + 16) = v102;
        *(void *)&long long v466 = (char *)&v466 + 8;
        *((void *)&v466 + 1) = 0;
        *(void *)&long long v467 = 0;
      }
      else
      {
        void *v103 = v102;
      }
      uint64_t v106 = __dst;
      unint64_t v98 = v371;
      if ((unint64_t)__dst >= v401)
      {
        unint64_t v108 = (void *)sub_2167E9A44((uint64_t *)&__str, (long long *)v100);
      }
      else
      {
        if (*(char *)(v99 + 71) < 0)
        {
          sub_216778F24(__dst, *(void **)(v99 + 48), *(void *)(v99 + 56));
        }
        else
        {
          long long v107 = *(_OWORD *)v100;
          *((void *)__dst + 2) = v100[2];
          _OWORD *v106 = v107;
        }
        unint64_t v108 = (char *)v106 + 24;
      }
      std::__fs::filesystem::path __dst = v108;
    }
    sub_21717AE64((uint64_t)&v466, *((void **)&v466 + 1));
    uint64_t v66 = v98 + 2;
    if (v66 != v368) {
      continue;
    }
    break;
  }
LABEL_247:
  v454[0] = v445;
  sub_216787968((void ***)v454);
  if (v362) {
    sub_216784EC4(v362);
  }
  uint64_t v109 = *a1;
  uint64_t v110 = (std::__shared_weak_count *)a1[1];
  if (v110) {
    atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v111 = sub_21730D998();
  sub_21718A23C(v109, (uint64_t)v111, (uint64_t *)v445);
  v347 = v445[0];
  v348 = v445[1];
  if (v445[0] != v445[1])
  {
    uint64_t v112 = v445[0];
    do
    {
      *(void *)&long long v466 = *v112;
      uint64_t v113 = v112[1];
      *((void *)&v466 + 1) = v113;
      if (v113) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
      }
      v454[1] = 0;
      *(void *)&long long v455 = 0;
      v454[0] = &v454[1];
      sub_21718A600((uint64_t)&v392, (unint64_t *)&v466, (uint64_t **)v454, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v437);
      sub_216BD5270((uint64_t)v454, (void *)v454[1]);
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v437);
      if (*((void *)&v466 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v466 + 1));
      }
      v112 += 2;
    }
    while (v112 != v348);
  }
  v454[0] = v445;
  sub_216787968((void ***)v454);
  unint64_t v114 = sub_21730D998();
  sub_217189658(v109, (uint64_t)v114, (uint64_t *)&v433);
  uint64_t v115 = v433;
  v349 = v434;
  if (v433 != v434)
  {
    uint64_t v116 = &v403;
    v373 = off_26C767A28;
    do
    {
      v357 = v115;
      uint64_t v117 = *v115;
      unint64_t v118 = sub_21730D998();
      sub_21718C68C(v117, (uint64_t)v118, (uint64_t *)&v430);
      unint64_t v119 = (uint64_t *)v430;
      uint64_t v120 = v431;
      v367 = v431;
      while (v119 != (uint64_t *)v120)
      {
        uint64_t v121 = (std::__shared_weak_count *)v119[1];
        v428 = (std::__shared_weak_count *)*v119;
        v429 = v121;
        if (v121) {
          atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        LODWORD(v454[0]) = 1;
        v454[1] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v455);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v455 + 1);
        *((void *)&v455 + 1) = 0;
        v445[0] = 0;
        sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v466, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v454, (uint64_t *)v445);
        *(void *)&long long v466 = &unk_26C767A08;
        if (((uint64_t)v445[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v445[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v455) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v455 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v455 + 1);
        sub_21697C414(&v455);
        if (v454[1]) {
          sub_216D16E0C((atomic_ullong *)v454[1]);
        }
        sub_217179EF4();
        sub_217179F70((long long **)&v382, (uint64_t)&v428, (unsigned __int8 *)&qword_267B96260);
        if (*((char *)v382 + 23) < 0)
        {
          if (v382[1])
          {
LABEL_272:
            long long v122 = (uint64_t *)sub_21678C2D8((uint64_t)v116, v382);
            unint64_t v123 = v122;
            if (&v404 == v122)
            {
              v454[0] = "usdMtlx/reader.cpp";
              v454[1] = "AddGeometryReference";
              *(void *)&long long v455 = 1742;
              *((void *)&v455 + 1) = "UsdCollectionAPI pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Contex"
                                       "t::AddGeometryReference(const mx::ConstGeomElementPtr &)";
              LOBYTE(v456) = 0;
              uint64_t v137 = v382;
              if (*((char *)v382 + 23) < 0) {
                uint64_t v137 = (const void **)*v382;
              }
              v418 = 0;
              v417 = 0;
              sub_2172F3EC4((uint64_t)v428, (uint64_t)&v417, (uint64_t)v445);
              unint64_t v139 = v445;
              if (SBYTE7(v446[0]) < 0) {
                unint64_t v139 = (void **)v445[0];
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v454, (pxrInternal__aapl__pxrReserved__ *)"Unknown collection '%s' in %s", v138, v137, v139);
              if (SBYTE7(v446[0]) < 0) {
                operator delete(v445[0]);
              }
              if (v418) {
                sub_216784EC4((std::__shared_weak_count *)v418);
              }
            }
            else
            {
              uint64_t v124 = v122[8];
              if (v124) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 48), 1uLL, memory_order_relaxed);
              }
              long long v125 = (atomic_ullong *)*((void *)&v466 + 1);
              *((void *)&v466 + 1) = v124;
              if (v125) {
                sub_216D16E0C(v125);
              }
              sub_2169C487C((int *)&v467, (_DWORD *)v123 + 18);
              sub_2169C48D4((int *)&v467 + 1, (_DWORD *)v123 + 19);
              sub_2168D2318((void *)&v467 + 1, v123 + 10);
            }
            goto LABEL_363;
          }
        }
        else if (*((unsigned char *)v382 + 23))
        {
          goto LABEL_272;
        }
        sub_217179EF4();
        sub_217179F70((long long **)&v426, (uint64_t)&v428, (unsigned __int8 *)&qword_267B96308);
        if (SHIBYTE(v426->__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v426->__r_.__value_.__l.__size_)
          {
LABEL_341:
            LODWORD(v454[0]) = 1;
            v454[1] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v455);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v455 + 1);
            *((void *)&v455 + 1) = 0;
            v445[0] = 0;
            sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v417, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v454, (uint64_t *)v445);
            v417 = (uint64_t *)&unk_26C767A08;
            if (((uint64_t)v445[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v445[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((BYTE8(v455) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v455 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v455 + 1);
            sub_21697C414(&v455);
            if (v454[1]) {
              sub_216D16E0C((atomic_ullong *)v454[1]);
            }
            goto LABEL_354;
          }
        }
        else if (!*((unsigned char *)&v426->__r_.__value_.__s + 23))
        {
          goto LABEL_341;
        }
        pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(v426, (uint64_t *)&v435);
        unint64_t v126 = 126
             - 2
             * __clz(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v435.__r_.__value_.__l.__size_ - v435.__r_.__value_.__r.__words[0]) >> 3));
        if (v435.__r_.__value_.__l.__size_ == v435.__r_.__value_.__r.__words[0]) {
          uint64_t v127 = 0;
        }
        else {
          uint64_t v127 = v126;
        }
        sub_216878D58((uint64_t)v435.__r_.__value_.__l.__data_, (long long *)v435.__r_.__value_.__l.__size_, (uint64_t)v445, v127, 1);
        unint64_t v128 = sub_216ABCE20((unsigned __int8 *)v435.__r_.__value_.__l.__data_, (unsigned __int8 *)v435.__r_.__value_.__l.__size_, (uint64_t)v445);
        sub_216AB1AAC((uint64_t)&v435, (uint64_t)v128, (long long *)v435.__r_.__value_.__l.__size_);
        pxrInternal__aapl__pxrReserved__::TfStringJoin(",", (std::string **)&v435, &v384);
        LODWORD(v445[0]) = 1;
        v445[1] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v446);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v446 + 1);
        *((void *)&v446[0] + 1) = 0;
        v374[0] = 0;
        sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v454, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v445, (uint64_t *)v374);
        v454[0] = &unk_26C767A08;
        unint64_t v129 = sub_21718B514(&v405, (const void **)&v384.__r_.__value_.__l.__data_, (long long *)&v384, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v454);
        char v131 = v130;
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v454);
        if (((uint64_t)v374[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v374[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v446[0]) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
        sub_21697C414(v446);
        if (v445[1]) {
          sub_216D16E0C((atomic_ullong *)v445[1]);
        }
        if (v131)
        {
          uint64_t v132 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)&v392);
          v445[0] = 0;
          pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v132, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v394, v445, (uint64_t)v454);
          if (((uint64_t)v445[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v445[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          for (int k = __val; ; int k = ++__val)
          {
            std::to_string(&v439, k);
            unint64_t v134 = std::string::insert(&v439, 0, "geom_");
            long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
            std::string::size_type v375 = v134->__r_.__value_.__r.__words[2];
            *(_OWORD *)v374 = v135;
            v134->__r_.__value_.__l.__size_ = 0;
            v134->__r_.__value_.__r.__words[2] = 0;
            v134->__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v388);
            sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v445, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v454, (uint64_t *)&v388);
            v445[0] = &unk_26C767A08;
            if (!v445[1] || (*((unsigned char *)v445[1] + 57) & 8) != 0) {
              int v136 = 0;
            }
            else {
              int v136 = v373((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v445);
            }
            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v445);
            if ((v388 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v388 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (SHIBYTE(v375) < 0) {
              operator delete(v374[0]);
            }
            if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v439.__r_.__value_.__l.__data_);
            }
            if (!v136) {
              break;
            }
          }
          std::to_string(&v439, __val);
          uint64_t v140 = std::string::insert(&v439, 0, "geom_");
          long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
          std::string::size_type v375 = v140->__r_.__value_.__r.__words[2];
          *(_OWORD *)v374 = v141;
          v140->__r_.__value_.__l.__size_ = 0;
          v140->__r_.__value_.__r.__words[2] = 0;
          v140->__r_.__value_.__r.__words[0] = 0;
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v388);
          pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v454, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v388, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v445);
          unint64_t v142 = v445[1];
          if (v445[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v445[1] + 6, 1uLL, memory_order_relaxed);
          }
          unint64_t v143 = (atomic_ullong *)v129[8];
          v129[8] = (uint64_t)v142;
          if (v143) {
            sub_216D16E0C(v143);
          }
          sub_2169C487C((int *)v129 + 18, v446);
          sub_2169C48D4((int *)v129 + 19, (_DWORD *)v446 + 1);
          unint64_t v144 = v129 + 10;
          sub_2168D2318(v129 + 10, (void *)v446 + 1);
          pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v445);
          if ((v388 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v388 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (SHIBYTE(v375) < 0) {
            operator delete(v374[0]);
          }
          if (SHIBYTE(v439.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v439.__r_.__value_.__l.__data_);
          }
          uint64_t v145 = v116;
          uint64_t v146 = sub_21718AE44((uint64_t)v428);
          uint64_t v147 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v129 + 7);
          std::string::size_type size = v435.__r_.__value_.__l.__size_;
          unint64_t v148 = (const void **)v435.__r_.__value_.__r.__words[0];
          if (v435.__r_.__value_.__r.__words[0] != v435.__r_.__value_.__l.__size_)
          {
            v150 = (const void **)v146;
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(v147, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v445);
              pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v150, v148, (uint64_t)v374);
              sub_21718AF14((uint64_t)&v392, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v445, (long long *)v374);
              if (SHIBYTE(v375) < 0) {
                operator delete(v374[0]);
              }
              if ((BYTE8(v446[0]) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
              sub_21697C414(v446);
              if (v445[1]) {
                sub_216D16E0C((atomic_ullong *)v445[1]);
              }
              v148 += 3;
            }
            while (v148 != (const void **)size);
          }
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v417, v147);
          uint64_t v151 = *v144;
          v417 = (uint64_t *)&unk_26C767760;
          uint64_t v420 = v151;
          uint64_t v116 = v145;
          if ((v151 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v420 &= 0xFFFFFFFFFFFFFFF8;
          }
          v417 = (uint64_t *)&unk_26C767A08;
          if ((BYTE8(v455) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v455 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v455 + 1);
          sub_21697C414(&v455);
          if (v454[1]) {
            sub_216D16E0C((atomic_ullong *)v454[1]);
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v417, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v129 + 7));
          uint64_t v152 = v129[10];
          v417 = (uint64_t *)&unk_26C767760;
          uint64_t v420 = v152;
          if ((v152 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v420 &= 0xFFFFFFFFFFFFFFF8;
          }
          v417 = (uint64_t *)&unk_26C767A08;
        }
        if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v384.__r_.__value_.__l.__data_);
        }
        v454[0] = &v435;
        sub_216782F20((void ***)v454);
LABEL_354:
        if (v418 && (*((unsigned char *)v418 + 57) & 8) == 0 && ((unsigned int (*)(uint64_t **))v417[4])(&v417))
        {
          unint64_t v153 = v418;
          if (v418) {
            atomic_fetch_add_explicit(v418 + 6, 1uLL, memory_order_relaxed);
          }
          unint64_t v154 = (atomic_ullong *)*((void *)&v466 + 1);
          *((void *)&v466 + 1) = v153;
          if (v154) {
            sub_216D16E0C(v154);
          }
          sub_2169C487C((int *)&v467, &v419);
          sub_2169C48D4((int *)&v467 + 1, (_DWORD *)&v419 + 1);
          sub_2168D2318((void *)&v467 + 1, &v420);
        }
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v417);
LABEL_363:
        v445[0] = &v428;
        uint64_t v155 = sub_21718B6F4((uint64_t)&v406, (unint64_t *)&v428, (uint64_t)&unk_2174BFD90, (void **)v445);
        uint64_t v156 = v155;
        uint64_t v157 = *((void *)&v466 + 1);
        if (*((void *)&v466 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v466 + 1) + 48), 1uLL, memory_order_relaxed);
        }
        unint64_t v158 = (atomic_ullong *)v155[7];
        v156[7] = v157;
        if (v158) {
          sub_216D16E0C(v158);
        }
        long long v159 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v156 + 6);
        sub_2169C487C((int *)v156 + 16, &v467);
        sub_2169C48D4((int *)v156 + 17, (_DWORD *)&v467 + 1);
        uint64_t v160 = v156 + 9;
        sub_2168D2318(v160, (void *)&v467 + 1);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v440, v159);
        uint64_t v161 = *v160;
        v440[0] = &unk_26C767760;
        uint64_t v442 = v161;
        if ((v161 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v161 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v442 &= 0xFFFFFFFFFFFFFFF8;
        }
        v440[0] = &unk_26C767A08;
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v466);
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v440);
        if (v429) {
          sub_216784EC4(v429);
        }
        v119 += 2;
        uint64_t v120 = v367;
      }
      v454[0] = &v430;
      sub_216787968((void ***)v454);
      uint64_t v115 = v357 + 2;
    }
    while (v357 + 2 != v349);
  }
  v454[0] = &v433;
  sub_216787968((void ***)v454);
  if (v110) {
    sub_216784EC4(v110);
  }
  uint64_t v390 = 0;
  v389 = 0;
  v388 = &v389;
  uint64_t v162 = *a1;
  unint64_t v163 = sub_21730D998();
  sub_217189658(v162, (uint64_t)v163, (uint64_t *)&v417);
  uint64_t v164 = v417;
  v363 = v418;
  if (v417 != v418)
  {
    while (2)
    {
      v458 = 0;
      uint64_t v459 = 0;
      *(_OWORD *)v454 = 0u;
      long long v455 = 0u;
      long long v456 = 0u;
      uint64_t v461 = 0;
      uint64_t v462 = 0;
      v460 = 0;
      v464 = 0;
      uint64_t v465 = 0;
      v457 = (uint64_t *)&v458;
      v463 = &v464;
      uint64_t v165 = (std::__shared_weak_count *)v164[1];
      v445[0] = (void *)*v164;
      v445[1] = v165;
      if (v165) {
        atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_21717A328((uint64_t)v454, (uint64_t *)v445);
      if (v165) {
        sub_216784EC4(v165);
      }
      v365 = v164;
      uint64_t v166 = *v164;
      unint64_t v167 = sub_21730D998();
      sub_21718C68C(v166, (uint64_t)v167, (uint64_t *)v437);
      uint64_t v168 = *(void *)&v437[8];
      uint64_t v370 = *(void *)&v437[8];
      uint64_t v169 = *(void *)v437;
LABEL_382:
      if (v169 == v168)
      {
        v445[0] = v437;
        sub_216787968((void ***)v445);
        sub_21678A498((uint64_t)&v463, v464);
        v445[0] = &v460;
        sub_21682E488((void ***)v445);
        sub_21718CF08((uint64_t)&v457, v458);
        v445[0] = (char *)&v455 + 8;
        sub_216787968((void ***)v445);
        v445[0] = v454;
        sub_216782F20((void ***)v445);
        uint64_t v164 = v365 + 2;
        if (v365 + 2 == v363) {
          goto LABEL_412;
        }
        continue;
      }
      break;
    }
    long long v448 = 0uLL;
    *(_OWORD *)v445 = 0u;
    memset(v446, 0, sizeof(v446));
    uint64_t v450 = 0;
    long long v449 = 0uLL;
    uint64_t v452 = 0;
    uint64_t v453 = 0;
    v447 = (uint64_t *)&v448;
    v451 = &v452;
    uint64_t v170 = *(std::__shared_weak_count **)(v169 + 8);
    v440[0] = *(void **)v169;
    v440[1] = v170;
    if (v170) {
      atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_21718BA7C((uint64_t)v445, (uint64_t *)v440, (uint64_t *)&v466);
    sub_21718CA50((uint64_t *)&v449, *((long long **)&v449 + 1), v466, *((long long **)&v466 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v466 + 1) - v466) >> 4));
    v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&v466;
    sub_21682E488((void ***)&v435);
    if (v170) {
      sub_216784EC4(v170);
    }
    sub_21718B9DC((uint64_t)v445, &v460);
    unint64_t v171 = *(uint64_t **)v169;
    unint64_t v172 = *(std::__shared_weak_count **)(v169 + 8);
    if (v172) {
      atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v173 = v389;
    unint64_t v174 = &v389;
LABEL_390:
    unint64_t v175 = v174;
    if (v173)
    {
      while (1)
      {
        unint64_t v174 = (uint64_t **)v173;
        unint64_t v176 = v173[4];
        if ((unint64_t)v171 < v176)
        {
          uint64_t v173 = *v174;
          goto LABEL_390;
        }
        if (v176 >= (unint64_t)v171) {
          break;
        }
        uint64_t v173 = v174[1];
        if (!v173)
        {
          unint64_t v175 = v174 + 1;
          goto LABEL_397;
        }
      }
      uint64_t v177 = v174;
    }
    else
    {
LABEL_397:
      unint64_t v178 = (uint64_t **)operator new(0xA8uLL);
      uint64_t v177 = v178;
      v178[4] = v171;
      v178[5] = (uint64_t *)v172;
      if (v172) {
        atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v178[14] = 0;
      v178[15] = 0;
      *((_OWORD *)v178 + 5) = 0u;
      *((_OWORD *)v178 + 6) = 0u;
      *((_OWORD *)v178 + 3) = 0u;
      *((_OWORD *)v178 + 4) = 0u;
      v178[12] = (uint64_t *)(v178 + 13);
      v178[16] = 0;
      v178[17] = 0;
      v178[20] = 0;
      v178[19] = 0;
      v178[18] = (uint64_t *)(v178 + 19);
      *unint64_t v178 = 0;
      v178[1] = 0;
      v178[2] = (uint64_t *)v174;
      void *v175 = (uint64_t *)v178;
      unint64_t v179 = (uint64_t *)v178;
      if (*v388)
      {
        v388 = (uint64_t **)*v388;
        unint64_t v179 = *v175;
      }
      sub_21677B3B0(v389, v179);
      ++v390;
    }
    sub_21680F80C((uint64_t *)v177 + 6);
    *((_OWORD *)v177 + 3) = *(_OWORD *)v445;
    v177[8] = *(uint64_t **)&v446[0];
    *(void *)&v446[0] = 0;
    v445[1] = 0;
    v445[0] = 0;
    sub_2167ADF8C((uint64_t *)v177 + 9);
    *(_OWORD *)(v177 + 9) = *(_OWORD *)((char *)v446 + 8);
    unint64_t v181 = (uint64_t *)(v177 + 13);
    unint64_t v180 = v177[13];
    v177[11] = (uint64_t *)*((void *)&v446[1] + 1);
    memset((char *)v446 + 8, 0, 24);
    sub_21718CF08((uint64_t)(v177 + 12), v180);
    uint64_t v182 = (uint64_t *)v448;
    v177[12] = v447;
    v177[13] = v182;
    uint64_t v183 = *((void *)&v448 + 1);
    v177[14] = (uint64_t *)*((void *)&v448 + 1);
    if (v183)
    {
      v182[2] = (uint64_t)v181;
      v447 = (uint64_t *)&v448;
      long long v448 = 0uLL;
    }
    else
    {
      v177[12] = v181;
    }
    sub_216C02D50((void **)v177 + 15);
    *(_OWORD *)(v177 + 15) = v449;
    uint64_t v185 = (char *)v177[19];
    unint64_t v184 = v177 + 19;
    *(v184 - 2) = v450;
    uint64_t v450 = 0;
    long long v449 = 0uLL;
    sub_21678A498((uint64_t)(v184 - 1), v185);
    uint64_t v186 = v452;
    *(v184 - 1) = v451;
    void *v184 = v186;
    uint64_t v187 = v453;
    v184[1] = v453;
    if (v187)
    {
      *(void *)(v186 + 16) = v184;
      uint64_t v186 = 0;
      v451 = &v452;
      uint64_t v452 = 0;
      uint64_t v453 = 0;
      if (v172) {
        goto LABEL_407;
      }
    }
    else
    {
      *(v184 - 1) = v184;
      if (v172)
      {
LABEL_407:
        sub_216784EC4(v172);
        uint64_t v186 = v452;
      }
    }
    sub_21678A498((uint64_t)&v451, (char *)v186);
    *(void *)&long long v466 = &v449;
    sub_21682E488((void ***)&v466);
    sub_21718CF08((uint64_t)&v447, (void *)v448);
    *(void *)&long long v466 = (char *)v446 + 8;
    sub_216787968((void ***)&v466);
    *(void *)&long long v466 = v445;
    sub_216782F20((void ***)&v466);
    v169 += 16;
    uint64_t v168 = v370;
    goto LABEL_382;
  }
LABEL_412:
  v454[0] = &v417;
  sub_216787968((void ***)v454);
  *(_OWORD *)v454 = 0u;
  long long v455 = 0u;
  long long v456 = 0u;
  v458 = 0;
  v457 = (uint64_t *)&v458;
  uint64_t v459 = 0;
  v460 = 0;
  uint64_t v462 = 0;
  uint64_t v461 = 0;
  uint64_t v465 = 0;
  v464 = 0;
  v463 = &v464;
  sub_21680F694((uint64_t)v454, __str, (long long *)__dst, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)__str) >> 3));
  unint64_t v188 = v388;
  if (v388 != &v389)
  {
    do
    {
      v445[0] = v188 + 4;
      unint64_t v189 = sub_21718D168(&v457, (unint64_t *)v188 + 4, (uint64_t)&unk_2174BFD90, (uint64_t **)v445);
      sub_217179EF4();
      sub_21718CFE0((long long **)&v466, (uint64_t)(v188 + 4));
      if (*(char *)(v466 + 23) < 0)
      {
        sub_216778F24(v445, *(void **)v466, *(void *)(v466 + 8));
      }
      else
      {
        long long v190 = *(_OWORD *)v466;
        *(void *)&v446[0] = *(void *)(v466 + 16);
        *(_OWORD *)v445 = v190;
      }
      sub_21718D048((uint64_t *)&v455 + 1, (long long *)v188 + 2);
      unint64_t v191 = (long long *)v188[15];
      unint64_t v192 = (long long *)v188[16];
      if (v191 != v192)
      {
        unint64_t v193 = v189 + 6;
        do
        {
          unint64_t v194 = (char *)v191 + 24;
          sub_21718D410(v193, v191, (long long *)((char *)v191 + 24));
          unint64_t v191 = (long long *)(v194 + 24);
        }
        while (v194 + 24 != (char *)v192);
      }
      if (SBYTE7(v446[0]) < 0) {
        operator delete(v445[0]);
      }
      unint64_t v195 = v188[1];
      if (v195)
      {
        do
        {
          uint64_t v196 = (uint64_t **)v195;
          unint64_t v195 = (uint64_t *)*v195;
        }
        while (v195);
      }
      else
      {
        do
        {
          uint64_t v196 = (uint64_t **)v188[2];
          BOOL v197 = *v196 == (uint64_t *)v188;
          unint64_t v188 = v196;
        }
        while (!v197);
      }
      unint64_t v188 = v196;
    }
    while (v196 != &v389);
  }
  sub_21718D658((uint64_t)&v388, v389);
  uint64_t v390 = 0;
  v388 = &v389;
  v389 = 0;
  v358 = (unint64_t *)*((void *)&v455 + 1);
  for (uint64_t m = (unint64_t *)v456; v358 != m; v358 += 2)
  {
    sub_217179EF4();
    sub_21718CFE0((long long **)v445, (uint64_t)v358);
    if (*((char *)v445[0] + 23) < 0)
    {
      sub_216778F24(v440, *(void **)v445[0], *((void *)v445[0] + 1));
    }
    else
    {
      long long v198 = *(_OWORD *)v445[0];
      v441 = (unsigned char *)*((void *)v445[0] + 2);
      *(_OWORD *)v440 = v198;
    }
    memset(&v435, 0, sizeof(v435));
    sub_216812BD8((char *)&v435, (long long *)v454[0], (long long *)v454[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v454[1] - (char *)v454[0]) >> 3));
    std::string::size_type v199 = v435.__r_.__value_.__l.__size_;
    std::string::size_type v356 = v435.__r_.__value_.__l.__size_;
    for (std::string::size_type n = v435.__r_.__value_.__r.__words[0]; n != v199; n += 24)
    {
      char v201 = sub_21718D6B4((uint64_t)v454, v358);
      int v203 = v201 + 1;
      v202 = (const void **)*v201;
      if ((uint64_t *)*v201 != v201 + 1)
      {
        do
        {
          char v204 = (uint64_t *)sub_21678C2D8((uint64_t)&v408, (const void **)v440);
          if (&v409 != v204)
          {
            v205 = (uint64_t *)sub_21678C2D8((uint64_t)&v397, (const void **)n);
            int v206 = v205;
            if (&v398 != v205)
            {
              uint64_t v207 = sub_21678C2D8((uint64_t)(v205 + 7), v202 + 7);
              if (v206 + 8 != (uint64_t *)v207)
              {
                sub_217184E48((uint64_t)&v392, (const void **)v440, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v437);
                sub_216D16CFC((uint64_t)v445, (uint64_t *)&v437[8], &v437[16]);
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)v445, (long long *)n, (uint64_t)&v417);
                if ((BYTE8(v446[0]) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
                sub_21697C414(v446);
                if (v445[1]) {
                  sub_216D16E0C((atomic_ullong *)v445[1]);
                }
                if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v417, (uint64_t)(v202 + 7), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1))
                {
                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v417, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v202 + 7));
                  *(_OWORD *)&v384.__r_.__value_.__l.__data_ = 0uLL;
                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext((pxrInternal__aapl__pxrReserved__::UsdObject *)&v417, (uint64_t *)&v384, (uint64_t)&v466);
                  pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(v445, &v466);
                  sub_216BBED8C((uint64_t)v468);
                  uint64_t v208 = *((void *)&v467 + 1);
                  if (*((void *)&v467 + 1)
                    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v467 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                  {
                    (*(void (**)(uint64_t))(*(void *)v208 + 8))(v208);
                  }
                  uint64_t v209 = *((void *)&v466 + 1);
                  if (*((void *)&v466 + 1)
                    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v466 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                  {
                    (*(void (**)(uint64_t))(*(void *)v209 + 8))(v209);
                  }
                  std::string::size_type v210 = v384.__r_.__value_.__l.__size_;
                  if (v384.__r_.__value_.__l.__size_
                    && atomic_fetch_add_explicit((atomic_uint *volatile)(v384.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
                  {
                    (*(void (**)(std::string::size_type))(*(void *)v210 + 8))(v210);
                  }
                  sub_216779094(&v466, "");
                  uint64_t v211 = sub_21678C2D8((uint64_t)(v204 + 7), (const void **)&v466);
                  if (SBYTE7(v467) < 0) {
                    operator delete((void *)v466);
                  }
                  if (v204 + 8 != (uint64_t *)v211)
                  {
                    int v212 = *(void **)(v207 + 56);
                    char v213 = (void *)(v207 + 64);
                    if (v212 != (void *)(v207 + 64))
                    {
                      do
                      {
                        std::string::size_type v214 = v212[8];
                        v384.__r_.__value_.__r.__words[0] = v212[7];
                        v384.__r_.__value_.__l.__size_ = v214;
                        if (v214) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v214 + 8), 1uLL, memory_order_relaxed);
                        }
                        sub_2171805CC((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v211 + 56), &v384, (uint64_t)&v466);
                        sub_217180824((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v466, (uint64_t)(v212 + 7));
                        if ((BYTE8(v467) & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v467 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v467 + 1);
                        sub_21697C414(&v467);
                        if (*((void *)&v466 + 1)) {
                          sub_216D16E0C(*((atomic_ullong **)&v466 + 1));
                        }
                        if (v384.__r_.__value_.__l.__size_) {
                          sub_216784EC4((std::__shared_weak_count *)v384.__r_.__value_.__l.__size_);
                        }
                        int v215 = (void *)v212[1];
                        if (v215)
                        {
                          do
                          {
                            char v216 = v215;
                            int v215 = (void *)*v215;
                          }
                          while (v215);
                        }
                        else
                        {
                          do
                          {
                            char v216 = (void *)v212[2];
                            BOOL v197 = *v216 == (void)v212;
                            int v212 = v216;
                          }
                          while (!v197);
                        }
                        int v212 = v216;
                      }
                      while (v216 != v213);
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)v445);
                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v417);
                }
                else
                {
                  v445[0] = "usdMtlx/reader.cpp";
                  v445[1] = "AddMaterialVariant";
                  *(void *)&v446[0] = 1705;
                  *((void *)&v446[0] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::Ad"
                                              "dMaterialVariant(const std::string &, const VariantSetName &, const VariantName &) const";
                  LOBYTE(v446[1]) = 0;
                  if (*((char *)v202 + 79) >= 0) {
                    uint64_t v217 = (const char *)(v202 + 7);
                  }
                  else {
                    uint64_t v217 = (const char *)v202[7];
                  }
                  if (*(char *)(n + 23) >= 0) {
                    int v218 = (const char *)n;
                  }
                  else {
                    int v218 = *(const char **)n;
                  }
                  sub_216D1E2AC((uint64_t)v437, &v466);
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v466);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v445, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to author material variant '%s' in variant set '%s' on <%s>", v217, v218, Text);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v466 + 1);
                  sub_21697C414(&v466);
                }
                if (v422 < 0) {
                  operator delete(v421);
                }
                if ((v420 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v420 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v419 + 1);
                sub_21697C414(&v419);
                if (v418) {
                  sub_216D16E0C(v418);
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v437);
              }
            }
          }
          uint64_t v220 = (uint64_t *)v202[1];
          if (v220)
          {
            do
            {
              int v221 = v220;
              uint64_t v220 = (uint64_t *)*v220;
            }
            while (v220);
          }
          else
          {
            do
            {
              int v221 = (uint64_t *)v202[2];
              BOOL v197 = *v221 == (void)v202;
              v202 = (const void **)v221;
            }
            while (!v197);
          }
          v202 = (const void **)v221;
        }
        while (v221 != v203);
      }
      std::string::size_type v199 = v356;
    }
    v445[0] = &v435;
    sub_216782F20((void ***)v445);
    if (SHIBYTE(v441) < 0) {
      operator delete(v440[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v445, "Looks");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v445, &v386);
  if (((uint64_t)v445[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v445[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  char v222 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
  v445[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v222, a4, v445, (uint64_t)&v384);
  if (((uint64_t)v445[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v445[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v384, (uint64_t)v445);
  sub_216779094(&v466, "LookVariant");
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet((pxrInternal__aapl__pxrReserved__::UsdProperty *)v445, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v466, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v417);
  if (SBYTE7(v467) < 0) {
    operator delete((void *)v466);
  }
  if ((BYTE8(v446[0]) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
  sub_21697C414(v446);
  if (v445[1]) {
    sub_216D16E0C((atomic_ullong *)v445[1]);
  }
  uint64_t v223 = *a1;
  int v224 = sub_21730D998();
  sub_217189658(v223, (uint64_t)v224, (uint64_t *)&v382);
  v345 = v383;
  if (v382 != (const void **)v383)
  {
    char v225 = (uint64_t *)v382;
    do
    {
      unint64_t v379 = 0;
      v380 = 0;
      uint64_t v381 = 0;
      v445[1] = 0;
      *(void *)&v446[0] = 0;
      v445[0] = &v445[1];
      uint64_t v226 = v225;
      sub_2172F3E48(*v225, v440);
      std::string::size_type v227 = *v226;
      std::string::size_type v228 = v226[1];
      v346 = v226;
      v435.__r_.__value_.__r.__words[0] = *v226;
      v435.__r_.__value_.__l.__size_ = v228;
      if (v228) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v228 + 8), 1uLL, memory_order_relaxed);
      }
      while (v227)
      {
        sub_216BD4CA0((uint64_t **)v445, (unint64_t *)&v435, (uint64_t *)&v435);
        if ((v229 & 1) == 0)
        {
          exceptiostd::string::size_type n = __cxa_allocate_exception(0x20uLL);
          sub_2172F5514((uint64_t)v435.__r_.__value_.__l.__data_, (std::string *)v437);
          v343 = std::string::insert((std::string *)v437, 0, "Encountered cycle at element: ");
          long long v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
          *(void *)&long long v467 = *((void *)&v343->__r_.__value_.__l + 2);
          long long v466 = v344;
          v343->__r_.__value_.__l.__size_ = 0;
          v343->__r_.__value_.__r.__words[2] = 0;
          v343->__r_.__value_.__r.__words[0] = 0;
          sub_2171800DC(exception, &v466);
          void *exception = &unk_26C77BAD8;
          __cxa_throw(exception, (struct type_info *)&unk_26C77B910, (void (*)(void *))sub_21717FFBC);
        }
        sub_2171897BC((uint64_t *)&v379, (long long *)&v435);
        int v230 = v440[0];
        sub_217179EF4();
        char v231 = sub_2170396E4((void *)(v435.__r_.__value_.__r.__words[0] + 160), (unsigned __int8 *)&qword_267B96368);
        if (v231) {
          v232 = (long long *)(v231 + 40);
        }
        else {
          v232 = sub_21730D998();
        }
        uint64_t v233 = *((unsigned __int8 *)v232 + 23);
        if ((v233 & 0x80u) != 0) {
          uint64_t v233 = *((void *)v232 + 1);
        }
        if (!v233) {
          v232 = sub_21730D998();
        }
        char v234 = sub_2170396E4(v230 + 12, (unsigned __int8 *)v232);
        v235 = v234;
        if (v234)
        {
          int v236 = (void *)*((void *)v234 + 5);
          char v237 = (std::__shared_weak_count *)*((void *)v235 + 6);
          if (v237) {
            atomic_fetch_add_explicit(&v237->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v236)
          {
            int v236 = __dynamic_cast(v236, (const struct __class_type_info *)&unk_26C78B1F0, (const struct __class_type_info *)&unk_26C77BB50, 0);
            std::string::size_type v238 = 0;
            if (v236) {
              int v239 = 0;
            }
            else {
              int v239 = v237;
            }
            if (v237 && v236)
            {
              atomic_fetch_add_explicit(&v237->__shared_owners_, 1uLL, memory_order_relaxed);
              std::string::size_type v238 = (std::string::size_type)v237;
            }
            else
            {
              char v237 = v239;
            }
          }
          else
          {
            std::string::size_type v238 = 0;
          }
        }
        else
        {
          char v237 = 0;
          std::string::size_type v238 = 0;
          int v236 = 0;
        }
        char v240 = (std::__shared_weak_count *)v435.__r_.__value_.__l.__size_;
        v435.__r_.__value_.__r.__words[0] = (std::string::size_type)v236;
        v435.__r_.__value_.__l.__size_ = v238;
        if (v240) {
          sub_216784EC4(v240);
        }
        if (v237) {
          sub_216784EC4(v237);
        }
        std::string::size_type v227 = v435.__r_.__value_.__r.__words[0];
      }
      if (v435.__r_.__value_.__l.__size_) {
        sub_216784EC4((std::__shared_weak_count *)v435.__r_.__value_.__l.__size_);
      }
      v241 = (uint64_t *)v379;
      if ((void *)v379 != v380)
      {
        int v242 = v380 - 2;
        if ((unint64_t)(v380 - 2) > v379)
        {
          do
          {
            uint64_t v243 = *v241;
            uint64_t *v241 = *v242;
            *int v242 = v243;
            uint64_t v244 = v241[1];
            v241[1] = v242[1];
            v242[1] = v244;
            v241 += 2;
            v242 -= 2;
          }
          while (v241 < v242);
        }
      }
      if (v440[1]) {
        sub_216784EC4((std::__shared_weak_count *)v440[1]);
      }
      sub_216BD5270((uint64_t)v445, (void *)v445[1]);
      int v245 = (void *)v379;
      char v246 = v380;
      v354 = v380;
      while (v245 != v246)
      {
        v364 = v245;
        uint64_t v247 = *v245;
        if (*(char *)(v247 + 71) < 0)
        {
          sub_216778F24(v377, *(void **)(v247 + 48), *(void *)(v247 + 56));
        }
        else
        {
          *(_OWORD *)v377 = *(_OWORD *)(v247 + 48);
          uint64_t v378 = *(void *)(v247 + 64);
        }
        int v248 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v466);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v386, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v466, v445);
        *(void *)v437 = 0;
        pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v248, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v445, (void **)v437, (uint64_t)v374);
        if ((v437[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v437 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v445 + 1);
        sub_21697C414(v445);
        if ((v466 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v466 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v374) & 1) == 0)
        {
          v250 = (void *)*v364;
          char v249 = (std::__shared_weak_count *)v364[1];
          if (v249) {
            atomic_fetch_add_explicit(&v249->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v361 = v249;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96698, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_267B96698))
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B96690, "Materials");
            __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B96690, &dword_216758000);
            __cxa_guard_release(&qword_267B96698);
          }
          v445[0] = v250;
          v445[1] = v361;
          if (v361) {
            atomic_fetch_add_explicit(&v361->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21717E558((uint64_t)v374, (uint64_t)v445);
          if (v361) {
            sub_216784EC4(v361);
          }
          sub_217179EF4();
          int v251 = sub_2170396E4(v250 + 20, (unsigned __int8 *)&qword_267B96368);
          if (v251) {
            v253 = (long long *)(v251 + 40);
          }
          else {
            v253 = sub_21730D998();
          }
          uint64_t v254 = *((unsigned __int8 *)v253 + 23);
          if ((v254 & 0x80u) == 0) {
            uint64_t v255 = *((unsigned __int8 *)v253 + 23);
          }
          else {
            uint64_t v255 = *((void *)v253 + 1);
          }
          if (v255)
          {
            if ((v254 & 0x80) == 0) {
              goto LABEL_567;
            }
LABEL_570:
            if (*((void *)v253 + 1)) {
              goto LABEL_571;
            }
          }
          else
          {
            v253 = sub_21730D998();
            uint64_t v254 = *((unsigned __int8 *)v253 + 23);
            if ((v254 & 0x80) != 0) {
              goto LABEL_570;
            }
LABEL_567:
            if (v254)
            {
LABEL_571:
              sub_216D0162C((uint64_t)v374, (int *)&v466);
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v466, v445);
              sub_21717C1A8((uint64_t)v253, (uint64_t)v437);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v445, (const pxrInternal__aapl__pxrReserved__::TfToken *)v437, v440);
              if ((v437[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v437 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v445 + 1);
              sub_21697C414(v445);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v466 + 1);
              sub_21697C414(&v466);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v374, (uint64_t)v445);
              pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v466, 0.0, 1.0);
              pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)v445, (uint64_t)v440, (uint64_t)&v466, 1);
              if ((BYTE8(v446[0]) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
              sub_21697C414(v446);
              if (v445[1]) {
                sub_216D16E0C((atomic_ullong *)v445[1]);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v440 + 1);
              sub_21697C414(v440);
            }
          }
          if (v347 != v348)
          {
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v374, (uint64_t)v445);
            sub_216981010(v437, &v394);
            sub_21698105C(&v437[4], (_DWORD *)&v394 + 1);
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v466, 0.0, 1.0);
            pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)v445, (uint64_t)v437, (uint64_t)&v466, 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v437[4]);
            sub_21697C414(v437);
            if ((BYTE8(v446[0]) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
            sub_21697C414(v446);
            if (v445[1]) {
              sub_216D16E0C((atomic_ullong *)v445[1]);
            }
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v374, v252, v445);
          v256 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)v445);
          sub_216D0162C((uint64_t)v374, (int *)v437);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v437, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B96690, &v466);
          v435.__r_.__value_.__r.__words[0] = 0;
          pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v256, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v466, (void **)&v435.__r_.__value_.__l.__data_, (uint64_t)v440);
          if ((v435.__r_.__value_.__s.__data_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v435.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v466 + 1);
          sub_21697C414(&v466);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v437[4]);
          sub_21697C414(v437);
          int v257 = v445[1];
          if (v445[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)v445[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v257 + 8))(v257);
          }
          *(_OWORD *)&v439.__r_.__value_.__r.__words[1] = 0uLL;
          v439.__r_.__value_.__r.__words[0] = (std::string::size_type)&v439.__r_.__value_.__l.__size_;
          char v258 = sub_21730D998();
          sub_21718C68C((uint64_t)v250, (uint64_t)v258, (uint64_t *)v445);
          v259 = (uint64_t *)v445[0];
          int v260 = (uint64_t *)v445[1];
          while (v259 != v260)
          {
            uint64_t v261 = *v259;
            v262 = (std::__shared_weak_count *)v259[1];
            if (v262) {
              atomic_fetch_add_explicit(&v262->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v261) {
              sub_21717C1A8(v261 + 48, (uint64_t)&v466);
            }
            else {
              *(void *)&long long v466 = 0;
            }
            v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&v466;
            *((_DWORD *)sub_21718D824((uint64_t **)&v439, (uint64_t *)&v466, (uint64_t)&unk_2174BFD90, &v435) + 10) = 0;
            if ((v466 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v466 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v262) {
              sub_216784EC4(v262);
            }
            v259 += 2;
          }
          *(void *)&long long v466 = v445;
          sub_216787968((void ***)&v466);
          UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v263);
          uint64_t v266 = *UsdPrimAllPrimsPredicate;
          uint64_t v265 = UsdPrimAllPrimsPredicate[1];
          uint64_t v267 = UsdPrimAllPrimsPredicate[2];
          if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v441)
            && ((v266 & 0x2000) != 0 || (v265 & 0x2000) == 0))
          {
            v266 |= 0x2000uLL;
            v265 &= ~0x2000uLL;
          }
          *(void *)&long long v466 = v266;
          *((void *)&v466 + 1) = v265;
          *(void *)&long long v467 = v267;
          sub_216D6BF84((uint64_t)v440, (uint64_t *)&v466, (uint64_t)v445);
          *(void **)&long long v466 = v445[0];
          sub_216981010((_DWORD *)&v466 + 2, &v445[1]);
          sub_21698105C((_DWORD *)&v466 + 3, (_DWORD *)&v445[1] + 1);
          long long v467 = v446[0];
          *(void *)v437 = *((void *)&v446[1] + 1);
          v468[0] = *(void *)&v446[1];
          sub_216981010(&v437[8], &v447);
          sub_21698105C(&v437[12], (_DWORD *)&v447 + 1);
          *(_OWORD *)&v437[16] = v448;
          uint64_t v438 = v449;
          while (v466 != *(_OWORD *)v437 || !sub_216D5D158((uint64_t)&v467, (uint64_t)&v437[16]))
          {
            sub_216D6BE74((uint64_t)&v466, (uint64_t)&v435);
            v433 = (uint64_t *)sub_216D563F8(&v435);
            *((_DWORD *)sub_21718D8B4((uint64_t **)&v439, v433, (uint64_t)&unk_2174BFD90, &v433) + 10) = 1;
            if ((v436 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v436 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v435.__r_.__value_.__r.__words[2] + 1);
            sub_21697C414(&v435.__r_.__value_.__r.__words[2]);
            if (v435.__r_.__value_.__l.__size_) {
              sub_216D16E0C((atomic_ullong *)v435.__r_.__value_.__l.__size_);
            }
            sub_216D6BEE8((uint64_t)&v466);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v437[12]);
          sub_21697C414(&v437[8]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v466 + 3);
          sub_21697C414((_DWORD *)&v466 + 2);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v447 + 1);
          sub_21697C414(&v447);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v445[1] + 1);
          sub_21697C414(&v445[1]);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v374, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v466);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder((pxrInternal__aapl__pxrReserved__::UsdPrim *)v374, &v433);
          v431 = 0;
          v430 = 0;
          unint64_t v432 = 0;
          v268 = sub_21730D998();
          sub_21718C68C((uint64_t)v250, (uint64_t)v268, (uint64_t *)&v428);
          int v269 = v428;
          char v270 = v429;
          v369 = v429;
          while (2)
          {
            if (v269 == v270)
            {
              v445[0] = &v428;
              sub_216787968((void ***)v445);
              if (v430 != v431)
              {
                sub_216AE27E0((uint64_t *)&v430, v431, v433, v434, v434 - v433);
                sub_21718D78C((uint64_t)v374);
              }
              v445[0] = &v430;
              sub_216889A04((void ***)v445);
              v445[0] = &v433;
              sub_216889A04((void ***)v445);
              pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v466);
              sub_2168CB05C((uint64_t)&v439, (void *)v439.__r_.__value_.__l.__size_);
              if ((v442 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v442 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v441 + 1);
              sub_21697C414(&v441);
              if (v440[1]) {
                sub_216D16E0C((atomic_ullong *)v440[1]);
              }
              if (v361) {
                sub_216784EC4(v361);
              }
              if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v417, (uint64_t)v377, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1))
              {
                pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v417, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v377);
                *(_OWORD *)v437 = 0uLL;
                pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext((pxrInternal__aapl__pxrReserved__::UsdObject *)&v417, (uint64_t *)v437, (uint64_t)&v466);
                pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(v445, &v466);
                sub_216BBED8C((uint64_t)v468);
                uint64_t v336 = *((void *)&v467 + 1);
                if (*((void *)&v467 + 1)
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v467 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v336 + 8))(v336);
                }
                uint64_t v337 = *((void *)&v466 + 1);
                if (*((void *)&v466 + 1)
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v466 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v337 + 8))(v337);
                }
                uint64_t v338 = *(void *)&v437[8];
                if (*(void *)&v437[8]
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v437[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v338 + 8))(v338);
                }
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v384, (uint64_t)&v466);
                sub_216D0162C((uint64_t)v374, (int *)v440);
                pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v437, 0.0, 1.0);
                pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v466, (uint64_t)v440, (uint64_t)v437, 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v440 + 1);
                sub_21697C414(v440);
                if ((BYTE8(v467) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v467 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v467 + 1);
                sub_21697C414(&v467);
                if (*((void *)&v466 + 1)) {
                  sub_216D16E0C(*((atomic_ullong **)&v466 + 1));
                }
                pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)v445);
              }
              else
              {
                v445[0] = "usdMtlx/reader.cpp";
                v445[1] = "UsdMtlxRead";
                *(void *)&v446[0] = 2740;
                *((void *)&v446[0] + 1) = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDoc"
                                            "umentPtr &, const UsdStagePtr &, const SdfPath &, const SdfPath &)";
                LOBYTE(v446[1]) = 0;
                if (v378 >= 0) {
                  v339 = v377;
                }
                else {
                  v339 = (void **)v377[0];
                }
                if (v422 >= 0) {
                  v340 = (const char *)&v421;
                }
                else {
                  v340 = (const char *)v421;
                }
                sub_216D0162C((uint64_t)&v384, (int *)&v466);
                v341 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v466);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v445, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to author look variant '%s' in variant set '%s' on <%s>", (const char *)v339, v340, v341);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v466 + 1);
                sub_21697C414(&v466);
              }
              break;
            }
            sub_217179EF4();
            v271 = sub_2170396E4(&v269->__vftable[4].~__shared_weak_count, (unsigned __int8 *)&qword_267B963C8);
            if (v271) {
              int v272 = (long long *)(v271 + 40);
            }
            else {
              int v272 = sub_21730D998();
            }
            uint64_t v273 = *((unsigned __int8 *)v272 + 23);
            if ((v273 & 0x80u) != 0) {
              uint64_t v273 = *((void *)v272 + 1);
            }
            if (!v273) {
              int v272 = sub_21730D998();
            }
            sub_217184E48((uint64_t)&v392, (const void **)v272, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v426);
            if (v427
              && (*(unsigned char *)(v427 + 57) & 8) == 0
              && (((uint64_t (*)(std::string **))v426[1].__r_.__value_.__l.__size_)(&v426) & 1) != 0)
            {
              v274 = v269->__vftable;
              shared_owners = (std::__shared_weak_count *)v269->__shared_owners_;
              if (shared_owners) {
                atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v274)
              {
                sub_21717C1A8((uint64_t)&v274[1].~__shared_weak_count_0, (uint64_t)&v425);
                if (shared_owners) {
                  goto LABEL_628;
                }
              }
              else
              {
                unint64_t v425 = 0;
                if (shared_owners) {
LABEL_628:
                }
                  sub_216784EC4(shared_owners);
              }
              v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&v425;
              char v276 = sub_21718D8B4((uint64_t **)&v439, (uint64_t *)&v425, (uint64_t)&unk_2174BFD90, (uint64_t **)&v435);
              int v278 = v276;
              if (*((_DWORD *)v276 + 10))
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v440, v277, &v423);
                sub_216D0162C((uint64_t)v440, (int *)&v444);
                if ((v425 & 0xFFFFFFFFFFFFFFF8) != 0) {
                  v280 = (uint64_t *)((v425 & 0xFFFFFFFFFFFFFFF8) + 16);
                }
                else {
                  v280 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v279);
                }
                if (*((char *)v280 + 23) >= 0) {
                  size_t v281 = *((unsigned __int8 *)v280 + 23);
                }
                else {
                  size_t v281 = v280[1];
                }
                sub_2167940B4((uint64_t)v437, v281 + 1);
                if (v437[23] >= 0) {
                  char v282 = v437;
                }
                else {
                  char v282 = *(unsigned char **)v437;
                }
                if (v281)
                {
                  if (*((char *)v280 + 23) >= 0) {
                    v283 = v280;
                  }
                  else {
                    v283 = (const void *)*v280;
                  }
                  memmove(v282, v283, v281);
                }
                *(_WORD *)&v282[v281] = 95;
                do
                {
                  int v284 = *((_DWORD *)v278 + 10);
                  *((_DWORD *)v278 + 10) = v284 + 1;
                  std::to_string(&v435, v284);
                  if (v437[23] >= 0) {
                    char v285 = v437;
                  }
                  else {
                    char v285 = *(const std::string::value_type **)v437;
                  }
                  if (v437[23] >= 0) {
                    std::string::size_type v286 = v437[23];
                  }
                  else {
                    std::string::size_type v286 = *(void *)&v437[8];
                  }
                  int v287 = std::string::insert(&v435, 0, v285, v286);
                  long long v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
                  *(void *)&v446[0] = *((void *)&v287->__r_.__value_.__l + 2);
                  *(_OWORD *)v445 = v288;
                  v287->__r_.__value_.__l.__size_ = 0;
                  v287->__r_.__value_.__r.__words[2] = 0;
                  v287->__r_.__value_.__r.__words[0] = 0;
                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v443);
                  if ((v425 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v425 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  unint64_t v425 = v443;
                  unint64_t v443 = 0;
                  if (SBYTE7(v446[0]) < 0) {
                    operator delete(v445[0]);
                  }
                  if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v435.__r_.__value_.__l.__data_);
                  }
                  v289 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v423);
                  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v444, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v425, &v435);
                  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v289, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (uint64_t)v445);
                  char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v445, v290);
                  if ((BYTE8(v446[0]) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
                  sub_21697C414(v446);
                  if (v445[1]) {
                    sub_216D16E0C((atomic_ullong *)v445[1]);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v435.__r_.__value_.__r.__words + 1);
                  sub_21697C414(&v435);
                }
                while ((IsDefined & 1) != 0);
                if ((v437[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v437);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                sub_21697C414(&v444);
                uint64_t v292 = v424;
                if (v424
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(v424 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v292 + 8))(v292);
                }
              }
              else
              {
                *((_DWORD *)v276 + 10) = 1;
              }
              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v440, v277, v445);
              int v293 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)v445);
              sub_216D0162C((uint64_t)v440, (int *)&v423);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v423, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v425, &v435);
              unint64_t v444 = 0;
              pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v293, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v435, (void **)&v444, (uint64_t)v437);
              if ((v444 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v444 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v435.__r_.__value_.__r.__words + 1);
              sub_21697C414(&v435);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v423 + 1);
              sub_21697C414(&v423);
              char v294 = v445[1];
              if (v445[1]
                && atomic_fetch_add_explicit((atomic_uint *volatile)v445[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(void *))(*(void *)v294 + 8))(v294);
              }
              uint64_t v295 = (std::__shared_weak_count *)v269->__shared_owners_;
              v445[0] = v269->__vftable;
              v445[1] = v295;
              if (v295) {
                atomic_fetch_add_explicit(&v295->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_21717FEC8((uint64_t)v437, (uint64_t)v445);
              if (v295) {
                sub_216784EC4(v295);
              }
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v437, (uint64_t)v445);
              sub_216D1E2AC((uint64_t)&v426, &v423);
              pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v435, 0.0, 1.0);
              pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)v445, (uint64_t)&v423, (uint64_t)&v435, 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v423 + 1);
              sub_21697C414(&v423);
              if ((BYTE8(v446[0]) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
              sub_21697C414(v446);
              if (v445[1]) {
                sub_216D16E0C((atomic_ullong *)v445[1]);
              }
              v296 = (std::__shared_weak_count *)v269->__shared_owners_;
              v445[0] = v269->__vftable;
              v445[1] = v296;
              if (v296)
              {
                atomic_fetch_add_explicit(&v296->__shared_owners_, 1uLL, memory_order_relaxed);
                v297 = sub_21718D6B4((uint64_t)v454, (unint64_t *)v445);
                sub_216784EC4(v296);
              }
              else
              {
                v297 = sub_21718D6B4((uint64_t)v454, (unint64_t *)v445);
              }
              uint64_t v301 = *v297;
              v300 = v297 + 1;
              v299 = (long long *)v301;
              if ((uint64_t *)v301 != v300)
              {
                do
                {
                  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)v437, v299 + 2, (uint64_t)v445);
                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v445, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v299 + 56));
                  if (SHIBYTE(v447) < 0) {
                    operator delete(*(void **)&v446[1]);
                  }
                  if ((BYTE8(v446[0]) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
                  sub_21697C414(v446);
                  if (v445[1]) {
                    sub_216D16E0C((atomic_ullong *)v445[1]);
                  }
                  v302 = (uint64_t *)*((void *)v299 + 1);
                  if (v302)
                  {
                    do
                    {
                      v303 = v302;
                      v302 = (uint64_t *)*v302;
                    }
                    while (v302);
                  }
                  else
                  {
                    do
                    {
                      v303 = (uint64_t *)*((void *)v299 + 2);
                      BOOL v197 = *v303 == (void)v299;
                      v299 = (long long *)v303;
                    }
                    while (!v197);
                  }
                  v299 = (long long *)v303;
                }
                while (v303 != v300);
              }
              v305 = v269->__vftable;
              v304 = (std::__shared_weak_count *)v269->__shared_owners_;
              if (v304) {
                atomic_fetch_add_explicit(&v304->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v366 = v304;
              v306 = (void *)v407[0];
              if (!v407[0]) {
                goto LABEL_711;
              }
              v307 = v407;
              do
              {
                v308 = v306;
                v309 = v307;
                unint64_t v310 = v306[4];
                v311 = v306 + 1;
                if (v310 >= (unint64_t)v305)
                {
                  v311 = v308;
                  v307 = v308;
                }
                v306 = (void *)*v311;
              }
              while (v306);
              if (v307 != v407
                && (v310 >= (unint64_t)v305 ? (v312 = v308) : (v312 = v309), (unint64_t)v305 >= v312[4]))
              {
                if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v374, v298))
                {
                  if (v310 >= (unint64_t)v305) {
                    v329 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v308 + 6);
                  }
                  else {
                    v329 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v309 + 6);
                  }
                  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(v329, (int *)&v423);
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v423, v445);
                  sub_216D0162C((uint64_t)v374, (int *)&v443);
                  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v444, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v423, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v445, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v443, 1);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v443 + 1);
                  sub_21697C414(&v443);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v445 + 1);
                  sub_21697C414(v445);
                  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v444))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v374, v330, v445);
                    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v444, (uint64_t *)v445, v331, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v435);
                    v332 = v445[1];
                    if (v445[1]
                      && atomic_fetch_add_explicit((atomic_uint *volatile)v445[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
                    {
                      (*(void (**)(void *))(*(void *)v332 + 8))(v332);
                    }
                  }
                  else
                  {
                    LODWORD(v445[0]) = 1;
                    v445[1] = 0;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v446);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v446 + 1);
                    *((void *)&v446[0] + 1) = 0;
                    unint64_t v443 = 0;
                    sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v435, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v445, (uint64_t *)&v443);
                    v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C767A08;
                    if ((v443 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v443 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    if ((BYTE8(v446[0]) & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
                    sub_21697C414(v446);
                    if (v445[1]) {
                      sub_216D16E0C((atomic_ullong *)v445[1]);
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v444 + 1);
                  sub_21697C414(&v444);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v423 + 1);
                  sub_21697C414(&v423);
                }
                else
                {
                  if (v310 >= (unint64_t)v305) {
                    v333 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v308 + 6);
                  }
                  else {
                    v333 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v309 + 6);
                  }
                  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v435, v333);
                  if (v310 >= (unint64_t)v305) {
                    v334 = v308;
                  }
                  else {
                    v334 = v309;
                  }
                  uint64_t v335 = v334[9];
                  v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C767760;
                  uint64_t v436 = v335;
                  if ((v335 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v335 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v436 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C767A08;
                }
              }
              else
              {
LABEL_711:
                LODWORD(v445[0]) = 1;
                v445[1] = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v446);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v446 + 1);
                *((void *)&v446[0] + 1) = 0;
                uint64_t v423 = 0;
                sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v435, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v445, &v423);
                v435.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C767A08;
                if ((v423 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v423 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if ((BYTE8(v446[0]) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
                sub_21697C414(v446);
                if (v445[1]) {
                  sub_216D16E0C((atomic_ullong *)v445[1]);
                }
              }
              if (v366) {
                sub_216784EC4(v366);
              }
              if (v435.__r_.__value_.__l.__size_
                && (*(unsigned char *)(v435.__r_.__value_.__l.__size_ + 57) & 8) == 0
                && (*(unsigned int (**)(std::string *))(v435.__r_.__value_.__r.__words[0] + 32))(&v435))
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v445, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v437);
                v445[0] = &unk_26C76DAD0;
                v313 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v313) {
                  v313 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                v314 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v314) {
                  v314 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                int v315 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v466, (const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v435, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v445, (char **)&v425, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v313 + 40), v314);
                pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v445);
                if (v315)
                {
                  v316 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  if (!v316) {
                    v316 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  }
                  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v466, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v425, v316, (uint64_t)v445);
                  v317 = (uint64_t *)sub_216D563F8(v445);
                  v318 = v431;
                  if ((unint64_t)v431 >= v432)
                  {
                    v320 = sub_216973984(&v430, v317);
                  }
                  else
                  {
                    uint64_t v319 = *v317;
                    *(void *)v431 = *v317;
                    if ((v319 & 7) != 0
                      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v319 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                    {
                      *(void *)v318 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    v320 = v318 + 8;
                  }
                  v431 = v320;
                  if ((BYTE8(v446[0]) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  goto LABEL_749;
                }
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v445, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v437);
                v445[0] = &unk_26C76DAD0;
                v321 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v321) {
                  v321 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                v322 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v322) {
                  v322 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                int v323 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v466, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v445, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v321 + 40), v322);
                pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v445);
                if (v323)
                {
                  v324 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  if (!v324) {
                    v324 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  }
                  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v466, v324, (uint64_t)v445);
                  v325 = (uint64_t *)sub_216D563F8(v445);
                  v326 = v431;
                  if ((unint64_t)v431 >= v432)
                  {
                    v328 = sub_216973984(&v430, v325);
                  }
                  else
                  {
                    uint64_t v327 = *v325;
                    *(void *)v431 = *v325;
                    if ((v327 & 7) != 0
                      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v327 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                    {
                      *(void *)v326 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    v328 = v326 + 8;
                  }
                  v431 = v328;
                  if ((BYTE8(v446[0]) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v446[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
LABEL_749:
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v446 + 1);
                  sub_21697C414(v446);
                  if (v445[1]) {
                    sub_216D16E0C((atomic_ullong *)v445[1]);
                  }
                }
              }
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v435);
              if ((v437[24] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v437[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v437[20]);
              sub_21697C414(&v437[16]);
              if (*(void *)&v437[8]) {
                sub_216D16E0C(*(atomic_ullong **)&v437[8]);
              }
              if ((v425 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v425 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v426);
            int v269 = (std::__shared_weak_count *)((char *)v269 + 16);
            char v270 = v369;
            continue;
          }
        }
        if ((v376 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v376 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375 + 1);
        sub_21697C414(&v375);
        if (v374[1]) {
          sub_216D16E0C((atomic_ullong *)v374[1]);
        }
        if (SHIBYTE(v378) < 0) {
          operator delete(v377[0]);
        }
        int v245 = v364 + 2;
        char v246 = v354;
      }
      v445[0] = &v379;
      sub_216787968((void ***)v445);
      char v225 = v346 + 2;
    }
    while (v346 + 2 != (uint64_t *)v345);
  }
  v445[0] = &v382;
  sub_216787968((void ***)v445);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v417);
  if (v422 < 0) {
    operator delete(v421);
  }
  if ((v420 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v420 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v419 + 1);
  sub_21697C414(&v419);
  if (v418) {
    sub_216D16E0C(v418);
  }
  if ((v385 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v385 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v384.__r_.__value_.__r.__words[2] + 1);
  sub_21697C414(&v384.__r_.__value_.__r.__words[2]);
  if (v384.__r_.__value_.__l.__size_) {
    sub_216D16E0C((atomic_ullong *)v384.__r_.__value_.__l.__size_);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v387);
  sub_21697C414(&v386);
  sub_21678A498((uint64_t)&v463, v464);
  v445[0] = &v460;
  sub_21682E488((void ***)v445);
  sub_21718CF08((uint64_t)&v457, v458);
  v445[0] = (char *)&v455 + 8;
  sub_216787968((void ***)v445);
  v445[0] = v454;
  sub_216782F20((void ***)v445);
  sub_21718D658((uint64_t)&v388, v389);
LABEL_838:
  sub_21717A4E4((uint64_t)&v392);
}

void sub_2171788C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  __cxa_guard_abort(&qword_267B96698);
  if (a47) {
    sub_216784EC4(a47);
  }
  sub_216D16AD8((uint64_t)&a55);
  if (a64 < 0) {
    operator delete(__p);
  }
  STACK[0x420] = (unint64_t)&a65;
  sub_216787968((void ***)&STACK[0x420]);
  STACK[0x420] = (unint64_t)&a68;
  sub_216787968((void ***)&STACK[0x420]);
  sub_216EE9BF8((uint64_t)&STACK[0x350]);
  sub_216D16AD8((uint64_t)&a71);
  sub_21697B754(&a72);
  sub_21717A474((uint64_t)&STACK[0x510]);
  sub_21718D658((uint64_t)&STACK[0x200], (void *)STACK[0x208]);
  sub_21717A4E4((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

uint64_t sub_2171799E8(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v7, "Collections");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, (_DWORD *)(a1 + 16));
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v7, "Looks");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, (_DWORD *)(a1 + 24));
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v7, "Materials");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, (_DWORD *)(a1 + 32));
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v7, "NodeGraphs");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, (_DWORD *)(a1 + 40));
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v7, "Shaders");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, (_DWORD *)(a1 + 48));
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 1;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  LODWORD(v7) = 1;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
  uint64_t v11 = 0;
  *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 272), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7) = &unk_26C76DAD0;
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return a1;
}

void sub_217179CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, _DWORD *a15, uint64_t a16, _DWORD *a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,uint64_t a21,atomic_ullong *a22,uint64_t a23,uint64_t a24)
{
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v30);
  sub_21697C414(v29);
  if (a22) {
    sub_216D16E0C(a22);
  }
  unint64_t v33 = *(std::__shared_weak_count **)(v24 + 264);
  if (v33) {
    sub_216784EC4(v33);
  }
  sub_21717A908(v25, *(void **)(v24 + 232));
  sub_21717AA64(v31, *(void **)(v24 + 208));
  sub_21717AB0C(v27, *(void **)(v24 + 184));
  sub_21717AB0C(v26, *(void **)(v24 + 160));
  sub_21715FDF0(v28, *(void **)(v24 + 136));
  sub_21717ABB8(v32, *(void **)(v24 + 112));
  sub_216782F20((void ***)&a21);
  sub_21717ADB4(a16, *(void **)(v24 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v24 + 52));
  sub_21697C414(a15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v24 + 44));
  sub_21697C414(a17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v24 + 36));
  sub_21697C414(a18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v24 + 28));
  sub_21697C414(a19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v24 + 20));
  sub_21697C414(a20);
  unint64_t v34 = *(atomic_uint **)(v24 + 8);
  if (v34)
  {
    if (atomic_fetch_add_explicit(v34 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v34 + 8))(v34);
    }
  }
  _Unwind_Resume(a1);
}

void sub_217179EF4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96608, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96608))
  {
    sub_21717AF14();
    __cxa_guard_release(&qword_267B96608);
  }
}

void sub_217179F58(_Unwind_Exception *a1)
{
}

long long **sub_217179F70(long long **a1, uint64_t a2, unsigned __int8 *a3)
{
  char v4 = sub_2170396E4((void *)(*(void *)a2 + 160), a3);
  if (v4) {
    uint64_t v5 = (long long *)(v4 + 40);
  }
  else {
    uint64_t v5 = sub_21730D998();
  }
  uint64_t v6 = *((unsigned __int8 *)v5 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)v5 + 1);
  }
  if (!v6) {
    uint64_t v5 = sub_21730D998();
  }
  *a1 = v5;
  return a1;
}

void sub_217179FD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_21730D998();
  sub_21717B7F0(v2, (uint64_t)v3, (uint64_t *)&v39);
  char v4 = v39;
  unint64_t v29 = v40;
  if (v39 != v40)
  {
    uint64_t v5 = (uint64_t **)(a2 + 104);
    uint64_t v6 = (_DWORD *)&v38 + 1;
    uint64_t v7 = &v38;
    do
    {
      if (sub_21717B790(0))
      {
        int v10 = (std::string::__raw *)&(*v4)[2];
        if (SHIBYTE((*v4)[2].__r_.__value_.__r.__words[2]) < 0) {
          int v10 = (std::string::__raw *)v10->__words[0];
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Read node graph %s\n", v8, v9, v10);
      }
      uint64_t v11 = *v4;
      uint64_t v12 = (std::__shared_weak_count *)v4[1];
      uint64_t v30 = *v4;
      uint64_t v31 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = sub_21717BBB4(v5, (unint64_t *)&v30);
      char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v14);
      if (v11) {
        char v16 = IsDefined;
      }
      else {
        char v16 = 1;
      }
      if ((v16 & 1) == 0)
      {
        sub_217308F34(v11, &v46);
        if (v46)
        {
          if (sub_21717B790(0))
          {
            int v19 = (void *)(v46 + 48);
            if (*(char *)(v46 + 71) < 0) {
              int v19 = (void *)*v19;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add mtlxNodeDef %s\n", v17, v18, v19);
          }
          int v20 = v7;
          int v21 = v6;
          uint64_t v22 = v5;
          sub_21717BCA4((uint64_t)&v42);
          uint64_t v23 = (void **)v46;
          uint64_t v24 = v47;
          if (v47)
          {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v25 = v43;
          uint64_t v42 = v23;
          uint64_t v43 = v24;
          if (v25) {
            sub_216784EC4(v25);
          }
          if (v24) {
            sub_216784EC4(v24);
          }
          if (v12)
          {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v26 = v45;
          unint64_t v44 = v11;
          uint64_t v45 = v12;
          uint64_t v5 = v22;
          if (v26) {
            sub_216784EC4(v26);
          }
          uint64_t v6 = v21;
          if (v12) {
            sub_216784EC4(v12);
          }
          uint64_t v27 = v47;
          v41[0] = v46;
          v41[1] = v47;
          uint64_t v7 = v20;
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_21717BD14((uint64_t)&v42, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 40), v41);
          if (v27) {
            sub_216784EC4(v27);
          }
          sub_21717BDEC((uint64_t)v13, (uint64_t *)&v42);
          sub_21717BF28((uint64_t)&v42);
        }
        if (v47) {
          sub_216784EC4(v47);
        }
      }
      sub_21717BFDC((uint64_t)v32, (uint64_t)v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v6);
      sub_21697C414(v7);
      sub_21717AD2C((uint64_t)v37, v37[1]);
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
      sub_21697C414(&v34);
      if (v33) {
        sub_216D16E0C(v33);
      }
      if (v31) {
        sub_216784EC4(v31);
      }
      v4 += 2;
    }
    while (v4 != v29);
  }
  uint64_t v42 = (void **)&v39;
  sub_216787968(&v42);
}

void sub_21717A280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  unint64_t v33 = *(std::__shared_weak_count **)(v31 - 96);
  if (v33) {
    sub_216784EC4(v33);
  }
  if (v30) {
    sub_216784EC4(v30);
  }
  a30 = (void **)&a25;
  sub_216787968(&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_21717A2F8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_21717A328(uint64_t a1, uint64_t *a2)
{
  char v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = (void **)*a2;
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21718BA7C(a1, (uint64_t *)&v7, (uint64_t *)&v9);
  sub_21718B9DC(a1, &v9);
  v6[0] = (void **)&v9;
  sub_21682E488(v6);
  if (v4) {
    sub_216784EC4(v4);
  }
  sub_21718BE24(*a2, &v9);
  if (v9)
  {
    sub_2172F3368((uint64_t)v9, &v7);
    if (v7)
    {
      uint64_t v5 = v8;
      v6[0] = v7;
      v6[1] = (void **)&v8->__vftable;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_21717A328(a1, v6);
      if (v5) {
        sub_216784EC4(v5);
      }
    }
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  if (v10) {
    sub_216784EC4(v10);
  }
}

void sub_21717A418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (v15) {
    sub_216784EC4(v15);
  }
  if (a13) {
    sub_216784EC4(a13);
  }
  if (a15) {
    sub_216784EC4(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21717A474(uint64_t a1)
{
  sub_21678A498(a1 + 96, *(char **)(a1 + 104));
  uint64_t v3 = (void **)(a1 + 72);
  sub_21682E488(&v3);
  sub_21718CF08(a1 + 48, *(void **)(a1 + 56));
  uint64_t v3 = (void **)(a1 + 24);
  sub_216787968(&v3);
  uint64_t v3 = (void **)a1;
  sub_216782F20(&v3);
  return a1;
}

uint64_t sub_21717A4E4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(a1 + 272));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 264);
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_21717A908(a1 + 224, *(void **)(a1 + 232));
  sub_21717AA64(a1 + 200, *(void **)(a1 + 208));
  sub_21717AB0C(a1 + 176, *(void **)(a1 + 184));
  sub_21717AB0C(a1 + 152, *(void **)(a1 + 160));
  sub_21715FDF0(a1 + 128, *(void **)(a1 + 136));
  sub_21717ABB8(a1 + 104, *(void **)(a1 + 112));
  uint64_t v5 = (void **)(a1 + 80);
  sub_216782F20(&v5);
  sub_21717ADB4(a1 + 56, *(void **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_21697C414((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(uint64_t *a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (*a1)
  {
    uint64_t v6 = sub_216D24140(a2);
    if (v7 & 1 | (unint64_t)v6)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
      {
        sub_2171799E8((uint64_t)&v17, a2, a3);
        uint64_t v8 = (std::__shared_weak_count *)a1[1];
        v16[0] = *a1;
        v16[1] = (uint64_t)v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_217179FD4(v16, (uint64_t)&v17);
        if (v8) {
          sub_216784EC4(v8);
        }
        uint64_t v10 = *a1;
        int v9 = (std::__shared_weak_count *)a1[1];
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = sub_21730D998();
        sub_21717B7F0(v10, (uint64_t)v11, &v32);
        uint64_t v12 = v32;
        for (uint64_t i = v33; v12 != i; v12 += 16)
        {
          sub_217308F34(*(std::string **)v12, &v30);
          p_data = (void **)&v30->__r_.__value_.__l.__data_;
          if (v31) {
            sub_216784EC4(v31);
          }
          if (!p_data)
          {
            uint64_t v30 = *(std::string **)v12;
            char v15 = *(std::__shared_weak_count **)(v12 + 8);
            uint64_t v31 = v15;
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_217187FA8((uint64_t)&v17, (uint64_t *)&v30, (uint64_t)v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
            sub_21697C414(&v28);
            sub_21717AD2C((uint64_t)v27, v27[1]);
            if ((v26 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
            sub_21697C414(&v24);
            if (v23) {
              sub_216D16E0C(v23);
            }
            if (v31) {
              sub_216784EC4(v31);
            }
          }
        }
        uint64_t v30 = (std::string *)&v32;
        sub_216787968((void ***)&v30);
        if (v9) {
          sub_216784EC4(v9);
        }
        sub_21717A4E4((uint64_t)&v17);
      }
      else
      {
        char v17 = "usdMtlx/reader.cpp";
        int v18 = "UsdMtlxReadNodeGraphs";
        uint64_t v19 = 2762;
        int v20 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(const MaterialX::ConstDocumentPtr &, const Us"
              "dStagePtr &, const SdfPath &)";
        char v21 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid internal prim path");
      }
    }
    else
    {
      char v17 = "usdMtlx/reader.cpp";
      int v18 = "UsdMtlxReadNodeGraphs";
      uint64_t v19 = 2758;
      int v20 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(const MaterialX::ConstDocumentPtr &, const UsdS"
            "tagePtr &, const SdfPath &)";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    }
  }
  else
  {
    char v17 = "usdMtlx/reader.cpp";
    int v18 = "UsdMtlxReadNodeGraphs";
    uint64_t v19 = 2754;
    int v20 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(const MaterialX::ConstDocumentPtr &, const UsdSta"
          "gePtr &, const SdfPath &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid MaterialX document");
  }
}

void sub_21717A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    sub_216784EC4(v4);
  }
  sub_21717A4E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21717A908(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717A908(a1, *a2);
    sub_21717A908(a1, a2[1]);
    sub_21717A964((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717A964(uint64_t a1)
{
  sub_21717A9B8(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_21717A9B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717A9B8(a1, *a2);
    sub_21717A9B8(a1, a2[1]);
    sub_21717AA14((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717AA14(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_21717AA64(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717AA64(a1, *a2);
    sub_21717AA64(a1, a2[1]);
    sub_21717AAC0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717AAC0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_216784EC4(v2);
  }
}

void sub_21717AB0C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717AB0C(a1, *a2);
    sub_21717AB0C(a1, a2[1]);
    sub_21717AB68((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717AB68(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_21717ABB8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717ABB8(a1, *a2);
    sub_21717ABB8(a1, a2[1]);
    sub_21717AC14((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717AC14(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_21697C414((_DWORD *)(a1 + 72));
  sub_21717AD2C(a1 + 48, *(void **)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  uint64_t v3 = *(atomic_ullong **)(a1 + 24);
  if (v3) {
    sub_216D16E0C(v3);
  }
  char v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    sub_216784EC4(v4);
  }
}

uint64_t sub_21717ACB0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  sub_21717AD2C(a1 + 32, *(void **)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_21717AD2C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717AD2C(a1, *a2);
    sub_21717AD2C(a1, a2[1]);
    sub_21717AD88((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717AD88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_21717ADB4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717ADB4(a1, *a2);
    sub_21717ADB4(a1, a2[1]);
    sub_21717AE10((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717AE10(uint64_t a1)
{
  sub_21717AE64(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_21717AE64(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21717AE64(a1, *a2);
    sub_21717AE64(a1, a2[1]);
    sub_21717AEC0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21717AEC0(uint64_t a1)
{
  sub_216812ED4(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_21717AF14()
{
  uint64_t v0 = sub_216779094(&qword_267B96218, "channels");
  sub_216779094(v0 + 3, "cms");
  sub_216779094(&qword_267B96248, "cmsconfig");
  sub_216779094(&qword_267B96260, "collection");
  sub_216779094(&qword_267B96278, "context");
  sub_216779094(&qword_267B96290, "default");
  sub_216779094(&qword_267B962A8, "doc");
  sub_216779094(&qword_267B962C0, "enum");
  sub_216779094(&qword_267B962D8, "enumvalues");
  sub_216779094(&qword_267B962F0, "excludegeom");
  sub_216779094(&qword_267B96308, "geom");
  sub_216779094(&qword_267B96320, "helptext");
  sub_216779094(&qword_267B96338, "includegeom");
  sub_216779094(&qword_267B96350, "includecollection");
  sub_216779094(&qword_267B96368, "inherit");
  sub_216779094(&qword_267B96380, "interfacename");
  sub_216779094(&qword_267B96398, "isdefaultversion");
  sub_216779094(&qword_267B963B0, "look");
  sub_216779094(&qword_267B963C8, "material");
  sub_216779094(&qword_267B963E0, "member");
  sub_216779094(&qword_267B963F8, "nodedef");
  sub_216779094(&qword_267B96410, "nodegraph");
  sub_216779094(&qword_267B96428, "nodename");
  sub_216779094(&qword_267B96440, "node");
  sub_216779094(&qword_267B96458, "output");
  sub_216779094(&qword_267B96470, "semantic");
  sub_216779094(&qword_267B96488, "token");
  sub_216779094(&qword_267B964A0, "type");
  sub_216779094(&qword_267B964B8, "uicolor");
  sub_216779094(&qword_267B964D0, "uifolder");
  sub_216779094(&qword_267B964E8, "uimax");
  sub_216779094(&qword_267B96500, "uimin");
  sub_216779094(&qword_267B96518, "uiname");
  sub_216779094(&qword_267B96530, "value");
  sub_216779094(&qword_267B96548, "valuecurve");
  sub_216779094(&qword_267B96560, "valuerange");
  sub_216779094(&qword_267B96578, "variant");
  sub_216779094(&qword_267B96590, "variantassign");
  sub_216779094(&qword_267B965A8, "variantset");
  sub_216779094(&qword_267B965C0, "version");
  sub_216779094(&qword_267B965D8, "xpos");
  return sub_216779094(qword_267B965F0, "ypos");
}

void sub_21717B274(_Unwind_Exception *exception_object)
{
  if (byte_267B965EF < 0) {
    sub_2173253C8();
  }
  if (byte_267B965D7 < 0) {
    operator delete((void *)qword_267B965C0);
  }
  if (byte_267B965BF < 0) {
    operator delete((void *)qword_267B965A8);
  }
  if (byte_267B965A7 < 0) {
    operator delete((void *)qword_267B96590);
  }
  if (byte_267B9658F < 0) {
    operator delete((void *)qword_267B96578);
  }
  if (byte_267B96577 < 0) {
    operator delete((void *)qword_267B96560);
  }
  if (byte_267B9655F < 0) {
    operator delete((void *)qword_267B96548);
  }
  if (byte_267B96547 < 0) {
    operator delete((void *)qword_267B96530);
  }
  if (byte_267B9652F < 0) {
    operator delete((void *)qword_267B96518);
  }
  if (byte_267B96517 < 0) {
    operator delete((void *)qword_267B96500);
  }
  if (byte_267B964FF < 0) {
    operator delete((void *)qword_267B964E8);
  }
  if (byte_267B964E7 < 0) {
    operator delete((void *)qword_267B964D0);
  }
  if (byte_267B964CF < 0) {
    operator delete((void *)qword_267B964B8);
  }
  if (byte_267B964B7 < 0) {
    operator delete((void *)qword_267B964A0);
  }
  if (byte_267B9649F < 0) {
    operator delete((void *)qword_267B96488);
  }
  if (byte_267B96487 < 0) {
    operator delete((void *)qword_267B96470);
  }
  if (byte_267B9646F < 0) {
    operator delete((void *)qword_267B96458);
  }
  if (byte_267B96457 < 0) {
    operator delete((void *)qword_267B96440);
  }
  if (byte_267B9643F < 0) {
    operator delete((void *)qword_267B96428);
  }
  if (byte_267B96427 < 0) {
    operator delete((void *)qword_267B96410);
  }
  if (byte_267B9640F < 0) {
    operator delete((void *)qword_267B963F8);
  }
  if (byte_267B963F7 < 0) {
    operator delete((void *)qword_267B963E0);
  }
  if (byte_267B963DF < 0) {
    operator delete((void *)qword_267B963C8);
  }
  if (byte_267B963C7 < 0) {
    operator delete((void *)qword_267B963B0);
  }
  if (byte_267B963AF < 0) {
    operator delete((void *)qword_267B96398);
  }
  if (byte_267B96397 < 0) {
    operator delete((void *)qword_267B96380);
  }
  if (byte_267B9637F < 0) {
    operator delete((void *)qword_267B96368);
  }
  if (byte_267B96367 < 0) {
    operator delete((void *)qword_267B96350);
  }
  if (byte_267B9634F < 0) {
    operator delete((void *)qword_267B96338);
  }
  if (byte_267B96337 < 0) {
    operator delete((void *)qword_267B96320);
  }
  if (byte_267B9631F < 0) {
    operator delete((void *)qword_267B96308);
  }
  if (byte_267B96307 < 0) {
    operator delete((void *)qword_267B962F0);
  }
  if (byte_267B962EF < 0) {
    operator delete((void *)qword_267B962D8);
  }
  if (byte_267B962D7 < 0) {
    operator delete((void *)qword_267B962C0);
  }
  if (byte_267B962BF < 0) {
    operator delete((void *)qword_267B962A8);
  }
  if (byte_267B962A7 < 0) {
    operator delete((void *)qword_267B96290);
  }
  if (byte_267B9628F < 0) {
    operator delete((void *)qword_267B96278);
  }
  if (byte_267B96277 < 0) {
    operator delete((void *)qword_267B96260);
  }
  if (byte_267B9625F < 0) {
    operator delete((void *)qword_267B96248);
  }
  if (byte_267B96247 < 0) {
    operator delete((void *)qword_267B96230);
  }
  if (byte_267B9622F < 0) {
    operator delete((void *)qword_267B96218);
  }
  _Unwind_Resume(exception_object);
}

void sub_21717B690()
{
}

void sub_21717B698()
{
}

void sub_21717B6A0()
{
}

void sub_21717B6A8()
{
}

void sub_21717B6B0()
{
}

void sub_21717B6B8()
{
}

void sub_21717B6C0()
{
}

void sub_21717B6C8()
{
}

void sub_21717B6D0()
{
}

void sub_21717B6D8()
{
}

void sub_21717B6E0()
{
}

void sub_21717B6E8()
{
}

void sub_21717B6F0()
{
}

void sub_21717B6F8()
{
}

void sub_21717B700()
{
}

void sub_21717B708()
{
}

void sub_21717B710()
{
}

void sub_21717B718()
{
}

void sub_21717B720()
{
}

void sub_21717B728()
{
}

void sub_21717B730()
{
}

void sub_21717B738()
{
}

void sub_21717B740()
{
}

void sub_21717B748()
{
}

void sub_21717B750()
{
}

void sub_21717B758()
{
}

void sub_21717B760()
{
}

void sub_21717B768()
{
}

void sub_21717B770()
{
}

void sub_21717B778()
{
}

void sub_21717B780()
{
}

void sub_21717B788()
{
}

BOOL sub_21717B790(int a1)
{
  uint64_t v2 = sub_217164608();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_217164608();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "USDMTLX_READER");
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_21717B7F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v3 = *(uint64_t **)(a1 + 136);
  char v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      char v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F3618(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      uint64_t v13 = (const void **)(v8 + 24);
      uint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        uint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_21717B954(a3, &v15);
    goto LABEL_22;
  }
}

void sub_21717B91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void **sub_21717B954(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_21717BA70(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_21717BA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21717BA70(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21717BAE8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21717BAE8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21717BB7C((uint64_t)v12);
  return v10;
}

uint64_t sub_21717BB7C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t *sub_21717BBB4(uint64_t **a1, unint64_t *a2)
{
  uint64_t v5 = a1 + 1;
  char v4 = a1[1];
  unint64_t v6 = *a2;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        unint64_t v8 = v4[4];
        if (v6 >= v8) {
          break;
        }
        char v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        break;
      }
      char v4 = v7[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_9;
      }
    }
    uint64_t v10 = (uint64_t *)v7;
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    long long v9 = (uint64_t *)operator new(0x70uLL);
    uint64_t v10 = v9;
    uint64_t v11 = a2[1];
    _DWORD v9[4] = v6;
    v9[5] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    sub_21717C0E0((uint64_t)(v9 + 6));
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v7;
    std::__shared_weak_count *v5 = v10;
    uint64_t v12 = (uint64_t *)**a1;
    char v13 = v10;
    if (v12)
    {
      *a1 = v12;
      char v13 = *v5;
    }
    sub_21677B3B0(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10 + 6;
}

uint64_t sub_21717BCA4(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 52));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  return a1;
}

_DWORD *sub_21717BD14(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, void *a4)
{
  if (*a4) {
    sub_21717C1A8(*a4 + 48, (uint64_t)&v8);
  }
  else {
    uint64_t v8 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8, &v9);
  sub_21717C150(a1, a2, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  uint64_t result = sub_21697C414(&v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_21717BDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_21717BDEC(uint64_t a1, uint64_t *a2)
{
  sub_21717C298(a2, (uint64_t **)(a1 + 32), (uint64_t)&v7);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v3))
  {
    *(_DWORD *)a1 = v7;
    char v4 = v8;
    if (v8) {
      atomic_fetch_add_explicit(v8 + 6, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = *(atomic_ullong **)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    if (v5) {
      sub_216D16E0C(v5);
    }
    sub_2169C487C((int *)(a1 + 16), &v9);
    sub_2169C48D4((int *)(a1 + 20), &v10);
    sub_2168D2318((void *)(a1 + 24), &v11);
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
    sub_21697DE94((int *)(a1 + 56), (int *)&v6);
    sub_21697DEEC((int *)(a1 + 60), (int *)&v6 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
    sub_21697C414(&v6);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_21717BF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21717BF28(uint64_t a1)
{
  sub_217184A54(a1 + 104, *(void **)(a1 + 112));
  sub_217184AB0(a1 + 80, *(void **)(a1 + 88));
  sub_217184B0C(a1 + 56, *(void **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_21697C414((_DWORD *)(a1 + 48));
  uint64_t v2 = *(atomic_uint **)(a1 + 40);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    sub_216784EC4(v3);
  }
  char v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    sub_216784EC4(v4);
  }
  return a1;
}

uint64_t sub_21717BFDC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_217184B68((uint64_t *)(a1 + 32), (const void ***)(a2 + 32));
  sub_216981010((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  sub_21698105C((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  return a1;
}

void sub_21717C09C(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 24);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  uint64_t v6 = *(atomic_ullong **)(v1 + 8);
  if (v6) {
    sub_216D16E0C(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21717C0E0(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 60));
  return a1;
}

int *sub_21717C150(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 32) = *(void *)a2;
  sub_2168CD2FC((atomic_uint **)(a1 + 40), (atomic_uint **)(a2 + 8));
  sub_2169C487C((int *)(a1 + 48), a3);

  return sub_2169C48D4((int *)(a1 + 52), a3 + 1);
}

void sub_21717C1A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4 = std::string::find((const std::string *)a1, 58, 0);
  if (v4 == -1)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    std::string::size_type v5 = v4;
    if (*(char *)(a1 + 23) < 0) {
      sub_216778F24(&__p, *(void **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __p = *(std::string *)a1;
    }
    std::string::replace(&__p, v5, 1uLL, "__");
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_21717C27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21717C298(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v200 = *MEMORY[0x263EF8340];
  std::string::size_type v4 = a1 + 4;
  std::string::size_type v5 = sub_216D24140(a1 + 4);
  if (!(v6 & 1 | (unint64_t)v5))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 760;
    long long v198 = "UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    char v199 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__str, "_usdStage", 0) & 1) == 0) {
      goto LABEL_401;
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6))
    || !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6)))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 763;
    long long v198 = "UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    char v199 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__str, "_usdPath.IsAbsolutePath() && _usdPath.IsPrimPath()", 0) & 1) == 0)
    {
LABEL_401:
      sub_217015D2C(a3);
      return;
    }
  }
  uint64_t v7 = a1[2];
  uint64_t v151 = a1 + 2;
  uint64_t v8 = sub_21730D998();
  BOOL v9 = sub_2171685A4(v7, (unsigned __int8 *)v8);
  int data = 1;
  uint64_t v165 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v166);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v167);
  unint64_t v168 = 0;
  if (!v9)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v192);
    sub_216D16CFC((uint64_t)&__str, (uint64_t *)&v193, &v194);
    int data = (int)__str.__r_.__value_.__l.__data_;
    std::string::size_type size = (atomic_ullong *)__str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    uint64_t v165 = size;
    sub_21697DE94(&v166, (int *)&__str.__r_.__value_.__r.__words[2]);
    sub_21697DEEC(&v167, (int *)&__str.__r_.__value_.__r.__words[2] + 1);
    if ((v168 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v168 = (unint64_t)v198;
    long long v198 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
    if (__str.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v192);
LABEL_53:
    BOOL v148 = v9;
    uint64_t v27 = *v151;
    int v28 = sub_21730D998();
    sub_217169D68(v27, (uint64_t)v28, &v157);
    unint64_t v153 = (void *)v157;
    uint64_t v152 = v158;
    while (v153 != v152)
    {
      sub_217179EF4();
      sub_217179F70((long long **)&__str, (uint64_t)v153, (unsigned __int8 *)&qword_267B964A0);
      int v29 = (uint64_t *)__str.__r_.__value_.__r.__words[0];
      if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        uint64_t v31 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
        if (v31 == 8 && **(void **)__str.__r_.__value_.__l.__data_ == 0x6C6169726574616DLL) {
          goto LABEL_258;
        }
        if (v31 != 13) {
          goto LABEL_69;
        }
        int v29 = *(uint64_t **)__str.__r_.__value_.__l.__data_;
      }
      else
      {
        int v30 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
        if (v30 == 8)
        {
          if (*(void *)__str.__r_.__value_.__l.__data_ != 0x6C6169726574616DLL) {
            goto LABEL_69;
          }
          goto LABEL_258;
        }
        if (v30 != 13) {
          goto LABEL_69;
        }
      }
      uint64_t v32 = *v29;
      uint64_t v33 = *(uint64_t *)((char *)v29 + 5);
      BOOL v34 = v32 == 0x7365636166727573 && v33 == 0x7265646168736563;
      if (!v34)
      {
LABEL_69:
        uint64_t v35 = v153[1];
        *(void *)&long long v156 = *v153;
        *((void *)&v156 + 1) = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
        }
        sub_217181260((uint64_t *)&v156, (uint64_t *)&__str);
        if (__str.__r_.__value_.__r.__words[0]) {
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v186);
        }
        else {
          std::string::size_type v186 = 0;
        }
        if (__str.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
        if (!v186 && *a1) {
          goto LABEL_256;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&data, v36, &v184);
        sub_217181260((uint64_t *)&v156, (uint64_t *)&v183);
        LODWORD(__str.__r_.__value_.__l.__data_) = 1;
        __str.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str.__r_.__value_.__r.__words[2]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
        long long v198 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v192, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__str);
        uint64_t v196 = 0;
        unint64_t v192 = (std::string *)off_26C76D8C8;
        if ((v198 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
        sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
        if (__str.__r_.__value_.__l.__size_) {
          sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
        }
        uint64_t v37 = v183;
        if (!(void)v183) {
          goto LABEL_140;
        }
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v183;
        if (*((void *)&v183 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v183 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t SourceURI = pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI((uint64_t *)&__str);
        if (*(char *)(SourceURI + 23) < 0)
        {
          sub_216778F24(&__dst, *(void **)SourceURI, *(void *)(SourceURI + 8));
        }
        else
        {
          long long v39 = *(_OWORD *)SourceURI;
          v191[0] = *(void *)(SourceURI + 16);
          long long __dst = v39;
        }
        if (__str.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
        if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)&__dst))
        {
          uint64_t v40 = *(std::__shared_weak_count **)(v37 + 232);
          if (v40 && (uint64_t v40 = std::__shared_weak_count::lock(v40)) != 0) {
            std::string::size_type v41 = *(void *)(v37 + 224);
          }
          else {
            std::string::size_type v41 = 0;
          }
          v189.__r_.__value_.__r.__words[0] = v41;
          v189.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
          uint64_t v42 = pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI((uint64_t *)&v189);
          if (*(char *)(v42 + 23) < 0)
          {
            sub_216778F24(&__str, *(void **)v42, *(void *)(v42 + 8));
          }
          else
          {
            long long v43 = *(_OWORD *)v42;
            __str.__r_.__value_.__r.__words[2] = *(void *)(v42 + 16);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v43;
          }
          if (v189.__r_.__value_.__l.__size_) {
            sub_216784EC4((std::__shared_weak_count *)v189.__r_.__value_.__l.__size_);
          }
          std::string::size_type v44 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            std::string::size_type v44 = __str.__r_.__value_.__l.__size_;
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v44)
          {
            uint64_t v46 = (unsigned __int8 *)p_str + v44;
            unint64_t v47 = p_str;
            unint64_t v48 = (std::string *)v46;
            do
            {
              uint64_t v49 = v47;
              uint64_t v50 = (unsigned __int8 *)v47;
              while (1)
              {
                int v51 = *v50++;
                if (v51 == 47) {
                  break;
                }
                uint64_t v49 = (std::string *)v50;
                if (v50 == v46)
                {
                  uint64_t v49 = v48;
                  goto LABEL_110;
                }
              }
              unint64_t v47 = (std::string *)((char *)&v49->__r_.__value_.__l.__data_ + 1);
              unint64_t v48 = v49;
            }
            while (v50 != v46);
LABEL_110:
            if (v49 != (std::string *)v46)
            {
              int64_t v52 = (char *)v49 - (char *)p_str;
              if (v52 != -1)
              {
                std::string::basic_string(&v189, &__str, 0, v52 + 1, (std::allocator<char> *)&v187);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                std::string __str = v189;
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&__str.__r_.__value_.__l.__data_, (const void **)&__dst, (uint64_t)&v187);
          pxrInternal__aapl__pxrReserved__::TfNormPath(&v189, &v187, 0);
          if (SHIBYTE(v191[0]) < 0) {
            operator delete((void *)__dst);
          }
          long long __dst = *(_OWORD *)&v189.__r_.__value_.__l.__data_;
          v191[0] = *((void *)&v189.__r_.__value_.__l + 2);
          *((unsigned char *)&v189.__r_.__value_.__s + 23) = 0;
          v189.__r_.__value_.__s.__data_[0] = 0;
          if (v188 < 0) {
            operator delete((void *)v187);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96640, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B96640))
        {
          qword_267B96638 = 0;
          qword_267B96630 = 0;
          qword_267B96628 = (uint64_t)&qword_267B96630;
          __cxa_atexit((void (*)(void *))sub_217096E20, &qword_267B96628, &dword_216758000);
          __cxa_guard_release(&qword_267B96640);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96660, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267B96660))
        {
          uint64_t v100 = sub_216779094(&__str, "");
          pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)v100, &v189);
          sub_2172E13E4((uint64_t)v189.__r_.__value_.__l.__data_, (uint64_t)&unk_267B96648);
          if (v189.__r_.__value_.__l.__size_) {
            sub_216784EC4((std::__shared_weak_count *)v189.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          __cxa_atexit((void (*)(void *))sub_217096E20, &unk_267B96648, &dword_216758000);
          __cxa_guard_release(&qword_267B96660);
        }
        if ((_UNKNOWN *)sub_21678C2D8((uint64_t)&unk_267B96648, (const void **)&__dst) == &unk_267B96650)
        {
          unint64_t v54 = (std::string *)v183;
          uint64_t v55 = (const void **)(v183 + 48);
          if (sub_217183070((void *)qword_267B96628, &qword_267B96630, (unsigned __int8 **)(v183 + 48)) == &qword_267B96630)
          {
            long long v74 = sub_21730D998();
            sub_2172DF0A4(v54, (uint64_t)v74, (uint64_t *)&__str);
            uint64_t v76 = __str.__r_.__value_.__r.__words[0];
            if (!__str.__r_.__value_.__r.__words[0]
              || (uint64_t v77 = sub_21730D998(), !sub_2171685A4(v76, (unsigned __int8 *)v77)))
            {
              if (__str.__r_.__value_.__l.__size_) {
                sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
              }
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_IsLocalCustomNode";
              __str.__r_.__value_.__r.__words[2] = 883;
              long long v198 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_IsLocalCustomNode"
                     "(const mx::ConstNodeDefPtr &)";
              char v199 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Locally defined custom nodes without nodegraph implementations are not currently supported.", v75);
              goto LABEL_124;
            }
            sub_21680EE0C((uint64_t **)&qword_267B96628, v55, (uint64_t)v55);
            if (__str.__r_.__value_.__l.__size_) {
              sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
            }
          }
          int v53 = 1;
        }
        else
        {
LABEL_124:
          int v53 = 0;
        }
        if (SHIBYTE(v191[0]) < 0)
        {
          operator delete((void *)__dst);
          if (!v53) {
            goto LABEL_140;
          }
LABEL_129:
          if (sub_21717B790(0))
          {
            float32x4_t v56 = (void *)(v156 + 48);
            if (*(char *)(v156 + 71) < 0) {
              float32x4_t v56 = (void *)*v56;
            }
            int v57 = (void *)(v183 + 48);
            if (*(char *)(v183 + 71) < 0) {
              int v57 = (void *)*v57;
            }
            sub_216D0162C((uint64_t)&data, (int *)&__str);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Processing custom node (%s) of def (%s) to be added alongside nodegraph (%s).\n", v59, v60, v56, v57, Text);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
            sub_21697C414(&__str);
          }
          sub_216D6B1F8((uint64_t)&data, (uint64_t)&__str);
          sub_216D0162C((uint64_t)&__str, (int *)&__dst);
          long long v61 = v183;
          if (*((void *)&v183 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v183 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          if ((void)v61) {
            sub_21717C1A8(v61 + 48, (uint64_t)&v189);
          }
          else {
            v189.__r_.__value_.__r.__words[0] = 0;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v189, &v187);
          if ((v189.__r_.__value_.__s.__data_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v189.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (*((void *)&v61 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v61 + 1));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst + 1);
          sub_21697C414(&__dst);
          if ((v198 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
          if (__str.__r_.__value_.__l.__size_) {
            sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get(&v184, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__dst);
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&__dst, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__str);
          uint64_t v69 = (atomic_ullong *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 48), 1uLL, memory_order_relaxed);
          }
          uint64_t v70 = v193;
          unint64_t v193 = v69;
          if (v70) {
            sub_216D16E0C(v70);
          }
          sub_2169C487C(&v194, &__str.__r_.__value_.__r.__words[2]);
          sub_2169C48D4(&v195, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          sub_2168D2318(&v196, &v198);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__str);
          uint64_t v72 = sub_216D16CFC(v71, (uint64_t *)&__dst + 1, v191);
          long long v73 = (std::__shared_weak_count *)*((void *)&v156 + 1);
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v156;
          if (*((void *)&v156 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          sub_21717E558(v72, (uint64_t)&v189);
          if (v73) {
            sub_216784EC4(v73);
          }
          if ((v198 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
          if (__str.__r_.__value_.__l.__size_) {
            sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&__dst);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v187 + 1);
          goto LABEL_207;
        }
        if (v53) {
          goto LABEL_129;
        }
LABEL_140:
        if (sub_21717B790(0))
        {
          uint64_t v62 = (void *)(v156 + 48);
          if (*(char *)(v156 + 71) < 0) {
            uint64_t v62 = (void *)*v62;
          }
          sub_216D0162C((uint64_t)&data, (int *)&__str);
          uint64_t v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Processing shader node (%s) to be added under parent (%s).\n", v64, v65, v62, v63);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
          sub_21697C414(&__str);
        }
        sub_216D0162C((uint64_t)&data, (int *)&__str);
        long long v66 = v156;
        if (*((void *)&v156 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if ((void)v66) {
          sub_21717C1A8(v66 + 48, (uint64_t)&__dst);
        }
        else {
          *(void *)&long long __dst = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__dst, &v187);
        if ((__dst & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__dst & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (*((void *)&v66 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v66 + 1));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
        sub_21697C414(&__str);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(&v184, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__dst);
        std::string::size_type v67 = v186;
        if (!v186) {
          goto LABEL_194;
        }
        if ((v186 & 7) != 0)
        {
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)v67 &= 0xFFFFFFFFFFFFFFF8; {
          __str.__r_.__value_.__r.__words[0] = v67;
          }
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)&off_26C750C70 + 1;
          if ((v67 & 7) != 0)
          {
            char v68 = 0;
            if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)__str.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8; {
LABEL_188:
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__dst, (std::type_info *)&__str, 0, (uint64_t)&v178);
            if ((v182 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v181);
            sub_21697C414(&v180);
            if (v179) {
              sub_216D16E0C((atomic_ullong *)v179);
            }
            sub_2168EE084((uint64_t)&__str);
            if ((v68 & 1) == 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
LABEL_194:
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__dst, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__str);
            unint64_t v78 = (atomic_ullong *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 48), 1uLL, memory_order_relaxed);
            }
            unint64_t v79 = v193;
            unint64_t v193 = v78;
            if (v79) {
              sub_216D16E0C(v79);
            }
            sub_2169C487C(&v194, &__str.__r_.__value_.__r.__words[2]);
            sub_2169C48D4(&v195, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
            sub_2168D2318(&v196, &v198);
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__str);
            uint64_t v81 = sub_216D16CFC(v80, (uint64_t *)&__dst + 1, v191);
            uint64_t v82 = (std::__shared_weak_count *)*((void *)&v156 + 1);
            *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v156;
            if (*((void *)&v156 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            sub_21717E558(v81, (uint64_t)&v189);
            if (v82) {
              sub_216784EC4(v82);
            }
            if ((v198 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
            sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
            if (__str.__r_.__value_.__l.__size_) {
              sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__dst);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v187 + 1);
LABEL_207:
            sub_21697C414(&v187);
            uint64_t v83 = v156;
            unint64_t v84 = sub_21730D998();
            sub_21717EBF8(v83, (uint64_t)v84, (uint64_t *)&__str);
            std::string::size_type v86 = __str.__r_.__value_.__l.__size_;
            for (uint64_t i = (uint64_t *)__str.__r_.__value_.__r.__words[0]; i != (uint64_t *)v86; i += 2)
            {
              uint64_t v87 = *i;
              unint64_t v88 = (std::__shared_weak_count *)i[1];
              if (v88)
              {
                atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
                *((void *)&__dst + 1) = v88;
                atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                *((void *)&__dst + 1) = 0;
              }
              *(void *)&long long __dst = v87;
              sub_21717ED5C((uint64_t)a1, (unint64_t *)&__dst, (uint64_t)&v192, 0, (uint64_t)&v173);
              if ((v177 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v176);
              sub_21697C414(&v175);
              if (v174) {
                sub_216D16E0C(v174);
              }
              if (*((void *)&__dst + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&__dst + 1));
              }
              if (v88) {
                sub_216784EC4(v88);
              }
            }
            *(void *)&long long __dst = &__str;
            sub_216787968((void ***)&__dst);
            if ((void)v183)
            {
              sub_21717E884((uint64_t *)&v183, (uint64_t *)&__str);
              std::string::size_type v154 = __str.__r_.__value_.__l.__size_;
              for (uint64_t j = (uint64_t *)__str.__r_.__value_.__r.__words[0]; j != (uint64_t *)v154; j += 2)
              {
                uint64_t v92 = *j;
                uint64_t v91 = (std::__shared_weak_count *)j[1];
                if (v91) {
                  atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                unint64_t v93 = sub_21730D998();
                sub_21717FD64(v92, (uint64_t)v93, (uint64_t *)&__dst);
                unint64_t v94 = (std::string::size_type *)*((void *)&__dst + 1);
                for (int k = (std::string::size_type *)__dst; k != v94; k += 2)
                {
                  std::string::size_type v96 = *k;
                  uint64_t v97 = (std::__shared_weak_count *)k[1];
                  if (v97)
                  {
                    atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v189.__r_.__value_.__r.__words[0] = v96;
                  v189.__r_.__value_.__l.__size_ = (std::string::size_type)v97;
                  long long v187 = v156;
                  if (*((void *)&v156 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  sub_2171826D0((uint64_t)a1, (uint64_t *)&v189, (uint64_t *)&v187, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v192, (uint64_t)&v169);
                  if ((v172 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v171);
                  sub_21697C414(&v170);
                  if (*((void *)&v169 + 1)) {
                    sub_216D16E0C(*((atomic_ullong **)&v169 + 1));
                  }
                  if (*((void *)&v187 + 1)) {
                    sub_216784EC4(*((std::__shared_weak_count **)&v187 + 1));
                  }
                  if (v189.__r_.__value_.__l.__size_) {
                    sub_216784EC4((std::__shared_weak_count *)v189.__r_.__value_.__l.__size_);
                  }
                  if (v97) {
                    sub_216784EC4(v97);
                  }
                }
                v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                sub_216787968((void ***)&v189);
                if (v91) {
                  sub_216784EC4(v91);
                }
              }
              *(void *)&long long __dst = &__str;
              sub_216787968((void ***)&__dst);
            }
            else
            {
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddNode";
              __str.__r_.__value_.__r.__words[2] = 955;
              long long v198 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_AddNode(const mx:"
                     ":ConstNodePtr &, const UsdPrim &)";
              char v199 = 0;
              unint64_t v98 = (void *)(v156 + 48);
              if (*(char *)(v156 + 71) < 0) {
                unint64_t v98 = (void *)*v98;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Unable to find the nodedef for '%s' node, outputs not added.", v89, v98);
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v192);
            if (*((void *)&v183 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v183 + 1));
            }
            uint64_t v99 = v185;
            if (v185
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v185 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
            }
            if ((v186 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
LABEL_256:
            if (*((void *)&v156 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v156 + 1));
            }
            goto LABEL_258;
          }
        }
        else
        {
          __str.__r_.__value_.__r.__words[0] = v186;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)&off_26C750C70 + 1;
        }
        char v68 = 1;
        goto LABEL_188;
      }
LABEL_258:
      v153 += 2;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
    sub_216787968((void ***)&__str);
    uint64_t v101 = (uint64_t *)a1[10];
    if (v101 != a1 + 11)
    {
      do
      {
        unint64_t v103 = (long long *)v101[4];
        int v102 = (std::__shared_weak_count *)v101[5];
        unint64_t v178 = v103;
        unint64_t v179 = v102;
        if (v102) {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_217179EF4();
        sub_217179F70((long long **)&v173, (uint64_t)&v178, (unsigned __int8 *)&qword_267B96428);
        if (*((char *)v173 + 23) < 0)
        {
          if (!v173[1]) {
            goto LABEL_310;
          }
        }
        else if (!*((unsigned char *)v173 + 23))
        {
          goto LABEL_310;
        }
        uint64_t v104 = sub_21678C2D8((uint64_t)(a1 + 13), (const void **)v173);
        uint64_t v105 = v104;
        if (a1 + 14 != (uint64_t *)v104)
        {
          uint64_t v106 = *(void *)(v104 + 56);
          if ((unint64_t)(*(void *)(v104 + 64) - v106) < 0x21)
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
            if (v102)
            {
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v106 = *(void *)(v104 + 56);
            }
            sub_21718360C((uint64_t *)&__str, v106, (uint64_t)(v101 + 6));
            if (v102) {
              sub_216784EC4(v102);
            }
            goto LABEL_310;
          }
          LODWORD(__str.__r_.__value_.__l.__data_) = 3;
          __str.__r_.__value_.__l.__size_ = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str.__r_.__value_.__r.__words[2]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          long long v198 = 0;
          sub_217179EF4();
          sub_217179F70((long long **)&v192, (uint64_t)&v178, (unsigned __int8 *)&qword_267B96458);
          if (SHIBYTE(v192->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v192->__r_.__value_.__l.__size_)
            {
LABEL_302:
              uint64_t v115 = v179;
              unint64_t v192 = (std::string *)v178;
              unint64_t v193 = (atomic_ullong *)v179;
              if (v179) {
                atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_21718360C((uint64_t *)&v192, (uint64_t)&__str, (uint64_t)(v101 + 6));
              if (v115) {
                sub_216784EC4(v115);
              }
              if ((v198 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
              sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__l.__size_) {
                sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
              }
              goto LABEL_310;
            }
          }
          else if (!*((unsigned char *)&v192->__r_.__value_.__s + 23))
          {
            goto LABEL_302;
          }
          uint64_t v109 = *(void *)(v105 + 56);
          uint64_t v110 = *(void *)(v105 + 64);
          while (v109 != v110)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v109, (uint64_t)&v169);
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__dst);
            uint64_t v111 = v169;
            uint64_t v112 = (atomic_uint *)(__dst & 0xFFFFFFFFFFFFFFF8);
            if ((__dst & 7) != 0) {
              atomic_fetch_add_explicit(v112, 0xFFFFFFFE, memory_order_release);
            }
            if ((v169 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v169 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v111 & 0xFFFFFFFFFFFFFFF8) == v112)
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v109;
              std::string::size_type v113 = *(void *)(v109 + 8);
              if (v113) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 48), 1uLL, memory_order_relaxed);
              }
              unint64_t v114 = (atomic_ullong *)__str.__r_.__value_.__l.__size_;
              __str.__r_.__value_.__l.__size_ = v113;
              if (v114) {
                sub_216D16E0C(v114);
              }
              sub_2169C487C((int *)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v109 + 16));
              sub_2169C48D4((int *)&__str.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v109 + 20));
              sub_2168D2318(&v198, (void *)(v109 + 24));
              goto LABEL_302;
            }
            v109 += 32;
          }
          goto LABEL_302;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
        __str.__r_.__value_.__r.__words[2] = 1081;
        long long v198 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::"
               "ConstPortElementPtr &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
        char v199 = 0;
        sub_216D0162C((uint64_t)(v101 + 6), (int *)&v192);
        long long v107 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v192);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Output for <%s> missing", v108, v107);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v192 + 1);
        sub_21697C414(&v192);
LABEL_310:
        if (v179) {
          sub_216784EC4(v179);
        }
        uint64_t v116 = (uint64_t *)v101[1];
        if (v116)
        {
          do
          {
            uint64_t v117 = v116;
            uint64_t v116 = (uint64_t *)*v116;
          }
          while (v116);
        }
        else
        {
          do
          {
            uint64_t v117 = (uint64_t *)v101[2];
            BOOL v34 = *v117 == (void)v101;
            uint64_t v101 = v117;
          }
          while (!v34);
        }
        uint64_t v101 = v117;
      }
      while (v117 != a1 + 11);
    }
    if (v148)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v178, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&data);
      uint64_t v182 = 0;
      unint64_t v178 = (long long *)off_26C76D8C8;
      uint64_t v118 = *v151;
      unint64_t v119 = sub_21730D998();
      sub_21717FD64(v118, (uint64_t)v119, (uint64_t *)&v173);
      uint64_t v120 = v173;
      uint64_t v121 = v174;
      while (v120 != v121)
      {
        std::string::size_type v122 = *v120;
        unint64_t v123 = (std::__shared_weak_count *)v120[1];
        *(void *)&long long __dst = *v120;
        *((void *)&__dst + 1) = v123;
        if (v123)
        {
          atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string::size_type v124 = v120[1];
          v189.__r_.__value_.__r.__words[0] = *v120;
          v189.__r_.__value_.__l.__size_ = v124;
          if (v124) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v122;
        }
        sub_2171826D0((uint64_t)a1, (uint64_t *)&v189, v151, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v178, (uint64_t)&v192);
        sub_217179EF4();
        sub_217179F70((long long **)&v187, (uint64_t)&__dst, (unsigned __int8 *)&qword_267B96428);
        if (*(char *)(v187 + 23) < 0)
        {
          if (!*(void *)(v187 + 8)) {
            goto LABEL_360;
          }
        }
        else if (!*(unsigned char *)(v187 + 23))
        {
          goto LABEL_360;
        }
        uint64_t v125 = sub_21678C2D8((uint64_t)(a1 + 13), (const void **)v187);
        uint64_t v126 = v125;
        if (a1 + 14 != (uint64_t *)v125)
        {
          uint64_t v127 = *(void *)(v125 + 56);
          if ((unint64_t)(*(void *)(v125 + 64) - v127) < 0x21)
          {
            __str.__r_.__value_.__r.__words[0] = v122;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)v123;
            if (v123)
            {
              atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v127 = *(void *)(v125 + 56);
            }
            sub_217183E34((uint64_t *)&__str, v127, (uint64_t)&v192);
            if (v123) {
              sub_216784EC4(v123);
            }
            goto LABEL_360;
          }
          LODWORD(__str.__r_.__value_.__l.__data_) = 3;
          __str.__r_.__value_.__l.__size_ = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str.__r_.__value_.__r.__words[2]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          long long v198 = 0;
          sub_217179EF4();
          sub_217179F70((long long **)&v169, (uint64_t)&__dst, (unsigned __int8 *)&qword_267B96458);
          if (*(char *)(v169 + 23) < 0)
          {
            if (!*(void *)(v169 + 8))
            {
LABEL_352:
              int v136 = (std::__shared_weak_count *)*((void *)&__dst + 1);
              long long v169 = __dst;
              if (*((void *)&__dst + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 1uLL, memory_order_relaxed);
              }
              sub_217183E34((uint64_t *)&v169, (uint64_t)&__str, (uint64_t)&v192);
              if (v136) {
                sub_216784EC4(v136);
              }
              if ((v198 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
              sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__l.__size_) {
                sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
              }
              goto LABEL_360;
            }
          }
          else if (!*(unsigned char *)(v169 + 23))
          {
            goto LABEL_352;
          }
          uint64_t v131 = *(void *)(v126 + 56);
          uint64_t v130 = *(void *)(v126 + 64);
          while (v131 != v130)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v131, (uint64_t)&v157);
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v184);
            uint64_t v132 = v157;
            unint64_t v133 = (atomic_uint *)(v184 & 0xFFFFFFFFFFFFFFF8);
            if ((v184 & 7) != 0) {
              atomic_fetch_add_explicit(v133, 0xFFFFFFFE, memory_order_release);
            }
            if ((v157 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v132 & 0xFFFFFFFFFFFFFFF8) == v133)
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v131;
              std::string::size_type v134 = *(void *)(v131 + 8);
              if (v134) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 48), 1uLL, memory_order_relaxed);
              }
              long long v135 = (atomic_ullong *)__str.__r_.__value_.__l.__size_;
              __str.__r_.__value_.__l.__size_ = v134;
              if (v135) {
                sub_216D16E0C(v135);
              }
              sub_2169C487C((int *)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v131 + 16));
              sub_2169C48D4((int *)&__str.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v131 + 20));
              sub_2168D2318(&v198, (void *)(v131 + 24));
              goto LABEL_352;
            }
            v131 += 32;
          }
          goto LABEL_352;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
        __str.__r_.__value_.__r.__words[2] = 1081;
        long long v198 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::"
               "ConstPortElementPtr &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
        char v199 = 0;
        sub_216D0162C((uint64_t)&v192, (int *)&v169);
        unint64_t v128 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v169);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Output for <%s> missing", v129, v128);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v169 + 1);
        sub_21697C414(&v169);
LABEL_360:
        if ((v196 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v196 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v195);
        sub_21697C414(&v194);
        if (v193) {
          sub_216D16E0C(v193);
        }
        if (v189.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v189.__r_.__value_.__l.__size_);
        }
        if (*((void *)&__dst + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&__dst + 1));
        }
        v120 += 2;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
      sub_216787968((void ***)&__str);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v178);
      goto LABEL_394;
    }
    if (a2)
    {
      uint64_t v137 = *v151;
      unint64_t v138 = sub_21730D998();
      sub_21717FD64(v137, (uint64_t)v138, (uint64_t *)&__str);
      std::string::size_type v140 = __str.__r_.__value_.__l.__size_;
      for (std::string::size_type m = __str.__r_.__value_.__r.__words[0]; m != v140; m += 16)
      {
        sub_217179EF4();
        long long v141 = sub_2170396E4((void *)(*(void *)m + 160), (unsigned __int8 *)&qword_267B96428);
        if (v141) {
          unint64_t v142 = (long long *)(v141 + 40);
        }
        else {
          unint64_t v142 = sub_21730D998();
        }
        uint64_t v143 = *((unsigned __int8 *)v142 + 23);
        if ((v143 & 0x80u) == 0) {
          uint64_t v144 = *((unsigned __int8 *)v142 + 23);
        }
        else {
          uint64_t v144 = *((void *)v142 + 1);
        }
        if (v144)
        {
          if ((v143 & 0x80) == 0) {
            goto LABEL_381;
          }
        }
        else
        {
          unint64_t v142 = sub_21730D998();
          uint64_t v143 = *((unsigned __int8 *)v142 + 23);
          if ((v143 & 0x80) == 0)
          {
LABEL_381:
            if (v143) {
              goto LABEL_385;
            }
            continue;
          }
        }
        if (*((void *)v142 + 1))
        {
LABEL_385:
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v192);
          unint64_t v178 = (long long *)(*(void *)m + 48);
          uint64_t v145 = (long long **)(sub_2171848BC(a2, (const void **)v178, (uint64_t)&unk_2174BFD90, &v178) + 7);
          if (&v192 == (std::string **)v145)
          {
            uint64_t v146 = v192;
          }
          else
          {
            if (((unint64_t)*v145 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v145 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v146 = 0;
            uint64_t *v145 = (long long *)v192;
            unint64_t v192 = 0;
          }
          if ((v146 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
      }
      unint64_t v192 = &__str;
      sub_216787968((void ***)&v192);
    }
LABEL_394:
    *(_DWORD *)a3 = data;
    *(void *)(a3 + 8) = v165;
    uint64_t v165 = 0;
    sub_21697D878((_DWORD *)(a3 + 16), &v166);
    sub_21697D8B4((_DWORD *)(a3 + 20), &v167);
    *(void *)(a3 + 24) = v168;
    unint64_t v168 = 0;
    goto LABEL_395;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v173);
  if (v174 && (*((unsigned char *)v174 + 57) & 8) == 0 && (((uint64_t (*)(atomic_ullong **))v173[4])(&v173) & 1) != 0)
  {
    sub_216D16CFC((uint64_t)&__str, (uint64_t *)&v174, &v175);
    int data = (int)__str.__r_.__value_.__l.__data_;
    int v10 = (atomic_ullong *)__str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    uint64_t v165 = v10;
    sub_21697DE94(&v166, (int *)&__str.__r_.__value_.__r.__words[2]);
    sub_21697DEEC(&v167, (int *)&__str.__r_.__value_.__r.__words[2] + 1);
    if ((v168 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v168 = (unint64_t)v198;
    long long v198 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
    if (__str.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
    }
    sub_21717E558((uint64_t)&data, (uint64_t)v151);
    if (*a1)
    {
      BOOL v147 = v9;
      sub_21717E884(a1, (uint64_t *)&v169);
      uint64_t v155 = (uint64_t *)*((void *)&v169 + 1);
      for (std::string::size_type n = (uint64_t *)v169; n != v155; n += 2)
      {
        uint64_t v13 = *n;
        uint64_t v12 = (std::__shared_weak_count *)n[1];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v173, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v192);
        long long v14 = sub_21730D998();
        sub_21717EBF8(v13, (uint64_t)v14, (uint64_t *)&v178);
        uint64_t v16 = v178;
        long long v15 = v179;
        while (v16 != (long long *)v15)
        {
          uint64_t v17 = *(void *)v16;
          int v18 = (std::__shared_weak_count *)*((void *)v16 + 1);
          if (v18)
          {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            *((void *)&__dst + 1) = v18;
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            *((void *)&__dst + 1) = 0;
          }
          *(void *)&long long __dst = v17;
          sub_21717ED5C((uint64_t)a1, (unint64_t *)&__dst, (uint64_t)&v192, 1, (uint64_t)&__str);
          if ((v198 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          sub_21697C414(&__str.__r_.__value_.__r.__words[2]);
          if (__str.__r_.__value_.__l.__size_) {
            sub_216D16E0C((atomic_ullong *)__str.__r_.__value_.__l.__size_);
          }
          if (*((void *)&__dst + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&__dst + 1));
          }
          if (v18) {
            sub_216784EC4(v18);
          }
          ++v16;
        }
        *(void *)&long long __dst = &v178;
        sub_216787968((void ***)&__dst);
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v192);
        if (v12) {
          sub_216784EC4(v12);
        }
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
      sub_216787968((void ***)&__str);
      BOOL v9 = v147;
    }
    BOOL v19 = v9;
    uint64_t v20 = *v151;
    char v21 = sub_21730D998();
    sub_21717EBF8(v20, (uint64_t)v21, (uint64_t *)&v192);
    uint64_t v22 = v192;
    for (ii = v193; v22 != (std::string *)ii; uint64_t v22 = (std::string *)((char *)v22 + 16))
    {
      int v24 = (long long *)v22->__r_.__value_.__r.__words[0];
      int v25 = (std::__shared_weak_count *)v22->__r_.__value_.__l.__size_;
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v179 = v25;
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unint64_t v179 = 0;
      }
      unint64_t v178 = v24;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v173, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__str);
      sub_21717ED5C((uint64_t)a1, (unint64_t *)&v178, (uint64_t)&__str, 1, (uint64_t)v159);
      if ((v163 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v162);
      sub_21697C414(&v161);
      if (v160) {
        sub_216D16E0C(v160);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__str);
      if (v179) {
        sub_216784EC4(v179);
      }
      if (v25) {
        sub_216784EC4(v25);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
    sub_216787968((void ***)&__str);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v173);
    BOOL v9 = v19;
    goto LABEL_53;
  }
  *(_DWORD *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
  *(void *)(a3 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v173);
LABEL_395:
  if ((v168 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v167);
  sub_21697C414(&v166);
  if (v165) {
    sub_216D16E0C(v165);
  }
}

void sub_21717DF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  char v68 = *(std::__shared_weak_count **)(v66 - 224);
  if (v68) {
    sub_216784EC4(v68);
  }
  if (*(char *)(v66 - 121) < 0) {
    operator delete(*(void **)(v66 - 144));
  }
  __cxa_guard_abort(&qword_267B96660);
  if (*(char *)(v66 - 185) < 0) {
    operator delete(*(void **)(v66 - 208));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v66 - 176));
  if (a63) {
    sub_216784EC4(a63);
  }
  uint64_t v69 = a65;
  if (a65 && atomic_fetch_add_explicit((atomic_uint *volatile)(a65 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  if ((a66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a38) {
    sub_216784EC4(a38);
  }
  *(void *)(v66 - 176) = &a39;
  sub_216787968((void ***)(v66 - 176));
  sub_216D16AD8((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_21717E558(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_21717FEC8(a1, a2);
  if (*(_DWORD *)a1 == 1)
  {
    sub_216D16CFC((uint64_t)&v24, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v21, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24);
    uint64_t v23 = 0;
    char v21 = (unsigned int (**)(void **))&unk_26C770350;
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_21697C414(&v25);
    if (v24.__type_name) {
      sub_216D16E0C((atomic_ullong *)v24.__type_name);
    }
    if (v22 && (*(unsigned char *)(v22 + 57) & 8) == 0 && v21[4]((void **)&v21))
    {
      uint64_t v20 = 0;
      sub_217179EF4();
      if (sub_21717FF34((float *)&v20 + 1, a2, (unsigned __int8 *)&qword_267B965D8))
      {
        sub_217179EF4();
        if (sub_21717FF34((float *)&v20, a2, (unsigned __int8 *)qword_267B965F0))
        {
          v24.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C74E368
                          + 3;
          v24.__vftable = (std::type_info_vtbl *)__PAIR64__(v20, HIDWORD(v20));
          pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v21, &v24, 0, (uint64_t)v15);
          if ((v19 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
          sub_21697C414(&v17);
          if (v16) {
            sub_216D16E0C(v16);
          }
          sub_2168EE084((uint64_t)&v24);
        }
      }
      sub_217179EF4();
      if (sub_2170396E4((void *)(*(void *)a2 + 160), (unsigned __int8 *)&qword_267B964B8))
      {
        sub_217179F70((long long **)&v24, a2, (unsigned __int8 *)&qword_267B964B8);
        float v4 = sub_217311064((std::string *)v24.__vftable);
        int v6 = v5;
        int v8 = v7;
        v24.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C74E590
                        + 2;
        BOOL v9 = operator new(0x10uLL);
        *(float *)BOOL v9 = v4;
        v9[1] = v6;
        v9[2] = v8;
        atomic_store(0, v9 + 3);
        v24.__vftable = (std::type_info_vtbl *)v9;
        atomic_fetch_add_explicit(v9 + 3, 1u, memory_order_relaxed);
        pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateDisplayColorAttr((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v21, &v24, 0, (uint64_t)&v10);
        if ((v14 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
        sub_21697C414(&v12);
        if (v11) {
          sub_216D16E0C(v11);
        }
        sub_2168EE084((uint64_t)&v24);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::~UsdUINodeGraphNodeAPI((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v21);
  }
}

void sub_21717E804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21717E884(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v32 = (uint64_t *)v33;
  sub_2172F4170(*a1, &v30);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  *(void *)&long long v29 = *a1;
  *((void *)&v29 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    do
    {
      sub_216BD4CA0(&v32, (unint64_t *)&v29, (uint64_t *)&v29);
      if ((v6 & 1) == 0)
      {
        exceptiostd::string::size_type n = __cxa_allocate_exception(0x20uLL);
        sub_2172F5514(v29, &v26);
        std::type_info v24 = std::string::insert(&v26, 0, "Encountered cycle at element: ");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        std::string::size_type v28 = v24->__r_.__value_.__r.__words[2];
        long long v27 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        sub_2171800DC(exception, &v27);
        void *exception = &unk_26C77BAD8;
        __cxa_throw(exception, (struct type_info *)&unk_26C77B910, (void (*)(void *))sub_21717FFBC);
      }
      sub_21717FFC0(a2, &v29);
      uint64_t v7 = v30;
      sub_217179EF4();
      int v8 = sub_2170396E4((void *)(v29 + 160), (unsigned __int8 *)&qword_267B96368);
      if (v8) {
        BOOL v9 = (long long *)(v8 + 40);
      }
      else {
        BOOL v9 = sub_21730D998();
      }
      uint64_t v10 = *((unsigned __int8 *)v9 + 23);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *((void *)v9 + 1);
      }
      if (!v10) {
        BOOL v9 = sub_21730D998();
      }
      uint64_t v11 = sub_2170396E4((void *)(v7 + 96), (unsigned __int8 *)v9);
      int v12 = v11;
      if (v11)
      {
        int v13 = (void *)*((void *)v11 + 5);
        uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 + 6);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v13)
        {
          int v13 = __dynamic_cast(v13, (const struct __class_type_info *)&unk_26C78B1F0, (const struct __class_type_info *)&unk_26C78AB38, 0);
          long long v15 = 0;
          if (v13) {
            uint64_t v16 = 0;
          }
          else {
            uint64_t v16 = v14;
          }
          if (v13 && v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v15 = v14;
          }
          else
          {
            uint64_t v14 = v16;
          }
        }
        else
        {
          long long v15 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
        long long v15 = 0;
        int v13 = 0;
      }
      int v17 = (std::__shared_weak_count *)*((void *)&v29 + 1);
      *(void *)&long long v29 = v13;
      *((void *)&v29 + 1) = v15;
      if (v17) {
        sub_216784EC4(v17);
      }
      if (v14) {
        sub_216784EC4(v14);
      }
    }
    while ((void)v29);
  }
  if (*((void *)&v29 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v29 + 1));
  }
  int v18 = (uint64_t *)*a2;
  uint64_t v19 = a2[1];
  if (*a2 != v19)
  {
    for (uint64_t i = (uint64_t *)(v19 - 16); v18 < i; i -= 2)
    {
      uint64_t v21 = *v18;
      *int v18 = *i;
      *uint64_t i = v21;
      uint64_t v22 = v18[1];
      v18[1] = i[1];
      i[1] = v22;
      v18 += 2;
    }
  }
  if (v31) {
    sub_216784EC4(v31);
  }
  sub_216BD5270((uint64_t)&v32, v33[0]);
}

void sub_21717EB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_216BD5270(v26 - 72, *(void **)(v26 - 64));
  *(void *)(v26 - 72) = v25;
  sub_216787968((void ***)(v26 - 72));
  _Unwind_Resume(a1);
}

void sub_21717EBF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v3 = *(uint64_t **)(a1 + 136);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F32BC(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      int v13 = (const void **)(v8 + 24);
      uint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        int v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_21718036C(a3, &v15);
    goto LABEL_22;
  }
}

void sub_21717ED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void sub_21717ED5C(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v11 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  unint64_t v74 = *a2;
  long long v75 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (sub_21717B790(0))
  {
    uint64_t v12 = (void *)(v11 + 48);
    if (*(char *)(v11 + 71) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    uint64_t v13 = sub_216D16CFC((uint64_t)__dst, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
    sub_216D0162C(v13, (int *)&v95);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v95);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding input (%s) to connectable prim: (%s)\n", v15, v16, v12, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
    sub_21697C414(&v95);
    if ((BYTE8(__dst[1]) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
    sub_21697C414(&__dst[1]);
    if (*((void *)&__dst[0] + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&__dst[0] + 1));
    }
    unint64_t v11 = v74;
    uint64_t v10 = v75;
  }
  *(void *)&__dst[0] = v11;
  *((void *)&__dst[0] + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2171805CC((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)a3, __dst, (uint64_t)&v76);
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_217180824((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v76, (uint64_t)&v74);
  uint64_t v92 = (long long *)v11;
  *(void *)&long long v93 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217179EF4();
  sub_217179F70((long long **)__dst, (uint64_t)&v92, (unsigned __int8 *)&qword_267B96320);
  if ((*(char *)(*(void *)&__dst[0] + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(*(void *)&__dst[0] + 23)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (*(void *)(*(void *)&__dst[0] + 8)) {
LABEL_21:
  }
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v76, *(const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__dst[0]);
LABEL_22:
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  sub_217179EF4();
  if (sub_2170396E4((void *)(v11 + 160), (unsigned __int8 *)&qword_267B962C0))
  {
    sub_217179F70((long long **)&v98, (uint64_t)&v92, (unsigned __int8 *)&qword_267B962C0);
    sub_217314A1C(v98, (uint64_t *)__dst);
    sub_21680F80C((uint64_t *)&v95);
    long long v95 = __dst[0];
    uint64_t v96 = *(void *)&__dst[1];
    memset(__dst, 0, 24);
    uint64_t v90 = (std::string *)__dst;
    sub_216782F20((void ***)&v90);
    if ((void)v95 != *((void *)&v95 + 1))
    {
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack(&v76, v17, (uint64_t)__dst, NAN);
      uint64_t add = *(void *)&__dst[0];
      uint64_t v19 = **(long long ***)&__dst[0];
      uint64_t v90 = (std::string *)v19;
      if (v19)
      {
        uint64_t add = 1;
        atomic_fetch_add((atomic_uint *volatile)v19, 1u);
        unint64_t v98 = v90;
        if (v90) {
          uint64_t add = atomic_fetch_add((atomic_uint *volatile)v90, 1u);
        }
      }
      else
      {
        unint64_t v98 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v90);
      uint64_t v90 = (std::string *)__dst;
      sub_216991094((void ***)&v90);
      uint64_t v100 = 0;
      memset(__dst, 0, sizeof(__dst));
      sub_216F57EA8((uint64_t *)__dst, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v95 + 1) - v95) >> 3));
      uint64_t v21 = *((void *)&v95 + 1);
      for (uint64_t i = v95; i != v21; i += 24)
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v90);
        sub_216F5A290((uint64_t)__dst, &v90);
        if ((v90 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      uint64_t v22 = sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v98);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetAllowedTokens(v22, (uint64_t)__dst);
      sub_2169B2E0C(__dst);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v23, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v98);
    }
  }
  sub_217179EF4();
  sub_217179F70((long long **)&v90, (uint64_t)&v92, (unsigned __int8 *)&qword_267B964D0);
  if (SHIBYTE(v90->__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t size = v90->__r_.__value_.__l.__size_;
    if (size)
    {
      sub_216778F24(__dst, v90->__r_.__value_.__l.__data_, size);
LABEL_38:
      uint64_t v26 = BYTE7(__dst[1]);
      long long v27 = __dst;
      if (SBYTE7(__dst[1]) < 0)
      {
        uint64_t v26 = *((void *)&__dst[0] + 1);
        long long v27 = *(unsigned char **)&__dst[0];
      }
      for (; v26; --v26)
      {
        if (*v27 == 47) {
          *long long v27 = 58;
        }
        ++v27;
      }
      pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup((uint64_t)&v76);
    }
  }
  else if (*((unsigned char *)&v90->__r_.__value_.__s + 23))
  {
    long long v24 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    *(void *)&__dst[1] = *((void *)&v90->__r_.__value_.__l + 2);
    __dst[0] = v24;
    goto LABEL_38;
  }
  sub_217179EF4();
  sub_217179F70((long long **)__dst, (uint64_t)&v92, (unsigned __int8 *)&qword_267B96518);
  if (*(char *)(*(void *)&__dst[0] + 23) < 0)
  {
    if (!*(void *)(*(void *)&__dst[0] + 8)) {
      goto LABEL_50;
    }
LABEL_49:
    pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName((uint64_t)&v76);
  }
  if (*(unsigned char *)(*(void *)&__dst[0] + 23)) {
    goto LABEL_49;
  }
LABEL_50:
  sub_21717E558((uint64_t)&v76, (uint64_t)&v92);
  *(void *)&__dst[0] = &v95;
  sub_216782F20((void ***)__dst);
  if ((void)v93) {
    sub_216784EC4((std::__shared_weak_count *)v93);
  }
  if (a4)
  {
    *(void *)&__dst[0] = v74 + 48;
    std::string::size_type v28 = sub_217181D98((uint64_t **)(a1 + 56), (const void **)(v74 + 48), (uint64_t)&unk_2174BFD90, (long long **)__dst);
    long long v29 = v28;
    *((_DWORD *)v28 + 14) = v76;
    uint64_t v30 = v77;
    if (v77) {
      atomic_fetch_add_explicit(v77 + 6, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = (atomic_ullong *)v28[8];
    unsigned char v29[8] = (uint64_t)v30;
    if (v31) {
      sub_216D16E0C(v31);
    }
    sub_2169C487C((int *)v29 + 18, &v78);
    sub_2169C48D4((int *)v29 + 19, &v79);
    sub_2168D2318(v29 + 10, &v80);
    goto LABEL_58;
  }
  sub_217179EF4();
  sub_217179F70(&v81, (uint64_t)&v74, (unsigned __int8 *)&qword_267B96380);
  if (*((char *)v81 + 23) < 0)
  {
    if (!*((void *)v81 + 1)) {
      goto LABEL_58;
    }
  }
  else if (!*((unsigned char *)v81 + 23))
  {
    goto LABEL_58;
  }
  uint64_t v39 = sub_21678C2D8(a1 + 56, (const void **)v81);
  if (a1 + 64 != v39)
  {
    uint64_t v40 = v74;
    std::string::size_type v41 = v75;
    if (v75) {
      atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2172F32BC(v40, &v95);
    uint64_t v42 = v39 + 56;
    if (!(void)v95) {
      goto LABEL_103;
    }
    sub_217179EF4();
    sub_217179F70(&v92, (uint64_t)&v95, (unsigned __int8 *)&qword_267B963E0);
    long long v43 = v92;
    if (*((char *)v92 + 23) < 0)
    {
      if (!*((void *)v92 + 1))
      {
LABEL_96:
        sub_217179EF4();
        sub_217179F70(&v92, (uint64_t)&v95, (unsigned __int8 *)&qword_267B96218);
        uint64_t v49 = v92;
        if (*((char *)v92 + 23) < 0)
        {
          if (!*((void *)v92 + 1)) {
            goto LABEL_103;
          }
        }
        else if (!*((unsigned char *)v92 + 23))
        {
          goto LABEL_103;
        }
        *(void *)&__dst[0] = "usdMtlx/reader.cpp";
        *((void *)&__dst[0] + 1) = "_ConnectPorts";
        *(void *)&__dst[1] = 1126;
        *((void *)&__dst[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_C"
                                     "onnectPorts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aa"
                                     "pl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
        LOBYTE(v100) = 0;
        if (*((char *)v92 + 23) < 0) {
          uint64_t v49 = *(long long **)v92;
        }
        sub_216D0162C(v39 + 56, (int *)&v90);
        uint64_t v50 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
        sub_216D0162C((uint64_t)&v76, (int *)&v98);
        int v51 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Dropped swizzle %s between <%s> -> <%s>", v52, v49, v50, v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
        sub_21697C414(&v98);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
        sub_21697C414(&v90);
LABEL_103:
        if (*((void *)&v95 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v95 + 1));
        }
        if (sub_21717B790(0))
        {
          sub_216D0162C(v39 + 56, (int *)__dst);
          int v53 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
          sub_216D0162C((uint64_t)&v76, (int *)&v95);
          unint64_t v54 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v95);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v55, v56, v53, v54);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
          sub_21697C414(&v95);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
          sub_21697C414(__dst);
        }
        sub_216D0162C(v39 + 56, (int *)&v98);
        sub_216D16CFC((uint64_t)&v95, (uint64_t *)&v77, &v78);
        sub_216D16CFC((uint64_t)&v92, (uint64_t *)(v39 + 64), (_DWORD *)(v39 + 72));
        sub_216D6B1F8((uint64_t)&v95, (uint64_t)__dst);
        if (LODWORD(__dst[0]) == v92
          && *(_OWORD *)((char *)__dst + 8) == v93
          && (uint64_t v57 = *((void *)&__dst[1] + 1),
              (*((void *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8) == (v94 & 0xFFFFFFFFFFFFFFF8)))
        {
          int v58 = 0;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v90, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v92);
          uint64_t v90 = (std::string *)&unk_26C76E028;
          if (!v91 || (*(unsigned char *)(v91 + 57) & 8) != 0) {
            int v58 = 0;
          }
          else {
            int v58 = off_26C76E048((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v90);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v90);
          uint64_t v57 = *((void *)&__dst[1] + 1);
        }
        if ((v57 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
        sub_21697C414(&__dst[1]);
        long long v59 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)*((void *)&__dst[0] + 1);
        if (*((void *)&__dst[0] + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&__dst[0] + 1));
        }
        if (v58)
        {
          StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v59);
          SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v61);
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v95, SchemaInfo, v63))
          {
            sub_216D6B1F8((uint64_t)&v95, (uint64_t)__dst);
            sub_216D0162C((uint64_t)__dst, (int *)&v90);
            if ((BYTE8(__dst[1]) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
            sub_21697C414(&__dst[1]);
            if (*((void *)&__dst[0] + 1)) {
              sub_216D16E0C(*((atomic_ullong **)&__dst[0] + 1));
            }
          }
          else
          {
            sub_216D0162C((uint64_t)&v95, (int *)&v90);
          }
          sub_216D0162C((uint64_t)&v92, (int *)__dst);
          NameTokestd::string::size_type n = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, NameToken, &v88);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
          sub_21697C414(__dst);
          sub_217182000((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v92, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v88, (uint64_t)__dst);
          sub_216D0162C((uint64_t)__dst, &v84);
          sub_216D0162C(v42, &v82);
          uint64_t v65 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v82);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84, v65, &v86);
          sub_21697DE94((int *)&v98, &v86);
          sub_21697DEEC((int *)&v98 + 1, &v87);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v87);
          sub_21697C414(&v86);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83);
          sub_21697C414(&v82);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v85);
          sub_21697C414(&v84);
          if ((BYTE8(__dst[1]) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
          sub_21697C414(&__dst[1]);
          if (*((void *)&__dst[0] + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&__dst[0] + 1));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v89);
          sub_21697C414(&v88);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
          sub_21697C414(&v90);
        }
        if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v98))
        {
          if (!sub_21717B790(0))
          {
LABEL_136:
            if ((v94 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 3);
            sub_21697C414((_DWORD *)&v93 + 2);
            if ((void)v93) {
              sub_216D16E0C((atomic_ullong *)v93);
            }
            if ((v97 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v96 + 1);
            sub_21697C414(&v96);
            if (*((void *)&v95 + 1)) {
              sub_216D16E0C(*((atomic_ullong **)&v95 + 1));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
            sub_21697C414(&v98);
            if (v41) {
              sub_216784EC4(v41);
            }
            goto LABEL_58;
          }
          uint64_t v66 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
          sub_216D0162C((uint64_t)&v76, (int *)__dst);
          std::string::size_type v67 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v68, v69, v66, v67);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
          uint64_t v70 = (long long **)__dst;
        }
        else
        {
          *(void *)&__dst[0] = "usdMtlx/reader.cpp";
          *((void *)&__dst[0] + 1) = "_ConnectPorts";
          *(void *)&__dst[1] = 1164;
          *((void *)&__dst[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::"
                                       "_ConnectPorts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal"
                                       "__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
          LOBYTE(v100) = 0;
          uint64_t v71 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
          sub_216D0162C((uint64_t)&v76, (int *)&v90);
          uint64_t v72 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Failed to connect <%s> -> <%s>", v73, v71, v72);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
          uint64_t v70 = (long long **)&v90;
        }
        sub_21697C414(v70);
        goto LABEL_136;
      }
    }
    else if (!*((unsigned char *)v92 + 23))
    {
      goto LABEL_96;
    }
    *(void *)&__dst[0] = "usdMtlx/reader.cpp";
    *((void *)&__dst[0] + 1) = "_ConnectPorts";
    *(void *)&__dst[1] = 1118;
    *((void *)&__dst[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_Conne"
                                 "ctPorts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrR"
                                 "eserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    LOBYTE(v100) = 0;
    if (*((char *)v92 + 23) < 0) {
      long long v43 = *(long long **)v92;
    }
    sub_216D0162C(v39 + 56, (int *)&v90);
    uint64_t v46 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
    sub_216D0162C((uint64_t)&v76, (int *)&v98);
    unint64_t v47 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Dropped member %s between <%s> -> <%s>", v48, v43, v46, v47);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
    sub_21697C414(&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
    sub_21697C414(&v90);
    goto LABEL_96;
  }
  *(void *)&__dst[0] = "usdMtlx/reader.cpp";
  *((void *)&__dst[0] + 1) = "_AddInputCommon";
  *(void *)&__dst[1] = 996;
  *((void *)&__dst[1] + 1) = "UsdShadeInput pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder:"
                               ":_AddInputCommon(const mx::ConstValueElementPtr &, const UsdShadeConnectableAPI &, BOOL)";
  LOBYTE(v100) = 0;
  std::string::size_type v44 = v81;
  if (*((char *)v81 + 23) < 0) {
    std::string::size_type v44 = *(long long **)v81;
  }
  uint64_t v45 = (void *)(v74 + 48);
  if (*(char *)(v74 + 71) < 0) {
    uint64_t v45 = (void *)*v45;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"No interface name '%s' for node '%s'", v38, v44, v45);
LABEL_58:
  *(void *)&__dst[0] = a2;
  uint64_t v32 = sub_217182460(a1 + 80, a2, (uint64_t)&unk_2174BFD90, (void **)__dst);
  *((_DWORD *)v32 + 12) = v76;
  uint64_t v33 = v77;
  uint64_t v77 = 0;
  BOOL v34 = (atomic_ullong *)v32[7];
  v32[7] = (uint64_t)v33;
  if (v34) {
    sub_216D16E0C(v34);
  }
  sub_21697DE94((int *)v32 + 16, &v78);
  sub_21697DEEC((int *)v32 + 17, &v79);
  if (&v76 != (pxrInternal__aapl__pxrReserved__ **)(v32 + 6))
  {
    uint64_t v35 = v32[9];
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v32[9] = v80;
    uint64_t v80 = 0;
  }
  *(_DWORD *)a5 = *((_DWORD *)v32 + 12);
  uint64_t v36 = v32[7];
  *(void *)(a5 + 8) = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a5 + 16), (_DWORD *)v32 + 16);
  sub_21698105C((_DWORD *)(a5 + 20), (_DWORD *)v32 + 17);
  uint64_t v37 = v32[9];
  *(void *)(a5 + 24) = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a5 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v80 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v79);
  sub_21697C414(&v78);
  if (v77) {
    sub_216D16E0C(v77);
  }
  if (v75) {
    sub_216784EC4(v75);
  }
}

void sub_21717FA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_216D16AD8((uint64_t)&a27);
  sub_216D16AD8((uint64_t)&a31);
  sub_21697B754((_DWORD *)(v32 - 136));
  if (v31) {
    sub_216784EC4(v31);
  }
  sub_216F74530((uint64_t)&a15);
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(a1);
}

void sub_21717FD64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v3 = *(uint64_t **)(a1 + 136);
  uint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F36C4(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      uint64_t v13 = (const void **)(v8 + 24);
      uint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        uint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_21718465C(a3, &v15);
    goto LABEL_22;
  }
}

void sub_21717FE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

long long **sub_21717FEC8(uint64_t a1, uint64_t a2)
{
  sub_217179EF4();
  uint64_t result = sub_217179F70(&v5, a2, (unsigned __int8 *)&qword_267B962A8);
  if (*((char *)v5 + 23) < 0)
  {
    if (*((void *)v5 + 1)) {
LABEL_3:
    }
      pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation(a1);
  }
  else if (*((unsigned char *)v5 + 23))
  {
    goto LABEL_3;
  }
  return result;
}

unsigned __int8 *sub_21717FF34(float *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = sub_2170396E4((void *)(*(void *)a2 + 160), a3);
  if (result)
  {
    sub_217179F70((long long **)&v7, a2, a3);
    *a1 = sub_21730F488(v7);
    return (unsigned __int8 *)1;
  }
  return result;
}

void **sub_21717FFC0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_217180228(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2171800C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void *sub_2171800DC(void *a1, long long *a2)
{
  *a1 = &unk_26C77BB00;
  unsigned int v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)unsigned int v3 = v4;
  }
  return a1;
}

void sub_217180144(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_217180158(std::exception *a1)
{
  sub_2171801C8(a1);

  operator delete(v1);
}

uint64_t sub_217180180(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_2171801A0(std::exception *a1)
{
  sub_2171801C8(a1);

  operator delete(v1);
}

void sub_2171801C8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C77BB00;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

uint64_t sub_217180228(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171802A0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171802A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_217180334((uint64_t)v12);
  return v10;
}

uint64_t sub_217180334(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void **sub_21718036C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    long long v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_217180488(a1, v18);
    long long v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_217180474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217180488(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217180500((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217180500(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_217180594((uint64_t)v12);
  return v10;
}

uint64_t sub_217180594(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void sub_2171805CC(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_217179EF4();
  uint64_t v6 = sub_2170396E4((void *)(*a2 + 160), (unsigned __int8 *)&qword_267B964A0);
  if (v6) {
    uint64_t v7 = (long long *)(v6 + 40);
  }
  else {
    uint64_t v7 = sub_21730D998();
  }
  uint64_t v8 = *((unsigned __int8 *)v7 + 23);
  char v9 = v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)v7 + 1);
  }
  if (v8)
  {
    if ((v9 & 0x80) == 0) {
      goto LABEL_8;
    }
LABEL_22:
    if (*((void *)v7 + 1)) {
      goto LABEL_9;
    }
LABEL_23:
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
    return;
  }
  uint64_t v7 = sub_21730D998();
  char v9 = *((unsigned char *)v7 + 23);
  if (v9 < 0) {
    goto LABEL_22;
  }
LABEL_8:
  if (!v9) {
    goto LABEL_23;
  }
LABEL_9:
  uint64_t v16 = 0;
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v7, (uint64_t)&v13);
  uint64_t v15 = v13;
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v15))
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10) {
      uint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v15 = *((void *)v10 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v16 = v13;
  }
  uint64_t v11 = *a2;
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    sub_21717C1A8(v11 + 48, (uint64_t)&v13);
  }
  else {
    uint64_t v13 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v15, a3);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v12) {
    sub_216784EC4(v12);
  }
  if (v16) {
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16);
  }
}

void sub_2171807B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217180824(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t a2)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  long long v4 = *(std::__shared_weak_count **)(a2 + 8);
  std::string __p = *(void **)a2;
  uint64_t v76 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue((uint64_t)&__p, 0, (uint64_t)v85);
  if (v76) {
    sub_216784EC4(v76);
  }
  if (v86) {
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::Set(a1, v85, NAN);
  }
  sub_217179EF4();
  sub_217179F70((long long **)&v84, a2, (unsigned __int8 *)&qword_267B96548);
  sub_217179EF4();
  sub_217179F70((long long **)&v83, a2, (unsigned __int8 *)&qword_267B96560);
  uint64_t v5 = v84;
  if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v84->__r_.__value_.__l.__size_) {
      goto LABEL_53;
    }
  }
  else if (!*((unsigned char *)&v84->__r_.__value_.__s + 23))
  {
    goto LABEL_53;
  }
  if (SHIBYTE(v83->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v83->__r_.__value_.__l.__size_) {
      goto LABEL_53;
    }
LABEL_15:
    sub_217179EF4();
    sub_217179F70((long long **)&__p, a2, (unsigned __int8 *)&qword_267B964A0);
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetPackedUsdValues(v5, (unsigned __int8 *)__p, (uint64_t *)&v81);
    if (v81 == v82)
    {
      std::string __p = "usdMtlx/reader.cpp";
      uint64_t v76 = (std::__shared_weak_count *)"_CopyValue";
      uint64_t v77 = 525;
      int v78 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::Co"
            "nstValueElementPtr &)";
      char v79 = 0;
      uint64_t v14 = (long long *)v84;
      if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v14 = (long long *)v84->__r_.__value_.__r.__words[0];
      }
      uint64_t v15 = *(void **)a2;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      sub_2172F3EC4((uint64_t)v15, (uint64_t)&v64, (uint64_t)&v74);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v18 = &v74;
      }
      else {
        int v18 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse valuecurve '%s' on '%s';  ignoring",
        v16,
        v17,
        v14,
        v18);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v80);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (v65) {
        sub_216784EC4(v65);
      }
      goto LABEL_52;
    }
    uint64_t v6 = v83;
    sub_216779094(&__p, "integer");
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetPackedUsdValues(v6, (unsigned __int8 *)&__p, (uint64_t *)&v80);
    if (SHIBYTE(v77) < 0) {
      operator delete(__p);
    }
    if (v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0] == 32)
    {
      uint64_t v7 = *(unsigned int *)sub_216959558((pxrInternal__aapl__pxrReserved__::VtValue *)v80.__r_.__value_.__l.__data_);
      uint64_t v8 = *(unsigned int *)sub_216959558((pxrInternal__aapl__pxrReserved__::VtValue *)(v80.__r_.__value_.__r.__words[0]
                                                                                      + 16));
      if ((int)v8 >= (int)v7)
      {
        uint64_t v39 = v81;
        uint64_t v40 = v82;
        uint64_t v41 = ((char *)v82 - (char *)v81) >> 4;
        if (v41 == v8 - v7 + 1)
        {
          while (v39 != v40)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeInput::Set(a1, v39, (double)(int)v7);
            LODWORD(v7) = v7 + 1;
            uint64_t v39 = (std::__shared_weak_count *)((char *)v39 + 16);
          }
          goto LABEL_51;
        }
        std::string __p = "usdMtlx/reader.cpp";
        uint64_t v76 = (std::__shared_weak_count *)"_CopyValue";
        uint64_t v77 = 507;
        int v78 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::"
              "ConstValueElementPtr &)";
        char v79 = 0;
        unint64_t v47 = *(void **)a2;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        sub_2172F3EC4((uint64_t)v47, (uint64_t)&v68, (uint64_t)v72);
        if (v73 >= 0) {
          uint64_t v50 = v72;
        }
        else {
          uint64_t v50 = (void **)v72[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"valuerange [%d,%d] doesn't match valuecurve size %zd on '%s';  ignoring",
          v48,
          v49,
          v7,
          v8,
          v41,
          v50);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v74);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (v73 < 0) {
          operator delete(v72[0]);
        }
        uint64_t v13 = v69;
        if (!v69) {
          goto LABEL_51;
        }
      }
      else
      {
        std::string __p = "usdMtlx/reader.cpp";
        uint64_t v76 = (std::__shared_weak_count *)"_CopyValue";
        uint64_t v77 = 500;
        int v78 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::"
              "ConstValueElementPtr &)";
        char v79 = 0;
        char v9 = *(void **)a2;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        sub_2172F3EC4((uint64_t)v9, (uint64_t)&v70, (uint64_t)v72);
        if (v73 >= 0) {
          uint64_t v12 = v72;
        }
        else {
          uint64_t v12 = (void **)v72[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid valuerange [%d,%d] on '%s';  ignoring",
          v10,
          v11,
          v7,
          v8,
          v12);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v74);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (v73 < 0) {
          operator delete(v72[0]);
        }
        uint64_t v13 = v71;
        if (!v71) {
          goto LABEL_51;
        }
      }
    }
    else
    {
      std::string __p = "usdMtlx/reader.cpp";
      uint64_t v76 = (std::__shared_weak_count *)"_CopyValue";
      uint64_t v77 = 519;
      int v78 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::Co"
            "nstValueElementPtr &)";
      char v79 = 0;
      uint64_t v19 = (long long *)v83;
      if (SHIBYTE(v83->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v19 = (long long *)v83->__r_.__value_.__r.__words[0];
      }
      uint64_t v20 = *(void **)a2;
      uint64_t v66 = 0;
      std::string::size_type v67 = 0;
      sub_2172F3EC4((uint64_t)v20, (uint64_t)&v66, (uint64_t)v72);
      if (v73 >= 0) {
        uint64_t v23 = v72;
      }
      else {
        uint64_t v23 = (void **)v72[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Malformed valuerange '%s' on '%s';  ignoring",
        v21,
        v22,
        v19,
        v23);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v74);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (v73 < 0) {
        operator delete(v72[0]);
      }
      uint64_t v13 = v67;
      if (!v67) {
        goto LABEL_51;
      }
    }
    sub_216784EC4(v13);
LABEL_51:
    std::string __p = &v80;
    sub_216932118((void ***)&__p);
LABEL_52:
    std::string __p = &v81;
    sub_216932118((void ***)&__p);
    goto LABEL_53;
  }
  if (*((unsigned char *)&v83->__r_.__value_.__s + 23)) {
    goto LABEL_15;
  }
LABEL_53:
  long long v24 = sub_21716A328(*(void *)a2);
  sub_2172F4170(*(void *)a2, &__p);
  uint64_t v25 = sub_21716A328((uint64_t)__p);
  if (v76) {
    sub_216784EC4(v76);
  }
  uint64_t v26 = *((unsigned __int8 *)v24 + 23);
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = *((unsigned __int8 *)v24 + 23);
  }
  else {
    uint64_t v27 = *((void *)v24 + 1);
  }
  if (!v27) {
    return sub_2168EE084((uint64_t)v85);
  }
  uint64_t v28 = *((unsigned __int8 *)v25 + 23);
  int v29 = (char)v28;
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *((void *)v25 + 1);
  }
  if (v27 == v28)
  {
    if (v29 >= 0) {
      uint64_t v30 = v25;
    }
    else {
      uint64_t v30 = *(long long **)v25;
    }
    if ((v26 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v24, v30, *((void *)v24 + 1))) {
        return sub_2168EE084((uint64_t)v85);
      }
    }
    else
    {
      if (!*((unsigned char *)v24 + 23)) {
        return sub_2168EE084((uint64_t)v85);
      }
      while (*(unsigned __int8 *)v24 == *(unsigned __int8 *)v30)
      {
        long long v24 = (long long *)((char *)v24 + 1);
        uint64_t v30 = (long long *)((char *)v30 + 1);
        if (!--v26) {
          return sub_2168EE084((uint64_t)v85);
        }
      }
    }
  }
  uint64_t v31 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)a2 + 56))();
  if (*((char *)v31 + 23) < 0)
  {
    uint64_t v33 = *((void *)v31 + 1);
    if (v33 != 6)
    {
      if (v33 != 8) {
        return sub_2168EE084((uint64_t)v85);
      }
      uint64_t v31 = *(_DWORD **)v31;
      goto LABEL_78;
    }
    uint64_t v42 = *(int **)v31;
    if (**(_DWORD **)v31 == 1869377379 && *(_WORD *)(*(void *)v31 + 4) == 13170) {
      goto LABEL_152;
    }
    int v44 = *v42;
    int v45 = *((unsigned __int16 *)v42 + 2);
    BOOL v38 = v44 == 1869377379 && v45 == 13426;
LABEL_99:
    if (v38) {
      goto LABEL_152;
    }
    return sub_2168EE084((uint64_t)v85);
  }
  int v32 = *((unsigned __int8 *)v31 + 23);
  if (v32 == 6)
  {
    if (*v31 == 1869377379 && *((_WORD *)v31 + 2) == 13170) {
      goto LABEL_152;
    }
    BOOL v38 = *v31 == 1869377379 && *((_WORD *)v31 + 2) == 13426;
    goto LABEL_99;
  }
  if (v32 != 8) {
    return sub_2168EE084((uint64_t)v85);
  }
LABEL_78:
  if (*(void *)v31 == 0x656D616E656C6966)
  {
    BOOL v34 = *(void **)a2;
    uint64_t v35 = *(std::__shared_weak_count **)(*(void *)a2 + 232);
    if (v35)
    {
      uint64_t v35 = std::__shared_weak_count::lock(v35);
      uint64_t v36 = v35;
      if (v35) {
        uint64_t v35 = (std::__shared_weak_count *)*((void *)v34 + 28);
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    sub_2172F34C0((uint64_t)v35, &__p);
    sub_217181260((uint64_t *)&__p, (uint64_t *)&v81);
    if (v76) {
      sub_216784EC4(v76);
    }
    if (v36) {
      sub_216784EC4(v36);
    }
    uint64_t v51 = (uint64_t)v81;
    if (v81)
    {
      int64_t v52 = sub_21730D998();
      sub_21717FD64(v51, (uint64_t)v52, (uint64_t *)&__p);
      int v53 = (std::__shared_weak_count *)__p;
      unint64_t v54 = v76;
      if (__p != v76)
      {
        char v55 = 0;
        while (1)
        {
          float32x4_t v56 = v53->__vftable;
          shared_owners = (std::__shared_weak_count *)v53->__shared_owners_;
          if (shared_owners) {
            atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v58 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v56->~__shared_weak_count + 7))(v56);
          int v59 = *(char *)(v58 + 23);
          if (v59 < 0)
          {
            if (*(void *)(v58 + 8) == 6)
            {
              uint64_t v58 = *(void *)v58;
LABEL_128:
              if (*(_DWORD *)v58 == 1869377379 && *(_WORD *)(v58 + 4) == 13170)
              {
                BOOL v62 = 1;
                if (!shared_owners) {
                  goto LABEL_142;
                }
              }
              else
              {
                BOOL v62 = *(_DWORD *)v58 == 1869377379 && *(_WORD *)(v58 + 4) == 13426;
                if (!shared_owners) {
                  goto LABEL_142;
                }
              }
LABEL_141:
              sub_216784EC4(shared_owners);
              goto LABEL_142;
            }
          }
          else if (v59 == 6)
          {
            goto LABEL_128;
          }
          BOOL v62 = 0;
          if (shared_owners) {
            goto LABEL_141;
          }
LABEL_142:
          v55 |= v62;
          int v53 = (std::__shared_weak_count *)((char *)v53 + 16);
          if (v53 == v54) {
            goto LABEL_148;
          }
        }
      }
      char v55 = 0;
LABEL_148:
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_216787968((void ***)&v80);
    }
    else
    {
      char v55 = 0;
    }
    if (v82) {
      sub_216784EC4(v82);
    }
    if (v55)
    {
LABEL_152:
      sub_21716A328(*(void *)a2);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
    }
  }
  return sub_2168EE084((uint64_t)v85);
}

void sub_217181044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a19) {
    sub_216784EC4(a19);
  }
  a34 = (void *)(v39 - 176);
  sub_216932118((void ***)&a34);
  a34 = (void *)(v39 - 152);
  sub_216932118((void ***)&a34);
  sub_2168EE084(v39 - 112);
  _Unwind_Resume(a1);
}

void sub_217181260(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = (std::string *)*a1;
  uint64_t v5 = sub_21730D998();
  sub_2173082D4(v4, (uint64_t)v5, 0, (uint64_t *)__s1);
  uint64_t v6 = (std::__shared_weak_count *)__s1[1];
  if (__s1[0])
  {
    *a2 = (uint64_t)__s1[0];
    a2[1] = (uint64_t)v6;
    return;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a1 + 56))();
  if (*(char *)(v7 + 23) < 0)
  {
    sub_216778F24(__s1, *(void **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    uint64_t v31 = *(void *)(v7 + 16);
    *(_OWORD *)__s1 = v8;
  }
  char v9 = (void *)strlen(off_26798DD90[0]);
  size_t v10 = (size_t)v9;
  size_t v11 = HIBYTE(v31);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if (v9 != (void *)HIBYTE(v31))
    {
      uint64_t v14 = off_26798DD98[0];
      size_t v15 = strlen(off_26798DD98[0]);
LABEL_17:
      if (v15 != v11)
      {
        long long v17 = off_26798DDA0[0];
        size_t v18 = strlen(off_26798DDA0[0]);
LABEL_26:
        if (v18 != v11)
        {
          uint64_t v20 = off_26798DDA8[0];
          size_t v21 = strlen(off_26798DDA8[0]);
          goto LABEL_36;
        }
        uint64_t v19 = __s1;
        uint64_t v13 = (void *)v11;
        goto LABEL_34;
      }
      uint64_t v16 = __s1;
      uint64_t v13 = (void *)v11;
      goto LABEL_24;
    }
    if (v9 != (void *)-1)
    {
      uint64_t v12 = __s1;
      goto LABEL_13;
    }
LABEL_60:
    sub_216855AD4();
  }
  uint64_t v13 = __s1[1];
  if (v9 != __s1[1])
  {
    uint64_t v14 = off_26798DD98[0];
    size_t v15 = strlen(off_26798DD98[0]);
    goto LABEL_21;
  }
  if (v9 == (void *)-1) {
    goto LABEL_60;
  }
  uint64_t v12 = (void **)__s1[0];
LABEL_13:
  if (!memcmp(v12, off_26798DD90[0], v10)) {
    goto LABEL_50;
  }
  uint64_t v14 = off_26798DD98[0];
  size_t v15 = strlen(off_26798DD98[0]);
  if ((v11 & 0x80) == 0) {
    goto LABEL_17;
  }
  uint64_t v13 = __s1[1];
LABEL_21:
  if ((void *)v15 != v13)
  {
    long long v17 = off_26798DDA0[0];
    size_t v18 = strlen(off_26798DDA0[0]);
    goto LABEL_31;
  }
  if (v13 == (void *)-1) {
    sub_216855AD4();
  }
  uint64_t v16 = (void **)__s1[0];
LABEL_24:
  if (!memcmp(v16, v14, (size_t)v13)) {
    goto LABEL_50;
  }
  long long v17 = off_26798DDA0[0];
  size_t v18 = strlen(off_26798DDA0[0]);
  if ((v11 & 0x80) == 0) {
    goto LABEL_26;
  }
  uint64_t v13 = __s1[1];
LABEL_31:
  if ((void *)v18 != v13)
  {
    uint64_t v20 = off_26798DDA8[0];
    size_t v21 = strlen(off_26798DDA8[0]);
    goto LABEL_40;
  }
  if (v13 == (void *)-1) {
    sub_216855AD4();
  }
  uint64_t v19 = (void **)__s1[0];
LABEL_34:
  if (!memcmp(v19, v17, (size_t)v13)) {
    goto LABEL_50;
  }
  uint64_t v20 = off_26798DDA8[0];
  size_t v21 = strlen(off_26798DDA8[0]);
  if ((v11 & 0x80) == 0)
  {
LABEL_36:
    if (v21 == v11)
    {
      uint64_t v22 = __s1;
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  uint64_t v13 = __s1[1];
LABEL_40:
  if ((void *)v21 == v13)
  {
    if (v13 == (void *)-1) {
      sub_216855AD4();
    }
    uint64_t v22 = (void **)__s1[0];
    size_t v11 = (size_t)v13;
LABEL_43:
    if (memcmp(v22, v20, v11)) {
      goto LABEL_44;
    }
LABEL_50:
    uint64_t v25 = (std::__shared_weak_count *)a1[1];
    uint64_t v28 = *a1;
    int v29 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v28, 0);
    sub_217181960(*a1);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    sub_217181664(a1, &v26, a2);
    goto LABEL_53;
  }
LABEL_44:
  uint64_t v23 = (std::__shared_weak_count *)a1[1];
  uint64_t v28 = *a1;
  int v29 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v28, 0);
  sub_217181960(*a1);
  long long v24 = (std::__shared_weak_count *)a1[1];
  uint64_t v26 = *a1;
  uint64_t v27 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_217181664(a1, &v26, a2);
  if (v24) {
    sub_216784EC4(v24);
  }
LABEL_53:
  if (v29) {
    sub_216784EC4(v29);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__s1[0]);
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_217181608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    sub_216784EC4(v19);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_217181664(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_2172F4170(*a1, &__p);
  uint64_t v6 = (unsigned __int8 *)(*a1 + 24);
  uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*a1 + 56))();
  long long v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v25 = *a1;
  uint64_t v26 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t Version = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v25, 0);
  int v28 = v9;
  size_t v10 = sub_217181960(*a1);
  sub_2171819EC((uint64_t *)&__p, a2, v6, v7, (uint64_t)&Version, (uint64_t)v10, &v29);
  if (v26) {
    sub_216784EC4(v26);
  }
  if (v23) {
    sub_216784EC4(v23);
  }
  if (v29)
  {
    size_t v11 = v30;
    *a3 = v29;
    a3[1] = (uint64_t)v11;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96620, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96620))
    {
      sub_216779094(&__p, "");
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)&__p, &qword_267B96610);
      if (v24 < 0) {
        operator delete(__p);
      }
      __cxa_atexit((void (*)(void *))sub_21717A2F8, &qword_267B96610, &dword_216758000);
      __cxa_guard_release(&qword_267B96620);
    }
    if (!sub_217181C8C(*a1)) {
      goto LABEL_16;
    }
    uint64_t v12 = qword_267B96610;
    uint64_t v13 = sub_217181D0C(*a1);
    sub_2171680B4(v12, (unsigned __int8 *)v13, &__p);
    size_t v15 = __p;
    uint64_t v14 = v23;
    std::string __p = 0;
    uint64_t v23 = 0;
    uint64_t v16 = v30;
    uint64_t v30 = v14;
    if (v16)
    {
      sub_216784EC4(v16);
      if (v23) {
        sub_216784EC4(v23);
      }
    }
    if (v15)
    {
      *a3 = (uint64_t)v15;
      a3[1] = (uint64_t)v14;
    }
    else
    {
LABEL_16:
      long long v17 = (unsigned __int8 *)(*a1 + 24);
      size_t v18 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*a1 + 56))();
      uint64_t v19 = (std::__shared_weak_count *)a1[1];
      std::string __p = (void *)*a1;
      uint64_t v23 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion((uint64_t *)&__p, 0);
      LODWORD(v26) = v20;
      size_t v21 = sub_217181960(*a1);
      sub_2171819EC(&qword_267B96610, a2, v17, v18, (uint64_t)&v25, (uint64_t)v21, a3);
      if (v23) {
        sub_216784EC4(v23);
      }
      if (v30) {
        sub_216784EC4(v30);
      }
    }
  }
}

void sub_2171818E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B96620);
  if (a21) {
    sub_216784EC4(a21);
  }
  _Unwind_Resume(a1);
}

long long *sub_217181960(uint64_t a1)
{
  sub_216779094(__p, off_26798DD40[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    unsigned int v3 = (long long *)(v2 + 40);
  }
  else {
    unsigned int v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_2171819D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171819EC(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  *a7 = 0;
  a7[1] = 0;
  sub_2172E2198(*a1, a3, (uint64_t *)&v39);
  uint64_t v13 = v39;
  uint64_t v12 = v40;
  if (v39 == v40) {
    goto LABEL_40;
  }
  uint64_t v14 = 0;
  while (1)
  {
    size_t v15 = sub_217181960(*v13);
    if ((sub_2172F7BC4(a6, (uint64_t)v15) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v16 = *a2;
    if (*a2)
    {
      long long v17 = (std::__shared_weak_count *)v13[1];
      uint64_t v37 = *v13;
      BOOL v38 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v18 = sub_2173066F0(v16, &v37, 0);
      if (v38) {
        sub_216784EC4(v38);
      }
      if ((v18 & 1) == 0) {
        goto LABEL_39;
      }
    }
    uint64_t v19 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)*v13 + 56))(*v13);
    uint64_t v20 = v19[23];
    if ((v20 & 0x80u) == 0) {
      uint64_t v21 = v19[23];
    }
    else {
      uint64_t v21 = *((void *)v19 + 1);
    }
    uint64_t v22 = a4[23];
    int v23 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *((void *)a4 + 1);
    }
    if (v21 != v22) {
      goto LABEL_39;
    }
    if (v23 >= 0) {
      char v24 = a4;
    }
    else {
      char v24 = *(unsigned __int8 **)a4;
    }
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v19, v24, *((void *)v19 + 1))) {
        goto LABEL_39;
      }
    }
    else if (v19[23])
    {
      while (*v19 == *v24)
      {
        ++v19;
        ++v24;
        if (!--v20) {
          goto LABEL_25;
        }
      }
      goto LABEL_39;
    }
LABEL_25:
    char v36 = 0;
    uint64_t v25 = (std::__shared_weak_count *)v13[1];
    BOOL v34 = (void **)*v13;
    uint64_t v35 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t Version = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion((uint64_t *)&v34, &v36);
    char v28 = v27;
    if (v35) {
      sub_216784EC4(v35);
    }
    if (!*(unsigned char *)(a5 + 8))
    {
      if (*(void *)a5 == Version) {
        break;
      }
      goto LABEL_39;
    }
    if (v36)
    {
      uint64_t v29 = *v13;
      uint64_t v30 = (std::__shared_weak_count *)v13[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *a7 = v29;
      a7[1] = (uint64_t)v30;
      if (v14) {
        sub_216784EC4(v14);
      }
      uint64_t v14 = v30;
      goto LABEL_39;
    }
    if (v28) {
      break;
    }
LABEL_39:
    v13 += 2;
    if (v13 == v12) {
      goto LABEL_40;
    }
  }
  uint64_t v32 = *v13;
  uint64_t v31 = v13[1];
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = (std::__shared_weak_count *)a7[1];
  *a7 = v32;
  a7[1] = v31;
  if (v33) {
    sub_216784EC4(v33);
  }
LABEL_40:
  BOOL v34 = (void **)&v39;
  sub_216787968(&v34);
}

void sub_217181C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  a9 = (void **)&a14;
  sub_216787968(&a9);
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

BOOL sub_217181C8C(uint64_t a1)
{
  sub_216779094(__p, off_26798DD38[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_217181CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_217181D0C(uint64_t a1)
{
  sub_216779094(__p, off_26798DD38[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    unsigned int v3 = (long long *)(v2 + 40);
  }
  else {
    unsigned int v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_217181D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_217181D98(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    sub_217181E44((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_217181F28((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_217181E44@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_217181EB0(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217181E98(_Unwind_Exception *a1)
{
  sub_217181F28(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_217181EB0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    _OWORD __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *((_DWORD *)__dst + 6) = 3;
  __dst[4] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)__dst + 10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)__dst + 11);
  __dst[6] = 0;
  return __dst;
}

void sub_217181F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_217181F80((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_217181F80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  long long v3 = *(atomic_ullong **)(a1 + 32);
  if (v3) {
    sub_216D16E0C(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v4 = *(void **)a1;
    operator delete(v4);
  }
}

_DWORD *sub_217182000@<X0>(pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) == 0)
  {
    *(_DWORD *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v33);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v33);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, a2, (uint64_t)&v28);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v28, v8))goto LABEL_19; {
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v23, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v28);
  }
  unint64_t v23 = (unint64_t)&unk_26C76E028;
  if (!v24 || (v24[57] & 8) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v23);
  }
  else
  {
    int v9 = off_26C76E048((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v23);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v23);
    if (v9)
    {
      *(_DWORD *)a3 = LODWORD(v28);
      *(void *)(a3 + 8) = v29;
      uint64_t v29 = 0;
      sub_21697D878((_DWORD *)(a3 + 16), &v30);
      sub_21697D8B4((_DWORD *)(a3 + 20), &v31);
      *(void *)(a3 + 24) = v32;
      uint64_t v32 = 0;
      goto LABEL_36;
    }
  }
  uint64_t v12 = v29;
  if (!v29 || (*((unsigned char *)v29 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v29, v10);
  }
  if (!**((void **)v12 + 3))
  {
LABEL_19:
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_21697C414(&v30);
    if (v29) {
      sub_216D16E0C((atomic_ullong *)v29);
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v33);
    unint64_t v23 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v19, a2, (void **)&v23, a3);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (uint64_t)&v23);
    sub_216D0162C((uint64_t)a1, &v21);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(&v28, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v23, (uint64_t)&v21, (uint64_t)&v28, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_21697C414(&v25);
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)v24;
    if (!v24) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  unint64_t v23 = (unint64_t)"usdMtlx/reader.cpp";
  char v24 = "_AddReference";
  uint64_t v25 = 663;
  unint64_t v26 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_AddReference(const UsdPrim &"
                          ", const SdfPath &)";
  char v27 = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
  uint64_t v16 = v29;
  if (!v29 || (*((unsigned char *)v29 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v29, v13);
  }
  unint64_t v17 = **((void **)v16 + 3) & 0xFFFFFFFFFFFFFFF8;
  if (v17)
  {
    char v18 = (const char *)(v17 + 16);
    if (*(char *)(v17 + 39) < 0) {
      char v18 = *(const char **)v18;
    }
  }
  else
  {
    char v18 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__ *)"Can't create node graph at <%s>; a '%s' already exists",
    v14,
    Text,
    v18);
  *(_DWORD *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
  *(void *)(a3 + 24) = 0;
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_36:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_21697C414(&v30);
  uint64_t v20 = v29;
  if (v29) {
LABEL_28:
  }
    sub_216D16E0C((atomic_ullong *)v20);
LABEL_29:
  uint64_t result = v34;
  if (v34)
  {
    if (atomic_fetch_add_explicit(v34 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_21718238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)va);
  sub_216D16AD8((uint64_t)va1);
  char v6 = *(atomic_uint **)(v4 - 40);
  if (v6)
  {
    if (atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_217182460(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  char v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v8;
        char v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        char v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_21718252C(a1, a4, (uint64_t)v11);
    sub_21677B358((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    long long v8 = v11[0];
    v11[0] = 0;
    sub_2171825FC((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t sub_21718252C@<X0>(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_217182598((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217182580(_Unwind_Exception *a1)
{
  sub_2171825FC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_217182598(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 16) = 3;
  *(void *)(a1 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  *(void *)(a1 + 40) = 0;
  return a1;
}

void sub_2171825FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_217182654((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_217182654(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  uint64_t v3 = *(atomic_ullong **)(a1 + 24);
  if (v3) {
    sub_216D16E0C(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    sub_216784EC4(v4);
  }
}

void sub_2171826D0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  sub_217179EF4();
  uint64_t v10 = sub_2170396E4((void *)(*a2 + 160), (unsigned __int8 *)&qword_267B964A0);
  if (v10) {
    uint64_t v11 = (long long *)(v10 + 40);
  }
  else {
    uint64_t v11 = sub_21730D998();
  }
  uint64_t v12 = *((unsigned __int8 *)v11 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)v11 + 1);
  }
  if (!v12) {
    uint64_t v11 = sub_21730D998();
  }
  memset(&v64, 0, sizeof(v64));
  sub_2172F4170(*a2, &__p);
  sub_217169CCC((uint64_t)__p, (unsigned __int8 *)v11, &v62);
  if (v54) {
    sub_216784EC4(v54);
  }
  if (v62)
  {
    sub_217179EF4();
    sub_217179F70((long long **)&__p, (uint64_t)&v62, (unsigned __int8 *)&qword_267B96470);
    uint64_t v13 = __p;
    if (*((char *)__p + 23) < 0)
    {
      size_t v16 = *((void *)__p + 1);
      if (!v16) {
        goto LABEL_22;
      }
      uint64_t v14 = off_26798DB40[0];
      if (strlen(off_26798DB40[0]) != v16) {
        goto LABEL_22;
      }
      if (v16 == -1) {
        goto LABEL_143;
      }
      uint64_t v13 = *(void **)__p;
    }
    else
    {
      if (!*((unsigned char *)__p + 23)) {
        goto LABEL_22;
      }
      uint64_t v14 = off_26798DB40[0];
      size_t v15 = strlen(off_26798DB40[0]);
      if (v15 != *((unsigned __int8 *)__p + 23)) {
        goto LABEL_22;
      }
      size_t v16 = v15;
      if (v15 == -1) {
LABEL_143:
      }
        sub_216855AD4();
    }
    if (!memcmp(v13, v14, v16))
    {
      sub_217179EF4();
      sub_217179F70((long long **)&v67, (uint64_t)&v62, (unsigned __int8 *)&qword_267B96278);
      std::string::operator=(&v64, v67);
    }
  }
LABEL_22:
  unint64_t v61 = 0;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v60);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v64.__r_.__value_.__l.__size_;
    if (v64.__r_.__value_.__l.__size_ == 7
      && *(_DWORD *)v64.__r_.__value_.__l.__data_ == 1718777203
      && *(_DWORD *)(v64.__r_.__value_.__r.__words[0] + 3) == 1701011814)
    {
      goto LABEL_83;
    }
    if (v64.__r_.__value_.__l.__size_ == 12)
    {
      if (*(void *)v64.__r_.__value_.__l.__data_ == 0x6563616C70736964
        && *(_DWORD *)(v64.__r_.__value_.__r.__words[0] + 8) == 1953391981)
      {
        goto LABEL_83;
      }
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
    }
    if (size == 6)
    {
      if (*(_DWORD *)v64.__r_.__value_.__l.__data_ == 1970040694
        && *(_WORD *)(v64.__r_.__value_.__r.__words[0] + 4) == 25965)
      {
        goto LABEL_83;
      }
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
    }
    if (size != 5) {
      goto LABEL_63;
    }
    unint64_t v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v17 = &v64;
    switch(*((unsigned char *)&v64.__r_.__value_.__s + 23))
    {
      case 5:
        break;
      case 6:
        goto LABEL_24;
      case 7:
        int v23 = *(_DWORD *)((char *)v64.__r_.__value_.__r.__words + 3);
        BOOL v24 = LODWORD(v64.__r_.__value_.__l.__data_) == 1718777203;
        int v25 = 1701011814;
        goto LABEL_59;
      case 0xC:
        if (v64.__r_.__value_.__r.__words[0] == 0x6563616C70736964
          && LODWORD(v64.__r_.__value_.__r.__words[1]) == 1953391981)
        {
          goto LABEL_83;
        }
        if (HIBYTE(v64.__r_.__value_.__r.__words[2]) == 5) {
          goto LABEL_57;
        }
        if (HIBYTE(v64.__r_.__value_.__r.__words[2]) != 6) {
          goto LABEL_63;
        }
LABEL_24:
        if (LODWORD(v64.__r_.__value_.__l.__data_) == 1970040694 && WORD2(v64.__r_.__value_.__r.__words[0]) == 25965) {
          goto LABEL_83;
        }
        if (HIBYTE(v64.__r_.__value_.__r.__words[2]) != 5) {
          goto LABEL_63;
        }
LABEL_57:
        unint64_t v17 = &v64;
        break;
      default:
        goto LABEL_63;
    }
  }
  int data = (int)v17->__r_.__value_.__l.__data_;
  int v23 = v17->__r_.__value_.__s.__data_[4];
  BOOL v24 = data == 1751607660;
  int v25 = 116;
LABEL_59:
  if (v24 && v23 == v25)
  {
LABEL_83:
    char v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v36)
    {
LABEL_85:
      long long v60 = (void *)*((void *)v36 + 11);
      goto LABEL_86;
    }
LABEL_84:
    char v36 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    goto LABEL_85;
  }
LABEL_63:
  size_t v29 = strlen(off_26798DD90[0]);
  size_t v30 = v29;
  size_t v31 = *((unsigned __int8 *)v11 + 23);
  if (*((char *)v11 + 23) < 0)
  {
    if (v29 != *((void *)v11 + 1))
    {
      uint64_t v33 = off_26798DD98[0];
      size_t v34 = strlen(off_26798DD98[0]);
      size_t v31 = *((void *)v11 + 1);
      goto LABEL_77;
    }
    if (v29 == -1) {
      goto LABEL_142;
    }
    uint64_t v32 = *(long long **)v11;
  }
  else
  {
    if (v29 != v31)
    {
      uint64_t v33 = off_26798DD98[0];
      size_t v34 = strlen(off_26798DD98[0]);
      goto LABEL_74;
    }
    uint64_t v32 = v11;
    if (v30 == -1) {
LABEL_142:
    }
      sub_216855AD4();
  }
  if (!memcmp(v32, off_26798DD90[0], v30)) {
    goto LABEL_83;
  }
  uint64_t v33 = off_26798DD98[0];
  size_t v34 = strlen(off_26798DD98[0]);
  if ((v31 & 0x80) == 0)
  {
LABEL_74:
    uint64_t v35 = v11;
    if (v34 != v31) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  size_t v31 = *((void *)v11 + 1);
LABEL_77:
  if (v34 != v31) {
    goto LABEL_81;
  }
  if (v31 == -1) {
    sub_216855AD4();
  }
  uint64_t v35 = *(long long **)v11;
LABEL_80:
  if (!memcmp(v35, v33, v31)) {
    goto LABEL_83;
  }
LABEL_81:
  if (sub_216855A40(v11, off_26798DDA0[0]) || sub_216855A40(v11, off_26798DDA8[0])) {
    goto LABEL_83;
  }
  std::string::size_type v48 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v48 = v64.__r_.__value_.__l.__size_;
  }
  if (v48)
  {
    char v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v36) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v11, (uint64_t)&__p);
  long long v60 = __p;
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v60))
  {
    uint64_t v49 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v49) {
      uint64_t v49 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    long long v60 = (void *)*((void *)v49 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v61 = (unint64_t)__p;
  }
LABEL_86:
  uint64_t v37 = *a2;
  BOOL v38 = (std::__shared_weak_count *)a2[1];
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v37)
  {
    sub_21717C1A8(v37 + 48, (uint64_t)&v59);
    if (!v38) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  uint64_t v59 = 0;
  if (v38) {
LABEL_90:
  }
    sub_216784EC4(v38);
LABEL_91:
  uint64_t v39 = *a3;
  if (*(char *)(*a3 + 71) < 0)
  {
    sub_216778F24(__dst, *(void **)(v39 + 48), *(void *)(v39 + 56));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(v39 + 48);
    uint64_t v58 = *(void *)(v39 + 64);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v59, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v60, a5);
  LODWORD(v67) = *(_DWORD *)a5;
  uint64_t v40 = *(atomic_ullong **)(a5 + 8);
  uint64_t v68 = v40;
  if (v40) {
    atomic_fetch_add_explicit(v40 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v69, (_DWORD *)(a5 + 16));
  sub_21698105C(&v70, (_DWORD *)(a5 + 20));
  uint64_t v41 = *(void *)(a5 + 24);
  uint64_t v71 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int64_t v52 = 0;
  uint64_t v65 = &v50;
  char v66 = 0;
  uint64_t v50 = (char *)operator new(0x20uLL);
  uint64_t v51 = (uint64_t)v50;
  int64_t v52 = v50 + 32;
  uint64_t v51 = sub_217183314((uint64_t)&v52, (uint64_t)&v67, (uint64_t)&v72, (uint64_t)v50);
  sub_21718344C(&__p, (long long *)__dst, (uint64_t *)&v50);
  uint64_t v42 = (uint64_t *)sub_2171831A4((uint64_t **)(a1 + 104), (const void **)&__p, (uint64_t)&__p);
  char v44 = v43;
  uint64_t v65 = (char **)&v56;
  sub_216F752E0((void ***)&v65);
  if (v55 < 0) {
    operator delete(__p);
  }
  uint64_t v65 = &v50;
  sub_216F752E0((void ***)&v65);
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v70);
  sub_21697C414(&v69);
  if (v68) {
    sub_216D16E0C(v68);
  }
  if (!v44)
  {
    unint64_t v45 = v42[8];
    if (v45 >= v42[9])
    {
      uint64_t v46 = sub_216F8578C(v42 + 7, a5);
    }
    else
    {
      sub_216D3B3EC((uint64_t)(v42 + 9), v42[8], a5);
      uint64_t v46 = v45 + 32;
      v42[8] = v45 + 32;
    }
    v42[8] = v46;
  }
  if (v61) {
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v61);
  }
  unint64_t v47 = (std::__shared_weak_count *)a2[1];
  std::string __p = (void *)*a2;
  unint64_t v54 = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21717E558(a5, (uint64_t)&__p);
  if (v47) {
    sub_216784EC4(v47);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst[0]);
  }
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63) {
    sub_216784EC4(v63);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
}

void sub_217182F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((a28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a30) {
    sub_216784EC4(a30);
  }
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217183070(void *a1, void *a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      char v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      char v6 = a3[1];
    }
    if (v5 >= 0) {
      unint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0) {
        unint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      }
      else {
        unint64_t v9 = (unsigned __int8 *)v3[5];
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5])) {
            return v3;
          }
        }
        else
        {
          if (!*((unsigned char *)v3 + 55)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      uint64_t v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

uint64_t sub_217183158(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_216F752E0(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_OWORD *sub_2171831A4(uint64_t **a1, const void **a2, uint64_t a3)
{
  char v5 = (void **)sub_21677B220((uint64_t)a1, &v11, a2);
  char v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    char v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    char v10 = 1;
    sub_21677B358(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_217183274((uint64_t)v9, 0);
  }
  return v6;
}

void sub_217183274(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2171832CC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_2171832CC(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_216F752E0(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_217183314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216D3B3EC(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2171833C0((uint64_t)v9);
  return v4;
}

void sub_2171833AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171833C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171833F8((uint64_t *)a1);
  }
  return a1;
}

void sub_2171833F8(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 32;
      sub_216F75378(v5, v3);
    }
    while (v3 != v4);
  }
}

void *sub_21718344C(void *__dst, long long *a2, uint64_t *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    _OWORD __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_2171834D8(__dst + 3, *a3, a3[1], (a3[1] - *a3) >> 5);
  return __dst;
}

void sub_2171834BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171834D8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168C5234(result, a4);
    uint64_t result = (void *)sub_217183560((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_217183540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216F752E0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_217183560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216D3B3EC(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2171833C0((uint64_t)v9);
  return v4;
}

void sub_2171835F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_21718360C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_2172F32BC(*a1, &v49);
  if (!v49) {
    goto LABEL_16;
  }
  sub_217179EF4();
  sub_217179F70(&v45, (uint64_t)&v49, (unsigned __int8 *)&qword_267B963E0);
  long long v5 = v45;
  if ((*((char *)v45 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v45 + 23)) {
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v56 = "usdMtlx/reader.cpp";
    uint64_t v57 = (atomic_ullong *)"_ConnectPorts";
    uint64_t v58 = 1118;
    unint64_t v59 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    char v60 = 0;
    if (*((char *)v45 + 23) < 0) {
      long long v5 = *(long long **)v45;
    }
    sub_216D0162C(a2, (int *)&v43);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
    sub_216D0162C(a3, &v54);
    unint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Dropped member %s between <%s> -> <%s>", v8, v5, Text, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
    sub_21697C414(&v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
    goto LABEL_9;
  }
  if (*((void *)v45 + 1)) {
    goto LABEL_6;
  }
LABEL_9:
  sub_217179EF4();
  sub_217179F70(&v45, (uint64_t)&v49, (unsigned __int8 *)&qword_267B96218);
  uint64_t v9 = v45;
  if (*((char *)v45 + 23) < 0)
  {
    if (!*((void *)v45 + 1)) {
      goto LABEL_16;
    }
  }
  else if (!*((unsigned char *)v45 + 23))
  {
    goto LABEL_16;
  }
  uint64_t v56 = "usdMtlx/reader.cpp";
  uint64_t v57 = (atomic_ullong *)"_ConnectPorts";
  uint64_t v58 = 1126;
  unint64_t v59 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts"
                          "(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::Usd"
                          "ShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
  char v60 = 0;
  if (*((char *)v45 + 23) < 0) {
    uint64_t v9 = *(long long **)v45;
  }
  sub_216D0162C(a2, (int *)&v43);
  char v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
  sub_216D0162C(a3, &v54);
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Dropped swizzle %s between <%s> -> <%s>", v12, v9, v10, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
  sub_21697C414(&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
  sub_21697C414(&v43);
LABEL_16:
  if (v50) {
    sub_216784EC4(v50);
  }
  if (sub_21717B790(0))
  {
    sub_216D0162C(a2, (int *)&v56);
    BOOL v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    sub_216D0162C(a3, (int *)&v49);
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v49);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v15, v16, v13, v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
    sub_21697C414(&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_21697C414(&v56);
  }
  sub_216D0162C(a2, &v54);
  sub_216D16CFC((uint64_t)&v49, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  sub_216D16CFC((uint64_t)&v45, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_216D6B1F8((uint64_t)&v49, (uint64_t)&v56);
  if (v56 == v45
    && v57 == v46
    && v58 == v47
    && (unint64_t v17 = v59, (v59 & 0xFFFFFFFFFFFFFFF8) == (v48 & 0xFFFFFFFFFFFFFFF8)))
  {
    int v18 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v43, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45);
    char v43 = &unk_26C76E028;
    if (!v44 || (*(unsigned char *)(v44 + 57) & 8) != 0) {
      int v18 = 0;
    }
    else {
      int v18 = off_26C76E048((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v43);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v43);
    unint64_t v17 = v59;
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
  sub_21697C414(&v58);
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v57;
  if (v57) {
    sub_216D16E0C(v57);
  }
  if (v18)
  {
    StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v19);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v21);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v49, SchemaInfo, v23))
    {
      sub_216D6B1F8((uint64_t)&v49, (uint64_t)&v56);
      sub_216D0162C((uint64_t)&v56, (int *)&v43);
      if ((v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_21697C414(&v58);
      if (v57) {
        sub_216D16E0C(v57);
      }
    }
    else
    {
      sub_216D0162C((uint64_t)&v49, (int *)&v43);
    }
    sub_216D0162C((uint64_t)&v45, (int *)&v56);
    NameTokestd::string::size_type n = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, NameToken, &v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_21697C414(&v56);
    sub_217182000((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v45, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v41, (uint64_t)&v56);
    sub_216D0162C((uint64_t)&v56, &v37);
    sub_216D0162C(a2, &v35);
    int v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, v25, &v39);
    sub_21697DE94(&v54, &v39);
    sub_21697DEEC(&v55, &v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
    sub_21697C414(&v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_21697C414(&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
    sub_21697C414(&v37);
    if ((v59 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_21697C414(&v58);
    if (v57) {
      sub_216D16E0C(v57);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
    sub_21697C414(&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54))
  {
    if (!sub_21717B790(0)) {
      goto LABEL_50;
    }
    unint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
    sub_216D0162C(a3, (int *)&v56);
    char v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v28, v29, v26, v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    size_t v30 = &v56;
  }
  else
  {
    uint64_t v56 = "usdMtlx/reader.cpp";
    uint64_t v57 = (atomic_ullong *)"_ConnectPorts";
    uint64_t v58 = 1164;
    unint64_t v59 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    char v60 = 0;
    size_t v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
    sub_216D0162C(a3, (int *)&v43);
    uint64_t v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Failed to connect <%s> -> <%s>", v33, v31, v32);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    size_t v30 = (char **)&v43;
  }
  sub_21697C414(v30);
LABEL_50:
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v46) {
    sub_216D16E0C(v46);
  }
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
  sub_21697C414(&v51);
  if (v50) {
    sub_216D16E0C((atomic_ullong *)v50);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
  return sub_21697C414(&v54);
}

void sub_217183C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_216D16AD8((uint64_t)va1);
  sub_21697B754((_DWORD *)(v11 - 112));
  _Unwind_Resume(a1);
}

_DWORD *sub_217183E34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_2172F32BC(*a1, &v49);
  if (!v49) {
    goto LABEL_16;
  }
  sub_217179EF4();
  sub_217179F70(&v45, (uint64_t)&v49, (unsigned __int8 *)&qword_267B963E0);
  long long v5 = v45;
  if ((*((char *)v45 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v45 + 23)) {
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v56 = "usdMtlx/reader.cpp";
    uint64_t v57 = (atomic_ullong *)"_ConnectPorts";
    uint64_t v58 = 1118;
    unint64_t v59 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    char v60 = 0;
    if (*((char *)v45 + 23) < 0) {
      long long v5 = *(long long **)v45;
    }
    sub_216D0162C(a2, (int *)&v43);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
    sub_216D0162C(a3, &v54);
    unint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Dropped member %s between <%s> -> <%s>", v8, v5, Text, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
    sub_21697C414(&v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
    goto LABEL_9;
  }
  if (*((void *)v45 + 1)) {
    goto LABEL_6;
  }
LABEL_9:
  sub_217179EF4();
  sub_217179F70(&v45, (uint64_t)&v49, (unsigned __int8 *)&qword_267B96218);
  uint64_t v9 = v45;
  if (*((char *)v45 + 23) < 0)
  {
    if (!*((void *)v45 + 1)) {
      goto LABEL_16;
    }
  }
  else if (!*((unsigned char *)v45 + 23))
  {
    goto LABEL_16;
  }
  uint64_t v56 = "usdMtlx/reader.cpp";
  uint64_t v57 = (atomic_ullong *)"_ConnectPorts";
  uint64_t v58 = 1126;
  unint64_t v59 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts"
                          "(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::Usd"
                          "ShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
  char v60 = 0;
  if (*((char *)v45 + 23) < 0) {
    uint64_t v9 = *(long long **)v45;
  }
  sub_216D0162C(a2, (int *)&v43);
  char v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
  sub_216D0162C(a3, &v54);
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Dropped swizzle %s between <%s> -> <%s>", v12, v9, v10, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
  sub_21697C414(&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
  sub_21697C414(&v43);
LABEL_16:
  if (v50) {
    sub_216784EC4(v50);
  }
  if (sub_21717B790(0))
  {
    sub_216D0162C(a2, (int *)&v56);
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    sub_216D0162C(a3, (int *)&v49);
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v49);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v15, v16, v13, v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
    sub_21697C414(&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_21697C414(&v56);
  }
  sub_216D0162C(a2, &v54);
  sub_216D16CFC((uint64_t)&v49, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  sub_216D16CFC((uint64_t)&v45, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_216D6B1F8((uint64_t)&v49, (uint64_t)&v56);
  if (v56 == v45
    && v57 == v46
    && v58 == v47
    && (unint64_t v17 = v59, (v59 & 0xFFFFFFFFFFFFFFF8) == (v48 & 0xFFFFFFFFFFFFFFF8)))
  {
    int v18 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v43, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45);
    char v43 = &unk_26C76E028;
    if (!v44 || (*(unsigned char *)(v44 + 57) & 8) != 0) {
      int v18 = 0;
    }
    else {
      int v18 = off_26C76E048((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v43);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v43);
    unint64_t v17 = v59;
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
  sub_21697C414(&v58);
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v57;
  if (v57) {
    sub_216D16E0C(v57);
  }
  if (v18)
  {
    StaticTfuint64_t Type = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v19);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v21);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v49, SchemaInfo, v23))
    {
      sub_216D6B1F8((uint64_t)&v49, (uint64_t)&v56);
      sub_216D0162C((uint64_t)&v56, (int *)&v43);
      if ((v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_21697C414(&v58);
      if (v57) {
        sub_216D16E0C(v57);
      }
    }
    else
    {
      sub_216D0162C((uint64_t)&v49, (int *)&v43);
    }
    sub_216D0162C((uint64_t)&v45, (int *)&v56);
    NameTokestd::string::size_type n = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, NameToken, &v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_21697C414(&v56);
    sub_217182000((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v45, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v41, (uint64_t)&v56);
    sub_216D0162C((uint64_t)&v56, &v37);
    sub_216D0162C(a2, &v35);
    int v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, v25, &v39);
    sub_21697DE94(&v54, &v39);
    sub_21697DEEC(&v55, &v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
    sub_21697C414(&v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_21697C414(&v35);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
    sub_21697C414(&v37);
    if ((v59 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_21697C414(&v58);
    if (v57) {
      sub_216D16E0C(v57);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
    sub_21697C414(&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54))
  {
    if (!sub_21717B790(0)) {
      goto LABEL_50;
    }
    unint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
    sub_216D0162C(a3, (int *)&v56);
    char v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v28, v29, v26, v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    size_t v30 = &v56;
  }
  else
  {
    uint64_t v56 = "usdMtlx/reader.cpp";
    uint64_t v57 = (atomic_ullong *)"_ConnectPorts";
    uint64_t v58 = 1164;
    unint64_t v59 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    char v60 = 0;
    size_t v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
    sub_216D0162C(a3, (int *)&v43);
    uint64_t v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__ *)"Failed to connect <%s> -> <%s>", v33, v31, v32);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    size_t v30 = (char **)&v43;
  }
  sub_21697C414(v30);
LABEL_50:
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47 + 1);
  sub_21697C414(&v47);
  if (v46) {
    sub_216D16E0C(v46);
  }
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
  sub_21697C414(&v51);
  if (v50) {
    sub_216D16E0C((atomic_ullong *)v50);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
  return sub_21697C414(&v54);
}

void sub_2171844BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_216D16AD8((uint64_t)va1);
  sub_21697B754((_DWORD *)(v11 - 112));
  _Unwind_Resume(a1);
}

void **sub_21718465C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_217184778(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_217184764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217184778(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171847F0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171847F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_217184884((uint64_t)v12);
  return v10;
}

uint64_t sub_217184884(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t *sub_2171848BC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_217184968((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2171849FC((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_217184968@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2171849E4(_Unwind_Exception *a1)
{
  sub_2171849FC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2171849FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717AD88((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_217184A54(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_217184A54(a1, *a2);
    sub_217184A54(a1, a2[1]);
    sub_2171832CC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_217184AB0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_217184AB0(a1, *a2);
    sub_217184AB0(a1, a2[1]);
    sub_217182654((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_217184B0C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_217184B0C(a1, *a2);
    sub_217184B0C(a1, a2[1]);
    sub_217181F80((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_217184B68(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_217184BC0(a1, *a2, a2 + 1);
  return a1;
}

void sub_217184BA8(_Unwind_Exception *a1)
{
  sub_21717AD2C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_217184BC0(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_217184C4C(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_217184C4C(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = sub_216789A4C(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_217184CE4((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2171849FC((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_217184CE4@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_217184D50(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217184D38(_Unwind_Exception *a1)
{
  sub_2171849FC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_217184D50(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    _OWORD __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = *((void *)a2 + 3);
  __dst[3] = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    __dst[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return __dst;
}

void sub_217184DCC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_216779094(__p, off_26798DDB0[0]);
  sub_217184F64(a1, (uint64_t)__p, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_217184E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_217184E48(uint64_t a1@<X0>, const void **a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v5 = sub_21678C2D8(a1 + 128, a2);
  if (a1 + 136 == v5)
  {
    int v6 = 1;
    uint64_t v7 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v9);
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
    *(void *)a3 = &unk_26C76DAD0;
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    if (v7) {
      sub_216D16E0C(v7);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v5 + 56));
    *(void *)a3 = &unk_26C76DAD0;
  }
}

void sub_217184F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_217184F64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = sub_21730D998();
  sub_217169D68(a1, (uint64_t)v6, (uint64_t *)&v18);
  uint64_t v7 = v18;
  int v8 = v19;
  if (v18 != v19)
  {
    while (1)
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v7[1];
      *(void *)&long long v17 = *v7;
      *((void *)&v17 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
      uint64_t v12 = v11[23];
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v11[23];
      }
      else {
        uint64_t v13 = *((void *)v11 + 1);
      }
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a2 + 8);
      }
      if (v13 != v14) {
        goto LABEL_20;
      }
      uint64_t v16 = v15 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v12 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)v11, v16, *((void *)v11 + 1))) {
        goto LABEL_19;
      }
LABEL_20:
      if (*((void *)&v17 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
      }
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_23;
      }
    }
    if (v11[23])
    {
      while (*v11 == *v16)
      {
        ++v11;
        ++v16;
        if (!--v12) {
          goto LABEL_19;
        }
      }
      goto LABEL_20;
    }
LABEL_19:
    sub_217169ECC(a3, &v17);
    goto LABEL_20;
  }
LABEL_23:
  *(void *)&long long v17 = &v18;
  sub_216787968((void ***)&v17);
}

void sub_2171850B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216787968((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171850EC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    sub_217185198((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_217185230((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_217185198@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217185218(_Unwind_Exception *a1)
{
  sub_217185230(v1, 0);
  _Unwind_Resume(a1);
}

void sub_217185230(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717A964((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_217185288(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    sub_217185334((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2171854C0((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_217185334@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v8 = *a2;
  uint64_t result = sub_2171853B4((uint64_t)v6 + 32, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21718539C(_Unwind_Exception *a1)
{
  sub_2171854C0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2171853B4(uint64_t a1, long long **a2)
{
  uint64_t v3 = *a2;
  long long v4 = **a2;
  *(void *)(a1 + 16) = *((void *)*a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = 0;
  int v6 = 1;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v9);
  uint64_t v10 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = off_26C76D8C8;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return a1;
}

void sub_21718549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D16AD8((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void sub_2171854C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717AA14((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_217185518(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v31 = *a2;
  uint64_t v32 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = sub_21730D998();
  sub_2173077AC(&v31, a3, (uint64_t)v6, (uint64_t *)&v33);
  if (v32) {
    sub_216784EC4(v32);
  }
  uint64_t v7 = v33;
  for (uint64_t i = v34; v7 != i; v7 += 2)
  {
    uint64_t v10 = *v7;
    uint64_t v9 = (std::__shared_weak_count *)v7[1];
    v30[0] = *v7;
    v30[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (sub_21717B790(0))
    {
      uint64_t v13 = (void *)(v10 + 48);
      if (*(char *)(v10 + 71) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      if ((a3[23] & 0x80u) == 0) {
        uint64_t v14 = (uint64_t *)a3;
      }
      else {
        uint64_t v14 = *(uint64_t **)a3;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding shaderNode '%s' type: '%s'\n", v11, v12, v13, v14);
    }
    int v22 = (void **)v10;
    int v23 = (const char *)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_217185824(a1, (uint64_t *)&v22, (uint64_t)&v28);
    if (v9) {
      sub_216784EC4(v9);
    }
    if (v29 && (*(unsigned char *)(v29 + 57) & 8) == 0 && ((*(uint64_t (**)(uint64_t *))(v28 + 32))(&v28) & 1) != 0) {
      goto LABEL_39;
    }
    sub_217179EF4();
    sub_217179F70(&v27, (uint64_t)v30, (unsigned __int8 *)&qword_267B963F8);
    uint64_t v16 = v27;
    if (*((char *)v27 + 23) < 0)
    {
      if (*((void *)v27 + 1))
      {
LABEL_24:
        int v22 = (void **)"usdMtlx/reader.cpp";
        int v23 = "_TranslateShaderNodes";
        uint64_t v24 = 2344;
        int v25 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::"
              "NodePtr &, const std::string &)";
        char v26 = 0;
        long long v17 = (void *)(v10 + 48);
        if (*(char *)(v10 + 71) < 0) {
          long long v17 = (void *)*v17;
        }
        if (*((char *)v27 + 23) < 0) {
          uint64_t v16 = *(long long **)v27;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"Failed to create shaderNode '%s' to nodedef '%s'", v15, v17, v16);
        goto LABEL_39;
      }
    }
    else if (*((unsigned char *)v27 + 23))
    {
      goto LABEL_24;
    }
    sub_217179EF4();
    sub_217179F70(&v21, (uint64_t)v30, (unsigned __int8 *)&qword_267B96440);
    uint64_t v19 = v21;
    if (*((char *)v21 + 23) < 0)
    {
      if (*((void *)v21 + 1))
      {
LABEL_34:
        int v22 = (void **)"usdMtlx/reader.cpp";
        int v23 = "_TranslateShaderNodes";
        uint64_t v24 = 2350;
        int v25 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::"
              "NodePtr &, const std::string &)";
        char v26 = 0;
        uint64_t v20 = (void *)(v10 + 48);
        if (*(char *)(v10 + 71) < 0) {
          uint64_t v20 = (void *)*v20;
        }
        if (*((char *)v21 + 23) < 0) {
          uint64_t v19 = *(long long **)v21;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v22, (pxrInternal__aapl__pxrReserved__ *)"Failed to create shaderNode '%s' to node '%s'", v18, v20, v19);
      }
    }
    else if (*((unsigned char *)v21 + 23))
    {
      goto LABEL_34;
    }
LABEL_39:
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v28);
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  int v22 = (void **)&v33;
  sub_216787968(&v22);
}

void sub_2171857B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_216784EC4(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_217185824(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v205 = *MEMORY[0x263EF8340];
  long long v159 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 34);
  uint64_t v5 = a1[35];
  if (!v5
    || (*(unsigned char *)(v5 + 57) & 8) != 0
    || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(void *)v159 + 32))(v159) & 1) == 0)
  {
    v198.__vftable = (std::type_info_vtbl *)"usdMtlx/reader.cpp";
    v198.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"AddShaderNode";
    uint64_t v199 = 1517;
    unint64_t v200 = (unint64_t)"UsdShadeShader pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::AddShader"
                             "Node(const mx::ConstNodePtr &)";
    LOBYTE(v201) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v198, "_usdMaterial", 0) & 1) == 0)
    {
      sub_217015D2C((uint64_t)&v198);
      *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v198) = &unk_26C76DDF0;
      sub_216D16AD8((uint64_t)&v198);
      return;
    }
  }
  int v6 = (std::string *)*a2;
  uint64_t v7 = sub_21730D998();
  sub_2173082D4(v6, (uint64_t)v7, 0, (uint64_t *)&v198);
  uint64_t v155 = a1;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__shared_weak_count *)v198.__type_name;
  int v8 = v198.__vftable;
  std::type_info v189 = v198;
  if (!v198.__vftable)
  {
    std::string::size_type v10 = a2[1];
    v178.__r_.__value_.__r.__words[0] = *a2;
    v178.__r_.__value_.__l.__size_ = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion((uint64_t *)&v178, 0);
    sub_217181960(*a2);
    unint64_t v193 = 0;
    int v194 = 0;
    sub_217181664(a2, (uint64_t *)&v193, (uint64_t *)&v198);
    uint64_t v163 = v198.__vftable;
    std::type_info v189 = v198;
    if (type_name) {
      sub_216784EC4(type_name);
    }
    if (v178.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)v178.__r_.__value_.__l.__size_);
    }
    int v8 = v163;
    if (!v163)
    {
      unint64_t v188 = 0;
      goto LABEL_314;
    }
  }
  uint64_t v11 = v8 + 3;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v188);
  if (!v188)
  {
LABEL_314:
    LODWORD(v198.__vftable) = 1;
    v198.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v199);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v199 + 1);
    unint64_t v200 = 0;
    *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v198) = &unk_26C76DDF0;
    if ((v200 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
    sub_21697C414(&v199);
    if (v198.__type_name) {
      sub_216D16E0C((atomic_ullong *)v198.__type_name);
    }
    goto LABEL_318;
  }
  uint64_t v12 = (std::__shared_weak_count *)v189.__type_name;
  if (v189.__type_name) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v189.__type_name + 8), 1uLL, memory_order_relaxed);
  }
  sub_21717C1A8((uint64_t)&v8[3], (uint64_t)&v187);
  if (v12) {
    sub_216784EC4(v12);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v187, &v185);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v185, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v193);
  unint64_t v153 = a2;
  if (!v194
    || (*((unsigned char *)v194 + 57) & 8) != 0
    || ((*(uint64_t (**)(unint64_t *))(v193 + 32))(&v193) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v185, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v198);
    uint64_t v13 = (std::type_info **)v198.__type_name;
    if (v198.__type_name) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v198.__type_name + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (atomic_ullong *)v194;
    int v194 = v13;
    if (v14) {
      sub_216D16E0C(v14);
    }
    sub_2169C487C(&v195, &v199);
    sub_2169C48D4(&v196, (_DWORD *)&v199 + 1);
    if (!v194 || (*((unsigned char *)v194 + 57) & 8) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v198);
    }
    else
    {
      int v15 = (*(uint64_t (**)(unint64_t *))(v193 + 32))(&v193);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v198);
      if (v15)
      {
        BOOL v16 = sub_21717B790(0);
        if (v16)
        {
          if (SHIBYTE(v8[4].~type_info) < 0) {
            uint64_t v11 = (std::type_info_vtbl *)v11->~type_info;
          }
          if ((v187 & 0xFFFFFFFFFFFFFFF8) != 0) {
            EmptyString = (uint64_t *)((v187 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v16);
          }
          if (*((char *)EmptyString + 23) < 0) {
            EmptyString = (uint64_t *)*EmptyString;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Created shader mtlx %s, as usd %s\n", v17, v18, v11, EmptyString);
        }
        unint64_t v95 = v188;
        if ((v188 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v188 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v95 &= 0xFFFFFFFFFFFFFFF8;
        }
        v198.__vftable = (std::type_info_vtbl *)v95;
        v198.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70
                         + 1;
        if ((v95 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v198.__vftable = (std::type_info_vtbl *)((unint64_t)v198.__vftable & 0xFFFFFFFFFFFFFFF8);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v193, &v198, 0, (uint64_t)v180);
        if ((v184 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v183);
        sub_21697C414(&v182);
        if (v181) {
          sub_216D16E0C(v181);
        }
        sub_2168EE084((uint64_t)&v198);
        if ((v95 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v193, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v198);
        sub_216D16CFC((uint64_t)&v178, (uint64_t *)&v194, &v195);
        uint64_t v96 = (std::__shared_weak_count *)a2[1];
        std::string::size_type v176 = *a2;
        uint64_t v177 = v96;
        if (v96) {
          atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_21717E558((uint64_t)&v178, (uint64_t)&v176);
        if (v96) {
          sub_216784EC4(v96);
        }
        if ((v179 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
        sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
        if (v178.__r_.__value_.__l.__size_) {
          sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
        }
        sub_21717E884((uint64_t *)&v189, (uint64_t *)&v176);
        uint64_t v97 = (uint64_t *)v176;
        uint64_t v157 = v177;
        if ((std::__shared_weak_count *)v176 != v177)
        {
          do
          {
            int v162 = v97;
            uint64_t v98 = *v97;
            uint64_t v99 = sub_21730D998();
            sub_21717FD64(v98, (uint64_t)v99, (uint64_t *)&v175);
            uint64_t v101 = (uint64_t *)*((void *)&v175 + 1);
            for (uint64_t i = (uint64_t *)v175; i != v101; i += 2)
            {
              uint64_t v102 = *i;
              unint64_t v103 = (std::__shared_weak_count *)i[1];
              if (v103)
              {
                atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_217179EF4();
              uint64_t v104 = sub_2170396E4((void *)(v102 + 160), (unsigned __int8 *)&qword_267B964A0);
              if (v104) {
                uint64_t v105 = (long long *)(v104 + 40);
              }
              else {
                uint64_t v105 = sub_21730D998();
              }
              uint64_t v106 = *((unsigned __int8 *)v105 + 23);
              if ((v106 & 0x80u) != 0) {
                uint64_t v106 = *((void *)v105 + 1);
              }
              if (!v106) {
                uint64_t v105 = sub_21730D998();
              }
              memset(&v178, 0, sizeof(v178));
              sub_2172F4170(v102, &v191);
              sub_217169CCC(v191, (unsigned __int8 *)v105, &v192);
              if (*((void *)&v191 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v191 + 1));
              }
              if ((void)v192)
              {
                sub_217179EF4();
                sub_217179F70((long long **)&v191, (uint64_t)&v192, (unsigned __int8 *)&qword_267B96470);
                long long v107 = (const void *)v191;
                if (*(char *)(v191 + 23) < 0)
                {
                  size_t v110 = *(void *)(v191 + 8);
                  if (!v110) {
                    goto LABEL_373;
                  }
                  unint64_t v108 = off_26798DB40[0];
                  if (strlen(off_26798DB40[0]) != v110) {
                    goto LABEL_373;
                  }
                  if (v110 == -1) {
LABEL_486:
                  }
                    sub_216855AD4();
                  long long v107 = *(const void **)v191;
                }
                else
                {
                  if (!*(unsigned char *)(v191 + 23)) {
                    goto LABEL_373;
                  }
                  unint64_t v108 = off_26798DB40[0];
                  size_t v109 = strlen(off_26798DB40[0]);
                  if (v109 != *(unsigned __int8 *)(v191 + 23)) {
                    goto LABEL_373;
                  }
                  size_t v110 = v109;
                  if (v109 == -1) {
                    goto LABEL_486;
                  }
                }
                if (!memcmp(v107, v108, v110))
                {
                  sub_217179EF4();
                  sub_217179F70((long long **)&v190, (uint64_t)&v192, (unsigned __int8 *)&qword_267B96278);
                  std::string::operator=(&v178, v190);
                }
              }
LABEL_373:
              if (sub_21717B790(0))
              {
                std::string::size_type v113 = (void *)(v102 + 48);
                if (*(char *)(v102 + 71) < 0) {
                  std::string::size_type v113 = (void *)*v113;
                }
                unint64_t v114 = v105;
                if (*((char *)v105 + 23) < 0) {
                  unint64_t v114 = *(long long **)v105;
                }
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add shader output %s of type %s\n", v111, v112, v113, v114);
              }
              unsigned __int8 v115 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
              int v116 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v178.__r_.__value_.__l.__size_ != 7) {
                  goto LABEL_388;
                }
                uint64_t v117 = (std::string *)v178.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (HIBYTE(v178.__r_.__value_.__r.__words[2]) != 7) {
                  goto LABEL_388;
                }
                uint64_t v117 = &v178;
              }
              int data = (int)v117->__r_.__value_.__l.__data_;
              int v119 = *(_DWORD *)((char *)v117->__r_.__value_.__r.__words + 3);
              if (data == 1718777203 && v119 == 1701011814)
              {
LABEL_399:
                uint64_t v126 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v126) {
                  uint64_t v126 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                uint64_t v127 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                if (!v127) {
                  uint64_t v127 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                }
                unint64_t v128 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v126 + 208);
                goto LABEL_468;
              }
LABEL_388:
              size_t v121 = strlen(off_26798DD90[0]);
              size_t v122 = v121;
              uint64_t v123 = *((unsigned __int8 *)v105 + 23);
              if (*((char *)v105 + 23) < 0)
              {
                if (v121 != *((void *)v105 + 1)) {
                  goto LABEL_396;
                }
                if (v121 == -1) {
LABEL_485:
                }
                  sub_216855AD4();
                std::string::size_type v124 = *(long long **)v105;
              }
              else
              {
                if (v121 != v123) {
                  goto LABEL_396;
                }
                std::string::size_type v124 = v105;
                if (v122 == -1) {
                  goto LABEL_485;
                }
              }
              if (!memcmp(v124, off_26798DD90[0], v122)) {
                goto LABEL_399;
              }
LABEL_396:
              if ((v116 & 0x80) != 0)
              {
                if (v178.__r_.__value_.__l.__size_ != 12) {
                  goto LABEL_410;
                }
                uint64_t v125 = (std::string *)v178.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (v116 != 12) {
                  goto LABEL_410;
                }
                uint64_t v125 = &v178;
              }
              std::string::size_type v129 = v125->__r_.__value_.__r.__words[0];
              int v130 = v125->__r_.__value_.__r.__words[1];
              if (v129 == 0x6563616C70736964 && v130 == 1953391981)
              {
LABEL_420:
                int v136 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v136) {
                  int v136 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                uint64_t v127 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                if (!v127) {
                  uint64_t v127 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                }
                unint64_t v128 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v136 + 32);
                goto LABEL_468;
              }
LABEL_410:
              size_t v132 = strlen(off_26798DD98[0]);
              size_t v133 = v132;
              if ((v123 & 0x80) != 0)
              {
                if (v132 != *((void *)v105 + 1)) {
                  goto LABEL_417;
                }
                if (v132 == -1) {
                  sub_216855AD4();
                }
                std::string::size_type v134 = *(long long **)v105;
              }
              else
              {
                std::string::size_type v134 = v105;
                if (v133 != v123) {
                  goto LABEL_417;
                }
              }
              if (!memcmp(v134, off_26798DD98[0], v133)) {
                goto LABEL_420;
              }
LABEL_417:
              if ((v116 & 0x80) != 0)
              {
                if (v178.__r_.__value_.__l.__size_ != 6) {
                  goto LABEL_431;
                }
                long long v135 = (std::string *)v178.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (v116 != 6) {
                  goto LABEL_431;
                }
                long long v135 = &v178;
              }
              int v137 = (int)v135->__r_.__value_.__l.__data_;
              int v138 = WORD2(v135->__r_.__value_.__r.__words[0]);
              if (v137 == 1970040694 && v138 == 25965)
              {
LABEL_441:
                uint64_t v144 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v144) {
                  uint64_t v144 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                uint64_t v127 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                if (!v127) {
                  uint64_t v127 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                }
                unint64_t v128 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v144 + 232);
                goto LABEL_468;
              }
LABEL_431:
              size_t v140 = strlen(off_26798DDA0[0]);
              size_t v141 = v140;
              if ((v123 & 0x80) != 0)
              {
                if (v140 != *((void *)v105 + 1)) {
                  goto LABEL_438;
                }
                if (v140 == -1) {
                  sub_216855AD4();
                }
                unint64_t v142 = *(long long **)v105;
              }
              else
              {
                unint64_t v142 = v105;
                if (v141 != v123) {
                  goto LABEL_438;
                }
              }
              if (!memcmp(v142, off_26798DDA0[0], v141)) {
                goto LABEL_441;
              }
LABEL_438:
              if ((v116 & 0x80) != 0)
              {
                if (v178.__r_.__value_.__l.__size_ != 5) {
                  goto LABEL_452;
                }
                uint64_t v143 = (std::string *)v178.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (v116 != 5) {
                  goto LABEL_452;
                }
                uint64_t v143 = &v178;
              }
              int v145 = (int)v143->__r_.__value_.__l.__data_;
              int v146 = v143->__r_.__value_.__s.__data_[4];
              if (v145 == 1751607660 && v146 == 116)
              {
LABEL_466:
                unint64_t v128 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_217188E34();
                uint64_t v127 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                if (!v127) {
                  uint64_t v127 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                }
LABEL_468:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v198, v128, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v127 + 88), (uint64_t)&v170);
                goto LABEL_469;
              }
LABEL_452:
              size_t v148 = strlen(off_26798DDA8[0]);
              size_t v149 = v148;
              if ((v123 & 0x80) != 0)
              {
                if (v148 != *((void *)v105 + 1)) {
                  goto LABEL_459;
                }
                if (v148 == -1) {
                  sub_216855AD4();
                }
                v150 = *(long long **)v105;
              }
              else
              {
                v150 = v105;
                if (v149 != v123) {
                  goto LABEL_459;
                }
              }
              if (!memcmp(v150, off_26798DDA8[0], v149)) {
                goto LABEL_466;
              }
LABEL_459:
              std::string::size_type size = v115;
              if ((v116 & 0x80u) != 0) {
                std::string::size_type size = v178.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v191);
                uint64_t v152 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                if (!v152) {
                  uint64_t v152 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v191, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v152 + 88), (uint64_t)&v170);
                if ((v191 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v191 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
              else
              {
                int v170 = 3;
                int v171 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v172);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v173);
                uint64_t v174 = 0;
              }
LABEL_469:
              if (*((void *)&v192 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v192 + 1));
              }
              if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v178.__r_.__value_.__l.__data_);
              }
              if ((v174 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v173);
              sub_21697C414(&v172);
              if (v171) {
                sub_216D16E0C(v171);
              }
              if (v103)
              {
                sub_216784EC4(v103);
                sub_216784EC4(v103);
              }
            }
            v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
            sub_216787968((void ***)&v178);
            uint64_t v97 = v162 + 2;
          }
          while (v162 + 2 != (uint64_t *)v157);
        }
        v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
        sub_216787968((void ***)&v178);
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v198);
        a2 = v153;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v193);
  sub_216D1E2AC((uint64_t)v159, &v198);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v187, &v190);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v198.__vftable + 1);
  sub_21697C414(&v198);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(v155, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v190, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
  sub_216D16CFC((uint64_t)&v178, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v178, (uint64_t)&v198);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v193, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v198, (uint64_t)&v185, (uint64_t)&v193, 1);
  if ((v200 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
  sub_21697C414(&v199);
  if (v198.__type_name) {
    sub_216D16E0C((atomic_ullong *)v198.__type_name);
  }
  if ((v179 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
  sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
  if (v178.__r_.__value_.__l.__size_) {
    sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v198, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
  unint64_t v200 = 0;
  v198.__vftable = (std::type_info_vtbl *)off_26C76D8C8;
  v178.__r_.__value_.__r.__words[0] = v155[32] + 48;
  uint64_t v20 = sub_2171850EC((uint64_t **)v155 + 28, (const void **)v178.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v178);
  v178.__r_.__value_.__r.__words[0] = *a2 + 48;
  int v21 = sub_21718909C((uint64_t **)v20 + 7, (const void **)v178.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v178);
  int v22 = v21;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v23 = v198.__type_name;
  if (v198.__type_name) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v198.__type_name + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = (atomic_ullong *)v21[8];
  unsigned char v22[8] = v23;
  if (v24) {
    sub_216D16E0C(v24);
  }
  sub_2169C487C((int *)v22 + 18, &v199);
  sub_2169C48D4((int *)v22 + 19, (_DWORD *)&v199 + 1);
  sub_2168D2318(v22 + 10, &v200);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v198);
  sub_21717E884((uint64_t *)&v189, (uint64_t *)&v176);
  int v25 = (uint64_t *)v176;
  std::string::size_type v154 = v177;
  if ((std::__shared_weak_count *)v176 != v177)
  {
LABEL_46:
    long long v156 = v25;
    uint64_t v26 = *v25;
    char v27 = sub_21730D998();
    sub_21717EBF8(v26, (uint64_t)v27, (uint64_t *)&v175);
    uint64_t v28 = (uint64_t *)*((void *)&v175 + 1);
    uint64_t v160 = (uint64_t *)*((void *)&v175 + 1);
    for (uint64_t j = (uint64_t *)v175; ; j += 2)
    {
      if (j == v28)
      {
        v198.__vftable = (std::type_info_vtbl *)&v175;
        sub_216787968((void ***)&v198);
        int v25 = v156 + 2;
        if (v156 + 2 == (uint64_t *)v154) {
          break;
        }
        goto LABEL_46;
      }
      uint64_t v30 = *j;
      uint64_t v31 = (std::__shared_weak_count *)j[1];
      if (v31)
      {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_217179EF4();
      uint64_t v32 = sub_2170396E4((void *)(v30 + 160), (unsigned __int8 *)&qword_267B964A0);
      if (v32) {
        uint64_t v33 = (long long *)(v32 + 40);
      }
      else {
        uint64_t v33 = sub_21730D998();
      }
      uint64_t v34 = *((unsigned __int8 *)v33 + 23);
      if ((v34 & 0x80u) == 0) {
        uint64_t v35 = *((unsigned __int8 *)v33 + 23);
      }
      else {
        uint64_t v35 = *((void *)v33 + 1);
      }
      if (v35)
      {
        if ((v34 & 0x80) == 0) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v33 = sub_21730D998();
        uint64_t v34 = *((unsigned __int8 *)v33 + 23);
        if ((v34 & 0x80) == 0)
        {
LABEL_58:
          if (!v34) {
            goto LABEL_73;
          }
          goto LABEL_59;
        }
      }
      if (!*((void *)v33 + 1))
      {
LABEL_73:
        LODWORD(v198.__vftable) = 3;
        v198.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v199);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v199 + 1);
        unint64_t v200 = 0;
        goto LABEL_81;
      }
LABEL_59:
      unint64_t v193 = 0;
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v33, (uint64_t)&v178);
      *(void *)&long long v192 = v178.__r_.__value_.__r.__words[0];
      if ((v178.__r_.__value_.__s.__data_[8] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v178.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v192))
      {
        int v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v36) {
          int v36 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        *(void *)&long long v192 = *((void *)v36 + 11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v178);
        if ((v193 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v193 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v193 = v178.__r_.__value_.__r.__words[0];
      }
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v30) {
        sub_21717C1A8(v30 + 48, (uint64_t)&v178);
      }
      else {
        v178.__r_.__value_.__r.__words[0] = 0;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v178, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v192, (uint64_t)&v198);
      if ((v178.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v178.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v31) {
        sub_216784EC4(v31);
      }
      if (v193) {
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v198, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v193);
      }
LABEL_81:
      if (v31)
      {
        sub_216784EC4(v31);
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_217179EF4();
      int v37 = sub_2170396E4((void *)(v30 + 160), (unsigned __int8 *)&qword_267B964A0);
      if (v37) {
        int v38 = (long long *)(v37 + 40);
      }
      else {
        int v38 = sub_21730D998();
      }
      uint64_t v39 = *((unsigned __int8 *)v38 + 23);
      if ((v39 & 0x80u) == 0) {
        uint64_t v40 = *((unsigned __int8 *)v38 + 23);
      }
      else {
        uint64_t v40 = *((void *)v38 + 1);
      }
      if (v40)
      {
        if ((v39 & 0x80) == 0) {
          goto LABEL_91;
        }
      }
      else
      {
        int v38 = sub_21730D998();
        uint64_t v39 = *((unsigned __int8 *)v38 + 23);
        if ((v39 & 0x80) == 0)
        {
LABEL_91:
          if (!v39) {
            goto LABEL_106;
          }
          goto LABEL_92;
        }
      }
      if (!*((void *)v38 + 1))
      {
LABEL_106:
        LODWORD(v178.__r_.__value_.__l.__data_) = 3;
        v178.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v178.__r_.__value_.__r.__words[2]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
        uint64_t v179 = 0;
        goto LABEL_114;
      }
LABEL_92:
      *(void *)&long long v192 = 0;
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v38, (uint64_t)&v193);
      *(void *)&long long v191 = v193;
      if ((v194 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v194 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v191))
      {
        int v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v41) {
          int v41 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        *(void *)&long long v191 = *((void *)v41 + 11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v193);
        if ((v192 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)&long long v192 = v193;
      }
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v30) {
        sub_21717C1A8(v30 + 48, (uint64_t)&v193);
      }
      else {
        unint64_t v193 = 0;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(v159, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v193, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v191, (uint64_t)&v178);
      if ((v193 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v193 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v31) {
        sub_216784EC4(v31);
      }
      if ((void)v192) {
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v178, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v192);
      }
LABEL_114:
      if (v31) {
        sub_216784EC4(v31);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v198, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v178);
      if ((v179 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
      sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
      if (v178.__r_.__value_.__l.__size_) {
        sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
      }
      if ((v200 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
      sub_21697C414(&v199);
      if (v198.__type_name) {
        sub_216D16E0C((atomic_ullong *)v198.__type_name);
      }
      if (v31) {
        sub_216784EC4(v31);
      }
      uint64_t v28 = v160;
    }
  }
  v198.__vftable = (std::type_info_vtbl *)&v176;
  sub_216787968((void ***)&v198);
  uint64_t v42 = *v153;
  char v43 = sub_21730D998();
  sub_21717EBF8(v42, (uint64_t)v43, (uint64_t *)&v193);
  uint64_t v44 = (std::type_info **)v193;
  int v161 = v194;
  while (v44 != v161)
  {
    std::string::size_type v45 = (std::string::size_type)*v44;
    std::string::size_type v176 = (std::string::size_type)*v44;
    uint64_t v46 = (std::__shared_weak_count *)v44[1];
    uint64_t v177 = v46;
    if (v46)
    {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      v178.__r_.__value_.__r.__words[0] = v45;
      v178.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v45;
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v198, v159);
    unint64_t v200 = 0;
    v198.__vftable = (std::type_info_vtbl *)off_26C76D8C8;
    sub_2171892E4((uint64_t *)&v178, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v198, (uint64_t)&v165);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v165, v47)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v165, v48))
    {
      sub_217180824((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v165, (uint64_t)&v178);
      uint64_t v49 = v169;
    }
    else
    {
      if ((v169 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v169 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v168);
      sub_21697C414(&v167);
      if (v166) {
        sub_216D16E0C(v166);
      }
      int v165 = 3;
      int v166 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v167);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v168);
      uint64_t v49 = 0;
      uint64_t v169 = 0;
    }
    if ((v49 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v168);
    sub_21697C414(&v167);
    if (v166) {
      sub_216D16E0C(v166);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v198);
    if (v178.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)v178.__r_.__value_.__l.__size_);
    }
    sub_217179EF4();
    sub_217179F70(&v164, (uint64_t)&v176, (unsigned __int8 *)&qword_267B96458);
    if (*((char *)v164 + 23) < 0)
    {
      if (!*((void *)v164 + 1)) {
        goto LABEL_172;
      }
    }
    else if (!*((unsigned char *)v164 + 23))
    {
      goto LABEL_172;
    }
    uint64_t v50 = v176;
    sub_2172F3E48(v176, &v198);
    int v51 = v198.__vftable;
    sub_217179EF4();
    sub_217179F70((long long **)&v178, (uint64_t)&v176, (unsigned __int8 *)&qword_267B96410);
    sub_2171893D4((uint64_t)v51, (unsigned __int8 *)v178.__r_.__value_.__l.__data_, &v175);
    if (v198.__type_name) {
      sub_216784EC4((std::__shared_weak_count *)v198.__type_name);
    }
    if ((void)v175)
    {
      int v52 = (std::__shared_weak_count *)*((void *)&v175 + 1);
      *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v175;
      if (*((void *)&v175 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v175 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      sub_217187FA8((uint64_t)v155, (uint64_t *)&v178, (uint64_t)&v198);
      if (!v52) {
        goto LABEL_161;
      }
      int v54 = v52;
    }
    else
    {
      sub_2172F3E48(v50, &v191);
      int v55 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      long long v192 = v191;
      long long v191 = 0uLL;
      *(_OWORD *)&v178.__r_.__value_.__l.__data_ = 0uLL;
      sub_217189470((uint64_t)v155, (unint64_t *)&v178, (unint64_t *)&v192, (uint64_t)&v198);
      if (v55) {
        sub_216784EC4(v55);
      }
      int v54 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      if (!*((void *)&v191 + 1)) {
        goto LABEL_161;
      }
    }
    sub_216784EC4(v54);
LABEL_161:
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v198, v53))
    {
      uint64_t v56 = v177;
      *(void *)&long long v192 = v50;
      *((void *)&v192 + 1) = v177;
      if (v177) {
        atomic_fetch_add_explicit(&v177->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_216D1E2AC((uint64_t)v159, &v191);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v178, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
      uint64_t v179 = 0;
      v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C76D8C8;
      sub_217188024((unsigned int (***)(void **))&v192, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v191, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v178, (uint64_t)&v198);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v178);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v191 + 1);
      sub_21697C414(&v191);
      if (v56) {
        sub_216784EC4(v56);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v204);
    sub_21697C414(&v203);
    sub_21717AD2C((uint64_t)&v201, v202);
    if ((v200 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
    sub_21697C414(&v199);
    if (v198.__type_name) {
      sub_216D16E0C((atomic_ullong *)v198.__type_name);
    }
    if (*((void *)&v175 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v175 + 1));
    }
LABEL_172:
    sub_217179EF4();
    sub_217179F70((long long **)&v191, (uint64_t)&v176, (unsigned __int8 *)&qword_267B96428);
    if (*(char *)(v191 + 23) < 0)
    {
      if (*(void *)(v191 + 8))
      {
LABEL_176:
        uint64_t v57 = v176;
        sub_2172F3E48(v176, &v192);
        uint64_t v58 = (std::__shared_weak_count *)*((void *)&v192 + 1);
        long long v175 = v192;
        long long v192 = 0uLL;
        *(_OWORD *)&v178.__r_.__value_.__l.__data_ = 0uLL;
        sub_217189470((uint64_t)v155, (unint64_t *)&v178, (unint64_t *)&v175, (uint64_t)&v198);
        if (v58) {
          sub_216784EC4(v58);
        }
        if (*((void *)&v192 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v192 + 1));
        }
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v198, v59))
        {
          char v60 = v177;
          *(void *)&long long v175 = v57;
          *((void *)&v175 + 1) = v177;
          if (v177) {
            atomic_fetch_add_explicit(&v177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_216D1E2AC((uint64_t)v159, &v192);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v178, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
          uint64_t v179 = 0;
          v178.__r_.__value_.__r.__words[0] = (std::string::size_type)off_26C76D8C8;
          sub_217188024((unsigned int (***)(void **))&v175, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v192, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v178, (uint64_t)&v198);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v178);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v192 + 1);
          sub_21697C414(&v192);
          if (v60) {
            sub_216784EC4(v60);
          }
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v204);
        sub_21697C414(&v203);
        sub_21717AD2C((uint64_t)&v201, v202);
        if ((v200 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
        sub_21697C414(&v199);
        if (v198.__type_name) {
          sub_216D16E0C((atomic_ullong *)v198.__type_name);
        }
      }
    }
    else if (*(unsigned char *)(v191 + 23))
    {
      goto LABEL_176;
    }
    if (v177) {
      sub_216784EC4(v177);
    }
    v44 += 2;
  }
  v198.__vftable = (std::type_info_vtbl *)&v193;
  sub_216787968((void ***)&v198);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v178, v159);
  uint64_t v179 = 0;
  v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C76D128;
  if (v178.__r_.__value_.__l.__size_)
  {
    if ((*(unsigned char *)(v178.__r_.__value_.__l.__size_ + 57) & 8) == 0)
    {
      if (off_26C76D148((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v178))
      {
        unint64_t v61 = *(uint64_t **)(*v153 + 136);
        uint64_t v62 = *(uint64_t **)(*v153 + 144);
        if (v61 != v62)
        {
          while (1)
          {
            uint64_t v64 = *v61;
            uint64_t v63 = (std::__shared_weak_count *)v61[1];
            std::string::size_type v176 = *v61;
            uint64_t v177 = v63;
            if (v63) {
              atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_217179EF4();
            uint64_t v65 = *(unsigned __int8 *)(v64 + 47);
            if ((v65 & 0x80u) == 0) {
              uint64_t v66 = *(unsigned __int8 *)(v64 + 47);
            }
            else {
              uint64_t v66 = *(void *)(v64 + 32);
            }
            uint64_t v67 = byte_267B9649F;
            if (byte_267B9649F < 0) {
              uint64_t v67 = qword_267B96490;
            }
            if (v66 != v67) {
              goto LABEL_233;
            }
            uint64_t v68 = (const void **)(v64 + 24);
            int v69 = byte_267B9649F >= 0 ? &qword_267B96488 : (uint64_t *)qword_267B96488;
            if ((v65 & 0x80) == 0) {
              break;
            }
            if (!memcmp(*v68, v69, *(void *)(v64 + 32))) {
              goto LABEL_213;
            }
LABEL_233:
            if (v63) {
              sub_216784EC4(v63);
            }
            v61 += 2;
            if (v61 == v62) {
              goto LABEL_236;
            }
          }
          if (*(unsigned char *)(v64 + 47))
          {
            while (*(unsigned __int8 *)v68 == *(unsigned __int8 *)v69)
            {
              uint64_t v68 = (const void **)((char *)v68 + 1);
              int v69 = (uint64_t *)((char *)v69 + 1);
              if (!--v65) {
                goto LABEL_213;
              }
            }
            goto LABEL_233;
          }
LABEL_213:
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v193, v159);
          uint64_t v197 = 0;
          unint64_t v193 = (unint64_t)&unk_26C76D128;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v64) {
            sub_21717C1A8(v64 + 48, (uint64_t)&v175);
          }
          else {
            *(void *)&long long v175 = 0;
          }
          int v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v70) {
            int v70 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          *(void *)&long long v192 = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v193, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v175, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v70 + 80), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v192, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v198);
          if ((v192 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v175 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v63) {
            sub_216784EC4(v63);
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v193);
          sub_217179EF4();
          sub_217179F70((long long **)&v175, (uint64_t)&v176, (unsigned __int8 *)&qword_267B96530);
          int v194 = &off_26C750BB8;
          sub_21691B31C((unsigned int **)&v193, v175);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)&v198, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v193, NAN);
          sub_2168EE084((uint64_t)&v193);
          if ((v201 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v201 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v200 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
          sub_21697C414(&v199);
          if (v198.__type_name) {
            sub_216D16E0C((atomic_ullong *)v198.__type_name);
          }
          uint64_t v63 = v177;
          goto LABEL_233;
        }
      }
    }
  }
LABEL_236:
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v178);
  uint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v71) {
    uint64_t v71 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v71 + 208), (uint64_t)&v198);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v198, v72))
  {
    unint64_t v73 = sub_217188E34();
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(v159, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v73 + 8), (uint64_t)&v178);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v178, (uint64_t)&v198);
    if ((v179 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
    if (v178.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
    }
  }
  if ((v200 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
  sub_21697C414(&v199);
  if (v198.__type_name) {
    sub_216D16E0C((atomic_ullong *)v198.__type_name);
  }
  std::string v74 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v74) {
    std::string v74 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v74 + 32), (uint64_t)&v198);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v198, v75))
  {
    unint64_t v76 = sub_217188E34();
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput(v159, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v76 + 8), (uint64_t)&v178);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v178, (uint64_t)&v198);
    if ((v179 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
    if (v178.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
    }
  }
  if ((v200 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
  sub_21697C414(&v199);
  if (v198.__type_name) {
    sub_216D16E0C((atomic_ullong *)v198.__type_name);
  }
  uint64_t v77 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v77) {
    uint64_t v77 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v77 + 232), (uint64_t)&v198);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v198, v78))
  {
    unint64_t v79 = sub_217188E34();
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput(v159, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v79 + 8), (uint64_t)&v178);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v178, (uint64_t)&v198);
    if ((v179 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
    if (v178.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
    }
  }
  if ((v200 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
  sub_21697C414(&v199);
  if (v198.__type_name) {
    sub_216D16E0C((atomic_ullong *)v198.__type_name);
  }
  std::string v80 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_217188E34();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, v80, (uint64_t)&v198);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v198, v81))
  {
    int v82 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_217188E34();
    int v83 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v83) {
      int v83 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(v159, v82, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v83 + 88), (uint64_t)&v178);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v178, (uint64_t)&v198);
    if ((v179 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
    if (v178.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
    }
  }
  if ((v200 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
  sub_21697C414(&v199);
  if (v198.__type_name) {
    sub_216D16E0C((atomic_ullong *)v198.__type_name);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, 1, (uint64_t *)&v193);
  int v84 = v194;
  if ((std::type_info **)v193 != v194)
  {
    int v85 = (unsigned int *)(v193 + 16);
    do
    {
      uint64_t v86 = v85 - 4;
      LODWORD(v198.__vftable) = *(v85 - 4);
      std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v87 = *((void *)v85 - 1);
      v198.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v87;
      if (v87) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 48), 1uLL, memory_order_relaxed);
      }
      sub_216981010(&v199, v85);
      sub_21698105C((_DWORD *)&v199 + 1, v85 + 1);
      unint64_t v88 = *((void *)v85 + 1);
      unint64_t v200 = v88;
      if ((v88 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v200 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v198, (uint64_t)&v176);
      int v89 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v89) {
        int v89 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      uint64_t v90 = v176;
      if ((v176 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v89 + 26) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v91 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v91) {
          uint64_t v91 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        }
        uint64_t v90 = v176;
        if ((v176 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v91 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v92 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          if (!v92) {
            uint64_t v92 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          }
          uint64_t v90 = v176;
          if ((v176 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v92 + 29) & 0xFFFFFFFFFFFFFFF8))
          {
            long long v93 = (void *)sub_217188E34();
            uint64_t v90 = v176;
            if ((v176 & 0xFFFFFFFFFFFFFFF8) != (*v93 & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v94 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              if (!v94) {
                uint64_t v94 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(v159, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v94 + 88), (uint64_t)&v178);
              pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v178, (uint64_t)&v198);
              if ((v179 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178.__r_.__value_.__r.__words[2] + 1);
              sub_21697C414(&v178.__r_.__value_.__r.__words[2]);
              if (v178.__r_.__value_.__l.__size_) {
                sub_216D16E0C((atomic_ullong *)v178.__r_.__value_.__l.__size_);
              }
              uint64_t v90 = v176;
            }
          }
        }
      }
      if ((v90 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v200 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v199 + 1);
      sub_21697C414(&v199);
      if (v198.__type_name) {
        sub_216D16E0C((atomic_ullong *)v198.__type_name);
      }
      v85 += 8;
    }
    while (v86 + 8 != (unsigned int *)v84);
  }
  v198.__vftable = (std::type_info_vtbl *)&v193;
  sub_216F752E0((void ***)&v198);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v190 + 1);
  sub_21697C414(&v190);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v186);
  sub_21697C414(&v185);
  if ((v187 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_318:
  if ((v188 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v188 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v189.__type_name) {
    sub_216784EC4((std::__shared_weak_count *)v189.__type_name);
  }
}

void sub_2171878AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,uint64_t a48,uint64_t a49)
{
  if ((a30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v49) {
    sub_216784EC4(v49);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)(v50 - 192));
  if (a34) {
    sub_216784EC4(a34);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(a16);
  sub_21697B754((_DWORD *)(v50 - 232));
  sub_21697B754(&a47);
  if ((a48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(void *)(v50 - 248)) {
    sub_216784EC4(*(std::__shared_weak_count **)(v50 - 248));
  }
  _Unwind_Resume(a1);
}

void sub_217187FA8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_2172F4170(*a2, &v6);
  sub_217189470(a1, (unint64_t *)a2, &v6, a3);
  if (v7) {
    sub_216784EC4(v7);
  }
}

void sub_21718800C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_217188024(unsigned int (***a1)(void **), pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a3, uint64_t a4)
{
  sub_216F925B4(a4, (uint64_t)&v70);
  sub_216D0162C((uint64_t)&v70, (int *)&v48);
  NameTokestd::string::size_type n = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, NameToken, &v79);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
  sub_21697C414(&v48);
  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v73);
  sub_21697C414(&v72);
  if (v71) {
    sub_216D16E0C(v71);
  }
  if (sub_21717B790(0))
  {
    std::string::size_type v10 = *a1 + 6;
    if (*((char *)*a1 + 71) < 0) {
      std::string::size_type v10 = (void *)*v10;
    }
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
    if (*((char *)String + 23) >= 0) {
      uint64_t v14 = (uint64_t)String;
    }
    else {
      uint64_t v14 = *String;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_BindNodeGraph %s - %s\n", v12, v13, v10, v14);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a4, v9))
  {
    sub_217182000((pxrInternal__aapl__pxrReserved__::UsdProperty *)a4, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v79, (uint64_t)&v48);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v48, v15))
    {
      int v70 = *(_DWORD *)a4;
      BOOL v16 = *(atomic_ullong **)(a4 + 8);
      uint64_t v71 = v16;
      if (v16) {
        atomic_fetch_add_explicit(v16 + 6, 1uLL, memory_order_relaxed);
      }
      sub_216981010(&v72, (_DWORD *)(a4 + 16));
      sub_21698105C(&v73, (_DWORD *)(a4 + 20));
      uint64_t v17 = *(void *)(a4 + 24);
      uint64_t v74 = v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v74 &= 0xFFFFFFFFFFFFFFF8;
      }
      sub_217184B68(&v75, (const void ***)(a4 + 32));
      sub_216D0162C((uint64_t)&v48, &v77);
    }
    else
    {
      sub_21717C0E0((uint64_t)&v70);
    }
    if ((v51 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
    sub_21697C414(&v50);
    if (v49) {
      sub_216D16E0C(v49);
    }
  }
  else
  {
    sub_21717BFDC((uint64_t)&v70, a4);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v70, v18))
  {
    sub_217179EF4();
    sub_217179F70((long long **)&v48, (uint64_t)a1, (unsigned __int8 *)&qword_267B96458);
    uint64_t v19 = (const void **)v48;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v77))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v70, v20, &v48);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get((uint64_t *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v77, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v55);
      int v21 = v49;
      if (v49 && atomic_fetch_add_explicit((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_ullong *))(*v21 + 8))(v21);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v55, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v70);
      int v55 = (unsigned int (**)(void **))&unk_26C76E028;
    }
    if (v56 && (*((unsigned char *)v56 + 57) & 8) == 0 && v55[4]((void **)&v55))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v48);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v55, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v48, (uint64_t)&v65);
      if ((v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_54;
    }
    int v22 = (void **)sub_21678C2D8((uint64_t)&v75, v19);
    if (&v76 != v22)
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v77))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v70, v23, &v48);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v77, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 7), &v53);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get((uint64_t *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v81);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
        sub_21697C414(&v53);
        uint64_t v24 = v49;
        if (v49 && atomic_fetch_add_explicit((atomic_uint *volatile)v49 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_ullong *))(*v24 + 8))(v24);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v70, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 7), (uint64_t)&v48);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v81, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v48);
        uint64_t v81 = (unsigned int (**)(void **))&unk_26C76DDF0;
        if ((v51 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
        sub_21697C414(&v50);
        if (v49) {
          sub_216D16E0C(v49);
        }
      }
      if (v82 && (*(unsigned char *)(v82 + 57) & 8) == 0 && v81[4]((void **)&v81))
      {
        int v25 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
        if (!v25) {
          int v25 = sub_21716B038(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v81, v25, (uint64_t)&v65);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v81);
LABEL_54:
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v55);
        if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v65, v26))
        {
          char v27 = (atomic_ullong *)a1[1];
          int v55 = *a1;
          uint64_t v56 = v27;
          if (v27) {
            atomic_fetch_add_explicit(v27 + 1, 1uLL, memory_order_relaxed);
          }
          sub_2171892E4((uint64_t *)&v55, a3, (uint64_t)&v48);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v48, (uint64_t)&v65);
          if ((v51 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
          sub_21697C414(&v50);
          if (v49) {
            sub_216D16E0C(v49);
          }
          if (v56) {
            sub_216784EC4((std::__shared_weak_count *)v56);
          }
LABEL_102:
          if ((v69 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
          sub_21697C414(&v67);
          if (v66) {
            sub_216D16E0C(v66);
          }
          goto LABEL_106;
        }
        sub_217179EF4();
        sub_217179F70(&v64, (uint64_t)a1, (unsigned __int8 *)&qword_267B96428);
        if (*((char *)v64 + 23) < 0)
        {
          if (*((void *)v64 + 1))
          {
LABEL_65:
            if (*((char *)v19 + 23) < 0)
            {
              if (v19[1]) {
                goto LABEL_67;
              }
            }
            else if (*((unsigned char *)v19 + 23))
            {
LABEL_67:
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v63);
LABEL_68:
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v48);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v48, &v61);
              if ((v48 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              sub_216F925B4(a4, (uint64_t)&v48);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v48, v28, &v55);
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60, &v53);
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get((uint64_t *)&v55, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v81);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
              sub_21697C414(&v53);
              if ((v60 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v29 = v56;
              if (v56
                && atomic_fetch_add_explicit((atomic_uint *volatile)v56 + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(atomic_ullong *))(*v29 + 8))(v29);
              }
              if ((v51 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
              sub_21697C414(&v50);
              if (v49) {
                sub_216D16E0C(v49);
              }
              if (v82 && (*(unsigned char *)(v82 + 57) & 8) == 0 && v81[4]((void **)&v81))
              {
                pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v81, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v63, (uint64_t)&v55);
                if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v55, v30))
                {
                  uint64_t v31 = (std::__shared_weak_count *)a1[1];
                  uint64_t v53 = *a1;
                  int v54 = v31;
                  if (v31) {
                    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  sub_2171892E4((uint64_t *)&v53, a3, (uint64_t)&v48);
                  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v48, (uint64_t)&v55);
                  if ((v51 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
                  sub_21697C414(&v50);
                  if (v49) {
                    sub_216D16E0C(v49);
                  }
                  if (v54) {
                    sub_216784EC4(v54);
                  }
                }
                else
                {
                  unint64_t v48 = (unint64_t)"usdMtlx/reader.cpp";
                  uint64_t v49 = (atomic_ullong *)"_BindNodeGraph";
                  uint64_t v50 = 1954;
                  unint64_t v51 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_BindN"
                                          "odeGraph(const mx::ConstInputPtr &, const SdfPath &, const UsdShadeConnectable"
                                          "API &, const _NodeGraph &)";
                  char v52 = 0;
                  unint64_t v42 = v63 & 0xFFFFFFFFFFFFFFF8;
                  if ((v63 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    char v43 = (const char *)(v42 + 16);
                    if (*(char *)(v42 + 39) < 0) {
                      char v43 = *(const char **)v43;
                    }
                  }
                  else
                  {
                    char v43 = "";
                  }
                  uint64_t v44 = *a1;
                  std::string::size_type v45 = *a1 + 6;
                  if (*((char *)v44 + 71) < 0) {
                    std::string::size_type v45 = (void *)*v45;
                  }
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v61);
                  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v48, (pxrInternal__aapl__pxrReserved__ *)"No output \"%s\" for input \"%s\" on <%s>", v47, v43, v45, Text);
                }
                if ((v59 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v58);
                sub_21697C414(&v57);
                if (v56) {
                  sub_216D16E0C(v56);
                }
              }
              else
              {
                unint64_t v48 = (unint64_t)"usdMtlx/reader.cpp";
                uint64_t v49 = (atomic_ullong *)"_BindNodeGraph";
                uint64_t v50 = 1960;
                unint64_t v51 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_BindNod"
                                        "eGraph(const mx::ConstInputPtr &, const SdfPath &, const UsdShadeConnectableAPI "
                                        "&, const _NodeGraph &)";
                char v52 = 0;
                uint64_t v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v61);
                uint64_t v34 = *a1 + 6;
                if (*((char *)*a1 + 71) < 0) {
                  uint64_t v34 = (void *)*v34;
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v48, (pxrInternal__aapl__pxrReserved__ *)"Shader not found at <%s> for input \"%s\"", v33, v32, v34);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v81);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
              sub_21697C414(&v61);
              if ((v63 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              goto LABEL_102;
            }
            uint64_t v40 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
            if (!v40) {
              uint64_t v40 = sub_21716B038(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
            }
            uint64_t v41 = *(void *)v40;
            uint64_t v63 = v41;
            if ((v41 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v63 &= 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_68;
          }
        }
        else if (*((unsigned char *)v64 + 23))
        {
          goto LABEL_65;
        }
        unint64_t v48 = (unint64_t)"usdMtlx/reader.cpp";
        uint64_t v49 = (atomic_ullong *)"_BindNodeGraph";
        uint64_t v50 = 1967;
        unint64_t v51 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_BindNodeGraph(c"
                                "onst mx::ConstInputPtr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
        char v52 = 0;
        if (*((char *)v19 + 23) < 0) {
          uint64_t v19 = (const void **)*v19;
        }
        uint64_t v35 = *a1;
        int v36 = *a1 + 6;
        if (*((char *)v35 + 71) < 0) {
          int v36 = (void *)*v36;
        }
        sub_216D1E2AC((uint64_t)a3, &v55);
        int v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v48, (pxrInternal__aapl__pxrReserved__ *)"No output \"%s\" for input \"%s\" on <%s>", v38, v19, v36, v37);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
        sub_21697C414(&v55);
        goto LABEL_102;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v81);
    }
    int v65 = 3;
    uint64_t v66 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v67);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v68);
    uint64_t v69 = 0;
    goto LABEL_54;
  }
LABEL_106:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v78);
  sub_21697C414(&v77);
  sub_21717AD2C((uint64_t)&v75, v76);
  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v73);
  sub_21697C414(&v72);
  if (v71) {
    sub_216D16E0C(v71);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
  return sub_21697C414(&v79);
}

void sub_217188AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_216F74530((uint64_t)&a12);
  if (v27) {
    sub_216784EC4(v27);
  }
  sub_216F73CDC((uint64_t)&a19);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v28 - 88));
  sub_21697B754(&a24);
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216F73CDC((uint64_t)&a27);
  sub_21717ACB0(v28 - 160);
  sub_21697B754((_DWORD *)(v28 - 96));
  _Unwind_Resume(a1);
}

void sub_217188E1C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21697B754((int *)va);
  JUMPOUT(0x217188E28);
}

unint64_t sub_217188E34()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B96668);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "light", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "mtlx", 0);
    uint64_t v3 = *(atomic_uint **)v0;
    int v15 = v3;
    if ((v3 & 7) != 0)
    {
      long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        int v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    BOOL v16 = v5;
    if ((v5 & 7) != 0)
    {
      unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        BOOL v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    uint64_t v13 = (void **)(v0 + 16);
    char v14 = 0;
    uint64_t v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      uint64_t v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      uint64_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B96668, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      uint64_t v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B96668);
    }
  }
  return (unint64_t)v0;
}

void sub_217189014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *sub_21718909C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_217189148((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2171854C0((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_217189148@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_2171891C8(v6 + 32, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2171891B0(_Unwind_Exception *a1)
{
  sub_2171854C0(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_2171891C8(char *__dst, long long **a2)
{
  uint64_t v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    *((void *)__dst + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  int v6 = 1;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v9);
  uint64_t v10 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  *((void *)__dst + 6) = 0;
  *((void *)__dst + 3) = off_26C76D8C8;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return __dst;
}

void sub_2171892C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D16AD8((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void sub_2171892E4(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2171805CC(a2, &v8, a3);
  if (v5) {
    sub_216784EC4(v5);
  }
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = v6;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21717E558(a3, (uint64_t)&v8);
  if (v7)
  {
    sub_216784EC4(v7);
  }
}

void sub_2171893A0(_Unwind_Exception *a1)
{
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_216F74530(v1);
  _Unwind_Resume(a1);
}

void sub_2171893D4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  long long v4 = sub_2170396E4((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  sub_2172F3618(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  sub_216784EC4(v7);
}

void sub_217189458(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217189470@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_21717BBB4((uint64_t **)(a1 + 104), a2);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v8, v9) & 1) == 0)
  {
    sub_21717BCA4((uint64_t)v29);
    if (*a2)
    {
      if (sub_21717B790(0))
      {
        uint64_t v10 = (void *)(*a2 + 48);
        if (*(char *)(*a2 + 71) < 0) {
          uint64_t v10 = (void *)*v10;
        }
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 40));
        if (*((char *)String + 23) >= 0) {
          uint64_t v14 = (uint64_t)String;
        }
        else {
          uint64_t v14 = *String;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add node graph: %s at path %s\n", v12, v13, v10, v14);
      }
      unint64_t v15 = *a2;
      uint64_t v16 = (std::__shared_weak_count *)a2[1];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v31;
      unint64_t v30 = v15;
      uint64_t v31 = v16;
      if (v17) {
        sub_216784EC4(v17);
      }
      if (v16) {
        sub_216784EC4(v16);
      }
      unint64_t v18 = *a2;
      uint64_t v19 = (std::__shared_weak_count *)a2[1];
      v28[0] = v18;
      v28[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_21717BD14((uint64_t)v29, a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 40), v28);
      if (v19) {
        sub_216784EC4(v19);
      }
    }
    else
    {
      if (sub_21717B790(0))
      {
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 40));
        if (*((char *)v20 + 23) >= 0) {
          uint64_t v23 = (uint64_t)v20;
        }
        else {
          uint64_t v23 = *v20;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add implicit node graph at path %s\n", v21, v22, v23);
      }
      unint64_t v24 = *a3;
      int v25 = (std::__shared_weak_count *)a3[1];
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = v31;
      unint64_t v30 = v24;
      uint64_t v31 = v25;
      if (v26) {
        sub_216784EC4(v26);
      }
      if (v25) {
        sub_216784EC4(v25);
      }
      sub_21717C150((uint64_t)v29, a1, (_DWORD *)(a1 + 40));
    }
    sub_21717BDEC((uint64_t)v8, v29);
    sub_21717BF28((uint64_t)v29);
  }
  return sub_21717BFDC(a4, (uint64_t)v8);
}

void sub_217189628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21717BF28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217189658(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 136);
  long long v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F3368(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      uint64_t v13 = (const void **)(v8 + 24);
      uint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        uint64_t v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_2171897BC(a3, &v15);
    goto LABEL_22;
  }
}

void sub_217189784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void **sub_2171897BC(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_2171898D8(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2171898C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171898D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217189950((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217189950(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2171899E4((uint64_t)v12);
  return v10;
}

uint64_t sub_2171899E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void *sub_217189A1C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  long long v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    _DWORD v19[4] = v4;
    long long v14 = (char *)sub_216787EE0((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v19[2] = v15 + 16;
    sub_217189B3C(a1, v19);
    long long v9 = (void *)a1[1];
    sub_216788028(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_217189B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217189B3C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217189BB4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217189BB4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_217189C48((uint64_t)v12);
  return v10;
}

uint64_t sub_217189C48(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t sub_217189C80(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217189CF8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217189CF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_217189D8C((uint64_t)v12);
  return v10;
}

uint64_t sub_217189D8C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t *sub_217189DC4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_217189E70((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21681534C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_217189E70@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217189EEC(_Unwind_Exception *a1)
{
  sub_21681534C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_217189F04(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_217189FB0((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21718A048((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_217189FB0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21718A030(_Unwind_Exception *a1)
{
  sub_21718A048(v1, 0);
  _Unwind_Resume(a1);
}

void sub_21718A048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717AEC0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_21718A0A0(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_21718A14C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21718A1E4((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_21718A14C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21718A1CC(_Unwind_Exception *a1)
{
  sub_21718A1E4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_21718A1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717AE10((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_21718A23C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 136);
  long long v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F2EB4(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      char v13 = (const void **)(v8 + 24);
      long long v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        char v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_21718A3A0(a3, &v15);
    goto LABEL_22;
  }
}

void sub_21718A368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void **sub_21718A3A0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    long long v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_21718A4BC(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_21718A4A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21718A4BC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21718A534((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21718A534(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21718A5C8((uint64_t)v12);
  return v10;
}

uint64_t sub_21718A5C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void sub_21718A600(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t **a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4@<X8>)
{
  sub_216BD4CA0(a3, a2, (uint64_t *)a2);
  if ((v9 & 1) == 0)
  {
    uint64_t v41 = "usdMtlx/reader.cpp";
    unint64_t v42 = (atomic_ullong *)"_AddCollection";
    uint64_t v43 = 1762;
    unint64_t v44 = (unint64_t)"UsdCollectionAPI pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_AddColl"
                            "ection(const mx::ConstCollectionPtr &, std::set<mx::ConstCollectionPtr> *)";
    char v45 = 0;
    uint64_t v10 = (void *)(*a2 + 48);
    if (*(char *)(*a2 + 71) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v41, (pxrInternal__aapl__pxrReserved__ *)"Found a collection cycle at '%s'", v8, v10);
    LODWORD(v41) = 1;
    unint64_t v42 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v43);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v43 + 1);
    unint64_t v44 = 0;
    uint64_t v36 = 0;
    sub_216D36868(a4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v41, &v36);
    *(void *)a4 = &unk_26C767A08;
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    goto LABEL_85;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)a1);
  uint64_t v36 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (void **)&v36, (uint64_t)&v41);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v12 = *a2;
  char v13 = (std::__shared_weak_count *)a2[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    sub_21717C1A8(v12 + 48, (uint64_t)__p);
  }
  else {
    __p[0] = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v41, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v36);
  uint64_t v33 = (const void **)(*a2 + 48);
  long long v14 = sub_21718B098((uint64_t **)(a1 + 152), v33, (uint64_t)&unk_2174BFD90, (long long **)&v33);
  long long v15 = v14;
  uint64_t v16 = v37;
  if (v37) {
    atomic_fetch_add_explicit(v37 + 6, 1uLL, memory_order_relaxed);
  }
  long long v17 = (atomic_ullong *)v14[8];
  unsigned char v15[8] = (uint64_t)v16;
  if (v17) {
    sub_216D16E0C(v17);
  }
  unint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v15 + 7);
  sub_2169C487C((int *)v15 + 18, &v38);
  sub_2169C48D4((int *)v15 + 19, &v39);
  uint64_t v28 = v15 + 10;
  sub_2168D2318(v15 + 10, &v40);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v36);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v15 + 7), (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v36);
  uint64_t v19 = (std::__shared_weak_count *)a2[1];
  uint64_t v33 = (const void **)*a2;
  uint64_t v34 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_21717E558((uint64_t)&v36, (uint64_t)&v33);
  if (v19) {
    sub_216784EC4(v19);
  }
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
  sub_21697C414(&v38);
  if (v37) {
    sub_216D16E0C(v37);
  }
  sub_217179EF4();
  sub_217179F70((long long **)&__str, (uint64_t)a2, (unsigned __int8 *)&qword_267B96350);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__str->__r_.__value_.__l.__size_) {
      goto LABEL_53;
    }
  }
  else if (!*((unsigned char *)&__str->__r_.__value_.__s + 23))
  {
    goto LABEL_53;
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(__str, (uint64_t *)&v33);
  uint64_t v20 = (unsigned __int8 *)v33;
  int v21 = (unsigned __int8 *)v34;
  if (v33 != (const void **)v34)
  {
    do
    {
      sub_2172F4170(*a2, &v36);
      sub_21718B36C(v36, v20, __p);
      if (v37) {
        sub_216784EC4((std::__shared_weak_count *)v37);
      }
      if (__p[0])
      {
        uint64_t v31 = (std::string *)__p[0];
        uint64_t v32 = (std::__shared_weak_count *)__p[1];
        if (__p[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
        }
        sub_21718A600(&v36, a1, &v31, a3);
        if (v32) {
          sub_216784EC4(v32);
        }
        if (v37 && (*((unsigned char *)v37 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v36 + 32))(&v36))
        {
          pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v36, (int *)&v31);
          pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
          sub_21697C414(&v31);
        }
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v36);
      }
      if (__p[1]) {
        sub_216784EC4((std::__shared_weak_count *)__p[1]);
      }
      v20 += 24;
    }
    while (v20 != v21);
  }
  uint64_t v36 = (uint64_t)&v33;
  sub_216782F20((void ***)&v36);
LABEL_53:
  int v22 = sub_21718AE44(*a2);
  sub_217179EF4();
  sub_217179F70((long long **)&v31, (uint64_t)a2, (unsigned __int8 *)&qword_267B96338);
  if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v31->__r_.__value_.__l.__size_) {
      goto LABEL_66;
    }
  }
  else if (!*((unsigned char *)&v31->__r_.__value_.__s + 23))
  {
    goto LABEL_66;
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(v31, (uint64_t *)&v33);
  unint64_t v24 = v33;
  uint64_t v23 = (const void **)&v34->__vftable;
  if (v33 != (const void **)v34)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(v18, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v22, v24, (uint64_t)__p);
      sub_21718AF14(a1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v36, (long long *)__p);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_21697C414(&v38);
      if (v37) {
        sub_216D16E0C(v37);
      }
      v24 += 3;
    }
    while (v24 != v23);
  }
  uint64_t v36 = (uint64_t)&v33;
  sub_216782F20((void ***)&v36);
LABEL_66:
  sub_217179EF4();
  sub_217179F70((long long **)&v31, (uint64_t)a2, (unsigned __int8 *)&qword_267B962F0);
  if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v31->__r_.__value_.__l.__size_) {
      goto LABEL_79;
    }
LABEL_70:
    pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(v31, (uint64_t *)&v33);
    int v25 = v33;
    uint64_t v26 = (const void **)&v34->__vftable;
    if (v33 != (const void **)v34)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(v18, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v36);
        pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v22, v25, (uint64_t)__p);
        sub_21718AF14(a1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v36, (long long *)__p);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
        sub_21697C414(&v38);
        if (v37) {
          sub_216D16E0C(v37);
        }
        v25 += 3;
      }
      while (v25 != v26);
    }
    uint64_t v36 = (uint64_t)&v33;
    sub_216782F20((void ***)&v36);
    goto LABEL_79;
  }
  if (*((unsigned char *)&v31->__r_.__value_.__s + 23)) {
    goto LABEL_70;
  }
LABEL_79:
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a4, v18);
  *(void *)a4 = &unk_26C767760;
  uint64_t v27 = *v28;
  *((void *)a4 + 3) = *v28;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)a4 + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a4 = &unk_26C767A08;
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
LABEL_85:
  sub_21697C414(&v43);
  if (v42) {
    sub_216D16E0C(v42);
  }
}

void sub_21718ACB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

long long *sub_21718AE44(uint64_t a1)
{
  sub_216784F38(&v8, (void *)(a1 + 8));
  shared_weak_owners = v8;
  if (v8)
  {
    while (1)
    {
      BOOL v3 = sub_21718B408((uint64_t)shared_weak_owners);
      uint64_t v1 = (long long *)v8;
      if (v3) {
        break;
      }
      shared_weak_owners = (std::__shared_weak_count *)v8[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        long long v4 = shared_weak_owners;
        if (shared_weak_owners) {
          shared_weak_owners = (std::__shared_weak_count *)*((void *)v1 + 28);
        }
      }
      else
      {
        long long v4 = 0;
      }
      uint64_t v5 = v9;
      uint64_t v8 = shared_weak_owners;
      char v9 = v4;
      if (v5)
      {
        sub_216784EC4(v5);
        shared_weak_owners = v8;
      }
      if (!shared_weak_owners) {
        goto LABEL_10;
      }
    }
    uint64_t v1 = sub_21718B488((uint64_t)v8);
    int v6 = 0;
  }
  else
  {
LABEL_10:
    int v6 = 1;
  }
  if (v9) {
    sub_216784EC4(v9);
  }
  if (v6) {
    return sub_21730D998();
  }
  return v1;
}

void sub_21718AEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21718AF14(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2, long long *a3)
{
  BOOL v3 = a3;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(a3, (uint64_t)v14))
  {
    int v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v12, v3);
    uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), 1);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v10, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    sub_21697C414(v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  }
  else
  {
    v10[0] = (uint64_t)"usdMtlx/reader.cpp";
    v10[1] = (uint64_t)"_AddGeom";
    v10[2] = 1865;
    v10[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_AddGeom(const UsdRelation"
                      "ship &, const std::string &) const";
    char v11 = 0;
    if (*((char *)v3 + 23) < 0) {
      BOOL v3 = *(long long **)v3;
    }
    sub_216D0162C((uint64_t)a2, &v12);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v10, (pxrInternal__aapl__pxrReserved__ *)"Ignored non-path '%s' on collection relationship <%s>", v9, v3, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  }
  sub_21697C414(&v12);
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_21718B048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (*(char *)(v17 - 33) < 0) {
    operator delete(*(void **)(v17 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21718B098(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_21718B144((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21718B314((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_21718B144@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_21718B1C4(v6 + 32, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21718B1AC(_Unwind_Exception *a1)
{
  sub_21718B314(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_21718B1C4(char *__dst, long long **a2)
{
  BOOL v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    *((void *)__dst + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  int v7 = 1;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
  uint64_t v11 = 0;
  uint64_t v6 = 0;
  *(void *)sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7, &v6) = &unk_26C767A08;
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return __dst;
}

void sub_21718B2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  _Unwind_Resume(a1);
}

void sub_21718B314(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717AB68((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_21718B36C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  long long v4 = sub_2170396E4((void *)(a1 + 96), a2);
  if (!v4)
  {
    int v7 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  int v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  sub_2172F2EB4(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  sub_216784EC4(v7);
}

void sub_21718B3F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21718B408(uint64_t a1)
{
  sub_216779094(__p, off_26798DB68[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_21718B46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21718B488(uint64_t a1)
{
  sub_216779094(__p, off_26798DB68[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    uint64_t v3 = (long long *)(v2 + 40);
  }
  else {
    uint64_t v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_21718B4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21718B514(uint64_t **a1, const void **a2, long long *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4)
{
  int v7 = (uint64_t **)sub_21677B220((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    int v9 = v7;
    sub_21718B5B8((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_21677B358(a1, v12, v9, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    sub_21718B314((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t sub_21718B5B8@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_21718B62C((uint64_t)v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21718B614(_Unwind_Exception *a1)
{
  sub_21718B314(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21718B62C(uint64_t a1, long long *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 24), a3);
  *(void *)(a1 + 24) = &unk_26C767760;
  uint64_t v6 = *((void *)a3 + 3);
  *(void *)(a1 + 48) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 24) = &unk_26C767A08;
  return a1;
}

void sub_21718B6D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21718B6F4(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  long long v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        long long v5 = (uint64_t *)*v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_21718B7C0(a1, a4, (uint64_t)v11);
    sub_21677B358((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    sub_21718B984((uint64_t)v11, 0);
  }
  return v8;
}

void *sub_21718B7C0@<X0>(uint64_t a1@<X0>, void **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_21718B840(v6 + 4, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21718B828(_Unwind_Exception *a1)
{
  sub_21718B984(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_21718B840(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = **a2;
  uint64_t v4 = v3[1];
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int v7 = 1;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
  uint64_t v11 = 0;
  uint64_t v6 = 0;
  *(void *)sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7, &v6) = &unk_26C767A08;
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return a1;
}

void sub_21718B94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5) {
    sub_216784EC4(v5);
  }
  _Unwind_Resume(a1);
}

void sub_21718B984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21717AAC0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_21718B9DC(uint64_t result, const void ***a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t **)(result + 96);
    uint64_t v6 = (uint64_t *)(result + 72);
    do
    {
      uint64_t result = (uint64_t)sub_21680EE0C(v5, v2, (uint64_t)v2);
      if (v7)
      {
        unint64_t v8 = *(void *)(v4 + 80);
        if (v8 >= *(void *)(v4 + 88))
        {
          uint64_t result = sub_21718BE90(v6, (long long *)v2);
        }
        else
        {
          sub_216AC11F8(*(char **)(v4 + 80), (long long *)v2);
          uint64_t result = v8 + 48;
          *(void *)(v4 + 80) = v8 + 48;
        }
        *(void *)(v4 + 80) = result;
      }
      v2 += 6;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_21718BA74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_21718BA7C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_217179EF4();
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v6 = *a2;
  char v7 = *(long long **)(*a2 + 136);
  unint64_t v8 = *(long long **)(v6 + 144);
  if (v7 == v8)
  {
    long long v14 = 0;
    goto LABEL_24;
  }
  do
  {
    uint64_t v9 = *(unsigned __int8 *)(*(void *)v7 + 47);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = *(unsigned __int8 *)(*(void *)v7 + 47);
    }
    else {
      uint64_t v10 = *(void *)(*(void *)v7 + 32);
    }
    uint64_t v11 = byte_267B965A7;
    if (byte_267B965A7 < 0) {
      uint64_t v11 = qword_267B96598;
    }
    if (v10 == v11)
    {
      uint64_t v12 = (const void **)(*(void *)v7 + 24);
      if (byte_267B965A7 >= 0) {
        int v13 = &qword_267B96590;
      }
      else {
        int v13 = (uint64_t *)qword_267B96590;
      }
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, *(void *)(*(void *)v7 + 32))) {
          goto LABEL_18;
        }
LABEL_17:
        sub_217189A1C((uint64_t *)&v39, v7);
        goto LABEL_18;
      }
      if (!*(unsigned char *)(*(void *)v7 + 47)) {
        goto LABEL_17;
      }
      while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v13)
      {
        uint64_t v12 = (const void **)((char *)v12 + 1);
        int v13 = (uint64_t *)((char *)v13 + 1);
        if (!--v9) {
          goto LABEL_17;
        }
      }
    }
LABEL_18:
    ++v7;
  }
  while (v7 != v8);
  long long v14 = (uint64_t *)v39;
  if ((uint64_t *)v39 != v40)
  {
    uint64_t v15 = v40 - 2;
    if ((unint64_t)(v40 - 2) > v39)
    {
      do
      {
        uint64_t v16 = *v14;
        *long long v14 = *v15;
        uint64_t *v15 = v16;
        uint64_t v17 = v14[1];
        v14[1] = v15[1];
        v15[1] = v17;
        v14 += 2;
        v15 -= 2;
      }
      while (v14 < v15);
      long long v14 = (uint64_t *)v39;
    }
  }
LABEL_24:
  unint64_t v18 = v40;
  if (v14 != v40)
  {
    uint64_t v19 = (uint64_t **)(a1 + 96);
    do
    {
      sub_217179EF4();
      sub_217179F70((long long **)&v47, (uint64_t)v14, (unsigned __int8 *)&qword_267B965A8);
      sub_217179EF4();
      sub_217179F70(&v38, (uint64_t)v14, (unsigned __int8 *)&qword_267B96578);
      sub_21680EE0C(v19, v47, (uint64_t)v47);
      if (v20)
      {
        unint64_t v22 = a3[1];
        unint64_t v21 = a3[2];
        if (v22 >= v21)
        {
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 4);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0x555555555555555) {
            sub_21677CB10();
          }
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a3) >> 4);
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v27 = 0x555555555555555;
          }
          else {
            unint64_t v27 = v25;
          }
          uint64_t v46 = a3 + 2;
          if (v27) {
            uint64_t v28 = (unint64_t *)sub_2168073F4((uint64_t)(a3 + 2), v27);
          }
          else {
            uint64_t v28 = 0;
          }
          unint64_t v42 = v28;
          uint64_t v43 = &v28[6 * v24];
          unint64_t v44 = v43;
          char v45 = &v28[6 * v27];
          sub_21718BF98(v43, (long long **)&v47, &v38);
          v44 += 6;
          sub_2168301F4(a3, &v42);
          uint64_t v23 = a3[1];
          sub_2168303B0((void **)&v42);
        }
        else
        {
          sub_21718BF98((void *)a3[1], (long long **)&v47, &v38);
          uint64_t v23 = v22 + 48;
          a3[1] = v23;
        }
        a3[1] = v23;
      }
      v14 += 2;
    }
    while (v14 != v18);
  }
  unint64_t v29 = *a3;
  uint64_t v30 = a3[1];
  if (*a3 != v30)
  {
    for (unint64_t i = v30 - 48; v29 < i; i -= 48)
    {
      uint64_t v32 = *(void *)(v29 + 16);
      long long v33 = *(_OWORD *)v29;
      uint64_t v34 = *(void *)(i + 16);
      *(_OWORD *)unint64_t v29 = *(_OWORD *)i;
      *(void *)(v29 + 16) = v34;
      *(_OWORD *)unint64_t i = v33;
      *(void *)(i + 16) = v32;
      uint64_t v35 = *(void *)(v29 + 40);
      long long v36 = *(_OWORD *)(v29 + 24);
      uint64_t v37 = *(void *)(i + 40);
      *(_OWORD *)(v29 + 24) = *(_OWORD *)(i + 24);
      *(void *)(v29 + 40) = v37;
      *(_OWORD *)(i + 24) = v36;
      *(void *)(i + 40) = v35;
      v29 += 48;
    }
  }
  unint64_t v42 = &v39;
  sub_216787968((void ***)&v42);
}

void sub_21718BDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21682E488((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21718BE24(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_21718C15C(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_21718C030(a1, (std::string *)v4, &v5, a2);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_21718BE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21718BE90(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_2168073F4(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  long long v14 = &v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  sub_216AC11F8(v14, a2);
  uint64_t v15 = v14 + 48;
  sub_2168301F4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_2168303B0(&v13);
  return v11;
}

void sub_21718BF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168303B0((void **)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_21718BF98(void *__dst, long long **a2, long long **a3)
{
  unint64_t v5 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    _OWORD __dst[2] = *((void *)v5 + 2);
    *(_OWORD *)long long __dst = v6;
  }
  uint64_t result = __dst + 3;
  unint64_t v8 = *a3;
  if (*((char *)*a3 + 23) < 0) {
    return sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  long long v9 = *v8;
  __dst[5] = *((void *)v8 + 2);
  *(_OWORD *)uint64_t result = v9;
  return result;
}

void sub_21718C014(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21718C030(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a3;
  if (*a3)
  {
    unint64_t v8 = (std::__shared_weak_count *)a3[1];
    uint64_t v14 = *a3;
    uint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_2172F5870(a1, &v14);
    uint64_t v7 = v14;
  }
  sub_21718C284(a1, a2, (uint64_t)__p);
  sub_21718C1E8(v7, (unsigned __int8 *)__p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v12)
  {
    long long v9 = v13;
    *a4 = v12;
    a4[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_21718C1E8(v14, (unsigned __int8 *)a2, a4);
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  if (v15) {
    sub_216784EC4(v15);
  }
}

void sub_21718C118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  if (a19) {
    sub_216784EC4(a19);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21718C15C(uint64_t a1)
{
  sub_216779094(__p, off_26798DB78[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    uint64_t v3 = (long long *)(v2 + 40);
  }
  else {
    uint64_t v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_21718C1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21718C1E8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = sub_2170396E4((void *)(a1 + 96), a2);
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  unint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_6;
  }
  sub_2172F2AF0(v6, a3);
  if (!v7) {
    return;
  }
LABEL_6:

  sub_216784EC4(v7);
}

void sub_21718C26C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21718C284(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216784F38(&v51, (void *)(a1 + 8));
LABEL_2:
  shared_weak_owners = v51;
  while (1)
  {
    if (!shared_weak_owners)
    {
      int v15 = 1;
      goto LABEL_47;
    }
    uint64_t v6 = sub_21718C600((uint64_t)shared_weak_owners);
    uint64_t v7 = (char *)v6;
    size_t v8 = *((unsigned __int8 *)v6 + 23);
    char v9 = v8;
    size_t v10 = *((void *)v6 + 1);
    if ((v8 & 0x80u) == 0 ? *((unsigned __int8 *)v6 + 23) : *((void *)v6 + 1)) {
      break;
    }
    uint64_t v12 = v51;
    shared_weak_owners = (std::__shared_weak_count *)v51[9].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
      int v13 = shared_weak_owners;
      if (shared_weak_owners) {
        shared_weak_owners = (std::__shared_weak_count *)v12[9].__shared_owners_;
      }
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v52;
    unint64_t v51 = shared_weak_owners;
    char v52 = v13;
    if (v14)
    {
      sub_216784EC4(v14);
      goto LABEL_2;
    }
  }
  int v16 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v16 >= 0) {
    uint64_t v17 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v17 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  }
  if (v16 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  size_t v19 = strlen(off_26798DDD8[0]);
  if (size) {
    BOOL v20 = v19 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (v20) {
    goto LABEL_26;
  }
  uint64_t v31 = &v17[size];
  uint64_t v32 = v17;
  while (2)
  {
    size_t v33 = v19;
    uint64_t v34 = off_26798DDD8[0];
    do
    {
      if (*v32 == *v34)
      {
        if (v32 == v31 || v32 - v17 == -1) {
          goto LABEL_26;
        }
        std::string::basic_string(&__p, a2, 0, v32 - v17, (std::allocator<char> *)&v53);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v36 = v7[23];
        int v37 = (char)v36;
        if ((v36 & 0x80u) != 0) {
          uint64_t v36 = *((void *)v7 + 1);
        }
        if (v35 == v36)
        {
          if (v37 >= 0) {
            int v38 = v7;
          }
          else {
            int v38 = *(char **)v7;
          }
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            unint64_t v48 = (void *)__p.__r_.__value_.__r.__words[0];
            int v49 = memcmp(__p.__r_.__value_.__l.__data_, v38, __p.__r_.__value_.__l.__size_);
            operator delete(v48);
            if (v49) {
              goto LABEL_87;
            }
          }
          else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
          {
            uint64_t v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
            p_p = &__p;
            do
            {
              int v42 = p_p->__r_.__value_.__s.__data_[0];
              p_p = (std::string *)((char *)p_p + 1);
              int v41 = v42;
              int v44 = *v38++;
              int v43 = v44;
              BOOL v46 = v39-- != 0;
              BOOL v47 = v41 == v43;
            }
            while (v41 == v43 && v46);
LABEL_80:
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v47) {
              goto LABEL_83;
            }
LABEL_87:
            size_t v8 = v7[23];
            size_t v10 = *((void *)v7 + 1);
            char v9 = v7[23];
            goto LABEL_26;
          }
LABEL_83:
          if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            int v15 = 0;
            *(_OWORD *)a3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
            *(void *)(a3 + 16) = *((void *)&a2->__r_.__value_.__l + 2);
            goto LABEL_47;
          }
          sub_216778F24((unsigned char *)a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
          goto LABEL_46;
        }
        BOOL v47 = 0;
        goto LABEL_80;
      }
      ++v34;
      --v33;
    }
    while (v33);
    if (++v32 != v31) {
      continue;
    }
    break;
  }
LABEL_26:
  unint64_t v21 = off_26798DDD8[0];
  if (v9 >= 0) {
    size_t v22 = v8;
  }
  else {
    size_t v22 = v10;
  }
  size_t v23 = strlen(off_26798DDD8[0]);
  unint64_t v24 = &__p;
  sub_2167940B4((uint64_t)&__p, v22 + v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v22)
  {
    if (v7[23] >= 0) {
      unint64_t v25 = v7;
    }
    else {
      unint64_t v25 = *(char **)v7;
    }
    memmove(v24, v25, v22);
  }
  if (v23) {
    memmove((char *)v24 + v22, v21, v23);
  }
  v24->__r_.__value_.__s.__data_[v22 + v23] = 0;
  int v26 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v26 >= 0) {
    unint64_t v27 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v27 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  }
  if (v26 >= 0) {
    std::string::size_type v28 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = a2->__r_.__value_.__l.__size_;
  }
  unint64_t v29 = std::string::append(&__p, v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_46:
  int v15 = 0;
LABEL_47:
  if (v52) {
    sub_216784EC4(v52);
  }
  if (v15)
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24((unsigned char *)a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      *(void *)(a3 + 16) = *((void *)&a2->__r_.__value_.__l + 2);
    }
  }
}

void sub_21718C5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21718C600(uint64_t a1)
{
  sub_216779094(__p, off_26798DB80[0]);
  uint64_t v2 = sub_2170396E4((void *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2) {
    uint64_t v3 = (long long *)(v2 + 40);
  }
  else {
    uint64_t v3 = sub_21730D998();
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_21718C670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21718C68C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 136);
  unint64_t v4 = *(uint64_t **)(a1 + 144);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v8 = *v3;
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_2172F3414(v8, &v15);
      if (!(void)v15) {
        goto LABEL_22;
      }
      int v9 = *(char *)(a2 + 23);
      uint64_t v10 = *(void *)(a2 + 8);
      if (v9 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      }
      if (!v10) {
        goto LABEL_21;
      }
      uint64_t v11 = *(unsigned __int8 *)(v8 + 47);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v8 + 47);
      }
      else {
        uint64_t v12 = *(void *)(v8 + 32);
      }
      if (v12 != v10) {
        goto LABEL_22;
      }
      int v13 = (const void **)(v8 + 24);
      uint64_t v14 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v11 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v13, v14, *(void *)(v8 + 32))) {
        goto LABEL_21;
      }
LABEL_22:
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (v7) {
        sub_216784EC4(v7);
      }
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (*(unsigned char *)(v8 + 47))
    {
      while (*(unsigned __int8 *)v13 == *v14)
      {
        int v13 = (const void **)((char *)v13 + 1);
        ++v14;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_21718C7F0(a3, &v15);
    goto LABEL_22;
  }
}

void sub_21718C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void **sub_21718C7F0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_21718C90C(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_21718C8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21718C90C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21718C984((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21718C984(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21718CA18((uint64_t)v12);
  return v10;
}

uint64_t sub_21718CA18(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

long long *sub_21718CA50(uint64_t *a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 4)) >= a5)
      {
        unint64_t v21 = (long long *)(a3 + 48 * a5);
      }
      else
      {
        unint64_t v21 = (long long *)(a3 + 16 * ((uint64_t)(v12 - (void)a2) >> 4));
        a1[1] = sub_21718CD8C((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_21718CC64((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      if (v21 != (long long *)v7)
      {
        uint64_t v22 = (uint64_t)v5;
        do
        {
          sub_216AC10C0(v22, (long long *)v7);
          v7 += 48;
          v22 += 48;
        }
        while ((long long *)v7 != v21);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      _DWORD v28[4] = v9;
      if (v18) {
        size_t v19 = (char *)sub_2168073F4((uint64_t)v9, v18);
      }
      else {
        size_t v19 = 0;
      }
      size_t v23 = (long long *)&v19[48 * v15];
      v28[0] = v19;
      v28[1] = v23;
      v28[3] = &v19[48 * v18];
      unint64_t v24 = &v23[3 * a5];
      do
      {
        long long v25 = *(_OWORD *)v7;
        *((void *)v23 + 2) = *(void *)(v7 + 16);
        *size_t v23 = v25;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 0;
        long long v26 = *(_OWORD *)(v7 + 24);
        *((void *)v23 + 5) = *(void *)(v7 + 40);
        *(long long *)((char *)v23 + 24) = v26;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 24) = 0;
        v23 += 3;
        v7 += 48;
      }
      while (v23 != v24);
      void v28[2] = v24;
      uint64_t v5 = (long long *)sub_21718CCD8((uint64_t)a1, v28, v5);
      sub_2168303B0(v28);
    }
  }
  return v5;
}

void sub_21718CC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

long long *sub_21718CC64(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (long long *)((char *)a2 + v6 - a4);
  uint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *v9;
      *(void *)(v8 + 16) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v8 = v10;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)long long v9 = 0;
      long long v11 = *(long long *)((char *)v9 + 24);
      *(void *)(v8 + 40) = *((void *)v9 + 5);
      *(_OWORD *)(v8 + 24) = v11;
      *((void *)v9 + 4) = 0;
      *((void *)v9 + 5) = 0;
      *((void *)v9 + 3) = 0;
      v8 += 48;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_21718CE2C(a2, v7, v6);
}

uint64_t sub_21718CCD8(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_21683026C(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_21718CD8C(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_21718CD8C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      long long v6 = *(long long *)((char *)a2 + 24);
      *(void *)(v4 + 40) = *((void *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v11 = v4;
  }
  char v9 = 1;
  sub_216C02F28((uint64_t)v8);
  return v4;
}

long long *sub_21718CE2C(long long *a1, long long *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    long long v6 = a2;
    do
    {
      v6 -= 3;
      a3 -= 48;
      sub_216AC10C0(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void sub_21718CE8C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 16);
  sub_21678A498(a1 + 112, *(char **)(a1 + 120));
  uint64_t v4 = (void **)(a1 + 88);
  sub_21682E488(&v4);
  sub_21718CF08(a1 + 64, *(void **)(a1 + 72));
  uint64_t v4 = (void **)(a1 + 40);
  sub_216787968(&v4);
  uint64_t v4 = v2;
  sub_216782F20(&v4);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
}

void sub_21718CF08(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21718CF08(a1, *a2);
    sub_21718CF08(a1, a2[1]);
    sub_21718CF64((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21718CF64(uint64_t a1)
{
  sub_2167877AC(a1 + 16, *(void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_216784EC4(v2);
  }
}

uint64_t sub_21718CFB4(uint64_t a1)
{
  return a1;
}

long long **sub_21718CFE0(long long **a1, uint64_t a2)
{
  uint64_t v3 = sub_2170396E4((void *)(*(void *)a2 + 160), (unsigned __int8 *)&qword_267B963C8);
  if (v3) {
    uint64_t v4 = (long long *)(v3 + 40);
  }
  else {
    uint64_t v4 = sub_21730D998();
  }
  uint64_t v5 = *((unsigned __int8 *)v4 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)v4 + 1);
  }
  if (!v5) {
    uint64_t v4 = sub_21730D998();
  }
  *a1 = v4;
  return a1;
}

void *sub_21718D048(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    _DWORD v19[4] = v4;
    unint64_t v14 = (char *)sub_216787EE0((uint64_t)v4, v13);
    unint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v19[2] = v15 + 16;
    sub_21718D2CC(a1, v19);
    char v9 = (void *)a1[1];
    sub_216788028(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    char v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_21718D154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_21718D168(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  char v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        return v9;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x48uLL);
    unint64_t v13 = v12;
    v17[1] = v7;
    unint64_t v14 = *a4;
    _DWORD v12[4] = **a4;
    uint64_t v15 = v14[1];
    v12[5] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    _OWORD v12[8] = 0;
    v12[7] = 0;
    v12[6] = (uint64_t)(v12 + 7);
    char v18 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, v12);
    v17[0] = 0;
    sub_21718D274((uint64_t)v17, 0);
  }
  return (uint64_t **)v13;
}

void sub_21718D274(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21718CF64((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_21718D2CC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21718D344((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21718D344(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21718D3D8((uint64_t)v12);
  return v10;
}

uint64_t sub_21718D3D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t *sub_21718D410(uint64_t **a1, long long *a2, long long *a3)
{
  sub_21718D4AC((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)sub_21718D520((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    sub_21677B358(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  sub_21677B548((uint64_t)v8, 0);
  return v5;
}

void sub_21718D494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B548((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_21718D4AC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_21718D5C0(v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21718D508(_Unwind_Exception *a1)
{
  sub_21677B548(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_21718D520(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        long long v9 = (const void **)(v4 + 32);
        if (!sub_217061310(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_217061310(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

char *sub_21718D5C0(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_21718D63C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21718D658(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21718D658(a1, *a2);
    sub_21718D658(a1, a2[1]);
    sub_21718CE8C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_21718D6B4(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v2 = (void *)(a1 + 56);
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      unint64_t v7 = v3[4];
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        long long v9 = v3;
      }
      else {
        long long v9 = v3 + 1;
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = (void *)*v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= v6[4]) {
      return v6 + 6;
    }
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B96688, memory_order_acquire)) {
    return &qword_267B96670;
  }
  if (__cxa_guard_acquire(&qword_267B96688))
  {
    qword_267B96680 = 0;
    qword_267B96678 = 0;
    qword_267B96670 = (uint64_t)&qword_267B96678;
    __cxa_atexit((void (*)(void *))sub_21718CFB4, &qword_267B96670, &dword_216758000);
    __cxa_guard_release(&qword_267B96688);
  }
  return &qword_267B96670;
}

void sub_21718D78C(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_21718D9C4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 272));
}

void *sub_21718D824(uint64_t **a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (void **)sub_2168BE158((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x30uLL);
    long long v9 = *a4;
    v7[4] = **a4;
    *long long v9 = 0;
    *((_DWORD *)v7 + 10) = 0;
    sub_21677B358(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_21718D8B4(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_21718D94C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *sub_21718D94C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x30uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 10) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21718D9C4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_21718DA64(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_21718DA8C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result = sub_21697BFBC(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a2);
    else {
      uint64_t v6 = *(uint64_t **)a2;
    }
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    uint64_t v9 = **(uint64_t ***)(a1 + 8);
    if (v7 - *v6 == *(void *)(*(void *)(a1 + 8) + 8) - (void)v9)
    {
      if (v8 == v7)
      {
        return 1;
      }
      else
      {
        uint64_t v10 = v8 + 8;
        do
        {
          uint64_t v11 = *v9++;
          uint64_t result = (*(void *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8);
          BOOL v12 = (*(void *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) != (v11 & 0xFFFFFFFFFFFFFFF8) || v10 == v7;
          v10 += 8;
        }
        while (!v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(uint64_t a1, void *a2, long long *a3, int a4)
{
  *(void *)a1 = *a2;
  uint64_t v6 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(v6 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(_DWORD *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry(pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *this)
{
  if (*((void *)this + 5))
  {
    v3[0] = "hf/pluginEntry.cpp";
    v3[1] = "~Hf_PluginEntry";
    v3[2] = 48;
    v3[3] = "pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry()";
    char v4 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "_instance == nullptr", 0) & 1) == 0)
    {
      uint64_t v2 = *((void *)this + 5);
      if (v2) {
        (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
    }
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

__n128 pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

{
  __n128 result;

  *(void *)a1 = *(void *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetId@<X0>(pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);

  return pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
}

std::string *pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetDesc(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v7);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 & 7;
  if (&v7 == a2)
  {
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a2 = v7;
  }
  __n128 result = std::string::operator=((std::string *)(a2 + 1), (const std::string *)(a1 + 8));
  *((_DWORD *)a2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount(pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *this, uint64_t a2, char *a3)
{
  if (!*((_DWORD *)this + 12))
  {
    uint64_t v4 = sub_21718DF50(this, a2, a3);
    if (v4)
    {
      uint64_t v5 = v4[4];
      if (!v5) {
        sub_21683A7CC();
      }
      *((void *)this + 5) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    }
    else
    {
      v9[0] = "hf/pluginEntry.cpp";
      v9[1] = "IncRefCount";
      void v9[2] = 99;
      void v9[3] = "void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount()";
      char v10 = 0;
      pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v8);
      unint64_t v6 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v7 = (const char *)(v6 + 16);
        if (*(char *)(v6 + 39) < 0) {
          uint64_t v7 = *(const char **)v7;
        }
      }
      else
      {
        uint64_t v7 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin %s is missing TfType registration", v7);
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  ++*((_DWORD *)this + 12);
}

void *sub_21718DF50(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::DecRefCount(_DWORD *this)
{
  uint64_t v1 = this;
  int v2 = this[12];
  if (v2 <= 0)
  {
    v4[0] = "hf/pluginEntry.cpp";
    v4[1] = "DecRefCount";
    uint64_t v4[2] = 110;
    v4[3] = "void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::DecRefCount()";
    char v5 = 0;
    this = (_DWORD *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "_refCount > 0", 0);
    if (!this)
    {
      v1[12] = 0;
      return this;
    }
    int v2 = v1[12];
  }
  int v3 = v2 - 1;
  v1[12] = v3;
  if (!v3)
  {
    this = (_DWORD *)*((void *)v1 + 5);
    if (this) {
      this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 8))(this);
    }
    *((void *)v1 + 5) = 0;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  int v2 = *((_DWORD *)a1 + 8);
  int v3 = *((_DWORD *)a2 + 8);
  if (v2 < v3) {
    return 1;
  }
  if (v2 > v3) {
    return 0;
  }
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
  int v8 = *(char *)(v7 + 23);
  int v9 = *(char *)(TypeName + 23);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(TypeName + 23);
  }
  else {
    size_t v10 = *(void *)(TypeName + 8);
  }
  if (v9 >= 0) {
    uint64_t v11 = (const void *)TypeName;
  }
  else {
    uint64_t v11 = *(const void **)TypeName;
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    size_t v12 = *(void *)(v7 + 8);
  }
  if (v8 >= 0) {
    char v13 = (const void *)v7;
  }
  else {
    char v13 = *(const void **)v7;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  if (v15) {
    return v15 < 0;
  }
  else {
    return v10 < v12;
  }
}

void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::SetFactory(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  sub_21718E1F4(v4, a2);
  uint64_t v7 = 0;
  int v8 = v4;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v8, v5);
  uint64_t v6 = (uint64_t)v8;
  int v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_21718E3E4(&v7, 0);
}

void sub_21718E1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_217324398(v11);
  }
  sub_21718E3E4(&a9, 0);
  _Unwind_Resume(a1);
}

void *sub_21718E1F4(void *a1, uint64_t a2)
{
  *a1 = &unk_26C77BB78;
  sub_21718E2C8((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_21718E238(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(v1);
  _Unwind_Resume(a1);
}

void sub_21718E24C(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  sub_21718E360((void *)a1 + 1);

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
}

void sub_21718E288(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  sub_21718E360((void *)a1 + 1);
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v2);
}

uint64_t sub_21718E2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_21718E360(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_21718E3E4(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase **a1, pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a2)
{
  int v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_21718E360((void *)v2 + 1);
    pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(v2);
    operator delete(v3);
  }
}

uint64_t *sub_21718E448()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21718E508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HfPluginRegistry::HfPluginRegistry(uint64_t this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)this = &unk_26C77BBE0;
  *(void *)(this + 8) = v2;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = this + 48;
  *(unsigned char *)(this + 64) = 0;
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)a2;
  *(void *)this = &unk_26C77BBE0;
  *(void *)(this + 8) = v2;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = this + 48;
  *(unsigned char *)(this + 64) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::~HfPluginRegistry(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this)
{
  *(void *)this = &unk_26C77BBE0;
  sub_2168CB05C((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v2 = (void **)((char *)this + 16);
  sub_21718F25C(&v2);
}

{
  void **v2;

  *(void *)this = &unk_26C77BBE0;
  sub_2168CB05C((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v2 = (void **)((char *)this + 16);
  sub_21718F25C(&v2);
}

{
  void **v2;

  *(void *)this = &unk_26C77BBE0;
  sub_2168CB05C((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v2 = (void **)((char *)this + 16);
  sub_21718F25C(&v2);
  operator delete(this);
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginDescs(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 64)) {
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins((pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)a1);
  }
  if (*a2 != a2[1])
  {
    v8[0] = "hf/pluginRegistry.cpp";
    v8[1] = "GetPluginDescs";
    v8[2] = 60;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginDescs(HfPluginDescVector *)";
    char v9 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "plugins->empty()", 0) & 1) == 0) {
      sub_21718F2E0((uint64_t)a2, *a2);
    }
  }
  sub_21718EC3C(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 24) != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetDesc(v4 + v6, (uint64_t *)(*a2 + v5));
      ++v7;
      uint64_t v4 = *(void *)(a1 + 16);
      v6 += 56;
      v5 += 40;
    }
    while (v7 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 24) - v4) >> 3));
  }
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this)
{
  uint64_t v1 = this;
  uint64_t v22 = (uint64_t *)((char *)this + 16);
  if (*((void *)this + 2) != *((void *)this + 3))
  {
    std::string __p = "hf/pluginRegistry.cpp";
    uint64_t v31 = "_DiscoverPlugins";
    uint64_t v32 = 183;
    size_t v33 = "void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins()";
    char v34 = 0;
    this = (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_pluginEntries.empty()", 0);
  }
  unint64_t Instance = pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  std::string::size_type v28 = 0;
  unint64_t v29 = 0;
  unint64_t v27 = (uint64_t *)&v28;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*((void *)v1 + 1), &v27);
  sub_21718F144(v22, v29);
  uint64_t v3 = v27;
  if (v27 != (uint64_t *)&v28)
  {
    do
    {
      uint64_t v4 = v3[4];
      sub_216779094(&__p, "displayName");
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetStringFromPluginMetaData(v4, (const void **)&__p, (uint64_t)v25);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
      uint64_t v5 = v3[4];
      sub_216779094(&__p, "priority");
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v5, (const void **)&__p, (pxrInternal__aapl__pxrReserved__::JsValue *)&v23);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p);
      }
      unint64_t v6 = v26;
      if ((v26 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)v25[1];
      }
      if (v6 && pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)&v23))
      {
        LODWORD(__p) = 0;
        uint64_t Int = pxrInternal__aapl__pxrReserved__::JsValue::GetInt(&v23);
        LODWORD(__p) = Int;
        unint64_t v8 = *((void *)v1 + 3);
        if (v8 >= *((void *)v1 + 4))
        {
          uint64_t v9 = sub_21718F914(v22, (uint64_t)(v3 + 4), (uint64_t)v25, (unsigned int *)&__p);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(*((void *)v1 + 3), v3 + 4, v25, Int);
          uint64_t v9 = v8 + 56;
          *((void *)v1 + 3) = v8 + 56;
        }
        *((void *)v1 + 3) = v9;
      }
      else
      {
        std::string __p = "hf/pluginRegistry.cpp";
        uint64_t v31 = "_DiscoverPlugins";
        uint64_t v32 = 208;
        size_t v33 = "void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins()";
        char v34 = 0;
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v3 + 4));
        if (*(char *)(TypeName + 23) >= 0) {
          uint64_t v12 = TypeName;
        }
        else {
          uint64_t v12 = *(void *)TypeName;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Plugin %s type information incomplete", v11, v12);
      }
      (*(void (**)(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *, unint64_t, uint64_t *))(*(void *)v1 + 16))(v1, Instance, v3 + 4);
      if (v24) {
        sub_216784EC4(v24);
      }
      if ((char)v26 < 0) {
        operator delete(v25[0]);
      }
      char v13 = (uint64_t *)v3[1];
      if (v13)
      {
        do
        {
          size_t v14 = v13;
          char v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          size_t v14 = (uint64_t *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != (uint64_t *)&v28);
  }
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfType *)*((void *)v1 + 2);
  long long v17 = (pxrInternal__aapl__pxrReserved__::TfType *)*((void *)v1 + 3);
  unint64_t v18 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v17 - v16) >> 3));
  if (v17 == v16) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  sub_21718FA4C(v16, v17, (uint64_t)&__p, v19, 1);
  std::string __p = 0;
  uint64_t v20 = *((void *)v1 + 2);
  if (*((void *)v1 + 3) != v20)
  {
    unint64_t v21 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetId((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)(v20 + 56 * v21), (uint64_t)v25);
      sub_217190C1C((uint64_t **)v1 + 5, (uint64_t *)v25, (uint64_t *)v25, &__p);
      if (((uint64_t)v25[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v25[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v21 = (unint64_t)__p + 1;
      std::string __p = (void *)v21;
      uint64_t v20 = *((void *)v1 + 2);
    }
    while (v21 < 0x6DB6DB6DB6DB6DB7 * ((*((void *)v1 + 3) - v20) >> 3));
  }
  *((unsigned char *)v1 + 64) = 1;
  sub_2167FB780((uint64_t)&v27, v28);
}

void sub_21718EB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void sub_21718EC3C(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_21718F350(a1, v4);
  }
  else if (!v3)
  {
    sub_21718F2E0((uint64_t)a1, *a1 + 40 * a2);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginDesc(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, uint64_t *a2, uint64_t *a3)
{
  if (!*((unsigned char *)this + 64)) {
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(this);
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)sub_216A8E1C4((uint64_t)this + 40, a2);
  unint64_t v7 = v6;
  if ((pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)((char *)this + 48) != v6) {
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetDesc(*((void *)this + 2) + 56 * *((void *)v6 + 5), a3);
  }
  return (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)((char *)this + 48) != v7;
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::AddPluginReference(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const std::type_info *a2, char *a3)
{
  EntryForPlugistd::string::size_type n = (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(this, a2, a3);
  if (EntryForPlugin)
  {
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount(EntryForPlugin, v4, v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const std::type_info *a2, char *a3)
{
  size_t v14 = a2;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_21718F204((pxrInternal__aapl__pxrReserved__::TfType *)&v14, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v9);
  if (*(char **)v4 != v9
    || (uint64_t v9 = "hf/pluginRegistry.cpp",
        size_t v10 = "_GetEntryForPlugin",
        uint64_t v11 = 237,
        uint64_t v12 = "Hf_PluginEntry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(HfPluginBase *)",
        char v13 = 0,
        uint64_t v6 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "!type.IsUnknown()", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v8);
    uint64_t v5 = sub_216A8E1C4((uint64_t)this + 40, &v8);
    if ((void *)((char *)this + 48) != v5
      || (uint64_t v9 = "hf/pluginRegistry.cpp",
          size_t v10 = "_GetEntryForPlugin",
          uint64_t v11 = 244,
          uint64_t v12 = "Hf_PluginEntry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(HfPluginBase *)",
          char v13 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "it != _pluginIndex.end()", 0) & 1) != 0))
    {
      uint64_t v6 = *((void *)this + 2) + 56 * v5[5];
      if (*(const std::type_info **)(v6 + 40) != v14)
      {
        uint64_t v9 = "hf/pluginRegistry.cpp";
        size_t v10 = "_GetEntryForPlugin";
        uint64_t v11 = 250;
        uint64_t v12 = "Hf_PluginEntry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(HfPluginBase *)";
        char v13 = 0;
        if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "entry.GetInstance() == plugin", 0))uint64_t v6 = 0; {
      }
        }
    }
    else
    {
      uint64_t v6 = 0;
    }
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return v6;
}

void sub_21718EEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HfPluginRegistry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::ReleasePlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const std::type_info *a2, char *a3)
{
  if (a2)
  {
    this = (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(this, a2, a3);
    if (this)
    {
      return (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::DecRefCount(this);
    }
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::HfPluginRegistry::IsRegisteredPlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (!*((unsigned char *)this + 64)) {
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(this);
  }
  return (void *)((char *)this + 48) != sub_216A8E1C4((uint64_t)this + 40, (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (!*((unsigned char *)this + 64)) {
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(this);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_216A8E1C4((uint64_t)this + 40, (uint64_t *)a2);
  if ((pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)((char *)this + 48) == v4) {
    return 0;
  }
  unint64_t v7 = (uint64_t *)(*((void *)this + 2) + 56 * *((void *)v4 + 5));
  if (v7[5]) {
    goto LABEL_10;
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v4);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*v7, &v17);
  uint64_t v8 = sub_2168E79D8(&v17);
  if (v9 & 1 | (unint64_t)v8
    || (v15[0] = "hf/pluginRegistry.cpp",
        v15[1] = "GetPlugin",
        uint64_t v15[2] = 147,
        v15[3] = "HfPluginBase *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPlugin(const TfToken &)",
        char v16 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "plugin", 0) & 1) != 0))
  {
    size_t v10 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v17);
    char v11 = pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v10);
    uint64_t v12 = v18;
    if (v18)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    if ((v11 & 1) == 0) {
      return 0;
    }
LABEL_10:
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v7, v5, v6);
    return v7[5];
  }
  uint64_t v14 = v18;
  if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return 0;
}

void sub_21718F0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_uint *a16)
{
  if (a16)
  {
    if (atomic_fetch_add_explicit(a16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a16 + 8))(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21718F144(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2167B421C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 56 * v6;
    sub_21718F7B8(a1, v7);
    return sub_21718F8C4((uint64_t)v7);
  }
  return result;
}

void sub_21718F1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21718F8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21718F204(pxrInternal__aapl__pxrReserved__::TfType *a1, const std::type_info *a2, char *a3)
{
  if (*(void *)a1) {
    return pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(**(void **)a1 - 8), a2, a3);
  }
  else {
    return pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(a1);
  }
}

const pxrInternal__aapl__pxrReserved__::HfPluginBase **pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginId@<X0>(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::HfPluginBase *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (const pxrInternal__aapl__pxrReserved__::HfPluginBase **)*((void *)this + 2);
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::HfPluginBase **)*((void *)this + 3);
  while (1)
  {
    if (result == v5)
    {
      *a3 = 0;
      return result;
    }
    if (result[5] == a2) {
      break;
    }
    result += 7;
  }
  return (const pxrInternal__aapl__pxrReserved__::HfPluginBase **)pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetId((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)result, (uint64_t)a3);
}

void sub_21718F25C(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)(v4 - 56));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21718F2E0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
    uint64_t v5 = *(void *)(i - 40);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void sub_21718F350(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_2168720A4(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    BOOL v15 = v12;
    char v16 = &v12[40 * v8];
    uint64_t v18 = &v12[40 * v11];
    size_t v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_21718F4B8(a1, &v15);
    sub_21718F70C((uint64_t)&v15);
  }
}

void sub_21718F4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21718F70C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21718F4B8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21718F530((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21718F530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 40);
      a3 -= 40;
      *(void *)(v7 - 40) = v8;
      *(void *)a3 = 0;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 16) = *(void *)(a3 + 24);
      *(_OWORD *)(v7 - 32) = v9;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 32);
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21718F5E0((uint64_t)v12);
  return v10;
}

uint64_t sub_21718F5E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21718F618((uint64_t *)a1);
  }
  return a1;
}

void sub_21718F618(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_21718F690(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_21718F690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    if (*(char *)(i + 31) < 0) {
      operator delete(*(void **)(i + 8));
    }
    if ((*(void *)i & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)i & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t i = *(void *)(a2 + 32) + 40;
  }
}

uint64_t sub_21718F70C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21718F744(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (void *)(i - 40);
    *(void *)(a1 + 16) = i - 40;
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
    if ((*v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

uint64_t sub_21718F7B8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21718F830((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21718F830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 56;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 56;
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_21718F8C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21718F914(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x249249249249249) {
    unint64_t v13 = 0x492492492492492;
  }
  else {
    unint64_t v13 = v7;
  }
  unint64_t v21 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)sub_2167B421C(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v17 = v14;
  uint64_t v18 = &v14[56 * v6];
  uint64_t v19 = v18;
  uint64_t v20 = &v14[56 * v13];
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(v18, a2, a3, *a4);
  uint64_t v19 = v18 + 56;
  sub_21718F7B8(a1, &v17);
  uint64_t v15 = a1[1];
  sub_21718F8C4((uint64_t)&v17);
  return v15;
}

void sub_21718FA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21718F8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21718FA4C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  unint64_t v24 = a2;
  long long v25 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = v9 - v10;
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56);
          if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56), v10))sub_21718FD58((uint64_t *)&v25, (uint64_t *)&v24); {
          break;
          }
        case 3uLL:
          unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56);
          sub_21718FF70(v10, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56));
          break;
        case 4uLL:
          unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56);
          sub_21719058C(v10, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56));
          break;
        case 5uLL:
          unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56);
          sub_21719062C(v10, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 168), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1343)
    {
      if (a5) {
        sub_21718FDC4((uint64_t)v10, (uint64_t)v9);
      }
      else {
        sub_21718FEB0((uint64_t)v10, v9);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v9 - 56);
    if ((unint64_t)v12 >= 0x1C01)
    {
      sub_21718FF70(v10, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 56 * (v13 >> 1)), v15);
      uint64_t v16 = 56 * v14;
      uint64_t v17 = 56 * v14 - 56;
      uint64_t v18 = v24;
      sub_21718FF70((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 + v17), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v24 - 112));
      sub_21718FF70((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 + v16 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v18 - 168));
      sub_21718FF70((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 + v17), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 + v16), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 + v16 + 56));
      uint64_t v23 = (uint64_t)v25 + v16;
      sub_217190038((uint64_t *)&v25, &v23);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_21718FF70((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 56 * (v13 >> 1)), v10, v15);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = v24;
        goto LABEL_14;
      }
    }
    char v19 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v25 - 56), v25);
    uint64_t v9 = v24;
    if ((v19 & 1) == 0)
    {
      uint64_t v10 = sub_2171900A4(v25, v24);
LABEL_22:
      a5 = 0;
      long long v25 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    uint64_t v20 = sub_217190220((uint64_t)v25, v9);
    if ((v21 & 1) == 0) {
      goto LABEL_21;
    }
    int v22 = sub_217190394((uint64_t)v25, v20);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)(v20 + 56);
    if (sub_217190394(v20 + 56, (uint64_t)v9))
    {
      if (v22) {
        return;
      }
      unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfType *)v20;
      uint64_t v10 = v25;
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfType *)v20;
    }
    else
    {
      if (!v22)
      {
LABEL_21:
        sub_21718FA4C(v25, v20, a3, -i, a5 & 1);
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)(v20 + 56);
        goto LABEL_22;
      }
      long long v25 = (pxrInternal__aapl__pxrReserved__::TfType *)(v20 + 56);
    }
  }
  if (v10 != v9) {
    sub_2171906F8(v10, (uint64_t)v9, v9, a3);
  }
}

void sub_21718FD58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v4, *a1);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v3, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v4);
}

void sub_21718FDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_21718FDC4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56);
    if (a1 + 56 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
        uint64_t v6 = (uint64_t)v4;
        if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v4, v7))
        {
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v11, v6);
          uint64_t v8 = v5;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(a1 + v8 + 56, a1 + v8);
            if (!v8) {
              break;
            }
            char v9 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + v8 - 56));
            v8 -= 56;
            if ((v9 & 1) == 0)
            {
              uint64_t v10 = a1 + v8 + 56;
              goto LABEL_10;
            }
          }
          uint64_t v10 = a1;
LABEL_10:
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v10, (uint64_t)v11);
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v11);
        }
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 56);
        v5 += 56;
      }
      while (v6 + 56 != a2);
    }
  }
}

void sub_21718FE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_21718FEB0(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  if ((pxrInternal__aapl__pxrReserved__::TfType *)a1 != a2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfType *)a1;
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56);
    while (v4 != a2)
    {
      uint64_t v5 = (uint64_t)v4;
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v4, v3))
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v6, v5);
        do
        {
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v3 + 56, (uint64_t)v3);
          uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v3 - 56);
        }
        while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v6, v3) & 1) != 0);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v3 + 56, (uint64_t)v6);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v6);
      }
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(v5 + 56);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfType *)v5;
    }
  }
}

void sub_21718FF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21718FF70(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  char v9 = a3;
  char v5 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a2, a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a3, a2);
  if ((v5 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    sub_21718FD58((uint64_t *)&v10, (uint64_t *)&v9);
    if (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v10, v11)) {
      return 1;
    }
    unint64_t v7 = &v11;
    uint64_t v8 = &v10;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_21718FD58((uint64_t *)&v11, (uint64_t *)&v10);
    if (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v9, v10)) {
      return 1;
    }
    unint64_t v7 = &v10;
    uint64_t v8 = &v9;
LABEL_9:
    sub_21718FD58((uint64_t *)v7, (uint64_t *)v8);
    return 2;
  }
  sub_21718FD58((uint64_t *)&v11, (uint64_t *)&v9);
  return 1;
}

void sub_217190038(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v4, *a1);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v3, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v4);
}

void sub_217190090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfType *sub_2171900A4(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v12 = a2;
  unint64_t v13 = a1;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v11, (uint64_t)a1);
  if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 56)))
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v4 + 56);
      unint64_t v13 = v4;
    }
    while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v4) & 1) == 0);
  }
  else
  {
    char v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + 56);
    do
    {
      uint64_t v4 = v5;
      unint64_t v13 = v5;
      if (v5 >= v12) {
        break;
      }
      int v6 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v5);
      char v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v4 + 56);
    }
    while (!v6);
  }
  unint64_t v7 = v12;
  if (v4 < v12)
  {
    do
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56);
      uint64_t v12 = v7;
    }
    while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v7) & 1) != 0);
    uint64_t v4 = v13;
  }
  if (v4 < v7)
  {
    do
    {
      sub_21718FD58((uint64_t *)&v13, (uint64_t *)&v12);
      do
        unint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 + 56);
      while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v13));
      do
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v12 - 56);
      while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v12) & 1) != 0);
      uint64_t v4 = v13;
    }
    while (v13 < v12);
  }
  uint64_t v8 = (uint64_t)v4 - 56;
  if ((pxrInternal__aapl__pxrReserved__::TfType *)v8 != a1) {
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)a1, v8);
  }
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v8, (uint64_t)v11);
  char v9 = v13;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v11);
  return v9;
}

void sub_2171901F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217190220(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v12 = a2;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v11, a1);
  uint64_t v3 = 0;
  do
  {
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + v3 + 56);
    v3 += 56;
  }
  while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v13, (pxrInternal__aapl__pxrReserved__::TfType *)v11) & 1) != 0);
  uint64_t v4 = v12;
  if (v3 == 56)
  {
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56);
    do
    {
      if (v7 >= v4) {
        break;
      }
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v4 - 56);
      uint64_t v12 = v4;
    }
    while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v4, (pxrInternal__aapl__pxrReserved__::TfType *)v11) & 1) == 0);
  }
  else
  {
    char v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v12 - 56);
    do
    {
      uint64_t v12 = v5;
      int v6 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v5, (pxrInternal__aapl__pxrReserved__::TfType *)v11);
      char v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v5 - 56);
    }
    while (!v6);
    unint64_t v7 = v13;
  }
  uint64_t v8 = v7;
  if (v7 < v12)
  {
    do
    {
      sub_21718FD58((uint64_t *)&v13, (uint64_t *)&v12);
      do
        unint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 + 56);
      while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v13, (pxrInternal__aapl__pxrReserved__::TfType *)v11) & 1) != 0);
      do
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v12 - 56);
      while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v12, (pxrInternal__aapl__pxrReserved__::TfType *)v11));
      uint64_t v8 = v13;
    }
    while (v13 < v12);
  }
  uint64_t v9 = (uint64_t)v8 - 56;
  if ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 - 56) != (pxrInternal__aapl__pxrReserved__::TfType *)a1) {
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(a1, (uint64_t)v8 - 56);
  }
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v9, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v11);
  return v9;
}

void sub_217190368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217190394(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfType *)a2;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfType *)a1;
  BOOL v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56);
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56), (pxrInternal__aapl__pxrReserved__::TfType *)a1))sub_21718FD58((uint64_t *)&v12, (uint64_t *)&v11); {
      return v4;
      }
    case 3:
      sub_21718FF70((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56));
      return v4;
    case 4:
      sub_21719058C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56));
      return v4;
    case 5:
      sub_21719062C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 168), (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56));
      return v4;
    default:
      char v5 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112);
      sub_21718FF70((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112));
      int v6 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 168);
      if (v6 == (pxrInternal__aapl__pxrReserved__::TfType *)a2) {
        return 1;
      }
      int v7 = 0;
      break;
  }
  while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v6, v5))
  {
LABEL_12:
    char v5 = v6;
    int v6 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 56);
    if (v6 == v11) {
      return 1;
    }
  }
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v10, (uint64_t)v6);
  do
  {
    uint64_t v8 = (uint64_t)v5;
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v5 + 56, (uint64_t)v5);
    if (v5 == v12) {
      break;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v5 - 56);
  }
  while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v10, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 - 56)) & 1) != 0);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v8, (uint64_t)v10);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v10);
    goto LABEL_12;
  }
  BOOL v4 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 56) == v11;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v10);
  return v4;
}

void sub_21719055C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_21719058C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  sub_21718FF70(a1, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a4, a3))
  {
    sub_21718FD58((uint64_t *)&v9, (uint64_t *)&v8);
    if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v9, a2))
    {
      sub_21718FD58((uint64_t *)&v10, (uint64_t *)&v9);
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v10, a1)) {
        sub_21718FD58((uint64_t *)&v11, (uint64_t *)&v10);
      }
    }
  }
}

void sub_21719062C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4, pxrInternal__aapl__pxrReserved__::TfType *a5)
{
  unint64_t v13 = a2;
  unint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v10 = a5;
  sub_21719058C(a1, a2, a3, a4);
  if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a5, a4))
  {
    sub_21718FD58((uint64_t *)&v11, (uint64_t *)&v10);
    if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v11, a3))
    {
      sub_21718FD58((uint64_t *)&v12, (uint64_t *)&v11);
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v12, a2))
      {
        sub_21718FD58((uint64_t *)&v13, (uint64_t *)&v12);
        if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v13, a1)) {
          sub_21718FD58((uint64_t *)&v14, (uint64_t *)&v13);
        }
      }
    }
  }
}

uint64_t sub_2171906F8(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::TfType *a3, uint64_t a4)
{
  uint64_t v15 = a1;
  if (a1 != (pxrInternal__aapl__pxrReserved__::TfType *)a2)
  {
    int v7 = a1;
    uint64_t v8 = (a2 - (uint64_t)a1) / 56;
    if (a2 - (uint64_t)a1 >= 57)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + 56 * v9);
      do
      {
        sub_217190818((uint64_t)v7, a4, v8, v11);
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v11 - 56);
        --v10;
      }
      while (v10);
    }
    uint64_t v14 = a2;
    if ((pxrInternal__aapl__pxrReserved__::TfType *)a2 != a3)
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfType *)a2;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v12, v15))
        {
          sub_21718FD58(&v14, (uint64_t *)&v15);
          sub_217190818((uint64_t)v15, a4, v8, v15);
        }
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfType *)(v14 + 56);
        uint64_t v14 = (uint64_t)v12;
      }
      while (v12 != a3);
      int v7 = v15;
    }
    sub_21719098C((uint64_t)v7, a2, a4);
    return v14;
  }
  return (uint64_t)a3;
}

void sub_217190818(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::TfType *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      int64_t v9 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v10 = a1 + 56 * v9;
      int64_t v11 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3
        && pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v9), (pxrInternal__aapl__pxrReserved__::TfType *)(v10 + 56)))
      {
        v10 += 56;
        int64_t v9 = v11;
      }
      if ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v10, v5) & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v14, (uint64_t)v5);
        do
        {
          uint64_t v12 = v10;
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v5, v10);
          if (v7 < v9) {
            break;
          }
          uint64_t v13 = (2 * v9) | 1;
          uint64_t v10 = a1 + 56 * v13;
          int64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            int64_t v9 = v13;
          }
          else if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v13), (pxrInternal__aapl__pxrReserved__::TfType *)(v10 + 56)))
          {
            v10 += 56;
          }
          else
          {
            int64_t v9 = v13;
          }
          char v5 = (pxrInternal__aapl__pxrReserved__::TfType *)v12;
        }
        while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v10, (pxrInternal__aapl__pxrReserved__::TfType *)v14));
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v12, (uint64_t)v14);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v14);
      }
    }
  }
}

void sub_217190974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_21719098C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 - a1 >= 57)
  {
    unint64_t v5 = (a2 - a1) / 0x38uLL;
    uint64_t v6 = a2 - 56;
    do
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v12, a1);
      uint64_t v7 = sub_217190A9C(a1, a3, v5);
      uint64_t v8 = v7;
      if (v6 == v7)
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v7, (uint64_t)v12);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v7, v6);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v6, (uint64_t)v12);
        sub_217190B4C(a1, v8 + 56, a3, 0x6DB6DB6DB6DB6DB7 * ((v8 + 56 - a1) >> 3));
      }
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v12);
      v6 -= 56;
      BOOL v11 = __OFSUB__(v5, 2);
      BOOL v9 = v5 == 2;
      BOOL v10 = (uint64_t)(v5 - 2) < 0;
      --v5;
    }
    while (!(v10 ^ v11 | v9));
  }
}

void sub_217190A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217190A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 56 * v5 + 56;
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3
      && pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5 + 112)))
    {
      v8 += 56;
      uint64_t v9 = v10;
    }
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(a1, v8);
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void sub_217190B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v5 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5);
    uint64_t v7 = a2 - 56;
    if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v6, (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56)))
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v9, v7);
      do
      {
        uint64_t v8 = (uint64_t)v6;
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v7, (uint64_t)v6);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5);
        uint64_t v7 = v8;
      }
      while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v6, (pxrInternal__aapl__pxrReserved__::TfType *)v9) & 1) != 0);
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v8, (uint64_t)v9);
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v9);
    }
  }
}

void sub_217190C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_217190C1C(uint64_t **a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    sub_217190CA4((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_21677B358(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void *sub_217190CA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  uint64_t v9 = *a2;
  result[4] = *a2;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_217190D20()
{
  sub_216779094(v2, "CameraUtilMatchVertically");
  sub_216779094(__p, "MatchVertically");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC08, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "CameraUtilMatchHorizontally");
  sub_216779094(__p, "MatchHotizontally");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC08, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "CameraUtilFit");
  sub_216779094(__p, "Fit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC08, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "CameraUtilCrop");
  sub_216779094(__p, "Crop");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC08, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "CameraUtilDontConform");
  sub_216779094(__p, "DontConform");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC08, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_217190EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(double *a1, unsigned int a2, double a3)
{
  if (a2 == 4) {
    return *a1;
  }
  if (a2 >= 2)
  {
    double v4 = a1[1];
    double v5 = *a1 / v4;
    if (v4 == 0.0) {
      double v5 = 1.0;
    }
    a2 = (a2 != 2) ^ (v5 > a3);
  }
  if (a2) {
    return *a1;
  }
  else {
    return a1[1] * a3;
  }
}

{
  double result;
  double v5;
  double v6;
  double v7;

  if (a2 == 4) {
    return *a1;
  }
  double v5 = a1[2];
  uint64_t result = *a1;
  uint64_t v6 = a1[3] - a1[1];
  if (a2 >= 2)
  {
    uint64_t v7 = (v5 - *a1) / v6;
    if (v6 == 0.0) {
      uint64_t v7 = 1.0;
    }
    a2 = (a2 != 2) ^ (v7 > a3);
  }
  if (!a2) {
    return (v5 + result) * 0.5 - v6 * a3 * 0.5;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(uint64_t *a1, unsigned int a2, double a3)
{
  if (a2 != 4)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = *a1;
    int8x16_t v5 = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
    uint64_t v6 = v3;
    pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow((double *)&v4, a2, a3);
  }
}

double pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double result@<D0>)
{
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 80) = v4;
  long long v5 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 112) = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v7;
  if (a2 != 4)
  {
    double v8 = *(double *)(a1 + 40);
    double v9 = fabs(v8);
    double v10 = *(double *)a1;
    double v11 = fabs(*(double *)a1);
    double v12 = v9 / v11;
    if (*(double *)a1 == 0.0) {
      double v12 = 1.0;
    }
    int v13 = (a2 != 2) ^ (v12 > result);
    if (a2 < 2) {
      int v13 = a2;
    }
    if (v13)
    {
      double v14 = -v11;
      if (v8 >= 0.0) {
        double v14 = v11;
      }
      double v15 = v14 * result;
      *(double *)(a3 + 40) = v15;
      uint64_t v16 = 13;
      uint64_t v17 = 9;
    }
    else
    {
      if (result == 0.0) {
        uint64_t result = 1.0;
      }
      double v15 = v9 / result;
      if (v10 < 0.0) {
        double v15 = -v15;
      }
      *(double *)a3 = v15;
      uint64_t v16 = 12;
      uint64_t v17 = 8;
      double v8 = v10;
    }
    if (v8 == 0.0) {
      double v8 = 1.0;
    }
    double v18 = v15 / v8;
    *(double *)(a3 + 8 * v17) = v18 * *(double *)(a3 + 8 * v17);
    uint64_t result = v18 * *(double *)(a3 + 8 * v16);
    *(double *)(a3 + 8 * v16) = result;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::GfCamera *pxrInternal__aapl__pxrReserved__::CameraUtilConformWindow(pxrInternal__aapl__pxrReserved__::GfCamera *result, unsigned int a2, double a3)
{
  if (a2 != 4)
  {
    v14[2] = v6;
    void v14[3] = v5;
    v14[6] = v3;
    v14[7] = v4;
    double v9 = result;
    v14[0] = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(result);
    v14[1] = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(v9);
    double v10 = pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(v14, a2, a3);
    double v12 = v11;
    *(float *)&double v10 = v10;
    pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalAperture((uint64_t)v9, *(float *)&v10);
    float v13 = v12;
    return (pxrInternal__aapl__pxrReserved__::GfCamera *)pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalAperture((uint64_t)v9, v13);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::CameraUtilConformWindow(uint64_t a1, unsigned int a2, double a3)
{
  if (a2 != 4)
  {
    *(double *)(a1 + 56) = pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow((double *)(a1 + 56), a2, a3);
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v7;
    pxrInternal__aapl__pxrReserved__::GfFrustum::_DirtyFrustumPlanes((void *)a1);
  }
}

double pxrInternal__aapl__pxrReserved__::CameraUtilFraming::CameraUtilFraming(pxrInternal__aapl__pxrReserved__::CameraUtilFraming *this)
{
  double result = 1.40444743e306;
  *(_OWORD *)this = xmmword_217456E50;
  *((_OWORD *)this + 1) = xmmword_21747F4E0;
  *((_DWORD *)this + 8) = 1065353216;
  return result;
}

{
  double result;

  double result = 1.40444743e306;
  *(_OWORD *)this = xmmword_217456E50;
  *((_OWORD *)this + 1) = xmmword_21747F4E0;
  *((_DWORD *)this + 8) = 1065353216;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::CameraUtilFraming::CameraUtilFraming(uint64_t result, _OWORD *a2, _OWORD *a3, float a4)
{
  *(_OWORD *)double result = *a2;
  *(_OWORD *)(result + 16) = *a3;
  *(float *)(result + 32) = a4;
  return result;
}

{
  *(_OWORD *)double result = *a2;
  *(_OWORD *)(result + 16) = *a3;
  *(float *)(result + 32) = a4;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::CameraUtilFraming::CameraUtilFraming(float32x2_t *this, int32x2_t *a2)
{
  float32x2_t v2 = vcvt_f32_s32(vadd_s32(a2[1], (int32x2_t)0x100000001));
  *this = vcvt_f32_s32(*a2);
  this[1] = v2;
  __n128 result = *(__n128 *)a2->i8;
  *(_OWORD *)this[2].f32 = *(_OWORD *)a2->i8;
  this[4].i32[0] = 1065353216;
  return result;
}

{
  float32x2_t v2;
  __n128 result;

  float32x2_t v2 = vcvt_f32_s32(vadd_s32(a2[1], (int32x2_t)0x100000001));
  *this = vcvt_f32_s32(*a2);
  this[1] = v2;
  __n128 result = *(__n128 *)a2->i8;
  *(_OWORD *)this[2].f32 = *(_OWORD *)a2->i8;
  this[4].i32[0] = 1065353216;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::CameraUtilFraming::IsValid(pxrInternal__aapl__pxrReserved__::CameraUtilFraming *this)
{
  return *((_DWORD *)this + 6) - *((_DWORD *)this + 4) + 1 >= 1
      && *((_DWORD *)this + 7) - *((_DWORD *)this + 5) + 1 >= 1
      && *(float *)this <= *((float *)this + 2)
      && *((float *)this + 1) <= *((float *)this + 3)
      && *((float *)this + 8) != 0.0;
}

BOOL pxrInternal__aapl__pxrReserved__::CameraUtilFraming::operator==(uint64_t a1, uint64_t a2)
{
  return *(float *)a1 == *(float *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32);
}

BOOL pxrInternal__aapl__pxrReserved__::CameraUtilFraming::operator!=(uint64_t a1, uint64_t a2)
{
  return !pxrInternal__aapl__pxrReserved__::CameraUtilFraming::operator==(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::CameraUtilFraming::ApplyToProjectionMatrix(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  float32x2_t v5 = vsub_f32(*(float32x2_t *)(a1 + 8), *(float32x2_t *)a1);
  int32x2_t v6 = *(int32x2_t *)(a1 + 16);
  float32x2_t v7 = vcvt_f32_s32(vadd_s32(vsub_s32(*(int32x2_t *)(a1 + 24), v6), (int32x2_t)0x100000001));
  double v8 = v5.f32[0];
  double v9 = v5.f32[1];
  double v10 = 1.0;
  if (v5.f32[1] != 0.0) {
    double v10 = v5.f32[0] / v5.f32[1];
  }
  float32x2_t v11 = vsub_f32(vadd_f32(*(float32x2_t *)a1, vmul_f32(v5, (float32x2_t)0x3F0000003F000000)), vadd_f32(vmul_f32(v7, (float32x2_t)0x3F0000003F000000), vcvt_f32_s32(v6)));
  pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(a2, a3, (uint64_t)v31, v10 * *(float *)(a1 + 32));
  *(double *)std::string::size_type v28 = v8;
  *(double *)&v28[1] = v9;
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v22 = _Q0;
  float64x2_t v29 = _Q0;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v30, (uint64_t)v28);
  long long v36 = v31[4];
  long long v37 = v31[5];
  long long v38 = v31[6];
  long long v39 = v31[7];
  long long v32 = v31[0];
  long long v33 = v31[1];
  long long v34 = v31[2];
  long long v35 = v31[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v32, v30);
  memset(v27, 0, sizeof(v27));
  float64x2_t v25 = vcvtq_f64_f32(vmul_f32(v11, (float32x2_t)0xC000000040000000));
  uint64_t v26 = 0;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v27, (uint64_t)&v25);
  long long v44 = v36;
  long long v45 = v37;
  long long v46 = v38;
  long long v47 = v39;
  long long v40 = v32;
  long long v41 = v33;
  long long v42 = v34;
  long long v43 = v35;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v40, v17);
  v23[0] = vdivq_f64(v22, vcvtq_f64_f32(v7));
  v23[1] = v22;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v24, (uint64_t)v23);
  long long v18 = v45;
  *(_OWORD *)(a4 + 64) = v44;
  *(_OWORD *)(a4 + 80) = v18;
  long long v19 = v47;
  *(_OWORD *)(a4 + 96) = v46;
  *(_OWORD *)(a4 + 112) = v19;
  long long v20 = v41;
  *(_OWORD *)a4 = v40;
  *(_OWORD *)(a4 + 16) = v20;
  long long v21 = v43;
  *(_OWORD *)(a4 + 32) = v42;
  *(_OWORD *)(a4 + 48) = v21;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a4, v24);
}

float32_t pxrInternal__aapl__pxrReserved__::CameraUtilFraming::ComputeFilmbackWindow(float32x2_t *a1, int a2, float a3)
{
  pxrInternal__aapl__pxrReserved__::GfRange2d::GfRange2d(v14, a1);
  if (a2 == 3) {
    int v6 = 2;
  }
  else {
    int v6 = a2;
  }
  if (a2 == 2) {
    unsigned int v7 = 3;
  }
  else {
    unsigned int v7 = v6;
  }
  float v8 = a1[4].f32[0];
  double v9 = a3 / v8;
  if (v8 == 0.0) {
    double v9 = 1.0;
  }
  v15.f64[0] = pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(v14[0].f64, v7, v9);
  v15.f64[1] = v10;
  uint64_t v16 = v11;
  uint64_t v17 = v12;
  pxrInternal__aapl__pxrReserved__::GfRange2f::GfRange2f(&v18, &v15);
  return v18.f32[0];
}

uint64_t pxrInternal__aapl__pxrReserved__::CameraUtilScreenWindowParameters::CameraUtilScreenWindowParameters(uint64_t a1, pxrInternal__aapl__pxrReserved__::GfCamera *this, int a3)
{
  float HorizontalAperture = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(this);
  float HorizontalApertureOffset = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalApertureOffset(this);
  double v8 = (float)((float)(HorizontalApertureOffset + HorizontalApertureOffset) - HorizontalAperture);
  float v9 = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(this);
  float v10 = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalApertureOffset(this);
  double v11 = (float)(v9 + (float)(v10 + v10));
  float VerticalAperture = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(this);
  float VerticalApertureOffset = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalApertureOffset(this);
  double v14 = (float)((float)(VerticalApertureOffset + VerticalApertureOffset) - VerticalAperture);
  float v15 = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(this);
  float v16 = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalApertureOffset(this);
  *(double *)a1 = v8;
  *(double *)(a1 + 8) = v11;
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = (float)(v15 + (float)(v16 + v16));
  *(double *)(a1 + 32) = pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView((uint64_t)this, a3);
  if (pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(this))
  {
    double v17 = 0.1 * 0.5;
    double v18 = *(double *)a1;
    double v19 = 0.1 * 0.5;
  }
  else
  {
    if (a3) {
      float v20 = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(this);
    }
    else {
      float v20 = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(this);
    }
    if (v20 == 0.0) {
      goto LABEL_9;
    }
    double v18 = 1.0 / v20;
    double v17 = *(double *)a1;
    double v19 = v18;
  }
  *(double *)a1 = v18 * v17;
  *(float64x2_t *)(a1 + 8) = vmulq_n_f64(*(float64x2_t *)(a1 + 8), v19);
  *(double *)(a1 + 24) = v19 * *(double *)(a1 + 24);
LABEL_9:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96720))
  {
    __asm { FMOV            V1.2D, #1.0 }
    long long v33 = _Q1;
    long long v34 = xmmword_21740B870;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&xmmword_267B966A0, (uint64_t)&v33);
    __cxa_guard_release(&qword_267B96720);
  }
  pxrInternal__aapl__pxrReserved__::GfCamera::GetTransform(this, (uint64_t)v31);
  _DWORD v32[4] = xmmword_267B966E0;
  v32[5] = unk_267B966F0;
  v32[6] = xmmword_267B96700;
  v32[7] = unk_267B96710;
  v32[0] = xmmword_267B966A0;
  v32[1] = *(_OWORD *)algn_267B966B0;
  void v32[2] = xmmword_267B966C0;
  v32[3] = unk_267B966D0;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v32, v31);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)v32, 0, 0.0, (uint64_t)&v33);
  long long v21 = v38;
  *(_OWORD *)(a1 + 104) = v37;
  *(_OWORD *)(a1 + 120) = v21;
  long long v22 = v40;
  *(_OWORD *)(a1 + 136) = v39;
  *(_OWORD *)(a1 + 152) = v22;
  long long v23 = v34;
  *(_OWORD *)(a1 + 40) = v33;
  *(_OWORD *)(a1 + 56) = v23;
  long long v24 = v36;
  *(_OWORD *)(a1 + 72) = v35;
  *(_OWORD *)(a1 + 88) = v24;
  return a1;
}

void sub_2171918D0(_Unwind_Exception *a1)
{
}

pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *this)
{
  float32x2_t v2 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v2) {
    float32x2_t v2 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  uint64_t v3 = *((void *)v2 + 6);
  *(void *)this = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)this &= 0xFFFFFFFFFFFFFFF8;
  }
  double v4 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v4) {
    double v4 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  uint64_t v5 = *((void *)v4 + 14);
  *((void *)this + 1) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((unsigned char *)this + 368) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, long long *a5)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *a3;
  *(void *)(a1 + 8) = *a3;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a4 + 32);
  *(void *)(a1 + 48) = v8;
  if (v8)
  {
    float v9 = (atomic_ullong *)(v8 - 16);
    if (*(void *)(a1 + 40)) {
      float v9 = *(atomic_ullong **)(a1 + 40);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  long long v10 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v10;
  uint64_t v11 = *((void *)a5 + 4);
  *(void *)(a1 + 88) = v11;
  if (v11)
  {
    uint64_t v12 = (atomic_ullong *)(v11 - 16);
    if (*(void *)(a1 + 80)) {
      uint64_t v12 = *(atomic_ullong **)(a1 + 80);
    }
    atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 368) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *a3;
  *(void *)(a1 + 8) = *a3;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a4 + 32);
  *(void *)(a1 + 48) = v9;
  if (v9)
  {
    long long v10 = (atomic_ullong *)(v9 - 16);
    if (*(void *)(a1 + 40)) {
      long long v10 = *(atomic_ullong **)(a1 + 40);
    }
    atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
  }
  long long v11 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v11;
  uint64_t v12 = *((void *)a5 + 4);
  *(void *)(a1 + 88) = v12;
  if (v12)
  {
    float v13 = (atomic_ullong *)(v12 - 16);
    if (*(void *)(a1 + 80)) {
      float v13 = *(atomic_ullong **)(a1 + 80);
    }
    atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
  }
  long long v14 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a6;
  *(_OWORD *)(a1 + 112) = v14;
  uint64_t v15 = *(void *)(a6 + 32);
  *(void *)(a1 + 128) = v15;
  if (v15)
  {
    float v16 = (atomic_ullong *)(v15 - 16);
    if (*(void *)(a1 + 120)) {
      float v16 = *(atomic_ullong **)(a1 + 120);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *a3;
  *(void *)(a1 + 8) = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v10;
  uint64_t v11 = *(void *)(a4 + 32);
  *(void *)(a1 + 48) = v11;
  if (v11)
  {
    uint64_t v12 = (atomic_ullong *)(v11 - 16);
    if (*(void *)(a1 + 40)) {
      uint64_t v12 = *(atomic_ullong **)(a1 + 40);
    }
    atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
  }
  long long v13 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v13;
  uint64_t v14 = *((void *)a5 + 4);
  *(void *)(a1 + 88) = v14;
  if (v14)
  {
    uint64_t v15 = (atomic_ullong *)(v14 - 16);
    if (*(void *)(a1 + 80)) {
      uint64_t v15 = *(atomic_ullong **)(a1 + 80);
    }
    atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
  }
  long long v16 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a6;
  *(_OWORD *)(a1 + 112) = v16;
  uint64_t v17 = *(void *)(a6 + 32);
  *(void *)(a1 + 128) = v17;
  if (v17)
  {
    double v18 = (atomic_ullong *)(v17 - 16);
    if (*(void *)(a1 + 120)) {
      double v18 = *(atomic_ullong **)(a1 + 120);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  sub_217192264(a1 + 136, a7);
  *(unsigned char *)(a1 + 368) = 0;
  return a1;
}

void sub_217191D30(_Unwind_Exception *a1)
{
  sub_2168F83DC(v5);
  sub_2168F83DC(v4);
  sub_2168F83DC(v3);
  sub_2173253D4(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, long long *a5, uint64_t *a6)
{
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *a3;
  *(void *)(a1 + 8) = *a3;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v9 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a4 + 32);
  *(void *)(a1 + 48) = v10;
  if (v10)
  {
    uint64_t v11 = (atomic_ullong *)(v10 - 16);
    if (*(void *)(a1 + 40)) {
      uint64_t v11 = *(atomic_ullong **)(a1 + 40);
    }
    atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
  }
  long long v12 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v12;
  uint64_t v13 = *((void *)a5 + 4);
  *(void *)(a1 + 88) = v13;
  if (v13)
  {
    uint64_t v14 = (atomic_ullong *)(v13 - 16);
    if (*(void *)(a1 + 80)) {
      uint64_t v14 = *(atomic_ullong **)(a1 + 80);
    }
    atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_217192264(a1 + 136, a6);
  *(unsigned char *)(a1 + 368) = 0;
  return a1;
}

void sub_217191E88(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  sub_2168F83DC(v6);
  sub_2168F83DC(v4);
  sub_2168F83DC(v3);
  sub_2173253D4(v2, v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::ComputeHash(pxrInternal__aapl__pxrReserved__ **this)
{
  unint64_t v2 = pxrInternal__aapl__pxrReserved__::PxOsdSubdivTags::ComputeHash(this + 17);
  unint64_t v3 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)this, (const char *)8, v2);
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 1), (const char *)8, v3);
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[6], (const char *)(4 * (void)this[2]), v4);
  unint64_t v6 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[11], (const char *)(4 * (void)this[7]), v5);
  uint64_t v7 = this[16];
  uint64_t v8 = (const char *)(4 * (void)this[12]);

  return pxrInternal__aapl__pxrReserved__::ArchHash64(v7, v8, v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::operator==(void *a1, void *a2)
{
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8)
    || (a1[1] & 0xFFFFFFFFFFFFFFF8) != (a2[1] & 0xFFFFFFFFFFFFFFF8)
    || !pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2))|| !pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 7), (uint64_t)(a2 + 7))|| !pxrInternal__aapl__pxrReserved__::operator==(a1 + 17, a2 + 17))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
}

pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::Validate@<X0>(pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *this@<X0>, pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *a2@<X8>)
{
  double result = a2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 368);
  if (v4)
  {
    *(void *)double result = 0;
  }
  else
  {
    double result = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::PxOsdMeshTopologyValidation(result, this);
    if (*(void *)result) {
      unsigned __int8 v5 = **(void **)result == *(void *)(*(void *)result + 8);
    }
    else {
      unsigned __int8 v5 = 1;
    }
    atomic_store(v5, (unsigned __int8 *)this + 368);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(void *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::operator==(a1, a2) ^ 1;
}

uint64_t sub_217192264(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)double result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = a2[1];
  *(void *)(result + 8) = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a2[2];
  *(void *)(result + 16) = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a2[3];
  *(void *)(result + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(result + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(result + 48) = v6;
  uint64_t v7 = a2[8];
  *(void *)(result + 64) = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*(void *)(result + 56)) {
      uint64_t v8 = *(atomic_ullong **)(result + 56);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  long long v9 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(result + 72) = v9;
  uint64_t v10 = a2[13];
  *(void *)(result + 104) = v10;
  if (v10)
  {
    uint64_t v11 = (atomic_ullong *)(v10 - 16);
    if (*(void *)(result + 96)) {
      uint64_t v11 = *(atomic_ullong **)(result + 96);
    }
    atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
  }
  long long v12 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(result + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(result + 128) = v12;
  uint64_t v13 = a2[18];
  *(void *)(result + 144) = v13;
  if (v13)
  {
    uint64_t v14 = (atomic_ullong *)(v13 - 16);
    if (*(void *)(result + 136)) {
      uint64_t v14 = *(atomic_ullong **)(result + 136);
    }
    atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
  }
  long long v15 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(result + 152) = v15;
  uint64_t v16 = a2[23];
  *(void *)(result + 184) = v16;
  if (v16)
  {
    uint64_t v17 = (atomic_ullong *)(v16 - 16);
    if (*(void *)(result + 176)) {
      uint64_t v17 = *(atomic_ullong **)(result + 176);
    }
    atomic_fetch_add_explicit(v17, 1uLL, memory_order_relaxed);
  }
  long long v18 = *((_OWORD *)a2 + 13);
  *(_OWORD *)(result + 192) = *((_OWORD *)a2 + 12);
  *(_OWORD *)(result + 208) = v18;
  uint64_t v19 = a2[28];
  *(void *)(result + 224) = v19;
  if (v19)
  {
    float v20 = (atomic_ullong *)(v19 - 16);
    if (*(void *)(result + 216)) {
      float v20 = *(atomic_ullong **)(result + 216);
    }
    atomic_fetch_add_explicit(v20, 1uLL, memory_order_relaxed);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *sub_217192404(atomic_ullong *a1)
{
  double result = sub_21719244C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::~PxOsdOpenSubdivTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *sub_21719244C()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::PxOsdOpenSubdivTokens_StaticTokenType(v0);
  return v0;
}

void sub_21719247C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_217192490()
{
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidScheme");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidOrientation");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidTriangleSubdivision");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidVertexInterpolationRule");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVaryingInterpolationRule");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseMethod");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseLengthElement");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseIndicesSize");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseIndicesElement");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseWeightsSize");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::NegativeCreaseWeights");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidCornerIndicesElement");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::NegativeCornerWeights");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 12, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidCornerWeightsSize");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 13, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVertexCountsElement");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 15, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVertexIndicesElement");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 16, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVertexIndicesSize");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C77BC18, 17, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_217192A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ***pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::PxOsdMeshTopologyValidation(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  *this = 0;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateScheme(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateOrientation(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateTriangleSubdivision(this, (atomic_uint **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateVertexInterpolation(this, (atomic_uint **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVaryingInterpolation(this, (atomic_uint **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreaseMethod(this, (atomic_uint **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreasesAndCorners(this, a2, v4);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateHoles(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexCounts(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexIndices(this, a2, v5);
  return this;
}

void sub_217192B0C(_Unwind_Exception *a1)
{
  sub_216AFCA18(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateScheme(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96740, memory_order_acquire) & 1) == 0)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v5 = a2;
    int v6 = __cxa_guard_acquire(&qword_267B96740);
    a2 = v5;
    int v7 = v6;
    this = (void ***)v4;
    if (v7)
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v8) {
        uint64_t v8 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v9 = *((void *)v8 + 7);
      qword_267B96728 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96728 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v10) {
        uint64_t v10 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v11 = *((void *)v10 + 8);
      qword_267B96730 = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96730 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v12 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v12) {
        long long v12 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v13 = *((void *)v12 + 6);
      qword_267B96738 = v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96738 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_217194200, &qword_267B96728, &dword_216758000);
      __cxa_guard_release(&qword_267B96740);
      this = (void ***)v4;
      a2 = v5;
    }
  }
  uint64_t v2 = *(atomic_uint **)a2;
  uint64_t v14 = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v3;
    }
  }
  sub_21719422C(this, 0, "scheme", &v14, (uint64_t)&qword_267B96728);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_217192D0C(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateOrientation(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96758, memory_order_acquire) & 1) == 0)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v2 = a2;
    int v3 = __cxa_guard_acquire(&qword_267B96758);
    a2 = v2;
    int v4 = v3;
    this = (void ***)v9;
    if (v4)
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v5) {
        uint64_t v5 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v6 = *((void *)v5 + 14);
      qword_267B96748 = v6;
      if ((v6 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96748 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v7 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v7) {
        int v7 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v8 = *((void *)v7 + 13);
      qword_267B96750 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96750 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_2171942F0, &qword_267B96748, &dword_216758000);
      __cxa_guard_release(&qword_267B96758);
      this = (void ***)v9;
      a2 = v2;
    }
  }

  sub_21719431C(this, (const char *)1, "orientation", (void *)a2 + 1, (uint64_t)&qword_267B96748);
}

void sub_217192EB4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 1864);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B96758);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateTriangleSubdivision(void ***this, atomic_uint **a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96768, memory_order_acquire) & 1) == 0)
  {
    int v4 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v6 = __cxa_guard_acquire(&qword_267B96768);
    a2 = (atomic_uint **)v5;
    int v7 = v6;
    this = (void ***)v4;
    if (v7)
    {
      __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B96760, &dword_216758000);
      __cxa_guard_release(&qword_267B96768);
      a2 = (atomic_uint **)v5;
      this = (void ***)v4;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96788, memory_order_acquire) & 1) == 0)
  {
    long long v15 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v9 = __cxa_guard_acquire(&qword_267B96788);
    a2 = (atomic_uint **)v8;
    int v10 = v9;
    this = (void ***)v15;
    if (v10)
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v11) {
        uint64_t v11 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v12 = *((void *)v11 + 7);
      qword_267B96770 = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96770 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v13) {
        uint64_t v13 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v14 = *((void *)v13 + 15);
      qword_267B96778 = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96778 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_267B96780 = qword_267B96760;
      if ((qword_267B96760 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B96760 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96780 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_217194200, &qword_267B96770, &dword_216758000);
      __cxa_guard_release(&qword_267B96788);
      this = (void ***)v15;
      a2 = (atomic_uint **)v8;
    }
  }
  uint64_t v2 = a2[20];
  uint64_t v16 = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v3;
    }
  }
  sub_21719422C(this, (const char *)2, "triangle subdivision", &v16, (uint64_t)&qword_267B96770);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_217193124(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 1904);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B96788);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateVertexInterpolation(void ***this, atomic_uint **a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96798, memory_order_acquire) & 1) == 0)
  {
    int v4 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v6 = __cxa_guard_acquire(&qword_267B96798);
    a2 = (atomic_uint **)v5;
    int v7 = v6;
    this = (void ***)v4;
    if (v7)
    {
      __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B96790, &dword_216758000);
      __cxa_guard_release(&qword_267B96798);
      a2 = (atomic_uint **)v5;
      this = (void ***)v4;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B967C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    int v9 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v10 = __cxa_guard_acquire(&qword_267B967C0);
    a2 = (atomic_uint **)v9;
    int v11 = v10;
    this = (void ***)v8;
    if (v11)
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v12) {
        uint64_t v12 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v13 = *((void *)v12 + 1);
      qword_267B967A0 = v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967A0 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v14) {
        uint64_t v14 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v15 = *((void *)v14 + 10);
      qword_267B967A8 = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967A8 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v16) {
        uint64_t v16 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v17 = *((void *)v16 + 9);
      qword_267B967B0 = v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967B0 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_267B967B8 = qword_267B96790;
      if ((qword_267B96790 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B96790 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967B8 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_2171943E0, &qword_267B967A0, &dword_216758000);
      __cxa_guard_release(&qword_267B967C0);
      this = (void ***)v8;
      a2 = (atomic_uint **)v9;
    }
  }
  uint64_t v2 = a2[17];
  long long v18 = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      long long v18 = v3;
    }
  }
  sub_21719440C(this, (const char *)3, "vertex interpolation rule", &v18, (uint64_t)&qword_267B967A0);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21719340C(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVaryingInterpolation(void ***this, atomic_uint **a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B967D0, memory_order_acquire) & 1) == 0)
  {
    int v4 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v6 = __cxa_guard_acquire(&qword_267B967D0);
    a2 = (atomic_uint **)v5;
    int v7 = v6;
    this = (void ***)v4;
    if (v7)
    {
      __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B967C8, &dword_216758000);
      __cxa_guard_release(&qword_267B967D0);
      a2 = (atomic_uint **)v5;
      this = (void ***)v4;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96810, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    int v9 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v10 = __cxa_guard_acquire(&qword_267B96810);
    a2 = (atomic_uint **)v9;
    int v11 = v10;
    this = (void ***)v8;
    if (v11)
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v12) {
        uint64_t v12 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v13 = *((void *)v12 + 1);
      qword_267B967D8 = v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967D8 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v14) {
        uint64_t v14 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v15 = *(void *)v14;
      qword_267B967E0 = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967E0 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v16) {
        uint64_t v16 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v17 = *((void *)v16 + 5);
      qword_267B967E8 = v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967E8 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v18 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v18) {
        long long v18 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v19 = *((void *)v18 + 2);
      qword_267B967F0 = v19;
      if ((v19 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967F0 &= 0xFFFFFFFFFFFFFFF8;
      }
      float v20 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v20) {
        float v20 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v21 = *((void *)v20 + 3);
      qword_267B967F8 = v21;
      if ((v21 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B967F8 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v22 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v22) {
        long long v22 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v23 = *((void *)v22 + 4);
      qword_267B96800 = v23;
      if ((v23 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96800 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_267B96808 = qword_267B967C8;
      if ((qword_267B967C8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B967C8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96808 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_2171944D0, &qword_267B967D8, &dword_216758000);
      __cxa_guard_release(&qword_267B96810);
      this = (void ***)v8;
      a2 = (atomic_uint **)v9;
    }
  }
  uint64_t v2 = a2[18];
  long long v24 = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      long long v24 = v3;
    }
  }
  sub_2171944FC(this, (const char *)4, "face varying interpolation rule", &v24, (uint64_t)&qword_267B967D8);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171937D4(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreaseMethod(void ***this, atomic_uint **a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96820, memory_order_acquire) & 1) == 0)
  {
    int v4 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v6 = __cxa_guard_acquire(&qword_267B96820);
    a2 = (atomic_uint **)v5;
    int v7 = v6;
    this = (void ***)v4;
    if (v7)
    {
      __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B96818, &dword_216758000);
      __cxa_guard_release(&qword_267B96820);
      a2 = (atomic_uint **)v5;
      this = (void ***)v4;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96840, memory_order_acquire) & 1) == 0)
  {
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    int v9 = __cxa_guard_acquire(&qword_267B96840);
    a2 = (atomic_uint **)v8;
    int v10 = v9;
    this = (void ***)v15;
    if (v10)
    {
      int v11 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v11) {
        int v11 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v12 = *((void *)v11 + 11);
      qword_267B96828 = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96828 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v13) {
        uint64_t v13 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v14 = *((void *)v13 + 12);
      qword_267B96830 = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96830 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_267B96838 = qword_267B96818;
      if ((qword_267B96818 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B96818 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96838 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_217194200, &qword_267B96828, &dword_216758000);
      __cxa_guard_release(&qword_267B96840);
      this = (void ***)v15;
      a2 = (atomic_uint **)v8;
    }
  }
  uint64_t v2 = a2[19];
  uint64_t v16 = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v3;
    }
  }
  sub_21719422C(this, (const char *)5, "crease method", &v16, (uint64_t)&qword_267B96828);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_217193A54(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 2088);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B96840);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreasesAndCorners(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2, char *a3)
{
  uint64_t v5 = *((void *)a2 + 26);
  if (v5)
  {
    uint64_t v6 = 0;
    int v7 = (int *)*((void *)a2 + 30);
    while (v7[v6] > 1)
    {
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
    int v47 = 6;
    sub_216779094(__p, "Crease lengths must be greater than or equal to 2.");
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    int v7 = (int *)*((void *)a2 + 30);
    uint64_t v5 = *((void *)a2 + 26);
    if (v5)
    {
LABEL_5:
      int v8 = 0;
      uint64_t v9 = 4 * v5;
      do
      {
        int v10 = *v7++;
        v8 += v10;
        v9 -= 4;
      }
      while (v9);
      goto LABEL_12;
    }
  }
  int v8 = 0;
LABEL_12:
  uint64_t v11 = v8;
  uint64_t v12 = *((void *)a2 + 21);
  if (v12 != v8)
  {
    int v47 = 7;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Crease indices size '%zu' doesn't match expected '%zu'.", (const char *)a2, a3, v12, v8);
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v13 = *((void *)a2 + 31);
  if (v13 != v11 - v5 && v13 != v5)
  {
    int v47 = 9;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Crease weights size '%zu' doesn't match either per edge '%zu' or per crease '%zu' sizes.", (const char *)a2, a3, v13, v11 - v5, v5);
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v15 = *((void *)a2 + 36);
  uint64_t v16 = *((void *)a2 + 41);
  if (v15 != v16)
  {
    int v47 = 13;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Corner weights size '%zu' doesn't match expected '%zu'.", (const char *)a2, a3, v15, v16);
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v17 = *((void *)a2 + 31);
  if (v17)
  {
    long long v18 = (float *)*((void *)a2 + 35);
    uint64_t v19 = 4 * v17;
    while (*v18 >= 0.0)
    {
      ++v18;
      v19 -= 4;
      if (!v19) {
        goto LABEL_31;
      }
    }
    int v47 = 10;
    sub_216779094(__p, "Negative crease weights.");
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_31:
  uint64_t v20 = *((void *)a2 + 41);
  if (v20)
  {
    uint64_t v21 = (float *)*((void *)a2 + 45);
    uint64_t v22 = 4 * v20;
    while (*v21 >= 0.0)
    {
      ++v21;
      v22 -= 4;
      if (!v22) {
        goto LABEL_38;
      }
    }
    int v47 = 12;
    sub_216779094(__p, "Negative corner weights.");
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_38:
  long long v44 = 0;
  long long v45 = 0;
  uint64_t v46 = 0;
  sub_216825D78((char *)&v44, *((char **)a2 + 11), *((void *)a2 + 11) + 4 * *((void *)a2 + 7), *((void *)a2 + 7));
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v23 = *((void *)a2 + 36);
  long long v24 = (char *)v44;
  if (v23)
  {
    if (v45 != v44)
    {
      float64x2_t v25 = (int *)*((void *)a2 + 40);
      uint64_t v26 = &v25[v23];
      while (1)
      {
        int v27 = *v25;
        std::string::size_type v28 = (char *)v44;
        unint64_t v29 = (v45 - (unsigned char *)v44) >> 2;
        do
        {
          unint64_t v30 = v29 >> 1;
          uint64_t v31 = (int *)&v28[4 * (v29 >> 1)];
          int v33 = *v31;
          long long v32 = (char *)(v31 + 1);
          v29 += ~(v29 >> 1);
          if (v33 < v27) {
            std::string::size_type v28 = v32;
          }
          else {
            unint64_t v29 = v30;
          }
        }
        while (v29);
        if (v28 == v45 || *(_DWORD *)v28 > v27) {
          break;
        }
        if (++v25 == v26) {
          goto LABEL_53;
        }
      }
    }
    int v47 = 11;
    sub_216779094(__p, "Corner index element missing from face vertex indices array.");
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    long long v24 = (char *)v44;
  }
LABEL_53:
  uint64_t v34 = *((void *)a2 + 21);
  if (v34)
  {
    if (v45 != v24)
    {
      long long v35 = (int *)*((void *)a2 + 25);
      long long v36 = &v35[v34];
      while (1)
      {
        int v37 = *v35;
        long long v38 = v24;
        unint64_t v39 = (v45 - v24) >> 2;
        do
        {
          unint64_t v40 = v39 >> 1;
          long long v41 = (int *)&v38[4 * (v39 >> 1)];
          int v43 = *v41;
          long long v42 = (char *)(v41 + 1);
          v39 += ~(v39 >> 1);
          if (v43 < v37) {
            long long v38 = v42;
          }
          else {
            unint64_t v39 = v40;
          }
        }
        while (v39);
        if (v38 == v45 || *(_DWORD *)v38 > v37) {
          break;
        }
        if (++v35 == v36) {
          goto LABEL_68;
        }
      }
    }
    int v47 = 8;
    sub_216779094(__p, "Crease index element missing from face vertex indices array.");
    sub_2171945C0(this, (uint64_t)&v47);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    long long v24 = (char *)v44;
  }
LABEL_68:
  if (v24)
  {
    long long v45 = v24;
    operator delete(v24);
  }
}

void sub_217193EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateHoles(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  uint64_t v2 = *((void *)a2 + 12);
  if (v2)
  {
    uint64_t v5 = (_DWORD *)*((void *)a2 + 16);
    char v14 = 0;
    uint64_t v6 = sub_217087E68(v5, &v5[v2]);
    uint64_t v9 = v7;
    if ((*v6 & 0x80000000) != 0)
    {
      LODWORD(v11) = 14;
      sub_216779094(&__p, "Hole indices cannot be negative.");
      sub_2171945C0(this, (uint64_t)&v11);
      if (v13 < 0) {
        operator delete(__p);
      }
    }
    uint64_t v10 = *((void *)a2 + 2);
    if (*(_DWORD *)v9 >= (int)v10)
    {
      LODWORD(v11) = 14;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Hole indices must be less than face count '%zu'.", v7, v8, v10, v11);
      sub_2171945C0(this, (uint64_t)&v11);
      if (v13 < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_217194014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexCounts(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  uint64_t v2 = *((void *)a2 + 2);
  if (v2)
  {
    int v4 = (int *)*((void *)a2 + 6);
    uint64_t v5 = 4 * v2;
    while (*v4 > 2)
    {
      ++v4;
      v5 -= 4;
      if (!v5) {
        return;
      }
    }
    int v6 = 15;
    sub_216779094(&__p, "Face vertex counts must be greater than 2.");
    sub_2171945C0(this, (uint64_t)&v6);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
}

void sub_2171940C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexIndices(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2, char *a3)
{
  uint64_t v5 = *((void *)a2 + 7);
  if (v5)
  {
    int v6 = (_DWORD *)*((void *)a2 + 11);
    uint64_t v7 = 4 * v5;
    while ((*v6 & 0x80000000) == 0)
    {
      ++v6;
      v7 -= 4;
      if (!v7) {
        goto LABEL_8;
      }
    }
    LODWORD(v14) = 16;
    sub_216779094(&__p, "Face vertex indices element must be greater than 0.");
    sub_2171945C0(this, (uint64_t)&v14);
    if (v16 < 0) {
      operator delete(__p);
    }
  }
LABEL_8:
  uint64_t v8 = *((void *)a2 + 2);
  if (v8)
  {
    LODWORD(v9) = 0;
    uint64_t v10 = (int *)*((void *)a2 + 6);
    uint64_t v11 = 4 * v8;
    do
    {
      uint64_t v12 = *v10++;
      uint64_t v9 = v12 + (int)v9;
      v11 -= 4;
    }
    while (v11);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v13 = *((void *)a2 + 7);
  if (v13 != v9)
  {
    LODWORD(v14) = 17;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Face vertex indices size '%zu' does not match expected size '%zu'.", (const char *)a2, a3, v13, v9, v14);
    sub_2171945C0(this, (uint64_t)&v14);
    if (v16 < 0) {
      operator delete(__p);
    }
  }
}

void sub_2171941DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217194200(uint64_t result)
{
  for (uint64_t i = 16; i != -8; i -= 8)
  {
    uint64_t v2 = *(void *)(result + i);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_21719422C(void ***a1, const char *a2, char *a3, void *a4, uint64_t a5)
{
  uint64_t v6 = 0;
  unint64_t v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(void *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 24)
    {
      LODWORD(v9[0]) = a2;
      if (v7)
      {
        uint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_2171945C0(a1, (uint64_t)v9);
      if (v10 < 0) {
        operator delete(v9[1]);
      }
      return;
    }
  }
}

void sub_2171942D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171942F0(uint64_t result)
{
  for (uint64_t i = 8; i != -8; i -= 8)
  {
    uint64_t v2 = *(void *)(result + i);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_21719431C(void ***a1, const char *a2, char *a3, void *a4, uint64_t a5)
{
  uint64_t v6 = 0;
  unint64_t v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(void *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 16)
    {
      LODWORD(v9[0]) = a2;
      if (v7)
      {
        uint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_2171945C0(a1, (uint64_t)v9);
      if (v10 < 0) {
        operator delete(v9[1]);
      }
      return;
    }
  }
}

void sub_2171943C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171943E0(uint64_t result)
{
  for (uint64_t i = 24; i != -8; i -= 8)
  {
    uint64_t v2 = *(void *)(result + i);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_21719440C(void ***a1, const char *a2, char *a3, void *a4, uint64_t a5)
{
  uint64_t v6 = 0;
  unint64_t v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(void *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 32)
    {
      LODWORD(v9[0]) = a2;
      if (v7)
      {
        uint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_2171945C0(a1, (uint64_t)v9);
      if (v10 < 0) {
        operator delete(v9[1]);
      }
      return;
    }
  }
}

void sub_2171944B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171944D0(uint64_t result)
{
  for (uint64_t i = 48; i != -8; i -= 8)
  {
    uint64_t v2 = *(void *)(result + i);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2171944FC(void ***a1, const char *a2, char *a3, void *a4, uint64_t a5)
{
  uint64_t v6 = 0;
  unint64_t v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(void *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 56)
    {
      LODWORD(v9[0]) = a2;
      if (v7)
      {
        uint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_2171945C0(a1, (uint64_t)v9);
      if (v10 < 0) {
        operator delete(v9[1]);
      }
      return;
    }
  }
}

void sub_2171945A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171945C0(void ***a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (!*a1)
  {
    uint64_t v5 = (void **)operator new(0x18uLL);
    v5[1] = 0;
    v5[2] = 0;
    _DWORD *v5 = 0;
    sub_216AFCA18(a1, v5);
    uint64_t v3 = *a1;
  }
  uint64_t v6 = v3[1];
  if (v6 >= v3[2])
  {
    uint64_t result = sub_2171946A8((uint64_t *)v3, a2);
  }
  else
  {
    sub_21719463C((uint64_t)v3, a2);
    uint64_t result = (uint64_t)v6 + 32;
  }
  v3[1] = (void *)result;
  return result;
}

unsigned char *sub_21719463C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  uint64_t result = (unsigned char *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v3 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t result = v5;
  }
  *(void *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_2171946A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2171946A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_2168707F4(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v17 = v11;
  long long v18 = &v10[32 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  uint64_t v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24(v12, *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v11 = v17;
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v12 = v13;
  }
  uint64_t v17 = v11 + 32;
  sub_2171947B8(a1, v16);
  uint64_t v14 = a1[1];
  sub_2168C3EC4((uint64_t)v16);
  return v14;
}

void sub_2171947A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C3EC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171947B8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217194830((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217194830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_2171948D4((uint64_t)v13);
  return v11;
}

uint64_t sub_2171948D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168C3E7C(a1);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PxOsdRefinerFactory::Create(uint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  memset(v5, 0, sizeof(v5));
  unint64_t v3 = *a2;
  unint64_t v4 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::PxOsdRefinerFactory::Create(a1, v5, (char *)&v4, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = (void **)v5;
  sub_216FF97AC(&v6);
}

void sub_217194990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = v11;
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(v12 - 24) = &a11;
  sub_216FF97AC((void ***)(v12 - 24));
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PxOsdRefinerFactory::Create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)a3;
  if ((*(void *)a3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v215 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v215 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v216 = a1;
    uint64_t v217 = a2;
    atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    char v216 = a1;
    uint64_t v217 = a2;
  }
  uint64_t v7 = *a1;
  if ((*a1 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v7 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v8) {
    uint64_t v8 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_36;
  }
  long long v10 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v10) {
    long long v10 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v9 == (*((void *)v10 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v13 = v216[2];
    if (v13 << 32)
    {
      uint64_t v14 = 4 * (int)v13;
      long long v15 = (_DWORD *)v216[6];
      while (*v15 == 3)
      {
        ++v15;
        v14 -= 4;
        if (!v14) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      long long v15 = (_DWORD *)v216[6];
    }
    if (v15 != (_DWORD *)(v216[6] + 4 * (int)v13))
    {
      *(void *)&long long v218 = "pxOsd/refinerFactory.cpp";
      *((void *)&v218 + 1) = "GetType";
      *(void *)&long long v219 = 74;
      *((void *)&v219 + 1) = "OpenSubdiv::Sdc::SchemeType pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Conv"
                               "erter::GetType() const";
      LOBYTE(v220) = 0;
      unint64_t v19 = v215 & 0xFFFFFFFFFFFFFFF8;
      if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0) {
          uint64_t v20 = *(const char **)v20;
        }
      }
      else
      {
        uint64_t v20 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v218, (pxrInternal__aapl__pxrReserved__ *)"Can't apply loop subdivision on prim %s, since it has non-triangle face(s).", a3, v20);
    }
LABEL_44:
    int v16 = 2;
    goto LABEL_45;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v11) {
    uint64_t v11 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v9 != (*((void *)v11 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    *(void *)&long long v218 = "pxOsd/refinerFactory.cpp";
    *((void *)&v218 + 1) = "GetType";
    *(void *)&long long v219 = 80;
    *((void *)&v219 + 1) = "OpenSubdiv::Sdc::SchemeType pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Conver"
                             "ter::GetType() const";
    LOBYTE(v220) = 0;
    if (v9)
    {
      uint64_t v12 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        uint64_t v12 = *(const char **)v12;
      }
    }
    else
    {
      uint64_t v12 = "";
    }
    unint64_t v17 = v215 & 0xFFFFFFFFFFFFFFF8;
    if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      long long v18 = (const char *)(v17 + 16);
      if (*(char *)(v17 + 39) < 0) {
        long long v18 = *(const char **)v18;
      }
    }
    else
    {
      long long v18 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v218, (pxrInternal__aapl__pxrReserved__ *)"Unsupported scheme (%s) (%s)", a3, v12, v18);
LABEL_36:
    int v16 = 1;
    goto LABEL_45;
  }
  int v16 = 0;
LABEL_45:
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)v9, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *v216;
  if ((*v216 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v22) {
    uint64_t v22 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (!v24) {
      long long v24 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    }
    uint64_t v23 = *((void *)v24 + 10);
  }
  else
  {
    uint64_t v23 = v216[17];
  }
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (!v23) {
    goto LABEL_73;
  }
  float64x2_t v25 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v25) {
    float64x2_t v25 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  unint64_t v26 = v23 & 0xFFFFFFFFFFFFFFF8;
  if ((v23 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 1) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_81;
  }
  int v27 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v27) {
    int v27 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v26 == (*((void *)v27 + 9) & 0xFFFFFFFFFFFFFFF8))
  {
    int v30 = 1;
    goto LABEL_82;
  }
  std::string::size_type v28 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v28) {
    std::string::size_type v28 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v26 == (*((void *)v28 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_73:
    int v30 = 2;
    goto LABEL_82;
  }
  *(void *)&long long v218 = "pxOsd/refinerFactory.cpp";
  *((void *)&v218 + 1) = "GetOptions";
  *(void *)&long long v219 = 114;
  *((void *)&v219 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter::"
                           "GetOptions() const";
  LOBYTE(v220) = 0;
  if (v26)
  {
    unint64_t v29 = (const char *)(v26 + 16);
    if (*(char *)(v26 + 39) < 0) {
      unint64_t v29 = *(const char **)v29;
    }
  }
  else
  {
    unint64_t v29 = "";
  }
  unint64_t v31 = v215 & 0xFFFFFFFFFFFFFFF8;
  if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    long long v32 = (const char *)(v31 + 16);
    if (*(char *)(v31 + 39) < 0) {
      long long v32 = *(const char **)v32;
    }
  }
  else
  {
    long long v32 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v218, (pxrInternal__aapl__pxrReserved__ *)"Unknown vertex boundary interpolation rule (%s) (%s)", a3, v29, v32);
LABEL_81:
  int v30 = 0;
LABEL_82:
  uint64_t v33 = v216[18];
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  unsigned int v211 = v16;
  if (!v33) {
    goto LABEL_107;
  }
  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v34) {
    uint64_t v34 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFF8;
  if ((v33 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v34 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_118;
  }
  long long v36 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v36) {
    long long v36 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v35 == (*((void *)v36 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    int v42 = 256;
    goto LABEL_119;
  }
  int v37 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v37) {
    int v37 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v35 == (*((void *)v37 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    int v42 = 512;
    goto LABEL_119;
  }
  long long v38 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v38) {
    long long v38 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v35 == (*((void *)v38 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    int v42 = 768;
    goto LABEL_119;
  }
  unint64_t v39 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v39) {
    unint64_t v39 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v35 == (*((void *)v39 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_107:
    int v42 = 0;
  }
  else
  {
    unint64_t v40 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (!v40) {
      unint64_t v40 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    }
    if (v35 != (*((void *)v40 + 5) & 0xFFFFFFFFFFFFFFF8))
    {
      *(void *)&long long v218 = "pxOsd/refinerFactory.cpp";
      *((void *)&v218 + 1) = "GetOptions";
      *(void *)&long long v219 = 145;
      *((void *)&v219 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Convert"
                               "er::GetOptions() const";
      LOBYTE(v220) = 0;
      if (v35)
      {
        long long v41 = (const char *)(v35 + 16);
        if (*(char *)(v35 + 39) < 0) {
          long long v41 = *(const char **)v41;
        }
      }
      else
      {
        long long v41 = "";
      }
      unint64_t v43 = v215 & 0xFFFFFFFFFFFFFFF8;
      if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        long long v44 = (const char *)(v43 + 16);
        if (*(char *)(v43 + 39) < 0) {
          long long v44 = *(const char **)v44;
        }
      }
      else
      {
        long long v44 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v218, (pxrInternal__aapl__pxrReserved__ *)"Unknown face-varying boundary interpolation rule (%s) (%s)", a3, v41, v44);
LABEL_118:
      int v42 = 1280;
      goto LABEL_119;
    }
    int v42 = 1024;
  }
LABEL_119:
  uint64_t v45 = v216[19];
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (!v45) {
    goto LABEL_139;
  }
  uint64_t v46 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v46) {
    uint64_t v46 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  unint64_t v47 = v45 & 0xFFFFFFFFFFFFFFF8;
  if ((v45 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v46 + 11) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_139;
  }
  unint64_t v48 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v48) {
    unint64_t v48 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  if (v47 != (*((void *)v48 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
    *(void *)&long long v218 = "pxOsd/refinerFactory.cpp";
    *((void *)&v218 + 1) = "GetOptions";
    *(void *)&long long v219 = 168;
    *((void *)&v219 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter"
                             "::GetOptions() const";
    LOBYTE(v220) = 0;
    if (v47)
    {
      char v49 = (const char *)(v47 + 16);
      if (*(char *)(v47 + 39) < 0) {
        char v49 = *(const char **)v49;
      }
    }
    else
    {
      char v49 = "";
    }
    unint64_t v51 = v215 & 0xFFFFFFFFFFFFFFF8;
    if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      char v52 = (const char *)(v51 + 16);
      if (*(char *)(v51 + 39) < 0) {
        char v52 = *(const char **)v52;
      }
    }
    else
    {
      char v52 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v218, (pxrInternal__aapl__pxrReserved__ *)"Unknown creasing method (%s) (%s)", a3, v49, v52);
LABEL_139:
    int v50 = 0;
    goto LABEL_140;
  }
  int v50 = 0x10000;
LABEL_140:
  uint64_t v53 = v216[20];
  if ((v53 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v206 = a4;
  if (!v53)
  {
    int v58 = 0;
    goto LABEL_164;
  }
  int v54 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v54) {
    int v54 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  unint64_t v55 = v53 & 0xFFFFFFFFFFFFFFF8;
  if ((v53 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v54 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v56 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (!v56) {
      uint64_t v56 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    }
    if (v55 == (*((void *)v56 + 15) & 0xFFFFFFFFFFFFFFF8))
    {
      int v58 = 0x1000000;
      goto LABEL_162;
    }
    *(void *)&long long v218 = "pxOsd/refinerFactory.cpp";
    *((void *)&v218 + 1) = "GetOptions";
    *(void *)&long long v219 = 186;
    *((void *)&v219 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter"
                             "::GetOptions() const";
    LOBYTE(v220) = 0;
    if (v55)
    {
      int v57 = (const char *)(v55 + 16);
      if (*(char *)(v55 + 39) < 0) {
        int v57 = *(const char **)v57;
      }
    }
    else
    {
      int v57 = "";
    }
    unint64_t v59 = v215 & 0xFFFFFFFFFFFFFFF8;
    if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v60 = (const char *)(v59 + 16);
      if (*(char *)(v59 + 39) < 0) {
        uint64_t v60 = *(const char **)v60;
      }
    }
    else
    {
      uint64_t v60 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v218, (pxrInternal__aapl__pxrReserved__ *)"Unknown triangle subdivision rule (%s) (%s)", a3, v57, v60);
  }
  int v58 = 0;
LABEL_162:
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)v55, 0xFFFFFFFE, memory_order_release);
  }
LABEL_164:
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string::size_type v214 = (OpenSubdiv::__aapl__::Far::TopologyRefiner *)operator new(0x78uLL);
  OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner((uint64_t)v214, v211, v42 | v30 | v50 | v58);
  sub_21719603C((uint64_t)&v218, v216);
  int v61 = v219;
  uint64_t v62 = v221;
  uint64_t v63 = v222;
  uint64_t v64 = (int *)**((void **)v214 + 6);
  *uint64_t v64 = v219;
  sub_21681C000((uint64_t)(v64 + 6), 2 * v61);
  int v65 = (char *)*((void *)v64 + 12);
  unint64_t v66 = *((void *)v64 + 13) - (void)v65;
  if (v61 <= v66)
  {
    if (v61 < v66) {
      *((void *)v64 + 13) = &v65[v61];
    }
  }
  else
  {
    sub_21681E2A8((void **)v64 + 12, v61 - v66);
    int v65 = (char *)*((void *)v64 + 12);
  }
  bzero(v65, *v64);
  int v67 = (uint64_t *)*((void *)v214 + 6);
  if (v61 < 1)
  {
    int v69 = 0;
  }
  else
  {
    uint64_t v68 = 0;
    int v69 = 0;
    do
    {
      uint64_t v70 = *(unsigned int *)(v62 + 4 * v68);
      uint64_t v71 = *v67;
      int v72 = (_DWORD *)(*(void *)(*v67 + 24) + 8 * v68);
      _DWORD *v72 = v70;
      if (v68) {
        int v73 = *(v72 - 1) + *(v72 - 2);
      }
      else {
        int v73 = 0;
      }
      uint64_t v74 = (int)v70;
      v72[1] = v73;
      int v75 = *(_DWORD *)(v71 + 20);
      if (v75 <= (int)v70) {
        int v75 = v70;
      }
      *(_DWORD *)(v71 + 20) = v75;
      unsigned int v76 = *((unsigned __int16 *)v214 + 4);
      if ((v76 & 4) != 0) {
        __int16 v77 = 4;
      }
      else {
        __int16 v77 = 4 * (v70 != ((v76 >> 3) & 7));
      }
      *((_WORD *)v214 + 4) = v77 | v76 & 0xFFFB;
      int v78 = v63;
      if ((int)v70 >= 1)
      {
        do
        {
          int v80 = *v78++;
          int v79 = v80;
          if (v69 <= v80) {
            int v69 = v79;
          }
          --v70;
        }
        while (v70);
      }
      v63 += v74;
      ++v68;
    }
    while (v68 != v61);
  }
  int v81 = v69 + 1;
  uint64_t v82 = *v67;
  *(_DWORD *)(v82 + 8) = v69 + 1;
  unint64_t v83 = 2 * (v69 + 1);
  sub_21681C000(v82 + 264, v83);
  sub_21681C000(v82 + 336, v83);
  sub_216820908(v82 + 408, v81);
  sub_216820938(v82 + 432, v81);
  bzero(*(void **)(v82 + 432), 2 * *(int *)(v82 + 8));
  sub_217196280(&v218);
  if (!OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(v214, v84, v85, v86, v87, v88, v89, v90))goto LABEL_341; {
  sub_21719603C((uint64_t)&v218, v216);
  }
  uint64_t v91 = v222;
  uint64_t v92 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v92) {
    uint64_t v92 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  }
  long long v93 = (int *)**((void **)v214 + 12);
  if (*v93 >= 1)
  {
    uint64_t v94 = 0;
    int v95 = 0;
    unint64_t v96 = *((void *)&v218 + 1) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v97 = *((void *)v92 + 14) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v98 = **((void **)v214 + 6);
    uint64_t v99 = *(void *)(v98 + 24);
    uint64_t v100 = *(void *)(v98 + 48);
    do
    {
      uint64_t v101 = (unsigned int *)(v99 + 8 * v94);
      uint64_t v102 = *v101;
      unint64_t v103 = (_DWORD *)(v100 + 4 * (int)v101[1]);
      if (v96 == v97)
      {
        if ((int)v102 >= 1)
        {
          long long v107 = &v91[v95];
          v95 += v102;
          do
          {
            int v108 = *v107++;
            *v103++ = v108;
            --v102;
          }
          while (v102);
        }
      }
      else
      {
        _DWORD *v103 = v91[v95++];
        if ((int)v102 >= 2)
        {
          unint64_t v104 = v102 + 1;
          uint64_t v105 = &v91[v95];
          do
          {
            int v106 = *v105++;
            v103[(v104-- - 2)] = v106;
            ++v95;
          }
          while (v104 > 2);
        }
      }
      ++v94;
    }
    while (v94 < *v93);
  }
  sub_217196280(&v218);
  if (!OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment((uint64_t)v214, 0, (void (*)(uint64_t, char *, uint64_t))sub_217195FBC, (uint64_t)&v215, v109, v110, v111, v112))goto LABEL_341; {
  unint64_t v114 = v216;
  }
  long long v115 = *(_OWORD *)(v216 + 23);
  long long v218 = *(_OWORD *)(v216 + 21);
  long long v219 = v115;
  uint64_t v116 = v216[25];
  uint64_t v220 = v116;
  if (v116)
  {
    uint64_t v117 = (atomic_ullong *)(v116 - 16);
    if (*((void *)&v219 + 1)) {
      uint64_t v117 = (atomic_ullong *)*((void *)&v219 + 1);
    }
    atomic_fetch_add_explicit(v117, 1uLL, memory_order_relaxed);
  }
  long long v118 = *((_OWORD *)v114 + 14);
  long long v237 = *((_OWORD *)v114 + 13);
  long long v238 = v118;
  uint64_t v119 = v114[30];
  int v239 = (int *)v119;
  if (v119)
  {
    uint64_t v120 = (atomic_ullong *)(v119 - 16);
    if (*((void *)&v238 + 1)) {
      uint64_t v120 = (atomic_ullong *)*((void *)&v238 + 1);
    }
    atomic_fetch_add_explicit(v120, 1uLL, memory_order_relaxed);
  }
  long long v121 = *(_OWORD *)(v114 + 33);
  long long v234 = *(_OWORD *)(v114 + 31);
  long long v235 = v121;
  uint64_t v122 = v114[35];
  uint64_t v236 = v122;
  if (v122)
  {
    uint64_t v123 = (atomic_ullong *)(v122 - 16);
    if (*((void *)&v235 + 1)) {
      uint64_t v123 = (atomic_ullong *)*((void *)&v235 + 1);
    }
    atomic_fetch_add_explicit(v123, 1uLL, memory_order_relaxed);
  }
  uint64_t v124 = v237;
  uint64_t v205 = v114;
  if ((void)v234 == (void)v237) {
    goto LABEL_225;
  }
  int v125 = 0;
  if ((void)v237)
  {
    uint64_t v126 = v239;
    uint64_t v127 = v237;
    do
    {
      int v128 = *v126++;
      int v125 = v125 + v128 - 1;
      --v127;
    }
    while (v127);
  }
  if ((void)v234 == v125)
  {
LABEL_225:
    if ((void)v237)
    {
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v207 = v237;
      uint64_t v208 = v234 == v237;
      uint64_t v132 = v234 != v237;
      size_t v133 = v239;
      while (1)
      {
        int v134 = v133[v131];
        int v135 = v134 <= 1 ? 1 : v133[v131];
        uint64_t v136 = (v135 - 1);
        if (v135 != 1) {
          break;
        }
LABEL_257:
        v129 += v208;
        v130 += v134;
        if (++v131 == v124) {
          goto LABEL_264;
        }
      }
      uint64_t v209 = v131;
      uint64_t v212 = v130;
      int v137 = (void **)*((void *)v214 + 12);
      uint64_t v138 = 4 * v130 + 4;
      while (1)
      {
        uint64_t v140 = *(unsigned int *)(v220 + v138 - 4);
        uint64_t v139 = *(unsigned int *)(v220 + v138);
        if ((v140 & 0x80000000) != 0 || (int)v140 >= *((_DWORD *)*v137 + 2))
        {
          *(void *)&long long v231 = "pxOsd/refinerFactory.cpp";
          *((void *)&v231 + 1) = "assignComponentTags";
          *(void *)&long long v232 = 321;
          *((void *)&v232 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefine"
                                   "r &, const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymou"
                                   "s namespace)::Converter]";
          LOBYTE(v233) = 0;
          unint64_t v142 = v215 & 0xFFFFFFFFFFFFFFF8;
          if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v143 = (const char *)(v142 + 16);
            if (*(char *)(v142 + 39) < 0) {
              uint64_t v143 = *(const char **)v143;
            }
          }
          else
          {
            uint64_t v143 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v231, (pxrInternal__aapl__pxrReserved__ *)"creaseIndices[%d] (%d) is out of bounds on %s", v113, v130, v140, v143);
          int v141 = 0;
          if ((v139 & 0x80000000) != 0) {
            goto LABEL_245;
          }
        }
        else
        {
          int v141 = 1;
          if ((v139 & 0x80000000) != 0) {
            goto LABEL_245;
          }
        }
        if ((int)v139 < *((_DWORD *)*v137 + 2))
        {
          if (v141)
          {
            int v144 = sub_21681F05C(*v137, v140, v139);
            if (v144 == -1)
            {
              *(void *)&long long v231 = "pxOsd/refinerFactory.cpp";
              *((void *)&v231 + 1) = "assignComponentTags";
              *(void *)&long long v232 = 334;
              *((void *)&v232 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__"
                                       "pxrReserved__::(anonymous namespace)::Converter>::assignComponentTags(Far::Topolo"
                                       "gyRefiner &, const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved_"
                                       "_::(anonymous namespace)::Converter]";
              LOBYTE(v233) = 0;
              unint64_t v147 = v215 & 0xFFFFFFFFFFFFFFF8;
              if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                size_t v148 = (const char *)(v147 + 16);
                if (*(char *)(v147 + 39) < 0) {
                  size_t v148 = *(const char **)v148;
                }
              }
              else
              {
                size_t v148 = "";
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v231, (pxrInternal__aapl__pxrReserved__ *)"Set edge sharpness cannot find edge (%d-%d) (%s)", v113, v140, v139, v148);
            }
            else
            {
              *(float *)(*(void *)(**((void **)v214 + 6) + 216) + 4 * v144) = fmaxf(*(float *)(v236 + 4 * v129), 0.0);
            }
          }
          goto LABEL_250;
        }
LABEL_245:
        *(void *)&long long v231 = "pxOsd/refinerFactory.cpp";
        *((void *)&v231 + 1) = "assignComponentTags";
        *(void *)&long long v232 = 326;
        *((void *)&v232 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrRes"
                                 "erved__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &,"
                                 " const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous name"
                                 "space)::Converter]";
        LOBYTE(v233) = 0;
        unint64_t v145 = v215 & 0xFFFFFFFFFFFFFFF8;
        if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          int v146 = (const char *)(v145 + 16);
          if (*(char *)(v145 + 39) < 0) {
            int v146 = *(const char **)v146;
          }
        }
        else
        {
          int v146 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v231, (pxrInternal__aapl__pxrReserved__ *)"creaseIndices[%d] (%d) is out of bounds on %s", v113, (v130 + 1), v139, v146);
LABEL_250:
        v129 += v132;
        uint64_t v130 = (v130 + 1);
        v138 += 4;
        if (!--v136)
        {
          size_t v133 = v239;
          uint64_t v131 = v209;
          uint64_t v130 = v212;
          int v134 = v239[v209];
          uint64_t v124 = v207;
          goto LABEL_257;
        }
      }
    }
  }
  else
  {
    *(void *)&long long v231 = "pxOsd/refinerFactory.cpp";
    *((void *)&v231 + 1) = "assignComponentTags";
    *(void *)&long long v232 = 302;
    *((void *)&v232 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserve"
                             "d__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &, const p"
                             "xr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
    LOBYTE(v233) = 0;
    unint64_t v149 = v215 & 0xFFFFFFFFFFFFFFF8;
    if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v150 = (const char *)(v149 + 16);
      if (*(char *)(v149 + 39) < 0) {
        v150 = *(const char **)v150;
      }
    }
    else
    {
      v150 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v231, (pxrInternal__aapl__pxrReserved__ *)"Invalid length of crease sharpnesses (%s)\n", v113, v150);
  }
LABEL_264:
  long long v151 = *((_OWORD *)v205 + 19);
  long long v231 = *((_OWORD *)v205 + 18);
  long long v232 = v151;
  uint64_t v152 = v205[40];
  uint64_t v233 = v152;
  if (v152)
  {
    unint64_t v153 = (atomic_ullong *)(v152 - 16);
    if (*((void *)&v232 + 1)) {
      unint64_t v153 = (atomic_ullong *)*((void *)&v232 + 1);
    }
    atomic_fetch_add_explicit(v153, 1uLL, memory_order_relaxed);
  }
  long long v154 = *(_OWORD *)(v205 + 43);
  long long v228 = *(_OWORD *)(v205 + 41);
  long long v229 = v154;
  uint64_t v155 = v205[45];
  uint64_t v230 = v155;
  if (v155)
  {
    long long v156 = (atomic_ullong *)(v155 - 16);
    if (*((void *)&v229 + 1)) {
      long long v156 = (atomic_ullong *)*((void *)&v229 + 1);
    }
    atomic_fetch_add_explicit(v156, 1uLL, memory_order_relaxed);
  }
  uint64_t v157 = v231;
  if ((void)v228 == (void)v231)
  {
    if ((void)v231)
    {
      uint64_t v158 = 0;
      do
      {
        uint64_t v159 = *(unsigned int *)(v233 + 4 * v158);
        if ((v159 & 0x80000000) != 0 || (int)v159 >= *(_DWORD *)(**((void **)v214 + 12) + 8))
        {
          *(void *)&long long v225 = "pxOsd/refinerFactory.cpp";
          *((void *)&v225 + 1) = "assignComponentTags";
          *(void *)&long long v226 = 372;
          *((void *)&v226 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefine"
                                   "r &, const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymou"
                                   "s namespace)::Converter]";
          LOBYTE(v227) = 0;
          unint64_t v160 = v215 & 0xFFFFFFFFFFFFFFF8;
          if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            int v161 = (const char *)(v160 + 16);
            if (*(char *)(v160 + 39) < 0) {
              int v161 = *(const char **)v161;
            }
          }
          else
          {
            int v161 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v225, (pxrInternal__aapl__pxrReserved__ *)"Set vertex sharpness cannot find vertex (%d) (%s)", v113, v159, v161);
        }
        else
        {
          *(float *)(*(void *)(**((void **)v214 + 6) + 408) + 4 * v159) = fmaxf(*(float *)(v230 + 4 * v158), 0.0);
        }
        ++v158;
      }
      while (v157 != v158);
    }
  }
  else
  {
    *(void *)&long long v225 = "pxOsd/refinerFactory.cpp";
    *((void *)&v225 + 1) = "assignComponentTags";
    *(void *)&long long v226 = 362;
    *((void *)&v226 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserve"
                             "d__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &, const p"
                             "xr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
    LOBYTE(v227) = 0;
    unint64_t v162 = v215 & 0xFFFFFFFFFFFFFFF8;
    if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v163 = (const char *)(v162 + 16);
      if (*(char *)(v162 + 39) < 0) {
        uint64_t v163 = *(const char **)v163;
      }
    }
    else
    {
      uint64_t v163 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v225, (pxrInternal__aapl__pxrReserved__ *)"Invalid length of corner sharpnesses at prim %s\n", v113, v163);
  }
  long long v164 = *((_OWORD *)v205 + 7);
  long long v225 = *((_OWORD *)v205 + 6);
  long long v226 = v164;
  uint64_t v165 = v205[16];
  uint64_t v227 = v165;
  if (v165)
  {
    int v166 = (atomic_ullong *)(v165 - 16);
    if (*((void *)&v226 + 1)) {
      int v166 = (atomic_ullong *)*((void *)&v226 + 1);
    }
    atomic_fetch_add_explicit(v166, 1uLL, memory_order_relaxed);
  }
  if ((int)v225 >= 1)
  {
    uint64_t v167 = 0;
    uint64_t v168 = 4 * v225;
    do
    {
      uint64_t v169 = *(unsigned int *)(v227 + v167);
      if ((v169 & 0x80000000) != 0 || (int)v169 >= ***((_DWORD ***)v214 + 12))
      {
        v223[0] = "pxOsd/refinerFactory.cpp";
        v223[1] = "assignComponentTags";
        v223[2] = 390;
        v223[3] = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserved__::(anony"
                  "mous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &, const pxr_aapl::Converter &) "
                  "[MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
        char v224 = 0;
        unint64_t v171 = v215 & 0xFFFFFFFFFFFFFFF8;
        if ((v215 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          int v172 = (const char *)(v171 + 16);
          if (*(char *)(v171 + 39) < 0) {
            int v172 = *(const char **)v172;
          }
        }
        else
        {
          int v172 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v223, (pxrInternal__aapl__pxrReserved__ *)"Set hole cannot find face (%d) (%s)", v113, v169, v172);
      }
      else
      {
        uint64_t v170 = *(void *)(**((void **)v214 + 6) + 96);
        *(unsigned char *)(v170 + v169) |= 1u;
        *((_WORD *)v214 + 4) |= 2u;
      }
      v167 += 4;
    }
    while (v168 != v167);
  }
  sub_2168F83DC((uint64_t)&v225);
  sub_2168F83DC((uint64_t)&v228);
  sub_2168F83DC((uint64_t)&v231);
  sub_2168F83DC((uint64_t)&v234);
  sub_2168F83DC((uint64_t)&v237);
  sub_2168F83DC((uint64_t)&v218);
  if (!OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(v214, v173))goto LABEL_341; {
  uint64_t v175 = *v217;
  }
  std::string::size_type v176 = (uint64_t **)v214;
  if (*v217 != v217[1])
  {
    uint64_t v177 = 0;
    while (1)
    {
      char v213 = (uint64_t *)(v175 + 40 * v177);
      uint64_t v178 = *v213;
      if (*v213)
      {
        uint64_t v179 = *(int **)(v175 + 40 * v177 + 32);
        int v180 = -1;
        do
        {
          int v182 = *v179++;
          int v181 = v182;
          if (v180 <= v182) {
            int v180 = v181;
          }
          --v178;
        }
        while (v178);
      }
      else
      {
        int v180 = -1;
      }
      int v183 = v176[6];
      uint64_t v184 = *(int *)*v183;
      int v185 = sub_216820780((void *)*v183, v180 + 1, (_DWORD *)v214 + 1);
      int v186 = v216;
      uint64_t v187 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v187) {
        uint64_t v187 = sub_217192404(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      }
      uint64_t v210 = v177;
      if (v184) {
        break;
      }
LABEL_338:
      uint64_t v177 = v210 + 1;
      uint64_t v175 = *v217;
      if (v210 + 1 >= 0xCCCCCCCCCCCCCCCDLL * ((v217[1] - *v217) >> 3)) {
        goto LABEL_339;
      }
    }
    uint64_t v188 = 0;
    uint64_t v189 = 0;
    unint64_t v190 = v186[1] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v191 = *((void *)v187 + 14) & 0xFFFFFFFFFFFFFFF8;
    long long v192 = (uint64_t *)(v175 + 40 * v210 + 32);
    while (1)
    {
      unint64_t v193 = (_DWORD *)sub_2168208C8(*v176[6], v189, v185);
      int v194 = v174;
      if (v188 + (int)v174 > (unint64_t)*v213)
      {
        *(void *)&long long v218 = "pxOsd/refinerFactory.cpp";
        *((void *)&v218 + 1) = "assignFaceVaryingTopology";
        *(void *)&long long v219 = 427;
        *((void *)&v219 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrRes"
                                 "erved__::(anonymous namespace)::Converter>::assignFaceVaryingTopology(TopologyRefiner &"
                                 ", const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous nam"
                                 "espace)::Converter]";
        LOBYTE(v220) = 0;
        if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v218, "ofs + numVerts <= fvIndices.size()", 0))goto LABEL_341; {
      }
        }
      if (v190 == v191)
      {
        if ((void)v194 << 32)
        {
          uint64_t v199 = 0;
          uint64_t v200 = *v192;
          if ((unint64_t)(int)v194 <= 1) {
            uint64_t v201 = 1;
          }
          else {
            uint64_t v201 = (int)v194;
          }
          std::string::size_type v176 = (uint64_t **)v214;
          do
          {
            uint64_t v197 = v188 + 1;
            *(_DWORD *)((char *)v193 + (v199 >> 30)) = *(_DWORD *)(v200 + 4 * v188);
            v199 += 0x100000000;
            ++v188;
            --v201;
          }
          while (v201);
          goto LABEL_334;
        }
        uint64_t v197 = v188;
      }
      else
      {
        uint64_t v195 = *v192;
        *unint64_t v193 = *(_DWORD *)(*v192 + 4 * v188);
        int v196 = v194 - 1;
        uint64_t v197 = v188 + 1;
        if ((int)v194 - 1 >= 1)
        {
          std::type_info v198 = &v193[v196];
          std::string::size_type v176 = (uint64_t **)v214;
          do
          {
            *v198-- = *(_DWORD *)(v195 + 4 * v197++);
            --v196;
          }
          while (v196 > 0);
          goto LABEL_334;
        }
      }
      std::string::size_type v176 = (uint64_t **)v214;
LABEL_334:
      ++v189;
      uint64_t v188 = v197;
      if (v189 == v184) {
        goto LABEL_338;
      }
    }
  }
LABEL_339:
  if (OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels((OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *)v176, v174))
  {
    uint64_t v202 = (uint64_t)v214;
  }
  else
  {
LABEL_341:
    OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(v214);
    operator delete(v203);
    uint64_t v202 = 0;
  }
  uint64_t result = sub_217196300(v206, v202);
  if ((v215 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v215 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_217195E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_217196280(va);
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_217195FBC(uint64_t a1, uint64_t a2, char *a3)
{
  v5[0] = "pxOsd/refinerFactory.cpp";
  v5[1] = "reportInvalidTopology";
  v5[2] = 454;
  uint64_t v5[3] = "static void OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserved__::(anonymous nam"
          "espace)::Converter>::reportInvalidTopology(TopologyRefinerFactory<Converter>::TopologyError, const char *, con"
          "st pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
  char v6 = 0;
  unint64_t v3 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    unint64_t v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
  }
  else
  {
    unint64_t v4 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v5, (pxrInternal__aapl__pxrReserved__ *)"%s (%s)", a3, a2, v4);
}

uint64_t sub_21719603C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v6 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(void *)(a1 + 48) = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*(void *)(a1 + 40)) {
      uint64_t v8 = *(atomic_ullong **)(a1 + 40);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  long long v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56) = v9;
  uint64_t v10 = a2[11];
  *(void *)(a1 + 88) = v10;
  if (v10)
  {
    uint64_t v11 = (atomic_ullong *)(v10 - 16);
    if (*(void *)(a1 + 80)) {
      uint64_t v11 = *(atomic_ullong **)(a1 + 80);
    }
    atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
  }
  long long v12 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v12;
  uint64_t v13 = a2[16];
  *(void *)(a1 + 128) = v13;
  if (v13)
  {
    uint64_t v14 = (atomic_ullong *)(v13 - 16);
    if (*(void *)(a1 + 120)) {
      uint64_t v14 = *(atomic_ullong **)(a1 + 120);
    }
    atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
  }
  sub_217192264(a1 + 136, a2 + 17);
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)a2 + 368);
  *(unsigned char *)(a1 + 368) = v15 & 1;
  return a1;
}

void sub_217196184(_Unwind_Exception *a1)
{
  sub_2168F83DC(v5);
  sub_2168F83DC(v4);
  sub_2168F83DC(v3);
  sub_2173253D4(v2, v1);
  _Unwind_Resume(a1);
}

void *sub_2171961C0(void *a1)
{
  sub_2168F83DC((uint64_t)(a1 + 24));
  sub_2168F83DC((uint64_t)(a1 + 19));
  sub_2168F83DC((uint64_t)(a1 + 14));
  sub_2168F83DC((uint64_t)(a1 + 9));
  sub_2168F83DC((uint64_t)(a1 + 4));
  uint64_t v2 = a1[3];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[2];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = a1[1];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void *sub_217196280(void *a1)
{
  sub_2171961C0(a1 + 17);
  sub_2168F83DC((uint64_t)(a1 + 12));
  sub_2168F83DC((uint64_t)(a1 + 7));
  sub_2168F83DC((uint64_t)(a1 + 2));
  uint64_t v2 = a1[1];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void *sub_217196300(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C77BC38;
  v4[1] = 0;
  uint64_t v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217196358(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_217196378(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2171963A0(uint64_t a1)
{
  uint64_t v1 = *(OpenSubdiv::__aapl__::Far::TopologyRefiner **)(a1 + 24);
  if (v1)
  {
    OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(v1);
    operator delete(v2);
  }
}

uint64_t sub_2171963D8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77BC88)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::PxOsdSubdivTags::ComputeHash(pxrInternal__aapl__pxrReserved__ **this)
{
  unint64_t v2 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)this, (const char *)8, 0);
  unint64_t v3 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 1), (const char *)8, v2);
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 2), (const char *)8, v3);
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 3), (const char *)8, v4);
  unint64_t v6 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[23], (const char *)(4 * (void)this[19]), v5);
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[28], (const char *)(4 * (void)this[24]), v6);
  unint64_t v8 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[8], (const char *)(4 * (void)this[4]), v7);
  unint64_t v9 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[13], (const char *)(4 * (void)this[9]), v8);
  uint64_t v10 = this[18];
  uint64_t v11 = (const char *)(4 * (void)this[14]);

  return pxrInternal__aapl__pxrReserved__::ArchHash64(v10, v11, v9);
}

void sub_2171967AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if ((*a1 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *a2;
  if ((*a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == (v5 & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v7 = a1[1];
    if ((v7 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v8 = a2[1];
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v9 = (atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == (v8 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v10 = a1[2];
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v11 = a2[2];
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v12 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v13 = (atomic_uint *)(v11 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v14 = a1[3];
        if ((v14 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v14 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v15 = a2[3];
        if ((v15 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v15 &= 0xFFFFFFFFFFFFFFF8;
        }
        int v16 = (atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v17 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 0xFFFFFFFFFFFFFFF8) == (v15 & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFF8;
          char v21 = v15;
          char v22 = v14;
          unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFF8;
          char v23 = v10;
          uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
          if (result)
          {
            uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
            if (result)
            {
              uint64_t result = sub_2168F8B8C(a1 + 14, (uint64_t)(a2 + 14));
              if (result)
              {
                uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 19), (uint64_t)(a2 + 19));
                if (result) {
                  uint64_t result = sub_2168F8B8C(a1 + 24, (uint64_t)(a2 + 24));
                }
              }
            }
          }
          long long v12 = (atomic_uint *)v20;
          unint64_t v9 = (atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8);
          LOBYTE(v14) = v22;
          LOBYTE(v10) = v23;
          uint64_t v13 = (atomic_uint *)(v11 & 0xFFFFFFFFFFFFFFF8);
          int v16 = (atomic_uint *)v19;
          LOBYTE(v15) = v21;
          unint64_t v17 = (atomic_uint *)v18;
        }
        else
        {
          uint64_t result = 0;
        }
        if ((v15 & 7) != 0) {
          atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
        }
        if ((v14 & 7) != 0) {
          atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        uint64_t result = 0;
      }
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
      }
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      uint64_t result = 0;
    }
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator==(a1, a2) ^ 1;
}

void pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::~PxOsdOpenSubdivTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *this)
{
  unint64_t v17 = (void **)((char *)this + 128);
  sub_216889A04(&v17);
  uint64_t v2 = *((void *)this + 15);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 14);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 13);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 12);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 11);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 10);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 8);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 7);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 6);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 5);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 4);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 3);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 2);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::PxOsdOpenSubdivTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v24 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "all", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v24, "none", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "cornersOnly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "cornersPlus1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "cornersPlus2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "boundaries", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "bilinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "catmullClark", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "loop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "edgeOnly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "edgeAndCorner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "uniform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "chaikin", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "leftHanded", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "rightHanded", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "smooth", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v25 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v24;
  uint64_t v26 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v27 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v28 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v29 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v30 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v31 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v32 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v33 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v34 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v35 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v36 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v37 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v38 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v39 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v40 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  unint64_t v18 = (char *)operator new(0x80uLL);
  uint64_t v19 = 0;
  *((void *)this + 16) = v18;
  *((void *)this + 17) = v18;
  *((void *)this + 18) = v18 + 128;
  do
  {
    uint64_t v20 = *(uint64_t *)((char *)&v25 + v19);
    *(void *)&v18[v19] = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v18[v19] &= 0xFFFFFFFFFFFFFFF8;
    }
    v19 += 8;
  }
  while (v19 != 128);
  *((void *)this + 17) = v18 + 128;
  for (uint64_t i = 120; i != -8; i -= 8)
  {
    uint64_t v22 = *(uint64_t *)((char *)&v25 + i);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2171972A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void **a17, uint64_t a18, char a19)
{
  sub_216889A04(&a17);
  uint64_t v29 = 120;
  while (1)
  {
    uint64_t v30 = *(void *)(&a19 + v29);
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v29 -= 8;
    if (v29 == -8)
    {
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2171974BC()
{
}

void sub_2171974C4()
{
}

void sub_2171974CC()
{
}

void sub_2171974D4()
{
}

void sub_2171974DC()
{
}

void sub_2171974E4()
{
}

void sub_2171974EC()
{
}

BOOL pxrInternal__aapl__pxrReserved__::operator==(void *a1, uint64_t a2, char *a3)
{
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8)
    || a1[1] != *(void *)(a2 + 8)
    || a1[2] != *(void *)(a2 + 16)
    || !pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 3), (std::type_info *)(a2 + 24), a3))
  {
    return 0;
  }

  return sub_217197DF8((uint64_t)(a1 + 5), (void *)(a2 + 40));
}

BOOL pxrInternal__aapl__pxrReserved__::operator!=(void *a1, uint64_t a2, char *a3)
{
  return !pxrInternal__aapl__pxrReserved__::operator==(a1, a2, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::HdAovHasDepthSemantic(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)EmptyString, (uint64_t)__p);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v3) {
    uint64_t v3 = sub_217197E90(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  }
  if ((*((void *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v4 = (uint64_t *)((*((void *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)v4 + 23) >= 0) {
    uint64_t v5 = (const char *)v4;
  }
  else {
    uint64_t v5 = (const char *)*v4;
  }
  int v6 = (char)v13;
  if ((v13 & 0x80u) == 0) {
    unint64_t v7 = v13;
  }
  else {
    unint64_t v7 = (unint64_t)__p[1];
  }
  size_t v8 = strlen(v5);
  if (v7 >= v8)
  {
    uint64_t v10 = (void **)__p[0];
    if ((v13 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    BOOL v9 = strcmp((const char *)v10 + v7 - v8, v5) == 0;
    if (v6 < 0) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v9 = 0;
    if ((char)v13 < 0) {
LABEL_21:
    }
      operator delete(__p[0]);
  }
  return v9;
}

void sub_2171977CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::HdAovHasDepthStencilSemantic(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)EmptyString, (uint64_t)__p);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v3) {
    uint64_t v3 = sub_217197E90(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  }
  if ((*((void *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v4 = (uint64_t *)((*((void *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  uint64_t v5 = (const char *)v14;
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)v4, (uint64_t)v14);
  int v6 = v15;
  unint64_t v7 = (void *)v14[0];
  if (v15 < 0) {
    uint64_t v5 = (const char *)v14[0];
  }
  unsigned __int8 v8 = v17;
  if ((v17 & 0x80u) == 0) {
    unint64_t v9 = v17;
  }
  else {
    unint64_t v9 = (unint64_t)__p[1];
  }
  size_t v10 = strlen(v5);
  if (v9 < v10)
  {
    BOOL v11 = 0;
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)__p[0];
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  BOOL v11 = strcmp((const char *)v12 + v9 - v10, v5) == 0;
  if (v6 < 0)
  {
LABEL_20:
    operator delete(v7);
    unsigned __int8 v8 = v17;
  }
LABEL_21:
  if ((v8 & 0x80) != 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_217197904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdParsedAovToken::HdParsedAovToken(uint64_t this)
{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) &= 0xF8u;
  return this;
}

{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) &= 0xF8u;
  return this;
}

pxrInternal__aapl__pxrReserved__::HdParsedAovToken *pxrInternal__aapl__pxrReserved__::HdParsedAovToken::HdParsedAovToken(pxrInternal__aapl__pxrReserved__::HdParsedAovToken *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  *(void *)this = 0;
  *((unsigned char *)this + 8) &= 0xF8u;
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v5) {
    uint64_t v5 = sub_217197E90(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  }
  if ((*((void *)v5 + 14) & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v6 = (uint64_t *)((*((void *)v5 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v7) {
    unint64_t v7 = sub_217197E90(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  }
  if ((*((void *)v7 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unsigned __int8 v8 = (uint64_t *)((*((void *)v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unsigned __int8 v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v9) {
    unint64_t v9 = sub_217197E90(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  }
  if ((*((void *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
    size_t v10 = (uint64_t *)((*((void *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    size_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  size_t v11 = *((unsigned __int8 *)EmptyString + 23);
  if (*((char *)EmptyString + 23) < 0) {
    std::string::size_type v12 = EmptyString[1];
  }
  else {
    std::string::size_type v12 = *((unsigned __int8 *)EmptyString + 23);
  }
  std::string::size_type v13 = *((unsigned __int8 *)v6 + 23);
  if (*((char *)v6 + 23) < 0)
  {
    size_t v14 = v6[1];
    if (v12 <= v14) {
      goto LABEL_41;
    }
  }
  else
  {
    size_t v14 = *((unsigned __int8 *)v6 + 23);
    if (v12 <= v13) {
      goto LABEL_41;
    }
  }
  if ((v11 & 0x80) != 0)
  {
    uint64_t v16 = (const void *)*EmptyString;
    if (EmptyString[1] >= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = EmptyString[1];
    }
  }
  else
  {
    if (v11 >= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = *((unsigned __int8 *)EmptyString + 23);
    }
    uint64_t v16 = EmptyString;
  }
  if ((v13 & 0x80u) == 0) {
    unsigned __int8 v17 = v6;
  }
  else {
    unsigned __int8 v17 = (const void *)*v6;
  }
  if (!memcmp(v16, v17, v15) && v15 == v14)
  {
    if ((v13 & 0x80) != 0) {
      std::string::size_type v13 = v6[1];
    }
    std::string::basic_string(&v41, (const std::string *)EmptyString, v13, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
    uint64_t v24 = *(void *)this;
    uint64_t v25 = *(void *)this & 7;
    if (&v42 == (uint64_t *)this)
    {
      if (v25) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v25) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)this = v42;
      uint64_t v42 = 0;
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    char v39 = *((unsigned char *)this + 8) | 1;
    goto LABEL_119;
  }
LABEL_41:
  if ((v11 & 0x80) != 0) {
    std::string::size_type v19 = EmptyString[1];
  }
  else {
    std::string::size_type v19 = v11;
  }
  std::string::size_type v20 = *((unsigned __int8 *)v8 + 23);
  if (*((char *)v8 + 23) < 0)
  {
    size_t v21 = v8[1];
    if (v19 <= v21) {
      goto LABEL_69;
    }
  }
  else
  {
    size_t v21 = *((unsigned __int8 *)v8 + 23);
    if (v19 <= v20) {
      goto LABEL_69;
    }
  }
  if ((v11 & 0x80) != 0)
  {
    char v23 = (const void *)*EmptyString;
    if (EmptyString[1] >= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = EmptyString[1];
    }
  }
  else
  {
    if (v11 >= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v11;
    }
    char v23 = EmptyString;
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v26 = v8;
  }
  else {
    uint64_t v26 = (const void *)*v8;
  }
  if (!memcmp(v23, v26, v22) && v22 == v21)
  {
    if ((v20 & 0x80) != 0) {
      std::string::size_type v20 = v8[1];
    }
    std::string::basic_string(&v41, (const std::string *)EmptyString, v20, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
    uint64_t v33 = *(void *)this;
    uint64_t v34 = *(void *)this & 7;
    if (&v42 == (uint64_t *)this)
    {
      if (v34) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v34) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)this = v42;
      uint64_t v42 = 0;
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    char v39 = *((unsigned char *)this + 8) | 2;
    goto LABEL_119;
  }
LABEL_69:
  if ((v11 & 0x80) != 0) {
    std::string::size_type v28 = EmptyString[1];
  }
  else {
    std::string::size_type v28 = v11;
  }
  std::string::size_type v29 = *((unsigned __int8 *)v10 + 23);
  if ((*((char *)v10 + 23) & 0x80000000) == 0)
  {
    size_t v30 = *((unsigned __int8 *)v10 + 23);
    if (v28 <= v29) {
      goto LABEL_97;
    }
    goto LABEL_76;
  }
  size_t v30 = v10[1];
  if (v28 > v30)
  {
LABEL_76:
    if ((v11 & 0x80) != 0)
    {
      uint64_t v32 = (const void *)*EmptyString;
      if (EmptyString[1] >= v30) {
        size_t v31 = v30;
      }
      else {
        size_t v31 = EmptyString[1];
      }
    }
    else
    {
      if (v11 >= v30) {
        size_t v31 = v30;
      }
      else {
        size_t v31 = v11;
      }
      uint64_t v32 = EmptyString;
    }
    if ((v29 & 0x80u) == 0) {
      uint64_t v35 = v10;
    }
    else {
      uint64_t v35 = (const void *)*v10;
    }
    if (memcmp(v32, v35, v31) || v31 != v30) {
      goto LABEL_97;
    }
    if ((v29 & 0x80) != 0) {
      std::string::size_type v29 = v10[1];
    }
    std::string::basic_string(&v41, (const std::string *)EmptyString, v29, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
    uint64_t v37 = *(void *)this;
    uint64_t v38 = *(void *)this & 7;
    if (&v42 == (uint64_t *)this)
    {
      if (v38) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v38) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)this = v42;
      uint64_t v42 = 0;
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    char v39 = *((unsigned char *)this + 8) | 4;
LABEL_119:
    *((unsigned char *)this + 8) = v39;
    return this;
  }
LABEL_97:
  sub_2168D2318(this, a2);
  return this;
}

void sub_217197D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((*v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_217197DF8(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (void *)(a1 + 16);
  do
  {
    uint64_t v3 = (void *)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    uint64_t v5 = sub_2168CB120(a2, v3 + 2);
    if (!v5) {
      break;
    }
  }
  while ((v3[2] & 0xFFFFFFFFFFFFFFF8) == (v5[2] & 0xFFFFFFFFFFFFFFF8)
       && (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 3), (std::type_info *)(v5 + 3), v6) & 1) != 0);
  return v4;
}

pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *sub_217197E90(atomic_ullong *a1)
{
  uint64_t result = sub_217197ED8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType::~HdAovTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *sub_217197ED8()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)operator new(0xA0uLL);
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType::HdAovTokens_StaticTokenType(v0);
  return v0;
}

void sub_217197F08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::~HdBasisCurvesReprDescTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *this)
{
  uint64_t v5 = (void **)((char *)this + 32);
  sub_216889A04(&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::HdBasisCurvesReprDescTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "surfaceShader", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "surfaceShaderUnlit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "hullColor", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "pointColor", 0);
  uint64_t v3 = *this;
  unsigned __int8 v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      unsigned __int8 v17 = v4;
    }
  }
  uint64_t v5 = *v2;
  unint64_t v18 = v5;
  if ((v5 & 7) != 0)
  {
    int v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v18 = v6;
    }
  }
  unint64_t v7 = this[2];
  std::string::size_type v19 = v7;
  if ((v7 & 7) != 0)
  {
    unsigned __int8 v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      std::string::size_type v19 = v8;
    }
  }
  unint64_t v9 = this[3];
  std::string::size_type v20 = v9;
  if ((v9 & 7) != 0)
  {
    size_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      std::string::size_type v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  size_t v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    std::string::size_type v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    size_t v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *)this;
}

void sub_2171981A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_217198264()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

pxrInternal__aapl__pxrReserved__::HdRprim *pxrInternal__aapl__pxrReserved__::HdBasisCurves::HdBasisCurves(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdRprim::HdRprim(this, a2);
  *(void *)uint64_t result = &unk_26C77BCB0;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurves::GetBuiltinPrimvarNames(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96860))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v2) {
      uint64_t v2 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    uint64_t v3 = *((void *)v2 + 57);
    uint64_t v11 = v3;
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v11 = (uint64_t)v4;
      }
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v5) {
      uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    uint64_t v6 = *((void *)v5 + 52);
    uint64_t v12 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v7) {
      unint64_t v7 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    uint64_t v8 = *((void *)v7 + 82);
    uint64_t v13 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(qword_267B96848, &v11, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v11 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B96848, &dword_216758000);
    __cxa_guard_release(&qword_267B96860);
  }
  return qword_267B96848;
}

void sub_2171984B4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdBasisCurves::_reprDescConfig(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96880))
  {
    qword_267B96868 = 0;
    unk_267B96870 = 0;
    qword_267B96878 = 0;
    __cxa_guard_release(&qword_267B96880);
  }
  return &qword_267B96868;
}

BOOL pxrInternal__aapl__pxrReserved__::HdBasisCurves::IsEnabledForceRefinedCurves(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this)
{
  uint64_t v1 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
  return *v1 == 1;
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurves::ConfigureRepr(pxrInternal__aapl__pxrReserved__::HdBasisCurves *a1, int *a2)
{
  uint64_t v4 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
  if (*v4 == 1) {
    *a2 = 2;
  }
  pxrInternal__aapl__pxrReserved__::HdBasisCurves::_reprDescConfig(a1);
  int v8 = *a2;
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 1);
  unint64_t v9 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v9 = v6;
    }
  }
  uint64_t result = sub_2171986C4(&qword_267B96868, (uint64_t *)a1, (uint64_t)&v8);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171986C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_4:
    sub_217198D80((uint64_t)v7, a2, a3);
    uint64_t result = (void *)sub_217198A14(a1, (uint64_t)v7);
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    while ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v4 += 24;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    *(_DWORD *)(v4 + 8) = *(_DWORD *)a3;
    return sub_2168D2318((void *)(v4 + 16), (void *)(a3 + 8));
  }
  return result;
}

void sub_217198790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(&a10);
  _Unwind_Resume(a1);
}

unint64_t *pxrInternal__aapl__pxrReserved__::HdBasisCurves::_GetReprDesc@<X0>(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdBasisCurves::_reprDescConfig(this);

  return sub_217198804((char **)&qword_267B96868, this, a2);
}

unint64_t *sub_217198804@<X0>(char **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v14 = *a1;
  size_t v15 = v6;
  while (v5 != v6)
  {
    if ((*(void *)*sub_217198DE4(&v14) & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = sub_217198DE4(&v14);
      unint64_t v10 = *result;
      *(_DWORD *)a3 = *(_DWORD *)(*result + 8);
      uint64_t v11 = *(void *)(v10 + 16);
      *(void *)(a3 + 8) = v11;
      if ((v11 & 7) == 0) {
        return result;
      }
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v12, 2u, memory_order_relaxed)) {
        return result;
      }
LABEL_22:
      *(void *)(a3 + 8) = v12;
      return result;
    }
    sub_217198E70(&v14);
    uint64_t v5 = v14;
    uint64_t v6 = v15;
  }
  uint64_t v14 = "hd/rprim.h";
  size_t v15 = "Find";
  uint64_t v16 = 329;
  uint64_t v17 = "DescArray pxrInternal__aapl__pxrReserved__::HdRprim::_ReprDescConfigs<pxrInternal__aapl__pxrReserved__::HdBasisC"
        "urvesReprDesc>::Find(const TfToken &) const [DESC_TYPE = pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDesc, N = 1]";
  char v18 = 0;
  unint64_t v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v7)
  {
    uint64_t v8 = (const char *)(v7 + 16);
    if (*(char *)(v7 + 39) < 0) {
      uint64_t v8 = *(const char **)v8;
    }
  }
  else
  {
    uint64_t v8 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Repr %s not found", v8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t result = (unint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens);
  if (!result) {
    uint64_t result = (unint64_t *)sub_217198EF4(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens);
  }
  unint64_t v12 = *result;
  if ((*result & 7) == 0)
  {
    *(_DWORD *)a3 = 0;
    goto LABEL_22;
  }
  if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
    v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = v12;
  if ((v12 & 7) != 0)
  {
    uint64_t v13 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)(a3 + 8) = v13;
    }
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *sub_217198988(atomic_ullong *a1)
{
  uint64_t result = sub_2171989D0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType::~HdTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *sub_2171989D0()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)operator new(0x2C0uLL);
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType::HdTokens_StaticTokenType(v0);
  return v0;
}

void sub_217198A00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217198A14(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v16[4] = result;
    uint64_t v13 = (char *)sub_216782ED8(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(void *)uint64_t v14 = *(void *)a2;
    *(void *)a2 = 0;
    *((_DWORD *)v14 + 2) = *(_DWORD *)(a2 + 8);
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    sub_217198B54(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = sub_217198CF8((uint64_t)v16);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    *(void *)a2 = 0;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_217198B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217198CF8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217198B54(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217198BCC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217198BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  float v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 24);
      a3 -= 24;
      *(void *)(v7 - 24) = v8;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 16) = *(_DWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_217198C70((uint64_t)v11);
  return v9;
}

uint64_t sub_217198C70(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217198CA8(a1);
  }
  return a1;
}

uint64_t sub_217198CA8(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(void **)(*(void *)(result + 8) + 8); v1 != i; v1 += 3)
  {
    uint64_t v3 = v1[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((*v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_217198CF8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_217198D30(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(void *)(result + 16); i != a2; uint64_t i = *(void *)(result + 16))
  {
    uint64_t v3 = (void *)(i - 24);
    *(void *)(result + 16) = i - 24;
    uint64_t v4 = *(void *)(i - 8);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((*v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_217198D80(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *(void *)uint64_t result = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(result + 8) = *(_DWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)(result + 16) = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *sub_217198DE4(void *result)
{
  if (*result == result[1])
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal__aapl__pxrRes"
            "erved__::TfToken, std::array<pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDesc, 1>>>>::operator->() [T"
            " = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::array<pxrInternal__aapl__pxrR"
            "eserved__::HdBasisCurvesReprDesc, 1>>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void *sub_217198E70(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal"
            "__aapl__pxrReserved__::TfToken, std::array<pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDesc, 1>>>>::o"
            "perator++() [T = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::array<pxrIntern"
            "al__aapl__pxrReserved__::HdBasisCurvesReprDesc, 1>>>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

atomic_uint **sub_217198EF4(atomic_ullong *a1)
{
  uint64_t result = sub_217198F3C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::~HdBasisCurvesReprDescTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_217198F3C()
{
  uint64_t v0 = (atomic_uint **)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::HdBasisCurvesReprDescTokens_StaticTokenType(v0);
  return v0;
}

void sub_217198F6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::~HdBasisCurvesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *this)
{
  char v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::HdBasisCurvesSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "basisCurves", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "topology", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "geomSubsets", 0);
  uint64_t v3 = *this;
  uint64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    char v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v4;
    }
  }
  int v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    unint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    long long v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *)this;
}

void sub_2171991B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this@<X0>, void *a2@<X8>)
{
  char v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v4) {
    char v4 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  }
  int v5 = v4[1];
  unint64_t v10 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v10 = v6;
    }
  }
  sub_217199340((uint64_t *)this, &v11);
  uint64_t v8 = v11;
  uint64_t v7 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v7);
    uint64_t v9 = v12;
    *a2 = v8;
    a2[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    *a2 = v11;
    a2[1] = 0;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_217199340(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171997C0((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetGeomSubsets(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  }
  int v5 = v4[2];
  unint64_t v10 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v10 = v6;
    }
  }
  sub_217199340((uint64_t *)this, &v11);
  uint64_t v8 = v11;
  uint64_t v7 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v7);
    uint64_t v9 = v12;
    *a2 = v8;
    a2[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    *a2 = v11;
    a2[1] = 0;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  _OWORD v23[2] = *MEMORY[0x263EF8340];
  v23[0] = 0;
  v23[1] = 0;
  memset(v22, 0, sizeof(v22));
  if (*a1)
  {
    uint64_t v6 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v6) {
      uint64_t v6 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    }
    sub_2168D2318(v23, v6 + 1);
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
    *(void *)&v22[0] = v8;
    *((void *)&v22[0] + 1) = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (*a2)
  {
    uint64_t v11 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v11) {
      uint64_t v11 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    }
    sub_2168D2318(&v23[v10], v11 + 2);
    unint64_t v12 = v10 + 1;
    long long v13 = &v22[v10];
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)v13[1];
    *long long v13 = v15;
    v13[1] = v14;
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  else
  {
    unint64_t v12 = v10;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v12, v23, (uint64_t *)v22, &v21);
  *a3 = v21;
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v18 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  for (uint64_t j = 1; j != -1; --j)
  {
    uint64_t v20 = v23[j];
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_217199658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(&a11 + v17);
    if (v18) {
      sub_216784EC4(v18);
    }
    v17 -= 16;
    if (v17 == -8)
    {
      uint64_t v19 = 8;
      while (1)
      {
        uint64_t v20 = *(void *)(&a16 + v19);
        if ((v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v19 -= 8;
        if (v19 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens)) {
      sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    int v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

void *sub_2171997C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77BD20, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  uint64_t result = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!result) {
    return sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B968C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B968C0))
  {
    uint64_t v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96888, (const pxrInternal__aapl__pxrReserved__::TfToken *)v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96888, &dword_216758000);
    __cxa_guard_release(&qword_267B968C0);
  }
  return &unk_267B96888;
}

void sub_217199918(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetTopologyLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96900, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *)__cxa_guard_acquire(&qword_267B96900);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetDefaultLocator(v2);
      uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96888, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 1), dword_267B968C8);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B968C8, &dword_216758000);
      __cxa_guard_release(&qword_267B96900);
    }
  }
  return dword_267B968C8;
}

void sub_2171999E8(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetGeomSubsetsLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96940, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *)__cxa_guard_acquire(&qword_267B96940);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetDefaultLocator(v2);
      uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96888, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 2), dword_267B96908);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B96908, &dword_216758000);
      __cxa_guard_release(&qword_267B96940);
    }
  }
  return dword_267B96908;
}

void sub_217199AB4(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder::SetTopology(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder::SetGeomSubsets(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

uint64_t sub_217199B64(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 52);
  uint64_t v3 = (void *)a1;
  if (v2 >= 7) {
    uint64_t v3 = *(void **)a1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    do
    {
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v3;
      v5 -= 8;
    }
    while (v5);
    unsigned int v2 = *(_DWORD *)(a1 + 52);
  }
  if (v2 >= 7) {
    free(*(void **)a1);
  }
  return a1;
}

atomic_uint **sub_217199BE0(atomic_ullong *a1)
{
  uint64_t result = sub_217199C28();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::~HdBasisCurvesSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_217199C28()
{
  uint64_t v0 = (atomic_uint **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::HdBasisCurvesSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_217199C58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  *(void *)this = &unk_26C77BD48;
  unsigned int v2 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v2) {
    unsigned int v2 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v3 = *((void *)v2 + 43);
  *((void *)this + 1) = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v4) {
    uint64_t v4 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v5 = *((void *)v4 + 51);
  *((void *)this + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 24) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v7) {
    uint64_t v7 = sub_21719ACC0(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(v6, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v7 + 8));
  return this;
}

void sub_217199DCC(_Unwind_Exception *exception_object)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this, const pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *a2)
{
  *(void *)this = &unk_26C77BD48;
  uint64_t v3 = *((void *)a2 + 1);
  *((void *)this + 1) = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)a2 + 2);
  *((void *)this + 2) = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)this + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v6 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v6;
  uint64_t v7 = *((void *)a2 + 8);
  *((void *)this + 8) = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)this + 7)) {
      uint64_t v8 = (atomic_ullong *)*((void *)this + 7);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  long long v9 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 72) = v9;
  uint64_t v10 = *((void *)a2 + 13);
  *((void *)this + 13) = v10;
  if (v10)
  {
    uint64_t v11 = (atomic_ullong *)(v10 - 16);
    if (*((void *)this + 12)) {
      uint64_t v11 = (atomic_ullong *)*((void *)this + 12);
    }
    atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
  }
  long long v12 = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = v12;
  uint64_t v13 = *((void *)a2 + 18);
  *((void *)this + 18) = v13;
  if (v13)
  {
    uint64_t v14 = (atomic_ullong *)(v13 - 16);
    if (*((void *)this + 17)) {
      uint64_t v14 = (atomic_ullong *)*((void *)this + 17);
    }
    atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
  }
  long long v15 = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)this + 152) = v15;
  uint64_t v16 = *((void *)a2 + 23);
  *((void *)this + 23) = v16;
  if (v16)
  {
    uint64_t v17 = (atomic_ullong *)(v16 - 16);
    if (*((void *)this + 22)) {
      uint64_t v17 = (atomic_ullong *)*((void *)this + 22);
    }
    atomic_fetch_add_explicit(v17, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
  }
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v19) {
    uint64_t v19 = sub_21719ACC0(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(v18, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v19 + 8));
  *((void *)this + 24) = sub_21719A0C4((uint64_t *)this + 4, (uint64_t *)this + 9);
  return this;
}

void sub_21719A078(_Unwind_Exception *a1)
{
  sub_2168F83DC(v7);
  sub_2168F83DC(v6);
  sub_2168F83DC(v5);
  sub_2168F83DC(v4);
  sub_21732548C(v3, v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_21719A0C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = (int *)a2[4];
    if (v2 != 1)
    {
      uint64_t v5 = v3 + 1;
      int v4 = *v3;
      uint64_t v6 = 4 * v2 - 4;
      uint64_t v7 = v3 + 1;
      do
      {
        int v9 = *v7++;
        int v8 = v9;
        BOOL v10 = v4 < v9;
        if (v4 <= v9) {
          int v4 = v8;
        }
        if (v10) {
          uint64_t v3 = v5;
        }
        uint64_t v5 = v7;
        v6 -= 4;
      }
      while (v6);
    }
    return *v3 + 1;
  }
  else
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      uint64_t result = 0;
      uint64_t v14 = (int *)a1[4];
      uint64_t v15 = 4 * v13;
      do
      {
        uint64_t v16 = *v14++;
        result += v16;
        v15 -= 4;
      }
      while (v15);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4, uint64_t a5, long long *a6)
{
  *(void *)a1 = &unk_26C77BD48;
  uint64_t v9 = *a2;
  *(void *)(a1 + 8) = *a2;
  BOOL v10 = (void *)(a1 + 8);
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *(void *)a3;
  *(void *)(a1 + 16) = *(void *)a3;
  long long v12 = (void *)(a1 + 16);
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *a4;
  *(void *)(a1 + 24) = *a4;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v14 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 48) = v14;
  uint64_t v15 = *(void *)(a5 + 32);
  *(void *)(a1 + 64) = v15;
  if (v15)
  {
    uint64_t v16 = (atomic_ullong *)(v15 - 16);
    if (*(void *)(a1 + 56)) {
      uint64_t v16 = *(atomic_ullong **)(a1 + 56);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  long long v17 = *a6;
  *(_OWORD *)(a1 + 88) = a6[1];
  *(_OWORD *)(a1 + 72) = v17;
  uint64_t v18 = *((void *)a6 + 4);
  *(void *)(a1 + 104) = v18;
  if (v18)
  {
    uint64_t v19 = (atomic_ullong *)(v18 - 16);
    if (*(void *)(a1 + 96)) {
      uint64_t v19 = *(atomic_ullong **)(a1 + 96);
    }
    atomic_fetch_add_explicit(v19, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v20) {
    uint64_t v20 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v20 + 43) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v21 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v21) {
      long long v21 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    unint64_t v22 = *v10 & 0xFFFFFFFFFFFFFFF8;
    if (v22 != (*((void *)v21 + 14) & 0xFFFFFFFFFFFFFFF8))
    {
      size_t v31 = "hd/basisCurvesTopology.cpp";
      uint64_t v32 = "HdBasisCurvesTopology";
      uint64_t v33 = 96;
      uint64_t v34 = "pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(const TfToken &, const TfToke"
            "n &, const TfToken &, const VtIntArray &, const VtIntArray &)";
      char v35 = 0;
      if (v22)
      {
        char v23 = (const char *)(v22 + 16);
        if (*(char *)(v22 + 39) < 0) {
          char v23 = *(const char **)v23;
        }
      }
      else
      {
        char v23 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"Curve type must be 'linear' or 'cubic'.  Got: '%s'", a3, v23);
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v24) {
        uint64_t v24 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
      }
      sub_2168D2318(v10, (void *)v24 + 43);
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *long long v12 = 0;
    }
  }
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v25) {
    uint64_t v25 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 43) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v26) {
      uint64_t v26 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v26 + 14) & 0xFFFFFFFFFFFFFFF8))
    {
      size_t v31 = "hd/basisCurvesTopology.cpp";
      uint64_t v32 = "HdBasisCurvesTopology";
      uint64_t v33 = 101;
      uint64_t v34 = "pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(const TfToken &, const TfToke"
            "n &, const TfToken &, const VtIntArray &, const VtIntArray &)";
      char v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__ *)"Basis 'linear' passed in to 'cubic' curveType.  Converting 'curveType' to 'linear'.", a3);
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v27) {
        uint64_t v27 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
      }
      sub_2168D2318(v10, (void *)v27 + 43);
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *long long v12 = 0;
    }
  }
  std::string::size_type v28 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!v28) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
  }
  std::string::size_type v29 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v29) {
    std::string::size_type v29 = sub_21719ACC0(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(v28, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v29 + 8));
  *(void *)(a1 + 192) = sub_21719A0C4((uint64_t *)(a1 + 32), (uint64_t *)(a1 + 72));
  return a1;
}

void sub_21719A4FC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v6 + 40);
  sub_2168F83DC(v6);
  sub_2168F83DC(v5);
  sub_2168F83DC(v4);
  sub_21732548C(v3, v1, v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::~HdBasisCurvesTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  *(void *)this = &unk_26C77BD48;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v3) {
    uint64_t v3 = sub_21719ACC0(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdPerfLog::DecrementCounter(v2, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v3 + 8));
  sub_2168F83DC((uint64_t)this + 152);
  sub_2168F83DC((uint64_t)this + 112);
  sub_2168F83DC((uint64_t)this + 72);
  sub_2168F83DC((uint64_t)this + 32);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::~HdBasisCurvesTopology(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::operator==(void *a1, void *a2)
{
  if ((a1[1] & 0xFFFFFFFFFFFFFFF8) != (a2[1] & 0xFFFFFFFFFFFFFFF8)
    || (a1[2] & 0xFFFFFFFFFFFFFFF8) != (a2[2] & 0xFFFFFFFFFFFFFFF8)
    || (a1[3] & 0xFFFFFFFFFFFFFFF8) != (a2[3] & 0xFFFFFFFFFFFFFFF8)
    || !pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 4), (uint64_t)(a2 + 4))|| !pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 9), (uint64_t)(a2 + 9))|| !pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 14), (uint64_t)(a2 + 14)))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 19), (uint64_t)(a2 + 19));
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::operator!=(void *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::operator==(a1, a2) ^ 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::ComputeHash(pxrInternal__aapl__pxrReserved__ **this)
{
  unint64_t v2 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 2), (const char *)8, 0);
  unint64_t v3 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 1), (const char *)8, v2);
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 3), (const char *)8, v3);
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[8], (const char *)(4 * (void)this[4]), v4);
  uint64_t v6 = this[13];
  uint64_t v7 = (const char *)(4 * (void)this[9]);

  return pxrInternal__aapl__pxrReserved__::ArchHash64(v6, v7, v5);
}

void sub_21719AAA4(_Unwind_Exception *a1)
{
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit(v4, 0xFFFFFFFE, memory_order_release);
  }
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit(v2, 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::CalculateNeededNumberOfControlPoints(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  return *((void *)this + 24);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::CalculateNeededNumberOfVaryingControlPoints(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v2 &= 0xFFFFFFFFFFFFFFF8;
  }
  char v3 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v3) {
    char v3 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  unint64_t v4 = (atomic_uint *)(v2 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = *((void *)v3 + 43) & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit(v4, 0xFFFFFFFE, memory_order_release);
  }
  if (v4 == (atomic_uint *)v5) {
    return *((void *)this + 24);
  }
  uint64_t v6 = *((void *)this + 3);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v7) {
    uint64_t v7 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  int v8 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *((void *)v7 + 55);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v8, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 2);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v11) {
    uint64_t v11 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  long long v12 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = *((void *)v11 + 5) & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
  }
  if (v12 == (atomic_uint *)v13) {
    int v14 = 3;
  }
  else {
    int v14 = 1;
  }
  uint64_t v15 = *((void *)this + 4);
  if (!v15) {
    return 0;
  }
  uint64_t result = 0;
  long long v17 = (int *)*((void *)this + 8);
  uint64_t v18 = 4 * v15;
  do
  {
    int v19 = *v17;
    if (*v17 >= 1)
    {
      if (v8 == (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8))
      {
        LODWORD(v20) = v19 / v14;
        if ((int)v20 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v20;
        }
      }
      else
      {
        if (v19 <= 4) {
          int v19 = 4;
        }
        uint64_t v20 = (v19 - 4) / v14 + 2;
      }
      result += v20;
    }
    ++v17;
    v18 -= 4;
  }
  while (v18);
  return result;
}

void sub_21719ACA0(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *sub_21719ACC0(atomic_ullong *a1)
{
  uint64_t result = sub_21719AD08();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType::~HdPerfTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *sub_21719AD08()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)operator new(0x150uLL);
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType::HdPerfTokens_StaticTokenType(v0);
  return v0;
}

void sub_21719AD38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::~HdBasisCurvesTopologySchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *this)
{
  uint64_t v7 = (void **)((char *)this + 48);
  sub_216889A04(&v7);
  uint64_t v2 = *((void *)this + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 4);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::HdBasisCurvesTopologySchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "topology", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "curveVertexCounts", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "curveIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "basis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "wrap", 0);
  uint64_t v3 = *this;
  long long v21 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      long long v21 = v4;
    }
  }
  uint64_t v5 = *v2;
  unint64_t v22 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v22 = v6;
    }
  }
  uint64_t v7 = this[2];
  char v23 = v7;
  if ((v7 & 7) != 0)
  {
    int v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      char v23 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v24 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v24 = v10;
    }
  }
  uint64_t v11 = this[4];
  uint64_t v25 = v11;
  if ((v11 & 7) != 0)
  {
    long long v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v25 = v12;
    }
  }
  unint64_t v13 = this[5];
  uint64_t v26 = v13;
  if ((v13 & 7) != 0)
  {
    int v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v26 = v14;
    }
  }
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  uint64_t v15 = (atomic_uint *)operator new(0x30uLL);
  unint64_t v16 = 0;
  this[6] = v15;
  this[7] = v15;
  this[8] = v15 + 12;
  do
  {
    long long v17 = (&v21)[v16 / 2];
    *(void *)&v15[v16] = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v15[v16] &= 0xFFFFFFFFFFFFFFF8;
    }
    v16 += 2;
  }
  while (v16 != 12);
  this[7] = v15 + 12;
  for (uint64_t i = 5; i != -1; --i)
  {
    int v19 = (&v21)[i];
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *)this;
}

void sub_21719B088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v19 = 40;
  while (1)
  {
    uint64_t v20 = *(void *)(&a12 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetCurveVertexCounts(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  uint64_t v5 = v4[1];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B238((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21719B238(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_21719BD74((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetCurveIndices(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  uint64_t v5 = v4[2];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B238((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetBasis(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  uint64_t v5 = v4[3];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21719B418(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_21719BE04((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  uint64_t v5 = v4[4];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetWrap(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  uint64_t v5 = v4[5];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  memset(v46, 0, sizeof(v46));
  if (*a1)
  {
    long long v12 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v12) {
      long long v12 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    sub_2168D2318(v47, v12 + 1);
    uint64_t v14 = *a1;
    uint64_t v13 = a1[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v46[0] + 1);
    *(void *)&v46[0] = v14;
    *((void *)&v46[0] + 1) = v13;
    if (v15) {
      sub_216784EC4(v15);
    }
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (*a2)
  {
    long long v17 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v17) {
      long long v17 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v47 | (8 * v16)), v17 + 2);
    uint64_t v18 = v16 + 1;
    uint64_t v19 = &v46[v16];
    uint64_t v21 = *a2;
    uint64_t v20 = a2[1];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v22 = (std::__shared_weak_count *)v19[1];
    *uint64_t v19 = v21;
    v19[1] = v20;
    if (v22) {
      sub_216784EC4(v22);
    }
  }
  else
  {
    uint64_t v18 = v16;
  }
  if (*a3)
  {
    char v23 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v23) {
      char v23 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    sub_2168D2318((void *)v47 + v18, v23 + 3);
    unint64_t v24 = v18 + 1;
    uint64_t v25 = &v46[v18];
    uint64_t v27 = *a3;
    uint64_t v26 = a3[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v28 = (std::__shared_weak_count *)v25[1];
    *uint64_t v25 = v27;
    v25[1] = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
  }
  else
  {
    unint64_t v24 = v18;
  }
  if (*a4)
  {
    std::string::size_type v29 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v29) {
      std::string::size_type v29 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    sub_2168D2318((void *)v47 + v24, v29 + 4);
    unint64_t v30 = v24 + 1;
    size_t v31 = &v46[v24];
    uint64_t v33 = *a4;
    uint64_t v32 = a4[1];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = (std::__shared_weak_count *)v31[1];
    *size_t v31 = v33;
    v31[1] = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
  }
  else
  {
    unint64_t v30 = v24;
  }
  if (*a5)
  {
    char v35 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v35) {
      char v35 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    sub_2168D2318((void *)v47 + v30, v35 + 5);
    unint64_t v36 = v30 + 1;
    uint64_t v37 = &v46[v30];
    uint64_t v39 = *a5;
    uint64_t v38 = a5[1];
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = (std::__shared_weak_count *)v37[1];
    void *v37 = v39;
    v37[1] = v38;
    if (v40) {
      sub_216784EC4(v40);
    }
  }
  else
  {
    unint64_t v36 = v30;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v36, (uint64_t *)v47, (uint64_t *)v46, &v45);
  *a6 = v45;
  for (uint64_t i = 72; i != -8; i -= 16)
  {
    uint64_t v42 = *(std::__shared_weak_count **)((char *)v46 + i);
    if (v42) {
      sub_216784EC4(v42);
    }
  }
  for (uint64_t j = 32; j != -8; j -= 8)
  {
    uint64_t v44 = *(void *)((char *)v47 + j);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_21719B8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v22 = 72;
  while (1)
  {
    char v23 = *(std::__shared_weak_count **)(&a11 + v22);
    if (v23) {
      sub_216784EC4(v23);
    }
    v22 -= 16;
    if (v22 == -8)
    {
      uint64_t v24 = 32;
      while (1)
      {
        uint64_t v25 = *(void *)(&a21 + v24);
        if ((v25 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v24 -= 8;
        if (v24 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens)) {
      sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

atomic_uint **pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this)
{
  uint64_t result = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!result) {
    return sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96980))
  {
    uint64_t v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    }
    uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v3) {
      uint64_t v3 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96948, (const pxrInternal__aapl__pxrReserved__::TfToken *)v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96948, &dword_216758000);
    __cxa_guard_release(&qword_267B96980);
  }
  return &unk_267B96948;
}

void sub_21719BB54(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetCurveVertexCounts(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetCurveIndices(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetBasis(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetWrap(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_21719BCE8(atomic_ullong *a1)
{
  uint64_t result = sub_21719BD30();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::~HdBasisCurvesTopologySchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_21719BD30()
{
  uint64_t v0 = (atomic_uint **)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::HdBasisCurvesTopologySchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_21719BD60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21719BD74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77BDA0, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_21719BE04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77BDB8, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdBprim *pxrInternal__aapl__pxrReserved__::HdBprim::HdBprim(pxrInternal__aapl__pxrReserved__::HdBprim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  *(void *)this = &unk_26C77BDE0;
  uint64_t v4 = (_DWORD *)((char *)this + 12);
  sub_216981010((_DWORD *)this + 2, a2);
  sub_21698105C(v4, (_DWORD *)a2 + 1);
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdBprim::~HdBprim(pxrInternal__aapl__pxrReserved__::HdBprim *this)
{
  *(void *)this = &unk_26C77BDE0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 3);
  sub_21697C414((_DWORD *)this + 2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::HdBufferArray(uint64_t result, uint64_t *a2, uint64_t *a3, int a4)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C77BE28;
  *(unsigned char *)(result + 24) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 64) = 850045863;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(void *)(result + 120) = 0;
  uint64_t v4 = *a2;
  *(void *)(result + 128) = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 128) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *a3;
  *(void *)(result + 136) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 136) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(result + 144) = atomic_fetch_add(&qword_267B96988, 1uLL);
  *(void *)(result + 152) = 1;
  *(_DWORD *)(result + 160) = a4;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArray::~HdBufferArray(std::mutex *this)
{
  this->__m_.__uint64_t sig = (uint64_t)&unk_26C77BE28;
  uint64_t v2 = *(void *)this[2].__m_.__opaque;
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t sig = this[2].__m_.__sig;
  if ((sig & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(sig & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::mutex::~mutex(this + 1);
  uint64_t v5 = (void **)&this->__m_.__opaque[24];
  sub_2167B0034(&v5);
  uint64_t v4 = *(std::__shared_weak_count **)&this->__m_.__opaque[8];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::IncrementVersion(uint64_t this)
{
  *(void *)(this + 144) = atomic_fetch_add(&qword_267B96988, 1uLL);
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::HdBufferArray::TryAssignRange(uint64_t a1, void *a2)
{
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 56), 1uLL);
  unint64_t v3 = *(void *)(a1 + 152);
  if (add >= v3)
  {
    atomic_store(v3, (unint64_t *)(a1 + 56));
  }
  else
  {
    uint64_t v6 = (std::mutex *)(a1 + 64);
    std::mutex::lock((std::mutex *)(a1 + 64));
    uint64_t v7 = *(void *)(a1 + 32);
    if (add >= (*(void *)(a1 + 40) - v7) >> 4)
    {
      sub_21719C1D0((uint64_t *)(a1 + 32), add + 1);
      uint64_t v7 = *(void *)(a1 + 32);
    }
    uint64_t v8 = (void *)(v7 + 16 * add);
    uint64_t v10 = *a2;
    uint64_t v9 = a2[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)v8[1];
    void *v8 = v10;
    v8[1] = v9;
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    std::mutex::unlock(v6);
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 128))(*a2, a1);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return add < v3;
}

void sub_21719C1BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21719C1D0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_weak(v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_21719C5F0(a1, v5);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBufferArray::RemoveUnusedRanges(pxrInternal__aapl__pxrReserved__::HdBufferArray *this)
{
  uint64_t v1 = (unint64_t *)((char *)this + 56);
  unint64_t v2 = atomic_load((unint64_t *)this + 7);
  if (v2)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdBufferArray *)((char *)this + 136);
    do
    {
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = v6 + 16 * v4;
      uint64_t v10 = *(std::__shared_weak_count **)(v7 + 8);
      uint64_t v9 = (std::__shared_weak_count **)(v7 + 8);
      uint64_t v8 = v10;
      if (!v10 || v8->__shared_owners_ == -1)
      {
        --v2;
        long long v11 = *(_OWORD *)(v6 + 16 * v2);
        uint64_t v12 = *(void *)(v6 + 16 * v2 + 8);
        if (v12)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
          uint64_t v8 = *v9;
        }
        *(_OWORD *)(v6 + 16 * v4) = v11;
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        uint64_t v13 = (void *)(*((void *)this + 4) + 16 * v2);
        uint64_t v14 = (std::__shared_weak_count *)v13[1];
        *uint64_t v13 = 0;
        v13[1] = 0;
        if (v14) {
          std::__shared_weak_count::__release_weak(v14);
        }
        uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
        if (!v15) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
        }
        pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(v15, v5);
      }
      else
      {
        ++v4;
      }
    }
    while (v4 < v2);
  }
  atomic_store(v2, v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::GetRange@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = this;
  unint64_t v6 = atomic_load((unint64_t *)(this + 56));
  if (v6 <= a2)
  {
    v8[0] = "hd/bufferArray.cpp";
    v8[1] = "GetRange";
    v8[2] = 133;
    void v8[3] = "HdBufferArrayRangePtr pxrInternal__aapl__pxrReserved__::HdBufferArray::GetRange(size_t) const";
    char v9 = 0;
    this = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "idx < _rangeCount", 0);
  }
  long long v7 = *(_OWORD *)(*(void *)(v4 + 32) + 16 * a2);
  *a3 = v7;
  if (*((void *)&v7 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArray::_SetRangeList(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  sub_2167B0088((uint64_t *)(a1 + 32));
  sub_21719C838(a1 + 32, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  atomic_store((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4, (unint64_t *)(a1 + 56));
  for (long long i = *(_OWORD *)a2; (void)i != *((void *)&i + 1); sub_21719C564(&i))
  {
    unint64_t v5 = (void *)sub_21719C4D0((uint64_t *)&i);
    (*(void (**)(void, uint64_t))(*(void *)*v5 + 128))(*v5, a1);
  }
  std::mutex::unlock(v4);
}

void sub_21719C4B8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21719C4D0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    uint64_t v3 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v5[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v3, 0x2Fu);
    v5[1] = "operator*";
    v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::HdBufferArrayRange>>>::operator*() [T = const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::HdBufferArrayRange>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return result;
}

void *sub_21719C564(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::HdBufferArrayRange>>>::operator++() [T = const std::vector<std::shared_ptr<pxrI"
            "nternal__aapl__pxrReserved__::HdBufferArrayRange>>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::GetMaxNumElements(pxrInternal__aapl__pxrReserved__::HdBufferArray *this)
{
  return *((void *)this + 19);
}

void sub_21719C5F0(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[16 * v10];
    long long v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    sub_21719C6F4(a1, &v14);
    sub_2167B0908(&v14);
  }
}

void sub_21719C6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167B0908((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21719C6F4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21719C76C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21719C76C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21719C800((uint64_t)v12);
  return v10;
}

uint64_t sub_21719C800(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2167B08C4(a1);
  }
  return a1;
}

void sub_21719C838(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_21719C98C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_21682BF78((void *)a1, v12);
    char v13 = sub_21719C9C8(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    sub_21719CAD4((uint64_t)&v20, a2, v15, v9);
    char v13 = sub_21719C9C8(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_21719CAD4((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_21719C97C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21719C984(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21719C98C(uint64_t *a1)
{
  if (*a1)
  {
    sub_2167B0088(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_21719C9C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  long long v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_21719CA58((uint64_t)v7);
  return v4;
}

uint64_t sub_21719CA58(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21719CA90(a1);
  }
  return a1;
}

void sub_21719CA90(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 -= 16;
  }
}

uint64_t *sub_21719CAD4(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    }
    long long v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void *pxrInternal__aapl__pxrReserved__::HdBufferArrayRange::HdBufferArrayRange(void *this)
{
  *this = &unk_26C77BEA0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<(uint64_t a1, uint64_t a2)
{
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Set(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  if ((a2 & 0x80000000) != 0)
  {
    v14[0] = "hd/bufferArrayRange.cpp";
    v14[1] = "Set";
    void v14[2] = 49;
    void v14[3] = "void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Set(int, const HdBufferArrayRangeSharedPtr &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Index negative in HdBufferArrayRangeContainer::Set()");
  }
  else
  {
    uint64_t v6 = a2;
    uint64_t v7 = *a1;
    if (a2 >= (unint64_t)((a1[1] - *a1) >> 4))
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
      if (!v8) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
      }
      long long v9 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
      if (!v9) {
        long long v9 = sub_21719ACC0(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(v8, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v9 + 32));
      sub_21719CD08(a1, a2 + 1);
      uint64_t v7 = *a1;
    }
    uint64_t v10 = (void *)(v7 + 16 * v6);
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    char v13 = (std::__shared_weak_count *)v10[1];
    *uint64_t v10 = v12;
    v10[1] = v11;
    if (v13)
    {
      sub_216784EC4(v13);
    }
  }
}

void sub_21719CD08(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          sub_216784EC4(v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_21719CF54(a1, v5);
  }
}

void *pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Get(pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer *this, unsigned int a2)
{
  if ((a2 & 0x80000000) == 0 && a2 < (unint64_t)((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4)) {
    return (void *)(*(void *)this + 16 * a2);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B969A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267B969A0))
  {
    return &unk_267B96990;
  }
  __cxa_atexit((void (*)(void *))sub_21719CE38, &unk_267B96990, &dword_216758000);
  __cxa_guard_release(&qword_267B969A0);
  return &unk_267B96990;
}

uint64_t sub_21719CE38(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Resize(pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    v6[0] = "hd/bufferArrayRange.cpp";
    v6[1] = "Resize";
    void v6[2] = 79;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Resize(int)";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Size negative in HdBufferArrayRangeContainer::Resize()");
  }
  else
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
    if (!v5) {
      unint64_t v5 = sub_21719ACC0(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(v4, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v5 + 32));
    sub_21719CD08((uint64_t *)this, a2);
  }
}

void sub_21719CF54(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      char v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      char v13 = 0;
    }
    unint64_t v14 = v13;
    char v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    sub_21719D058(a1, &v14);
    sub_216788028(&v14);
  }
}

void sub_21719D044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21719D058(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21719D0D0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21719D0D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21719D164((uint64_t)v12);
  return v10;
}

uint64_t sub_21719D164(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::ComputeHash(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_21719D5D8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v2, (uint64_t)this);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::HasPreChainedBuffer(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::HdBufferSource::GetPreChainedBuffer(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::HasChainedBuffer(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::HdBufferSource::GetChainedBuffers(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::IsValid(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 104))();
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::ComputeHash(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetName(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);
    return (void *)v2();
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B969B0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B969B0))
    {
      __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B969A8, &dword_216758000);
      __cxa_guard_release(&qword_267B969B0);
    }
    return &unk_267B969A8;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetData(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    v4[0] = "hd/bufferSource.cpp";
    v4[1] = "GetData";
    uint64_t v4[2] = 104;
    v4[3] = "virtual const void *pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetData() const";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"HdComputedBufferSource::GetData() called without setting the result.");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetTupleType(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
  }
  v3[0] = "hd/bufferSource.cpp";
  v3[1] = "GetTupleType";
  v3[2] = 115;
  v3[3] = "virtual HdTupleType pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetTupleType() const";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"HdComputedBufferSource::GetTupleType() called without setting the result.");
  return 0xFFFFFFFFLL;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetNumElements(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::ComputeHash(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetName(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  v2[0] = "hd/bufferSource.cpp";
  v2[1] = "GetName";
  v2[2] = 139;
  v2[3] = "virtual const TfToken &pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetName() const";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"HdNullBufferSource can't be scheduled with a buffer range");
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B969C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B969C0))
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B969B8, &dword_216758000);
    __cxa_guard_release(&qword_267B969C0);
  }
  return &unk_267B969B8;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetData(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  v2[0] = "hd/bufferSource.cpp";
  v2[1] = "GetData";
  v2[2] = 147;
  v2[3] = "virtual const void *pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetData() const";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"HdNullBufferSource can't be scheduled with a buffer range");
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetTupleType(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  v2[0] = "hd/bufferSource.cpp";
  v2[1] = "GetTupleType";
  v2[2] = 155;
  v2[3] = "virtual HdTupleType pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetTupleType() const";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"HdNullBufferSource can't be scheduled with a buffer range");
  return 0xFFFFFFFFLL;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetNumElements(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  return 0;
}

uint64_t sub_21719D5D8(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  unsigned int v5 = v4;
  uint64_t v7 = v6;
  v13[0] = v4;
  v13[1] = v6;
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::HdDataSizeOfTupleType(v5, v7);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v8, (char *)(v10 * v9));
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  return sub_21719D6F4((uint64_t)a1, v11, (uint64_t)v13);
}

uint64_t sub_21719D6F4(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_21719D734(a1, (int *)a3, (void *)(a3 + 8));
}

uint64_t sub_21719D734(uint64_t result, int *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::HdBufferSpec::IsSubset(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 1;
  }
  uint64_t v4 = a2[1];
  do
  {
    if (*a2 == v4)
    {
      uint64_t v5 = *a2;
    }
    else
    {
      uint64_t v5 = *a2;
      while ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v2 & 0xFFFFFFFFFFFFFFF8)
           || *(_DWORD *)(v5 + 8) != *(_DWORD *)(v2 + 8)
           || *(void *)(v5 + 16) != *(void *)(v2 + 16))
      {
        v5 += 24;
        if (v5 == v4)
        {
          uint64_t v5 = a2[1];
          break;
        }
      }
    }
    BOOL result = v5 != v4;
    if (v5 == v4) {
      break;
    }
    v2 += 24;
  }
  while (v2 != v3);
  return result;
}

char *pxrInternal__aapl__pxrReserved__::HdBufferSpec::ComputeUnion@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int64x2_t *a3@<X8>)
{
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = 0;
    do
    {
      uint64_t v8 = result;
      if ((char *)a3->i64[0] != result)
      {
        uint64_t v8 = (char *)a3->i64[0];
        while ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v5 & 0xFFFFFFFFFFFFFFF8)
             || *((_DWORD *)v8 + 2) != *(_DWORD *)(v5 + 8)
             || *((void *)v8 + 2) != *(void *)(v5 + 16))
        {
          v8 += 24;
          if (v8 == result)
          {
            uint64_t v8 = result;
            break;
          }
        }
      }
      if (v8 == result)
      {
        if ((unint64_t)result >= a3[1].i64[0])
        {
          BOOL result = sub_21719DE10(a3, (uint64_t *)v5);
        }
        else
        {
          uint64_t v9 = *(void *)v5;
          *(void *)BOOL result = *(void *)v5;
          if ((v9 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)result &= 0xFFFFFFFFFFFFFFF8;
          }
          *(_OWORD *)(result + 8) = *(_OWORD *)(v5 + 8);
          result += 24;
        }
        a3->i64[1] = (uint64_t)result;
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  uint64_t v11 = *a2;
  for (uint64_t i = a2[1]; v11 != i; v11 += 24)
  {
    unint64_t v12 = result;
    if ((char *)a3->i64[0] != result)
    {
      unint64_t v12 = (char *)a3->i64[0];
      while ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v11 & 0xFFFFFFFFFFFFFFF8)
           || *((_DWORD *)v12 + 2) != *(_DWORD *)(v11 + 8)
           || *((void *)v12 + 2) != *(void *)(v11 + 16))
      {
        v12 += 24;
        if (v12 == result)
        {
          unint64_t v12 = result;
          break;
        }
      }
    }
    if (v12 == result)
    {
      if ((unint64_t)result >= a3[1].i64[0])
      {
        BOOL result = sub_21719DE10(a3, (uint64_t *)v11);
      }
      else
      {
        uint64_t v13 = *(void *)v11;
        *(void *)BOOL result = *(void *)v11;
        if ((v13 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)result &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_OWORD *)(result + 8) = *(_OWORD *)(v11 + 8);
        result += 24;
      }
      a3->i64[1] = (uint64_t)result;
    }
  }
  return result;
}

void sub_21719DA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21719DDBC((void ***)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::HdBufferSpec::ComputeDifference@<X0>(char *result@<X0>, uint64_t *a2@<X1>, int64x2_t *a3@<X8>)
{
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (*(void *)result != v4)
  {
    BOOL result = 0;
    do
    {
      uint64_t v8 = *a2;
      uint64_t v7 = a2[1];
      if (*a2 != v7)
      {
        while ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v3 & 0xFFFFFFFFFFFFFFF8)
             || *(_DWORD *)(v8 + 8) != *(_DWORD *)(v3 + 8)
             || *(void *)(v8 + 16) != *(void *)(v3 + 16))
        {
          v8 += 24;
          if (v8 == v7)
          {
            uint64_t v8 = a2[1];
            break;
          }
        }
      }
      if (v8 == v7)
      {
        uint64_t v9 = result;
        if ((char *)a3->i64[0] != result)
        {
          uint64_t v9 = (char *)a3->i64[0];
          while ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v3 & 0xFFFFFFFFFFFFFFF8)
               || *((_DWORD *)v9 + 2) != *(_DWORD *)(v3 + 8)
               || *((void *)v9 + 2) != *(void *)(v3 + 16))
          {
            v9 += 24;
            if (v9 == result)
            {
              uint64_t v9 = result;
              break;
            }
          }
        }
        if (v9 == result)
        {
          if ((unint64_t)result >= a3[1].i64[0])
          {
            BOOL result = sub_21719DE10(a3, (uint64_t *)v3);
          }
          else
          {
            uint64_t v10 = *(void *)v3;
            *(void *)BOOL result = *(void *)v3;
            if ((v10 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)result &= 0xFFFFFFFFFFFFFFF8;
            }
            *(_OWORD *)(result + 8) = *(_OWORD *)(v3 + 8);
            result += 24;
          }
          a3->i64[1] = (uint64_t)result;
        }
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_21719DB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21719DDBC((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::HdBufferSpec::Hash(pxrInternal__aapl__pxrReserved__::HdBufferSpec *this)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_21719D6F4((uint64_t)&v2, this, (uint64_t)this + 8);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

void pxrInternal__aapl__pxrReserved__::HdBufferSpec::Dump(void *a1)
{
  sub_216779180(MEMORY[0x263F8C100], (uint64_t)"BufferSpecVector\n", 17);
  if ((int)(-1431655765 * ((a1[1] - *a1) >> 3)) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = sub_216779180(v4, (uint64_t)" : ", 3);
      uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (void *)(*a1 + v2));
      uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C77C110, *(unsigned int *)(*a1 + v2 + 8), (uint64_t)__p);
      if ((v14 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        uint64_t v9 = v14;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      uint64_t v10 = sub_216779180(v7, (uint64_t)v8, v9);
      sub_216779180(v10, (uint64_t)" (", 2);
      uint64_t v11 = (void *)std::ostream::operator<<();
      sub_216779180(v11, (uint64_t)"), ", 3);
      unint64_t v12 = (void *)std::ostream::operator<<();
      sub_216779180(v12, (uint64_t)"\n", 1);
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      ++v3;
      v2 += 24;
    }
    while (v3 < (int)(-1431655765 * ((a1[1] - *a1) >> 3)));
  }
}

void sub_21719DDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21719DDBC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 3);
        v3 -= 24;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

char *sub_21719DE10(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1->i64[0];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t i64 = (uint64_t)a1[1].i64;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v24 = a1 + 1;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(i64, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  unint64_t v12 = &v10[24 * v9];
  char v23 = v12;
  uint64_t v13 = *a2;
  *(void *)uint64_t v11 = *a2;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_OWORD *)&v10[24 * v4 + 8] = *(_OWORD *)(a2 + 1);
  unsigned __int8 v14 = v11 + 24;
  v22.i64[1] = (uint64_t)(v11 + 24);
  uint64_t v16 = a1->i64[0];
  unint64_t v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      uint64_t v17 = *(void *)(v15 - 24);
      v15 -= 24;
      *((void *)v11 - 3) = v17;
      v11 -= 24;
      *(void *)unint64_t v15 = 0;
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(v15 + 8);
    }
    while (v15 != v16);
    int64x2_t v18 = *a1;
    unsigned __int8 v14 = (char *)v22.i64[1];
    unint64_t v12 = v23;
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)v14;
  int64x2_t v22 = v18;
  uint64_t v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v12;
  char v23 = v19;
  uint64_t v21 = v18.i64[0];
  sub_21719DF6C((uint64_t)&v21);
  return v14;
}

uint64_t sub_21719DF6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 24);
    v3 -= 24;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::~HdCameraTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *this)
{
  char v35 = (void **)((char *)this + 272);
  sub_216889A04(&v35);
  uint64_t v2 = *((void *)this + 33);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 32);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 31);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 30);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 29);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 28);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 27);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 26);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 25);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 24);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 23);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 22);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 21);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 20);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 19);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 18);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 17);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 16);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 15);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 14);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 13);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 12);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 11);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 10);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 9);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 8);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 7);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 6);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 5);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 4);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 3);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 2);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 1);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::HdCameraTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *this)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v42 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "projection", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v42, "horizontalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "verticalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "horizontalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "verticalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "focalLength", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "clippingRange", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "clipPlanes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "fStop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "focusDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "focusOn", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "dofAspect", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "splitDiopter:count", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "splitDiopter:angle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "splitDiopter:offset1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "splitDiopter:width1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "splitDiopter:focusDistance1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "splitDiopter:offset2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "splitDiopter:width2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "splitDiopter:focusDistance2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "shutterOpen", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "shutterClose", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "exposure", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "windowPolicy", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "standard", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "fisheye", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "lensDistortion:type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "lensDistortion:k1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "lensDistortion:k2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "lensDistortion:center", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "lensDistortion:anaSq", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "lensDistortion:asym", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "lensDistortion:scale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "lensDistortion:ior", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v43 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v42;
  uint64_t v44 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v45 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v46 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v47 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v48 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v49 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v50 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v51 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v52 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v53 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v54 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v55 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v56 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v57 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v58 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v59 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v60 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v61 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v62 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v63 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v64 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v65 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v66 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v67 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v68 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v69 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v70 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v71 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v72 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v73 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v74 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v75 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v76 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  unint64_t v36 = (char *)operator new(0x110uLL);
  uint64_t v37 = 0;
  *((void *)this + 34) = v36;
  *((void *)this + 35) = v36;
  *((void *)this + 36) = v36 + 272;
  do
  {
    uint64_t v38 = *(uint64_t *)((char *)&v43 + v37);
    *(void *)&v36[v37] = v38;
    if ((v38 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v36[v37] &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 += 8;
  }
  while (v37 != 272);
  *((void *)this + 35) = v36 + 272;
  for (uint64_t i = 264; i != -8; i -= 8)
  {
    uint64_t v40 = *(uint64_t *)((char *)&v43 + i);
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_21719EDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void **a35,uint64_t a36,char a37)
{
  sub_216889A04(&a35);
  uint64_t v47 = 264;
  while (1)
  {
    uint64_t v48 = *(void *)(&a37 + v47);
    if ((v48 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v47 -= 8;
    if (v47 == -8)
    {
      if ((*v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_21719F1C4()
{
}

void sub_21719F1CC()
{
}

void sub_21719F1D4()
{
}

void sub_21719F1DC()
{
}

void sub_21719F1E4()
{
}

void sub_21719F1EC()
{
}

void sub_21719F1F4()
{
}

void sub_21719F1FC()
{
}

void sub_21719F204()
{
}

void sub_21719F20C()
{
}

void sub_21719F214()
{
}

void sub_21719F21C()
{
}

void sub_21719F224()
{
}

void sub_21719F22C()
{
}

void sub_21719F234()
{
}

void sub_21719F23C()
{
}

void sub_21719F244()
{
}

void sub_21719F24C()
{
}

void sub_21719F254()
{
}

void sub_21719F25C()
{
}

void sub_21719F264()
{
}

void sub_21719F26C()
{
}

void sub_21719F274()
{
}

void sub_21719F27C()
{
}

void sub_21719F284()
{
}

pxrInternal__aapl__pxrReserved__::HdCamera *pxrInternal__aapl__pxrReserved__::HdCamera::HdCamera(pxrInternal__aapl__pxrReserved__::HdCamera *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)uint64_t v3 = &unk_26C77C130;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v3 + 16, 1.0);
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0xFF7FFFFF7F7FFFFFLL;
  *((_OWORD *)this + 12) = 0u;
  *((unsigned char *)this + 208) = 0;
  *((_DWORD *)this + 53) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 66) = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  uint64_t v5 = *((void *)v4 + 24);
  *((void *)this + 34) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 34) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *(_OWORD *)((char *)this + 296) = xmmword_217452FC0;
  *((void *)this + 39) = 0x200000000;
  return this;
}

void sub_21719F384(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *((void *)v1 + 23) = v5;
    operator delete(v5);
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCamera::~HdCamera(pxrInternal__aapl__pxrReserved__::HdCamera *this)
{
  *(void *)this = &unk_26C77C130;
  uint64_t v2 = *((void *)this + 34);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }

  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdCamera::~HdCamera(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCamera::Sync(pxrInternal__aapl__pxrReserved__::HdCamera *this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, pxrInternal__aapl__pxrReserved__::HdRenderParam *a3, unsigned int *a4)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t result = sub_216851EE4((uint64_t)&v48, "hd", "virtual void pxrInternal__aapl__pxrReserved__::HdCamera::Sync(HdSceneDelegate *, HdRenderParam *, HdDirtyBits *)");
  if (a2
    || (*(void *)&long long v79 = "hd/camera.cpp",
        *((void *)&v79 + 1) = "Sync",
        *(void *)&long long v80 = 86,
        *((void *)&v80 + 1) = "virtual void pxrInternal__aapl__pxrReserved__::HdCamera::Sync(HdSceneDelegate *, HdRende"
                                "rParam *, HdDirtyBits *)",
        LOBYTE(v81) = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v79, "sceneDelegate != nullptr", 0),
        (result & 1) != 0))
  {
    int v8 = *a4;
    if (*a4)
    {
      uint64_t result = (uint64_t)(*(void *(**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 72))(&v79, a2, (char *)this + 8);
      long long v9 = v84;
      *((_OWORD *)this + 5) = v83;
      *((_OWORD *)this + 6) = v9;
      long long v10 = v86;
      *((_OWORD *)this + 7) = v85;
      *((_OWORD *)this + 8) = v10;
      long long v11 = v80;
      *((_OWORD *)this + 1) = v79;
      *((_OWORD *)this + 2) = v11;
      long long v12 = v82;
      *((_OWORD *)this + 3) = v81;
      *((_OWORD *)this + 4) = v12;
    }
    if ((v8 & 2) != 0)
    {
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens)) {
        sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 296))(&v79, a2, (char *)this + 8);
      if (*((void *)&v79 + 1)) {
        *((_DWORD *)this + 36) = *(_DWORD *)sub_2171A0718((pxrInternal__aapl__pxrReserved__::VtValue *)&v79);
      }
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v14) {
        uint64_t v14 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v78, a2, (char *)this + 8, (uint64_t)v14 + 8);
      if (v78[1]) {
        *((_DWORD *)this + 37) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v78);
      }
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v15) {
        uint64_t v15 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v77, a2, (char *)this + 8, (uint64_t)v15 + 16);
      if (v77[1]) {
        *((_DWORD *)this + 38) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v77);
      }
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v16) {
        uint64_t v16 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v76, a2, (char *)this + 8, (uint64_t)v16 + 24);
      if (v76[1]) {
        *((_DWORD *)this + 39) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v76);
      }
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v17) {
        uint64_t v17 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v75, a2, (char *)this + 8, (uint64_t)v17 + 32);
      if (v75[1]) {
        *((_DWORD *)this + 40) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v75);
      }
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v18) {
        uint64_t v18 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v74, a2, (char *)this + 8, (uint64_t)v18 + 40);
      if (v74[1]) {
        *((_DWORD *)this + 41) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v74);
      }
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v19) {
        uint64_t v19 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v73, a2, (char *)this + 8, (uint64_t)v19 + 48);
      if (v73[1]) {
        *((void *)this + 21) = *(void *)sub_2171A07AC((pxrInternal__aapl__pxrReserved__::VtValue *)v73);
      }
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v20) {
        uint64_t v20 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v72, a2, (char *)this + 8, (uint64_t)v20 + 64);
      if (v72[1]) {
        *((_DWORD *)this + 50) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
      }
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v21) {
        uint64_t v21 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v71, a2, (char *)this + 8, (uint64_t)v21 + 72);
      if (v71[1]) {
        *((_DWORD *)this + 51) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v71);
      }
      uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v22) {
        uint64_t v22 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v70, a2, (char *)this + 8, (uint64_t)v22 + 80);
      if (v70[1]) {
        *((unsigned char *)this + 208) = *(unsigned char *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)v70);
      }
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v23) {
        uint64_t v23 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v69, a2, (char *)this + 8, (uint64_t)v23 + 88);
      if (v69[1]) {
        *((_DWORD *)this + 53) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v69);
      }
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v24) {
        uint64_t v24 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v68, a2, (char *)this + 8, (uint64_t)v24 + 96);
      if (v68[1]) {
        *((_DWORD *)this + 54) = *(_DWORD *)sub_216959558((pxrInternal__aapl__pxrReserved__::VtValue *)v68);
      }
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v25) {
        uint64_t v25 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v67, a2, (char *)this + 8, (uint64_t)v25 + 104);
      if (v67[1]) {
        *((_DWORD *)this + 55) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v67);
      }
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v26) {
        uint64_t v26 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v66, a2, (char *)this + 8, (uint64_t)v26 + 112);
      if (v66[1]) {
        *((_DWORD *)this + 56) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
      }
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v27) {
        uint64_t v27 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v65, a2, (char *)this + 8, (uint64_t)v27 + 120);
      if (v65[1]) {
        *((_DWORD *)this + 57) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v65);
      }
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v28) {
        uint64_t v28 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v64, a2, (char *)this + 8, (uint64_t)v28 + 128);
      if (v64[1]) {
        *((_DWORD *)this + 58) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v64);
      }
      uint64_t v29 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v29) {
        uint64_t v29 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v63, a2, (char *)this + 8, (uint64_t)v29 + 136);
      if (v63[1]) {
        *((_DWORD *)this + 59) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v63);
      }
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v30) {
        uint64_t v30 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v62, a2, (char *)this + 8, (uint64_t)v30 + 144);
      if (v62[1]) {
        *((_DWORD *)this + 60) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v62);
      }
      uint64_t v31 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v31) {
        uint64_t v31 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v61, a2, (char *)this + 8, (uint64_t)v31 + 152);
      if (v61[1]) {
        *((_DWORD *)this + 61) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v61);
      }
      uint64_t v32 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v32) {
        uint64_t v32 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v60, a2, (char *)this + 8, (uint64_t)v32 + 160);
      if (v60[1]) {
        *((void *)this + 31) = *(void *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v60);
      }
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v33) {
        uint64_t v33 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v59, a2, (char *)this + 8, (uint64_t)v33 + 168);
      if (v59[1]) {
        *((void *)this + 32) = *(void *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v59);
      }
      uint64_t v34 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v34) {
        uint64_t v34 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v58, a2, (char *)this + 8, (uint64_t)v34 + 176);
      if (v58[1]) {
        *((_DWORD *)this + 66) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v58);
      }
      uint64_t v35 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v35) {
        uint64_t v35 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v57, a2, (char *)this + 8, (uint64_t)v35 + 208);
      if (v57[1])
      {
        unint64_t v36 = (void *)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v57);
        sub_2168D2318((void *)this + 34, v36);
      }
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v37) {
        uint64_t v37 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v56, a2, (char *)this + 8, (uint64_t)v37 + 216);
      if (v56[1]) {
        *((_DWORD *)this + 70) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
      }
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v38) {
        uint64_t v38 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v55, a2, (char *)this + 8, (uint64_t)v38 + 224);
      if (v55[1]) {
        *((_DWORD *)this + 71) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v55);
      }
      uint64_t v39 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v39) {
        uint64_t v39 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v54, a2, (char *)this + 8, (uint64_t)v39 + 232);
      if (v54[1]) {
        *((void *)this + 36) = *(void *)sub_216943CC4((pxrInternal__aapl__pxrReserved__::VtValue *)v54);
      }
      uint64_t v40 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v40) {
        uint64_t v40 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v53, a2, (char *)this + 8, (uint64_t)v40 + 240);
      if (v53[1]) {
        *((_DWORD *)this + 74) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
      }
      std::string v41 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v41) {
        std::string v41 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v52, a2, (char *)this + 8, (uint64_t)v41 + 248);
      if (v52[1]) {
        *(void *)((char *)this + 300) = *(void *)sub_216943CC4((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
      }
      uint64_t v42 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v42) {
        uint64_t v42 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v51, a2, (char *)this + 8, (uint64_t)v42 + 256);
      if (v51[1]) {
        *((_DWORD *)this + 77) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v51);
      }
      uint64_t v43 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v43) {
        uint64_t v43 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(v50, a2, (char *)this + 8, (uint64_t)v43 + 264);
      if (v50[1]) {
        *((_DWORD *)this + 78) = *(_DWORD *)sub_216921C28((pxrInternal__aapl__pxrReserved__::VtValue *)v50);
      }
      sub_2168EE084((uint64_t)v50);
      sub_2168EE084((uint64_t)v51);
      sub_2168EE084((uint64_t)v52);
      sub_2168EE084((uint64_t)v53);
      sub_2168EE084((uint64_t)v54);
      sub_2168EE084((uint64_t)v55);
      sub_2168EE084((uint64_t)v56);
      sub_2168EE084((uint64_t)v57);
      sub_2168EE084((uint64_t)v58);
      sub_2168EE084((uint64_t)v59);
      sub_2168EE084((uint64_t)v60);
      sub_2168EE084((uint64_t)v61);
      sub_2168EE084((uint64_t)v62);
      sub_2168EE084((uint64_t)v63);
      sub_2168EE084((uint64_t)v64);
      sub_2168EE084((uint64_t)v65);
      sub_2168EE084((uint64_t)v66);
      sub_2168EE084((uint64_t)v67);
      sub_2168EE084((uint64_t)v68);
      sub_2168EE084((uint64_t)v69);
      sub_2168EE084((uint64_t)v70);
      sub_2168EE084((uint64_t)v71);
      sub_2168EE084((uint64_t)v72);
      sub_2168EE084((uint64_t)v73);
      sub_2168EE084((uint64_t)v74);
      sub_2168EE084((uint64_t)v75);
      sub_2168EE084((uint64_t)v76);
      sub_2168EE084((uint64_t)v77);
      sub_2168EE084((uint64_t)v78);
      uint64_t result = sub_2168EE084((uint64_t)&v79);
    }
    if ((v8 & 8) != 0)
    {
      uint64_t v44 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v44) {
        uint64_t v44 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(&v79, a2, (char *)this + 8, (uint64_t)v44 + 184);
      if (*((void *)&v79 + 1)) {
        *((_DWORD *)this + 79) = *(_DWORD *)sub_2171A0840((pxrInternal__aapl__pxrReserved__::VtValue *)&v79);
      }
      uint64_t result = sub_2168EE084((uint64_t)&v79);
    }
    if ((v8 & 4) != 0)
    {
      uint64_t v45 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v45) {
        uint64_t v45 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      }
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 296))(&v79, a2, (char *)this + 8, (uint64_t)v45 + 56);
      if (*((void *)&v79 + 1))
      {
        uint64_t v46 = sub_2171A08D4((pxrInternal__aapl__pxrReserved__::VtValue *)&v79);
        if ((pxrInternal__aapl__pxrReserved__::HdCamera *)((char *)this + 176) != (pxrInternal__aapl__pxrReserved__::HdCamera *)v46) {
          sub_216C7B0D4((char *)this + 176, *(char **)v46, *(void *)(v46 + 8), (uint64_t)(*(void *)(v46 + 8) - *(void *)v46) >> 5);
        }
      }
      uint64_t result = sub_2168EE084((uint64_t)&v79);
    }
    *a4 = 0;
  }
  while (v49--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v48);
  return result;
}

void sub_2171A047C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171A0718(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2171A0BE8(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2171A0C74, (uint64_t)&stru_26C77C170);
  }
}

uint64_t sub_2171A07AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2171A0CC8(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2171A0D00, (uint64_t)&stru_26C74C640);
  }
}

uint64_t sub_2171A0840(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2171A0D5C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2171A0DE8, (uint64_t)&stru_26C77BC08);
  }
}

uint64_t sub_2171A08D4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2171A0E3C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2171A0EC8, (uint64_t)&stru_26C77C180);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCamera::ComputeProjectionMatrix(pxrInternal__aapl__pxrReserved__::HdCamera *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v13, 1.0);
  uint64_t v12 = 0x497424003F800000;
  std::string __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  pxrInternal__aapl__pxrReserved__::GfCamera::GfCamera((uint64_t)v14, v13, 0, &v12, (uint64_t)&__p, 20.955, 15.2908, 0.0, 0.0, 50.0, 0.0, 0.0);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
  LODWORD(v13[0]) = *((_DWORD *)this + 36) == 1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetProjection((uint64_t)v14, v13);
  float v4 = *((float *)this + 37) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalAperture((uint64_t)v14, v4);
  float v5 = *((float *)this + 38) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalAperture((uint64_t)v14, v5);
  float v6 = *((float *)this + 39) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalApertureOffset((uint64_t)v14, v6);
  float v7 = *((float *)this + 40) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalApertureOffset((uint64_t)v14, v7);
  float v8 = *((float *)this + 41) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetFocalLength((uint64_t)v14, v8);
  pxrInternal__aapl__pxrReserved__::GfCamera::SetClippingRange((uint64_t)v14, (void *)this + 21);
  pxrInternal__aapl__pxrReserved__::GfCamera::GetFrustum((pxrInternal__aapl__pxrReserved__::GfCamera *)v14, (uint64_t)v13);
  pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeProjectionMatrix((pxrInternal__aapl__pxrReserved__::GfFrustum *)v13, a2);
  pxrInternal__aapl__pxrReserved__::GfFrustum::~GfFrustum((pxrInternal__aapl__pxrReserved__::GfFrustum *)v13);
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_2171A0B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p)
  {
    a50 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCamera::GetInitialDirtyBitsMask(pxrInternal__aapl__pxrReserved__::HdCamera *this)
{
  return 15;
}

pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *sub_2171A0B5C(atomic_ullong *a1)
{
  uint64_t result = sub_2171A0BA4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::~HdCameraTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *sub_2171A0BA4()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::HdCameraTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171A0BD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171A0BE8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174C3E66 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C77C170);
}

_DWORD *sub_2171A0C74@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(4uLL);
  _DWORD *result = 0;
  *a1 = result;
  a1[1] = sub_2171A0CBC;
  a1[2] = &stru_26C77C170;
  return result;
}

void sub_2171A0CBC(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_2171A0CC8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 83) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C640);
  }
  else {
    return 0;
  }
}

double sub_2171A0D00@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(8uLL);
  double result = -1.40444743e306;
  *uint64_t v2 = 0xFF7FFFFF7F7FFFFFLL;
  *a1 = v2;
  a1[1] = sub_2171A0D50;
  a1[2] = &stru_26C74C640;
  return result;
}

void sub_2171A0D50(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_2171A0D5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174C38CDLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C77BC08);
}

_DWORD *sub_2171A0DE8@<X0>(void *a1@<X8>)
{
  double result = operator new(4uLL);
  _DWORD *result = 0;
  *a1 = result;
  a1[1] = sub_2171A0E30;
  a1[2] = &stru_26C77BC08;
  return result;
}

void sub_2171A0E30(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_2171A0E3C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174C3EA0 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C77C180);
}

void *sub_2171A0EC8@<X0>(void *a1@<X8>)
{
  double result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = 0;
  *a1 = result;
  a1[1] = sub_2171A0F14;
  a1[2] = &stru_26C77C180;
  return result;
}

void sub_2171A0F14(void **__p)
{
  if (__p)
  {
    uint64_t v2 = *__p;
    if (v2)
    {
      __p[1] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::~HdCameraSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *this)
{
  uint64_t v21 = (void **)((char *)this + 160);
  sub_216889A04(&v21);
  uint64_t v2 = *((void *)this + 19);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 18);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 17);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 16);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 15);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 14);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 13);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 12);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 11);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 10);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 9);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 8);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 7);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 6);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 5);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 4);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 3);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 2);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 1);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::HdCameraSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *this)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v28 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "camera", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v28, "projection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "horizontalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "verticalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "horizontalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "verticalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "focalLength", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "clippingRange", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "clippingPlanes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "fStop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "focusDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "shutterOpen", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "shutterClose", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "exposure", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "focusOn", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "dofAspect", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "splitDiopter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "lensDistortion", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "perspective", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "orthographic", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v29 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v28;
  uint64_t v30 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v31 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v32 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v33 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v34 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v35 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v36 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v37 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v38 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v39 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v40 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v41 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v42 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v43 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v44 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v45 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v46 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v47 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v48 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  uint64_t v22 = (char *)operator new(0xA0uLL);
  uint64_t v23 = 0;
  *((void *)this + 20) = v22;
  *((void *)this + 21) = v22;
  *((void *)this + 22) = v22 + 160;
  do
  {
    uint64_t v24 = *(uint64_t *)((char *)&v29 + v23);
    *(void *)&v22[v23] = v24;
    if ((v24 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v22[v23] &= 0xFFFFFFFFFFFFFFF8;
    }
    v23 += 8;
  }
  while (v23 != 160);
  *((void *)this + 21) = v22 + 160;
  for (uint64_t i = 152; i != -8; i -= 8)
  {
    uint64_t v26 = *(uint64_t *)((char *)&v29 + i);
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2171A1804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void **a21,uint64_t a22,char a23)
{
  sub_216889A04(&a21);
  uint64_t v33 = 152;
  while (1)
  {
    uint64_t v34 = *(void *)(&a23 + v33);
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v33 -= 8;
    if (v33 == -8)
    {
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2171A1A8C()
{
}

void sub_2171A1A94()
{
}

void sub_2171A1A9C()
{
}

void sub_2171A1AA4()
{
}

void sub_2171A1AAC()
{
}

void sub_2171A1AB4()
{
}

void sub_2171A1ABC()
{
}

void sub_2171A1AC4()
{
}

void sub_2171A1ACC()
{
}

void sub_2171A1AD4()
{
}

void sub_2171A1ADC()
{
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetProjection(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetHorizontalAperture(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171A1C50(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171A3E28((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetVerticalAperture(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}