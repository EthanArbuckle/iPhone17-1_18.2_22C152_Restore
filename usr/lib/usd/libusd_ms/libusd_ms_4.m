void sub_216904C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216904C90(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216904CB0(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216904E28(a1);
}

uint64_t sub_216904CC0()
{
  return 1;
}

unint64_t sub_216904CC8(uint64_t **a1)
{
  return sub_216904E80((uint64_t)&v2, *a1);
}

BOOL sub_216904CF0(uint64_t **a1, uint64_t *a2)
{
  return sub_216904F84(*a1, *a2);
}

BOOL sub_216904CFC(uint64_t **a1, uint64_t a2)
{
  return sub_216904F84(*a1, a2);
}

uint64_t sub_216904D08()
{
  return 0;
}

void *sub_216904D14(uint64_t **a1, void *a2)
{
  v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169050EC);
  return a2;
}

void *sub_216904D68()
{
  return &unk_26C74E0B8;
}

uint64_t sub_216904D74()
{
  return 1;
}

void *sub_216904D7C()
{
  return &unk_26C74C610;
}

uint64_t sub_216904D88(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216904D90(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216904D9C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217457274 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216904DD8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0B8, a2, a3);
}

void *sub_216904DFC()
{
  return &unk_26C74E0B8;
}

uint64_t sub_216904E08(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216904E10@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F788;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216904E28(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_216904E80(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_216904EF8((uint64_t)&v7, v3);
      v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_216904EF8(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 v5 = a2[3];
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t result = sub_2168F7A3C((uint64_t)&v6, &v5, a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_216904F84(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (unsigned __int16 *)a1[4];
  char v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 8 * v5;
  while (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v7[3]])
  {
    BOOL result = sub_2168F450C(v6, v7);
    if (!result) {
      return result;
    }
    v6 += 4;
    v7 += 4;
    v8 -= 8;
    if (!v8) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_216905050(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      char v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        char v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216904E28(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169050EC(void *a1, void *a2)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_216905104(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216905050((_OWORD **)a1);
}

void sub_216905198(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  v3 = (unint64_t *)sub_216903A34(a1);
  sub_216905300((uint64_t)v11, *v3);
  unint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    uint64_t v8 = v12;
    uint64_t v9 = 8 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)v13, v4);
      long long v10 = v13[1];
      *uint64_t v8 = v13[0];
      v8[1] = v10;
      v8 += 2;
      v4 += 4;
      v9 -= 8;
    }
    while (v9);
  }
  sub_216905370(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_216905230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21690524C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  v3 = (unint64_t *)sub_216905D9C(a1);
  sub_2169046B8((uint64_t)v10, *v3);
  unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v3[4];
  unint64_t v5 = *v3;
  sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    uint64_t v8 = v11;
    uint64_t v9 = 32 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v12, v4);
      *v8++ = v12;
      unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)((char *)v4 + 32);
      v9 -= 32;
    }
    while (v9);
  }
  sub_216904728(v10, a2);
  sub_2168F83DC((uint64_t)v10);
}

void sub_2169052E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216905300(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2169053B4((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_216905358(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216905370@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2169056C4(a2, a1).n128_u64[0];
  return result;
}

void sub_2169053A0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_2169053B4(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    char v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v10 = sub_216905590((uint64_t)a1, a2);
              char v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)uint64_t v12 = *(_OWORD *)(v9 + v11 * 8);
                  *((_OWORD *)v12 + 1) = v13;
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            v14 = *a3;
            uint64_t v15 = 4 * v3;
            do
            {
              v16 = &v7[v15];
              long long v17 = v14[1];
              *(_OWORD *)v16 = *v14;
              *((_OWORD *)v16 + 1) = v17;
              v15 += 4;
            }
            while (4 * a2 != v15);
          }
          v18 = v7;
          goto LABEL_31;
        }
        char v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v25 = a2;
      }
      else {
        unint64_t v25 = *a1;
      }
      v26 = sub_216905590((uint64_t)a1, a2);
      v18 = v26;
      if (v25)
      {
        uint64_t v27 = 32 * v25;
        v28 = v26;
        do
        {
          long long v29 = *(_OWORD *)v7;
          long long v30 = *((_OWORD *)v7 + 1);
          v7 += 4;
          *(_OWORD *)v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v28 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      if (v3 < a2)
      {
        v31 = *a3;
        uint64_t v32 = 4 * v3;
        do
        {
          v33 = &v26[v32];
          long long v34 = v31[1];
          *(_OWORD *)v33 = *v31;
          *((_OWORD *)v33 + 1) = v34;
          v32 += 4;
        }
        while (4 * a2 != v32);
      }
      goto LABEL_31;
    }
    uint64_t v19 = 32 * a2;
    if (32 * a2 / a2 == 32)
    {
      v20 = sub_216905590((uint64_t)a1, a2);
      v18 = v20;
      unint64_t v21 = 0;
      v22 = *a3;
      do
      {
        v23 = &v20[v21 / 8];
        long long v24 = v22[1];
        *(_OWORD *)v23 = *v22;
        *((_OWORD *)v23 + 1) = v24;
        v21 += 32;
      }
      while (v19 != v21);
LABEL_31:
      if (v18 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_216905590(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]");
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216905614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21690562C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatd]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216905590((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 32 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[1];
          v6 += 2;
          _OWORD *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2169056C4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21690577C(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2169057B4(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216905D08(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216905764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21690577C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 42) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E0E8);
  }
  else {
    return 0;
  }
}

void *sub_2169057B4(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F840;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216905848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216905884(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169058A4(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216905A1C(a1);
}

uint64_t sub_2169058B4()
{
  return 1;
}

unint64_t sub_2169058BC(uint64_t **a1)
{
  return sub_216905A74((uint64_t)&v2, *a1);
}

BOOL sub_2169058E4(void **a1, uint64_t *a2)
{
  return sub_216905B78(*a1, *a2);
}

BOOL sub_2169058F0(void **a1, uint64_t a2)
{
  return sub_216905B78(*a1, a2);
}

uint64_t sub_2169058FC()
{
  return 0;
}

void *sub_216905908(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216905CF0);
  return a2;
}

void *sub_21690595C()
{
  return &unk_26C74E0E8;
}

uint64_t sub_216905968()
{
  return 1;
}

void *sub_216905970()
{
  return &unk_26C74C5F0;
}

uint64_t sub_21690597C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216905984(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216905990(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174572EALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169059CC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0E8, a2, a3);
}

void *sub_2169059F0()
{
  return &unk_26C74E0E8;
}

uint64_t sub_2169059FC(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216905A04@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F840;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216905A1C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_216905A74(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 32;
      sub_216905AEC((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_216905AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t result = sub_2168F7DF0((uint64_t)&v6, (double *)&v5, (double *)a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_216905B78(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (double *)(a1[4] + 16);
  uint64_t v6 = 32 * *a1;
  for (i = (double *)(*(void *)(a2 + 32) + 16);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 32;
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_216905C54(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      char v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        char v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216905A1C(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_216905CF0(long long **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_216905D08(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216905C54((_OWORD **)a1);
}

uint64_t sub_216905D9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21690577C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216905E30, (uint64_t)&stru_26C74E0E8);
  }
}

double sub_216905E30@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216905E80;
  a1[2] = &stru_26C74E0E8;
  return result;
}

void sub_216905E80(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216905ECC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216904624(a1);
  sub_216905300((uint64_t)v11, *v3);
  unint64_t v4 = (float32x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    char v8 = v12;
    uint64_t v9 = 16 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v13, v4);
      float64x2_t v10 = v13[1];
      *char v8 = v13[0];
      v8[1] = v10;
      v8 += 2;
      v4 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  sub_216905370(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_216905F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216905F80(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216905D9C(a1);
  sub_216903AC8((uint64_t)v10, *v3);
  unint64_t v4 = (__n128 *)v3[4];
  unint64_t v5 = *v3;
  sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    char v8 = v11;
    uint64_t v9 = 32 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v12, v4);
      *v8++ = v12;
      v4 += 2;
      v9 -= 32;
    }
    while (v9);
  }
  sub_216903B38(v10, a2);
  sub_2168F83DC((uint64_t)v10);
}

void sub_216906018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216906034(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216906174(a1);
  sub_216906208((uint64_t)v11, *v3);
  unint64_t v4 = (int *)v3[4];
  unint64_t v5 = *v3;
  sub_2169065FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    char v8 = v12;
    uint64_t v9 = 4 * v5;
    do
    {
      int v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_21690627C(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2169060BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169060D4(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216906C48(a1);
  sub_216906CDC((uint64_t)v11, *v3);
  unint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    char v8 = v12;
    uint64_t v9 = 2 * v5;
    do
    {
      int v10 = *v4++;
      *v8++ = v10;
      v9 -= 2;
    }
    while (v9);
  }
  sub_216906D50(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_21690615C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216906174(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169062C0(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169062F8, (uint64_t)&stru_26C74E1F0);
  }
}

uint64_t sub_216906208(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_216906394((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216906264(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_21690627C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216906694(a2, a1).n128_u64[0];
  return result;
}

void sub_2169062AC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169062C0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E1F0);
  }
  else {
    return 0;
  }
}

double sub_2169062F8@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216906348;
  a1[2] = &stru_26C74E1F0;
  return result;
}

void sub_216906348(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216906394(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    char v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_21690655C((uint64_t)a1, a2);
              char v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            float32x4_t v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_WORD *)((char *)v7 + v13) = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          v14 = v7;
          goto LABEL_31;
        }
        char v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      v20 = sub_21690655C((uint64_t)a1, a2);
      v14 = v20;
      if (v19)
      {
        uint64_t v21 = 2 * v19;
        v22 = v20;
        do
        {
          __int16 v23 = *(_WORD *)v7;
          char v7 = (unint64_t *)((char *)v7 + 2);
          *(_WORD *)v22 = v23;
          v22 = (unint64_t *)((char *)v22 + 2);
          v21 -= 2;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_WORD *)((char *)v20 + v25) = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 2 * a2;
    if (2 * a2 / a2 == 2)
    {
      v16 = sub_21690655C((uint64_t)a1, a2);
      v14 = v16;
      uint64_t v17 = 0;
      v18 = *a3;
      do
      {
        *(_WORD *)((char *)v16 + v17) = *v18;
        v17 += 2;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_21690655C(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned short>::_AllocateNew(size_t) [T = unsigned short]");
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 2 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169065E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169065FC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned short>::_DetachIfNotUnique() [T = unsigned short]", a3);
      uint64_t v6 = (__int16 *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_21690655C((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 2 * v7;
        uint64_t v11 = v8;
        do
        {
          __int16 v12 = *v6++;
          *v11++ = v12;
          v10 -= 2;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216906694(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21690674C(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216906784(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216906BB4(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216906734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21690674C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 51) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E1C0);
  }
  else {
    return 0;
  }
}

void *sub_216906784(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C74F8F8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216906818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216906854(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216906874(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216906A20(a1);
}

uint64_t sub_216906884()
{
  return 1;
}

unint64_t sub_21690688C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(2 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_2169068E8(uint64_t *a1, uint64_t *a2)
{
  return sub_216906A78(*a1, *a2);
}

uint64_t sub_2169068F4(uint64_t *a1, uint64_t a2)
{
  return sub_216906A78(*a1, a2);
}

uint64_t sub_216906900()
{
  return 0;
}

void *sub_21690690C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216906B9C);
  return a2;
}

void *sub_216906960()
{
  return &unk_26C74E1C0;
}

uint64_t sub_21690696C()
{
  return 1;
}

uint64_t sub_216906974()
{
  return MEMORY[0x263F8C280];
}

uint64_t sub_216906980(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216906988(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216906994(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E46EELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169069D0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1C0, a2, a3);
}

void *sub_2169069F4()
{
  return &unk_26C74E1C0;
}

uint64_t sub_216906A00(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216906A08@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C74F8F8;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216906A20(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216906A78(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_2168F8C2C(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = sub_2168F8C2C(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 2 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t sub_216906B00(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216906A20(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_216906B9C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int16 *)*a1;
  *a1 += 2;
  return MEMORY[0x270F987D0](a2, v3);
}

uint64_t sub_216906BB4(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216906B00((_OWORD **)a1);
}

uint64_t sub_216906C48(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21690674C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216906D94, (uint64_t)&stru_26C74E1C0);
  }
}

uint64_t sub_216906CDC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_216906E30((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216906D38(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216906D50@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216907130(a2, a1).n128_u64[0];
  return result;
}

void sub_216906D80(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_216906D94@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216906DE4;
  a1[2] = &stru_26C74E1C0;
  return result;
}

void sub_216906DE4(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216906E30(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_216906FF8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            __int16 v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      v20 = sub_216906FF8((uint64_t)a1, a2);
      v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)v22 = v23;
          v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      v16 = sub_216906FF8((uint64_t)a1, a2);
      v14 = v16;
      uint64_t v17 = 0;
      v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_216906FF8(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew(size_t) [T = unsigned int]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216907080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216907098(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]", a3);
      uint64_t v6 = (int *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216906FF8((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 4 * v7;
        uint64_t v11 = v8;
        do
        {
          int v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216907130(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2169062C0(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2169071E8(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216907618(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2169071D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2169071E8(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C74F9B0;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21690727C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169072B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169072D8(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216907484(a1);
}

uint64_t sub_2169072E8()
{
  return 1;
}

unint64_t sub_2169072F0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(4 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_21690734C(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, *a2);
}

uint64_t sub_216907358(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, a2);
}

uint64_t sub_216907364()
{
  return 0;
}

void *sub_216907370(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216907600);
  return a2;
}

void *sub_2169073C4()
{
  return &unk_26C74E1F0;
}

uint64_t sub_2169073D0()
{
  return 1;
}

uint64_t sub_2169073D8()
{
  return MEMORY[0x263F8C260];
}

uint64_t sub_2169073E4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169073EC(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169073F8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478D60 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216907434(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1F0, a2, a3);
}

void *sub_216907458()
{
  return &unk_26C74E1F0;
}

uint64_t sub_216907464(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690746C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C74F9B0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216907484(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_2168F8C2C(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = sub_2168F8C2C(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t sub_216907564(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216907484(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_216907600(void *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

uint64_t sub_216907618(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216907564((_OWORD **)a1);
}

void sub_2169076AC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2169077EC(a1);
  sub_216906208((uint64_t)v11, *v3);
  uint64_t v4 = (int *)v3[4];
  unint64_t v5 = *v3;
  sub_2169065FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    unint64_t v8 = v12;
    uint64_t v9 = 4 * v5;
    do
    {
      int v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_21690627C(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_216907734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21690774C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216906C48(a1);
  sub_216907954((uint64_t)v11, *v3);
  uint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    unint64_t v8 = v12;
    uint64_t v9 = 2 * v5;
    do
    {
      int v10 = *v4++;
      *v8++ = v10;
      v9 -= 2;
    }
    while (v9);
  }
  sub_2169079C8(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2169077D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169077EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216907880(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169078B8, (uint64_t)&stru_26C74E1D8);
  }
}

uint64_t sub_216907880(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E1D8);
  }
  else {
    return 0;
  }
}

double sub_2169078B8@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216907908;
  a1[2] = &stru_26C74E1D8;
  return result;
}

void sub_216907908(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

uint64_t sub_216907954(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_216907A0C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169079B0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2169079C8@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216907D0C(a2, a1).n128_u64[0];
  return result;
}

void sub_2169079F8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_216907A0C(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_216907BD4((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            int v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      v20 = sub_216907BD4((uint64_t)a1, a2);
      v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)v22 = v23;
          v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      v16 = sub_216907BD4((uint64_t)a1, a2);
      v14 = v16;
      uint64_t v17 = 0;
      v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_216907BD4(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(size_t) [T = int]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216907C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216907C74(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]", a3);
      uint64_t v6 = (int *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216907BD4((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 4 * v7;
        uint64_t v11 = v8;
        do
        {
          int v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216907D0C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216907880(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216907DC4(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_21690816C(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216907DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216907DC4(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C74FA68;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216907E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216907E94(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216907EB4(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216908060(a1);
}

uint64_t sub_216907EC4()
{
  return 1;
}

unint64_t sub_216907ECC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(4 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_216907F28(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, *a2);
}

uint64_t sub_216907F34(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(*a1, a2);
}

uint64_t sub_216907F40()
{
  return 0;
}

void *sub_216907F4C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216908154);
  return a2;
}

void *sub_216907FA0()
{
  return &unk_26C74E1D8;
}

uint64_t sub_216907FAC()
{
  return 1;
}

uint64_t sub_216907FB4()
{
  return MEMORY[0x263F8C258];
}

uint64_t sub_216907FC0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216907FC8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216907FD4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E54BCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216908010(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1D8, a2, a3);
}

void *sub_216908034()
{
  return &unk_26C74E1D8;
}

uint64_t sub_216908040(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216908048@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C74FA68;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216908060(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2169080B8(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216908060(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_216908154(void *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

uint64_t sub_21690816C(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169080B8((_OWORD **)a1);
}

void sub_216908200(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2169077EC(a1);
  sub_21690833C((uint64_t)v11, *v3);
  uint64_t v4 = (int *)v3[4];
  unint64_t v5 = *v3;
  sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    unint64_t v8 = v12;
    uint64_t v9 = 4 * v5;
    do
    {
      int v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_2169083B0(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_216908288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169082A0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216908C60(a1);
  sub_216907954((uint64_t)v10, *v3);
  uint64_t v4 = (unsigned __int8 *)v3[4];
  unint64_t v5 = *v3;
  sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    unint64_t v8 = v11;
    do
    {
      int v9 = *v4++;
      *v8++ = v9;
      --v5;
    }
    while (v5);
  }
  sub_2169079C8(v10, a2);
  sub_2168F83DC((uint64_t)v10);
}

void sub_216908324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21690833C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  char v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2169083F4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216908398(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2169083B0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2169086B8(a2, a1).n128_u64[0];
  return result;
}

void sub_2169083E0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_2169083F4(unint64_t *a1, unint64_t a2, unsigned char **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_216908594((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  *((unsigned char *)v10 + i) = *(unsigned char *)(v9 + i);
              }
            }
            int v12 = *a3;
            do
              *((unsigned char *)v7 + v3++) = *v12;
            while (a2 != v3);
          }
          uint64_t v13 = v7;
          goto LABEL_30;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v17 = a2;
      }
      else {
        unint64_t v17 = *a1;
      }
      v18 = sub_216908594((uint64_t)a1, a2);
      uint64_t v13 = v18;
      if (v17)
      {
        unint64_t v19 = v18;
        do
        {
          char v20 = *(unsigned char *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 1);
          *(unsigned char *)unint64_t v19 = v20;
          unint64_t v19 = (unint64_t *)((char *)v19 + 1);
          --v17;
        }
        while (v17);
      }
      if (v3 < a2)
      {
        uint64_t v21 = *a3;
        do
          *((unsigned char *)v18 + v3++) = *v21;
        while (a2 != v3);
      }
      goto LABEL_30;
    }
    v14 = sub_216908594((uint64_t)a1, a2);
    uint64_t v13 = v14;
    uint64_t v15 = 0;
    v16 = *a3;
    do
      *((unsigned char *)v14 + v15++) = *v16;
    while (a2 != v15);
LABEL_30:
    if (v13 != (unint64_t *)a1[4])
    {
      sub_2168F83DC((uint64_t)a1);
      a1[4] = (unint64_t)v13;
    }
    *a1 = a2;
    return;
  }

  sub_2168F845C(a1);
}

void *sub_216908594(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew(size_t) [T = unsigned char]");
  if (a2 >= 0xFFFFFFFFFFFFFFF0) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21690860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216908624(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique() [T = unsigned char]", a3);
      uint64_t v6 = (char *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216908594((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        int v10 = v8;
        do
        {
          char v11 = *v6++;
          *v10++ = v11;
          --v7;
        }
        while (v7);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2169086B8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216908770(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2169087A8(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216908BCC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216908758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216908770(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 49) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E190);
  }
  else {
    return 0;
  }
}

void *sub_2169087A8(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C74FB20;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21690883C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216908878(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216908898(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216908A40(a1);
}

uint64_t sub_2169088A8()
{
  return 1;
}

unint64_t sub_2169088B0(char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * (void)v4);
}

uint64_t sub_216908908(uint64_t *a1, uint64_t *a2)
{
  return sub_216908A98(*a1, *a2);
}

uint64_t sub_216908914(uint64_t *a1, uint64_t a2)
{
  return sub_216908A98(*a1, a2);
}

uint64_t sub_216908920()
{
  return 0;
}

void *sub_21690892C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216908BB8);
  return a2;
}

void *sub_216908980()
{
  return &unk_26C74E190;
}

uint64_t sub_21690898C()
{
  return 1;
}

uint64_t sub_216908994()
{
  return MEMORY[0x263F8C250];
}

uint64_t sub_2169089A0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169089A8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169089B4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E471ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169089F0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E190, a2, a3);
}

void *sub_216908A14()
{
  return &unk_26C74E190;
}

uint64_t sub_216908A20(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216908A28@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C74FB20;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216908A40(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216908A98(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_2168F8C2C(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = sub_2168F8C2C(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), *(void *)a1) == 0;
  }
  return result;
}

uint64_t sub_216908B1C(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    int v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216908A40(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_216908BB8(void *a1)
{
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

uint64_t sub_216908BCC(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216908B1C((_OWORD **)a1);
}

uint64_t sub_216908C60(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216908770(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216908CF4, (uint64_t)&stru_26C74E190);
  }
}

double sub_216908CF4@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216908D44;
  a1[2] = &stru_26C74E190;
  return result;
}

void sub_216908D44(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216908D90(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216908ED8(a1);
  sub_216908F6C((uint64_t)v11, *v3);
  uint64_t v4 = (float32x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_216909364((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    unint64_t v8 = v12;
    uint64_t v9 = 8 * v5;
    do
    {
      float32x2_t v10 = *v4++;
      *v8++ = vcvtq_f64_f32(v10);
      v9 -= 8;
    }
    while (v9);
  }
  sub_216908FE8(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_216908E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216908E34(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2169098F4(a1);
  sub_216909988((uint64_t)v11, *v3);
  uint64_t v4 = (float64x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_216909D4C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    unint64_t v8 = v12;
    uint64_t v9 = 16 * v5;
    do
    {
      float64x2_t v10 = *v4++;
      *v8++ = vcvt_f32_f64(v10);
      v9 -= 16;
    }
    while (v9);
  }
  sub_216909A04(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_216908EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216908ED8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21690902C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216909064, (uint64_t)&stru_26C74E058);
  }
}

uint64_t sub_216908F6C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v5 = xmmword_217412860;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_216909100((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216908FD0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216908FE8@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2169093FC(a2, a1).n128_u64[0];
  return result;
}

void sub_216909018(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21690902C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 36) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E058);
  }
  else {
    return 0;
  }
}

double sub_216909064@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2169090B4;
  a1[2] = &stru_26C74E058;
  return result;
}

void sub_2169090B4(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216909100(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float64x2_t v10 = sub_2169092C8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            int v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2169092C8((uint64_t)a1, a2);
      v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      v16 = sub_2169092C8((uint64_t)a1, a2);
      v14 = v16;
      unint64_t v17 = 0;
      v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169092C8(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange1d]");
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21690934C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216909364(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange1d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169092C8((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2169093FC(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2169094B4(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2169094EC(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_216909860(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_21690949C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169094B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 37) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E070);
  }
  else {
    return 0;
  }
}

void *sub_2169094EC(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74FBD8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216909580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169095BC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169095DC(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216909754(a1);
}

uint64_t sub_2169095EC()
{
  return 1;
}

unint64_t sub_2169095F4(uint64_t **a1)
{
  return sub_2168FC8A8((uint64_t)&v2, *a1);
}

BOOL sub_21690961C(void **a1, uint64_t *a2)
{
  return sub_2168FC990(*a1, *a2);
}

BOOL sub_216909628(void **a1, uint64_t a2)
{
  return sub_2168FC990(*a1, a2);
}

uint64_t sub_216909634()
{
  return 0;
}

void *sub_216909640(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216909848);
  return a2;
}

void *sub_216909694()
{
  return &unk_26C74E070;
}

uint64_t sub_2169096A0()
{
  return 1;
}

void *sub_2169096A8()
{
  return &unk_26C74C630;
}

uint64_t sub_2169096B4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169096BC(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169096C8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174571BCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216909704(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E070, a2, a3);
}

void *sub_216909728()
{
  return &unk_26C74E070;
}

uint64_t sub_216909734(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690973C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74FBD8;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216909754(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2169097AC(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216909754(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_216909848(double **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_216909860(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169097AC((_OWORD **)a1);
}

uint64_t sub_2169098F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169094B4(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216909A48, (uint64_t)&stru_26C74E070);
  }
}

uint64_t sub_216909988(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v5 = 0xFF7FFFFF7F7FFFFFLL;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_216909AE4((unint64_t *)a1, a2, (uint64_t **)&v6);
  return a1;
}

void sub_2169099EC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216909A04@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216909DE4(a2, a1).n128_u64[0];
  return result;
}

void sub_216909A34(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_216909A48@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216909A98;
  a1[2] = &stru_26C74E070;
  return result;
}

void sub_216909A98(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216909AE4(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_216909CAC((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_216909CAC((uint64_t)a1, a2);
      v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      v16 = sub_216909CAC((uint64_t)a1, a2);
      v14 = v16;
      unint64_t v17 = 0;
      v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_216909CAC(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange1f]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216909D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216909D4C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange1f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange1f]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216909CAC((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216909DE4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21690902C(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216909E9C(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_21690A210(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216909E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216909E9C(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74FC90;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216909F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216909F6C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216909F8C(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21690A104(a1);
}

uint64_t sub_216909F9C()
{
  return 1;
}

unint64_t sub_216909FA4(uint64_t **a1)
{
  return sub_2168FB198((uint64_t)&v2, *a1);
}

BOOL sub_216909FCC(void **a1, uint64_t *a2)
{
  return sub_2168FB280(*a1, *a2);
}

BOOL sub_216909FD8(void **a1, uint64_t a2)
{
  return sub_2168FB280(*a1, a2);
}

uint64_t sub_216909FE4()
{
  return 0;
}

void *sub_216909FF0(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_21690A1F8);
  return a2;
}

void *sub_21690A044()
{
  return &unk_26C74E058;
}

uint64_t sub_21690A050()
{
  return 1;
}

void *sub_21690A058()
{
  return &unk_26C74C640;
}

uint64_t sub_21690A064(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_21690A06C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_21690A078(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021745717FLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21690A0B4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E058, a2, a3);
}

void *sub_21690A0D8()
{
  return &unk_26C74E058;
}

uint64_t sub_21690A0E4(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690A0EC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74FC90;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_21690A104(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_21690A15C(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_21690A104(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_21690A1F8(float **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_21690A210(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21690A15C((_OWORD **)a1);
}

void sub_21690A2A4(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_21690A3F4(a1);
  sub_21690A488((uint64_t)v12, *v3);
  uint64_t v4 = (float32x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_21690A8A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    unint64_t v8 = &v4[2 * v5];
    unint64_t v9 = v13;
    do
    {
      float32x2_t v10 = *v4;
      float32x2_t v11 = v4[1];
      v4 += 2;
      *unint64_t v9 = vcvtq_f64_f32(v10);
      v9[1] = vcvtq_f64_f32(v11);
      v9 += 2;
    }
    while (v4 != v8);
  }
  sub_21690A514(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_21690A334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21690A34C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_21690AFA0(a1);
  sub_21690B034((uint64_t)v12, *v3);
  uint64_t v4 = (float64x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_21690B3F4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    unint64_t v8 = v13;
    uint64_t v9 = 32 * v5;
    do
    {
      float64x2_t v11 = *v4;
      float64x2_t v10 = v4[1];
      v4 += 2;
      *v8++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v11), v10);
      v9 -= 32;
    }
    while (v9);
  }
  sub_21690B0B0(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_21690A3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21690A3F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21690A558(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21690A590, (uint64_t)&stru_26C74E028);
  }
}

uint64_t sub_21690A488(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  v5[1] = vdupq_n_s64(0xC7EFFFFFE0000000);
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_21690A62C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_21690A4FC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_21690A514@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_21690A93C(a2, a1).n128_u64[0];
  return result;
}

void sub_21690A544(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21690A558(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 34) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E028);
  }
  else {
    return 0;
  }
}

double sub_21690A590@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_21690A5E0;
  a1[2] = &stru_26C74E028;
  return result;
}

void sub_21690A5E0(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_21690A62C(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float64x2_t v10 = sub_21690A808((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)uint64_t v12 = *(_OWORD *)(v9 + v11 * 8);
                  *((_OWORD *)v12 + 1) = v13;
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            v14 = *a3;
            uint64_t v15 = 4 * v3;
            do
            {
              v16 = &v7[v15];
              long long v17 = v14[1];
              *(_OWORD *)v16 = *v14;
              *((_OWORD *)v16 + 1) = v17;
              v15 += 4;
            }
            while (4 * a2 != v15);
          }
          v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v25 = a2;
      }
      else {
        unint64_t v25 = *a1;
      }
      v26 = sub_21690A808((uint64_t)a1, a2);
      v18 = v26;
      if (v25)
      {
        uint64_t v27 = 32 * v25;
        v28 = v26;
        do
        {
          long long v29 = *(_OWORD *)v7;
          long long v30 = *((_OWORD *)v7 + 1);
          v7 += 4;
          *(_OWORD *)v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v28 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      if (v3 < a2)
      {
        v31 = *a3;
        uint64_t v32 = 4 * v3;
        do
        {
          v33 = &v26[v32];
          long long v34 = v31[1];
          *(_OWORD *)v33 = *v31;
          *((_OWORD *)v33 + 1) = v34;
          v32 += 4;
        }
        while (4 * a2 != v32);
      }
      goto LABEL_31;
    }
    uint64_t v19 = 32 * a2;
    if (32 * a2 / a2 == 32)
    {
      char v20 = sub_21690A808((uint64_t)a1, a2);
      v18 = v20;
      unint64_t v21 = 0;
      v22 = *a3;
      do
      {
        uint64_t v23 = &v20[v21 / 8];
        long long v24 = v22[1];
        *(_OWORD *)uint64_t v23 = *v22;
        *((_OWORD *)v23 + 1) = v24;
        v21 += 32;
      }
      while (v19 != v21);
LABEL_31:
      if (v18 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_21690A808(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange2d]");
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21690A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21690A8A4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange2d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_21690A808((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 32 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[1];
          v6 += 2;
          _OWORD *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_21690A93C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21690A9F4(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_21690AA2C(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_21690AF0C(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_21690A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21690A9F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 35) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E040);
  }
  else {
    return 0;
  }
}

void *sub_21690AA2C(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74FD48;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21690AAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21690AAFC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_21690AB1C(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21690AC94(a1);
}

uint64_t sub_21690AB2C()
{
  return 1;
}

unint64_t sub_21690AB34(uint64_t **a1)
{
  return sub_21690ACEC((uint64_t)&v2, *a1);
}

BOOL sub_21690AB5C(void **a1, uint64_t *a2)
{
  return sub_2169019E8(*a1, *a2);
}

BOOL sub_21690AB68(void **a1, uint64_t a2)
{
  return sub_2169019E8(*a1, a2);
}

uint64_t sub_21690AB74()
{
  return 0;
}

void *sub_21690AB80(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_21690AEF4);
  return a2;
}

void *sub_21690ABD4()
{
  return &unk_26C74E040;
}

uint64_t sub_21690ABE0()
{
  return 1;
}

void *sub_21690ABE8()
{
  return &unk_26C74C650;
}

uint64_t sub_21690ABF4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_21690ABFC(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_21690AC08(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217457142 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21690AC44(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E040, a2, a3);
}

void *sub_21690AC68()
{
  return &unk_26C74E040;
}

uint64_t sub_21690AC74(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690AC7C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74FD48;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_21690AC94(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_21690ACEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 4;
      sub_21690AD64((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_21690AD64(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_21690ADE4((uint64_t)&v5, a2, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_21690ADE4(uint64_t a1, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a2 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = v3;
  if (a2[1] == 0.0) {
    double v5 = 0.0;
  }
  else {
    double v5 = a2[1];
  }
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (*(void *)&v5+ ((*(void *)&v5 + *(void *)&v4 + (*(void *)&v5 + *(void *)&v4) * (*(void *)&v5 + *(void *)&v4)) >> 1)));
  if (*(unsigned char *)(a1 + 8)) {
    v6 += (*(void *)a1 + v6 + (*(void *)a1 + v6) * (*(void *)a1 + v6)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return sub_2168FC920(a1, a3);
}

uint64_t sub_21690AE58(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    double v3 = operator new(0x30uLL);
    double v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)double v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      double v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_21690AC94(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_21690AEF4(_OWORD **a1, void *a2)
{
  double v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_21690AF0C(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21690AE58((_OWORD **)a1);
}

uint64_t sub_21690AFA0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21690A9F4(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21690B0F4, (uint64_t)&stru_26C74E040);
  }
}

uint64_t sub_21690B034(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v5 = xmmword_217456E50;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_21690B190((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_21690B098(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_21690B0B0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_21690B48C(a2, a1).n128_u64[0];
  return result;
}

void sub_21690B0E0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_21690B0F4@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_21690B144;
  a1[2] = &stru_26C74E040;
  return result;
}

void sub_21690B144(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_21690B190(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_21690B358((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_21690B358((uint64_t)a1, a2);
      v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      v16 = sub_21690B358((uint64_t)a1, a2);
      v14 = v16;
      unint64_t v17 = 0;
      v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_21690B358(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange2f]");
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  double v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21690B3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21690B3F4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange2f]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_21690B358((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_21690B48C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21690A558(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_21690B544(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  double v4 = (__n128 *)sub_21690BA24(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_21690B52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21690B544(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74FE00;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21690B5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21690B614(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_21690B634(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21690B7AC(a1);
}

uint64_t sub_21690B644()
{
  return 1;
}

unint64_t sub_21690B64C(uint64_t **a1)
{
  return sub_21690B804((uint64_t)&v2, *a1);
}

BOOL sub_21690B674(void **a1, uint64_t *a2)
{
  return sub_216900268(*a1, *a2);
}

BOOL sub_21690B680(void **a1, uint64_t a2)
{
  return sub_216900268(*a1, a2);
}

uint64_t sub_21690B68C()
{
  return 0;
}

void *sub_21690B698(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_21690BA0C);
  return a2;
}

void *sub_21690B6EC()
{
  return &unk_26C74E028;
}

uint64_t sub_21690B6F8()
{
  return 1;
}

void *sub_21690B700()
{
  return &unk_26C74C660;
}

uint64_t sub_21690B70C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_21690B714(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_21690B720(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217457105 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21690B75C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E028, a2, a3);
}

void *sub_21690B780()
{
  return &unk_26C74E028;
}

uint64_t sub_21690B78C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690B794@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74FE00;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_21690B7AC(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_21690B804(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      double v4 = v3 + 4;
      sub_21690B87C((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_21690B87C(uint64_t a1, float *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_21690B8FC((uint64_t)&v5, a2, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_21690B8FC(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  if (*a2 == 0.0) {
    float v3 = 0.0;
  }
  uint64_t v4 = LODWORD(v3);
  if (a2[1] == 0.0) {
    float v5 = 0.0;
  }
  else {
    float v5 = a2[1];
  }
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v5) + ((LODWORD(v5) + v4 + (LODWORD(v5) + v4) * ((unint64_t)LODWORD(v5) + v4)) >> 1)));
  if (*(unsigned char *)(a1 + 8)) {
    v6 += (*(void *)a1 + v6 + (*(void *)a1 + v6) * (*(void *)a1 + v6)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return sub_2168FB210(a1, a3);
}

uint64_t sub_21690B970(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    float v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)float v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_21690B7AC(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_21690BA0C(void **a1, void *a2)
{
  float v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_21690BA24(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21690B970((_OWORD **)a1);
}

void sub_21690BAB8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  float v3 = (unint64_t *)sub_21690BC38(a1);
  sub_21690BCCC((uint64_t)v12, *v3);
  uint64_t v4 = (float32x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_21690C14C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    char v8 = &v4[3 * v5];
    unint64_t v9 = v13;
    do
    {
      float64x2_t v10 = vcvtq_f64_f32(v4[1]);
      float64x2_t v11 = vcvtq_f64_f32(v4[2]);
      *unint64_t v9 = vcvtq_f64_f32(*v4);
      v9[1] = v10;
      v9[2] = v11;
      v4 += 3;
      v9 += 3;
    }
    while (v4 != v8);
  }
  sub_21690BD64(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_21690BB60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21690BB78(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  float v3 = (unint64_t *)sub_21690C998(a1);
  sub_21690CA2C((uint64_t)v11, *v3);
  uint64_t v4 = (float64x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_21690CE64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    char v8 = &v4[3 * v5];
    unint64_t v9 = v12;
    do
    {
      float32x2_t v10 = vcvt_f32_f64(v4[2]);
      *unint64_t v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v4), v4[1]);
      *(float32x2_t *)v9[1].f32 = v10;
      v4 += 3;
      unint64_t v9 = (float32x4_t *)((char *)v9 + 24);
    }
    while (v4 != v8);
  }
  sub_21690CAB0(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_21690BC20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21690BC38(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21690BDA8(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21690BDE0, (uint64_t)&stru_26C74DFF8);
  }
}

uint64_t sub_21690BCCC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  v5[1] = xmmword_217412860;
  _OWORD v5[2] = vdupq_n_s64(0xC7EFFFFFE0000000);
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_21690BE7C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_21690BD4C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_21690BD64@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_21690C1F4(a2, a1).n128_u64[0];
  return result;
}

void sub_21690BD94(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21690BDA8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 32) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DFF8);
  }
  else {
    return 0;
  }
}

double sub_21690BDE0@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_21690BE30;
  a1[2] = &stru_26C74DFF8;
  return result;
}

void sub_21690BE30(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_21690BE7C(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float32x2_t v10 = sub_21690C0A8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  long long v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8);
                  long long v14 = *(_OWORD *)(v9 + v11 * 8 + 32);
                  *((_OWORD *)v12 + 1) = *(_OWORD *)(v9 + v11 * 8 + 16);
                  *((_OWORD *)v12 + 2) = v14;
                  *(_OWORD *)long long v12 = v13;
                  v11 += 6;
                }
                while (6 * v3 != v11);
              }
            }
            uint64_t v15 = *a3;
            uint64_t v16 = 6 * v3;
            do
            {
              unint64_t v17 = &v7[v16];
              long long v18 = *v15;
              long long v19 = v15[2];
              *((_OWORD *)v17 + 1) = v15[1];
              *((_OWORD *)v17 + 2) = v19;
              *(_OWORD *)unint64_t v17 = v18;
              v16 += 6;
            }
            while (6 * a2 != v16);
          }
          char v20 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v27 = a2;
      }
      else {
        unint64_t v27 = *a1;
      }
      v28 = sub_21690C0A8((uint64_t)a1, a2);
      char v20 = v28;
      if (v27)
      {
        uint64_t v29 = 48 * v27;
        long long v30 = v28;
        do
        {
          long long v31 = *(_OWORD *)v7;
          long long v32 = *((_OWORD *)v7 + 2);
          *((_OWORD *)v30 + 1) = *((_OWORD *)v7 + 1);
          *((_OWORD *)v30 + 2) = v32;
          *(_OWORD *)long long v30 = v31;
          v30 += 6;
          v7 += 6;
          v29 -= 48;
        }
        while (v29);
      }
      if (v3 < a2)
      {
        v33 = *a3;
        uint64_t v34 = 6 * v3;
        do
        {
          v35 = &v28[v34];
          long long v36 = *v33;
          long long v37 = v33[2];
          *((_OWORD *)v35 + 1) = v33[1];
          *((_OWORD *)v35 + 2) = v37;
          *(_OWORD *)v35 = v36;
          v34 += 6;
        }
        while (6 * a2 != v34);
      }
      goto LABEL_31;
    }
    if (a2 < 0x555555555555556)
    {
      uint64_t v21 = sub_21690C0A8((uint64_t)a1, a2);
      char v20 = v21;
      uint64_t v22 = 0;
      long long v23 = *a3;
      do
      {
        long long v24 = &v21[v22];
        long long v25 = *v23;
        long long v26 = v23[2];
        *((_OWORD *)v24 + 1) = v23[1];
        *((_OWORD *)v24 + 2) = v26;
        *(_OWORD *)long long v24 = v25;
        v22 += 6;
      }
      while (6 * a2 != v22);
LABEL_31:
      if (v20 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v20;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_21690C0A8(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange3d]");
  if (a2 > 0x555555555555554) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 48 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21690C134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21690C14C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange3d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_21690C0A8((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 48 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[2];
          v11[1] = v6[1];
          __n128 v11[2] = v13;
          _OWORD *v11 = v12;
          v11 += 3;
          v6 += 3;
          v10 -= 48;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_21690C1F4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21690C2AC(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_21690C2E4(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  uint64_t v4 = (__n128 *)sub_21690C904(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_21690C294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21690C2AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 33) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E010);
  }
  else {
    return 0;
  }
}

void *sub_21690C2E4(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74FEB8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21690C378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21690C3B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_21690C3D4(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21690C54C(a1);
}

uint64_t sub_21690C3E4()
{
  return 1;
}

unint64_t sub_21690C3EC(uint64_t **a1)
{
  return sub_21690C5A4((uint64_t)&v2, *a1);
}

BOOL sub_21690C414(uint64_t **a1, uint64_t *a2)
{
  return sub_21690C730(*a1, *a2);
}

BOOL sub_21690C420(uint64_t **a1, uint64_t a2)
{
  return sub_21690C730(*a1, a2);
}

uint64_t sub_21690C42C()
{
  return 0;
}

void *sub_21690C438(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_21690C8EC);
  return a2;
}

void *sub_21690C48C()
{
  return &unk_26C74E010;
}

uint64_t sub_21690C498()
{
  return 1;
}

void *sub_21690C4A0()
{
  return &unk_26C74C670;
}

uint64_t sub_21690C4AC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_21690C4B4(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_21690C4C0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174570C8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21690C4FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E010, a2, a3);
}

void *sub_21690C520()
{
  return &unk_26C74E010;
}

uint64_t sub_21690C52C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690C534@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74FEB8;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_21690C54C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_21690C5A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 6;
      sub_21690C61C((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_21690C61C(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_21690C69C((uint64_t)&v5, a2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_21690C69C(uint64_t a1, double *a2, double *a3)
{
  uint64_t v7 = 0;
  char v8 = 0;
  sub_2168F4C18((uint64_t)&v7, a2, a2 + 1, a2 + 2);
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v7);
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_2168F7E34(a1, a3);
}

BOOL sub_21690C730(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (double *)a1[4];
  uint64_t v7 = *(double **)(a2 + 32);
  uint64_t v8 = 48 * v5 - 48;
  do
  {
    BOOL result = sub_21690C7E4(v6, v7);
    if (!result) {
      break;
    }
    v6 += 6;
    v7 += 6;
    uint64_t v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

BOOL sub_21690C7E4(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t sub_21690C850(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_21690C54C(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_21690C8EC(long long **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_21690C904(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21690C850((_OWORD **)a1);
}

uint64_t sub_21690C998(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21690C2AC(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21690CAF4, (uint64_t)&stru_26C74E010);
  }
}

uint64_t sub_21690CA2C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v5 = xmmword_217456E40;
  uint64_t v6 = 0x80000000800000;
  sub_2168F845C((void *)a1);
  uint64_t v7 = &v5;
  sub_21690CB90((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_21690CA98(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_21690CAB0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_21690CF0C(a2, a1).n128_u64[0];
  return result;
}

void sub_21690CAE0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_21690CAF4@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_21690CB44;
  a1[2] = &stru_26C74E010;
  return result;
}

void sub_21690CB44(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_21690CB90(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_21690CDBC((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  long long v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8);
                  __n128 v12[2] = *(void *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)long long v12 = v13;
                  v11 += 3;
                }
                while (3 * v3 != v11);
              }
            }
            long long v14 = *a3;
            uint64_t v15 = 3 * v3;
            do
            {
              uint64_t v16 = &v7[v15];
              long long v17 = *v14;
              v16[2] = *((void *)v14 + 2);
              *(_OWORD *)uint64_t v16 = v17;
              v15 += 3;
            }
            while (3 * a2 != v15);
          }
          long long v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      long long v25 = sub_21690CDBC((uint64_t)a1, a2);
      long long v18 = v25;
      if (v24)
      {
        uint64_t v26 = 24 * v24;
        unint64_t v27 = v25;
        do
        {
          long long v28 = *(_OWORD *)v7;
          v27[2] = v7[2];
          *(_OWORD *)unint64_t v27 = v28;
          v27 += 3;
          v7 += 3;
          v26 -= 24;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        uint64_t v29 = *a3;
        uint64_t v30 = 3 * v3;
        do
        {
          long long v31 = &v25[v30];
          long long v32 = *v29;
          v31[2] = *((void *)v29 + 2);
          *(_OWORD *)long long v31 = v32;
          v30 += 3;
        }
        while (3 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0xAAAAAAAAAAAAAABLL)
    {
      long long v19 = sub_21690CDBC((uint64_t)a1, a2);
      long long v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = &v19[v20];
        long long v23 = *v21;
        v22[2] = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        v20 += 3;
      }
      while (3 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_21690CDBC(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfRange3f]");
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21690CE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21690CE64(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfRange3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfRange3f]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_21690CDBC((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 24 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          __n128 v11[2] = *((void *)v6 + 2);
          *(_OWORD *)uint64_t v11 = v12;
          v11 += 3;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v10 -= 24;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_21690CF0C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_21690BDA8(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_21690CFC4(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_21690D5E4(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  __n128 *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_21690CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21690CFC4(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74FF70;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21690D058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21690D094(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_21690D0B4(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21690D22C(a1);
}

uint64_t sub_21690D0C4()
{
  return 1;
}

unint64_t sub_21690D0CC(uint64_t **a1)
{
  return sub_21690D284((uint64_t)&v2, *a1);
}

BOOL sub_21690D0F4(uint64_t **a1, uint64_t *a2)
{
  return sub_21690D410(*a1, *a2);
}

BOOL sub_21690D100(uint64_t **a1, uint64_t a2)
{
  return sub_21690D410(*a1, a2);
}

uint64_t sub_21690D10C()
{
  return 0;
}

void *sub_21690D118(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_21690D5CC);
  return a2;
}

void *sub_21690D16C()
{
  return &unk_26C74DFF8;
}

uint64_t sub_21690D178()
{
  return 1;
}

void *sub_21690D180()
{
  return &unk_26C74C680;
}

uint64_t sub_21690D18C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_21690D194(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_21690D1A0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021745708BLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21690D1DC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFF8, a2, a3);
}

void *sub_21690D200()
{
  return &unk_26C74DFF8;
}

uint64_t sub_21690D20C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690D214@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74FF70;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_21690D22C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_21690D284(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 6;
      sub_21690D2FC((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_21690D2FC(uint64_t a1, float *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_21690D37C((uint64_t)&v5, a2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_21690D37C(uint64_t a1, float *a2, float *a3)
{
  uint64_t v7 = 0;
  char v8 = 0;
  sub_2168F4850((uint64_t)&v7, a2, a2 + 1, a2 + 2);
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v7);
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_2168F77A0(a1, a3);
}

BOOL sub_21690D410(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (float *)a1[4];
  uint64_t v7 = *(float **)(a2 + 32);
  uint64_t v8 = 24 * v5 - 24;
  do
  {
    BOOL result = sub_21690D4C4(v6, v7);
    if (!result) {
      break;
    }
    v6 += 6;
    v7 += 6;
    uint64_t v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

BOOL sub_21690D4C4(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4] && a1[5] == a2[5];
}

uint64_t sub_21690D530(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_21690D22C(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_21690D5CC(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_21690D5E4(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21690D530((_OWORD **)a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217457444 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint64_t v9 = operator new(0x238uLL);
      sub_21690F5B8(v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (void *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          long long v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        long long v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>"
              "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_21690D85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::DeleteInstance()
{
  for (uint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
        result;
        uint64_t result = v1)
  {
    uint64_t v1 = result;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == result)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v2();
    }
    sched_yield();
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::aapl_vt_castRegistry_init(pxrInternal__aapl__pxrReserved__ *this)
{
  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance)) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0) {
    return (*(uint64_t (**)(void))(v2 + 112))();
  }
  else {
    return *(unsigned __int8 *)(v2 + 21) != 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetShapeData(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 128))();
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 136))();
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 160))();
  }
  else {
    return MEMORY[0x263F8C288];
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 120))();
  }
  else {
    return MEMORY[0x263F8C288];
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetType(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, char *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3) {
    return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C288], a2, a3);
  }
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))(v5 + 152))(this);
  }
  else {
    uint64_t v6 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)v5, a2, a3);
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v6)
  {
    v14[0] = "vt/value.cpp";
    v14[1] = "GetType";
    v14[2] = 394;
    v14[3] = "TfType pxrInternal__aapl__pxrReserved__::VtValue::GetType() const";
    char v15 = 0;
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      uint64_t v8 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 160))(this);
    }
    else {
      uint64_t v8 = MEMORY[0x263F8C288];
    }
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"Returning unknown type for VtValue with unregistered C++ type %s", v9, v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return v6;
}

void sub_21690DBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 4) != 0)
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(this, a2, a3);
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
    if (*(char *)(TypeName + 23) < 0)
    {
      sub_216778F24((unsigned char *)a4, *(void **)TypeName, *(void *)(TypeName + 8));
    }
    else
    {
      long long v9 = *(_OWORD *)TypeName;
      *(void *)(a4 + 16) = *(void *)(TypeName + 16);
      *(_OWORD *)a4 = v9;
    }
  }
  else
  {
    if (v5) {
      uint64_t v6 = (*(uint64_t (**)(void))((v5 & 0xFFFFFFFFFFFFFFF8) + 160))();
    }
    else {
      uint64_t v6 = MEMORY[0x263F8C288];
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled(v7, a4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CanHash(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 1;
  }
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0) {
    return (*(uint64_t (**)(void))(v2 + 48))();
  }
  else {
    return *(unsigned __int8 *)(v2 + 22) != 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetHash(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 56))();
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, void *a3@<X8>)
{
  _OWORD v10[2] = *MEMORY[0x263EF8340];
  sub_2168EE4C4(v10, this);
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 160))(a2);
  }
  else {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)MEMORY[0x263F8C288];
  }
  uint64_t v8 = sub_2168EE0D4((pxrInternal__aapl__pxrReserved__::VtValue *)v10, v7);
  sub_2168EE4C4(a3, v8);
  return sub_2168EE084((uint64_t)v10);
}

void sub_21690DD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, void *a3@<X8>)
{
  v8[2] = *MEMORY[0x263EF8340];
  sub_2168EE4C4(v8, this);
  uint64_t v6 = sub_2168EE0D4((pxrInternal__aapl__pxrReserved__::VtValue *)v8, a2);
  sub_2168EE4C4(a3, v6);
  return sub_2168EE084((uint64_t)v8);
}

void sub_21690DE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }

  sub_21690DE94(v4, a1, a2, a3);
}

void sub_21690DE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v7 = a1 + 8;
  sub_21691BF54(v16, (uint64_t)&v32, (uint64_t)&v31);
  long long v8 = *(_OWORD *)v16;
  uint64_t v9 = v17;
  v16[0] = 0;
  v16[1] = 0;
  long long v22 = *(_OWORD *)v18;
  uint64_t v10 = v19;
  uint64_t v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  uint64_t v24 = a4;
  *(_OWORD *)long long v25 = v8;
  uint64_t v26 = v9;
  v20[1] = 0;
  uint64_t v21 = 0;
  v20[0] = 0;
  *(_OWORD *)__p = v22;
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  uint64_t v28 = v10;
  uint64_t v29 = a4;
  sub_21691B718(v7, (long long *)v25, 0, (uint64_t)v30);
  int v11 = v30[16];
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v17) < 0)
  {
    operator delete(v16[0]);
    if (v11) {
      return;
    }
  }
  else if (v11)
  {
    return;
  }
  v25[0] = "vt/value.cpp";
  v25[1] = "Register";
  uint64_t v26 = 141;
  __p[0] = "void pxrInternal__aapl__pxrReserved__::Vt_CastRegistry::Register(const type_info &, const type_info &, VtValu"
           "e (*)(const VtValue &))";
  LOBYTE(__p[1]) = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
  int v12 = SHIBYTE(v21);
  char v13 = (void **)v20[0];
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v16);
  if (v12 >= 0) {
    int v14 = v20;
  }
  else {
    int v14 = v13;
  }
  if (v17 >= 0) {
    char v15 = v16;
  }
  else {
    char v15 = (void **)v16[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 1, (pxrInternal__aapl__pxrReserved__ *)"VtValue cast already registered from '%s' to '%s'.  New cast will be ignored.", (const char *)v14, (const char *)v15);
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
}

void sub_21690E048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(pxrInternal__aapl__pxrReserved__::VtValue *this@<X0>, std::type_info *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }

  sub_21690E104(v5, (uint64_t)this, a2, a3);
}

void sub_21690E104(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a3[1];
  if (v6)
  {
    uint64_t v9 = (*(uint64_t (**)(void *))((v6 & 0xFFFFFFFFFFFFFFF8) + 160))(a3);
    uint64_t v16 = a2;
    uint64_t v17 = v9;
    sub_21691BF54(v11, (uint64_t)&v17, (uint64_t)&v16);
    sub_21691BFBC(a1 + 8, (long long *)v11, v15);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if ((v15[0] || v15[1] != a1 + 24) && (uint64_t v10 = *(void (**)(void *))(v15[0] + 56)) != 0) {
      v10(a3);
    }
    else {
      a4[1] = 0;
    }
  }
  else
  {
    sub_2168EE4C4(a4, a3);
  }
}

void sub_21690E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const std::type_info *a3)
{
  if (!strcmp((const char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  }
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }

  return sub_21690E294(v5, (uint64_t)this, (uint64_t)a2);
}

BOOL sub_21690E294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t v4 = a1 + 8;
  sub_21691BF54(v9, (uint64_t)&v15, (uint64_t)&v14);
  sub_21691BFBC(v4, (long long *)v9, v13);
  unint64_t v6 = v13[0];
  unint64_t v5 = v13[1];
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v6) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 == a1 + 24;
  }
  return !v7;
}

void sub_21690E320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, std::type_info *a2, char *a3)
{
  v24[2] = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)this + 1);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = a2->__type_name;
  if (((v5 >> 2) & 1) != ((type_name >> 2) & 1))
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(this, a2, a3);
    if (Type != pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)a2, v15, v16))return 0; {
    uint64_t v17 = *((void *)this + 1);
    }
    char v18 = (v17 & 4) != 0 ? this : (pxrInternal__aapl__pxrReserved__::VtValue *)a2;
    uint64_t v19 = (*(uint64_t (**)(void))((*((void *)v18 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))();
    if (!v19) {
      return 0;
    }
    char v13 = (std::type_info *)v19;
    if ((v17 & 4) != 0) {
      char v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)a2;
    }
    else {
      char v12 = this;
    }
    int v11 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *, std::type_info *))((*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 72);
    goto LABEL_12;
  }
  if ((v5 & 4 & type_name) != 0)
  {
    uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(this, a2, a3);
    if (v20 == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)a2, v21, v22))
    {
      (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::VtValue *))((*((void *)this + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 176))(v24, this);
      (*(void (**)(void *__return_ptr, std::type_info *))((a2->__type_name & 0xFFFFFFFFFFFFFFF8) + 176))(v23, a2);
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v24, v23);
      sub_2168EE084((uint64_t)v23);
      sub_2168EE084((uint64_t)v24);
      return v9;
    }
    return 0;
  }
  if (!v5)
  {
    uint64_t v7 = MEMORY[0x263F8C288];
    if (type_name) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v8 = MEMORY[0x263F8C288];
    goto LABEL_8;
  }
  uint64_t v7 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 160))(this);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = a2->__type_name;
  if (!type_name) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v8 = (*(uint64_t (**)(std::type_info *))((type_name & 0xFFFFFFFFFFFFFFF8) + 160))(a2);
LABEL_8:
  if (strcmp((const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return 0;
  }
  int v11 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *, std::type_info *))((*((void *)this + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 64);
  char v12 = this;
  char v13 = a2;
LABEL_12:

  return v11(v12, v13);
}

void sub_21690E550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 96))(a2, result);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetPythonObject(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return (*(uint64_t (**)(void))((v1 & 0xFFFFFFFFFFFFFFF8) + 88))();
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 4) != 0) {
    return (*(uint64_t (**)(void))((v2 & 0xFFFFFFFFFFFFFFF8) + 144))();
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_FailGet(uint64_t a1, void (*a2)(void **__return_ptr), uint64_t a3)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v30 = "vt/value.cpp";
    uint64_t v31 = "_FailGet";
    uint64_t v32 = 576;
    v33 = "const void *pxrInternal__aapl__pxrReserved__::VtValue::_FailGet(Vt_DefaultValueHolder (*)(), const std::type_info &) const";
    char v34 = 0;
    unint64_t v6 = v26;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v26);
    if (v27 < 0) {
      unint64_t v6 = (void **)v26[0];
    }
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 160))(a1);
    }
    else {
      uint64_t v8 = MEMORY[0x263F8C288];
    }
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v25 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to get value of type '%s' from VtValue holding '%s'", (const char *)v6, (const char *)v10);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v30 = "vt/value.cpp";
    uint64_t v31 = "_FailGet";
    uint64_t v32 = 571;
    v33 = "const void *pxrInternal__aapl__pxrReserved__::VtValue::_FailGet(Vt_DefaultValueHolder (*)(), const std::type_info &) const";
    char v34 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v26);
    if (v27 >= 0) {
      uint64_t v9 = v26;
    }
    else {
      uint64_t v9 = (void **)v26[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to get value of type '%s' from empty VtValue.", (const char *)v9);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  sub_216851EE4((uint64_t)&v28, "Vt", "VtValue _FindOrCreateDefaultValue");
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E6F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E6F0))
  {
    qword_267B8E6E8 = 0;
    qword_267B8E6E0 = 0;
    qword_267B8E6D8 = (uint64_t)&qword_267B8E6E0;
    __cxa_atexit((void (*)(void *))sub_21691C0A0, &qword_267B8E6D8, &dword_216758000);
    __cxa_guard_release(&qword_267B8E6F0);
  }
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v26);
LABEL_20:
  char v11 = 8 * (&dword_267B8E6F8 & 3);
  int v12 = *(_DWORD *)((unint64_t)&dword_267B8E6F8 & 0xFFFFFFFFFFFFFFFCLL) & ~(255 << v11);
  unsigned int v13 = v12 | (1 << v11);
  while (1)
  {
    int v14 = v12;
    atomic_compare_exchange_strong((atomic_uint *volatile)((unint64_t)&dword_267B8E6F8 & 0xFFFFFFFFFFFFFFFCLL), (unsigned int *)&v14, v13);
    if (v14 == v12) {
      break;
    }
    if (*(_DWORD *)((unint64_t)&dword_267B8E6F8 & 0xFFFFFFFFFFFFFFFCLL) != v12)
    {
      sched_yield();
      goto LABEL_20;
    }
  }
  uint64_t v15 = (uint64_t *)sub_21678C2D8((uint64_t)&qword_267B8E6D8, (const void **)v26);
  if (v15 == &qword_267B8E6E0)
  {
    __dmb(0xBu);
    LOBYTE(dword_267B8E6F8) = 0;
    a2(__p);
    if (strcmp((const char *)(*(void *)(v25 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      uint64_t v30 = "vt/value.cpp";
      uint64_t v31 = "_FindOrCreateDefaultValue";
      uint64_t v32 = 543;
      v33 = "const void *pxrInternal__aapl__pxrReserved__::_FindOrCreateDefaultValue(const std::type_info &, Vt_DefaultVa"
            "lueHolder (*)())";
      char v34 = 0;
      int v35 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v30, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v17, "TfSafeTypeCompare(newValue.GetType(), type)");
    }
LABEL_27:
    char v18 = 8 * (&dword_267B8E6F8 & 3);
    int v19 = *(_DWORD *)((unint64_t)&dword_267B8E6F8 & 0xFFFFFFFFFFFFFFFCLL) & ~(255 << v18);
    unsigned int v20 = v19 | (1 << v18);
    while (1)
    {
      int v21 = v19;
      atomic_compare_exchange_strong((atomic_uint *volatile)((unint64_t)&dword_267B8E6F8 & 0xFFFFFFFFFFFFFFFCLL), (unsigned int *)&v21, v20);
      if (v21 == v19) {
        break;
      }
      if (*(_DWORD *)((unint64_t)&dword_267B8E6F8 & 0xFFFFFFFFFFFFFFFCLL) != v19)
      {
        sched_yield();
        goto LABEL_27;
      }
    }
    uint64_t v16 = *((void *)sub_21691C17C((uint64_t **)&qword_267B8E6D8, (const void **)v26, (uint64_t)v26, (uint64_t)__p) + 7);
    __dmb(0xBu);
    LOBYTE(dword_267B8E6F8) = 0;
    ((void (*)(void *))__p[1])(__p[0]);
  }
  else
  {
    uint64_t v16 = v15[7];
    __dmb(0xBu);
    LOBYTE(dword_267B8E6F8) = 0;
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  while (v29--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v28);
  return v16;
}

void sub_21690E98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void (*a12)(void *), int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_21684E6B8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::VtStreamOut(uint64_t *a1, void *a2)
{
  LOBYTE(v9) = 91;
  sub_216779180(a2, (uint64_t)&v9, 1);
  uint64_t v6 = a1[1];
  uint64_t v9 = *a1;
  uint64_t v10 = v6;
  if (v9 != v6)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(sub_21690EAF4(&v9, v4, v5) + 8);
      if (v7) {
        (*(void (**)(void))((v7 & 0xFFFFFFFFFFFFFFF8) + 96))();
      }
      sub_21690EB74(&v9);
      if (v9 == v10) {
        break;
      }
      sub_216779180(a2, (uint64_t)", ", 2);
    }
  }
  LOBYTE(v9) = 93;
  sub_216779180(a2, (uint64_t)&v9, 1);
  return a2;
}

uint64_t sub_21690EAF4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    _OWORD v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::V"
            "tValue>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21690EB6C()
{
}

void *sub_21690EB74(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::VtValue>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4i>::Invoke@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4i>();
  uint64_t v4 = v3;
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = v2;
  result[1] = v4;
  *a1 = result;
  a1[1] = sub_21691C2A8;
  a1[2] = &stru_26C74C7A0;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3i>::Invoke@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3i>();
  int v4 = v3;
  uint64_t result = operator new(0xCuLL);
  *(void *)uint64_t result = v2;
  result[2] = v4;
  *a1 = result;
  a1[1] = sub_21691C2B4;
  a1[2] = &stru_26C74C760;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2i>::Invoke@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2i>();
  uint64_t result = operator new(8uLL);
  *uint64_t result = v2;
  *a1 = result;
  a1[1] = sub_21691C2C0;
  a1[2] = &stru_26C74C720;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4h>::Invoke@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4h>();
  uint64_t result = operator new(8uLL);
  *uint64_t result = v2;
  *a1 = result;
  a1[1] = sub_21691C2CC;
  a1[2] = &stru_26C74C790;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3h>::Invoke@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3h>();
  uint64_t result = operator new(6uLL);
  result[2] = WORD2(v2);
  *(_DWORD *)uint64_t result = v2;
  *a1 = result;
  a1[1] = sub_21691C2D8;
  a1[2] = &stru_26C74C750;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2h>::Invoke@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2h>();
  uint64_t result = operator new(4uLL);
  *uint64_t result = v2;
  *a1 = result;
  a1[1] = sub_21691C2E4;
  a1[2] = &stru_26C74C710;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4f>::Invoke@<X0>(void *a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4f>();
  int v3 = LODWORD(v2);
  int v5 = v4;
  int v7 = v6;
  int v9 = v8;
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = v3;
  result[1] = v5;
  result[2] = v7;
  result[3] = v9;
  *a1 = result;
  a1[1] = sub_21691C2F0;
  a1[2] = &stru_26C74C780;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3f>::Invoke@<X0>(void *a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  int v3 = LODWORD(v2);
  int v5 = v4;
  int v7 = v6;
  uint64_t result = operator new(0xCuLL);
  *uint64_t result = v3;
  result[1] = v5;
  result[2] = v7;
  *a1 = result;
  a1[1] = sub_21691C2FC;
  a1[2] = &stru_26C74C740;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2f>::Invoke@<X0>(void *a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2f>();
  int v3 = LODWORD(v2);
  int v5 = v4;
  uint64_t result = operator new(8uLL);
  *uint64_t result = v3;
  result[1] = v5;
  *a1 = result;
  a1[1] = sub_21691C308;
  a1[2] = &stru_26C74C700;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4d>();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = (double *)operator new(0x20uLL);
  *uint64_t result = v2;
  *((void *)result + 1) = v4;
  *((void *)result + 2) = v6;
  *((void *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_21691C314;
  a1[2] = (double *)&stru_26C74C770;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3d>();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t result = (double *)operator new(0x18uLL);
  *uint64_t result = v2;
  *((void *)result + 1) = v4;
  *((void *)result + 2) = v6;
  *a1 = result;
  a1[1] = (double *)sub_21691C320;
  a1[2] = (double *)&stru_26C74C730;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2d>();
  uint64_t v4 = v3;
  uint64_t result = (double *)operator new(0x10uLL);
  *uint64_t result = v2;
  *((void *)result + 1) = v4;
  *a1 = result;
  a1[1] = (double *)sub_21691C32C;
  a1[2] = (double *)&stru_26C74C6F0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::Invoke@<D0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((uint64_t)v6);
  double v2 = operator new(0x40uLL);
  long long v3 = v6[1];
  *double v2 = v6[0];
  v2[1] = v3;
  double result = *(double *)&v7;
  long long v5 = v8;
  v2[2] = v7;
  v2[3] = v5;
  *a1 = v2;
  a1[1] = sub_21691C338;
  a1[2] = &stru_26C74C5B0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3f>::Invoke@<D0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((uint64_t)v5);
  double v2 = operator new(0x24uLL);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *double v2 = v5[0];
  v2[1] = v4;
  *((_DWORD *)v2 + 8) = v6;
  *a1 = v2;
  a1[1] = sub_21691C344;
  a1[2] = &stru_26C74C590;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2f>::Invoke@<X0>(float **a1@<X8>)
{
  float v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2f>();
  int v4 = v3;
  int v6 = v5;
  int v8 = v7;
  double result = (float *)operator new(0x10uLL);
  *double result = v2;
  *((_DWORD *)result + 1) = v4;
  *((_DWORD *)result + 2) = v6;
  *((_DWORD *)result + 3) = v8;
  *a1 = result;
  a1[1] = (float *)sub_21691C350;
  a1[2] = (float *)&stru_26C74C580;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Invoke@<D0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t)v8);
  float v2 = operator new(0x80uLL);
  long long v3 = v12;
  v2[4] = v11;
  v2[5] = v3;
  long long v4 = v14;
  v2[6] = v13;
  v2[7] = v4;
  long long v5 = v8[1];
  *float v2 = v8[0];
  v2[1] = v5;
  double result = *(double *)&v9;
  long long v7 = v10;
  v2[2] = v9;
  v2[3] = v7;
  *a1 = v2;
  a1[1] = sub_21691C35C;
  a1[2] = &stru_26C74C5C0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Invoke@<Q0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((uint64_t)v5);
  float v2 = operator new(0x48uLL);
  long long v3 = v5[3];
  v2[2] = v5[2];
  v2[3] = v3;
  *((void *)v2 + 8) = v6;
  __n128 result = (__n128)v5[1];
  *float v2 = v5[0];
  v2[1] = result;
  *a1 = v2;
  a1[1] = sub_21691C368;
  a1[2] = &stru_26C74C5A0;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Invoke@<X0>(double **a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2d>();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  __n128 result = (double *)operator new(0x20uLL);
  *__n128 result = v2;
  *((void *)result + 1) = v4;
  *((void *)result + 2) = v6;
  *((void *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_21691C374;
  a1[2] = (double *)&stru_26C74C570;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuath>::Invoke@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuath>();
  __n128 result = operator new(8uLL);
  *__n128 result = v2;
  *a1 = result;
  a1[1] = sub_21691C380;
  a1[2] = &stru_26C74C610;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatf>::Invoke@<X0>(void *a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatf>();
  int v3 = LODWORD(v2);
  int v5 = v4;
  int v7 = v6;
  int v9 = v8;
  __n128 result = operator new(0x10uLL);
  *__n128 result = v3;
  result[1] = v5;
  result[2] = v7;
  result[3] = v9;
  *a1 = result;
  a1[1] = sub_21691C38C;
  a1[2] = &stru_26C74C600;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatd>::Invoke@<X0>(double **a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatd>();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  __n128 result = (double *)operator new(0x20uLL);
  *__n128 result = v2;
  *((void *)result + 1) = v4;
  *((void *)result + 2) = v6;
  *((void *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_21691C398;
  a1[2] = (double *)&stru_26C74C5F0;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuaternion>::Invoke@<X0>(double **a1@<X8>)
{
  double v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuaternion>();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  __n128 result = (double *)operator new(0x20uLL);
  *__n128 result = v2;
  *((void *)result + 1) = v4;
  *((void *)result + 2) = v6;
  *((void *)result + 3) = v8;
  *a1 = result;
  a1[1] = (double *)sub_21691C3A4;
  a1[2] = (double *)&stru_26C74C620;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfDualQuath>::Invoke@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuath>();
  uint64_t v4 = v3;
  __n128 result = operator new(0x10uLL);
  *__n128 result = v2;
  result[1] = v4;
  *a1 = result;
  a1[1] = sub_21691C3B0;
  a1[2] = &stru_26C74C4E0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfDualQuatf>::Invoke@<D0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatf>(v5);
  uint64_t v2 = operator new(0x20uLL);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *uint64_t v2 = v5[0];
  v2[1] = v4;
  *a1 = v2;
  a1[1] = sub_21691C3BC;
  a1[2] = &stru_26C74C4D0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfDualQuatd>::Invoke@<D0>(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatd>(v6);
  uint64_t v2 = operator new(0x40uLL);
  long long v3 = v6[1];
  *uint64_t v2 = v6[0];
  v2[1] = v3;
  double result = *(double *)&v7;
  long long v5 = v8;
  v2[2] = v7;
  v2[3] = v5;
  *a1 = v2;
  a1[1] = sub_21691C3C8;
  a1[2] = &stru_26C74C4C0;
  return result;
}

void *sub_21690F5B8(void *a1)
{
  *a1 = &unk_26C750038;
  sub_2169125BC((uint64_t)(a1 + 1), 8uLL, v6);
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance, (unint64_t)a1))
  {
    v6[0] = "tf/instantiateSingleton.h";
    v6[1] = "SetInstanceConstructed";
    _OWORD v6[2] = 56;
    v6[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Vt_CastRegistry]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  sub_21690F694();
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v3);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C750D28);
  return a1;
}

void sub_21690F680(_Unwind_Exception *a1, void *a2)
{
  sub_21691B558(v2, a2);
  _Unwind_Resume(a1);
}

void sub_21690F694()
{
  uint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v0, MEMORY[0x263F8C230], MEMORY[0x263F8C238], (uint64_t)sub_2169129FC);
  uint64_t v1 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v1, MEMORY[0x263F8C238], MEMORY[0x263F8C230], (uint64_t)sub_216912A4C);
  uint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v2, MEMORY[0x263F8C230], MEMORY[0x263F8C228], (uint64_t)sub_216912EA4);
  uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v3, MEMORY[0x263F8C228], MEMORY[0x263F8C230], (uint64_t)sub_216912EF4);
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v4, MEMORY[0x263F8C230], MEMORY[0x263F8C250], (uint64_t)sub_2169130C4);
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v5, MEMORY[0x263F8C250], MEMORY[0x263F8C230], (uint64_t)sub_216913114);
  uint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v6, MEMORY[0x263F8C230], MEMORY[0x263F8C278], (uint64_t)sub_2169132DC);
  uint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v7, MEMORY[0x263F8C278], MEMORY[0x263F8C230], (uint64_t)sub_21691332C);
  uint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v8, MEMORY[0x263F8C230], MEMORY[0x263F8C280], (uint64_t)sub_216913508);
  uint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v9, MEMORY[0x263F8C280], MEMORY[0x263F8C230], (uint64_t)sub_216913558);
  uint64_t v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v10, MEMORY[0x263F8C230], MEMORY[0x263F8C258], (uint64_t)sub_21691372C);
  uint64_t v11 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v11, MEMORY[0x263F8C258], MEMORY[0x263F8C230], (uint64_t)sub_21691377C);
  uint64_t v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v12, MEMORY[0x263F8C230], MEMORY[0x263F8C260], (uint64_t)sub_216913958);
  uint64_t v13 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v13, MEMORY[0x263F8C260], MEMORY[0x263F8C230], (uint64_t)sub_2169139A8);
  uint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v14, MEMORY[0x263F8C230], MEMORY[0x263F8C268], (uint64_t)sub_216913B7C);
  uint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v15, MEMORY[0x263F8C268], MEMORY[0x263F8C230], (uint64_t)sub_216913BC8);
  uint64_t v16 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v16) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v16, MEMORY[0x263F8C230], MEMORY[0x263F8C270], (uint64_t)sub_216913DA0);
  uint64_t v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v17, MEMORY[0x263F8C270], MEMORY[0x263F8C230], (uint64_t)sub_216913DEC);
  uint64_t v18 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v18, MEMORY[0x263F8C230], MEMORY[0x263F8C290], (uint64_t)sub_216913FBC);
  uint64_t v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v19, MEMORY[0x263F8C290], MEMORY[0x263F8C230], (uint64_t)sub_216914008);
  uint64_t v20 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v20) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v20, MEMORY[0x263F8C230], MEMORY[0x263F8C298], (uint64_t)sub_2169141E0);
  uint64_t v21 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v21) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v21, MEMORY[0x263F8C298], MEMORY[0x263F8C230], (uint64_t)sub_21691422C);
  uint64_t v22 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v22) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v22, MEMORY[0x263F8C230], (uint64_t)&stru_26C74C510, (uint64_t)sub_2169143FC);
  uint64_t v23 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v23, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C230], (uint64_t)sub_21691450C);
  uint64_t v24 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v24) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v24, MEMORY[0x263F8C230], MEMORY[0x263F8C248], (uint64_t)sub_216914824);
  uint64_t v25 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v25) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v25, MEMORY[0x263F8C248], MEMORY[0x263F8C230], (uint64_t)sub_216914884);
  uint64_t v26 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v26) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v26, MEMORY[0x263F8C230], MEMORY[0x263F8C240], (uint64_t)sub_216914A84);
  uint64_t v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v27) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v27, MEMORY[0x263F8C240], MEMORY[0x263F8C230], (uint64_t)sub_216914AE4);
  uint64_t v28 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v28) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v28, MEMORY[0x263F8C238], MEMORY[0x263F8C228], (uint64_t)sub_216914CE4);
  uint64_t v29 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v29) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v29, MEMORY[0x263F8C228], MEMORY[0x263F8C238], (uint64_t)sub_216914D34);
  uint64_t v30 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v30) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v30, MEMORY[0x263F8C238], MEMORY[0x263F8C250], (uint64_t)sub_216914D84);
  uint64_t v31 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v31) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v31, MEMORY[0x263F8C250], MEMORY[0x263F8C238], (uint64_t)sub_216914E04);
  uint64_t v32 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v32) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v32, MEMORY[0x263F8C238], MEMORY[0x263F8C278], (uint64_t)sub_216914E88);
  uint64_t v33 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v33) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v33, MEMORY[0x263F8C278], MEMORY[0x263F8C238], (uint64_t)sub_216914ED8);
  uint64_t v34 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v34) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v34, MEMORY[0x263F8C238], MEMORY[0x263F8C280], (uint64_t)sub_216914F68);
  uint64_t v35 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v35) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v35, MEMORY[0x263F8C280], MEMORY[0x263F8C238], (uint64_t)sub_216914FEC);
  uint64_t v36 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v36) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v36, MEMORY[0x263F8C238], MEMORY[0x263F8C258], (uint64_t)sub_216915074);
  uint64_t v37 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v37) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v37, MEMORY[0x263F8C258], MEMORY[0x263F8C238], (uint64_t)sub_2169150C4);
  uint64_t v38 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v38) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v38, MEMORY[0x263F8C238], MEMORY[0x263F8C260], (uint64_t)sub_216915154);
  uint64_t v39 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v39) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v39, MEMORY[0x263F8C260], MEMORY[0x263F8C238], (uint64_t)sub_2169151D8);
  uint64_t v40 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v40) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v40, MEMORY[0x263F8C238], MEMORY[0x263F8C268], (uint64_t)sub_216915260);
  uint64_t v41 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v41) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v41, MEMORY[0x263F8C268], MEMORY[0x263F8C238], (uint64_t)sub_2169152AC);
  uint64_t v42 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v42) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v42, MEMORY[0x263F8C238], MEMORY[0x263F8C270], (uint64_t)sub_21691533C);
  uint64_t v43 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v43) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v43, MEMORY[0x263F8C270], MEMORY[0x263F8C238], (uint64_t)sub_2169153BC);
  uint64_t v44 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v44) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v44, MEMORY[0x263F8C238], MEMORY[0x263F8C290], (uint64_t)sub_216915444);
  uint64_t v45 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v45) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v45, MEMORY[0x263F8C290], MEMORY[0x263F8C238], (uint64_t)sub_216915490);
  uint64_t v46 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v46) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v46, MEMORY[0x263F8C238], MEMORY[0x263F8C298], (uint64_t)sub_216915520);
  uint64_t v47 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v47) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v47, MEMORY[0x263F8C298], MEMORY[0x263F8C238], (uint64_t)sub_2169155A0);
  uint64_t v48 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v48) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v48, MEMORY[0x263F8C238], (uint64_t)&stru_26C74C510, (uint64_t)sub_216915628);
  uint64_t v49 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v49) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v49, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C238], (uint64_t)sub_216915738);
  uint64_t v50 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v50) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v50, MEMORY[0x263F8C238], MEMORY[0x263F8C248], (uint64_t)sub_21691582C);
  uint64_t v51 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v51) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v51, MEMORY[0x263F8C248], MEMORY[0x263F8C238], (uint64_t)sub_216915880);
  uint64_t v52 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v52) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v52, MEMORY[0x263F8C238], MEMORY[0x263F8C240], (uint64_t)sub_216915968);
  uint64_t v53 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v53) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v53, MEMORY[0x263F8C240], MEMORY[0x263F8C238], (uint64_t)sub_2169159BC);
  uint64_t v54 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v54) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v54, MEMORY[0x263F8C228], MEMORY[0x263F8C250], (uint64_t)sub_216915AA8);
  uint64_t v55 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v55) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v55, MEMORY[0x263F8C250], MEMORY[0x263F8C228], (uint64_t)sub_216915B28);
  uint64_t v56 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v56) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v56, MEMORY[0x263F8C228], MEMORY[0x263F8C278], (uint64_t)sub_216915BAC);
  uint64_t v57 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v57) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v57, MEMORY[0x263F8C278], MEMORY[0x263F8C228], (uint64_t)sub_216915BFC);
  uint64_t v58 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v58) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v58, MEMORY[0x263F8C228], MEMORY[0x263F8C280], (uint64_t)sub_216915C8C);
  uint64_t v59 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v59) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v59, MEMORY[0x263F8C280], MEMORY[0x263F8C228], (uint64_t)sub_216915D10);
  uint64_t v60 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v60) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v60, MEMORY[0x263F8C228], MEMORY[0x263F8C258], (uint64_t)sub_216915D98);
  uint64_t v61 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v61) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v61, MEMORY[0x263F8C258], MEMORY[0x263F8C228], (uint64_t)sub_216915DE8);
  uint64_t v62 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v62) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v62, MEMORY[0x263F8C228], MEMORY[0x263F8C260], (uint64_t)sub_216915E78);
  uint64_t v63 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v63) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v63, MEMORY[0x263F8C260], MEMORY[0x263F8C228], (uint64_t)sub_216915EFC);
  uint64_t v64 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v64) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v64, MEMORY[0x263F8C228], MEMORY[0x263F8C268], (uint64_t)sub_216915F84);
  uint64_t v65 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v65) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v65, MEMORY[0x263F8C268], MEMORY[0x263F8C228], (uint64_t)sub_216915FD0);
  uint64_t v66 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v66) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v66, MEMORY[0x263F8C228], MEMORY[0x263F8C270], (uint64_t)sub_216916060);
  uint64_t v67 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v67) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v67, MEMORY[0x263F8C270], MEMORY[0x263F8C228], (uint64_t)sub_2169160E0);
  uint64_t v68 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v68) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v68, MEMORY[0x263F8C228], MEMORY[0x263F8C290], (uint64_t)sub_216916168);
  uint64_t v69 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v69) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v69, MEMORY[0x263F8C290], MEMORY[0x263F8C228], (uint64_t)sub_2169161B4);
  uint64_t v70 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v70) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v70, MEMORY[0x263F8C228], MEMORY[0x263F8C298], (uint64_t)sub_216916244);
  uint64_t v71 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v71) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v71, MEMORY[0x263F8C298], MEMORY[0x263F8C228], (uint64_t)sub_2169162C4);
  uint64_t v72 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v72) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v72, MEMORY[0x263F8C228], (uint64_t)&stru_26C74C510, (uint64_t)sub_21691634C);
  uint64_t v73 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v73) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v73, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C228], (uint64_t)sub_21691645C);
  uint64_t v74 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v74) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v74, MEMORY[0x263F8C228], MEMORY[0x263F8C248], (uint64_t)sub_2169164F0);
  uint64_t v75 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v75) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v75, MEMORY[0x263F8C248], MEMORY[0x263F8C228], (uint64_t)sub_216916544);
  uint64_t v76 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v76) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v76, MEMORY[0x263F8C228], MEMORY[0x263F8C240], (uint64_t)sub_2169165C8);
  uint64_t v77 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v77) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v77, MEMORY[0x263F8C240], MEMORY[0x263F8C228], (uint64_t)sub_21691661C);
  uint64_t v78 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v78) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v78, MEMORY[0x263F8C250], MEMORY[0x263F8C278], (uint64_t)sub_2169166A0);
  uint64_t v79 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v79) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v79, MEMORY[0x263F8C278], MEMORY[0x263F8C250], (uint64_t)sub_2169166F0);
  uint64_t v80 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v80) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v80, MEMORY[0x263F8C250], MEMORY[0x263F8C280], (uint64_t)sub_216916780);
  uint64_t v81 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v81) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v81, MEMORY[0x263F8C280], MEMORY[0x263F8C250], (uint64_t)sub_2169167D0);
  uint64_t v82 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v82) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v82, MEMORY[0x263F8C250], MEMORY[0x263F8C258], (uint64_t)sub_216916858);
  uint64_t v83 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v83) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v83, MEMORY[0x263F8C258], MEMORY[0x263F8C250], (uint64_t)sub_2169168A8);
  uint64_t v84 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v84) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v84, MEMORY[0x263F8C250], MEMORY[0x263F8C260], (uint64_t)sub_216916938);
  uint64_t v85 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v85) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v85, MEMORY[0x263F8C260], MEMORY[0x263F8C250], (uint64_t)sub_216916988);
  uint64_t v86 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v86) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v86, MEMORY[0x263F8C250], MEMORY[0x263F8C268], (uint64_t)sub_216916A10);
  uint64_t v87 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v87) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v87, MEMORY[0x263F8C268], MEMORY[0x263F8C250], (uint64_t)sub_216916A5C);
  uint64_t v88 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v88) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v88, MEMORY[0x263F8C250], MEMORY[0x263F8C270], (uint64_t)sub_216916AEC);
  uint64_t v89 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v89) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v89, MEMORY[0x263F8C270], MEMORY[0x263F8C250], (uint64_t)sub_216916B38);
  uint64_t v90 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v90) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v90, MEMORY[0x263F8C250], MEMORY[0x263F8C290], (uint64_t)sub_216916BC0);
  uint64_t v91 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v91) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v91, MEMORY[0x263F8C290], MEMORY[0x263F8C250], (uint64_t)sub_216916C0C);
  uint64_t v92 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v92) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v92, MEMORY[0x263F8C250], MEMORY[0x263F8C298], (uint64_t)sub_216916C9C);
  uint64_t v93 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v93) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v93, MEMORY[0x263F8C298], MEMORY[0x263F8C250], (uint64_t)sub_216916CE8);
  uint64_t v94 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v94) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v94, MEMORY[0x263F8C250], (uint64_t)&stru_26C74C510, (uint64_t)sub_216916D70);
  uint64_t v95 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v95) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v95, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C250], (uint64_t)sub_216916E7C);
  uint64_t v96 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v96) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v96, MEMORY[0x263F8C250], MEMORY[0x263F8C248], (uint64_t)sub_216916F70);
  uint64_t v97 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v97) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v97, MEMORY[0x263F8C248], MEMORY[0x263F8C250], (uint64_t)sub_216916FC4);
  uint64_t v98 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v98) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v98, MEMORY[0x263F8C250], MEMORY[0x263F8C240], (uint64_t)sub_2169170AC);
  uint64_t v99 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v99) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v99, MEMORY[0x263F8C240], MEMORY[0x263F8C250], (uint64_t)sub_216917100);
  uint64_t v100 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v100) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v100, MEMORY[0x263F8C278], MEMORY[0x263F8C280], (uint64_t)sub_2169171E8);
  uint64_t v101 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v101) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v101, MEMORY[0x263F8C280], MEMORY[0x263F8C278], (uint64_t)sub_216917268);
  uint64_t v102 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v102) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v102, MEMORY[0x263F8C278], MEMORY[0x263F8C258], (uint64_t)sub_2169172EC);
  uint64_t v103 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v103) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v103, MEMORY[0x263F8C258], MEMORY[0x263F8C278], (uint64_t)sub_21691733C);
  uint64_t v104 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v104) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v104, MEMORY[0x263F8C278], MEMORY[0x263F8C260], (uint64_t)sub_2169173D0);
  uint64_t v105 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v105) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v105, MEMORY[0x263F8C260], MEMORY[0x263F8C278], (uint64_t)sub_216917454);
  uint64_t v106 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v106) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v106, MEMORY[0x263F8C278], MEMORY[0x263F8C268], (uint64_t)sub_2169174DC);
  uint64_t v107 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v107) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v107, MEMORY[0x263F8C268], MEMORY[0x263F8C278], (uint64_t)sub_216917528);
  uint64_t v108 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v108) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v108, MEMORY[0x263F8C278], MEMORY[0x263F8C270], (uint64_t)sub_2169175BC);
  uint64_t v109 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v109) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v109, MEMORY[0x263F8C270], MEMORY[0x263F8C278], (uint64_t)sub_21691763C);
  uint64_t v110 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v110) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v110, MEMORY[0x263F8C278], MEMORY[0x263F8C290], (uint64_t)sub_2169176C4);
  uint64_t v111 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v111) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v111, MEMORY[0x263F8C290], MEMORY[0x263F8C278], (uint64_t)sub_216917710);
  uint64_t v112 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v112) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v112, MEMORY[0x263F8C278], MEMORY[0x263F8C298], (uint64_t)sub_2169177A4);
  uint64_t v113 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v113) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v113, MEMORY[0x263F8C298], MEMORY[0x263F8C278], (uint64_t)sub_216917824);
  uint64_t v114 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v114) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v114, MEMORY[0x263F8C278], (uint64_t)&stru_26C74C510, (uint64_t)sub_2169178AC);
  uint64_t v115 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v115) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v115, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C278], (uint64_t)sub_2169179BC);
  uint64_t v116 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v116) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v116, MEMORY[0x263F8C278], MEMORY[0x263F8C248], (uint64_t)sub_216917A50);
  uint64_t v117 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v117) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v117, MEMORY[0x263F8C248], MEMORY[0x263F8C278], (uint64_t)sub_216917AA4);
  uint64_t v118 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v118) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v118, MEMORY[0x263F8C278], MEMORY[0x263F8C240], (uint64_t)sub_216917B8C);
  uint64_t v119 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v119) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v119, MEMORY[0x263F8C240], MEMORY[0x263F8C278], (uint64_t)sub_216917BE0);
  uint64_t v120 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v120) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v120, MEMORY[0x263F8C280], MEMORY[0x263F8C258], (uint64_t)sub_216917CCC);
  uint64_t v121 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v121) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v121, MEMORY[0x263F8C258], MEMORY[0x263F8C280], (uint64_t)sub_216917D1C);
  uint64_t v122 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v122) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v122, MEMORY[0x263F8C280], MEMORY[0x263F8C260], (uint64_t)sub_216917DAC);
  uint64_t v123 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v123) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v123, MEMORY[0x263F8C260], MEMORY[0x263F8C280], (uint64_t)sub_216917DFC);
  uint64_t v124 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v124) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v124, MEMORY[0x263F8C280], MEMORY[0x263F8C268], (uint64_t)sub_216917E84);
  uint64_t v125 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v125) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v125, MEMORY[0x263F8C268], MEMORY[0x263F8C280], (uint64_t)sub_216917ED0);
  uint64_t v126 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v126) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v126, MEMORY[0x263F8C280], MEMORY[0x263F8C270], (uint64_t)sub_216917F60);
  uint64_t v127 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v127) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v127, MEMORY[0x263F8C270], MEMORY[0x263F8C280], (uint64_t)sub_216917FAC);
  uint64_t v128 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v128) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v128, MEMORY[0x263F8C280], MEMORY[0x263F8C290], (uint64_t)sub_216918034);
  uint64_t v129 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v129) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v129, MEMORY[0x263F8C290], MEMORY[0x263F8C280], (uint64_t)sub_216918080);
  uint64_t v130 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v130) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v130, MEMORY[0x263F8C280], MEMORY[0x263F8C298], (uint64_t)sub_216918110);
  uint64_t v131 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v131) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v131, MEMORY[0x263F8C298], MEMORY[0x263F8C280], (uint64_t)sub_21691815C);
  uint64_t v132 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v132) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v132, MEMORY[0x263F8C280], (uint64_t)&stru_26C74C510, (uint64_t)sub_2169181E4);
  uint64_t v133 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v133) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v133, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C280], (uint64_t)sub_2169182F0);
  uint64_t v134 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v134) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v134, MEMORY[0x263F8C280], MEMORY[0x263F8C248], (uint64_t)sub_216918384);
  uint64_t v135 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v135) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v135, MEMORY[0x263F8C248], MEMORY[0x263F8C280], (uint64_t)sub_2169183D8);
  uint64_t v136 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v136) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v136, MEMORY[0x263F8C280], MEMORY[0x263F8C240], (uint64_t)sub_2169184C0);
  uint64_t v137 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v137) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v137, MEMORY[0x263F8C240], MEMORY[0x263F8C280], (uint64_t)sub_216918514);
  uint64_t v138 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v138) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v138, MEMORY[0x263F8C258], MEMORY[0x263F8C260], (uint64_t)sub_2169185FC);
  uint64_t v139 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v139) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v139, MEMORY[0x263F8C260], MEMORY[0x263F8C258], (uint64_t)sub_21691867C);
  uint64_t v140 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v140) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v140, MEMORY[0x263F8C258], MEMORY[0x263F8C268], (uint64_t)sub_216918700);
  uint64_t v141 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v141) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v141, MEMORY[0x263F8C268], MEMORY[0x263F8C258], (uint64_t)sub_21691874C);
  uint64_t v142 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v142) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v142, MEMORY[0x263F8C258], MEMORY[0x263F8C270], (uint64_t)sub_2169187E4);
  uint64_t v143 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v143) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v143, MEMORY[0x263F8C270], MEMORY[0x263F8C258], (uint64_t)sub_216918860);
  uint64_t v144 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v144) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v144, MEMORY[0x263F8C258], MEMORY[0x263F8C290], (uint64_t)sub_2169188E8);
  uint64_t v145 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v145) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v145, MEMORY[0x263F8C290], MEMORY[0x263F8C258], (uint64_t)sub_216918934);
  uint64_t v146 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v146) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v146, MEMORY[0x263F8C258], MEMORY[0x263F8C298], (uint64_t)sub_2169189CC);
  uint64_t v147 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v147) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v147, MEMORY[0x263F8C298], MEMORY[0x263F8C258], (uint64_t)sub_216918A48);
  uint64_t v148 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v148) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v148, MEMORY[0x263F8C258], (uint64_t)&stru_26C74C510, (uint64_t)sub_216918AD0);
  uint64_t v149 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v149) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v149, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C258], (uint64_t)sub_216918BDC);
  uint64_t v150 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v150) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v150, MEMORY[0x263F8C258], MEMORY[0x263F8C248], (uint64_t)sub_216918C70);
  uint64_t v151 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v151) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v151, MEMORY[0x263F8C248], MEMORY[0x263F8C258], (uint64_t)sub_216918CC4);
  uint64_t v152 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v152) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v152, MEMORY[0x263F8C258], MEMORY[0x263F8C240], (uint64_t)sub_216918D78);
  uint64_t v153 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v153) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v153, MEMORY[0x263F8C240], MEMORY[0x263F8C258], (uint64_t)sub_216918DCC);
  uint64_t v154 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v154) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v154, MEMORY[0x263F8C260], MEMORY[0x263F8C268], (uint64_t)sub_216918E88);
  uint64_t v155 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v155) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v155, MEMORY[0x263F8C268], MEMORY[0x263F8C260], (uint64_t)sub_216918ED4);
  uint64_t v156 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v156) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v156, MEMORY[0x263F8C260], MEMORY[0x263F8C270], (uint64_t)sub_216918F68);
  uint64_t v157 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v157) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v157, MEMORY[0x263F8C270], MEMORY[0x263F8C260], (uint64_t)sub_216918FB4);
  uint64_t v158 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v158) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v158, MEMORY[0x263F8C260], MEMORY[0x263F8C290], (uint64_t)sub_216919040);
  uint64_t v159 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v159) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v159, MEMORY[0x263F8C290], MEMORY[0x263F8C260], (uint64_t)sub_21691908C);
  uint64_t v160 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v160) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v160, MEMORY[0x263F8C260], MEMORY[0x263F8C298], (uint64_t)sub_216919120);
  uint64_t v161 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v161) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v161, MEMORY[0x263F8C298], MEMORY[0x263F8C260], (uint64_t)sub_21691916C);
  uint64_t v162 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v162) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v162, MEMORY[0x263F8C260], (uint64_t)&stru_26C74C510, (uint64_t)sub_2169191F8);
  uint64_t v163 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v163) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v163, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C260], (uint64_t)sub_216919304);
  uint64_t v164 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v164) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v164, MEMORY[0x263F8C260], MEMORY[0x263F8C248], (uint64_t)sub_216919398);
  uint64_t v165 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v165) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v165, MEMORY[0x263F8C248], MEMORY[0x263F8C260], (uint64_t)sub_2169193EC);
  uint64_t v166 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v166) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v166, MEMORY[0x263F8C260], MEMORY[0x263F8C240], (uint64_t)sub_2169194A4);
  uint64_t v167 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v167) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v167, MEMORY[0x263F8C240], MEMORY[0x263F8C260], (uint64_t)sub_2169194F8);
  uint64_t v168 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v168) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v168, MEMORY[0x263F8C268], MEMORY[0x263F8C270], (uint64_t)sub_2169195B0);
  uint64_t v169 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v169) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v169, MEMORY[0x263F8C270], MEMORY[0x263F8C268], (uint64_t)sub_21691962C);
  uint64_t v170 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v170) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v170, MEMORY[0x263F8C268], MEMORY[0x263F8C290], (uint64_t)sub_2169196AC);
  uint64_t v171 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v171) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v171, MEMORY[0x263F8C290], MEMORY[0x263F8C268], (uint64_t)sub_2169196F8);
  uint64_t v172 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v172) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v172, MEMORY[0x263F8C268], MEMORY[0x263F8C298], (uint64_t)sub_216919744);
  uint64_t v173 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v173) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v173, MEMORY[0x263F8C298], MEMORY[0x263F8C268], (uint64_t)sub_2169197C0);
  uint64_t v174 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v174) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v174, MEMORY[0x263F8C268], (uint64_t)&stru_26C74C510, (uint64_t)sub_216919840);
  uint64_t v175 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v175) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v175, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C268], (uint64_t)sub_21691994C);
  uint64_t v176 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v176) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v176, MEMORY[0x263F8C268], MEMORY[0x263F8C248], (uint64_t)sub_216919A3C);
  uint64_t v177 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v177) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v177, MEMORY[0x263F8C248], MEMORY[0x263F8C268], (uint64_t)sub_216919A90);
  uint64_t v178 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v178) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v178, MEMORY[0x263F8C268], MEMORY[0x263F8C240], (uint64_t)sub_216919B40);
  uint64_t v179 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v179) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v179, MEMORY[0x263F8C240], MEMORY[0x263F8C268], (uint64_t)sub_216919B94);
  uint64_t v180 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v180) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v180, MEMORY[0x263F8C270], MEMORY[0x263F8C290], (uint64_t)sub_216919C4C);
  uint64_t v181 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v181) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v181, MEMORY[0x263F8C290], MEMORY[0x263F8C270], (uint64_t)sub_216919CCC);
  uint64_t v182 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v182) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v182, MEMORY[0x263F8C270], MEMORY[0x263F8C298], (uint64_t)sub_216919D48);
  uint64_t v183 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v183) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v183, MEMORY[0x263F8C298], MEMORY[0x263F8C270], (uint64_t)sub_216919D94);
  uint64_t v184 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v184) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v184, MEMORY[0x263F8C270], (uint64_t)&stru_26C74C510, (uint64_t)sub_216919DE0);
  uint64_t v185 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v185) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v185, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C270], (uint64_t)sub_216919EEC);
  uint64_t v186 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v186) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v186, MEMORY[0x263F8C270], MEMORY[0x263F8C248], (uint64_t)sub_216919FDC);
  uint64_t v187 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v187) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v187, MEMORY[0x263F8C248], MEMORY[0x263F8C270], (uint64_t)sub_21691A030);
  uint64_t v188 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v188) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v188, MEMORY[0x263F8C270], MEMORY[0x263F8C240], (uint64_t)sub_21691A0E4);
  uint64_t v189 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v189) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v189, MEMORY[0x263F8C240], MEMORY[0x263F8C270], (uint64_t)sub_21691A138);
  uint64_t v190 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v190) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v190, MEMORY[0x263F8C290], MEMORY[0x263F8C298], (uint64_t)sub_21691A1EC);
  uint64_t v191 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v191) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v191, MEMORY[0x263F8C298], MEMORY[0x263F8C290], (uint64_t)sub_21691A268);
  uint64_t v192 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v192) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v192, MEMORY[0x263F8C290], (uint64_t)&stru_26C74C510, (uint64_t)sub_21691A2E8);
  uint64_t v193 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v193) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v193, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C290], (uint64_t)sub_21691A3F4);
  uint64_t v194 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v194) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v194, MEMORY[0x263F8C290], MEMORY[0x263F8C248], (uint64_t)sub_21691A484);
  uint64_t v195 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v195) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v195, MEMORY[0x263F8C248], MEMORY[0x263F8C290], (uint64_t)sub_21691A4D8);
  uint64_t v196 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v196) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v196, MEMORY[0x263F8C290], MEMORY[0x263F8C240], (uint64_t)sub_21691A588);
  uint64_t v197 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v197) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v197, MEMORY[0x263F8C240], MEMORY[0x263F8C290], (uint64_t)sub_21691A5DC);
  uint64_t v198 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v198) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v198, MEMORY[0x263F8C298], (uint64_t)&stru_26C74C510, (uint64_t)sub_21691A694);
  uint64_t v199 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v199) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v199, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C298], (uint64_t)sub_21691A7A0);
  uint64_t v200 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v200) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v200, MEMORY[0x263F8C298], MEMORY[0x263F8C248], (uint64_t)sub_21691A830);
  uint64_t v201 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v201) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v201, MEMORY[0x263F8C248], MEMORY[0x263F8C298], (uint64_t)sub_21691A884);
  uint64_t v202 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v202) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v202, MEMORY[0x263F8C298], MEMORY[0x263F8C240], (uint64_t)sub_21691A938);
  uint64_t v203 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v203) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v203, MEMORY[0x263F8C240], MEMORY[0x263F8C298], (uint64_t)sub_21691A98C);
  uint64_t v204 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v204) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v204, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C248], (uint64_t)sub_21691AA40);
  uint64_t v205 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v205) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v205, MEMORY[0x263F8C248], (uint64_t)&stru_26C74C510, (uint64_t)sub_21691AAD4);
  uint64_t v206 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v206) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v206, (uint64_t)&stru_26C74C510, MEMORY[0x263F8C240], (uint64_t)sub_21691AC34);
  uint64_t v207 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v207) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v207, MEMORY[0x263F8C240], (uint64_t)&stru_26C74C510, (uint64_t)sub_21691ACCC);
  uint64_t v208 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v208) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v208, MEMORY[0x263F8C248], MEMORY[0x263F8C240], (uint64_t)sub_21691AE38);
  uint64_t v209 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v209) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v209, MEMORY[0x263F8C240], MEMORY[0x263F8C248], (uint64_t)sub_21691AEC4);
  uint64_t v210 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v210) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }
  sub_21690DE94(v210, (uint64_t)&stru_26C74C2C0, (uint64_t)&stru_26C747090, (uint64_t)sub_2169128F0);
  uint64_t v211 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_instance);
  if (!v211) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Vt_CastRegistry>::_CreateInstance();
  }

  sub_21690DE94(v211, (uint64_t)&stru_26C747090, (uint64_t)&stru_26C74C2C0, (uint64_t)sub_216912964);
}

void *sub_216912524(void *a1, void *a2)
{
  *a1 = &unk_26C750038;
  sub_21691B558((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_216912568(void *a1, void *a2)
{
  *a1 = &unk_26C750038;
  sub_21691B558((uint64_t)(a1 + 1), a2);

  operator delete(a1);
}

uint64_t sub_2169125BC(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  unsigned char v5[8] = 0;
  *uint64_t v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_216912700(_Unwind_Exception *a1)
{
  sub_2169127D0(v1 + 16);
  _Unwind_Resume(a1);
}

void sub_216912714(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = sub_216851020(a2);
  char v7 = v6;
  uint64_t v8 = a1 + 8 * v6;
  uint64_t v10 = *(void *)(v8 + 48);
  char v9 = (atomic_ullong *)(v8 + 48);
  __dmb(0xBu);
  if (!v10)
  {
    if (v6) {
      size_t v11 = 8 << v6;
    }
    else {
      size_t v11 = 16;
    }
    uint64_t v12 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)v11);
    bzero(v12, v11);
    while (1)
    {
      uint64_t v14 = 0;
      atomic_compare_exchange_strong(v9, (unint64_t *)&v14, (unint64_t)v12);
      if (!v14) {
        break;
      }
      if (atomic_fetch_add_explicit(v9, 0, memory_order_relaxed))
      {
        tbb::internal::deallocate_via_handler_v3((uint64_t)v12, v13);
        break;
      }
    }
  }
  atomic_ullong v15 = *v9;
  __dmb(0xBu);
  *(void *)(v15 + 8 * (a2 - ((1 << v7) & 0x1FFFFFFFFFFFFFFELL))) = *a3;
}

uint64_t sub_2169127D0(uint64_t a1)
{
  sub_21691280C(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_216912854(a1, v2);
  return a1;
}

uint64_t sub_21691280C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  *uint64_t v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      double result = sub_216912854(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_216912854(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 64)) {
    sub_216912898(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

void sub_216912898(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

unsigned int *sub_2169128F0@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  *(void *)(a2 + 8) = &off_26C750BB8;

  return sub_21691B31C((unsigned int **)a2, (uint64_t)EmptyString);
}

uint64_t sub_216912964@<X0>(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    (*(void (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v7);
  uint64_t v5 = v7;
  *a2 = v7;
  a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v6;
    }
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_2169129FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  char v4 = *(unsigned char *)result;
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
  return result;
}

void sub_216912A4C(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  if (v4 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (v4 > 1);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

void sub_216912AE4(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v3 = sub_216912B94(exception);
    int v4 = (struct type_info *)&unk_26C750088;
    int v5 = std::exception::~exception;
    goto LABEL_6;
  }
  if (a2 == 1)
  {
    char v6 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v6->__vftable = 0;
    uint64_t v3 = sub_216912B5C(v6);
    int v4 = (struct type_info *)&unk_26C750070;
    int v5 = std::exception::~exception;
LABEL_6:
    __cxa_throw(v3, v4, (void (*)(void *))v5);
  }
}

std::bad_cast *sub_216912B5C(std::bad_cast *a1)
{
  uint64_t result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&unk_26C7500B0;
  return result;
}

std::bad_cast *sub_216912B94(std::bad_cast *a1)
{
  uint64_t result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&unk_26C7500D8;
  return result;
}

void sub_216912BCC(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete(v1);
}

const char *sub_216912BF4()
{
  return "bad numeric conversion: negative overflow";
}

void sub_216912C00(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete(v1);
}

const char *sub_216912C28()
{
  return "bad numeric conversion: positive overflow";
}

unsigned char *sub_216912C34(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_216912C44(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216912C50()
{
  return 1;
}

unint64_t sub_216912C58(char *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216912C78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_216912C8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216912CA4()
{
  return 0;
}

uint64_t sub_216912CB4()
{
  return MEMORY[0x263F8C238];
}

uint64_t sub_216912CC0()
{
  return 0;
}

uint64_t sub_216912CC8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216912CD4()
{
  return 0;
}

uint64_t sub_216912CDC()
{
  return 0;
}

BOOL sub_216912CE4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C238] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216912D1C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C238], a2, a3);
}

uint64_t sub_216912D40()
{
  return MEMORY[0x263F8C238];
}

unsigned char *sub_216912D50@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = *result;
  return result;
}

unsigned char *sub_216912D6C(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_216912D7C(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216912D88()
{
  return 1;
}

unint64_t sub_216912D90(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216912DB0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_216912DC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216912DDC()
{
  return 0;
}

uint64_t sub_216912DEC()
{
  return MEMORY[0x263F8C230];
}

uint64_t sub_216912DF8()
{
  return 0;
}

uint64_t sub_216912E00()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216912E0C()
{
  return 0;
}

uint64_t sub_216912E14()
{
  return 0;
}

BOOL sub_216912E1C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216912E54(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], a2, a3);
}

uint64_t sub_216912E78()
{
  return MEMORY[0x263F8C230];
}

unsigned char *sub_216912E88@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = *result;
  return result;
}

uint64_t sub_216912EA4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  char v4 = *(unsigned char *)result;
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
  return result;
}

void sub_216912EF4(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  if (v4 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (v4 > 1);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

unsigned char *sub_216912F8C(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_216912F9C(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216912FA8()
{
  return 1;
}

unint64_t sub_216912FB0(char *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216912FD0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_216912FE4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216912FFC()
{
  return 0;
}

uint64_t sub_21691300C()
{
  return MEMORY[0x263F8C228];
}

uint64_t sub_216913018()
{
  return 0;
}

uint64_t sub_216913020()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_21691302C()
{
  return 0;
}

uint64_t sub_216913034()
{
  return 0;
}

BOOL sub_21691303C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C228] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216913074(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C228], a2, a3);
}

uint64_t sub_216913098()
{
  return MEMORY[0x263F8C228];
}

unsigned char *sub_2169130A8@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = *result;
  return result;
}

uint64_t sub_2169130C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  char v4 = *(unsigned char *)result;
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
  return result;
}

void sub_216913114(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * (v4 > 1));
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

unsigned char *sub_2169131A4(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_2169131B4(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169131C0()
{
  return 1;
}

unint64_t sub_2169131C8(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2169131E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_2169131FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216913214()
{
  return 0;
}

uint64_t sub_216913224()
{
  return MEMORY[0x263F8C250];
}

uint64_t sub_216913230()
{
  return 0;
}

uint64_t sub_216913238()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216913244()
{
  return 0;
}

uint64_t sub_21691324C()
{
  return 0;
}

BOOL sub_216913254(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C250] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21691328C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C250], a2, a3);
}

uint64_t sub_2169132B0()
{
  return MEMORY[0x263F8C250];
}

unsigned char *sub_2169132C0@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = *result;
  return result;
}

unsigned __int8 *sub_2169132DC@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  __int16 v4 = *result;
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_21691332C(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  if (v4 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (v4 > 1);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

_WORD *sub_2169133C4(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_2169133D4(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169133E0()
{
  return 1;
}

unint64_t sub_2169133E8(__int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216913408(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

BOOL sub_21691341C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216913434()
{
  return 0;
}

uint64_t sub_216913440(__int16 *a1, uint64_t a2)
{
  return MEMORY[0x270F987C8](a2, *a1);
}

uint64_t sub_216913450()
{
  return MEMORY[0x263F8C278];
}

uint64_t sub_21691345C()
{
  return 0;
}

uint64_t sub_216913464()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216913470()
{
  return 0;
}

uint64_t sub_216913478()
{
  return 0;
}

BOOL sub_216913480(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C278] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169134B8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C278], a2, a3);
}

uint64_t sub_2169134DC()
{
  return MEMORY[0x263F8C278];
}

_WORD *sub_2169134EC@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_216913508@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  __int16 v4 = *result;
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_216913558(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * (v4 > 1));
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

_WORD *sub_2169135E8(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_2169135F8(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216913604()
{
  return 1;
}

unint64_t sub_21691360C(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_21691362C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

BOOL sub_216913640(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216913658()
{
  return 0;
}

uint64_t sub_216913664(unsigned __int16 *a1, uint64_t a2)
{
  return MEMORY[0x270F987D0](a2, *a1);
}

uint64_t sub_216913674()
{
  return MEMORY[0x263F8C280];
}

uint64_t sub_216913680()
{
  return 0;
}

uint64_t sub_216913688()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216913694()
{
  return 0;
}

uint64_t sub_21691369C()
{
  return 0;
}

BOOL sub_2169136A4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C280] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169136DC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C280], a2, a3);
}

uint64_t sub_216913700()
{
  return MEMORY[0x263F8C280];
}

_WORD *sub_216913710@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_21691372C@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_21691377C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  if (*(int *)a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(_DWORD *)a1 > 1);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

_DWORD *sub_216913814(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_216913824(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216913830()
{
  return 1;
}

unint64_t sub_216913838(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216913858(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_21691386C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216913884()
{
  return 0;
}

uint64_t sub_216913890()
{
  return std::ostream::operator<<();
}

uint64_t sub_2169138A0()
{
  return MEMORY[0x263F8C258];
}

uint64_t sub_2169138AC()
{
  return 0;
}

uint64_t sub_2169138B4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169138C0()
{
  return 0;
}

uint64_t sub_2169138C8()
{
  return 0;
}

BOOL sub_2169138D0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216913908(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], a2, a3);
}

uint64_t sub_21691392C()
{
  return MEMORY[0x263F8C258];
}

_DWORD *sub_21691393C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_216913958@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_2169139A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 1u));
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

_DWORD *sub_216913A38(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_216913A48(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216913A54()
{
  return 1;
}

unint64_t sub_216913A5C(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216913A7C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_216913A90(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216913AA8()
{
  return 0;
}

uint64_t sub_216913AB4()
{
  return std::ostream::operator<<();
}

uint64_t sub_216913AC4()
{
  return MEMORY[0x263F8C260];
}

uint64_t sub_216913AD0()
{
  return 0;
}

uint64_t sub_216913AD8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216913AE4()
{
  return 0;
}

uint64_t sub_216913AEC()
{
  return 0;
}

BOOL sub_216913AF4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C260] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216913B2C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C260], a2, a3);
}

uint64_t sub_216913B50()
{
  return MEMORY[0x263F8C260];
}

_DWORD *sub_216913B60@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = *result;
  return result;
}

unsigned __int8 *sub_216913B7C@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_216913BC8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 1);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

void *sub_216913C60(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_216913C70(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216913C7C()
{
  return 1;
}

unint64_t sub_216913C84(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216913CA4(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_216913CB8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216913CD0()
{
  return 0;
}

uint64_t sub_216913CDC()
{
  return std::ostream::operator<<();
}

uint64_t sub_216913CEC()
{
  return MEMORY[0x263F8C268];
}

uint64_t sub_216913CF8()
{
  return 0;
}

uint64_t sub_216913D00()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216913D0C()
{
  return 0;
}

uint64_t sub_216913D14()
{
  return 0;
}

BOOL sub_216913D1C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C268] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216913D54(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C268], a2, a3);
}

uint64_t sub_216913D78()
{
  return MEMORY[0x263F8C268];
}

void *sub_216913D88@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

unsigned __int8 *sub_216913DA0@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C75076B;
  return result;
}

void sub_216913DEC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 1));
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

void *sub_216913E7C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_216913E8C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216913E98()
{
  return 1;
}

unint64_t sub_216913EA0(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216913EC0(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_216913ED4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216913EEC()
{
  return 0;
}

uint64_t sub_216913EF8()
{
  return std::ostream::operator<<();
}

uint64_t sub_216913F08()
{
  return MEMORY[0x263F8C270];
}

uint64_t sub_216913F14()
{
  return 0;
}

uint64_t sub_216913F1C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216913F28()
{
  return 0;
}

uint64_t sub_216913F30()
{
  return 0;
}

BOOL sub_216913F38(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C270] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216913F70(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C270], a2, a3);
}

uint64_t sub_216913F94()
{
  return MEMORY[0x263F8C270];
}

void *sub_216913FA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_26C75076B;
  return result;
}

unsigned __int8 *sub_216913FBC@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_216914008(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 1);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

void *sub_2169140A0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2169140B0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169140BC()
{
  return 1;
}

unint64_t sub_2169140C4(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2169140E4(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_2169140F8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216914110()
{
  return 0;
}

uint64_t sub_21691411C()
{
  return std::ostream::operator<<();
}

uint64_t sub_21691412C()
{
  return MEMORY[0x263F8C290];
}

uint64_t sub_216914138()
{
  return 0;
}

uint64_t sub_216914140()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_21691414C()
{
  return 0;
}

uint64_t sub_216914154()
{
  return 0;
}

BOOL sub_21691415C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C290] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216914194(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C290], a2, a3);
}

uint64_t sub_2169141B8()
{
  return MEMORY[0x263F8C290];
}

void *sub_2169141C8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

unsigned __int8 *sub_2169141E0@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7508DB;
  return result;
}

void sub_21691422C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 1));
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v4 != 0;
}

void *sub_2169142BC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2169142CC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169142D8()
{
  return 1;
}

unint64_t sub_2169142E0(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216914300(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_216914314(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_21691432C()
{
  return 0;
}

uint64_t sub_216914338()
{
  return std::ostream::operator<<();
}

uint64_t sub_216914348()
{
  return MEMORY[0x263F8C298];
}

uint64_t sub_216914354()
{
  return 0;
}

uint64_t sub_21691435C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216914368()
{
  return 0;
}

uint64_t sub_216914370()
{
  return 0;
}

BOOL sub_216914378(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C298] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169143B0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C298], a2, a3);
}

uint64_t sub_2169143D4()
{
  return MEMORY[0x263F8C298];
}

void *sub_2169143E4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_26C7508DB;
  return result;
}

uint64_t sub_2169143FC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_216914748(v4 != 0);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_21691450C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v6 = *(_WORD *)a1;
  uint64_t result = sub_2169147A8(&v6);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] != 0.0;
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v5;
  return result;
}

uint64_t sub_2169145A4()
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)0x477FE000);
}

_WORD *sub_2169145E0(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_2169145F0(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169145FC()
{
  return 1;
}

unint64_t sub_216914604(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216914624(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
}

BOOL sub_216914648(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
}

uint64_t sub_216914670()
{
  return 0;
}

uint64_t sub_21691467C(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<(a2);
}

void *sub_21691468C()
{
  return &unk_26C74C510;
}

uint64_t sub_216914698()
{
  return 0;
}

uint64_t sub_2169146A0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169146AC()
{
  return 0;
}

uint64_t sub_2169146B4()
{
  return 0;
}

BOOL sub_2169146BC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4222 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169146F8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C510, a2, a3);
}

void *sub_21691471C()
{
  return &unk_26C74C510;
}

_WORD *sub_21691472C@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = *result;
  return result;
}

uint64_t sub_216914748(unsigned int a1)
{
  char v1 = a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if ((v1 & 1) == 0) {
    return v2 >> 16;
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
  }
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

uint64_t sub_2169147A8(unsigned __int16 *a1)
{
  float v1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  float v2 = ceilf(v1);
  float v3 = floorf(v1);
  if (v1 >= 0.0) {
    float v4 = v3;
  }
  else {
    float v4 = v2;
  }
  if (v4 == 0.0) {
    return HIWORD(LODWORD(v4));
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
  }
         + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
}

uint64_t sub_216914824@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = 0.0;
  if (*(unsigned char *)result) {
    float v4 = 1.0;
  }
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = v4;
  return result;
}

void sub_216914884(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(float *)a1 >= 2.0);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  float v6 = ceilf(v4);
  float v7 = floorf(v4);
  if (v4 >= 0.0) {
    float v6 = v7;
  }
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v6 != 0.0;
}

float sub_21691493C(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_21691494C(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_216914958()
{
  return 1;
}

unint64_t sub_216914960(float *a1)
{
  float v1 = *a1;
  if (*a1 == 0.0) {
    float v1 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * LODWORD(v1));
}

BOOL sub_216914990(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_2169149A4(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2169149BC()
{
  return 0;
}

uint64_t sub_2169149CC()
{
  return MEMORY[0x263F8C248];
}

uint64_t sub_2169149D8()
{
  return 0;
}

uint64_t sub_2169149E0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169149EC()
{
  return 0;
}

uint64_t sub_2169149F4()
{
  return 0;
}

BOOL sub_2169149FC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216914A34(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], a2, a3);
}

uint64_t sub_216914A58()
{
  return MEMORY[0x263F8C248];
}

float sub_216914A68@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750A4B;
  float result = *a1;
  *(float *)a2 = *a1;
  return result;
}

uint64_t sub_216914A84@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    float result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = 0.0;
  if (*(unsigned char *)result) {
    double v4 = 1.0;
  }
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = v4;
  return result;
}

void sub_216914AE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(double *)a1 >= 2.0);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  double v6 = ceil(v4);
  double v7 = floor(v4);
  if (v4 >= 0.0) {
    double v6 = v7;
  }
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v6 != 0.0;
}

double sub_216914B9C(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_216914BAC(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t sub_216914BB8()
{
  return 1;
}

unint64_t sub_216914BC0(double *a1)
{
  double v1 = *a1;
  if (*a1 == 0.0) {
    double v1 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * *(void *)&v1);
}

BOOL sub_216914BF0(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_216914C04(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216914C1C()
{
  return 0;
}

uint64_t sub_216914C2C()
{
  return MEMORY[0x263F8C240];
}

uint64_t sub_216914C38()
{
  return 0;
}

uint64_t sub_216914C40()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216914C4C()
{
  return 0;
}

uint64_t sub_216914C54()
{
  return 0;
}

BOOL sub_216914C5C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216914C94(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], a2, a3);
}

uint64_t sub_216914CB8()
{
  return MEMORY[0x263F8C240];
}

double sub_216914CC8@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  a2[1] = &unk_26C750B03;
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t sub_216914CE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    double result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  char v4 = *(unsigned char *)result;
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
  return result;
}

uint64_t sub_216914D34@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    double result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  char v4 = *(unsigned char *)result;
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
  return result;
}

void sub_216914D84(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

void sub_216914E04(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (v4 >> 6) & 2);
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

char *sub_216914E88@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  __int16 v4 = *result;
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_216914ED8(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  if (v4 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (v4 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

void sub_216914F68(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = (char)v4;
}

void sub_216914FEC(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * (v4 > 0x7F));
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

char *sub_216915074@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_2169150C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  if (*(int *)a1 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(_DWORD *)a1 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

void sub_216915154(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = (char)v4;
}

void sub_2169151D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 0x7Fu));
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

char *sub_216915260@<X0>(char *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_2169152AC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

void sub_21691533C(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_26C75076B;
}

void sub_2169153BC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

char *sub_216915444@<X0>(char *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_216915490(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

void sub_216915520(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_26C7508DB;
}

void sub_2169155A0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = v4;
}

uint64_t sub_216915628@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_2169157CC(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_216915738@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = (int)result;
  return result;
}

uint64_t sub_2169157CC(int a1)
{
  float v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1) {
    return v2 >> 16;
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
  }
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_21691582C@<S0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_216915880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216915904(*(float *)a1);
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = result;
  return result;
}

uint64_t sub_216915904(float a1)
{
  if (a1 <= -129.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 128.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  float v3 = ceilf(a1);
  float v4 = floorf(a1);
  if (a1 >= 0.0) {
    float v3 = v4;
  }
  return (int)v3;
}

double sub_216915968@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_2169159BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216915A40(*(double *)a1);
  *(void *)(a2 + 8) = &unk_26C7500F3;
  *(unsigned char *)a2 = result;
  return result;
}

uint64_t sub_216915A40(double a1)
{
  if (a1 <= -129.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 128.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    double v3 = v4;
  }
  return (int)v3;
}

void sub_216915AA8(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

void sub_216915B28(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (v4 >> 6) & 2);
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

char *sub_216915BAC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  __int16 v4 = *result;
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_216915BFC(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  if (v4 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (v4 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

void sub_216915C8C(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = (char)v4;
}

void sub_216915D10(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * (v4 > 0x7F));
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

char *sub_216915D98@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_216915DE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  if (*(int *)a1 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(_DWORD *)a1 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

void sub_216915E78(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = (char)v4;
}

void sub_216915EFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 0x7Fu));
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

char *sub_216915F84@<X0>(char *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_216915FD0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

void sub_216916060(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_26C75076B;
}

void sub_2169160E0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

char *sub_216916168@<X0>(char *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_2169161B4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= -129) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 127);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

void sub_216916244(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 7);
  *a2 = (char)v4;
  a2[1] = &unk_26C7508DB;
}

void sub_2169162C4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0x7F));
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = v4;
}

uint64_t sub_21691634C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_2169157CC(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_21691645C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = (int)result;
  return result;
}

float sub_2169164F0@<S0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_216916544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216915904(*(float *)a1);
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = result;
  return result;
}

double sub_2169165C8@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (char *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_21691661C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216915A40(*(double *)a1);
  *(void *)(a2 + 8) = &unk_26C750263;
  *(unsigned char *)a2 = result;
  return result;
}

unsigned __int8 *sub_2169166A0@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  __int16 v4 = *result;
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_2169166F0(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  if (v4 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (v4 > 255);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

unsigned __int8 *sub_216916780@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  __int16 v4 = *result;
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
  return result;
}

void sub_2169167D0(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * (v4 > 0xFF));
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

unsigned __int8 *sub_216916858@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_2169168A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  if (*(int *)a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(_DWORD *)a1 > 255);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

unsigned __int8 *sub_216916938@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_216916988(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, 2 * (*(_DWORD *)a1 > 0xFFu));
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

unsigned __int8 *sub_216916A10@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_216916A5C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 255);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

unsigned __int8 *sub_216916AEC@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C75076B;
  return result;
}

void sub_216916B38(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0xFF));
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

unsigned __int8 *sub_216916BC0@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_216916C0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 255);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

unsigned __int8 *sub_216916C9C@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7508DB;
  return result;
}

void sub_216916CE8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((unint64_t)*a1 > 0xFF));
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = v4;
}

uint64_t sub_216916D70@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int8 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_216916F10(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_216916E7C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = (int)result;
  return result;
}

uint64_t sub_216916F10(unsigned int a1)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1) {
    return v2 >> 16;
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
  }
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_216916F70@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  LOBYTE(a3) = *(unsigned char *)a1;
  float result = (float)a3;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_216916FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216917048(*(float *)a1);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = result;
  return result;
}

uint64_t sub_216917048(float a1)
{
  if (a1 <= -1.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 256.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  float v3 = ceilf(a1);
  float v4 = floorf(a1);
  if (a1 >= 0.0) {
    float v3 = v4;
  }
  return (int)v3;
}

double sub_2169170AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  LOBYTE(a3) = *(unsigned char *)a1;
  double result = (double)a3;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_216917100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216917184(*(double *)a1);
  *(void *)(a2 + 8) = &unk_26C75031B;
  *(unsigned char *)a2 = result;
  return result;
}

uint64_t sub_216917184(double a1)
{
  if (a1 <= -1.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 256.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    double v3 = v4;
  }
  return (int)v3;
}

void sub_2169171E8(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 15);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
}

void sub_216917268(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (v4 >> 14) & 2);
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
}

__int16 *sub_2169172EC@<X0>(__int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_21691733C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  if (*(int *)a1 <= -32769) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(_DWORD *)a1 >= 0x8000);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
}

void sub_2169173D0(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 15);
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = (__int16)v4;
}

void sub_216917454(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*(_DWORD *)a1 & 0xFFFF8000) != 0));
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
}

__int16 *sub_2169174DC@<X0>(__int16 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_216917528(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= -32769) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 >= 0x8000);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
}

void sub_2169175BC(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 15);
  *a2 = (__int16)v4;
  a2[1] = &unk_26C75076B;
}

void sub_21691763C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF8000) != 0));
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
}

__int16 *sub_2169176C4@<X0>(__int16 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_216917710(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= -32769) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 >= 0x8000);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
}

void sub_2169177A4(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  sub_216912AE4((uint64_t)&v5, v4 >> 15);
  *a2 = (__int16)v4;
  a2[1] = &unk_26C7508DB;
}

void sub_216917824(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF8000) != 0));
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = v4;
}

uint64_t sub_2169178AC@<X0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_2169157CC(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_2169179BC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = (int)result;
  return result;
}

float sub_216917A50@<S0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_216917AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216917B28(*(float *)a1);
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_216917B28(float a1)
{
  if (a1 <= -32769.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 32768.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  float v3 = ceilf(a1);
  float v4 = floorf(a1);
  if (a1 >= 0.0) {
    float v3 = v4;
  }
  return (int)v3;
}

double sub_216917B8C@<D0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (__int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_216917BE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216917C64(*(double *)a1);
  *(void *)(a2 + 8) = &unk_26C7503D3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_216917C64(double a1)
{
  if (a1 <= -32769.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 32768.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    double v3 = v4;
  }
  return (int)v3;
}

unsigned __int16 *sub_216917CCC@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_216917D1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  if (*(int *)a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(_DWORD *)a1 >= 0x10000);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_216917DAC@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *result;
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
  return result;
}

void sub_216917DFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*(_DWORD *)a1 & 0xFFFF0000) != 0));
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_216917E84@<X0>(unsigned __int16 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_216917ED0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 >= 0x10000);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_216917F60@<X0>(unsigned __int16 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C75076B;
  return result;
}

void sub_216917FAC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF0000) != 0));
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_216918034@<X0>(unsigned __int16 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_216918080(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 >= 0x10000);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
}

unsigned __int16 *sub_216918110@<X0>(unsigned __int16 *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7508DB;
  return result;
}

void sub_21691815C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFFFFFF0000) != 0));
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = v4;
}

uint64_t sub_2169181E4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > (float)v4)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_216916F10(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_2169182F0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = (int)result;
  return result;
}

float sub_216918384@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  LOWORD(a3) = *(_WORD *)a1;
  float result = (float)a3;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

uint64_t sub_2169183D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_21691845C(*(float *)a1);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_21691845C(float a1)
{
  if (a1 <= -1.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 65536.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  float v3 = ceilf(a1);
  float v4 = floorf(a1);
  if (a1 >= 0.0) {
    float v3 = v4;
  }
  return (int)v3;
}

double sub_2169184C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  LOWORD(a3) = *(_WORD *)a1;
  double result = (double)a3;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

uint64_t sub_216918514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t result = sub_216918598(*(double *)a1);
  *(void *)(a2 + 8) = &unk_26C75048B;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_216918598(double a1)
{
  if (a1 <= -1.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 65536.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    double v3 = v4;
  }
  return (int)v3;
}

void sub_2169185FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, *(_DWORD *)a1 >> 31);
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
}

void sub_21691867C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  sub_216912AE4((uint64_t)&v5, (*(_DWORD *)a1 >> 30) & 2);
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
}

int *sub_216918700@<X0>(int *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_21691874C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 0x7FFFFFFF);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
}

void sub_2169187E4(int *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (v4 >> 31) & 1);
  *a2 = v4;
  a2[1] = (unint64_t)&unk_26C75076B;
}

void sub_216918860(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFF80000000) != 0));
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
}

int *sub_2169188E8@<X0>(int *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_216918934(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 0x7FFFFFFF);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
}

void sub_2169189CC(int *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (v4 >> 31) & 1);
  *a2 = v4;
  a2[1] = (unint64_t)&unk_26C7508DB;
}

void sub_216918A48(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * ((*a1 & 0xFFFFFFFF80000000) != 0));
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v4;
}

uint64_t sub_216918AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  int v4 = *(_DWORD *)a1;
  float v5 = (float)*(int *)a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_2169157CC(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_216918BDC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = (int)result;
  return result;
}

float sub_216918C70@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*(int *)a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

void sub_216918CC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  if (*(float *)a1 <= -2147500000.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(float *)a1 >= 2147500000.0);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  float v6 = ceilf(v4);
  float v7 = floorf(v4);
  if (v4 >= 0.0) {
    float v6 = v7;
  }
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = (int)v6;
}

double sub_216918D78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*(int *)a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

void sub_216918DCC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 <= -2147483650.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(double *)a1 >= 2147483650.0);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  double v6 = ceil(v4);
  double v7 = floor(v4);
  if (v4 >= 0.0) {
    double v6 = v7;
  }
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = (int)v6;
}

unsigned int *sub_216918E88@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_216918ED4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 0xFFFFFFFFLL);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
}

unsigned int *sub_216918F68@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C75076B;
  return result;
}

void sub_216918FB4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * (HIDWORD(*a1) != 0));
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
}

unsigned int *sub_216919040@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void sub_21691908C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  if (*a1 < 0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*a1 > 0xFFFFFFFFLL);
  }
  sub_216912AE4((uint64_t)&v6, v5);
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
}

unsigned int *sub_216919120@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (unsigned int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7508DB;
  return result;
}

void sub_21691916C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, 2 * (HIDWORD(*a1) != 0));
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v4;
}

uint64_t sub_2169191F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned int v4 = *(_DWORD *)a1;
  float v5 = (float)*(unsigned int *)a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_216916F10(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_216919304@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = result;
  return result;
}

float sub_216919398@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*(unsigned int *)a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

void sub_2169193EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(float *)a1 >= 4295000000.0);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  float v6 = ceilf(v4);
  float v7 = floorf(v4);
  if (v4 >= 0.0) {
    float v6 = v7;
  }
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v6;
}

double sub_2169194A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  LODWORD(a3) = *(_DWORD *)a1;
  double result = (double)a3;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

void sub_2169194F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(double *)a1 >= 4294967300.0);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  double v6 = ceil(v4);
  double v7 = floor(v4);
  if (v4 >= 0.0) {
    double v6 = v7;
  }
  *(void *)(a2 + 8) = &unk_26C7505FB;
  *(_DWORD *)a2 = v6;
}

void sub_2169195B0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_26C75076B;
}

void sub_21691962C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_26C7506B3;
}

void *sub_2169196AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  if ((v3 & 4) != 0) {
    double result = (void *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C750823;
  return result;
}

void *sub_2169196F8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  if ((v3 & 4) != 0) {
    double result = (void *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7506B3;
  return result;
}

void sub_216919744(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_26C7508DB;
}

void sub_2169197C0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_26C7506B3;
}

uint64_t sub_216919840@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  float v5 = (float)*a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_2169199DC(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_21691994C@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *a2 = (uint64_t)result;
  a2[1] = &unk_26C7506B3;
  return result;
}

uint64_t sub_2169199DC(uint64_t a1)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1) {
    return v2 >> 16;
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
  }
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_216919A3C@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

void sub_216919A90(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  if (*(float *)a1 <= -9.2234e18) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(float *)a1 >= 9.2234e18);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  float v6 = ceilf(v4);
  float v7 = floorf(v4);
  if (v4 >= 0.0) {
    float v6 = v7;
  }
  *a2 = (uint64_t)v6;
  a2[1] = &unk_26C7506B3;
}

double sub_216919B40@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

void sub_216919B94(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 <= -9.22337204e18) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(double *)a1 >= 9.22337204e18);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  double v6 = ceil(v4);
  double v7 = floor(v4);
  if (v4 >= 0.0) {
    double v6 = v7;
  }
  *a2 = (uint64_t)v6;
  a2[1] = &unk_26C7506B3;
}

void sub_216919C4C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_26C750823;
}

void sub_216919CCC(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_26C75076B;
}

void *sub_216919D48@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  if ((v3 & 4) != 0) {
    double result = (void *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C7508DB;
  return result;
}

void *sub_216919D94@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  if ((v3 & 4) != 0) {
    double result = (void *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  *a2 = *result;
  a2[1] = &unk_26C75076B;
  return result;
}

uint64_t sub_216919DE0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unint64_t v4 = *a1;
  float v5 = (float)*a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_216919F7C(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_216919EEC@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *a2 = (unint64_t)result;
  a2[1] = &unk_26C75076B;
  return result;
}

uint64_t sub_216919F7C(unint64_t a1)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)a1);
  if (!a1) {
    return v2 >> 16;
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v2 >> 23]
  }
         + (((v2 & 0x7FFFFF) + ((v2 >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v2);
}

float sub_216919FDC@<S0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

void sub_21691A030(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(float *)a1 >= 1.8447e19);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  float v6 = ceilf(v4);
  float v7 = floorf(v4);
  if (v4 >= 0.0) {
    float v6 = v7;
  }
  *a2 = (unint64_t)v6;
  a2[1] = &unk_26C75076B;
}

double sub_21691A0E4@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

void sub_21691A138(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(double *)a1 >= 1.84467441e19);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  double v6 = ceil(v4);
  double v7 = floor(v4);
  if (v4 >= 0.0) {
    double v6 = v7;
  }
  *a2 = (unint64_t)v6;
  a2[1] = &unk_26C75076B;
}

void sub_21691A1EC(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, (unint64_t)*a1 >> 63);
  *a2 = v4;
  a2[1] = &unk_26C7508DB;
}

void sub_21691A268(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  sub_216912AE4((uint64_t)&v5, ((unint64_t)*a1 >> 62) & 2);
  *a2 = v4;
  a2[1] = &unk_26C750823;
}

uint64_t sub_21691A2E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  uint64_t v4 = *a1;
  float v5 = (float)*a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_2169199DC(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_21691A3F4@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *a2 = (uint64_t)result;
  a2[1] = &unk_26C750823;
  return result;
}

float sub_21691A484@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

void sub_21691A4D8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  if (*(float *)a1 <= -9.2234e18) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(float *)a1 >= 9.2234e18);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  float v6 = ceilf(v4);
  float v7 = floorf(v4);
  if (v4 >= 0.0) {
    float v6 = v7;
  }
  *a2 = (uint64_t)v6;
  a2[1] = &unk_26C750823;
}

double sub_21691A588@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (uint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

void sub_21691A5DC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 <= -9.22337204e18) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(double *)a1 >= 9.22337204e18);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  double v6 = ceil(v4);
  double v7 = floor(v4);
  if (v4 >= 0.0) {
    double v6 = v7;
  }
  *a2 = (uint64_t)v6;
  a2[1] = &unk_26C750823;
}

uint64_t sub_21691A694@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unint64_t v4 = *a1;
  float v5 = (float)*a1;
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result] < v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = 31744;
LABEL_7:
    *(_WORD *)a2 = v7;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000] > v5)
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v7 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_216919F7C(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

float sub_21691A7A0@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  unsigned __int16 v5 = *(_WORD *)a1;
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_2169147A8(&v5)];
  *a2 = (unint64_t)result;
  a2[1] = &unk_26C7508DB;
  return result;
}

float sub_21691A830@<S0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float result = (float)*a1;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = result;
  return result;
}

void sub_21691A884(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  if (*(float *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(float *)a1 >= 1.8447e19);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  float v6 = ceilf(v4);
  float v7 = floorf(v4);
  if (v4 >= 0.0) {
    float v6 = v7;
  }
  *a2 = (unint64_t)v6;
  a2[1] = &unk_26C7508DB;
}

double sub_21691A938@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  if ((v3 & 4) != 0) {
    a1 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double result = (double)*a1;
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = result;
  return result;
}

void sub_21691A98C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 <= -1.0) {
    int v5 = 1;
  }
  else {
    int v5 = 2 * (*(double *)a1 >= 1.84467441e19);
  }
  sub_216912AE4((uint64_t)&v8, v5);
  double v6 = ceil(v4);
  double v7 = floor(v4);
  if (v4 >= 0.0) {
    double v6 = v7;
  }
  *a2 = (unint64_t)v6;
  a2[1] = &unk_26C7508DB;
}

unsigned __int16 *sub_21691AA40@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    double result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*result];
  if (v4 > 3.4028e38)
  {
    int v5 = 2139095040;
LABEL_7:
    float v4 = *(float *)&v5;
    goto LABEL_8;
  }
  if (v4 < -3.4028e38)
  {
    int v5 = -8388608;
    goto LABEL_7;
  }
LABEL_8:
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = v4;
  return result;
}

uint64_t sub_21691AAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = *(float *)a1;
  uint64_t result = sub_2169145A4();
  if (v4 > pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result])
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (v4 < pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000])
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_21691ABD8(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_21691ABD8(float a1)
{
  if (a1 == 0.0) {
    return HIWORD(LODWORD(a1));
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a1) >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a1) >> 23]
  }
         + (((LODWORD(a1) & 0x7FFFFF) + ((LODWORD(a1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a1));
}

unsigned __int16 *sub_21691AC34@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*result];
  if (v4 > 1.79769313e308)
  {
    unint64_t v5 = 0x7FF0000000000000;
LABEL_7:
    double v4 = *(double *)&v5;
    goto LABEL_8;
  }
  if (v4 < -1.79769313e308)
  {
    unint64_t v5 = 0xFFF0000000000000;
    goto LABEL_7;
  }
LABEL_8:
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = v4;
  return result;
}

uint64_t sub_21691ACCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  uint64_t result = sub_2169145A4();
  if (v4 > pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result])
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = 31744;
LABEL_7:
    *(_WORD *)a2 = v6;
    return result;
  }
  uint64_t result = sub_2169145A4();
  if (v4 < pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result ^ 0x8000])
  {
    *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
    __int16 v6 = -1024;
    goto LABEL_7;
  }
  uint64_t result = sub_21691ADD8(v4);
  *(void *)(a2 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a2 = result;
  return result;
}

uint64_t sub_21691ADD8(double a1)
{
  float v1 = a1;
  if (v1 == 0.0) {
    return HIWORD(LODWORD(v1));
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
  }
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

uint64_t sub_21691AE38@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if ((v3 & 4) != 0) {
    uint64_t result = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(float *)result;
  if (v4 > 1.79769313e308)
  {
    unint64_t v5 = 0x7FF0000000000000;
LABEL_7:
    double v4 = *(double *)&v5;
    goto LABEL_8;
  }
  if (v4 < -1.79769313e308)
  {
    unint64_t v5 = 0xFFF0000000000000;
    goto LABEL_7;
  }
LABEL_8:
  *(void *)(a2 + 8) = &unk_26C750B03;
  *(double *)a2 = v4;
  return result;
}

void sub_21691AEC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = *(double *)a1;
  if (*(double *)a1 > 3.40282347e38)
  {
    *(void *)(a2 + 8) = &unk_26C750A4B;
    int v5 = 2139095040;
LABEL_7:
    *(_DWORD *)a2 = v5;
    return;
  }
  if (v4 < -3.40282347e38)
  {
    *(void *)(a2 + 8) = &unk_26C750A4B;
    int v5 = -8388608;
    goto LABEL_7;
  }
  sub_216912AE4((uint64_t)&v7, 2 * (v4 > 3.40282347e38));
  float v6 = v4;
  *(void *)(a2 + 8) = &unk_26C750A4B;
  *(float *)a2 = v6;
}

uint64_t *sub_21691AFC8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_21691AFE8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21691B16C(a1);
}

uint64_t sub_21691AFF8()
{
  return 1;
}

unint64_t sub_21691B000(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = 0;
  char v7 = 0;
  int v2 = *(char *)(v1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)v1;
  }
  else {
    uint64_t v3 = *(pxrInternal__aapl__pxrReserved__ **)v1;
  }
  if (v2 >= 0) {
    double v4 = (char *)*(unsigned __int8 *)(v1 + 23);
  }
  else {
    double v4 = *(char **)(v1 + 8);
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v6, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * v6);
}

BOOL sub_21691B064(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_21691B1C8(*a1, *a2);
}

BOOL sub_21691B070(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return sub_21691B1C8(*a1, a2);
}

uint64_t sub_21691B07C()
{
  return 0;
}

void *sub_21691B088(uint64_t **a1, void *a2)
{
  int v3 = *((char *)*a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (uint64_t)*a1;
  }
  else {
    uint64_t v4 = **a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v5 = (*a1)[1];
  }
  return sub_216779180(a2, v4, v5);
}

void *sub_21691B0B0()
{
  return &unk_26C747090;
}

uint64_t sub_21691B0BC()
{
  return 0;
}

uint64_t sub_21691B0C4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_21691B0D0()
{
  return 0;
}

uint64_t sub_21691B0D8()
{
  return 0;
}

BOOL sub_21691B0E0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21691B11C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C747090, a2, a3);
}

void *sub_21691B140()
{
  return &unk_26C747090;
}

uint64_t sub_21691B14C(uint64_t a1)
{
  return *(void *)a1;
}

unsigned int *sub_21691B154@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C750BB8;
  return sub_21691B31C((unsigned int **)a2, v2);
}

uint64_t *sub_21691B16C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  return a1;
}

BOOL sub_21691B1C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_21691B26C(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x20uLL);
    uint64_t v4 = v3;
    uint64_t v5 = *a1;
    if (*(char *)(*a1 + 23) < 0)
    {
      sub_216778F24(v3, *(void **)v5, *(void *)(v5 + 8));
      uint64_t v5 = *a1;
    }
    else
    {
      long long v6 = *(_OWORD *)v5;
      *((void *)v3 + 2) = *(void *)(v5 + 16);
      *(_OWORD *)uint64_t v3 = v6;
    }
    atomic_store(0, v4 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
    uint64_t v8 = v5;
    *a1 = (uint64_t)v4;
    sub_21691B16C(&v8);
  }
  return *a1;
}

void sub_21691B308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_21691B31C(unsigned int **a1, uint64_t a2)
{
  uint64_t result = (unsigned int *)operator new(0x20uLL);
  uint64_t v5 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = (unsigned int *)sub_216778F24(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)result + 2) = *(void *)(a2 + 16);
  }
  atomic_store(0, v5 + 6);
  *a1 = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_21691B390(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21691B3A4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *sub_21691B3D4(void *result)
{
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_21691B3F0(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_21691B400()
{
  return 1;
}

unint64_t sub_21691B408(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL sub_21691B42C(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL sub_21691B448(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_21691B468()
{
  return 0;
}

void *sub_21691B474(void *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, a1);
}

void *sub_21691B484()
{
  return &unk_26C74C2C0;
}

uint64_t sub_21691B490()
{
  return 0;
}

uint64_t sub_21691B498()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_21691B4A4()
{
  return 0;
}

uint64_t sub_21691B4AC()
{
  return 0;
}

BOOL sub_21691B4B4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21691B4F0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2C0, a2, a3);
}

void *sub_21691B514()
{
  return &unk_26C74C2C0;
}

atomic_uint **sub_21691B524@<X0>(atomic_uint **result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return result;
}

uint64_t sub_21691B558(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_21691B58C(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  for (uint64_t i = 0; i != 64; ++i)
  {
    uint64_t v4 = v2 + 8 * i;
    uint64_t v6 = *(void *)(v4 + 48);
    uint64_t v5 = (uint64_t *)(v4 + 48);
    __dmb(0xBu);
    if (v6)
    {
      uint64_t v7 = 1 << i;
      if (!i) {
        uint64_t v7 = 2;
      }
      do
      {
        __dmb(0xBu);
        --v7;
      }
      while (v7);
      uint64_t v8 = *v5;
      __dmb(0xBu);
      uint64_t result = tbb::internal::deallocate_via_handler_v3(v8, a2);
      __dmb(0xBu);
      *uint64_t v5 = 0;
    }
  }
  return result;
}

uint64_t *sub_21691B614()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C750D28, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C750D28, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21691B6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_21691B718(uint64_t a1@<X0>, long long *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = sub_21691B8FC(a1, a2);
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  int v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_21691B974(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    *((void *)a3 + 8) = v12;
    *(void *)a3 = 0;
  }
  BOOL v14 = (unsigned __int8 *)a2;
  while (1)
  {
    atomic_ullong v15 = v25;
    unint64_t v16 = *v25;
    if (*v25)
    {
      unint64_t v17 = *(void *)(v16 + 64);
      while (1)
      {
        uint64_t v18 = (atomic_ullong *)v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && sub_21691BE28(a1 + 1, (unsigned __int8 *)(v16 + 8), v14))
        {
          if (a3) {
            sub_216912854(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = (atomic_ullong *)v16;
        unint64_t v16 = *(void *)v16;
        if (!*v18)
        {
          atomic_ullong v15 = v18;
          break;
        }
        unint64_t v17 = *(void *)(v16 + 64);
        atomic_ullong v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (unsigned __int8 *)sub_21691BA0C(a1 + 16, v12, (uint64_t)a2);
      BOOL v14 = a3 + 8;
      atomic_ullong v15 = v25;
    }
    *(void *)a3 = v16;
    while (1)
    {
      unint64_t v19 = v16;
      atomic_compare_exchange_strong(v15, &v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if (add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = v16;
LABEL_21:
    if (v16 == add_explicit || a3 == (unsigned __int8 *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

unint64_t sub_21691B8FC(uint64_t a1, long long *a2)
{
  sub_21691BAE4((char *)v5, a2);
  unint64_t v3 = sub_21691BA88(a1, (uint64_t)v5);
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return v3;
}

void sub_21691B960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21691B974(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  int v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_21691BB7C(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

uint64_t sub_21691BA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  sub_21691BAE4((char *)(v5 + 8), (long long *)a3);
  *(void *)(v5 + 56) = *(void *)(a3 + 48);
  *(void *)(v5 + 64) = a2;
  *(void *)uint64_t v5 = 0;
  return v5;
}

void sub_21691BA60(void *a1)
{
  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_21691BA74(_Unwind_Exception *a1)
{
}

unint64_t sub_21691BA88(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_216891D24((uint64_t)&v5, a2);
  return ((v3 << 6) + (v3 >> 2) + sub_216891D24((uint64_t)&v6, a2 + 24) + 2654435769u) ^ v3;
}

char *sub_21691BAE4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  char v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)char v5 = v6;
  }
  return __dst;
}

void sub_21691BB60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21691BB7C(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_21691BB7C(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_21691BD54(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  int v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

uint64_t sub_21691BC60(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = HIDWORD(a2);
    if (!HIDWORD(a2)) {
      unint64_t v2 = a2;
    }
    if (v2 < 0x10000)
    {
      uint64_t v3 = 32 * (HIDWORD(a2) != 0);
    }
    else
    {
      v2 >>= 16;
      uint64_t v3 = (32 * (HIDWORD(a2) != 0)) | 0x10;
    }
    if (v2 >= 0x100)
    {
      v2 >>= 8;
      v3 |= 8uLL;
    }
    if (v2 >= 0x10)
    {
      v2 >>= 4;
      v3 |= 4uLL;
    }
    if (v2 >= 4)
    {
      v2 >>= 2;
      v3 += 2;
    }
    unint64_t v4 = ((v2 >> 1) & 1) + v3;
  }
  else
  {
    LOBYTE(v4) = -1;
  }
  return a2 & ~(1 << v4);
}

BOOL sub_21691BCEC(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = sub_216851020(a2);
  uint64_t v5 = a1 + 8 * v4;
  uint64_t v7 = *(void *)(v5 + 48);
  uint64_t v6 = (uint64_t *)(v5 + 48);
  __dmb(0xBu);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *v6;
  __dmb(0xBu);
  return *(void *)(v8 + 8 * (a2 - ((1 << v4) & 0x1FFFFFFFFFFFFFFELL))) != 0;
}

tbb::internal *sub_21691BD54@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  *((void *)result + 8) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[8];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_216912854(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

uint64_t sub_21691BE28(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    uint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v12 = a2[47];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = a2[47];
  }
  else {
    uint64_t v13 = *((void *)a2 + 4);
  }
  uint64_t v14 = a3[47];
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)a3 + 4);
  }
  if (v13 != v14) {
    return 0;
  }
  unint64_t v16 = (const void **)(a2 + 24);
  unint64_t v19 = (unsigned __int8 *)*((void *)a3 + 3);
  uint64_t v18 = a3 + 24;
  unint64_t v17 = v19;
  if (v15 >= 0) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v17;
  }
  if ((v12 & 0x80) != 0) {
    return memcmp(*v16, v20, *((void *)a2 + 4)) == 0;
  }
  if (!a2[47]) {
    return 1;
  }
  uint64_t v21 = v12 - 1;
  do
  {
    int v23 = *(unsigned __int8 *)v16;
    unint64_t v16 = (const void **)((char *)v16 + 1);
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void *sub_21691BF54(void *a1, uint64_t a2, uint64_t a3)
{
  size_t v5 = sub_216779094(a1, (char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  sub_216779094(v5 + 3, (char *)(*(void *)(*(void *)a3 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  return a1;
}

void sub_21691BFA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21691BFBC(uint64_t a1@<X0>, long long *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6 = sub_21691B8FC(a1, a2);
  uint64_t v17 = 0;
  unint64_t v18 = v6;
  uint64_t v7 = &v18;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    uint64_t v7 = (unint64_t *)((char *)v7 + 1);
    *((unsigned char *)&v17 + i) = byte_217457512[v9];
  }
  uint64_t v10 = v17;
  uint64_t v11 = a1 + 16;
  sub_21691B974(a1, v6, &v18);
  unint64_t v12 = v18;
  if (v18)
  {
    unint64_t v13 = v10 | 1;
    uint64_t v14 = a1 + 1;
    while (1)
    {
      unint64_t v15 = *(void *)(v12 + 64);
      if (v15 > v13) {
        break;
      }
      if (v15 == v13)
      {
        char v16 = sub_21691BE28(v14, (unsigned __int8 *)(v12 + 8), (unsigned __int8 *)a2);
        unint64_t v12 = v18;
        if (v16) {
          goto LABEL_11;
        }
      }
      unint64_t v12 = *(void *)v12;
      unint64_t v18 = v12;
      if (!v12) {
        goto LABEL_9;
      }
    }
    unint64_t v12 = 0;
LABEL_11:
    *a3 = v12;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v11;
}

uint64_t sub_21691C0A0(uint64_t a1)
{
  return a1;
}

void sub_21691C0CC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21691C0CC(a1, *a2);
    sub_21691C0CC(a1, a2[1]);
    sub_21691C128((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21691C128(uint64_t a1)
{
  (*(void (**)(void))(a1 + 32))(*(void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

_OWORD *sub_21691C17C(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void **)sub_21677B220((uint64_t)a1, &v13, a2);
  int v8 = *v7;
  if (!*v7)
  {
    int v9 = (uint64_t **)v7;
    int v8 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    _OWORD v8[2] = *(_OWORD *)a3;
    *((void *)v8 + 6) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_OWORD *)((char *)v8 + 56) = *(_OWORD *)a4;
    *(void *)a4 = 0;
    *((void *)v8 + 9) = *(void *)(a4 + 16);
    char v12 = 1;
    sub_21677B358(a1, v13, v9, (uint64_t *)v8);
    v11[0] = 0;
    sub_21691C250((uint64_t)v11, 0);
  }
  return v8;
}

void sub_21691C250(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21691C128((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_21691C2A8(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C2B4(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C2C0(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C2CC(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C2D8(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C2E4(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C2F0(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C2FC(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C308(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C314(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C320(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C32C(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C338(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C344(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C350(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C35C(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C368(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C374(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C380(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C38C(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C398(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C3A4(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C3B0(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C3BC(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void sub_21691C3C8(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, unsigned int *a2, int a3, int a4)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(a1);
  if (result)
  {
    if (((pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a1) & 1) != 0
       || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(a1) & 1) == 0)
      && ((pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a1) & 1) != 0 || !a3))
    {
      int v9 = a2 + 1;
      if (!a4) {
        int v9 = a2;
      }
      return *v9;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, int a3)
{
  uint64_t Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(this);
  KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  return pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a1, (unsigned int *)&Extrapolation, KeyFrames[1] - *KeyFrames == 72, a3);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Ts_Eval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  double v35 = a5;
  uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  if (*result == result[1])
  {
    a4[1] = 0;
    return result;
  }
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(a1, &v35);
  if (*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) == v10) {
    uint64_t v11 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
  }
                                                           + 8);
  else {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v10 - 72);
  }
  uint64_t v33 = v11;
  uint64_t v34 = a4;
  if (*(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8) == v10
    || *(double *)(v10 + 8) != v35)
  {
    int v13 = 0;
    uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                           + 8);
    char v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v10;
  }
  else
  {
    char v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v10 + 72);
    int v13 = 1;
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v10;
    v10 += 72;
  }
  unint64_t v15 = *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  uint64_t v16 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8);
  uint64_t v17 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  if (!v13)
  {
    if (v15 == v12)
    {
      if (a3)
      {
        int v25 = v34;
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v10;
LABEL_33:
        BOOL v27 = a1;
        int v28 = 0;
        return (uint64_t *)sub_21691C828(v26, v27, v28, v25);
      }
      double v29 = v35;
      uint64_t v30 = (double *)v10;
      uint64_t v31 = a1;
      int v32 = 0;
    }
    else
    {
      if (v33 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v16 - 72))
      {
        if (!a3) {
          return (uint64_t *)pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalUncached(v33, v12, v19, v35);
        }
        if (a3 != 1
          || !pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsExtrapolatable(v33)
          || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents(v33) & 1) != 0
          || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33) != 1)
        {
          return (uint64_t *)pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalDerivativeUncached(v33, v12, v19, v35);
        }
        uint64_t v21 = (uint64_t)v33;
LABEL_26:
        uint64_t v22 = 1;
        return (uint64_t *)sub_21691C970(v21, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
      }
      int v25 = v34;
      if (a3)
      {
        uint64_t v26 = v33;
LABEL_51:
        BOOL v27 = a1;
        int v28 = 1;
        return (uint64_t *)sub_21691C828(v26, v27, v28, v25);
      }
      double v29 = v35;
      uint64_t v30 = (double *)v33;
      uint64_t v31 = a1;
      int v32 = 1;
    }
    return (uint64_t *)sub_21691CA00(v30, v31, v32, v29);
  }
  if (!a3)
  {
    if (a2 || v14 == v17)
    {
      if (a2)
      {
        int v23 = v34;
        int v24 = v14;
        return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, v24);
      }
    }
    else if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33))
    {
      int v23 = v34;
      int v24 = v33;
      return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, v24);
    }
    return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v34, v14);
  }
  uint64_t v20 = *(void *)(KeyFrames + 8);
  if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsExtrapolatable(v14) & 1) == 0) {
    return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v34, v14);
  }
  if (a2)
  {
    if (v14 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v20 - 72))
    {
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14))
      {
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14) != 1) {
          return (uint64_t *)pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValueDerivative(v14);
        }
        uint64_t v21 = (uint64_t)v14;
        goto LABEL_26;
      }
      return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v34, v14);
    }
    int v25 = v34;
    uint64_t v26 = v14;
    goto LABEL_51;
  }
  if (v14 == v17)
  {
    int v25 = v34;
    uint64_t v26 = v14;
    goto LABEL_33;
  }
  if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33)
    || !pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14)
    && pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33) == 2)
  {
    return pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v34, v14);
  }
  if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14)
    && pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33) == 1
    || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v14) == 1)
  {
    uint64_t v21 = (uint64_t)v14;
    uint64_t v22 = 0;
    return (uint64_t *)sub_21691C970(v21, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
  }
  return (uint64_t *)pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValueDerivative(v14);
}

uint64_t sub_21691C828@<X0>(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1@<X0>, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  unint64_t v13[2] = *MEMORY[0x263EF8340];
  a4[1] = 0;
  if (pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a1, a2, a3) == 1)
  {
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a1))
    {
      if (a3) {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v13, a1);
      }
      else {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v13, a1);
      }
    }
    else
    {
      if (a3) {
        uint64_t v8 = -1;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a1 + 72 * v8), v7);
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a1 + 72 * (a3 == 0)), v10);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)KeyFrameData + 168))(v13, KeyFrameData, v11);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v13, a1);
  }
  sub_2168ED33C(a4, v13);
  return sub_2168EE084((uint64_t)v13);
}

void sub_21691C950(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21691C970(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  if (a2 == 1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = -1;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)(a1 + 72 * (a2 == 1));
  uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__ *)(a1 + 72 * v2), a2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(v3, v5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)KeyFrameData + 168);

  return v7(KeyFrameData, v6);
}

uint64_t sub_21691CA00(double *a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a2, int a3, double a4)
{
  __n128 v12[2] = *MEMORY[0x263EF8340];
  sub_21691C828((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1, a2, a3, v12);
  if (a3) {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v11, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1);
  }
  else {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v11, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1);
  }
  double v8 = a1[1];
  uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData((pxrInternal__aapl__pxrReserved__ *)a1, v7);
  (*(void (**)(uint64_t, uint64_t *, void *, double))(*(void *)KeyFrameData + 176))(KeyFrameData, v11, v12, a4 - v8);
  sub_2168EE084((uint64_t)v11);
  return sub_2168EE084((uint64_t)v12);
}

void sub_21691CAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  v32[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v32, a2);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v31, this);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v30, a2);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v29, this);
  if (*((double *)this + 1) >= *((double *)a2 + 1))
  {
    double v24 = COERCE_DOUBLE("ts/evalUtils.cpp");
    double v25 = COERCE_DOUBLE("Ts_IsSegmentValueMonotonic");
    uint64_t v26 = 315;
    BOOL v27 = "BOOL pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(const TsKeyFrame &, const TsKeyFrame &)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"The first key frame must come before the second.");
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(this) != 2
    || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(a2) != 2
    || !sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v31)
    || !sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v32)
    || !sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v29)
    || !sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v30))
  {
    goto LABEL_15;
  }
  double v5 = *(double *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v31);
  double v6 = *(double *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v31);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v24, this);
  double v7 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(this);
  double v9 = v8;
  sub_2168EE084((uint64_t)&v24);
  double v10 = *(double *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v32);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v24, a2);
  double v11 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(a2);
  double v13 = v12;
  sub_2168EE084((uint64_t)&v24);
  uint64_t v14 = (double *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v32);
  double v15 = v6 + v7 * v9;
  double v16 = v10 - v11 * v13;
  double v17 = *v14;
  double v24 = v15 - v5;
  double v25 = v5 + v5 + v15 * -4.0 + v16 + v16;
  double v18 = v15 * 3.0 - v5 - v16 * 3.0 + v17;
  *(double *)&uint64_t v26 = v18;
  double v22 = 0.0;
  double v23 = 0.0;
  if (!pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v24, &v23, &v22, v19))
  {
LABEL_13:
    uint64_t v20 = 1;
    goto LABEL_16;
  }
  if (fabs(v18) < 0.000001 && v23 > 0.000001 && 1.0 - v23 > 0.000001) {
    goto LABEL_15;
  }
  if (vabdd_f64(v23, v22) < 0.000001) {
    goto LABEL_13;
  }
  if (v23 > 0.000001 && 1.0 - v23 > 0.000001 || (uint64_t v20 = 1, v22 > 0.000001) && 1.0 - v22 > 0.000001) {
LABEL_15:
  }
    uint64_t v20 = 0;
LABEL_16:
  sub_2168EE084((uint64_t)v29);
  sub_2168EE084((uint64_t)v30);
  sub_2168EE084((uint64_t)v31);
  sub_2168EE084((uint64_t)v32);
  return v20;
}

void sub_21691CDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va2);
  sub_2168EE084((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_21691CE60()
{
}

uint64_t sub_21691CE68(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C240]);
  }
  else {
    return 0;
  }
}

uint64_t sub_21691CEA0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21691CE68(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v5 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8C240];
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21691F130, v4);
  }
}

double sub_21691CF34(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21691CE68(a1) & 1) == 0) {
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21691F130, MEMORY[0x263F8C240]);
  }

  return sub_21691F184(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetRange@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, double a3@<D1>, void *a4@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (a2 > a3)
  {
    uint64_t v37 = "ts/evalUtils.cpp";
    uint64_t v38 = "Ts_GetRange";
    uint64_t v39 = 577;
    *(void *)&v40.f64[0] = "std::pair<VtValue, VtValue> pxrInternal__aapl__pxrReserved__::Ts_GetRange(const TsSpline &,"
                             " TsTime, TsTime)";
    LOBYTE(v40.f64[1]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"invalid interval (start > end)");
LABEL_4:
    uint64_t v38 = 0;
    uint64_t v42 = 0;
LABEL_5:
    sub_2168EDFA8(a4, &v37);
    sub_2168EDFA8(a4 + 2, &v41);
    sub_2168EE084((uint64_t)&v41);
    return sub_2168EE084((uint64_t)&v37);
  }
  if (pxrInternal__aapl__pxrReserved__::TsSpline::IsEmpty(this)) {
    goto LABEL_4;
  }
  if (a2 != a3)
  {
    uint64_t v11 = (const char *)(*(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(this) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (strcmp(v11, (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      if (strcmp(v11, (const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL))) {
        goto LABEL_4;
      }
      double v35 = a3;
      double v36 = a2;
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v36);
      if (*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v12)
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v12);
        float v13 = sub_21691F9C0((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
        sub_2168EE084((uint64_t)&v37);
        float v14 = fmaxf(v13, -INFINITY);
      }
      else
      {
        v12 -= 72;
        float v13 = INFINITY;
        float v14 = -INFINITY;
      }
      BOOL v27 = (double *)pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(this, &v35);
      if (*(double **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) == v27)
      {
        v27 -= 9;
      }
      else if (v27[1] != v35 {
             || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27) & 1) == 0
      }
             && (*(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v27
              || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v27 - 9))))
      {
LABEL_52:
        if ((double *)v12 != v27)
        {
          do
          {
            double v29 = (double *)(v12 + 72);
            if (v12 + 72 != *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
            {
              sub_21691FBA8((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)v12, (pxrInternal__aapl__pxrReserved__ *)(v12 + 72));
              float v33 = sub_21692012C((uint64_t)&v39, v30, v31, v32, v36, v35);
              if (v13 >= v33) {
                float v13 = v33;
              }
              if (v14 < v34) {
                float v14 = v34;
              }
            }
            v12 += 72;
          }
          while (v29 != v27);
        }
        uint64_t v38 = (const char *)&unk_26C750A4B;
        *(float *)&uint64_t v37 = v13;
        uint64_t v42 = &unk_26C750A4B;
        *(float *)&double v41 = v14;
        goto LABEL_5;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27);
      float v28 = sub_21691F9C0((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
      sub_2168EE084((uint64_t)&v37);
      if (v13 >= v28) {
        float v13 = v28;
      }
      if (v14 < v28) {
        float v14 = v28;
      }
      goto LABEL_52;
    }
    double v35 = a3;
    double v36 = a2;
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v36);
    if (*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v16)
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16);
      double v17 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
      sub_2168EE084((uint64_t)&v37);
      double v18 = fmax(v17, -INFINITY);
    }
    else
    {
      v16 -= 72;
      double v17 = INFINITY;
      double v18 = -INFINITY;
    }
    unint64_t v19 = (double *)pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(this, &v35);
    if (*(double **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) == v19)
    {
      v19 -= 9;
    }
    else if (v19[1] != v35 {
           || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v19) & 1) == 0
    }
           && (*(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v19
            || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v19 - 9))))
    {
LABEL_32:
      if ((double *)v16 != v19)
      {
        do
        {
          uint64_t v21 = (double *)(v16 + 72);
          if (v16 + 72 != *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
          {
            sub_21691F274((uint64_t)&v37, (pxrInternal__aapl__pxrReserved__ *)v16, (pxrInternal__aapl__pxrReserved__ *)(v16 + 72));
            double v25 = sub_21691F784(&v40, v22, v23, v24, v36, v35);
            if (v17 >= v25) {
              double v17 = v25;
            }
            if (v18 < v26) {
              double v18 = v26;
            }
          }
          v16 += 72;
        }
        while (v21 != v19);
      }
      uint64_t v38 = (const char *)&unk_26C750B03;
      uint64_t v37 = *(char **)&v17;
      uint64_t v42 = &unk_26C750B03;
      double v41 = v18;
      goto LABEL_5;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v37, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v19);
    double v20 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v37);
    sub_2168EE084((uint64_t)&v37);
    if (v17 >= v20) {
      double v17 = v20;
    }
    if (v18 < v20) {
      double v18 = v20;
    }
    goto LABEL_32;
  }
  if (*(double *)(*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) <= a2)
  {
    if (*(double *)(*(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) - 64) <= a2)
    {
      uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 1, (uint64_t *)&v37, *(double *)(*(void *)(KeyFrames + 8) - 64));
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 1, (uint64_t *)&v37, a2);
    }
    sub_21691E9C0(a4, &v37, &v37);
  }
  else
  {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 0, (uint64_t *)&v37, *(double *)(*(void *)v10 + 8));
    sub_21691E9C0(a4, &v37, &v37);
  }
  return sub_2168EE084((uint64_t)&v37);
}

void sub_21691D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Ts_Sample(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, uint64_t *a7@<X8>)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  if (a2 > a3)
  {
    *(void *)&long long v131 = "ts/evalUtils.cpp";
    *((void *)&v131 + 1) = "Ts_Sample";
    uint64_t v132 = 1048;
    double v133 = COERCE_DOUBLE("TsSamples pxrInternal__aapl__pxrReserved__::Ts_Sample(const TsSpline &, TsTime, TsTime, double, double, double)");
    LOBYTE(v134) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v131, 1, (pxrInternal__aapl__pxrReserved__ *)"invalid interval (start > end)");
    return;
  }
  double v11 = a2;
  BOOL IsEmpty = pxrInternal__aapl__pxrReserved__::TsSpline::IsEmpty(this);
  char v14 = v11 == a3 || IsEmpty;
  if (v14) {
    return;
  }
  uint64_t v15 = (const char *)(*(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(this) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (!strcmp(v15, (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    uint64_t v28 = *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
    uint64_t v123 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
    double v29 = *(double *)(v28 + 8);
    if (v29 > v11)
    {
      sub_21691EA0C(this, a7, v29, v11 - v29 + -100.0);
      double v11 = *(double *)(v28 + 8);
      if (v11 >= a3) {
        return;
      }
    }
    uint64_t v30 = sub_21691EC50(this, v11, a3);
    uint64_t v32 = v31;
    double v125 = a6;
    if (v30 == v31)
    {
LABEL_56:
      uint64_t v73 = v123;
      goto LABEL_98;
    }
    while (1)
    {
      uint64_t v33 = v30 + 72;
      if (v30 + 72 != *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
      {
        sub_21691F274((uint64_t)&v131, (pxrInternal__aapl__pxrReserved__ *)v30, (pxrInternal__aapl__pxrReserved__ *)(v30 + 72));
        double v129 = 1.0;
        double v130 = 0.0;
        float64x2_t v150 = vmulq_f64(*(float64x2_t *)&v138[8], (float64x2_t)xmmword_217457620);
        uint64_t v149 = *(void *)v138;
        if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v149, &v130, &v129, v34)&& v130 >= -1.0e-10&& v129 <= 1.0&& (v35 = v137 + v130 * (*(double *)v138 + v130 * (v130 * *(double *)&v138[16] + *(double *)&v138[8])), double v36 = v137 + v129 * (*(double *)v138 + v129 * (v129 * *(double *)&v138[16] + *(double *)&v138[8])), v35 >= v36))
        {
          double v37 = v136;
          if (v36 <= v136) {
            double v38 = v137 + v129 * (*(double *)v138 + v129 * (v129 * *(double *)&v138[16] + *(double *)&v138[8]));
          }
          else {
            double v38 = v136;
          }
          if (v36 >= v133) {
            double v39 = v38;
          }
          else {
            double v39 = v133;
          }
          if (v35 <= v136) {
            double v37 = v137 + v130 * (*(double *)v138 + v130 * (v130 * *(double *)&v138[16] + *(double *)&v138[8]));
          }
          if (v35 >= v133) {
            double v40 = v37;
          }
          else {
            double v40 = v133;
          }
          double v41 = (v40 + v39) * 0.5;
          *(void *)&long long v155 = 0;
          BYTE8(v155) = 1;
          double v156 = v130;
          LOBYTE(v157[0]) = fabs(v130) != INFINITY;
          double v130 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v137, (double *)&v149, (uint64_t)&v155, v41);
          *(double *)&long long v155 = v129;
          BYTE8(v155) = fabs(v129) != INFINITY;
          double v156 = 1.0;
          LOBYTE(v157[0]) = 1;
          double v42 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v137, (double *)&v149, (uint64_t)&v155, v41);
          double v43 = v142;
          double v44 = (1.0 - v130) * v140 + v130 * v141;
          double v163 = v139;
          double v164 = v130 * v140 + (1.0 - v130) * v139;
          double v165 = v130 * v44 + (1.0 - v130) * v164;
          double v166 = v130 * ((1.0 - v130) * v44 + v130 * ((1.0 - v130) * v141 + v130 * v142)) + (1.0 - v130) * v165;
          double v45 = v136;
          double v129 = v42;
          double v146 = v133;
          v147.f64[0] = v130 * v134 + (1.0 - v130) * v133;
          double v46 = (1.0 - v42) * v140 + v42 * v141;
          double v47 = v42 * ((1.0 - v42) * v46 + v42 * ((1.0 - v42) * v141 + v42 * v142))
              + (1.0 - v42) * (v42 * v46 + (1.0 - v42) * (v42 * v140 + (1.0 - v42) * v139));
          double v159 = v47;
          double v160 = (1.0 - v42) * v46 + v42 * ((1.0 - v42) * v141 + v42 * v142);
          double v161 = (1.0 - v42) * v141 + v42 * v142;
          double v162 = v142;
          double v144 = (1.0 - v42) * v135 + v42 * v136;
          double v145 = v136;
          v147.f64[1] = v130 * ((1.0 - v130) * v134 + v130 * v135) + (1.0 - v130) * v147.f64[0];
          double v148 = v41;
          v143[0] = v41;
          v143[1] = (1.0 - v42) * ((1.0 - v42) * v134 + v42 * v135) + v42 * v144;
          sub_216920468(&v146, &v163, a7, v11, a3, a4, a5, v125);
          uint64_t v48 = a7[1];
          uint64_t v49 = v48 - *a7;
          if (v48 == *a7)
          {
            unint64_t v53 = 0;
          }
          else
          {
            uint64_t v154 = 0;
            uint64_t v152 = 0;
            sub_21691F0CC((uint64_t)&v155, &v153, &v151, 0, 0.0, 0.0);
            unint64_t v50 = a7[1];
            if (v50 >= a7[2])
            {
              uint64_t v52 = sub_21691ED40(a7, &v155);
            }
            else
            {
              long long v51 = v155;
              *(double *)(v50 + 16) = v156;
              *(_OWORD *)unint64_t v50 = v51;
              sub_2168EDFA8((void *)(v50 + 24), v157);
              sub_2168EDFA8((void *)(v50 + 40), v158);
              uint64_t v52 = v50 + 56;
            }
            a7[1] = v52;
            sub_2168EE084((uint64_t)v158);
            sub_2168EE084((uint64_t)v157);
            sub_2168EE084((uint64_t)&v151);
            sub_2168EE084((uint64_t)&v153);
            unint64_t v53 = 0x6DB6DB6DB6DB6DB7 * (v49 >> 3) + 1;
          }
          sub_216920468(v143, &v159, a7, v11, a3, a4, a5, v125);
          unint64_t v54 = v53 - 2;
          if (v53 < 2) {
            goto LABEL_26;
          }
          uint64_t v56 = *a7;
          uint64_t v55 = a7[1];
          if (v53 == 0x6DB6DB6DB6DB6DB7 * ((v55 - *a7) >> 3))
          {
            uint64_t v57 = v56 + 56 * v54;
            double v59 = *(double *)(v57 + 16);
            uint64_t v58 = (double *)(v57 + 16);
            double v60 = v59;
            if (v59 >= a3)
            {
              sub_21692040C((uint64_t)a7, v55 - 56);
              goto LABEL_26;
            }
            unint64_t v61 = v53 - 1;
            uint64_t v62 = v56 + 56 * v54;
            double v63 = (v60 - *(double *)(v62 + 8)) * 0.001;
            if (v63 > 0.001) {
              double v63 = 0.001;
            }
            double v64 = v60 - v63;
            *uint64_t v58 = v64;
            *(double *)(v56 + 56 * v61 + 8) = v64;
            sub_2168EE4C4(&v155, (void *)(v62 + 40));
            uint64_t v65 = (void *)(v56 + 56 * v61);
            sub_2168ED33C(v65 + 3, &v155);
            sub_2168EE084((uint64_t)&v155);
            *((double *)v65 + 2) = v45;
            *((void *)&v155 + 1) = &unk_26C750B03;
            uint64_t v66 = v65 + 5;
            *(double *)&long long v155 = v43;
          }
          else
          {
            unint64_t v67 = v53 - 1;
            uint64_t v68 = v56 + 56 * v54;
            double v69 = *(double *)(v68 + 16);
            double v70 = (v69 - *(double *)(v68 + 8)) * 0.001;
            if (v70 > 0.001) {
              double v70 = 0.001;
            }
            double v71 = v69 - v70;
            *(double *)(v68 + 16) = v71;
            *(double *)(v56 + 56 * v67 + 8) = v71;
            sub_2168EE4C4(&v155, (void *)(v68 + 40));
            uint64_t v72 = v56 + 56 * v67;
            sub_2168ED33C((void *)(v72 + 24), &v155);
            sub_2168EE084((uint64_t)&v155);
            *(double *)(v72 + 16) = v41;
            *((void *)&v155 + 1) = &unk_26C750B03;
            *(double *)&long long v155 = v47;
            uint64_t v66 = (void *)(v72 + 40);
          }
          sub_2168ED33C(v66, &v155);
          sub_2168EE084((uint64_t)&v155);
        }
        else
        {
          sub_216920468(&v133, &v139, a7, v11, a3, a4, a5, v125);
        }
      }
LABEL_26:
      uint64_t v30 = v33;
      if (v33 == v32) {
        goto LABEL_56;
      }
    }
  }
  if (!strcmp(v15, (const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    uint64_t v74 = *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
    uint64_t v124 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
    double v75 = *(double *)(v74 + 8);
    if (v75 > v11)
    {
      sub_21691EA0C(this, a7, v75, v11 - v75 + -100.0);
      double v11 = *(double *)(v74 + 8);
      if (v11 >= a3) {
        return;
      }
    }
    uint64_t v76 = sub_21691EC50(this, v11, a3);
    uint64_t v78 = v77;
    if (v76 != v77)
    {
      double v79 = 1.0;
      double v126 = a6;
      do
      {
        uint64_t v80 = v76 + 72;
        if (v76 + 72 != *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8))
        {
          sub_21691FBA8((uint64_t)&v131, (pxrInternal__aapl__pxrReserved__ *)v76, (pxrInternal__aapl__pxrReserved__ *)(v76 + 72));
          double v129 = 1.0;
          double v130 = 0.0;
          float64x2_t v147 = vmulq_f64(*(float64x2_t *)v138, (float64x2_t)xmmword_217457620);
          double v146 = v137;
          if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v146, &v130, &v129, v81)&& v130 >= -1.0e-10&& v129 <= v79&& (double v82 = v136 + v130 * (v137 + v130 * (v130 * *(double *)&v138[8] + *(double *)v138)), v83 = v136 + v129 * (v137 + v129 * (v129 * *(double *)&v138[8] + *(double *)v138)), v82 >= v83))
          {
            double v84 = v135;
            if (v83 <= v135) {
              double v85 = v136 + v129 * (v137 + v129 * (v129 * *(double *)&v138[8] + *(double *)v138));
            }
            else {
              double v85 = v135;
            }
            if (v83 >= *(double *)&v132) {
              double v86 = v85;
            }
            else {
              double v86 = *(double *)&v132;
            }
            if (v82 <= v135) {
              double v84 = v136 + v130 * (v137 + v130 * (v130 * *(double *)&v138[8] + *(double *)v138));
            }
            if (v82 >= *(double *)&v132) {
              double v87 = v84;
            }
            else {
              double v87 = *(double *)&v132;
            }
            double v88 = (v87 + v86) * 0.5;
            *(void *)&long long v155 = 0;
            BYTE8(v155) = 1;
            double v156 = v130;
            LOBYTE(v157[0]) = fabs(v130) != INFINITY;
            double v130 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v136, &v146, (uint64_t)&v155, v88);
            *(double *)&long long v155 = v129;
            BYTE8(v155) = fabs(v129) != INFINITY;
            double v156 = 1.0;
            LOBYTE(v157[0]) = 1;
            double v89 = pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(&v136, &v146, (uint64_t)&v155, v88);
            double v129 = v89;
            double v90 = v79;
            double v91 = v130;
            sub_216920948((uint64_t)&v138[16], (uint64_t)v143, 1, v130);
            double v92 = v133;
            double v93 = v134;
            double v94 = v91 * v133 + (1.0 - v91) * *(double *)&v132;
            double v95 = (1.0 - v91) * v94;
            double v96 = v91 * ((1.0 - v91) * v133 + v91 * v134);
            double v79 = v90;
            double v97 = v88;
            double v98 = v135;
            double v163 = *(double *)&v132;
            double v164 = v94;
            double v165 = v96 + v95;
            sub_216920948((uint64_t)&v138[16], (uint64_t)&v149, 0, v89);
            double v161 = (1.0 - v89) * v93 + v89 * v98;
            double v162 = v98;
            double v166 = v97;
            double v159 = v97;
            double v160 = (1.0 - v89) * ((1.0 - v89) * v92 + v89 * v93) + v89 * v161;
            a6 = v126;
            sub_216920A84(&v163, (uint64_t)v143, a7, v11, a3, a4, a5, v126);
            uint64_t v99 = a7[1];
            uint64_t v100 = v99 - *a7;
            if (v99 == *a7)
            {
              unint64_t v104 = 0;
            }
            else
            {
              uint64_t v154 = 0;
              uint64_t v152 = 0;
              sub_21691F0CC((uint64_t)&v155, &v153, &v151, 0, 0.0, 0.0);
              unint64_t v101 = a7[1];
              if (v101 >= a7[2])
              {
                uint64_t v103 = sub_21691ED40(a7, &v155);
              }
              else
              {
                long long v102 = v155;
                *(double *)(v101 + 16) = v156;
                *(_OWORD *)unint64_t v101 = v102;
                sub_2168EDFA8((void *)(v101 + 24), v157);
                sub_2168EDFA8((void *)(v101 + 40), v158);
                uint64_t v103 = v101 + 56;
              }
              a7[1] = v103;
              sub_2168EE084((uint64_t)v158);
              sub_2168EE084((uint64_t)v157);
              sub_2168EE084((uint64_t)&v151);
              sub_2168EE084((uint64_t)&v153);
              unint64_t v104 = 0x6DB6DB6DB6DB6DB7 * (v100 >> 3) + 1;
            }
            sub_216920A84(&v159, (uint64_t)&v149, a7, v11, a3, a4, a5, v126);
            unint64_t v105 = v104 - 2;
            if (v104 < 2) {
              goto LABEL_67;
            }
            uint64_t v107 = *a7;
            uint64_t v106 = a7[1];
            if (v104 == 0x6DB6DB6DB6DB6DB7 * ((v106 - *a7) >> 3))
            {
              uint64_t v108 = v107 + 56 * v105;
              double v110 = *(double *)(v108 + 16);
              uint64_t v109 = (double *)(v108 + 16);
              double v111 = v110;
              if (v110 >= a3)
              {
                sub_21692040C((uint64_t)a7, v106 - 56);
                goto LABEL_67;
              }
              unint64_t v112 = v104 - 1;
              uint64_t v113 = v107 + 56 * v105;
              double v114 = (v111 - *(double *)(v113 + 8)) * 0.001;
              if (v114 > 0.001) {
                double v114 = 0.001;
              }
              double v115 = v111 - v114;
              *uint64_t v109 = v115;
              *(double *)(v107 + 56 * v112 + 8) = v115;
              sub_2168EE4C4(&v155, (void *)(v113 + 40));
              uint64_t v116 = v107 + 56 * v112;
              sub_2168ED33C((void *)(v116 + 24), &v155);
              sub_2168EE084((uint64_t)&v155);
              *(double *)(v116 + 16) = v98;
              *((void *)&v155 + 1) = &unk_26C750A4B;
              int v117 = HIDWORD(v150.f64[0]);
            }
            else
            {
              unint64_t v118 = v104 - 1;
              uint64_t v119 = v107 + 56 * v105;
              double v120 = *(double *)(v119 + 16);
              double v121 = (v120 - *(double *)(v119 + 8)) * 0.001;
              if (v121 > 0.001) {
                double v121 = 0.001;
              }
              double v122 = v120 - v121;
              *(double *)(v119 + 16) = v122;
              *(double *)(v107 + 56 * v118 + 8) = v122;
              sub_2168EE4C4(&v155, (void *)(v119 + 40));
              uint64_t v116 = v107 + 56 * v118;
              sub_2168ED33C((void *)(v116 + 24), &v155);
              sub_2168EE084((uint64_t)&v155);
              *(double *)(v116 + 16) = v97;
              *((void *)&v155 + 1) = &unk_26C750A4B;
              int v117 = v149;
            }
            LODWORD(v155) = v117;
            sub_2168ED33C((void *)(v116 + 40), &v155);
            sub_2168EE084((uint64_t)&v155);
          }
          else
          {
            sub_216920A84((double *)&v132, (uint64_t)&v138[16], a7, v11, a3, a4, a5, a6);
          }
        }
LABEL_67:
        uint64_t v76 = v80;
      }
      while (v80 != v78);
    }
    uint64_t v73 = v124;
LABEL_98:
    double v27 = *(double *)(v73 - 64);
LABEL_99:
    if (v27 < a3) {
      sub_21691EA0C(this, a7, v27, a3 - v27 + 100.0);
    }
    return;
  }
  uint64_t v16 = *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  uint64_t v17 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
  double v18 = *(double *)(v16 + 8);
  if (v18 <= v11 || (sub_21691EA0C(this, a7, v18, v11 - v18 + -100.0), double v11 = *(double *)(v16 + 8), v11 < a3))
  {
    uint64_t v19 = sub_21691EC50(this, v11, a3);
    uint64_t v21 = v20;
    while (v19 != v21)
    {
      double v22 = *(double *)(v19 + 8);
      double v23 = *(double *)(v19 + 80);
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 1, (uint64_t *)&v155, v22);
      pxrInternal__aapl__pxrReserved__::TsSpline::Eval(this, 0, (uint64_t *)&v163, v23);
      sub_21691F0CC((uint64_t)&v131, &v155, &v163, 0, v22, v23);
      unint64_t v24 = a7[1];
      if (v24 >= a7[2])
      {
        uint64_t v26 = sub_21691ED40(a7, &v131);
      }
      else
      {
        long long v25 = v131;
        *(double *)(v24 + 16) = *(double *)&v132;
        *(_OWORD *)unint64_t v24 = v25;
        sub_2168EDFA8((void *)(v24 + 24), &v133);
        sub_2168EDFA8((void *)(v24 + 40), &v135);
        uint64_t v26 = v24 + 56;
      }
      v19 += 72;
      a7[1] = v26;
      sub_2168EE084((uint64_t)&v135);
      sub_2168EE084((uint64_t)&v133);
      sub_2168EE084((uint64_t)&v163);
      sub_2168EE084((uint64_t)&v155);
    }
    double v27 = *(double *)(v17 - 64);
    goto LABEL_99;
  }
}

void sub_21691E350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,void **a56)
{
}

void pxrInternal__aapl__pxrReserved__::Ts_Breakdown(double **this, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  if ((char *)this[1] - (char *)*this != 216)
  {
    uint64_t v52 = "ts/evalUtils.cpp";
    unint64_t v53 = "Ts_Breakdown";
    uint64_t v54 = 1129;
    *(double *)&uint64_t v55 = COERCE_DOUBLE("void pxrInternal__aapl__pxrReserved__::Ts_Breakdown(TsKeyFrameMap *)");
    LOBYTE(v56) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v52, 1, (pxrInternal__aapl__pxrReserved__ *)"Wrong number of key frames in breakdown");
    return;
  }
  double v3 = v2[10];
  if (v2[1] >= v3 || v3 >= v2[19])
  {
    uint64_t v52 = "ts/evalUtils.cpp";
    unint64_t v53 = "Ts_Breakdown";
    uint64_t v54 = 1138;
    *(double *)&uint64_t v55 = COERCE_DOUBLE("void pxrInternal__aapl__pxrReserved__::Ts_Breakdown(TsKeyFrameMap *)");
    LOBYTE(v56) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v52, 1, (pxrInternal__aapl__pxrReserved__ *)"Bad key frame ordering in breakdown");
    return;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(v62, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*this);
  uint64_t Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v62);
  if (!strcmp((const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v52);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v60, this, 0, 0, &v52);
    long long v25 = *(pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v60);
    uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v60);
    sub_21691F274((uint64_t)&v52, v25, (pxrInternal__aapl__pxrReserved__ *)(*(void *)(KeyFrames + 8) - 72));
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)&v58[0].f64[1], v27, v2[10], v28, v29);
    double v31 = v30;
    double v33 = *(double *)&v59[3];
    double v32 = *(double *)&v59[4];
    double v35 = *(double *)&v59[1];
    double v34 = *(double *)&v59[2];
    double v36 = v57;
    double v37 = v56;
    double v50 = v58[0].f64[0];
    double v51 = *(double *)&v55;
    int v38 = pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9));
    double v39 = 1.0 - v31;
    double v40 = (1.0 - v31) * v37 + v31 * v36;
    double v48 = (1.0 - v31) * v36 + v31 * v50;
    double v41 = v31 * v37 + (1.0 - v31) * v51;
    double v42 = v31 * v40 + (1.0 - v31) * v41;
    double v49 = (1.0 - v31) * v40 + v31 * v48;
    double v43 = v31 * v49 + (1.0 - v31) * v42;
    if (v38)
    {
      double v44 = v39 * v34 + v31 * v33;
      double v45 = v39 * v44 + v31 * (v39 * v33 + v31 * v32);
      double v46 = v31 * v44 + v39 * (v31 * v34 + v39 * v35);
      double v47 = v31 * v45 + v39 * v46;
      unint64_t v67 = &unk_26C750B03;
      double v66 = (v47 - v46) / (v43 - v42);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), &v66);
      sub_2168EE084((uint64_t)&v66);
      *(void *)&v65[1] = &unk_26C750B03;
      v65[0] = (v45 - v47) / (v49 - v43);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v65);
      sub_2168EE084((uint64_t)v65);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2)) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2, v41 - v51);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9))) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v43 - v42);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9))) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v49 - v43);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18))) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18), v50 - v48);
    }
    goto LABEL_28;
  }
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v62);
  if (!strcmp((const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v52);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v60, this, 0, 0, &v52);
    double v7 = *(pxrInternal__aapl__pxrReserved__ **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v60);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v60);
    sub_21691FBA8((uint64_t)&v52, v7, (pxrInternal__aapl__pxrReserved__ *)(*(void *)(v8 + 8) - 72));
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v58, v9, v2[10], v10, v11);
    double v13 = v12;
    sub_216920948((uint64_t)v59, (uint64_t)&v66, 1, v12);
    double v15 = v56;
    double v14 = v57;
    double v16 = *(double *)&v54;
    double v17 = *(double *)&v55;
    sub_216920948((uint64_t)v59, (uint64_t)v65, 0, v13);
    int v18 = pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9));
    double v19 = (1.0 - v13) * v17 + v13 * v15;
    double v20 = (1.0 - v13) * v15 + v13 * v14;
    double v21 = (1.0 - v13) * v19 + v13 * v20;
    double v22 = v13 * v17 + (1.0 - v13) * v16;
    double v23 = v13 * v19 + (1.0 - v13) * v22;
    double v24 = v13 * v21 + (1.0 - v13) * v23;
    if (v18)
    {
      *(void *)&v64[1] = &unk_26C750B03;
      v64[0] = (float)(*((float *)&v67 + 1) - *(float *)&v67) / (v24 - v23);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v64);
      sub_2168EE084((uint64_t)v64);
      *(void *)&v63[1] = &unk_26C750B03;
      v63[0] = (float)(*((float *)v65 + 1) - *(float *)v65) / (v21 - v24);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v63);
      sub_2168EE084((uint64_t)v63);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2)) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v2, v22 - v16);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9))) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v24 - v23);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9))) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 9), v21 - v24);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18))) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v2 + 18), v14 - v20);
    }
LABEL_28:
    if (v61) {
      sub_216784EC4(v61);
    }
  }
  sub_2168EE084((uint64_t)v62);
}

void sub_21691E940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,char a34)
{
  sub_2168EE084(v34 - 184);
  if (a33) {
    sub_216784EC4(a33);
  }
  sub_2168EE084((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void *sub_21691E9C0(void *a1, void *a2, void *a3)
{
  double v5 = sub_2168EE4C4(a1, a2);
  sub_2168EE4C4(v5 + 2, a3);
  return a1;
}

void sub_21691E9F8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21691EA0C(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, double a3, double a4)
{
  v19[2] = *MEMORY[0x263EF8340];
  v19[1] = 0;
  v18[1] = 0;
  if (a4 >= 0.0)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 1, (uint64_t *)&v14, a3);
    sub_2168ED33C(v19, &v14);
    sub_2168EE084((uint64_t)&v14);
    double v10 = a3 + a4;
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 0, (uint64_t *)&v14, v10);
    sub_2168ED33C(v18, &v14);
    sub_2168EE084((uint64_t)&v14);
    sub_21691F0CC((uint64_t)&v14, v19, v18, 0, a3, v10);
    unint64_t v9 = a2[1];
    if (v9 >= a2[2])
    {
LABEL_6:
      uint64_t v12 = sub_21691ED40(a2, &v14);
      goto LABEL_7;
    }
  }
  else
  {
    double v8 = a3 + a4;
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 1, (uint64_t *)&v14, a3 + a4);
    sub_2168ED33C(v19, &v14);
    sub_2168EE084((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 0, (uint64_t *)&v14, a3);
    sub_2168ED33C(v18, &v14);
    sub_2168EE084((uint64_t)&v14);
    sub_21691F0CC((uint64_t)&v14, v19, v18, 0, v8, a3);
    unint64_t v9 = a2[1];
    if (v9 >= a2[2]) {
      goto LABEL_6;
    }
  }
  long long v11 = v14;
  *(void *)(v9 + 16) = v15;
  *(_OWORD *)unint64_t v9 = v11;
  sub_2168EDFA8((void *)(v9 + 24), v16);
  sub_2168EDFA8((void *)(v9 + 40), v17);
  uint64_t v12 = v9 + 56;
LABEL_7:
  a2[1] = v12;
  sub_2168EE084((uint64_t)v17);
  sub_2168EE084((uint64_t)v16);
  sub_2168EE084((uint64_t)v18);
  return sub_2168EE084((uint64_t)v19);
}

void sub_21691EC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168EE084(v8 + 40);
  sub_2168EE084(v8 + 24);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_21691EC50(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, double a3)
{
  double v11 = a2;
  double v10 = a3;
  if (a2 <= a3)
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v11);
    if (*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) == v5) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v4 = v5 + 72 * v6;
    pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(this, &v10);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  }
  else
  {
    v8[0] = "ts/evalUtils.cpp";
    v8[1] = "_GetBounds";
    _OWORD v8[2] = 387;
    void v8[3] = "std::pair<TsSpline::const_iterator, TsSpline::const_iterator> pxrInternal__aapl__pxrReserved__::_GetBounds(c"
            "onst TsSpline &, TsTime, TsTime)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"invalid interval (start > end)");
    uint64_t v4 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this);
  }
  return v4;
}

uint64_t sub_21691ED40(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    double v10 = (char *)sub_2167B421C(v7, v9);
  }
  else {
    double v10 = 0;
  }
  double v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[56 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)double v11 = v12;
  sub_2168EDFA8((void *)v11 + 3, (void *)a2 + 3);
  sub_2168EDFA8((void *)v11 + 5, (void *)a2 + 5);
  unint64_t v15[2] = v11 + 56;
  sub_21691EE78(a1, v15);
  uint64_t v13 = a1[1];
  sub_21691F038((uint64_t)v15);
  return v13;
}

void sub_21691EE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21691F038((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21691EE78(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21691EEF0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21691EEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  unint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      long long v10 = *(_OWORD *)(v9 - 56);
      *(void *)(v7 - 40) = *(void *)(v9 - 40);
      *(_OWORD *)(v7 - 56) = v10;
      sub_2168EDFA8((void *)(v7 - 32), (void *)(v9 - 32));
      sub_2168EDFA8((void *)(v7 - 16), (void *)(v9 - 16));
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
      v9 -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_21691EFB8((uint64_t)v13);
  return v11;
}

uint64_t sub_21691EFB8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21691EFF0(a1);
  }
  return a1;
}

uint64_t sub_21691EFF0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    sub_2168EE084(v1 + 40);
    uint64_t result = sub_2168EE084(v1 + 24);
    v1 += 56;
  }
  return result;
}

uint64_t sub_21691F038(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21691F070(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 56;
      sub_2168EE084(v2 - 16);
      uint64_t result = sub_2168EE084(v2 - 32);
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_21691F0CC(uint64_t a1, void *a2, void *a3, char a4, double a5, double a6)
{
  *(unsigned char *)a1 = a4;
  *(double *)(a1 + 8) = a5;
  *(double *)(a1 + 16) = a6;
  sub_2168EE4C4((void *)(a1 + 24), a2);
  sub_2168EE4C4((void *)(a1 + 40), a3);
  return a1;
}

void sub_21691F11C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_21691F130@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(8uLL);
  *uint64_t result = 0;
  *a1 = result;
  uint64_t v3 = MEMORY[0x263F8C240];
  a1[1] = sub_21691F178;
  a1[2] = v3;
  return result;
}

void sub_21691F178(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

double sub_21691F184(void *a1)
{
  uint64_t v2 = (double *)sub_21691F1E4(a1);
  double v3 = *v2;
  *uint64_t v2 = 0.0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

void *sub_21691F1E4(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_21691F274(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__ *a3)
{
  *(void *)a1 = &unk_26C750D48;
  uint64_t KeyFrameData = (void *)pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, this);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a3, v6);
  if (KeyFrameData && (uint64_t v8 = v7) != 0)
  {
    sub_21691F4F4(a1 + 24, a1 + 88, (uint64_t)KeyFrameData, v7);
    double v9 = sub_21691F5F8(a1 + 24);
    if ((*(unsigned int (**)(void *, double))(*KeyFrameData + 152))(KeyFrameData, v9)
      && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 152))(v8))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = KeyFrameData[3];
    }
  }
  else
  {
    v11[0] = "ts/evalCache.h";
    v11[1] = "_Init";
    uint64_t v11[2] = 499;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<double, true>::_Init(const Ts_TypedData<T> *, const Ts_"
             "TypedData<T> *) [T = double, INTERPOLATABLE = true]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_21691F3B8(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    double v12 = *(double *)(a1 + 120)
        + v11 * (*(double *)(a1 + 128) + v11 * (*(double *)(a1 + 136) + *(double *)(a1 + 144) * v11));
  }
  else
  {
    double v12 = *(double *)(a1 + 16);
  }
  *(void *)(a5 + 8) = &unk_26C750B03;
  *(double *)a5 = v12;
}

void sub_21691F440(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    else {
      double v9 = 1.0;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    double v12 = (*(double *)(a1 + 128)
         + v11 * (*(double *)(a1 + 136) + *(double *)(a1 + 136) + *(double *)(a1 + 144) * (v11 * 3.0)))
        * (1.0
         / (*(double *)(a1 + 64) + v11
                                 * (v11 * 3.0 * *(double *)(a1 + 80) + *(double *)(a1 + 72) + *(double *)(a1 + 72))));
  }
  else
  {
    double v12 = *(double *)pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  }
  *(void *)(a5 + 8) = &unk_26C750B03;
  *(double *)a5 = v12;
}

double sub_21691F4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  BOOL v10 = (double *)(a3 + 24);
  *(void *)a2 = *(void *)(a3 + 24);
  *(double *)(a2 + 8) = sub_21691F674(a3, a4);
  *(double *)(a2 + 16) = sub_21691F6DC(a3, a4);
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      BOOL v10 = (double *)(a4 + 16);
    }
    else {
      BOOL v10 = (double *)(a4 + 24);
    }
  }
  double result = *v10;
  *(double *)(a2 + 24) = *v10;
  return result;
}

double sub_21691F5F8(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)a1 * 3.0;
  double v4 = v2 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  double v5 = v3 - v2 * 6.0;
  double v6 = *(double *)(a1 + 16) * 3.0;
  double v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  double v8 = *(double *)(a1 + 64);
  double v9 = *(double *)(a1 + 72);
  *(double *)(a1 + 96) = v8;
  *(double *)(a1 + 104) = v9 * 3.0 - v8 * 3.0;
  double v10 = *(double *)(a1 + 80);
  double result = v9 * 3.0 - v8 - v10 * 3.0 + *(double *)(a1 + 88);
  *(double *)(a1 + 112) = v8 * 3.0 - v9 * 6.0 + v10 * 3.0;
  *(double *)(a1 + 120) = result;
  return result;
}

double sub_21691F674(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    uint64_t v4 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 24;
    }
    return (*(double *)(a1 + 24) + *(double *)(a1 + 24) + *(double *)(a2 + v4)) * 0.333333333;
  }
  else if (v2 == 2)
  {
    return *(double *)(a1 + 24) + *(double *)(a1 + 56) * *(double *)(a1 + 40);
  }
  else
  {
    return *(double *)(a1 + 24);
  }
}

double sub_21691F6DC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (!v2) {
    return *(double *)(a1 + 24);
  }
  int v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1) {
    goto LABEL_9;
  }
  if (v3 == 2)
  {
    uint64_t v4 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 24;
    }
    return *(double *)(a2 + v4) - *(double *)(a2 + 48) * *(double *)(a2 + 32);
  }
  if (v2 == 1)
  {
LABEL_9:
    uint64_t v6 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v6 = 24;
    }
    return (*(double *)(a1 + 24) + *(double *)(a2 + v6) + *(double *)(a2 + v6)) * 0.333333333;
  }
  else
  {
    uint64_t v7 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v7 = 24;
    }
    return *(double *)(a2 + v7);
  }
}

double sub_21691F784(float64x2_t *a1, const double *a2, uint64_t a3, double *a4, double a5, double a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a1->f64[0] >= a5)
  {
    double v11 = a1[1].f64[1];
    double v12 = 1.0;
    double v10 = 0.0;
    if (v11 <= a6)
    {
LABEL_18:
      double v15 = a1[4].f64[0];
      goto LABEL_20;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(a1 + 2, a2, a5, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    if (v8 >= 0.0) {
      double v10 = v9;
    }
    else {
      double v10 = 0.0;
    }
    double v11 = a1[1].f64[1];
  }
  double v12 = 1.0;
  if (v11 > a6)
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(a1 + 2, a2, a6, a3, a4);
    double v14 = 1.0;
    if (v13 <= 1.0) {
      double v14 = v13;
    }
    if (v13 >= 0.0) {
      double v12 = v14;
    }
    else {
      double v12 = 0.0;
    }
  }
  if (v10 > v12) {
    double v10 = v12;
  }
  if (v10 == 0.0) {
    goto LABEL_18;
  }
  double v15 = a1[6].f64[0] + v10 * (a1[6].f64[1] + v10 * (v10 * a1[7].f64[1] + a1[7].f64[0]));
LABEL_20:
  double v16 = a1[6].f64[1];
  if (v12 == 1.0)
  {
    double v17 = a1[5].f64[1];
    if (v15 >= v17) {
      double v18 = a1[5].f64[1];
    }
    else {
      double v18 = v15;
    }
    float64x2_t v19 = a1[7];
  }
  else
  {
    float64x2_t v19 = a1[7];
    double v20 = a1[6].f64[0] + v12 * (v16 + v12 * (vmuld_lane_f64(v12, v19, 1) + v19.f64[0]));
    if (v15 >= v20) {
      double v18 = v20;
    }
    else {
      double v18 = v15;
    }
  }
  double v24 = 0.0;
  double v25 = 0.0;
  float64x2_t v27 = vmulq_f64(v19, (float64x2_t)xmmword_217457620);
  double v26 = v16;
  if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v26, &v25, &v24, a4))
  {
    if (v25 > v10 && v25 < v12)
    {
      double v21 = a1[6].f64[0] + v25 * (a1[6].f64[1] + v25 * (v25 * a1[7].f64[1] + a1[7].f64[0]));
      if (v18 >= v21) {
        double v18 = a1[6].f64[0] + v25 * (a1[6].f64[1] + v25 * (v25 * a1[7].f64[1] + a1[7].f64[0]));
      }
    }
    if (v24 > v10 && v24 < v12)
    {
      double v22 = a1[6].f64[0] + v24 * (a1[6].f64[1] + v24 * (v24 * a1[7].f64[1] + a1[7].f64[0]));
      if (v18 >= v22) {
        return a1[6].f64[0] + v24 * (a1[6].f64[1] + v24 * (v24 * a1[7].f64[1] + a1[7].f64[0]));
      }
    }
  }
  return v18;
}

float sub_21691F9C0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21691FA2C(a1) & 1) == 0) {
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21691FA64, MEMORY[0x263F8C248]);
  }

  return sub_21691FAAC(a1);
}

uint64_t sub_21691FA2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C248]);
  }
  else {
    return 0;
  }
}

_DWORD *sub_21691FA64@<X0>(void *a1@<X8>)
{
  double result = operator new(4uLL);
  *double result = 0;
  *a1 = result;
  uint64_t v3 = MEMORY[0x263F8C248];
  a1[1] = sub_21691FB0C;
  a1[2] = v3;
  return result;
}

float sub_21691FAAC(void *a1)
{
  int v2 = (float *)sub_21691FB18(a1);
  float v3 = *v2;
  *int v2 = 0.0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

void sub_21691FB0C(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void *sub_21691FB18(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_21691FBA8(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__ *a3)
{
  *(void *)a1 = &unk_26C750D90;
  uint64_t KeyFrameData = (_DWORD *)pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, this);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a3, v6);
  if (KeyFrameData && (uint64_t v8 = v7) != 0)
  {
    sub_21691FE54(a1 + 16, a1 + 80, (uint64_t)KeyFrameData, v7);
    *(float32x2_t *)&double v9 = sub_21691FF58(a1 + 16);
    if ((*(unsigned int (**)(_DWORD *, double))(*(void *)KeyFrameData + 152))(KeyFrameData, v9)
      && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 152))(v8))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = KeyFrameData[5];
    }
  }
  else
  {
    v11[0] = "ts/evalCache.h";
    v11[1] = "_Init";
    uint64_t v11[2] = 499;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<float, true>::_Init(const Ts_TypedData<T> *, const Ts_T"
             "ypedData<T> *) [T = float, INTERPOLATABLE = true]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_21691FCEC(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 48), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    float v12 = v11 * (v11 * (v11 * *(float *)(a1 + 108) + *(float *)(a1 + 104)) + *(float *)(a1 + 100)) + *(float *)(a1 + 96);
  }
  else
  {
    float v12 = *(float *)(a1 + 12);
  }
  *(void *)(a5 + 8) = &unk_26C750A4B;
  *(float *)a5 = v12;
}

void sub_21691FD88(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 48), a2, a6, a3, a4);
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    else {
      double v9 = 1.0;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    float v12 = v11 * (*(float *)(a1 + 104) + *(float *)(a1 + 104) + v11 * 3.0 * *(float *)(a1 + 108)) + *(float *)(a1 + 100);
    float v13 = 1.0
        / (*(double *)(a1 + 56) + v11 * (v11 * 3.0 * *(double *)(a1 + 72) + *(double *)(a1 + 64) + *(double *)(a1 + 64)))
        * v12;
  }
  else
  {
    float v13 = *(float *)pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  }
  *(void *)(a5 + 8) = &unk_26C750A4B;
  *(float *)a5 = v13;
}

float sub_21691FE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  BOOL v10 = (float *)(a3 + 20);
  *(_DWORD *)a2 = *(_DWORD *)(a3 + 20);
  *(float *)(a2 + 4) = sub_21691FFF4(a3, a4);
  *(float *)(a2 + 8) = sub_216920070(a3, a4);
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      BOOL v10 = (float *)(a4 + 16);
    }
    else {
      BOOL v10 = (float *)(a4 + 20);
    }
  }
  float result = *v10;
  *(float *)(a2 + 12) = *v10;
  return result;
}

float32x2_t sub_21691FF58(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)a1 * 3.0;
  double v4 = v2 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  double v5 = v3 + v2 * -6.0;
  double v6 = *(double *)(a1 + 16) * 3.0;
  double v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 64);
  double v8 = *(float *)&v7;
  v9.f64[0] = *(float *)&v7 * 3.0;
  float64_t v10 = *(float *)(a1 + 76);
  float64x2_t v11 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 68));
  float v12 = 3.0 * v11.f64[0] - v9.f64[0];
  *(_DWORD *)(a1 + 80) = LODWORD(v7);
  *(float *)(a1 + 84) = v12;
  float64x2_t v13 = vmulq_f64(v11, (float64x2_t)xmmword_217457630);
  v9.f64[1] = 3.0 * v11.f64[0] - v8;
  *(void *)&v14.f64[0] = vdupq_laneq_s64((int64x2_t)v13, 1).u64[0];
  v14.f64[1] = v10;
  float32x2_t result = vcvt_f32_f64(vaddq_f64(vsubq_f64(v9, v13), v14));
  *(float32x2_t *)(a1 + 88) = result;
  return result;
}

float sub_21691FFF4(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    uint64_t v4 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 20;
    }
    return (*(float *)(a1 + 20) + *(float *)(a1 + 20) + *(float *)(a2 + v4)) * 0.333333333;
  }
  if (v2 == 2) {
    return *(double *)(a1 + 56) * *(float *)(a1 + 28) + *(float *)(a1 + 20);
  }
  return *(float *)(a1 + 20);
}

float sub_216920070(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (!v2) {
    return *(float *)(a1 + 20);
  }
  int v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1) {
    goto LABEL_9;
  }
  if (v3 == 2)
  {
    uint64_t v4 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 20;
    }
    return *(float *)(a2 + v4) - *(double *)(a2 + 48) * *(float *)(a2 + 24);
  }
  if (v2 == 1)
  {
LABEL_9:
    uint64_t v7 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v7 = 20;
    }
    return (*(float *)(a2 + v7) + *(float *)(a2 + v7) + *(float *)(a1 + 20)) * 0.333333333;
  }
  uint64_t v8 = 16;
  if (!*(unsigned char *)(a2 + 68)) {
    uint64_t v8 = 20;
  }
  return *(float *)(a2 + v8);
}

float sub_21692012C(uint64_t a1, const double *a2, uint64_t a3, double *a4, double a5, double a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(double *)a1 >= a5)
  {
    double v11 = *(double *)(a1 + 24);
    double v12 = 1.0;
    double v10 = 0.0;
    if (v11 <= a6)
    {
LABEL_18:
      float v15 = *(float *)(a1 + 64);
      goto LABEL_20;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 32), a2, a5, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    if (v8 >= 0.0) {
      double v10 = v9;
    }
    else {
      double v10 = 0.0;
    }
    double v11 = *(double *)(a1 + 24);
  }
  double v12 = 1.0;
  if (v11 > a6)
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 32), a2, a6, a3, a4);
    double v14 = 1.0;
    if (v13 <= 1.0) {
      double v14 = v13;
    }
    if (v13 >= 0.0) {
      double v12 = v14;
    }
    else {
      double v12 = 0.0;
    }
  }
  if (v10 > v12) {
    double v10 = v12;
  }
  if (v10 == 0.0) {
    goto LABEL_18;
  }
  float v15 = v10 * (v10 * (v10 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84)) + *(float *)(a1 + 80);
LABEL_20:
  double v16 = *(float *)(a1 + 84);
  if (v12 == 1.0)
  {
    float v17 = *(float *)(a1 + 76);
    if (v15 >= v17) {
      float v18 = *(float *)(a1 + 76);
    }
    else {
      float v18 = v15;
    }
    float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 88));
  }
  else
  {
    float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 88));
    float v20 = v12 * (v12 * (vmuld_lane_f64(v12, v19, 1) + v19.f64[0]) + v16) + *(float *)(a1 + 80);
    if (v15 >= v20) {
      float v18 = v20;
    }
    else {
      float v18 = v15;
    }
  }
  double v24 = 0.0;
  double v25 = 0.0;
  float64x2_t v27 = vmulq_f64(v19, (float64x2_t)xmmword_217457620);
  double v26 = v16;
  if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v26, &v25, &v24, a4))
  {
    if (v25 > v10 && v25 < v12)
    {
      float v21 = v25 * (v25 * (v25 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84)) + *(float *)(a1 + 80);
      if (v18 >= v21) {
        float v18 = v25 * (v25 * (v25 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84))
      }
            + *(float *)(a1 + 80);
    }
    if (v24 > v10 && v24 < v12)
    {
      float v22 = v24 * (v24 * (v24 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84)) + *(float *)(a1 + 80);
      if (v18 >= v22) {
        return v24 * (v24 * (v24 * *(float *)(a1 + 92) + *(float *)(a1 + 88)) + *(float *)(a1 + 84))
      }
             + *(float *)(a1 + 80);
    }
  }
  return v18;
}

void sub_2169203B8(void ***a1)
{
  int v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_21692040C((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_21692040C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 56)
  {
    sub_2168EE084(i - 16);
    float32x2_t result = sub_2168EE084(i - 32);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void sub_216920468(double *a1, double *a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  v68[11] = *(double *)MEMORY[0x263EF8340];
  double v8 = *a1;
  double v9 = a1[3];
  if (v9 > a4 && v8 < a5 && v8 < v9)
  {
    double v14 = *a2;
    double v51 = a2[3];
    double v15 = (v51 - *a2) * a7;
    double v16 = (v9 - v8) * a6;
    double v46 = a2[2];
    double v47 = a2[1];
    double v44 = a1[1];
    double v17 = (v44 - v8) * a6;
    double v18 = (v46 - *a2) * a7;
    double v45 = a1[2];
    double v19 = (v45 - v8) * a6;
    double v20 = v16 * v16 + v15 * v15;
    double v21 = (v15 * v18 + v16 * v19) / v20;
    double v50 = a1[3];
    double v22 = hypot((v47 - *a2) * a7 - v15 * ((v15 * ((v47 - *a2) * a7) + v16 * v17) / v20), v17 - v16 * ((v15 * ((v47 - *a2) * a7) + v16 * v17) / v20));
    double v26 = hypot(v18 - v15 * v21, v19 - v16 * v21);
    if (v22 >= v26) {
      double v26 = v22;
    }
    if (v26 <= a8)
    {
      *((void *)&v61 + 1) = &unk_26C750B03;
      *(double *)&long long v61 = v14;
      double v58 = COERCE_DOUBLE(&unk_26C750B03);
      double v57 = v51;
      sub_21691F0CC((uint64_t)&v65, &v61, &v57, 0, v8, v50);
      unint64_t v31 = a3[1];
      if (v31 >= a3[2])
      {
        uint64_t v33 = sub_21691ED40(a3, (long long *)&v65);
      }
      else
      {
        float64x2_t v32 = v65;
        *(double *)(v31 + 16) = v66;
        *(float64x2_t *)unint64_t v31 = v32;
        sub_2168EDFA8((void *)(v31 + 24), v67);
        sub_2168EDFA8((void *)(v31 + 40), v68);
        uint64_t v33 = v31 + 56;
      }
      a3[1] = v33;
      sub_2168EE084((uint64_t)v68);
      sub_2168EE084((uint64_t)v67);
      sub_2168EE084((uint64_t)&v57);
      double v41 = &v61;
    }
    else
    {
      if (v16 > a8)
      {
        double v27 = (v47 * 0.5 + v46 * 0.5) * 0.5;
        double v28 = v27 + (v51 * 0.5 + v46 * 0.5) * 0.5;
        v65.f64[0] = v14;
        v65.f64[1] = v14 * 0.5 + v47 * 0.5;
        double v66 = v65.f64[1] * 0.5 + v27;
        v67[0] = v28 * 0.5 + v66 * 0.5;
        double v29 = (v44 * 0.5 + v45 * 0.5) * 0.5;
        double v30 = v29 + (v50 * 0.5 + v45 * 0.5) * 0.5;
        double v57 = v8;
        double v58 = v8 * 0.5 + v44 * 0.5;
        double v59 = v58 * 0.5 + v29;
        double v60 = v30 * 0.5 + v59 * 0.5;
        *(double *)&long long v61 = v67[0];
        *((double *)&v61 + 1) = v28;
        double v62 = v51 * 0.5 + v46 * 0.5;
        *(double *)double v63 = v51;
        double v53 = v60;
        double v54 = v30;
        double v55 = v50 * 0.5 + v45 * 0.5;
        double v56 = v50;
        sub_216920468(&v57, &v65, a3, a4, a5, a6, a7, a8);
        sub_216920468(&v53, &v61, a3, a4, a5, a6, a7, a8);
        return;
      }
      v65.f64[0] = v8;
      v65.f64[1] = v44;
      double v66 = v45;
      v67[0] = v50;
      v68[3] = v14;
      v68[4] = v47;
      v68[5] = v46;
      v68[6] = v51;
      v67[1] = v8;
      v68[0] = v44 * 3.0 - v8 * 3.0;
      v68[1] = v8 * 3.0 - v44 * 6.0 + v45 * 3.0;
      v68[2] = v50 + v44 * 3.0 - v8 - v45 * 3.0;
      v68[7] = v14;
      v68[8] = v47 * 3.0 - v14 * 3.0;
      v68[9] = v14 * 3.0 - v47 * 6.0 + v46 * 3.0;
      v68[10] = v51 + v47 * 3.0 - v14 - v46 * 3.0;
      double v34 = sub_21691F784(&v65, v23, v24, v25, a4, a5);
      double v36 = *a1;
      if (*a1 < a4) {
        double v36 = a4;
      }
      double v58 = COERCE_DOUBLE(&unk_26C750B03);
      double v57 = v34;
      if (a1[3] >= a5) {
        double v37 = a5;
      }
      else {
        double v37 = a1[3];
      }
      double v54 = COERCE_DOUBLE(&unk_26C750B03);
      double v53 = v35;
      sub_21691F0CC((uint64_t)&v61, &v57, &v53, 1, v36, v37);
      unint64_t v38 = a3[1];
      if (v38 >= a3[2])
      {
        uint64_t v40 = sub_21691ED40(a3, &v61);
      }
      else
      {
        long long v39 = v61;
        *(double *)(v38 + 16) = v62;
        *(_OWORD *)unint64_t v38 = v39;
        sub_2168EDFA8((void *)(v38 + 24), v63);
        sub_2168EDFA8((void *)(v38 + 40), v64);
        uint64_t v40 = v38 + 56;
      }
      a3[1] = v40;
      sub_2168EE084((uint64_t)v64);
      sub_2168EE084((uint64_t)v63);
      sub_2168EE084((uint64_t)&v53);
      double v41 = (long long *)&v57;
    }
    sub_2168EE084((uint64_t)v41);
  }
}

void sub_2169208E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_2168EE084(v13 + 40);
  sub_2168EE084(v13 + 24);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216920948(uint64_t result, uint64_t a2, int a3, double a4)
{
  double v4 = 1.0 - a4;
  double v5 = *(float *)(result + 4);
  double v6 = *(float *)(result + 8);
  float v7 = (1.0 - a4) * v5 + v6 * a4;
  if (a3)
  {
    float v8 = v4 * v6 + *(float *)(result + 12) * a4;
    double v9 = v7;
    float v10 = v4 * v9 + v8 * a4;
    *(_DWORD *)a2 = *(_DWORD *)result;
    float v11 = v4 * *(float *)result + *(float *)(result + 4) * a4;
    float v12 = v9 * a4 + v4 * v11;
    float v13 = v10 * a4 + v4 * v12;
    *(float *)(a2 + 12) = v13;
  }
  else
  {
    float v14 = v5 * a4 + v4 * *(float *)result;
    double v15 = v7;
    float v16 = v7 * a4 + v4 * v14;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
    float v12 = v4 * *(float *)(result + 8) + *(float *)(result + 12) * a4;
    float v11 = v4 * v15 + v12 * a4;
    float v17 = v4 * v16 + v11 * a4;
    *(float *)a2 = v17;
  }
  *(float *)(a2 + 4) = v11;
  *(float *)(a2 + 8) = v12;
  return result;
}

void sub_216920A84(double *a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  double v8 = *a1;
  double v9 = a1[3];
  if (v9 > a4 && v8 < a5 && v8 < v9)
  {
    float v15 = *(float *)a2;
    float v55 = *(float *)(a2 + 12);
    float v16 = (float)(v55 - *(float *)a2) * a7;
    double v17 = (v9 - v8) * a6;
    float v46 = *(float *)(a2 + 8);
    float v47 = *(float *)(a2 + 4);
    float v18 = (float)(v47 - *(float *)a2) * a7;
    double v54 = a1[3];
    double v50 = a1[2];
    double v51 = a1[1];
    double v19 = (v51 - v8) * a6;
    float v20 = (float)(v46 - *(float *)a2) * a7;
    double v21 = (v50 - v8) * a6;
    double v22 = v17 * v17 + (float)(v16 * v16);
    double v23 = (v17 * v19 + (float)(v16 * v18)) / v22;
    double v24 = (v17 * v21 + (float)(v16 * v20)) / v22;
    double v25 = v16;
    double v26 = hypot(v18 - v23 * v16, v19 - v17 * v23);
    double v27 = hypot(v20 - v24 * v25, v21 - v17 * v24);
    if (v26 >= v27) {
      double v27 = v26;
    }
    if (v27 <= a8)
    {
      *((void *)&v58 + 1) = &unk_26C750A4B;
      *(float *)&long long v58 = v15;
      double v71 = &unk_26C750A4B;
      *(float *)&uint64_t v70 = v55;
      sub_21691F0CC((uint64_t)&v62, &v58, &v70, 0, v8, v54);
      unint64_t v32 = a3[1];
      if (v32 >= a3[2])
      {
        uint64_t v34 = sub_21691ED40(a3, &v62);
      }
      else
      {
        long long v33 = v62;
        *(double *)(v32 + 16) = v63;
        *(_OWORD *)unint64_t v32 = v33;
        sub_2168EDFA8((void *)(v32 + 24), v64);
        sub_2168EDFA8((void *)(v32 + 40), v65);
        uint64_t v34 = v32 + 56;
      }
      a3[1] = v34;
      sub_2168EE084((uint64_t)v65);
      sub_2168EE084((uint64_t)v64);
      sub_2168EE084((uint64_t)&v70);
      double v45 = &v58;
    }
    else
    {
      if (v17 > a8)
      {
        sub_216920948(a2, (uint64_t)&v70, 1, 0.5);
        double v28 = (v51 * 0.5 + v50 * 0.5) * 0.5;
        double v29 = v28 + (v54 * 0.5 + v50 * 0.5) * 0.5;
        double v30 = (v8 * 0.5 + v51 * 0.5) * 0.5 + v28;
        *(double *)&long long v62 = v8;
        *((double *)&v62 + 1) = v8 * 0.5 + v51 * 0.5;
        double v31 = v29 * 0.5 + v30 * 0.5;
        double v63 = v30;
        v64[0] = v31;
        sub_216920948(a2, (uint64_t)v57, 0, 0.5);
        *(double *)&long long v58 = v31;
        *((double *)&v58 + 1) = v29;
        double v59 = v54 * 0.5 + v50 * 0.5;
        *(double *)double v60 = v54;
        sub_216920A84(&v62, &v70, a3, a4, a5, a6, a7, a8);
        sub_216920A84(&v58, v57, a3, a4, a5, a6, a7, a8);
        return;
      }
      *(double *)&long long v62 = v8;
      *((double *)&v62 + 1) = v51;
      double v63 = v50;
      v64[0] = v54;
      float v66 = v15;
      float v67 = v47;
      float v68 = v46;
      float v69 = v55;
      sub_21691FF58((uint64_t)&v62);
      float v38 = sub_21692012C((uint64_t)&v62, v35, v36, v37, a4, a5);
      double v40 = *a1;
      if (*a1 < a4) {
        double v40 = a4;
      }
      double v71 = &unk_26C750A4B;
      *(float *)&uint64_t v70 = v38;
      if (a1[3] >= a5) {
        double v41 = a5;
      }
      else {
        double v41 = a1[3];
      }
      v57[1] = &unk_26C750A4B;
      LODWORD(v57[0]) = v39;
      sub_21691F0CC((uint64_t)&v58, &v70, v57, 1, v40, v41);
      unint64_t v42 = a3[1];
      if (v42 >= a3[2])
      {
        uint64_t v44 = sub_21691ED40(a3, &v58);
      }
      else
      {
        long long v43 = v58;
        *(double *)(v42 + 16) = v59;
        *(_OWORD *)unint64_t v42 = v43;
        sub_2168EDFA8((void *)(v42 + 24), v60);
        sub_2168EDFA8((void *)(v42 + 40), v61);
        uint64_t v44 = v42 + 56;
      }
      a3[1] = v44;
      sub_2168EE084((uint64_t)v61);
      sub_2168EE084((uint64_t)v60);
      sub_2168EE084((uint64_t)v57);
      double v45 = (long long *)&v70;
    }
    sub_2168EE084((uint64_t)v45);
  }
}

void sub_216920EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168EE084(v11 + 40);
  sub_2168EE084(v11 + 24);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084(v12 - 120);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::Ts_TypedData(uint64_t a1, int *a2)
{
  *(void *)a1 = &unk_26C750DC8;
  *(void *)(a1 + 8) = 0;
  double v4 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  double v5 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  int v6 = *a2;
  int v7 = *v4;
  int v8 = *v5;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(void *)(a1 + 62) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_ValuesHolder(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::Ts_TypedData(uint64_t a1, double *a2, char a3, _DWORD *a4, int *a5, int *a6, int *a7)
{
  *(void *)a1 = &unk_26C750DC8;
  *(void *)(a1 + 8) = 0;
  int v7 = *a5;
  int v8 = *a6;
  int v9 = *a7;
  *(_DWORD *)(a1 + 16) = *a4;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 28) = v9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = a3;
  *(unsigned char *)(a1 + 69) = 0;
  double result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

{
  int v7;
  int v8;
  int v9;
  double result;

  *(void *)a1 = &unk_26C750DC8;
  *(void *)(a1 + 8) = 0;
  int v7 = *a5;
  int v8 = *a6;
  int v9 = *a7;
  *(_DWORD *)(a1 + 16) = *a4;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 28) = v9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = a3;
  *(unsigned char *)(a1 + 69) = 0;
  double result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C750DC8;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CreateEvalCache@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  double v5 = a1;
  sub_216924478(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::EvalUncached(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  sub_2169245AC((uint64_t)v14, a1, a2);
  if (v14[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v16, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    float v13 = v12 * (v12 * (v12 * v20 + v19) + v18) + v17;
  }
  else
  {
    float v13 = v15;
  }
  *(void *)(a3 + 8) = &unk_26C750A4B;
  *(float *)a3 = v13;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::EvalDerivativeUncached(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  sub_2169245AC((uint64_t)v15, a1, a2);
  if (v15[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(&v16, v6, a4, v7, v8);
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    else {
      double v10 = 1.0;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    float v13 = v12 * (v20 + v20 + v12 * 3.0 * v21) + v19;
    float v14 = 1.0 / (v16.f64[1] + v12 * (v12 * 3.0 * v18 + v17 + v17)) * v13;
  }
  else
  {
    float v14 = *(float *)pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  }
  *(void *)(a3 + 8) = &unk_26C750A4B;
  *(float *)a3 = v14;
}

void *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CreateTypedEvalCache@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v6 = operator new(0x70uLL);
  sub_2169245AC((uint64_t)v6, a1, a2);

  return sub_2169246DC(a3, (uint64_t)v6);
}

void sub_2169212E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::operator==(double *a1, double *a2)
{
  void v23[2] = *MEMORY[0x263EF8340];
  if (a1[1] != a2[1]) {
    return 0;
  }
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v23);
  (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 80))(&v22, a2);
  if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v23, &v22, v4))
  {
    int v5 = (*(uint64_t (**)(double *))(*(void *)a1 + 56))(a1);
    if (v5 == (*(unsigned int (**)(double *))(*(void *)a2 + 56))(a2))
    {
      int v6 = (*(uint64_t (**)(double *))(*(void *)a1 + 104))(a1);
      if (v6 == (*(unsigned int (**)(double *))(*(void *)a2 + 104))(a2))
      {
        int v9 = (*(uint64_t (**)(double *))(*(void *)a1 + 104))(a1);
        if (v9
          && ((*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 120))(v21, a1),
              (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 120))(&v20, a2),
              !pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v10)))
        {
          uint64_t v7 = 0;
        }
        else
        {
          double v11 = (*(double (**)(double *))(*(void *)a1 + 216))(a1);
          if (v11 == (*(double (**)(double *))(*(void *)a2 + 216))(a2)
            && (double v12 = (*(double (**)(double *))(*(void *)a1 + 224))(a1),
                v12 == (*(double (**)(double *))(*(void *)a2 + 224))(a2)))
          {
            (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 200))(v19, a1);
            (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 200))(&v18, a2);
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v19, &v18, v13))
            {
              (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 208))(v17, a1);
              (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 208))(&v16, a2);
              if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v17, &v16, v14))
              {
                int v15 = (*(uint64_t (**)(double *))(*(void *)a1 + 264))(a1);
                uint64_t v7 = v15 ^ (*(unsigned int (**)(double *))(*(void *)a2 + 264))(a2) ^ 1;
              }
              else
              {
                uint64_t v7 = 0;
              }
              sub_2168EE084((uint64_t)&v16);
              sub_2168EE084((uint64_t)v17);
            }
            else
            {
              uint64_t v7 = 0;
            }
            sub_2168EE084((uint64_t)&v18);
            sub_2168EE084((uint64_t)v19);
            if ((v9 & 1) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v7 = 0;
            if (!v9) {
              goto LABEL_6;
            }
          }
        }
        sub_2168EE084((uint64_t)&v20);
        sub_2168EE084((uint64_t)v21);
        goto LABEL_6;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  sub_2168EE084((uint64_t)&v22);
  sub_2168EE084((uint64_t)v23);
  return v7;
}

void sub_216921794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v16 = va_arg(va4, void);
  uint64_t v18 = va_arg(va4, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va2);
  if (v4)
  {
    sub_2168EE084((uint64_t)va3);
    sub_2168EE084((uint64_t)va4);
  }
  sub_2168EE084(v5 - 88);
  sub_2168EE084(v5 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetKnotType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetKnotType(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetKnotType(TsKnotType) [T = float]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169218F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::CanSetKnotType(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 1;
  }
  if (a3 && (v6 & 1) == 0) {
    MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
  }
  return v6;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetValue@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750A4B;
  float result = *(float *)(a1 + 20);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetRightValue(uint64_t a1)
{
  return a1 + 20;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetValue(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  char v4 = sub_216921B90(a2);
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    a1[5] = *(_DWORD *)sub_216921C28(v5);
    if (((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(_DWORD *, void))(*(void *)a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    void v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetValue(VtValue) [T = float]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    uint64_t v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v10 = v15;
    if (v8 < 0) {
      uint64_t v10 = v9;
    }
    if (v14 >= 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_216921B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

std::type_info *sub_216921B90(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  double v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21691FA2C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C248], v1, v3);
    double v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetRightValue(uint64_t a1, float *a2)
{
  float result = *a2;
  *(float *)(a1 + 20) = *a2;
  return result;
}

uint64_t sub_216921C28(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21691FA2C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unsigned int v5 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8C248];
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21691FA64, v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetIsDualValued(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

unsigned char *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetIsDualValued(unsigned char *result, int a2)
{
  v3[2] = *MEMORY[0x263EF8340];
  result[68] = a2;
  if (a2)
  {
    uint64_t v2 = result;
    (*(void (**)(void *__return_ptr))(*(void *)result + 80))(v3);
    (*(void (**)(unsigned char *, void *))(*(void *)v2 + 136))(v2, v3);
    return (unsigned char *)sub_2168EE084((uint64_t)v3);
  }
  return result;
}

void sub_216921DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftValue@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 16;
  if (!*(unsigned char *)(a1 + 68)) {
    uint64_t v2 = 20;
  }
  *(void *)(a2 + 8) = &unk_26C750A4B;
  float result = *(float *)(a1 + v2);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetLeftValue(uint64_t a1)
{
  return a1 + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftValue(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 104))(a1))
  {
    uint64_t v4 = sub_216921B90(a2);
    unsigned int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v21, v4);
    if (v21[1])
    {
      a1[4] = *(_DWORD *)sub_216921C28(v5);
      if (((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(_DWORD *, void))(*(void *)a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v16 = "ts/data.h";
      double v17 = "SetLeftValue";
      uint64_t v18 = 737;
      float v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftValue(VtValue) [T = float]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      int v8 = v15;
      uint64_t v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      uint64_t v10 = v14;
      if (v8 < 0) {
        uint64_t v10 = v9;
      }
      if (v13 >= 0) {
        double v11 = __p;
      }
      else {
        double v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    sub_2168EE084((uint64_t)v21);
  }
  else
  {
    char v16 = "ts/data.h";
    double v17 = "SetLeftValue";
    uint64_t v18 = 725;
    float v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftValue(VtValue) [T = float]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_216922018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetLeftValue(uint64_t a1, float *a2)
{
  float result = *a2;
  *(float *)(a1 + 16) = *a2;
  return result;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetZero@<S0>(uint64_t a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero();
  *(void *)(a1 + 8) = &unk_26C750A4B;
  float result = *(float *)v2;
  *(_DWORD *)a1 = *v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ValueCanBeExtrapolated()
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::HasTangents(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ValueTypeSupportsTangents()
{
  return 1;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftTangentSlope@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750A4B;
  float result = *(float *)(a1 + 24);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetLeftTangentSlope(uint64_t a1)
{
  return a1 + 24;
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetRightTangentSlope@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750A4B;
  float result = *(float *)(a1 + 28);
  *(float *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_GetRightTangentSlope(uint64_t a1)
{
  return a1 + 28;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetLeftTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetRightTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_216921B90(a2);
  sub_2168EE4C4(v18, v4);
  if (v18[1])
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)sub_216921C28(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetLeftTangentSlope";
    void v16[2] = 846;
    float64x2_t v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentSlope(VtValue) [T = float]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    int v7 = v15;
    int v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v9 = v14;
    if (v7 < 0) {
      uint64_t v9 = v8;
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  return sub_2168EE084((uint64_t)v18);
}

void sub_21692226C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetLeftTangentSlope(uint64_t a1, float *a2)
{
  float result = *a2;
  *(float *)(a1 + 24) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_216921B90(a2);
  sub_2168EE4C4(v18, v4);
  if (v18[1])
  {
    *(_DWORD *)(a1 + 28) = *(_DWORD *)sub_216921C28(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetRightTangentSlope";
    void v16[2] = 866;
    float64x2_t v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentSlope(VtValue) [T = float]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    int v7 = v15;
    int v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v9 = v14;
    if (v7 < 0) {
      uint64_t v9 = v8;
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  return sub_2168EE084((uint64_t)v18);
}

void sub_21692240C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_SetRightTangentSlope(uint64_t a1, float *a2)
{
  float result = *a2;
  *(float *)(a1 + 28) = *a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentLength(uint64_t a1, double a2)
{
  if (fabs(a2) == INFINITY)
  {
    uint64_t v3 = "ts/data.h";
    uint64_t v4 = "SetLeftTangentLength";
    uint64_t v5 = 886;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentLength(TsTime) [T = float]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (BOOL v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    uint64_t v3 = "ts/data.h";
    uint64_t v4 = "SetLeftTangentLength";
    uint64_t v5 = 894;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetLeftTangentLength(TsTime) [T = float]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 48) = a2;
  }
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentLength(uint64_t a1, double a2)
{
  if (fabs(a2) == INFINITY)
  {
    uint64_t v3 = "ts/data.h";
    uint64_t v4 = "SetRightTangentLength";
    uint64_t v5 = 916;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentLength(TsTime) [T = float]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (BOOL v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    uint64_t v3 = "ts/data.h";
    uint64_t v4 = "SetRightTangentLength";
    uint64_t v5 = 924;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetRightTangentLength(TsTime) [T = float]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 56) = a2;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetTangentSymmetryBroken(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 69);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::SetTangentSymmetryBroken(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 69) != a2)
  {
    *(unsigned char *)(a1 + 69) = a2;
    if ((a2 & 1) == 0)
    {
      float result = *(float *)(a1 + 28);
      *(float *)(a1 + 24) = result;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::GetSlope@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v11[2] = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v11);
  float v7 = sub_21691F9C0((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_2168EE084((uint64_t)v11);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v11, a2);
  float v8 = sub_21691F9C0((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  uint64_t result = sub_2168EE084((uint64_t)v11);
  float v10 = 1.0 / (v5 - v6) * (float)(v8 - v7);
  *(void *)(a3 + 8) = &unk_26C750A4B;
  *(float *)a3 = v10;
  return result;
}

void sub_2169227AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::Extrapolate@<S0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  float v7 = *(float *)sub_216921C28(a1);
  float result = *(float *)sub_216921C28(a2) * a4 + v7;
  *(void *)(a3 + 8) = &unk_26C750A4B;
  *(float *)a3 = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_LocalStorage::_LocalStorage(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::_HeapStorage(void *a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  _OWORD *v4 = *a2;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;

  uint64_t v4 = operator new(0x10uLL);
  _OWORD *v4 = *a2;
  *a1 = v4;
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::_HeapStorage(void *a1, _OWORD **a2)
{
  uint64_t v4 = operator new(0x10uLL);
  _OWORD *v4 = **a2;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;

  uint64_t v4 = operator new(0x10uLL);
  _OWORD *v4 = **a2;
  *a1 = v4;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::Get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::_ValuesHolder::_HeapStorage::GetMutable(uint64_t a1)
{
  return *(void *)a1;
}

void *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Ts_TypedData(void *a1, uint64_t *a2)
{
  *a1 = &unk_26C750EF8;
  a1[1] = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  double v5 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  uint64_t v6 = *a2;
  uint64_t v7 = *v4;
  uint64_t v8 = *v5;
  a1[2] = *a2;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  *(void *)((char *)a1 + 62) = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_ValuesHolder(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  long long v3;

  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  long long v3;

  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  long long v3;

  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Ts_TypedData(uint64_t a1, double *a2, char a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  *(void *)a1 = &unk_26C750EF8;
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = *a5;
  uint64_t v8 = *a6;
  uint64_t v9 = *a7;
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = a3;
  *(unsigned char *)(a1 + 69) = 0;
  double result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  *(void *)a1 = &unk_26C750EF8;
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = *a5;
  uint64_t v8 = *a6;
  uint64_t v9 = *a7;
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = a3;
  *(unsigned char *)(a1 + 69) = 0;
  double result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C750EF8;
  long long v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v2;
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CreateEvalCache@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  double v5 = a1;
  sub_2169247CC(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::EvalUncached(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  sub_216924900((uint64_t)v14, a1, a2);
  if (v14[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v16, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    double v13 = v17 + v12 * (v18 + v12 * (v19 + v20 * v12));
  }
  else
  {
    double v13 = v15;
  }
  *(void *)(a3 + 8) = &unk_26C750B03;
  *(double *)a3 = v13;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::EvalDerivativeUncached(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  sub_216924900((uint64_t)v14, a1, a2);
  if (v14[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(&v15, v6, a4, v7, v8);
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    else {
      double v10 = 1.0;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    double v13 = (v18 + v12 * (v19 + v19 + v20 * (v12 * 3.0))) * (1.0 / (v15.f64[1] + v12 * (v12 * 3.0 * v17 + v16 + v16)));
  }
  else
  {
    double v13 = *(double *)pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  }
  *(void *)(a3 + 8) = &unk_26C750B03;
  *(double *)a3 = v13;
}

void *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CreateTypedEvalCache@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v6 = operator new(0x98uLL);
  sub_216924900((uint64_t)v6, a1, a2);

  return sub_216924A30(a3, (uint64_t)v6);
}

void sub_216922D34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::operator==(double *a1, double *a2)
{
  void v23[2] = *MEMORY[0x263EF8340];
  if (a1[1] != a2[1]) {
    return 0;
  }
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v23);
  (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 80))(&v22, a2);
  if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v23, &v22, v4))
  {
    int v5 = (*(uint64_t (**)(double *))(*(void *)a1 + 56))(a1);
    if (v5 == (*(unsigned int (**)(double *))(*(void *)a2 + 56))(a2))
    {
      int v6 = (*(uint64_t (**)(double *))(*(void *)a1 + 104))(a1);
      if (v6 == (*(unsigned int (**)(double *))(*(void *)a2 + 104))(a2))
      {
        int v9 = (*(uint64_t (**)(double *))(*(void *)a1 + 104))(a1);
        if (v9
          && ((*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 120))(v21, a1),
              (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 120))(&v20, a2),
              !pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v10)))
        {
          uint64_t v7 = 0;
        }
        else
        {
          double v11 = (*(double (**)(double *))(*(void *)a1 + 216))(a1);
          if (v11 == (*(double (**)(double *))(*(void *)a2 + 216))(a2)
            && (double v12 = (*(double (**)(double *))(*(void *)a1 + 224))(a1),
                v12 == (*(double (**)(double *))(*(void *)a2 + 224))(a2)))
          {
            (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 200))(v19, a1);
            (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 200))(&v18, a2);
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v19, &v18, v13))
            {
              (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 208))(v17, a1);
              (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 208))(&v16, a2);
              if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v17, &v16, v14))
              {
                int v15 = (*(uint64_t (**)(double *))(*(void *)a1 + 264))(a1);
                uint64_t v7 = v15 ^ (*(unsigned int (**)(double *))(*(void *)a2 + 264))(a2) ^ 1;
              }
              else
              {
                uint64_t v7 = 0;
              }
              sub_2168EE084((uint64_t)&v16);
              sub_2168EE084((uint64_t)v17);
            }
            else
            {
              uint64_t v7 = 0;
            }
            sub_2168EE084((uint64_t)&v18);
            sub_2168EE084((uint64_t)v19);
            if ((v9 & 1) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v7 = 0;
            if (!v9) {
              goto LABEL_6;
            }
          }
        }
        sub_2168EE084((uint64_t)&v20);
        sub_2168EE084((uint64_t)v21);
        goto LABEL_6;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  sub_2168EE084((uint64_t)&v22);
  sub_2168EE084((uint64_t)v23);
  return v7;
}

void sub_2169231E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v16 = va_arg(va4, void);
  uint64_t v18 = va_arg(va4, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va2);
  if (v4)
  {
    sub_2168EE084((uint64_t)va3);
    sub_2168EE084((uint64_t)va4);
  }
  sub_2168EE084(v5 - 88);
  sub_2168EE084(v5 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetKnotType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetKnotType(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetKnotType(TsKnotType) [T = double]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216923348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CanSetKnotType(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 1;
  }
  if (a3 && (v6 & 1) == 0) {
    MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
  }
  return v6;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetValue@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750B03;
  double result = *(double *)(a1 + 24);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetRightValue(uint64_t a1)
{
  return a1 + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetValue(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  char v4 = sub_2169235E0(a2);
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    a1[3] = *(void *)sub_21691CEA0(v5);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    void v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetValue(VtValue) [T = double]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    uint64_t v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v10 = v15;
    if (v8 < 0) {
      uint64_t v10 = v9;
    }
    if (v14 >= 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_216923590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

std::type_info *sub_2169235E0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  double v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21691CE68(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C240], v1, v3);
    double v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetRightValue(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 24) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetIsDualValued(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

unsigned char *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetIsDualValued(unsigned char *result, int a2)
{
  v3[2] = *MEMORY[0x263EF8340];
  result[68] = a2;
  if (a2)
  {
    int v2 = result;
    (*(void (**)(void *__return_ptr))(*(void *)result + 80))(v3);
    (*(void (**)(unsigned char *, void *))(*(void *)v2 + 136))(v2, v3);
    return (unsigned char *)sub_2168EE084((uint64_t)v3);
  }
  return result;
}

void sub_21692375C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftValue@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 16;
  if (!*(unsigned char *)(a1 + 68)) {
    uint64_t v2 = 24;
  }
  *(void *)(a2 + 8) = &unk_26C750B03;
  double result = *(double *)(a1 + v2);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetLeftValue(uint64_t a1)
{
  return a1 + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftValueDerivative(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftValue(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    char v4 = sub_2169235E0(a2);
    unsigned int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v21, v4);
    if (v21[1])
    {
      a1[2] = *(void *)sub_21691CEA0(v5);
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v16 = "ts/data.h";
      double v17 = "SetLeftValue";
      uint64_t v18 = 737;
      double v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftValue(VtValue) [T = double]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      int v8 = v15;
      uint64_t v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      uint64_t v10 = v14;
      if (v8 < 0) {
        uint64_t v10 = v9;
      }
      if (v13 >= 0) {
        double v11 = __p;
      }
      else {
        double v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    sub_2168EE084((uint64_t)v21);
  }
  else
  {
    char v16 = "ts/data.h";
    double v17 = "SetLeftValue";
    uint64_t v18 = 725;
    double v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftValue(VtValue) [T = double]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_2169239D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetLeftValue(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 16) = *a2;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetZero@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
  a1[1] = (uint64_t)&unk_26C750B03;
  double result = *(double *)v2;
  *a1 = *v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ValueCanBeExtrapolated()
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::HasTangents(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ValueTypeSupportsTangents()
{
  return 1;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftTangentSlope@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750B03;
  double result = *(double *)(a1 + 32);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetLeftTangentSlope(uint64_t a1)
{
  return a1 + 32;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetRightTangentSlope@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750B03;
  double result = *(double *)(a1 + 40);
  *(double *)a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_GetRightTangentSlope(uint64_t a1)
{
  return a1 + 40;
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetLeftTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetRightTangentLength(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  char v4 = sub_2169235E0(a2);
  sub_2168EE4C4(v18, v4);
  if (v18[1])
  {
    *(void *)(a1 + 32) = *(void *)sub_21691CEA0(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetLeftTangentSlope";
    void v16[2] = 846;
    float64x2_t v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentSlope(VtValue) [T = double]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    int v7 = v15;
    int v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v9 = v14;
    if (v7 < 0) {
      uint64_t v9 = v8;
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  return sub_2168EE084((uint64_t)v18);
}

void sub_216923C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetLeftTangentSlope(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 32) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentSlope(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  char v4 = sub_2169235E0(a2);
  sub_2168EE4C4(v18, v4);
  if (v18[1])
  {
    *(void *)(a1 + 40) = *(void *)sub_21691CEA0(a2);
  }
  else
  {
    v16[0] = "ts/data.h";
    v16[1] = "SetRightTangentSlope";
    void v16[2] = 866;
    float64x2_t v16[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentSlope(VtValue) [T = double]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v5, v6, (uint64_t)v14);
    int v7 = v15;
    int v8 = (void **)v14[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v9 = v14;
    if (v7 < 0) {
      uint64_t v9 = v8;
    }
    if (v13 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v9, (const char *)v10);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  return sub_2168EE084((uint64_t)v18);
}

void sub_216923DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_SetRightTangentSlope(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentLength(uint64_t a1, double a2)
{
  if (fabs(a2) == INFINITY)
  {
    long long v3 = "ts/data.h";
    char v4 = "SetLeftTangentLength";
    uint64_t v5 = 886;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentLength(TsTime) [T = double]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (BOOL v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    long long v3 = "ts/data.h";
    char v4 = "SetLeftTangentLength";
    uint64_t v5 = 894;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetLeftTangentLength(TsTime) [T = double]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 48) = a2;
  }
}

void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentLength(uint64_t a1, double a2)
{
  if (fabs(a2) == INFINITY)
  {
    long long v3 = "ts/data.h";
    char v4 = "SetRightTangentLength";
    uint64_t v5 = 916;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentLength(TsTime) [T = double]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to inf; ignoring");
  }
  else if (a2 < 0.0 && (BOOL v2 = a2 <= -0.000001, a2 = 0.0, v2))
  {
    long long v3 = "ts/data.h";
    char v4 = "SetRightTangentLength";
    uint64_t v5 = 924;
    uint64_t v6 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetRightTangentLength(TsTime) [T = double]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set tangent length to negative value; ignoring");
  }
  else
  {
    *(double *)(a1 + 56) = a2;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetTangentSymmetryBroken(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 69);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::SetTangentSymmetryBroken(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 69) != a2)
  {
    *(unsigned char *)(a1 + 69) = a2;
    if ((a2 & 1) == 0)
    {
      double result = *(double *)(a1 + 40);
      *(double *)(a1 + 32) = result;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::GetSlope@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD v10[2] = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v10);
  double v7 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  sub_2168EE084((uint64_t)v10);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v10, a2);
  double v8 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  uint64_t result = sub_2168EE084((uint64_t)v10);
  *(void *)(a3 + 8) = &unk_26C750B03;
  *(double *)a3 = 1.0 / (v5 - v6) * (v8 - v7);
  return result;
}

void sub_216924160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Extrapolate@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v7 = *(double *)sub_21691CEA0(a1);
  double result = v7 + *(double *)sub_21691CEA0(a2) * a4;
  *(void *)(a3 + 8) = &unk_26C750B03;
  *(double *)a3 = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_LocalStorage::_LocalStorage(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

{
  __n128 result;
  long long v3;

  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::_HeapStorage(void *a1, _OWORD *a2)
{
  char v4 = operator new(0x20uLL);
  long long v5 = a2[1];
  _OWORD *v4 = *a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;
  long long v5;

  char v4 = operator new(0x20uLL);
  long long v5 = a2[1];
  _OWORD *v4 = *a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::_HeapStorage(void *a1, _OWORD **a2)
{
  char v4 = operator new(0x20uLL);
  long long v5 = (*a2)[1];
  _OWORD *v4 = **a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

{
  _OWORD *v4;
  long long v5;

  char v4 = operator new(0x20uLL);
  long long v5 = (*a2)[1];
  _OWORD *v4 = **a2;
  v4[1] = v5;
  *a1 = v4;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::Get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::_ValuesHolder::_HeapStorage::GetMutable(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ResetTangentSymmetryBroken(uint64_t result)
{
  if (*(_DWORD *)(result + 64) == 2 && vabds_f32(*(float *)(result + 24), *(float *)(result + 28)) >= 0.0001) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 272))(result, 1);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ResetTangentSymmetryBroken(uint64_t result)
{
  if (*(_DWORD *)(result + 64) == 2 && vabdd_f64(*(double *)(result + 32), *(double *)(result + 40)) >= 0.0001) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 272))(result, 1);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::ValueCanBeInterpolated(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 68)) {
    return (*(_DWORD *)(a1 + 16) & 0x7FFFFFFFu) < 0x7F800000;
  }
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::ValueCanBeInterpolated(uint64_t a1)
{
  if ((*(void *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 68)) {
    return (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return 1;
}

void *sub_216924478@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  double v6 = operator new(0x88uLL);
  __n128 result = sub_2169244DC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2169244C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169244DC(void *a1, _DWORD **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C751068;
  sub_2169245AC((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21692452C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216924540(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216924560(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2169245AC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C750D90;
  if (a2 && a3)
  {
    sub_21691FE54(a1 + 16, a1 + 80, (uint64_t)a2, a3);
    *(float32x2_t *)&double v6 = sub_21691FF58(a1 + 16);
    if ((*(unsigned int (**)(_DWORD *, double))(*(void *)a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = a2[5];
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    _OWORD v8[2] = 499;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<float, true>::_Init(const Ts_TypedData<T> *, const Ts_Ty"
            "pedData<T> *) [T = float, INTERPOLATABLE = true]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void *sub_2169246DC(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C7510B8;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216924734(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216924750(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216924778(uint64_t a1)
{
  double v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_216924788(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C751108)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_2169247CC@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  double v6 = operator new(0xB0uLL);
  __n128 result = sub_216924830(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21692481C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216924830(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C751130;
  sub_216924900((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_216924880(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216924894(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169248B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751130;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216924900(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C750D48;
  if (a2 && a3)
  {
    sub_21691F4F4(a1 + 24, a1 + 88, (uint64_t)a2, a3);
    double v6 = sub_21691F5F8(a1 + 24);
    if ((*(unsigned int (**)(void *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = a2[3];
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    _OWORD v8[2] = 499;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<double, true>::_Init(const Ts_TypedData<T> *, const Ts_T"
            "ypedData<T> *) [T = double, INTERPOLATABLE = true]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void *sub_216924A30(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C751180;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216924A88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216924AA4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216924ACC(uint64_t a1)
{
  double v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_216924ADC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7511D0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

double pxrInternal__aapl__pxrReserved__::TsFindChangedInterval@<D0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::TsSpline *a2@<X1>, _OWORD *a3@<X8>)
{
  v43[2] = *MEMORY[0x263EF8340];
  double v35 = this;
  uint64_t v36 = a2;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  *(void *)&long long v40 = 0xFFF0000000000000;
  BYTE8(v40) = 0;
  *(void *)&long long v41 = 0x7FF0000000000000;
  BYTE8(v41) = 0;
  uint64_t KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this);
  if (*KeyFrames == KeyFrames[1])
  {
    double v8 = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    if (*v8 == v8[1]) {
      goto LABEL_34;
    }
  }
  char v9 = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this);
  if (*v9 != v9[1])
  {
    uint64_t v10 = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    if (*v10 != v10[1])
    {
      uint64_t v11 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this)
                      + 8);
      *(void *)&long long v38 = v11;
      *((void *)&v38 + 1) = v11;
      uint64_t v12 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2)
                      + 8);
      *(void *)&long long v39 = v12;
      *((void *)&v39 + 1) = v12;
      EffectiveExtrapolationuint64_t Type = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72), (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, 1);
      if (EffectiveExtrapolationType != pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72), (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2, 1))goto LABEL_17; {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72));
      char v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v14);
      sub_2168EE084((uint64_t)&v42);
      sub_2168EE084((uint64_t)v43);
      if ((v15 & 1) == 0) {
        goto LABEL_17;
      }
      if (EffectiveExtrapolationType)
      {
        if (*(double *)(v11 - 64) != *(double *)(v12 - 64)) {
          goto LABEL_17;
        }
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72));
        int v17 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v16);
        sub_2168EE084((uint64_t)&v42);
        sub_2168EE084((uint64_t)v43);
        if (!v17) {
          goto LABEL_17;
        }
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v12 - 72));
        char v19 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v18);
        sub_2168EE084((uint64_t)&v42);
        sub_2168EE084((uint64_t)v43);
        char v20 = fabs(*(double *)(v11 - 64)) == INFINITY ? 0 : v19 ^ 1;
        *(void *)&long long v41 = *(void *)(v11 - 64);
        BYTE8(v41) = v20;
        if ((v19 & 1) == 0)
        {
LABEL_17:
          if (*(double *)&v40 <= *(double *)&v41 && (*(double *)&v40 != *(double *)&v41 || BYTE8(v40) && BYTE8(v41)))
          {
            float v21 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v35;
            uint64_t v22 = *(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v35);
            *(void *)&long long v37 = v22;
            double v23 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v36;
            double v24 = *(double **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)v36);
            *((void *)&v37 + 1) = v24;
            int v25 = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22, v21, 0);
            if (v25 == pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24, v23, 0))
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
              char v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v26);
              sub_2168EE084((uint64_t)&v42);
              sub_2168EE084((uint64_t)v43);
              if (v27)
              {
                if (v25)
                {
                  if (v22[1] != v24[1]) {
                    goto LABEL_33;
                  }
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
                  int v29 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v28);
                  sub_2168EE084((uint64_t)&v42);
                  sub_2168EE084((uint64_t)v43);
                  if (!v29) {
                    goto LABEL_33;
                  }
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
                  char v31 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v30);
                  sub_2168EE084((uint64_t)&v42);
                  sub_2168EE084((uint64_t)v43);
                  char v32 = fabs(v22[1]) == INFINITY ? 0 : v31 ^ 1;
                  *(double *)&long long v40 = v22[1];
                  BYTE8(v40) = v32;
                  if ((v31 & 1) == 0) {
                    goto LABEL_33;
                  }
                }
                else if (!sub_2169258A8((uint64_t)&v35, 1))
                {
                  goto LABEL_33;
                }
                while ((sub_2169258A8((uint64_t)&v35, 0) & 1) != 0)
                  ;
              }
            }
          }
LABEL_33:
          if (*(double *)&v40 > *(double *)&v41 || *(double *)&v40 == *(double *)&v41 && (!BYTE8(v40) || !BYTE8(v41)))
          {
LABEL_34:
            *(void *)&long long v40 = 0;
            BYTE8(v40) = 0;
            *(void *)&long long v41 = 0;
            BYTE8(v41) = 0;
            goto LABEL_35;
          }
          goto LABEL_35;
        }
      }
      else if (!sub_216924F90((uint64_t)&v35, 1))
      {
        goto LABEL_17;
      }
      while ((sub_216924F90((uint64_t)&v35, 0) & 1) != 0)
        ;
      goto LABEL_17;
    }
  }
LABEL_35:
  double result = *(double *)&v40;
  long long v34 = v41;
  *a3 = v40;
  a3[1] = v34;
  return result;
}

void sub_216924F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084(v14 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_216924F90(uint64_t a1, int a2)
{
  v43[2] = *MEMORY[0x263EF8340];
  if (!a2
    || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 40) - 72)), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 56) - 72)), char v5 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v4), sub_2168EE084((uint64_t)&v42), sub_2168EE084((uint64_t)v43), (v5 & 1) != 0))
  {
    uint64_t v6 = sub_21692559C(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1, (uint64_t *)(a1 + 32));
    uint64_t v8 = v7;
    uint64_t v9 = sub_21692559C(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8), (uint64_t *)(a1 + 48));
    uint64_t v11 = v10;
    if (*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1) == v8)
    {
      uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v43, *KeyFrames);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v43, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
    }
    if (*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8)) == v11)
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8));
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v42, *v14);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v42, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (!a2)
    {
      if (v15 != v8 && *(void *)(a1 + 56) != v11)
      {
        if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v42, v13))goto LABEL_40; {
        uint64_t v15 = *(void *)(a1 + 40);
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)(v15 - 72), (double *)(*(void *)(a1 + 56) - 72), 0)|| (*(void *)(a1 + 40) -= 72, *(void *)(a1 + 56) -= 72, *(void *)(a1 + 40) == *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1))|| (char v19 = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8)), v20 = *(void *)(a1 + 56), v20 == *v19)|| !pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)(*(void *)(a1 + 40) - 72), (double *)(v20 - 72), 1))
      {
        uint64_t v22 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 40) - 72));
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 56) - 72));
        uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v21);
        sub_2168EE084((uint64_t)&v40);
        sub_2168EE084((uint64_t)&v41);
        double v23 = *(double *)(*(void *)(a1 + 40) - 64);
        if (fabs(v23) == INFINITY) {
          char v24 = 0;
        }
        else {
          char v24 = v22 ^ 1;
        }
        *(double *)(a1 + 80) = v23;
        *(unsigned char *)(a1 + 88) = v24;
      }
      goto LABEL_61;
    }
    if (v15 == v8) {
      goto LABEL_32;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v15 - 72));
    if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v43, &v41, v16))
    {
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 40) - 72)))
      {
        sub_2168EE084((uint64_t)&v41);
        goto LABEL_32;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 40) - 72));
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v39, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 40) - 72));
      char v18 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, &v39, v17);
      sub_2168EE084((uint64_t)&v39);
      sub_2168EE084((uint64_t)&v40);
      sub_2168EE084((uint64_t)&v41);
      if (v18)
      {
LABEL_32:
        uint64_t v25 = *(void *)(a1 + 56);
        if (v25 == v11) {
          goto LABEL_40;
        }
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v25 - 72));
        if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, &v41, v26))
        {
          if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 56) - 72)))
          {
            sub_2168EE084((uint64_t)&v41);
            goto LABEL_40;
          }
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 56) - 72));
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v39, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(a1 + 56) - 72));
          char v28 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, &v39, v27);
          sub_2168EE084((uint64_t)&v39);
          sub_2168EE084((uint64_t)&v40);
          sub_2168EE084((uint64_t)&v41);
          if (v28)
          {
LABEL_40:
            if (v8 == *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1)) {
              double v29 = -INFINITY;
            }
            else {
              double v29 = *(double *)(v8 - 64);
            }
            if (v11 == *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8))) {
              double v30 = -INFINITY;
            }
            else {
              double v30 = *(double *)(v11 - 64);
            }
            if (v29 <= v30)
            {
              if (v30 <= v29)
              {
                if (v29 == -INFINITY)
                {
                  uint64_t v22 = 0;
                  *(void *)(a1 + 64) = 0;
                  *(unsigned char *)(a1 + 72) = 0;
                  *(void *)(a1 + 80) = 0;
                  *(unsigned char *)(a1 + 88) = 0;
LABEL_61:
                  sub_2168EE084((uint64_t)&v42);
                  sub_2168EE084((uint64_t)v43);
                  return v22;
                }
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
                uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v38);
                char v34 = v22 ^ 1;
                sub_2168EE084((uint64_t)&v40);
                sub_2168EE084((uint64_t)&v41);
LABEL_54:
                if (v29 >= v30) {
                  double v35 = v29;
                }
                else {
                  double v35 = v30;
                }
                *(double *)(a1 + 80) = v35;
                if (fabs(v35) == INFINITY) {
                  char v36 = 0;
                }
                else {
                  char v36 = v34;
                }
                *(unsigned char *)(a1 + 88) = v36;
                *(void *)(a1 + 32) = v6;
                *(void *)(a1 + 40) = v8;
                *(void *)(a1 + 48) = v9;
                *(void *)(a1 + 56) = v11;
                goto LABEL_61;
              }
              if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72)))
              {
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 - 72));
                char v32 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v33);
                goto LABEL_52;
              }
            }
            else if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72)))
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v41, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
              char v32 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v41, &v40, v31);
LABEL_52:
              char v34 = v32 ^ 1;
              sub_2168EE084((uint64_t)&v40);
              sub_2168EE084((uint64_t)&v41);
              uint64_t v22 = 0;
              goto LABEL_54;
            }
            uint64_t v22 = 0;
            char v34 = 0;
            goto LABEL_54;
          }
        }
        else
        {
          sub_2168EE084((uint64_t)&v41);
        }
        uint64_t v9 = *(void *)(a1 + 48);
        uint64_t v11 = *(void *)(a1 + 56);
        goto LABEL_40;
      }
    }
    else
    {
      sub_2168EE084((uint64_t)&v41);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    goto LABEL_32;
  }
  return 0;
}

void sub_2169254D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va2);
  sub_2168EE084((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_21692559C(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2[1];
  if (v5 != *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v18, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a2[1] - 72));
    char IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    sub_2168EE084((uint64_t)v18);
    if (IsArrayValued)
    {
      if ((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72) == *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)) {
        return sub_2169257F0(a1, *a2, a2[1]);
      }
    }
    else if (v5 != *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
    {
      uint64_t v8 = (uint64_t)v5;
      while (1)
      {
        if (v5 != (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2[1])
        {
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72)))
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v18, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72));
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v17, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72));
            char v10 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v18, &v17, v9);
            sub_2168EE084((uint64_t)&v17);
            sub_2168EE084((uint64_t)v18);
            if ((v10 & 1) == 0) {
              break;
            }
          }
        }
        uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72);
        if ((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72) == *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)) {
          return sub_2169257F0(a1, v4, v8);
        }
        uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 144);
        if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 144))
          && (v5 == (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2[1]
           || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v18, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72)), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v17, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 144)), char v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v18, &v17, v14), sub_2168EE084((uint64_t)&v17), sub_2168EE084((uint64_t)v18), (v15 & 1) != 0))|| (pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v12, v11, v13) & 1) != 0)
        {
          v8 -= 72;
          uint64_t v5 = v11;
          if (v11 != *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)) {
            continue;
          }
        }
        return v4;
      }
    }
  }
  return v4;
}

void sub_2169257B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169257F0(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a3 - 72);
  if (a3 - 72 != *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1))
  {
    v7[0] = "ts/diff.cpp";
    v7[1] = "_GetFirstKeyFrame";
    v7[2] = 437;
    v7[3] = "static Ts_SplineChangedIntervalHelper::KeyFrameReverseIterator pxrInternal__aapl__pxrReserved__::(anonymous "
            "namespace)::Ts_SplineChangedIntervalHelper::_GetFirstKeyFrame(const TsSpline &, KeyFrameReverseIterator)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "kf+1 == spline.rend()", 0);
  }
  if (!pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v5, a1, 0)) {
    return *(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  }
  return a2;
}

uint64_t sub_2169258A8(uint64_t a1, int a2)
{
  v37[2] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v37, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16));
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v36, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24));
    char v6 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v5);
    sub_2168EE084((uint64_t)&v36);
    sub_2168EE084((uint64_t)v37);
    if (v6)
    {
      uint64_t v7 = *v3;
      char v8 = *v4;
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(*v3)
        || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, *v3),
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v36, *v3),
            char v10 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v9), sub_2168EE084((uint64_t)&v36), sub_2168EE084((uint64_t)v37), (v10 & 1) != 0))
      {
        uint64_t v7 = sub_216925E60(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1, (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16));
      }
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(*v4)
        || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, *v4),
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v36, *v4),
            char v12 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v11), sub_2168EE084((uint64_t)&v36), sub_2168EE084((uint64_t)v37), (v12 & 1) != 0))
      {
        char v8 = sub_216925E60(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8), (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24));
      }
      goto LABEL_12;
    }
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24);
  uint64_t v7 = sub_216925E60(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1, (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16));
  char v8 = sub_216925E60(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8), (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24));
  uint64_t v13 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 16);
  uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 24);
  if (v13 == v7)
  {
    uint64_t v13 = v7;
LABEL_29:
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)v13, (double *)v14, 1))
    {
      *(int64x2_t *)(a1 + 16) = vaddq_s64(*(int64x2_t *)(a1 + 16), vdupq_n_s64(0x48uLL));
      if (*(void *)(a1 + 16) != *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1)
                                             + 8))
      {
        uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8));
        uint64_t v25 = *(double **)(a1 + 24);
        if (v25 != *(double **)(KeyFrames + 8))
        {
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)*v3, v25, 0))
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, *v3);
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v4);
            uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v26);
            sub_2168EE084((uint64_t)&v36);
            sub_2168EE084((uint64_t)v37);
            double v28 = *(double *)(*(void *)(a1 + 16) + 8);
            if (fabs(v28) == INFINITY) {
              char v29 = 0;
            }
            else {
              char v29 = v27 ^ 1;
            }
            *(double *)(a1 + 64) = v28;
            *(unsigned char *)(a1 + 72) = v29;
            return v27;
          }
        }
      }
    }
    return 0;
  }
  if (v14 == v8)
  {
    uint64_t v14 = v8;
    goto LABEL_29;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v13);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v4);
  char v16 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v15);
  sub_2168EE084((uint64_t)&v36);
  sub_2168EE084((uint64_t)v37);
  if ((v16 & 1) == 0)
  {
    uint64_t v13 = *v3;
    uint64_t v14 = *v4;
    goto LABEL_29;
  }
LABEL_12:
  if (v7 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)a1)
                                                              + 8))
    double v17 = INFINITY;
  else {
    double v17 = *((double *)v7 + 1);
  }
  if (v8 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ***)(a1 + 8))
                                                              + 8))
    double v18 = INFINITY;
  else {
    double v18 = *((double *)v8 + 1);
  }
  if (v17 >= v18)
  {
    if (v18 >= v17)
    {
      if (v17 == INFINITY)
      {
        uint64_t v27 = 0;
        *(void *)(a1 + 64) = 0;
        *(unsigned char *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
        *(unsigned char *)(a1 + 88) = 0;
        return v27;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v7);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, v8);
      if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v30))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v35, v7);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v34, v8);
        int v21 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v35, &v34, v31) ^ 1;
        sub_2168EE084((uint64_t)&v34);
        sub_2168EE084((uint64_t)v35);
      }
      else
      {
        int v21 = 1;
      }
      sub_2168EE084((uint64_t)&v36);
      sub_2168EE084((uint64_t)v37);
      uint64_t v27 = v21 ^ 1u;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v8);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v3);
      if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v22))
      {
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v8))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v35, v8);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v34, v8);
          int v21 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v35, &v34, v23) ^ 1;
          sub_2168EE084((uint64_t)&v34);
          sub_2168EE084((uint64_t)v35);
        }
        else
        {
          LOBYTE(v21) = 0;
        }
      }
      else
      {
        LOBYTE(v21) = 1;
      }
      sub_2168EE084((uint64_t)&v36);
      sub_2168EE084((uint64_t)v37);
      uint64_t v27 = 0;
    }
    double v17 = v18;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v37, v7);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v36, *v4);
    if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v37, &v36, v19))
    {
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v7))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v35, v7);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v34, v7);
        int v21 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v35, &v34, v20) ^ 1;
        sub_2168EE084((uint64_t)&v34);
        sub_2168EE084((uint64_t)v35);
      }
      else
      {
        LOBYTE(v21) = 0;
      }
    }
    else
    {
      LOBYTE(v21) = 1;
    }
    sub_2168EE084((uint64_t)&v36);
    sub_2168EE084((uint64_t)v37);
    uint64_t v27 = 0;
  }
  *(double *)(a1 + 64) = v17;
  if (fabs(v17) == INFINITY) {
    char v32 = 0;
  }
  else {
    char v32 = v21;
  }
  *(unsigned char *)(a1 + 72) = v32;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  return v27;
}

void sub_216925DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va2);
  sub_2168EE084((uint64_t)va3);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_216925E60(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame **a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  v16.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                        + 8) != v4)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v15, v4);
    char IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    sub_2168EE084((uint64_t)v15);
    if (IsArrayValued)
    {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72);
      if (v4 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                                  + 8))
      {
        uint64_t v6 = sub_2169260C0(a1, *a2);
LABEL_18:
        uint64_t v4 = v6;
      }
    }
    else
    {
      uint64_t v7 = v4;
      while (1)
      {
        uint64_t v4 = v7;
        if (v7 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
                                                                    + 8))
          break;
        if (v7 != *a2)
        {
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v7))
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v15, v7);
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v14, v7);
            char v9 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v15, &v14, v8);
            sub_2168EE084((uint64_t)&v14);
            sub_2168EE084((uint64_t)v15);
            if ((v9 & 1) == 0) {
              break;
            }
          }
          if (v16.__type_name)
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v15, v4);
            char v11 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v15, &v16, v10);
            sub_2168EE084((uint64_t)v15);
            if ((v11 & 1) == 0) {
              break;
            }
          }
        }
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v4))
        {
          v15[1] = 0;
          sub_2168ED33C(&v16, v15);
          sub_2168EE084((uint64_t)v15);
          uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72);
          if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72) == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8))
          {
            uint64_t v6 = sub_2169260C0(a1, v4);
            goto LABEL_18;
          }
          if ((pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v4, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72), v12) & 1) == 0)break; {
        }
          }
        else
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v15, v4);
          sub_2168ED33C(&v16, v15);
          sub_2168EE084((uint64_t)v15);
          uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v4 + 72);
        }
      }
    }
  }
  sub_2168EE084((uint64_t)&v16);
  return v4;
}

void sub_216926058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_2169260C0(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  BOOL v2 = a2;
  if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a2 + 72) != *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8))
  {
    v5[0] = "ts/diff.cpp";
    v5[1] = "_GetLastKeyFrame";
    _OWORD v5[2] = 139;
    _OWORD v5[3] = "static Ts_SplineChangedIntervalHelper::KeyFrameIterator pxrInternal__aapl__pxrReserved__::(anonymous namespa"
            "ce)::Ts_SplineChangedIntervalHelper::_GetLastKeyFrame(const TsSpline &, KeyFrameIterator)";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "kf+1 == spline.end()", 0);
  }
  if (!pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v2, a1, 1)) {
    return *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1)
  }
                                                            + 8);
  return v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::New(pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, a2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)KeyFrameData + 24);

  return v7(KeyFrameData, v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalUncached(pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3, double a4)
{
  uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, a2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v7);
  char v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)KeyFrameData + 32);
  v10.n128_f64[0] = a4;

  return v9(KeyFrameData, v8, v10);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache::EvalDerivativeUncached(pxrInternal__aapl__pxrReserved__::Ts_UntypedEvalCache *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3, double a4)
{
  uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(this, a2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v7);
  char v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)KeyFrameData + 40);
  v10.n128_f64[0] = a4;

  return v9(KeyFrameData, v8, v10);
}

void *pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfQuatd,true>::New@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2@<X1>, void *a3@<X8>)
{
  uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a1, a2);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v6);

  return sub_21692634C(KeyFrameData, v7, a3);
}

void *sub_21692634C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  *uint64_t v6 = &unk_26C751248;
  sub_2169265E4((uint64_t)v6, a1, a2);
  *uint64_t v6 = &unk_26C7511F8;

  return sub_2169266D8(a3, (uint64_t)v6);
}

void sub_2169263E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfQuatf,true>::New@<X0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2@<X1>, void *a3@<X8>)
{
  uint64_t KeyFrameData = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a1, a2);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(a2, v6);

  return sub_216926450(KeyFrameData, v7, a3);
}

void *sub_216926450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_26C751330;
  sub_2169268A0((uint64_t)v6, a1, a2);
  *uint64_t v6 = &unk_26C7512E0;

  return sub_21692698C(a3, (uint64_t)v6);
}

void sub_2169264E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169264FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::GfQuatd *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  double v6 = sub_216926690(a1, a5, a2, a3);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  a4[1] = &off_26C74EC08;
  double result = operator new(0x28uLL);
  *(double *)double result = v6;
  *((void *)result + 1) = v8;
  *((void *)result + 2) = v10;
  *((void *)result + 3) = v12;
  atomic_store(0, (unsigned int *)result + 8);
  *a4 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_216926570@<X0>(void *a1@<X8>)
{
  BOOL v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  long long v6 = *(_OWORD *)v2;
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  a1[1] = &off_26C74EC08;
  double result = operator new(0x28uLL);
  *(_OWORD *)double result = v6;
  *((void *)result + 2) = v3;
  *((void *)result + 3) = v4;
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_2169265E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 64);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a3 + 8);
    uint64_t v3 = *(void *)(a2 + 16);
    long long v4 = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a1 + 24) = v4;
    if (*(unsigned char *)(a3 + 68)) {
      uint64_t v5 = *(long long **)(a3 + 16);
    }
    else {
      uint64_t v5 = (long long *)(*(void *)(a3 + 16) + 32);
    }
    long long v6 = *v5;
    *(_OWORD *)(a1 + 72) = v5[1];
    *(_OWORD *)(a1 + 56) = v6;
  }
  else
  {
    v7[0] = "ts/evalCache.h";
    v7[1] = "_Init";
    v7[2] = 636;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalQuaternionCache<pxrInternal__aapl__pxrReserved__::GfQuatd>::_I"
            "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalQuaternionCache from invalid keyframes");
  }
}

double sub_216926690(uint64_t a1, double a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::GfQuatd *a4)
{
  if (!*(_DWORD *)(a1 + 88)) {
    return *(double *)(a1 + 24);
  }
  pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::GfQuatd *)(a1 + 56), a4, (a2 - *(double *)(a1 + 8)) / (*(double *)(a1 + 16) - *(double *)(a1 + 8)));
  return result;
}

void *sub_2169266D8(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C751268;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216926730(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21692674C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216926774(uint64_t a1)
{
  double v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_216926784(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7512B8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

_DWORD *sub_2169267C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::GfQuatf *a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  float v6 = sub_216926944(a1, a5, a2, a3);
  int v8 = v7;
  int v10 = v9;
  int v12 = v11;
  a4[1] = &off_26C74EA98;
  double result = operator new(0x14uLL);
  *(float *)double result = v6;
  result[1] = v8;
  result[2] = v10;
  result[3] = v12;
  atomic_store(0, result + 4);
  *a4 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_21692683C@<X0>(unsigned int **a1@<X8>)
{
  BOOL v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  a1[1] = (unsigned int *)&off_26C74EA98;
  long long v4 = *(_OWORD *)v2;
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = v4;
  atomic_store(0, result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169268A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 64);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a3 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(*(void *)(a2 + 16) + 16);
    if (*(unsigned char *)(a3 + 68)) {
      uint64_t v3 = *(_OWORD **)(a3 + 16);
    }
    else {
      uint64_t v3 = (_OWORD *)(*(void *)(a3 + 16) + 16);
    }
    *(_OWORD *)(a1 + 40) = *v3;
  }
  else
  {
    v4[0] = "ts/evalCache.h";
    v4[1] = "_Init";
    v4[2] = 636;
    void v4[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalQuaternionCache<pxrInternal__aapl__pxrReserved__::GfQuatf>::_I"
            "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalQuaternionCache from invalid keyframes");
  }
}

float sub_216926944(uint64_t a1, double a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::GfQuatf *a4)
{
  if (!*(_DWORD *)(a1 + 56)) {
    return *(float *)(a1 + 24);
  }
  pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::GfQuatf *)(a1 + 40), a4, (a2 - *(double *)(a1 + 8)) / (*(double *)(a1 + 16) - *(double *)(a1 + 8)));
  return result;
}

void *sub_21692698C(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C751350;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2169269E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216926A00(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216926A28(uint64_t a1)
{
  double v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_216926A38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7513A0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, void *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, void *a5, void *a6, double a7, double a8)
{
  uint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(v15, (uint64_t)a1, a3);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::_Initialize(a1, a2, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_Initialize(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, void *a2, uint64_t a3, void *a4, void *a5, double a6, double a7)
{
  v14[2] = *MEMORY[0x263EF8340];
  *((void *)a1 + 1) = *a2;
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeKnotType((uint64_t)a1, a3);
  if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(void *)a1 + 192))(a1))
  {
    if (a4[1])
    {
      sub_2168EE4C4(v14, a4);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope(a1, v14);
      sub_2168EE084((uint64_t)v14);
    }
    if (a5[1])
    {
      sub_2168EE4C4(v13, a5);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope(a1, v13);
      sub_2168EE084((uint64_t)v13);
    }
  }
  return pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeTangentLength(a1, a6, a7);
}

void sub_216926C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, void *a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, uint64_t a5, void *a6, void *a7, double a8, double a9)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(v17, (uint64_t)a1, a4);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, uint64_t))(*(void *)a1 + 112))(a1, 1);
  sub_2168EE4C4(v19, a3);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue((uint64_t)a1, v19);
  sub_2168EE084((uint64_t)v19);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::_Initialize(a1, a2, a5, a6, a7, a8, a9);
  return a1;
}

void sub_216926D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetIsDualValued(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 112))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue(uint64_t a1, void *a2)
{
  v4[2] = *MEMORY[0x263EF8340];
  sub_2168EE4C4(v4, a2);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 136))(a1, v4);
  return sub_2168EE084((uint64_t)v4);
}

void sub_216926E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeKnotType(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (!a2 || v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 152))(a1))
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
      if (a2 == 2) {
        int v6 = v5;
      }
      else {
        int v6 = 1;
      }
      if (v6) {
        a2 = a2;
      }
      else {
        a2 = 1;
      }
    }
  }
  else
  {
    a2 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 64);

  return v7(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 192))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, void *a2)
{
  _OWORD v5[2] = *MEMORY[0x263EF8340];
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(a1);
  if (result)
  {
    sub_2168EE4C4(v5, a2);
    (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, void *))(*(void *)a1 + 232))(a1, v5);
    return sub_2168EE084((uint64_t)v5);
  }
  return result;
}

void sub_216927030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *a1, void *a2)
{
  _OWORD v5[2] = *MEMORY[0x263EF8340];
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(a1);
  if (result)
  {
    sub_2168EE4C4(v5, a2);
    (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, void *))(*(void *)a1 + 240))(a1, v5);
    return sub_2168EE084((uint64_t)v5);
  }
  return result;
}

void sub_2169270EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_InitializeTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, double a2, double a3)
{
  uint64_t result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(void *)this + 192))(this);
  if (result)
  {
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this)) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, double))(*(void *)this + 248))(this, a2);
    }
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this)) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, double))(*(void *)this + 256))(this, a3);
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
    if (result)
    {
      int v7 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(void *)this + 280);
      return v7(this);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsInterpolatable(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 152))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetKnotType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, double a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if (result)
  {
    int v6 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, __n128))(*(void *)this + 248);
    v5.n128_f64[0] = a2;
    return v6(this, v5);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, double a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if (result)
  {
    int v6 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, __n128))(*(void *)this + 256);
    v5.n128_f64[0] = a2;
    return v6(this, v5);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::ResetTangentSymmetryBroken(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(void *)this + 280);
    return v3(this);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  return this;
}

{
  (*(void (**)(const pxrInternal__aapl__pxrReserved__::TsKeyFrame *, pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(void *)a2 + 16))(a2, this);
  return this;
}

void pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
}

{
  (**(void (***)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))this)(this);
}

void (***pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(void (***a1)(void), void (***a2)(void)))(void)
{
  if (a1 != a2)
  {
    (**a1)(a1);
    ((void (*)(void (***)(void), void (***)(void)))(*a2)[2])(a2, a1);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator!=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  else {
    return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) ^ 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide(double *a1, double *a2, int a3)
{
  void v21[2] = *MEMORY[0x263EF8340];
  int v6 = (*(uint64_t (**)(double *))(*(void *)a1 + 56))(a1);
  if (v6 != (*(unsigned int (**)(double *))(*(void *)a2 + 56))(a2)) {
    return 0;
  }
  if (a1[1] != a2[1]) {
    return 0;
  }
  int v7 = (*(uint64_t (**)(double *))(*(void *)a1 + 184))(a1);
  if (v7 != (*(unsigned int (**)(double *))(*(void *)a2 + 184))(a2)) {
    return 0;
  }
  int v10 = (*(uint64_t (**)(double *))(*(void *)a1 + 184))(a1);
  if (a3)
  {
    if (!v10
      || (double v11 = (*(double (**)(double *))(*(void *)a1 + 224))(a1),
          v11 == (*(double (**)(double *))(*(void *)a2 + 224))(a2))
      && ((*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 208))(v21, a1),
          (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 208))(&v20, a2),
          char v13 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v12), sub_2168EE084((uint64_t)&v20), sub_2168EE084((uint64_t)v21), (v13 & 1) != 0))
    {
      (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 80))(v21, a1);
      (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 80))(&v20, a2);
      uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v14);
LABEL_15:
      uint64_t v8 = v15;
      sub_2168EE084((uint64_t)&v20);
      sub_2168EE084((uint64_t)v21);
      return v8;
    }
  }
  else if (!v10 {
         || (double v16 = (*(double (**)(double *))(*(void *)a1 + 216))(a1),
  }
             v16 == (*(double (**)(double *))(*(void *)a2 + 216))(a2))
         && ((*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 200))(v21, a1),
             (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 200))(&v20, a2),
             char v18 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v17), sub_2168EE084((uint64_t)&v20), sub_2168EE084((uint64_t)v21), (v18 & 1) != 0))
  {
    (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 120))(v21, a1);
    (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 120))(&v20, a2);
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v21, &v20, v19);
    goto LABEL_15;
  }
  return 0;
}

void sub_216927A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 56))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 184))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 216))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 200))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 120))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 224))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 208))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::CanSetKnotType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue(uint64_t a1, void *a2)
{
  v4[2] = *MEMORY[0x263EF8340];
  sub_2168EE4C4(v4, a2);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 88))(a1, v4);
  return sub_2168EE084((uint64_t)v4);
}

void sub_216927C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  if (a2) {
    return (*(uint64_t (**)(void))(v2 + 80))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 120))();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue(uint64_t a1, void *a2, int a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  if (a3)
  {
    sub_2168EE4C4(v6, a2);
    int v4 = v6;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue(a1, v6);
  }
  else
  {
    sub_2168EE4C4(v7, a2);
    int v4 = v7;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue(a1, v7);
  }
  return sub_2168EE084((uint64_t)v4);
}

void sub_216927D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValueDerivative(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 96))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 144))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValueDerivative(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 128))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 104))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsExtrapolatable(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 160))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  uint64_t v11[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(void *)this + 192))(this);
  if ((v2 & 1) == 0)
  {
    v9[0] = "ts/keyFrame.cpp";
    v9[1] = "_ValidateTangentSetting";
    v9[2] = 335;
    v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting() const";
    char v10 = 0;
    (*(void (**)(void *__return_ptr, pxrInternal__aapl__pxrReserved__::TsKeyFrame *))(*(void *)this + 80))(v11, this);
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v11, v3, v4, (uint64_t)__p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"value type %s does not support tangents", (const char *)v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_2168EE084((uint64_t)v11);
  }
  return v2;
}

void sub_216927F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2168EE084(v15 - 40);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetTangentSymmetryBroken(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 264))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetTangentSymmetryBroken(pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, uint64_t a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::_ValidateTangentSetting(this);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TsKeyFrame *, uint64_t))(*(void *)this + 272);
    return v5(this, a2);
  }
  return result;
}

void sub_216928390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2169283E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1))
  {
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 120))(v16, a1);
    sub_216928738((uint64_t)v16);
    int v4 = std::string::append(&v14, " - ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 80))(v15, a1);
    sub_216928738((uint64_t)v15);
    if ((v13 & 0x80u) == 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      std::string::size_type v7 = v13;
    }
    else {
      std::string::size_type v7 = (std::string::size_type)__p[1];
    }
    char v8 = std::string::append(&v17, (const std::string::value_type *)v6, v7);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(void *)(a2 + 16) = *((void *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_2168EE084((uint64_t)v15);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    char v10 = (std::string *)v16;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v17, a1);
    sub_216928738((uint64_t)&v17);
    char v10 = &v17;
  }
  return sub_2168EE084((uint64_t)v10);
}

void sub_2169285B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_2168EE084(v23 - 48);
  _Unwind_Resume(a1);
}

uint64_t *sub_216928634()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  long long v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7513B8, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7513B8, (char *)0x48, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2169286F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216928738(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_21692886C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216928880(void *result)
{
  *uint64_t result = &unk_26C750EF8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *this, double a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = *((void *)this + 1);
  if (v3 == result) {
    return v3;
  }
  double v4 = *(double *)(result - 64);
  if (v4 < a2) {
    return result;
  }
  double v5 = *(double *)(v3 + 8);
  if (v5 >= a2) {
    return v3;
  }
  uint64_t v6 = result - v3;
  unint64_t v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
  unint64_t v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
  if (v7 <= v8)
  {
    uint64_t result = v3;
    do
    {
      unint64_t v26 = v7 >> 1;
      uint64_t v27 = result + 72 * (v7 >> 1);
      double v28 = *(double *)(v27 + 8);
      uint64_t v29 = v27 + 72;
      v7 += ~(v7 >> 1);
      if (v28 >= a2) {
        unint64_t v7 = v26;
      }
      else {
        uint64_t result = v29;
      }
    }
    while (v7);
  }
  else
  {
    uint64_t v9 = v3 + 72 * v8;
    if (*(double *)(v9 + 8) >= a2)
    {
      if (v8)
      {
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t result = v9 + v19;
          if (*(double *)(v9 + v19 - 64) < a2) {
            break;
          }
          uint64_t v20 = v19 - 72;
          if (v19 != -144)
          {
            v19 -= 72;
            if (v20 + 72 * v8) {
              continue;
            }
          }
          if (!(v20 + 72 * v8)) {
            return v3;
          }
          unint64_t v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v20 + 72 * v8) >> 3);
          uint64_t result = v3;
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = result + 72 * (v21 >> 1);
            double v24 = *(double *)(v23 + 8);
            uint64_t v25 = v23 + 72;
            v21 += ~(v21 >> 1);
            if (v24 >= a2) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t result = v25;
            }
          }
          while (v21);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
    else if (v9 + 72 != result)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = v9 + v10;
        if (*(double *)(v9 + v10 + 80) >= a2) {
          return v11 + 72;
        }
        uint64_t v12 = v10 + 72;
        if (v10 == 144) {
          break;
        }
        v10 += 72;
      }
      while (v11 + 144 != result);
      uint64_t v13 = v9 + v12 + 72;
      if (v13 != result)
      {
        unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v12 - 72) >> 3);
        uint64_t result = v13;
        do
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = result + 72 * (v14 >> 1);
          double v17 = *(double *)(v16 + 8);
          uint64_t v18 = v16 + 72;
          v14 += ~(v14 >> 1);
          if (v17 >= a2) {
            unint64_t v14 = v15;
          }
          else {
            uint64_t result = v18;
          }
        }
        while (v14);
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;

  uint64_t v3 = *(void *)this;
  uint64_t result = *((void *)this + 1);
  if (v3 == result) {
    return v3;
  }
  double v4 = *(double *)(result - 64);
  if (v4 < a2) {
    return result;
  }
  double v5 = *(double *)(v3 + 8);
  if (v5 >= a2) {
    return v3;
  }
  uint64_t v6 = result - v3;
  unint64_t v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
  unint64_t v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
  if (v7 <= v8)
  {
    uint64_t result = v3;
    do
    {
      unint64_t v26 = v7 >> 1;
      uint64_t v27 = result + 72 * (v7 >> 1);
      double v28 = *(double *)(v27 + 8);
      uint64_t v29 = v27 + 72;
      v7 += ~(v7 >> 1);
      if (v28 >= a2) {
        unint64_t v7 = v26;
      }
      else {
        uint64_t result = v29;
      }
    }
    while (v7);
  }
  else
  {
    uint64_t v9 = v3 + 72 * v8;
    if (*(double *)(v9 + 8) >= a2)
    {
      if (v8)
      {
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t result = v9 + v19;
          if (*(double *)(v9 + v19 - 64) < a2) {
            break;
          }
          uint64_t v20 = v19 - 72;
          if (v19 != -144)
          {
            v19 -= 72;
            if (v20 + 72 * v8) {
              continue;
            }
          }
          if (!(v20 + 72 * v8)) {
            return v3;
          }
          unint64_t v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v20 + 72 * v8) >> 3);
          uint64_t result = v3;
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = result + 72 * (v21 >> 1);
            double v24 = *(double *)(v23 + 8);
            uint64_t v25 = v23 + 72;
            v21 += ~(v21 >> 1);
            if (v24 >= a2) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t result = v25;
            }
          }
          while (v21);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
    else if (v9 + 72 != result)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = v9 + v10;
        if (*(double *)(v9 + v10 + 80) >= a2) {
          return v11 + 72;
        }
        uint64_t v12 = v10 + 72;
        if (v10 == 144) {
          break;
        }
        v10 += 72;
      }
      while (v11 + 144 != result);
      uint64_t v13 = v9 + v12 + 72;
      if (v13 != result)
      {
        unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v12 - 72) >> 3);
        uint64_t result = v13;
        do
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = result + 72 * (v14 >> 1);
          double v17 = *(double *)(v16 + 8);
          uint64_t v18 = v16 + 72;
          v14 += ~(v14 >> 1);
          if (v17 >= a2) {
            unint64_t v14 = v15;
          }
          else {
            uint64_t result = v18;
          }
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *this, double a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = *((void *)this + 1);
  if (v3 == result) {
    return v3;
  }
  double v4 = *(double *)(result - 64);
  if (v4 > a2)
  {
    double v5 = *(double *)(v3 + 8);
    if (v5 > a2) {
      return v3;
    }
    uint64_t v6 = result - v3;
    unint64_t v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
    unint64_t v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
    if (v7 <= v8)
    {
      uint64_t result = v3;
      do
      {
        unint64_t v26 = v7 >> 1;
        uint64_t v27 = result + 72 * (v7 >> 1);
        double v28 = *(double *)(v27 + 8);
        uint64_t v29 = v27 + 72;
        v7 += ~(v7 >> 1);
        if (v28 > a2) {
          unint64_t v7 = v26;
        }
        else {
          uint64_t result = v29;
        }
      }
      while (v7);
    }
    else
    {
      uint64_t v9 = v3 + 72 * v8;
      if (*(double *)(v9 + 8) <= a2)
      {
        if (v9 + 72 != result)
        {
          uint64_t v17 = 0;
          do
          {
            uint64_t v18 = v9 + v17;
            if (*(double *)(v9 + v17 + 80) > a2) {
              return v18 + 72;
            }
            uint64_t v19 = v17 + 72;
            if (v17 == 144) {
              break;
            }
            v17 += 72;
          }
          while (v18 + 144 != result);
          uint64_t v20 = v9 + v19 + 72;
          if (v20 != result)
          {
            unint64_t v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v19 - 72) >> 3);
            uint64_t result = v20;
            do
            {
              unint64_t v22 = v21 >> 1;
              uint64_t v23 = result + 72 * (v21 >> 1);
              double v24 = *(double *)(v23 + 8);
              uint64_t v25 = v23 + 72;
              v21 += ~(v21 >> 1);
              if (v24 > a2) {
                unint64_t v21 = v22;
              }
              else {
                uint64_t result = v25;
              }
            }
            while (v21);
          }
        }
      }
      else if (v8)
      {
        uint64_t v10 = 0;
        while (1)
        {
          uint64_t result = v9 + v10;
          if (*(double *)(v9 + v10 - 64) <= a2) {
            break;
          }
          uint64_t v11 = v10 - 72;
          if (v10 != -144)
          {
            v10 -= 72;
            if (v11 + 72 * v8) {
              continue;
            }
          }
          if (!(v11 + 72 * v8)) {
            return v3;
          }
          unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 + 72 * v8) >> 3);
          uint64_t result = v3;
          do
          {
            unint64_t v13 = v12 >> 1;
            uint64_t v14 = result + 72 * (v12 >> 1);
            double v15 = *(double *)(v14 + 8);
            uint64_t v16 = v14 + 72;
            v12 += ~(v12 >> 1);
            if (v15 > a2) {
              unint64_t v12 = v13;
            }
            else {
              uint64_t result = v16;
            }
          }
          while (v12);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;

  uint64_t v3 = *(void *)this;
  uint64_t result = *((void *)this + 1);
  if (v3 == result) {
    return v3;
  }
  double v4 = *(double *)(result - 64);
  if (v4 > a2)
  {
    double v5 = *(double *)(v3 + 8);
    if (v5 > a2) {
      return v3;
    }
    uint64_t v6 = result - v3;
    unint64_t v7 = 0x8E38E38E38E38E39 * ((result - v3) >> 3);
    unint64_t v8 = (unint64_t)((a2 - v5) / (v4 - v5) * (double)v7);
    if (v7 <= v8)
    {
      uint64_t result = v3;
      do
      {
        unint64_t v26 = v7 >> 1;
        uint64_t v27 = result + 72 * (v7 >> 1);
        double v28 = *(double *)(v27 + 8);
        uint64_t v29 = v27 + 72;
        v7 += ~(v7 >> 1);
        if (v28 > a2) {
          unint64_t v7 = v26;
        }
        else {
          uint64_t result = v29;
        }
      }
      while (v7);
    }
    else
    {
      uint64_t v9 = v3 + 72 * v8;
      if (*(double *)(v9 + 8) <= a2)
      {
        if (v9 + 72 != result)
        {
          uint64_t v17 = 0;
          do
          {
            uint64_t v18 = v9 + v17;
            if (*(double *)(v9 + v17 + 80) > a2) {
              return v18 + 72;
            }
            uint64_t v19 = v17 + 72;
            if (v17 == 144) {
              break;
            }
            v17 += 72;
          }
          while (v18 + 144 != result);
          uint64_t v20 = v9 + v19 + 72;
          if (v20 != result)
          {
            unint64_t v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - 72 * v8 - v19 - 72) >> 3);
            uint64_t result = v20;
            do
            {
              unint64_t v22 = v21 >> 1;
              uint64_t v23 = result + 72 * (v21 >> 1);
              double v24 = *(double *)(v23 + 8);
              uint64_t v25 = v23 + 72;
              v21 += ~(v21 >> 1);
              if (v24 > a2) {
                unint64_t v21 = v22;
              }
              else {
                uint64_t result = v25;
              }
            }
            while (v21);
          }
        }
      }
      else if (v8)
      {
        uint64_t v10 = 0;
        while (1)
        {
          uint64_t result = v9 + v10;
          if (*(double *)(v9 + v10 - 64) <= a2) {
            break;
          }
          uint64_t v11 = v10 - 72;
          if (v10 != -144)
          {
            v10 -= 72;
            if (v11 + 72 * v8) {
              continue;
            }
          }
          if (!(v11 + 72 * v8)) {
            return v3;
          }
          unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 + 72 * v8) >> 3);
          uint64_t result = v3;
          do
          {
            unint64_t v13 = v12 >> 1;
            uint64_t v14 = result + 72 * (v12 >> 1);
            double v15 = *(double *)(v14 + 8);
            uint64_t v16 = v14 + 72;
            v12 += ~(v12 >> 1);
            if (v15 > a2) {
              unint64_t v12 = v13;
            }
            else {
              uint64_t result = v16;
            }
          }
          while (v12);
          return result;
        }
      }
      else
      {
        return v3;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrame(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  if (*(void *)this == *((void *)this + 1)) {
    return 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  if (*((void *)this + 1) == result
    || *(void *)this != result && a3 - *(double *)(result - 64) < *(double *)(result + 8) - a3)
  {
    result -= 72;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameBefore(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  if (*(void *)this == *((void *)this + 1)) {
    return 0;
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  if (*((void *)this + 1) == v4) {
    return v4 - 72;
  }
  if (*(void *)this == v4) {
    return 0;
  }
  return v4 - 72;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameAfter(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  if (*(void *)this == *((void *)this + 1)) {
    return 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  uint64_t v6 = *((void *)this + 1);
  if (v6 != result && *(double *)(result + 8) == a3) {
    result += 72;
  }
  if (result == v6) {
    return 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFramesSurrounding(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, double a3)
{
  if (*(void *)this == *((void *)this + 1)) {
    return 0;
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(this, a3);
  uint64_t v5 = *((void *)this + 1);
  if (*(void *)this == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4 - 72;
  }
  if (v5 == v4) {
    return v5 - 72;
  }
  else {
    return v6;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3, std::type_info *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  v32[2] = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(a2))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v32, a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v31, a2);
    char IsClose = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v32, &v31, v10);
    sub_2168EE084((uint64_t)&v31);
    sub_2168EE084((uint64_t)v32);
    if ((IsClose & 1) == 0) {
      return 0;
    }
  }
  double v12 = *((double *)a2 + 1);
  ClosestKeyFrameBefore = (double *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameBefore(this, v9, v12);
  ClosestKeyFrameAfter = (double *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameAfter(this, v14, v12);
  if (!pxrInternal__aapl__pxrReserved__::TsLoopParams::IsValid(a3)) {
    goto LABEL_29;
  }
  uint64_t MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(a3);
  double v18 = *(double *)MasterInterval;
  double v19 = *(double *)(MasterInterval + 16);
  if (*(double *)MasterInterval >= v12 && (*(double *)MasterInterval != v12 || !*(unsigned char *)(MasterInterval + 8))) {
    goto LABEL_29;
  }
  if (v19 <= v12 && (v19 != v12 || !*(unsigned char *)(MasterInterval + 24))) {
    goto LABEL_29;
  }
  if (!ClosestKeyFrameBefore) {
    return 0;
  }
  double v20 = ClosestKeyFrameBefore[1];
  if (v18 >= v20 && (v18 != v20 || *(unsigned char *)(MasterInterval + 8) == 0)) {
    return 0;
  }
  if (v19 <= v20)
  {
    if (v19 != v20) {
      return 0;
    }
    BOOL v22 = *(unsigned char *)(MasterInterval + 24) == 0;
  }
  else
  {
    BOOL v22 = 0;
  }
  uint64_t v23 = 0;
  if (!v22)
  {
    if (ClosestKeyFrameAfter)
    {
      double v24 = ClosestKeyFrameAfter[1];
      if (v18 < v24 || (uint64_t v23 = 0, v18 == v24) && *(unsigned char *)(MasterInterval + 8))
      {
        if (v19 > v24 || (uint64_t v23 = 0, v19 == v24) && *(unsigned char *)(MasterInterval + 24))
        {
LABEL_29:
          if (ClosestKeyFrameBefore && ClosestKeyFrameAfter)
          {
            if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(a2)
              && !pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameBefore))
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v32, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameBefore);
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v31, a2);
              char v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v32, &v31, v26);
              sub_2168EE084((uint64_t)&v31);
              sub_2168EE084((uint64_t)v32);
              if (v27) {
                return 1;
              }
            }
            if (pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)ClosestKeyFrameBefore, a2, v25))return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameAfter, v16); {
          }
            }
          else
          {
            if (!ClosestKeyFrameBefore && ClosestKeyFrameAfter) {
              return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)ClosestKeyFrameAfter, v16);
            }
            if (ClosestKeyFrameBefore && !ClosestKeyFrameAfter) {
              return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)ClosestKeyFrameBefore, a2, v16);
            }
            if (a4->__type_name)
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v32, a2);
              uint64_t v23 = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v32, a4, v29);
              sub_2168EE084((uint64_t)v32);
              return v23;
            }
          }
          return 0;
        }
      }
    }
  }
  return v23;
}

void sub_216929500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsClose(pxrInternal__aapl__pxrReserved__ *this, std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if (sub_21691CE68(this))
  {
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = (double *)this;
    if ((v5 & 4) != 0) {
      uint64_t v6 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    double v7 = *v6;
  }
  else
  {
    if (!sub_21691FA2C(this)) {
      goto LABEL_18;
    }
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = (float *)this;
    if ((v9 & 4) != 0) {
      uint64_t v10 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    double v7 = *v10;
  }
  if (sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = a2->__type_name;
    if ((type_name & 4) != 0) {
      a2 = (std::type_info *)(*(uint64_t (**)(std::type_info *))((type_name & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    double v12 = *(double *)&a2->__vftable;
    return vabdd_f64(v7, v12) < 0.000001;
  }
  if (sub_21691FA2C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v13 = a2->__type_name;
    if ((v13 & 4) != 0) {
      a2 = (std::type_info *)(*(uint64_t (**)(std::type_info *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    double v12 = *(float *)&a2->__vftable;
    return vabdd_f64(v7, v12) < 0.000001;
  }
LABEL_18:

  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(this, a2, v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((double *)this + 1) < *((double *)a2 + 1))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v14, this);
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(a2)) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v13, a2);
    }
    else {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v13, a2);
    }
    if (pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v14, &v13, v5))
    {
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(this)) {
        goto LABEL_13;
      }
      if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(this)
        || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValueDerivative(v12, this),
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero((uint64_t *)&v11, this),
            char v8 = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v12, &v11, v7),
            sub_2168EE084((uint64_t)&v11),
            sub_2168EE084((uint64_t)v12),
            (v8 & 1) != 0))
      {
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(a2))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValueDerivative(v12, a2);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero((uint64_t *)&v11, a2);
          uint64_t IsClose = pxrInternal__aapl__pxrReserved__::Ts_IsClose((pxrInternal__aapl__pxrReserved__ *)v12, &v11, v9);
          sub_2168EE084((uint64_t)&v11);
          sub_2168EE084((uint64_t)v12);
LABEL_14:
          sub_2168EE084((uint64_t)&v13);
          sub_2168EE084((uint64_t)v14);
          return IsClose;
        }
LABEL_13:
        uint64_t IsClose = 1;
        goto LABEL_14;
      }
    }
    uint64_t IsClose = 0;
    goto LABEL_14;
  }
  v14[0] = (uint64_t)"ts/keyFrameUtils.cpp";
  v14[1] = (uint64_t)"Ts_IsSegmentFlat";
  v14[2] = 223;
  void v14[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(const TsKeyFrame &, const TsKeyFrame &)";
  char v15 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"The first key frame must come before the second.");
  return 0;
}

void sub_216929814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams(uint64_t this, char a2, double a3, double a4, double a5, double a6, double a7)
{
  *(unsigned char *)this = a2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(unsigned char *)(this + 64) = 0;
  *(double *)(this + 72) = a7;
  if (a4 > 0.0 && a5 >= 0.0 && a6 >= 0.0)
  {
    double v7 = a3 + a4;
    *(double *)(this + 8) = a3 - a5;
    *(unsigned char *)(this + 16) = vabdd_f64(a3, a5) != INFINITY;
    *(double *)(this + 24) = v7 + a6;
    *(double *)(this + 40) = a3;
    *(unsigned char *)(this + 48) = fabs(a3) != INFINITY;
    *(double *)(this + 56) = v7;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams(uint64_t this)
{
  *(unsigned char *)this = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(unsigned char *)(this + 64) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

{
  *(unsigned char *)this = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(unsigned char *)(this + 64) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

unsigned char *pxrInternal__aapl__pxrReserved__::TsLoopParams::SetLooping(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *(unsigned __int8 *)this;
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetStart(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 5);
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetPeriod(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 7) - *((double *)this + 5);
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetPreRepeatFrames(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 5) - *((double *)this + 1);
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetRepeatFrames(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 3) - *((double *)this + 7);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return (uint64_t)this + 8;
}

BOOL pxrInternal__aapl__pxrReserved__::TsLoopParams::IsValid(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  double v1 = *((double *)this + 1);
  double v2 = *((double *)this + 3);
  if (v1 > v2 || v1 == v2 && (!*((unsigned char *)this + 16) || !*((unsigned char *)this + 32))) {
    return 0;
  }
  double v3 = *((double *)this + 5);
  double v4 = *((double *)this + 7);
  if (v3 > v4) {
    return 0;
  }
  if (v3 != v4) {
    return 1;
  }
  if (!*((unsigned char *)this + 48)) {
    return 0;
  }
  return *((unsigned char *)this + 64) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsLoopParams::SetValueOffset(uint64_t this, double a2)
{
  *(double *)(this + 72) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset(pxrInternal__aapl__pxrReserved__::TsLoopParams *this)
{
  return *((double *)this + 9);
}

uint64_t pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic(pxrInternal__aapl__pxrReserved__ *this, double *a2, double *a3, double *a4)
{
  double v4 = *((double *)this + 1);
  double v5 = *((double *)this + 2);
  double v6 = *(double *)this;
  if (v5 == 0.0)
  {
    if (v4 != 0.0)
    {
      double v7 = -v6 / v4;
      uint64_t result = 1;
      double v9 = v7;
LABEL_7:
      *a2 = v7;
      *a3 = v9;
      return result;
    }
LABEL_6:
    uint64_t result = 0;
    double v7 = 0.0;
    double v9 = 0.0;
    goto LABEL_7;
  }
  double v10 = v4 * v4 + v5 * -4.0 * v6;
  double v11 = sqrt(fabs(v10));
  if (v10 < 0.0)
  {
    float v12 = v11;
    if (v12 != 0.0) {
      goto LABEL_6;
    }
  }
  if (v4 < 0.0) {
    double v11 = -v11;
  }
  double v13 = (v4 + v11) * -0.5;
  *a2 = v13 / v5;
  double v7 = v6 / v13;
  if (v13 == 0.0) {
    double v7 = 0.0;
  }
  *a3 = v7;
  double v9 = *a2;
  uint64_t result = 1;
  if (*a2 > v7) {
    goto LABEL_7;
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(double *a1, double *a2, uint64_t a3, double a4)
{
  double v4 = *(double *)a3;
  double v5 = *(double *)(a3 + 16);
  double v6 = (*(double *)a3 + v5) * 0.5;
  double v8 = a1[2];
  double v7 = a1[3];
  double v10 = *a1;
  double v9 = a1[1];
  for (int i = 19; ; --i)
  {
    double v12 = (v10 + v6 * (v9 + v6 * (v6 * v7 + v8)) - a4) / (*a2 + v6 * (v6 * a2[2] + a2[1]));
    double v6 = v6 - v12;
    BOOL v13 = v4 != v6;
    if (!*(unsigned char *)(a3 + 8)) {
      BOOL v13 = 1;
    }
    if (v4 >= v6 && v13) {
      break;
    }
    BOOL v14 = v5 == v6;
    if (!*(unsigned char *)(a3 + 24)) {
      BOOL v14 = 0;
    }
    if (v5 <= v6 && !v14) {
      break;
    }
    if (fabs(v12) < 0.00001 || i == 0) {
      return v6;
    }
  }
  double v16 = v10 + v4 * (v9 + v4 * (v4 * v7 + v8));
  if (vabdd_f64(v16, a4) < 0.0001) {
    return *(double *)a3;
  }
  double v17 = v10 + v5 * (v9 + v5 * (v5 * v7 + v8)) - a4;
  if (fabs(v17) < 0.0001) {
    return *(double *)(a3 + 16);
  }
  double v18 = v16 - a4;
  double v19 = (v16 - a4) * v17;
  double v6 = -1.0;
  if (v19 <= 0.0)
  {
    int v20 = 20;
    do
    {
      double v6 = v4 - v18 * (v5 - v4) / (v17 - v18);
      double v21 = v10 + v6 * (v9 + v6 * (v8 + v7 * v6));
      if (vabdd_f64(v21, a4) < 0.000001) {
        break;
      }
      double v22 = v21 - a4;
      BOOL v23 = v18 * v22 > 0.0;
      if (v18 * v22 <= 0.0)
      {
        double v5 = v4 - v18 * (v5 - v4) / (v17 - v18);
      }
      else
      {
        double v4 = v4 - v18 * (v5 - v4) / (v17 - v18);
        double v18 = v22;
      }
      if (!v23) {
        double v17 = v22;
      }
      --v20;
    }
    while (v20);
  }
  return v6;
}

void pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(float64x2_t *this, const double *a2, double a3, uint64_t a4, double *a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  double v24 = 1.0;
  double v25 = 0.0;
  double v20 = 0.0;
  char v21 = 1;
  uint64_t v22 = 0x3FF0000000000000;
  char v23 = 1;
  float64x2_t v19 = this[1];
  float64x2_t v27 = vmulq_f64(v19, (float64x2_t)xmmword_217457620);
  double v7 = this->f64[1];
  double v26 = v7;
  if (pxrInternal__aapl__pxrReserved__::Ts_SolveQuadratic((pxrInternal__aapl__pxrReserved__ *)&v26, &v25, &v24, a5))
  {
    double v8 = v24;
    if (v25 >= 0.0 && v24 <= 1.0)
    {
      double v10 = this->f64[0];
      double v11 = v25 * (v7 + v25 * (v19.f64[0] + vmuld_lane_f64(v25, v19, 1))) + this->f64[0];
      double v12 = v24 * (v7 + v24 * (v19.f64[0] + vmuld_lane_f64(v24, v19, 1))) + this->f64[0];
      if (v11 >= v12)
      {
        double v15 = (v7 + (v19.f64[1] * 0.0 + v19.f64[0]) * 0.0) * 0.0 + v10;
        double v16 = v19.f64[1] + v19.f64[0] + v7 + v10;
        if (v12 <= v16) {
          double v17 = v12;
        }
        else {
          double v17 = v16;
        }
        if (v12 >= v15) {
          double v18 = v17;
        }
        else {
          double v18 = v15;
        }
        if (v11 <= v16) {
          double v16 = v11;
        }
        if (v11 < v15) {
          double v16 = v15;
        }
        if ((v16 + v18) * 0.5 <= a3)
        {
          BOOL v13 = fabs(v24) != INFINITY;
          double v20 = v24;
          BOOL v14 = 1;
          double v8 = 1.0;
        }
        else
        {
          BOOL v14 = fabs(v25) != INFINITY;
          double v20 = 0.0;
          BOOL v13 = 1;
          double v8 = v25;
        }
      }
      else
      {
        BOOL v13 = fabs(v25) != INFINITY;
        BOOL v14 = fabs(v24) != INFINITY;
        double v20 = v25;
      }
      char v21 = v13;
      uint64_t v22 = *(void *)&v8;
      char v23 = v14;
    }
  }
  pxrInternal__aapl__pxrReserved__::Ts_SolveCubicInInterval(this->f64, &v26, (uint64_t)&v20, a3);
}

double pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2, void *a3, double *a4, double a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  double v22 = a5;
  double v9 = a4[2] - *a4;
  if (v9 <= 0.0) {
    double v10 = 1.0;
  }
  else {
    double v10 = v9 + 1.0;
  }
  if (v10 != (double)(unint64_t)((uint64_t)(a3[1] - *a3) >> 3))
  {
    *(void *)&double v29 = "ts/simplify.cpp";
    double v30 = "_ComputeErrorIfKeyRemoved";
    uint64_t v31 = 341;
    char v32 = "double pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(TsSpline *, TsTime, const GfInterval &, con"
          "st std::vector<double> &, const GfInterval &)";
    char v33 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v29, "vals.size() == valsInterval.GetSize() + 1", 0) & 1) == 0)return 1.79769313e308; {
  }
    }
  double v29 = *a2;
  double v11 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v29);
  double v12 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v22);
  double v29 = a2[2];
  BOOL v13 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v29);
  if (*(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this)
                                                              + 8) == v12)
  {
    *(void *)&double v29 = "ts/simplify.cpp";
    double v30 = "_ComputeErrorIfKeyRemoved";
    uint64_t v31 = 349;
    char v32 = "double pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(TsSpline *, TsTime, const GfInterval &, con"
          "st std::vector<double> &, const GfInterval &)";
    char v33 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v29, "k != spline->end()", 0) & 1) == 0) {
      return 1.79769313e308;
    }
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v29, v12);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v28);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27);
  BOOL v14 = *(void (****)(void))(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
  if (v14 != v11) {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(v28, v11);
  }
  double v15 = *(void (****)(void))(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8);
  if (v15 != v13) {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(v27, v13);
  }
  pxrInternal__aapl__pxrReserved__::TsSpline::RemoveKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, 0, *(double *)&v30);
  sub_21692A3A8(this, a2, a3, a4);
  double v23 = *a2;
  double v16 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v23);
  double v23 = a2[2];
  double v17 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline::find(this, &v23);
  if (*(pxrInternal__aapl__pxrReserved__ **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) != v16
    && *(pxrInternal__aapl__pxrReserved__ **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(this) + 8) != v17)
  {
    pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(v16, v18);
    pxrInternal__aapl__pxrReserved__::Ts_GetKeyFrameData(v17, v19);
    pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::CreateTypedEvalCache();
  }
  double v20 = sub_21692A7A0(this, a4, a3, a4, 1);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v29);
  pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26, 0);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26);
  if (v14 != v11)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v25, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v28);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v25, 0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v25);
  }
  if (v15 != v13)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24, 0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v28);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v29);
  return v20;
}

void sub_21692A338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a12);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a39);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v39 - 248));
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v39 - 176));
  _Unwind_Resume(a1);
}

void sub_21692A3A8(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2, void *a3, double *a4)
{
  v30[9] = *(void ***)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(v30);
  pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFramesInMultiInterval(a1, (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v30, (uint64_t *)&v24);
  sub_2167FB780((uint64_t)v30, v30[1]);
  if (v25 - (void)v24 == 144 && sub_21692A7A0(a1, a2, a3, a4, 0) >= 1.0e-10)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30, v24);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v25 - 72));
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v28, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30);
    double v8 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
    sub_2168EE084((uint64_t)v28);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v28, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29);
    double v9 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
    sub_2168EE084((uint64_t)v28);
    if (v8 >= v9) {
      double v10 = v9;
    }
    else {
      double v10 = v8;
    }
    if (v8 <= v9) {
      double v11 = v9;
    }
    else {
      double v11 = v8;
    }
    double v12 = fmax(a2[2] - *a2, 0.0);
    if (v12 != 0.0)
    {
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30)) {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30, v12 * 0.33);
      }
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29)) {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29, v12 * 0.33);
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27, 0);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26, 0);
      double v21 = (v11 - v10) / 20000.0;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v26);
      int v13 = 0;
      uint64_t v14 = 0x4202A05F20000000;
      double v22 = 0.1 / v12;
      do
      {
        double v23 = *(double *)&v14;
        if (v13) {
          double v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29;
        }
        else {
          double v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30;
        }
        double v17 = v22;
        double v16 = 0.49998;
        do
        {
          double v18 = (v17 + v16) * 0.5;
          double v19 = sub_21692C6F4((v13 & 1) == 0, v15, (pxrInternal__aapl__pxrReserved__::TsSpline *)a1, a2, a3, a4, v18 + -0.00001);
          if ((sub_21692C6F4((v13 & 1) == 0, v15, (pxrInternal__aapl__pxrReserved__::TsSpline *)a1, a2, a3, a4, v18 + 0.00001)- v19)/ 0.00002 > 0.0)double v16 = (v17 + v16) * 0.5; {
          else
          }
            double v17 = (v17 + v16) * 0.5;
        }
        while (v16 - v17 >= 0.00005);
        double v20 = sub_21692C6F4((v13 & 1) == 0, v15, (pxrInternal__aapl__pxrReserved__::TsSpline *)a1, a2, a3, a4, v18);
        if (vabdd_f64(v23, v20) < v21) {
          break;
        }
        ++v13;
        uint64_t v14 = *(void *)&v20;
      }
      while (v13 != 100);
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v29);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v30);
  }
  v30[0] = (void **)&v24;
  sub_21692C928(v30);
}

void sub_21692A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a16);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a36);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v36 - 224));
  *(void *)(v36 - 224) = &a13;
  sub_21692C928((void ***)(v36 - 224));
  _Unwind_Resume(a1);
}

double sub_21692A7A0(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2, void *a3, double *a4, int a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  double v10 = *a4;
  if (*a2 < *a4)
  {
    double v26 = "ts/simplify.cpp";
    float64x2_t v27 = "_ComputeError";
    uint64_t v28 = 99;
    double v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector"
          "<double> &, const GfInterval &, BOOL)";
    char v30 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "spanInterval.GetMin() >= valsInterval.GetMin()", 0))return 1.79769313e308; {
    double v10 = *a4;
    }
  }
  unint64_t v11 = (uint64_t)(a3[1] - *a3) >> 3;
  double v12 = a4[2] - v10;
  if (v12 <= 0.0) {
    double v13 = 1.0;
  }
  else {
    double v13 = v12 + 1.0;
  }
  if (v13 != (double)v11)
  {
    double v26 = "ts/simplify.cpp";
    float64x2_t v27 = "_ComputeError";
    uint64_t v28 = 101;
    double v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector"
          "<double> &, const GfInterval &, BOOL)";
    char v30 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "vals.size() == valsInterval.GetSize() + 1", 0))return 1.79769313e308; {
    double v10 = *a4;
    }
    unint64_t v11 = (uint64_t)(a3[1] - *a3) >> 3;
  }
  double v14 = *a2;
  unint64_t v15 = (unint64_t)(*a2 - v10);
  if (v11 > v15) {
    goto LABEL_7;
  }
  double v26 = "ts/simplify.cpp";
  float64x2_t v27 = "_ComputeError";
  uint64_t v28 = 105;
  double v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector<d"
        "ouble> &, const GfInterval &, BOOL)";
  char v30 = 0;
  if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "valsBase < vals.size()", 0))return 1.79769313e308; {
  double v14 = *a2;
  }
  unint64_t v11 = (uint64_t)(a3[1] - *a3) >> 3;
LABEL_7:
  double v16 = a2[2] - v14;
  if (v16 <= 0.0) {
    double v17 = 1.0;
  }
  else {
    double v17 = v16 + 1.0;
  }
  unint64_t v18 = (unint64_t)v17;
  if ((unint64_t)v17 + v15 > v11)
  {
    double v26 = "ts/simplify.cpp";
    float64x2_t v27 = "_ComputeError";
    uint64_t v28 = 109;
    double v29 = "double pxrInternal__aapl__pxrReserved__::_ComputeError(const TsSpline &, const GfInterval &, const std::vector"
          "<double> &, const GfInterval &, BOOL)";
    char v30 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "valsBase + numSamples <= vals.size()", 0) & 1) == 0)return 1.79769313e308; {
  }
    }
  if (!v18)
  {
    double v21 = 0.0;
    if (a5) {
      return v21;
    }
    return sqrt(v21 / (double)v18);
  }
  unint64_t v19 = 0;
  uint64_t v20 = 8 * v15;
  double v21 = 0.0;
  do
  {
    pxrInternal__aapl__pxrReserved__::TsSpline::Eval(a1, 1, (uint64_t *)&v26, *a2 + (double)v19);
    double v22 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v26);
    sub_2168EE084((uint64_t)&v26);
    double v23 = v22 - *(double *)(*a3 + v20 + 8 * v19);
    if (a5)
    {
      double v24 = fabs(v23);
      if (v24 > v21) {
        double v21 = v24;
      }
    }
    else
    {
      double v21 = v21 + v23 * v23;
    }
    ++v19;
  }
  while (v18 != v19);
  if ((a5 & 1) == 0) {
    return sqrt(v21 / (double)v18);
  }
  return v21;
}

void sub_21692AA74(_Unwind_Exception *exception_object)
{
}

void pxrInternal__aapl__pxrReserved__::TsSimplifySpline(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, pxrInternal__aapl__pxrReserved__::TsSpline *a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3, double a4, double a5)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  if (!this)
  {
    v107.__vftable = (std::type_info_vtbl *)"ts/simplify.cpp";
    v107.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"TsSimplifySpline";
    *(void *)&long long v108 = 563;
    *((void *)&v108 + 1) = "void pxrInternal__aapl__pxrReserved__::TsSimplifySpline(TsSpline *, const GfMultiInterval &"
                             ", double, double)";
    char v109 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v107, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid spline.", a4, a5);
    return;
  }
  double v5 = a4;
  if (a4 >= 0.000001)
  {
    sub_21692C844(v103, (uint64_t)a2);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(this, (uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect((pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v103, (uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v101, this);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds(v103, (uint64_t)&type_name);
    if (*(double *)&type_name > *(double *)&v99 || *(double *)&type_name == *(double *)&v99 && (!v98 || !v100))
    {
LABEL_181:
      if (v102) {
        sub_216784EC4(v102);
      }
      sub_2167FB780((uint64_t)v103, (void *)v103[1]);
      return;
    }
    v107.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    LODWORD(v8) = pxrInternal__aapl__pxrReserved__::TsSpline::ClearRedundantKeyFrames(&v101, &v107, (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v103);
    sub_2168EE084((uint64_t)&v107);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(&v101, (uint64_t)v96);
    if (v98 || (v107.__vftable = type_name, !sub_21692B914(&v101, (double *)&v107)))
    {
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds(v103, (uint64_t)&v111);
      pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameBefore(&v101, *(double *)&v111, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107);
      if (v110)
      {
        BOOL v10 = fabs(*(double *)&v107.__type_name) != INFINITY && v98;
        std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::type_info_vtbl *)v107.__type_name;
        BOOL v98 = v10;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107);
      }
    }
    else
    {
      BOOL v98 = fabs(*(double *)&type_name) != INFINITY;
    }
    if (v100 || (v107.__vftable = v99, !sub_21692B914(&v101, (double *)&v107)))
    {
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds(v103, (uint64_t)&v111);
      pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameAfter(&v101, *((double *)&v112 + 1), (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107);
      if (v110)
      {
        BOOL v12 = fabs(*(double *)&v107.__type_name) != INFINITY && v100;
        uint64_t v99 = (std::type_info_vtbl *)v107.__type_name;
        BOOL v100 = v12;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107);
      }
    }
    else
    {
      BOOL v100 = fabs(*(double *)&v99) != INFINITY;
    }
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(&v107);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFramesInMultiInterval(&v101, (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)&v107, (uint64_t *)&v94);
    sub_2167FB780((uint64_t)&v107, (void *)v107.__type_name);
    if (0x8E38E38E38E38E39 * ((v95 - v94) >> 3) <= 2)
    {
      if (v8)
      {
        double v14 = v101;
        double v13 = v102;
        if (v102) {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v15 = (std::__shared_weak_count *)this[1];
        *this = v14;
        this[1] = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)v13;
        if (v15) {
          sub_216784EC4(v15);
        }
      }
      goto LABEL_180;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v107, v94);
    char v16 = sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v107);
    sub_2168EE084((uint64_t)&v107);
    if ((v16 & 1) == 0)
    {
LABEL_180:
      v107.__vftable = (std::type_info_vtbl *)&v94;
      sub_21692C928((void ***)&v107);
      goto LABEL_181;
    }
    __p = 0;
    double v92 = 0;
    double v93 = 0;
    double v17 = *(double *)&type_name;
    if (*(double *)&type_name <= *(double *)&v99)
    {
      double v19 = 1.79769313e308;
      double v20 = -1.79769313e308;
      do
      {
        pxrInternal__aapl__pxrReserved__::TsSpline::Eval(&v101, 1, (uint64_t *)&v107, v17);
        double v21 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v107);
        sub_2168EE084((uint64_t)&v107);
        if (v21 > v20) {
          double v20 = v21;
        }
        if (v21 < v19) {
          double v19 = v21;
        }
        double v22 = v92;
        if (v92 >= v93)
        {
          double v24 = (double *)__p;
          uint64_t v25 = ((char *)v92 - (unsigned char *)__p) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v27 = (char *)v93 - (unsigned char *)__p;
          if (((char *)v93 - (unsigned char *)__p) >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            double v29 = (char *)sub_21677CB28((uint64_t)&v93, v28);
            double v24 = (double *)__p;
            double v22 = v92;
          }
          else
          {
            double v29 = 0;
          }
          char v30 = (double *)&v29[8 * v25];
          *char v30 = v21;
          double v23 = v30 + 1;
          while (v22 != v24)
          {
            uint64_t v31 = *((void *)v22-- - 1);
            *((void *)v30-- - 1) = v31;
          }
          __p = v30;
          double v92 = v23;
          double v93 = (double *)&v29[8 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *double v92 = v21;
          double v23 = v22 + 1;
        }
        double v92 = v23;
        double v17 = v17 + 1.0;
      }
      while (v17 <= *(double *)&v99);
      double v18 = v20 - v19;
    }
    else
    {
      double v18 = -INFINITY;
    }
    double v32 = fabs(v18);
    if (v32 >= 0.000001) {
      double v33 = v18 * v5;
    }
    else {
      double v33 = 0.000001;
    }
    double v34 = v18 * a5;
    if (v32 >= 0.000001) {
      double v35 = v34;
    }
    else {
      double v35 = 0.000001;
    }
    unint64_t Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(&v101);
    uint64_t v36 = (double *)v95;
    if (v95 != v94)
    {
      unint64_t v37 = 0;
      uint64_t v38 = 80;
      uint64_t v36 = (double *)v94;
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36[(unint64_t)v38 / 8 - 10]);
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107) != 2) {
          goto LABEL_110;
        }
        double v39 = *(double *)&v107.__type_name;
        if (v37 >= 0x8E38E38E38E38E39 * ((v95 - v94) >> 3) - 1)
        {
          BOOL v40 = 0;
          if (v37)
          {
LABEL_73:
            BOOL v41 = *(double *)&v107.__type_name - *(double *)((char *)v94 + v38 - 144) == 1.0;
            goto LABEL_76;
          }
        }
        else
        {
          BOOL v40 = *(double *)((char *)v94 + v38) - *(double *)&v107.__type_name == 1.0;
          if (v37) {
            goto LABEL_73;
          }
        }
        BOOL v41 = 0;
LABEL_76:
        if (v41 || v40)
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v111, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v94 + v38 - 80));
          double v42 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v111);
          sub_2168EE084((uint64_t)&v111);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v111, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v94 + v38 - 80));
          double v43 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v111);
          sub_2168EE084((uint64_t)&v111);
          double v44 = 0.0;
          if (v41)
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v111, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v94 + v38 - 152));
            double v44 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v111);
            sub_2168EE084((uint64_t)&v111);
          }
          if (v40)
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v111, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v94 + v38 - 8));
            double v45 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v111);
            sub_2168EE084((uint64_t)&v111);
            if (v41)
            {
              float v46 = v94;
              uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v101);
              double v48 = (char *)v46 + v38;
              uint64_t v49 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, *(double *)((char *)v46 + v38 - 72));
              if ((*((void *)KeyFrames + 1) != v49
                 || (double v111 = (double *)"ts/simplify.cpp",
                     *(void *)&long long v112 = "_IsKnotOnPlateau",
                     *((void *)&v112 + 1) = 440,
                     uint64_t v113 = "BOOL pxrInternal__aapl__pxrReserved__::_IsKnotOnPlateau(const TsSpline &, const TsKeyFrame &)",
                     char v114 = 0,
                     (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v111, "kIter != keyMap.end()", 0) & 1) != 0))&& ((double v50 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v48 - 80), *(void *)KeyFrames != v49)&& (pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat((pxrInternal__aapl__pxrReserved__::TsSpline *)&v101, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v49 - 72), v50) & 1) != 0|| v49 + 72 != *((void *)KeyFrames + 1)&& (pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat((pxrInternal__aapl__pxrReserved__::TsSpline *)&v101, v50, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v49 + 72)) & 1) != 0)|| sub_21692B988(&v101, (double *)((char *)v94 + v38 - 80), v35))
              {
                double v5 = 0.0;
              }
              else
              {
                double v5 = (v45 - v44) * 0.5;
              }
              char v51 = 1;
              goto LABEL_101;
            }
            if (v39 == v96[0] && !Extrapolation)
            {
              double v5 = v45 - v42;
              char v51 = 1;
              goto LABEL_104;
            }
          }
          BOOL v52 = HIDWORD(Extrapolation) == 0;
          BOOL v53 = v39 == v96[2] && v41;
          char v51 = v53 && v52;
          if (v53 && v52) {
            double v5 = v43 - v44;
          }
          else {
            *(void *)&v5 &= 0xFFFFFFFFFFFFFF00;
          }
          if (v41)
          {
LABEL_101:
            if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107)) {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107, 0.3333);
            }
          }
          if (v40)
          {
LABEL_104:
            if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107)) {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107, 0.3333);
            }
          }
          if (v51
            && pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107))
          {
            v106[1] = &unk_26C750B03;
            *(double *)uint64_t v106 = v5;
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107, v106);
            sub_2168EE084((uint64_t)v106);
            v105[1] = &unk_26C750B03;
            *(double *)unint64_t v105 = v5;
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107, v105);
            sub_2168EE084((uint64_t)v105);
          }
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))((char *)v94 + v38 - 80), &v107);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v104, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107);
          pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)&v101, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v104, 0);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v104);
        }
LABEL_110:
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v107);
        ++v37;
        uint64_t v36 = (double *)v94;
        unint64_t v54 = 0x8E38E38E38E38E39 * ((v95 - v94) >> 3);
        v38 += 72;
        if (v37 >= v54) {
          goto LABEL_115;
        }
      }
    }
    unint64_t v54 = 0x8E38E38E38E38E39 * ((v95 - v94) >> 3);
LABEL_115:
    double v111 = 0;
    long long v112 = 0uLL;
    unint64_t v55 = v54 + 2;
    if (v54 != -2)
    {
      if (v55 >= 0xAAAAAAAAAAAAAABLL) {
        sub_21677CB10();
      }
      sub_21692C9AC(&v107, v55, 0, (uint64_t)&v112 + 8);
      double v57 = v111;
      double v56 = (double *)v112;
      long long v58 = (double *)v107.__type_name;
      if ((double *)v112 == v111)
      {
        double v60 = (std::type_info_vtbl *)v112;
      }
      else
      {
        do
        {
          long long v59 = *(_OWORD *)(v56 - 3);
          *(v58 - 1) = *(v56 - 1);
          *(_OWORD *)(v58 - 3) = v59;
          v58 -= 3;
          v56 -= 3;
        }
        while (v56 != v57);
        double v60 = (std::type_info_vtbl *)v111;
        double v56 = (double *)v112;
      }
      double v111 = v58;
      uint64_t v61 = *((void *)&v112 + 1);
      long long v112 = v108;
      *(void *)&long long v108 = v56;
      *((void *)&v108 + 1) = v61;
      v107.__vftable = v60;
      v107.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)v60;
      if (v56 != (double *)v60) {
        *(void *)&long long v108 = (char *)v60 + ((char *)v56 - (char *)v60 - 24) % 0x18uLL;
      }
      if (v60) {
        operator delete(v60);
      }
      uint64_t v36 = (double *)v94;
    }
    *(double *)&long long v90 = v36[1] + -1.0;
    DWORD2(v90) = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v36);
    BYTE12(v90) = 0;
    sub_21692BC8C((void **)&v111, &v90);
    long long v62 = v95;
    if (v95 == v94)
    {
      uint64_t v65 = 0;
      unint64_t v70 = 0x8E38E38E38E38E39 * ((v95 - v94) >> 3);
    }
    else
    {
      uint64_t v63 = 0;
      unint64_t v64 = 0;
      uint64_t v65 = 0;
      long long v62 = v94;
      do
      {
        v107.__vftable = *(std::type_info_vtbl **)((char *)v62 + v63 + 8);
        float v66 = v107.__vftable;
        LODWORD(v107.__type_name) = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v62 + v63));
        char v67 = pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains((pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v103, *(double *)&v66);
        if (v64) {
          char v68 = v67;
        }
        else {
          char v68 = 0;
        }
        if (v68)
        {
          BOOL v69 = sub_21692B988(&v101, (double *)((char *)v94 + v63), v35);
          BYTE4(v107.__type_name) = !v69;
          v65 += !v69;
        }
        else
        {
          BYTE4(v107.__type_name) = 0;
        }
        sub_21692BC8C((void **)&v111, (long long *)&v107);
        ++v64;
        long long v62 = v94;
        unint64_t v70 = 0x8E38E38E38E38E39 * ((v95 - v94) >> 3);
        v63 += 72;
      }
      while (v64 < v70);
    }
    double v71 = (double *)((char *)v62 + 72 * v70);
    *(double *)&long long v90 = *(v71 - 8) + 1.0;
    DWORD2(v90) = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v71 - 9));
    BYTE12(v90) = 0;
    sub_21692BC8C((void **)&v111, &v90);
    if (v65)
    {
      if ((double *)v112 != v111)
      {
        unint64_t v72 = 0;
        do
          sub_21692BDF8((uint64_t *)&v111, v72++, &v101, &__p, (double *)&type_name);
        while (v72 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - (void)v111) >> 3));
      }
      uint64_t v74 = v94;
      for (int i = v95;
            i != v74;
      double v95 = v74;
      while (1)
      {
        if ((double *)v112 == v111)
        {
          unint64_t v80 = 0;
        }
        else
        {
          unint64_t v75 = 0;
          unint64_t v76 = 0;
          unint64_t v77 = ((void)v112 - (void)v111) / 24;
          if (v77 <= 1) {
            unint64_t v77 = 1;
          }
          uint64_t v78 = v111 + 2;
          char v79 = 1;
          do
          {
            if (*((unsigned char *)v78 - 4)) {
              unint64_t v80 = v75;
            }
            else {
              unint64_t v80 = v76;
            }
            char v81 = (*((unsigned char *)v78 - 4) == 0) & v79;
            if (*((unsigned char *)v78 - 4) && (v79 & 1) == 0)
            {
              if (*v78 < v111[3 * v76 + 2]) {
                unint64_t v80 = v75;
              }
              else {
                unint64_t v80 = v76;
              }
              char v81 = 0;
            }
            v78 += 3;
            ++v75;
            char v79 = v81;
            unint64_t v76 = v80;
          }
          while (v77 != v75);
        }
        if (v111[3 * v80 + 2] > v33) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::TsSpline::RemoveKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)&v101, 0, v111[3 * v80]);
        if (!v80 || (double v82 = v111, v80 >= -1 - 0x5555555555555555 * ((uint64_t)(v112 - (void)v111) >> 3)))
        {
          v107.__vftable = (std::type_info_vtbl *)"ts/simplify.cpp";
          v107.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"TsSimplifySpline";
          *(void *)&long long v108 = 886;
          *((void *)&v108 + 1) = "void pxrInternal__aapl__pxrReserved__::TsSimplifySpline(TsSpline *, const GfMultiInte"
                                   "rval &, double, double)";
          char v109 = 0;
          if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v107, "bestIndex > 0 && bestIndex < ki.size()-1", 0))goto LABEL_176; {
          double v82 = v111;
          }
        }
        double v83 = &v82[3 * v80];
        double v84 = v83[3];
        v107.__vftable = *(std::type_info_vtbl **)(v83 - 3);
        LOBYTE(v107.__type_name) = fabs(*(double *)&v107.__vftable) != INFINITY;
        *(double *)&long long v108 = v84;
        BYTE8(v108) = fabs(v84) != INFINITY;
        sub_21692A3A8(&v101, (double *)&v107, &__p, (double *)&type_name);
        double v8 = &v111[3 * v80];
        uint64_t v85 = v112 - (void)(v8 + 3);
        if ((double *)v112 != v8 + 3) {
          memmove(&v111[3 * v80], v8 + 3, v112 - (void)(v8 + 3));
        }
        *(void *)&long long v112 = (char *)v8 + v85;
        sub_21692BDF8((uint64_t *)&v111, v80 - 1, &v101, &__p, (double *)&type_name);
        LOBYTE(v8) = 1;
        sub_21692BDF8((uint64_t *)&v111, v80, &v101, &__p, (double *)&type_name);
      }
      if ((v8 & 1) == 0) {
        goto LABEL_176;
      }
    }
    else if (!v8)
    {
LABEL_176:
      if (v111)
      {
        *(void *)&long long v112 = v111;
        operator delete(v111);
      }
      if (__p)
      {
        double v92 = (double *)__p;
        operator delete(__p);
      }
      goto LABEL_180;
    }
    double v87 = v101;
    double v86 = v102;
    if (v102) {
      atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v88 = (std::__shared_weak_count *)this[1];
    *this = v87;
    this[1] = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)v86;
    if (v88) {
      sub_216784EC4(v88);
    }
    goto LABEL_176;
  }
}

void sub_21692B7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,void *a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49)
{
  char v51 = *(void **)(v49 - 200);
  if (v51)
  {
    *(void *)(v49 - 192) = v51;
    operator delete(v51);
  }
  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a19;
  sub_21692C928((void ***)&__p);
  if (a31) {
    sub_216784EC4(a31);
  }
  sub_2167FB780((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

BOOL sub_21692B914(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, *a2);
  if (*((void *)KeyFrames + 1) == v5 || (uint64_t v6 = v5, *(double *)(v5 + 8) != *a2)) {
    uint64_t v6 = *((void *)KeyFrames + 1);
  }
  return *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1) + 8) != v6;
}

BOOL sub_21692B988(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, double *a2, double a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(a1);
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(a1);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2[1]);
  if (*((void *)KeyFrames + 1) == v8)
  {
    v23[0] = (uint64_t)"ts/simplify.cpp";
    v23[1] = (uint64_t)"_IsKnotAnExtreme";
    void v23[2] = 475;
    void v23[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::_IsKnotAnExtreme(const TsSpline &, const TsKeyFrame &, double)";
    char v24 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v23, "kIter != keyMap.end()", 0) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v9 = *(void *)KeyFrames;
  if (*(void *)KeyFrames == v8 && Extrapolation != 0) {
    return 1;
  }
  uint64_t v11 = v8 + 72;
  uint64_t v12 = *((void *)KeyFrames + 1);
  if (v8 + 72 == v12 && HIDWORD(Extrapolation) != 0) {
    return 1;
  }
  if (v9 == v8 && v11 == v12) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2);
  double v15 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  sub_2168EE084((uint64_t)v23);
  double v16 = v15;
  if (v9 != v8)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 72));
    double v16 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
    sub_2168EE084((uint64_t)v23);
  }
  if (v11 == v12)
  {
    double v17 = v15;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 + 72));
    double v17 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
    sub_2168EE084((uint64_t)v23);
    if (v9 != v8 && v8 - 72 != *(void *)KeyFrames && v8 + 144 != *((void *)KeyFrames + 1))
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 - 144));
      double v18 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_2168EE084((uint64_t)v23);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v23, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v8 + 144));
      double v19 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_2168EE084((uint64_t)v23);
      BOOL v20 = v15 > v16;
      BOOL v21 = v15 < v16;
      if (v16 <= v18) {
        BOOL v20 = 0;
      }
      if (v16 >= v18) {
        BOOL v21 = 0;
      }
      if (v15 <= v17) {
        BOOL v20 = 0;
      }
      if (v15 >= v17) {
        BOOL v21 = 0;
      }
      if (v17 <= v19) {
        BOOL v20 = 0;
      }
      if (v17 >= v19) {
        BOOL v21 = 0;
      }
      if (v21 || v20)
      {
        double v16 = v18;
        double v17 = v19;
      }
    }
  }
  if (v15 > v16 && v15 >= v17 || (double v22 = 0.0, v15 >= v16) && v15 > v17)
  {
    double v22 = v15 - v16;
    if (v15 - v16 <= v15 - v17) {
      double v22 = v15 - v17;
    }
  }
  if (v15 < v16 && v15 <= v17 || v15 <= v16 && v15 < v17)
  {
    double v22 = v16 - v15;
    if (v16 - v15 <= v17 - v15) {
      double v22 = v17 - v15;
    }
  }
  return v22 > a3;
}

void sub_21692BC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21692BC8C(void **a1, long long *a2)
{
  double v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  if (v5 >= v4)
  {
    uint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    sub_21692C9AC(&v20, v11, v8, (uint64_t)(a1 + 2));
    uint64_t v12 = v22;
    long long v13 = *a2;
    *((void *)v22 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    double v14 = v21;
    double v7 = v22 + 24;
    v22 += 24;
    double v16 = (char *)*a1;
    double v15 = (char *)a1[1];
    if (v15 == *a1)
    {
      double v18 = (char *)a1[1];
    }
    else
    {
      do
      {
        long long v17 = *(_OWORD *)(v15 - 24);
        *((void *)v14 - 1) = *((void *)v15 - 1);
        *(_OWORD *)(v14 - 24) = v17;
        v14 -= 24;
        v15 -= 24;
      }
      while (v15 != v16);
      double v18 = (char *)*a1;
      double v15 = (char *)a1[1];
      double v7 = v22;
    }
    *a1 = v14;
    a1[1] = v7;
    double v19 = a1[2];
    a1[2] = v23;
    double v22 = v15;
    double v23 = v19;
    BOOL v20 = v18;
    BOOL v21 = v18;
    if (v15 != v18) {
      double v22 = &v18[(v15 - v18 - 24) % 0x18uLL];
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
    double v7 = v5 + 24;
  }
  a1[1] = v7;
}

void sub_21692BDF8(uint64_t *a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, void *a4, double *a5)
{
  uint64_t v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= a2)
  {
    double v15 = "ts/simplify.cpp";
    double v16 = "_SetKnotInfoErrorIfKeyRemoved";
    uint64_t v17 = 412;
    double v18 = "void pxrInternal__aapl__pxrReserved__::_SetKnotInfoErrorIfKeyRemoved(std::vector<_EditSimplifyKnotInfo> &, siz"
          "e_t, TsSpline *, const std::vector<double> &, const GfInterval &)";
    char v19 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "i >= 0 && i < ki.size()", 0))return; {
    uint64_t v10 = *a1;
    }
  }
  if (*(unsigned char *)(v10 + 24 * a2 + 12))
  {
    if (a2 && 0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 3) - 1 > a2) {
      goto LABEL_5;
    }
    double v15 = "ts/simplify.cpp";
    double v16 = "_SetKnotInfoErrorIfKeyRemoved";
    uint64_t v17 = 417;
    double v18 = "void pxrInternal__aapl__pxrReserved__::_SetKnotInfoErrorIfKeyRemoved(std::vector<_EditSimplifyKnotInfo> &, siz"
          "e_t, TsSpline *, const std::vector<double> &, const GfInterval &)";
    char v19 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "i > 0 && i < ki.size()-1", 0))
    {
      uint64_t v10 = *a1;
LABEL_5:
      uint64_t v11 = 3 * a2;
      uint64_t v12 = (double *)(v10 + 8 * v11);
      double v13 = *v12;
      double v14 = v12[3];
      double v15 = (char *)*((void *)v12 - 3);
      LOBYTE(v16) = fabs(*(double *)&v15) != INFINITY;
      uint64_t v17 = *(void *)&v14;
      LOBYTE(v18) = fabs(v14) != INFINITY;
      *(double *)(*a1 + 8 * v11 + 16) = pxrInternal__aapl__pxrReserved__::_ComputeErrorIfKeyRemoved(this, (double *)&v15, a4, a5, v13);
    }
  }
  else
  {
    *(void *)(v10 + 24 * a2 + 16) = 0x7FEFFFFFFFFFFFFFLL;
  }
}

void pxrInternal__aapl__pxrReserved__::TsSimplifySplinesInParallel(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****a1, pxrInternal__aapl__pxrReserved__::TsSpline **a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3, void *a4, double a5, double a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  double v36 = a6;
  double v37 = a5;
  uint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  if (v8 == v9)
  {
    uint64_t v17 = *a1;
    double v16 = a1[1];
    double v33 = &v37;
    double v34 = &v36;
    LODWORD(v39[0]) = 0;
    uint64_t v41 = 65539;
    int v42 = 55;
    tbb::task_group_context::init((uint64_t)v39, (uint64_t)v8, (uint64_t)a3, a4);
    if (v17 < v16)
    {
      v32[0] = (tbb::task_group_context *)v39;
      uint64_t v18 = tbb::internal::allocate_root_with_context_proxy::allocate(v32, 0x38uLL);
      *(unsigned char *)(v18 - 11) = 1;
      *(void *)uint64_t v18 = &unk_26C7513D8;
      *(void *)(v18 + 8) = v16;
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 1;
      *(void *)(v18 + 32) = &v33;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v18);
      *(_DWORD *)(v18 + 48) = 0;
      *(unsigned char *)(v18 + 52) = 5;
      *(void *)(v18 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v18 - 40) + 16))(*(void *)(v18 - 40), v18, v18 - 8);
    }
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v39);
  }
  else
  {
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    uint64_t v12 = (char *)v11 - (char *)*a1;
    unint64_t v13 = v12 >> 3;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3);
    if (v12 >> 3 == v14)
    {
      if (v12 == 8)
      {
        double v15 = *v10;
        pxrInternal__aapl__pxrReserved__::TsSimplifySpline(v15, v8, a3, a5, a6);
      }
      else
      {
        double v33 = 0;
        double v34 = 0;
        unint64_t v35 = 0;
        sub_21692C3C0((uint64_t *)&v33, v12 >> 3);
        if (v11 == v10)
        {
          unint64_t v26 = v34;
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          if (v13 <= 1) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = v13;
          }
          unint64_t v26 = v34;
          do
          {
            uint64_t v27 = (uint64_t *)&(*a1)[v24];
            uint64_t v28 = (uint64_t)*a2 + v23;
            if ((unint64_t)v26 >= v35)
            {
              unint64_t v26 = (void *)sub_21692D2EC((uint64_t *)&v33, v27, v28);
            }
            else
            {
              void *v26 = *v27;
              sub_21692C844(v26 + 1, v28);
              v26 += 4;
            }
            double v34 = (double *)v26;
            ++v24;
            v23 += 24;
            --v25;
          }
          while (v25);
        }
        unint64_t v29 = (unint64_t)v33;
        v32[0] = (tbb::task_group_context *)&v37;
        v32[1] = (tbb::task_group_context *)&v36;
        LODWORD(v39[0]) = 0;
        uint64_t v41 = 65539;
        int v42 = 55;
        tbb::task_group_context::init((uint64_t)v39, v20, v21, v22);
        if (v29 < (unint64_t)v26)
        {
          uint64_t v38 = v39;
          uint64_t v30 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v38, 0x38uLL);
          *(unsigned char *)(v30 - 11) = 1;
          *(void *)uint64_t v30 = &unk_26C751468;
          *(void *)(v30 + 8) = v26;
          *(void *)(v30 + 16) = v29;
          *(void *)(v30 + 24) = 1;
          *(void *)(v30 + 32) = v32;
          unint64_t v31 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v30);
          *(_DWORD *)(v30 + 48) = 0;
          *(unsigned char *)(v30 + 52) = 5;
          *(void *)(v30 + 40) = (v31 >> 1) & 0x7FFFFFFFFFFFFFFELL;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v30 - 40) + 16))(*(void *)(v30 - 40), v30, v30 - 8);
        }
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)v39);
        v39[0] = (void **)&v33;
        sub_21692D014(v39);
      }
    }
    else
    {
      v39[0] = (void **)"ts/simplify.cpp";
      v39[1] = (void **)"TsSimplifySplinesInParallel";
      v39[2] = (void **)948;
      v39[3] = (void **)"void pxrInternal__aapl__pxrReserved__::TsSimplifySplinesInParallel(const std::vector<TsSpline *>"
                        " &, const std::vector<GfMultiInterval> &, double, double)";
      char v40 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v39, 1, (pxrInternal__aapl__pxrReserved__ *)"splines size %zd != intervals size %zd", v13, v14);
    }
  }
}

void sub_21692C32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a19, v23);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a21);
  a12 = &a14;
  sub_21692D014((void ***)&a12);
  _Unwind_Resume(a1);
}

void **sub_21692C3C0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 32 * v6;
    sub_21692D0A0(a1, v7);
    return sub_21692D26C(v7);
  }
  return result;
}

void sub_21692C440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21692D26C((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsResampleSpline(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, pxrInternal__aapl__pxrReserved__::TsSpline *a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3, double a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (this)
  {
    sub_21692C844(&v16, (uint64_t)a2);
    pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(this, (uint64_t)&v18);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect((pxrInternal__aapl__pxrReserved__::GfMultiInterval *)&v16, (uint64_t)&v18);
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(&v18, this);
    uint64_t v14 = v16;
    double v15 = &v17;
    while ((void **)v14 != v15)
    {
      for (double i = *(double *)(*sub_21692C678(&v14, v6, v7) + 32);
            i <= *(double *)(*sub_21692C678(&v14, v8, v9) + 48);
            double i = i + 1.0)
      {
        v23[1] = 0;
        pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(&v18, 2, 0, v23, 0, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24, i, 0.33);
        if (v24[72]) {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v24);
        }
        sub_2168EE084((uint64_t)v23);
      }
      sub_2168A67E8(&v14);
    }
    uint64_t v12 = v18;
    uint64_t v11 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v13 = (std::__shared_weak_count *)this[1];
    *this = v12;
    this[1] = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)v11;
    if (v13) {
      sub_216784EC4(v13);
    }
    pxrInternal__aapl__pxrReserved__::TsSimplifySpline(this, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v16, (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)v7, a4, 0.001);
    if (v19) {
      sub_216784EC4(v19);
    }
    sub_2167FB780((uint64_t)&v16, v17);
  }
  else
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)"ts/simplify.cpp";
    char v19 = (std::__shared_weak_count *)"TsResampleSpline";
    uint64_t v20 = 980;
    uint64_t v21 = "void pxrInternal__aapl__pxrReserved__::TsResampleSpline(TsSpline *, const GfMultiInterval &, double)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid spline.", a4);
  }
}

void sub_21692C624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  sub_2167FB780((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void *sub_21692C678(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::GfMultiInterval>::o"
            "perator->() [T = pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

double sub_21692C6F4(int a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, pxrInternal__aapl__pxrReserved__::TsSpline *a3, double *a4, void *a5, double *a6, double a7)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, a2);
  double v13 = fmax(a4[2] - *a4, 0.0) * a7;
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17)) {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v13);
    }
  }
  else if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v13);
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a3, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16, 0);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16);
  double v14 = sub_21692A7A0((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a3, a4, a5, a6, 0);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  return v14;
}

void sub_21692C818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)va);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21692C844(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_21692C89C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_21692C884(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_21692C89C(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_2168A6E70(v5, v6, (uint64_t)(v4 + 4), (_OWORD *)v4 + 2);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_21692C928(void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v4 - 72));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_21692C9AC(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21677CA1C();
    }
    uint64_t v7 = (char *)operator new(24 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[24 * a2];
  return a1;
}

uint64_t sub_21692CA30(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  char v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 3;
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C7513D8;
        *(void *)(v9 + 8) = *((void *)this + 1);
        unint64_t v10 = *((void *)this + 2)
            + 8
            * ((((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 3)
              + (unint64_t)((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 3 < 0)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(void *)(v9 + 24) = *((void *)this + 3);
        *(void *)(v9 + 32) = *((void *)this + 4);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 3;
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_21692CF40(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < (unint64_t)((uint64_t)(*((void *)&v26 + 3 * v25[0])
                                                                             - *((void *)&v26 + 3 * v25[0] + 1)) >> 3))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      char v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)char v19 = &unk_26C751420;
      __dmb(0xBu);
      v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      uint64_t v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C7513D8;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_21692CE94((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21692CE94((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)this + 1);
  return 0;
}

uint64_t sub_21692CE8C()
{
  return 0;
}

void sub_21692CE94(uint64_t a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2[1];
  if (v3 != *a2)
  {
    do
    {
      unint64_t v5 = *(double ***)(a1 + 32);
      unint64_t v6 = *v3;
      pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange(*v3, (uint64_t)v8);
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(v9);
      pxrInternal__aapl__pxrReserved__::TsSimplifySpline(v6, (pxrInternal__aapl__pxrReserved__::TsSpline *)v9, v7, **v5, *v5[1]);
      sub_2167FB780((uint64_t)v9, v10);
      ++v3;
    }
    while (v3 != v2);
  }
}

void sub_21692CF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

unsigned __int8 *sub_21692CF40(unsigned __int8 *result, unsigned int a2)
{
  unsigned int v2 = result[2];
  if (v2 <= 7)
  {
    unsigned int v3 = result + 16;
    unint64_t v4 = *result;
    unsigned __int8 v5 = result[v4 + 3];
    do
    {
      if (a2 <= v5) {
        break;
      }
      char v6 = v4;
      unint64_t v7 = &v3[24 * v4];
      uint64_t v8 = v7 + 16;
      uint64_t v9 = v7 + 8;
      if (*((void *)v7 + 2) >= (unint64_t)((uint64_t)(*(void *)v7 - *((void *)v7 + 1)) >> 3)) {
        break;
      }
      unint64_t v4 = (unint64_t)&result[v4];
      uint64_t v10 = (v6 + 1) & 7;
      uint64_t v11 = &v3[24 * v10];
      uint64_t v12 = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v7;
      *((void *)v11 + 2) = v12;
      uint64_t v13 = *((void *)v11 + 1);
      *(void *)unint64_t v7 = *(void *)v11;
      *uint64_t result = v10;
      uint64_t v14 = v13 + 8 * ((((*(void *)v11 - v13) >> 3) + (unint64_t)((*(void *)v11 - v13) >> 3 < 0)) >> 1);
      *(void *)uint64_t v11 = v14;
      *uint64_t v9 = v14;
      *uint64_t v8 = v12;
      unsigned __int8 v5 = *(unsigned char *)(v4 + 3) + 1;
      *(unsigned char *)(v4 + 3) = v5;
      result[v10 + 3] = v5;
      result[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

void sub_21692D014(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unsigned __int8 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = v4 - 32;
        sub_2167FB780((uint64_t)(v4 - 24), *((void **)v4 - 2));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unsigned __int8 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_21692D0A0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21692D118((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21692D118(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  void v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 2;
    do
    {
      *(void *)(v7 - 32) = *(v8 - 2);
      *(void *)(v7 - 24) = *(v8 - 1);
      uint64_t v9 = *v8;
      *(void *)(v7 - 16) = *v8;
      uint64_t v10 = v7 - 16;
      uint64_t v11 = v8[1];
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(v8 - 1) = (uint64_t)v8;
        *uint64_t v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v10;
      }
      uint64_t v7 = *((void *)&v18 + 1) - 32;
      *((void *)&v18 + 1) -= 32;
      uint64_t v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  sub_21692D1E4((uint64_t)v15);
  return v13;
}

uint64_t sub_21692D1E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21692D21C(a1);
  }
  return a1;
}

void sub_21692D21C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 8;
    do
    {
      sub_2167FB780(v3, *(void **)(v3 + 8));
      uint64_t v4 = v3 + 24;
      v3 += 32;
    }
    while (v4 != v2);
  }
}

void **sub_21692D26C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_21692D2A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_2167FB780(i - 24, *(void **)(i - 16));
  }
}

uint64_t sub_21692D2EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  char v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_2168707F4(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (uint64_t *)&v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  long long v17 = v13;
  long long v18 = &v12[32 * v11];
  *uint64_t v13 = *a2;
  sub_21692C844(v13 + 1, a3);
  v17 += 4;
  sub_21692D0A0(a1, v16);
  uint64_t v14 = a1[1];
  sub_21692D26C(v16);
  return v14;
}

void sub_21692D3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21692D26C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21692D3E8(tbb::internal::allocate_continuation_proxy *this, uint64_t a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v4 = *((void *)this - 4);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *((unsigned __int8 *)this + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *((unsigned char *)this + 52) = v5 + 1;
      }
    }
  }
  unint64_t v6 = (long long *)((char *)this + 8);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 5;
  if (v7 < v8)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C751468;
        *(void *)(v11 + 8) = *((void *)this + 1);
        unint64_t v12 = *((void *)this + 2)
            + 32
            * ((((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 5)
              + (unint64_t)((uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 5 < 0)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(void *)(v11 + 24) = *((void *)this + 3);
        *(void *)(v11 + 32) = *((void *)this + 4);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v7 = *((void *)this + 3);
        unint64_t v8 = (uint64_t)(*((void *)this + 1) - *((void *)this + 2)) >> 5;
        if (v7 >= v8) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v28 = 0x10000;
    long long v29 = *v6;
    uint64_t v30 = *((void *)this + 3);
    while (1)
    {
      sub_21692D894(v28, *((unsigned __int8 *)this + 52));
      char v16 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v16 & 1) == 0) {
        break;
      }
      unsigned __int8 v19 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v19;
      unsigned __int8 v18 = v28[2];
      if (v28[2] < 2u)
      {
        unsigned int v17 = v28[0];
        if (v28[v28[0] + 3] < v19
          && *((void *)&v29 + 3 * v28[0] + 2) < (unint64_t)((uint64_t)(*((void *)&v29 + 3 * v28[0])
                                                                             - *((void *)&v29 + 3 * v28[0] + 1)) >> 5))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v20 = v28[1];
      unsigned __int8 v21 = v28[v28[1] + 3];
      long long v22 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v22 - 11) = 1;
      *(void *)long long v22 = &unk_26C751420;
      __dmb(0xBu);
      v22[8] = 0;
      *((void *)this - 4) = v22;
      *((void *)v22 - 3) = 2;
      uint64_t v23 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v22, 0x38uLL);
      uint64_t v24 = (char *)&v29 + 24 * v20;
      *(unsigned char *)(v23 - 11) = 1;
      *(void *)uint64_t v23 = &unk_26C751468;
      long long v25 = *(_OWORD *)v24;
      *(void *)(v23 + 24) = *((void *)v24 + 2);
      *(_OWORD *)(v23 + 8) = v25;
      *(void *)(v23 + 32) = *((void *)this + 4);
      uint64_t v26 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v26;
      *(void *)(v23 + 40) = v26;
      *(_DWORD *)(v23 + 48) = 2;
      *(unsigned char *)(v23 + 52) = *((unsigned char *)this + 52) - v21;
      (***(void (****)(void))(v23 - 40))();
      unsigned __int8 v18 = --v28[2];
      v28[1] = (v28[1] + 1) & 7;
LABEL_27:
      if (!v18 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v17 = v28[0];
LABEL_22:
    sub_21692D83C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)&v29 + 3 * v17, v15);
    unsigned __int8 v18 = --v28[2];
    v28[0] = (v28[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21692D83C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****)this + 1, a3);
  return 0;
}

void sub_21692D83C(uint64_t a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames ****a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      unint64_t v6 = (pxrInternal__aapl__pxrReserved__::TsSpline *)(v4 + 1);
      unint64_t v7 = *v4;
      v4 += 4;
      pxrInternal__aapl__pxrReserved__::TsSimplifySpline(v7, v6, a3, ***(double ***)(a1 + 32), **(double **)(*(void *)(a1 + 32) + 8));
    }
    while (v4 != v3);
  }
}

unsigned __int8 *sub_21692D894(unsigned __int8 *result, unsigned int a2)
{
  unsigned int v2 = result[2];
  if (v2 <= 7)
  {
    uint64_t v3 = result + 16;
    unint64_t v4 = *result;
    unsigned __int8 v5 = result[v4 + 3];
    do
    {
      if (a2 <= v5) {
        break;
      }
      char v6 = v4;
      unint64_t v7 = &v3[24 * v4];
      unint64_t v8 = v7 + 16;
      unint64_t v9 = v7 + 8;
      if (*((void *)v7 + 2) >= (unint64_t)((uint64_t)(*(void *)v7 - *((void *)v7 + 1)) >> 5)) {
        break;
      }
      unint64_t v4 = (unint64_t)&result[v4];
      uint64_t v10 = (v6 + 1) & 7;
      uint64_t v11 = &v3[24 * v10];
      uint64_t v12 = *((void *)v7 + 2);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v7;
      *((void *)v11 + 2) = v12;
      uint64_t v13 = *((void *)v11 + 1);
      *(void *)unint64_t v7 = *(void *)v11;
      *uint64_t result = v10;
      uint64_t v14 = v13 + 32 * ((((*(void *)v11 - v13) >> 5) + (unint64_t)((*(void *)v11 - v13) >> 5 < 0)) >> 1);
      *(void *)uint64_t v11 = v14;
      *unint64_t v9 = v14;
      *unint64_t v8 = v12;
      unsigned __int8 v5 = *(unsigned char *)(v4 + 3) + 1;
      *(unsigned char *)(v4 + 3) = v5;
      result[v10 + 3] = v5;
      result[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  unsigned int v2 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v2);

  return sub_216931C6C(this, (uint64_t)v2);
}

void sub_21692D9B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, unsigned int a3, unsigned int a4, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a5)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v10);
  sub_216931C6C(a1, (uint64_t)v10);
  uint64_t v11 = *a1;
  unint64_t v13 = __PAIR64__(a4, a3);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(v11, (double *)&v13);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(*a1, a5);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(*a1, a2);
  return a1;
}

void sub_21692DA94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TsSpline *pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(pxrInternal__aapl__pxrReserved__::TsSpline *a1, long long *a2, unsigned int a3, unsigned int a4, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v10);
  sub_216931C6C(a1, (uint64_t)v10);
  uint64_t v11 = *(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a1;
  *(void *)&long long i = __PAIR64__(a4, a3);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(v11, (double *)&i);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a1, a5);
  for (long long i = *a2; (void)i != *((void *)&i + 1); sub_21692DDC0(&i))
  {
    uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_21692DD40((uint64_t *)&i, v12, v13);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v14);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, 0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  }
  return a1;
}

void sub_21692DBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    sub_216784EC4(v13);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(pxrInternal__aapl__pxrReserved__::TsSpline *a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a3)
  {
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  if (pxrInternal__aapl__pxrReserved__::TsSpline::CanSetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a1, a2, (uint64_t)__p))
  {
    pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
    char v6 = *(void **)a1;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v11, a2);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrame(v6, (uint64_t)v11, a3);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v11);
  }
  else
  {
    v7[0] = "ts/spline.cpp";
    v7[1] = "SetKeyFrame";
    v7[2] = 250;
    void v7[3] = "void pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(TsKeyFrame, GfInterval *)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21692DD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21692DD40(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "sKeyFrame>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TsKeyFrame>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21692DDB8()
{
}

void *sub_21692DDC0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TsKeyFrame>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TsKeyFrame>"
            ", Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2 == v3) {
    return 1;
  }
  else {
    return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::operator==(v2, v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::operator!=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2 == v3) {
    return 0;
  }
  else {
    return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::operator==(v2, v3) ^ 1;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsEmpty(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  uint64_t KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  return *KeyFrames == KeyFrames[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  sub_216851EE4((uint64_t)&v8, "Ts", "TsSpline::_Detach");
  uint64_t v2 = *((void *)this + 1);
  if (!v2 || *(void *)(v2 + 8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v3, *(const pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, 0);
    sub_216931C6C(&v7, (uint64_t)v3);
    uint64_t v5 = *(void *)this;
    char v4 = (std::__shared_weak_count *)*((void *)this + 1);
    *(_OWORD *)this = v7;
    *(void *)&long long v7 = v5;
    *((void *)&v7 + 1) = v4;
    if (v4) {
      sub_216784EC4(v4);
    }
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
}

void sub_21692DF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v11);
  sub_21684E6B8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::ClearRedundantKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, std::type_info *a2, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a3)
{
  uint64_t KeyFrames = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  long long v22 = 0;
  uint64_t v23 = 0;
  unsigned __int8 v21 = 0;
  sub_216931094(&v21, *KeyFrames, KeyFrames[1], 0x8E38E38E38E38E39 * ((KeyFrames[1] - *KeyFrames) >> 3));
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(v20);
  char v7 = sub_2169311A0(a3, v20);
  sub_2167FB780((uint64_t)v20, v20[1]);
  char v10 = 0;
  char v16 = v22;
  unsigned int v17 = v22;
  uint64_t v18 = v21;
  unsigned __int8 v19 = v21;
  while (v17 != v19)
  {
    uint64_t v11 = (double *)sub_21692E12C((uint64_t)&v16, v8, v9);
    if pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v11, a2)&& ((v7 & 1) != 0 || (pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(a3, v11[1])))
    {
      double v14 = *(double *)(*(void *)(sub_21692E278((uint64_t)&v16, v12, v13) + 8) - 64);
      pxrInternal__aapl__pxrReserved__::TsSpline::_Detach((pxrInternal__aapl__pxrReserved__::TsSpline *)this);
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(*this, 0, v14);
      char v10 = 1;
    }
    sub_21692E2F8((uint64_t)&v16);
  }
  char v16 = (void **)&v21;
  sub_21692C928(&v16);
  return v10 & 1;
}

void sub_21692E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, char a16)
{
  a9 = (void **)&a16;
  sub_21692C928(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21692E12C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == *(void *)(a1 + 24))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, true"
            ">::operator*() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = true]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 72;
}

void sub_21692E1A8()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, std::type_info *a3)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  LoopParams = (_OWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  v13[0] = *LoopParams;
  long long v8 = LoopParams[4];
  long long v10 = LoopParams[1];
  long long v9 = LoopParams[2];
  void v13[3] = LoopParams[3];
  v13[4] = v8;
  v13[1] = v10;
  void v13[2] = v9;
  return pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant(KeyFrames, a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v13, a3, v11);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::RemoveKeyFrame(pxrInternal__aapl__pxrReserved__::TsSpline *a1, uint64_t a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
  char v6 = *(void **)a1;

  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(v6, a2, a3);
}

uint64_t sub_21692E278(uint64_t result, uint64_t a2, char *a3)
{
  if (*(void *)(result + 8) == *(void *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, true"
            ">::operator->() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = true]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_21692E2F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKey"
            "FrameMap, true>::operator++() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = true]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 - 72;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetRawKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetNormalKeyFrames(*this);
}

void *pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFramesInMultiInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  for (i = *(_OWORD *)result; (void)i != *((void *)&i + 1); uint64_t result = sub_21692E560(&i))
  {
    long long v8 = sub_21692E464(&i, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(a2, *(double *)(*v8 + 8)))
    {
      uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_21692E4E0((uint64_t *)&i, v9, v10);
      unint64_t v12 = a3[1];
      if (v12 >= a3[2])
      {
        uint64_t v13 = sub_216931D88(a3, v11);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a3[1], v11);
        uint64_t v13 = v12 + 72;
        a3[1] = v12 + 72;
      }
      a3[1] = v13;
    }
  }
  return result;
}

void sub_21692E43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_21692E464(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap"
            ">::operator->() [T = const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_21692E4E0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap"
            ">::operator*() [T = const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21692E558()
{
}

void *sub_21692E560(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TsKeyFrameMap>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::TsSpline::GetFrameRange@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*result == result[1])
  {
    BOOL v7 = 0;
    BOOL v8 = 0;
    double v5 = 0.0;
    double v6 = 0.0;
  }
  else
  {
    uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
    double v5 = *(double *)(*result + 8);
    double v6 = *(double *)(result[1] - 64);
    BOOL v7 = fabs(v5) != INFINITY;
    BOOL v8 = fabs(v6) != INFINITY;
  }
  *(double *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v8;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::SwapKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
  char v4 = *(void **)a1;

  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SwapKeyFrames(v4, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::CanSetKeyFrame(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, uint64_t a3)
{
  v25[2] = *MEMORY[0x263EF8340];
  uint64_t KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  if (*KeyFrames == KeyFrames[1]) {
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v25, a2);
  uint64_t Typeid = pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(a1);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
  int v9 = strcmp((const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL));
  BOOL v10 = v9 == 0;
  if (v9) {
    BOOL v11 = a3 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
    double v14 = v21;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v13 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v21);
    if (v22 < 0) {
      double v14 = (void **)v21[0];
    }
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(a1);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v15 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v20 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"cannot mix keyframes of different value types; (adding %s to existing keyframes of type %s)",
      v16,
      v17,
      v14,
      v18);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v23;
    *(void *)(a3 + 16) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
  }
  sub_2168EE084((uint64_t)v25);
  return v10;
}

void sub_21692E83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*(void *)KeyFrames == *(void *)(KeyFrames + 8)) {
    return MEMORY[0x263F8C288];
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v4, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
  uint64_t Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  sub_2168EE084((uint64_t)v4);
  return Typeid;
}

void sub_21692E924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::KeyFrameIsInLoopedRange(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  LoopParams = (_OWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  v19[0] = *LoopParams;
  long long v4 = LoopParams[4];
  long long v6 = LoopParams[1];
  long long v5 = LoopParams[2];
  void v19[3] = LoopParams[3];
  v19[4] = v4;
  v19[1] = v6;
  void v19[2] = v5;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v19);
  if (result)
  {
    uint64_t LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v19);
    double v9 = *(double *)LoopedInterval;
    int v10 = *(unsigned __int8 *)(LoopedInterval + 8);
    double v11 = *(double *)(LoopedInterval + 16);
    int v12 = *(unsigned __int8 *)(LoopedInterval + 24);
    uint64_t MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v19);
    double v14 = *(double *)(MasterInterval + 16);
    double v15 = *((double *)a2 + 1);
    if (*(double *)MasterInterval >= v15
      && (*(double *)MasterInterval == v15 ? (BOOL v16 = *(unsigned char *)(MasterInterval + 8) == 0) : (BOOL v16 = 1), v16))
    {
      BOOL v17 = 0;
    }
    else
    {
      BOOL v17 = *(unsigned __int8 *)(MasterInterval + 24) != 0;
      if (v14 != v15) {
        BOOL v17 = 0;
      }
      if (v14 > v15) {
        BOOL v17 = 1;
      }
    }
    if (v9 < v15 || (v9 == v15 ? (BOOL v18 = v10 == 0) : (BOOL v18 = 1), !v18))
    {
      if (v11 > v15) {
        return !v17;
      }
      if (v11 == v15)
      {
        if (!v12) {
          BOOL v17 = 1;
        }
        return !v17;
      }
    }
    return 0;
  }
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsSpline::GetLoopParams@<Q0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t LoopParams = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  long long v4 = *(_OWORD *)(LoopParams + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(LoopParams + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(LoopParams + 64);
  __n128 result = *(__n128 *)(LoopParams + 16);
  *(_OWORD *)a2 = *(_OWORD *)LoopParams;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  double v32 = a7;
  if (pxrInternal__aapl__pxrReserved__::TsSpline::IsTimeLooped(a1, a7))
  {
    *(unsigned char *)a6 = 0;
    *((unsigned char *)a6 + 72) = 0;
  }
  else
  {
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    pxrInternal__aapl__pxrReserved__::TsSpline::_GetBreakdown(a1, (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)&v30, a2, a3, a4, a7, a8);
    if ((void)v30 != *((void *)&v30 + 1))
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v29 = 0;
      *(_OWORD *)uint64_t v27 = v30;
      while (v27[0] != v27[1])
      {
        BOOL v18 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_21692F208(v27, v16, v17);
        if ((pxrInternal__aapl__pxrReserved__::TsSpline::CanSetKeyFrame(a1, v18, (uint64_t)__p) & 1) == 0)
        {
          uint64_t v22 = (void **)"ts/spline.cpp";
          long long v23 = "Breakdown";
          uint64_t v24 = 284;
          long long v25 = "std::optional<TsKeyFrame> pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(double, TsKnotType, BOOL"
                ", double, const VtValue &, GfInterval *)";
          char v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (uint64_t *)__p);
          *(unsigned char *)a6 = 0;
          *((unsigned char *)a6 + 72) = 0;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_23;
        }
        sub_21692F288(v27);
      }
      if (a5)
      {
        *(void *)a5 = 0;
        *(unsigned char *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
        unsigned __int8 v19 = &v22;
        *(unsigned char *)(a5 + 24) = 0;
      }
      else
      {
        unsigned __int8 v19 = 0;
      }
      *(_OWORD *)uint64_t v27 = v30;
      while (v27[0] != v27[1])
      {
        uint64_t v22 = 0;
        LOBYTE(v23) = 0;
        uint64_t v24 = 0;
        LOBYTE(v25) = 0;
        char v20 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_21692F208(v27, v16, v17);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v33, v20);
        pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame((pxrInternal__aapl__pxrReserved__::TsSpline *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v33, (uint64_t)v19);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v33);
        if (a5) {
          sub_2168A5CD4(a5, (uint64_t)&v22);
        }
        sub_21692F288(v27);
      }
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
    }
    unsigned __int8 v21 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsSpline::find(a1, &v32);
    if (*(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1)
                                                                + 8) == v21)
    {
      uint64_t v22 = (void **)"ts/spline.cpp";
      long long v23 = "Breakdown";
      uint64_t v24 = 309;
      long long v25 = "std::optional<TsKeyFrame> pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(double, TsKnotType, BOOL, do"
            "uble, const VtValue &, GfInterval *)";
      char v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to find keyframe: %f", a7);
      *(unsigned char *)a6 = 0;
      *((unsigned char *)a6 + 72) = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a6, v21);
      *((unsigned char *)a6 + 72) = 1;
    }
LABEL_23:
    uint64_t v22 = (void **)&v30;
    sub_21692C928(&v22);
  }
}

void sub_21692ED1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  a10 = &a24;
  sub_21692C928((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsTimeLooped(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2)
{
  uint64_t LoopParams = (_OWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(*this);
  v15[0] = *LoopParams;
  long long v4 = LoopParams[4];
  long long v6 = LoopParams[1];
  long long v5 = LoopParams[2];
  void v15[3] = LoopParams[3];
  v15[4] = v4;
  v15[1] = v6;
  void v15[2] = v5;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v15);
  if (result)
  {
    uint64_t LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v15);
    if (*(double *)LoopedInterval >= a2 && (*(double *)LoopedInterval != a2 || *(unsigned char *)(LoopedInterval + 8) == 0)) {
      return 0;
    }
    double v10 = *(double *)(LoopedInterval + 16);
    if (v10 <= a2 && (v10 != a2 || *(unsigned char *)(LoopedInterval + 24) == 0)) {
      return 0;
    }
    uint64_t MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)v15);
    if (*(double *)MasterInterval >= a2 && (*(double *)MasterInterval != a2 || *(unsigned char *)(MasterInterval + 8) == 0)) {
      return 1;
    }
    double v14 = *(double *)(MasterInterval + 16);
    if (v14 > a2) {
      return 0;
    }
    return v14 != a2 || *(unsigned char *)(MasterInterval + 24) == 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::_GetBreakdown(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, uint64_t a3, char a4, void *a5, double a6, double a7)
{
  v33[2] = *MEMORY[0x263EF8340];
  double v27 = a6;
  uint64_t v15 = *(void *)a2;
  for (uint64_t i = *((void *)a2 + 1);
        i != v15;
  *((void *)a2 + 1) = v15;
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a6);
  uint64_t v18 = *((void *)KeyFrames + 1);
  if (v18 == result || *(double *)(result + 8) != a6)
  {
    if (*(void *)KeyFrames == v18)
    {
      if (a5[1])
      {
        sub_2168EE4C4(v33, a5);
      }
      else
      {
        v33[0] = 0;
        v33[1] = (uint64_t)&unk_26C750B03;
      }
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v32, &v27, v33, a3, &v30, v28, a7, a7);
      char v26 = sub_21692F35C(a2, &v27);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v26, (void (***)(void))v32);
    }
    else
    {
      if (a5[1]) {
        sub_2168EE4C4(v33, a5);
      }
      else {
        pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 0, v33, a6);
      }
      if (a3 == 2
        && (pxrInternal__aapl__pxrReserved__::TsKeyFrame::SupportsTangents(*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero(&v30, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
        double v19 = v27;
        double v20 = *(double *)(*(void *)KeyFrames + 8);
        double v21 = *(double *)(*((void *)KeyFrames + 1) - 64);
        if ((a4 & 1) == 0)
        {
          if (v27 < v20 && *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*a1) == 1)
          {
            pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 1, v32, v27);
            sub_2168ED33C(&v30, v32);
            sub_2168EE084((uint64_t)v32);
          }
          if (v27 > v21
            && *(_DWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*a1) + 4) == 1)
          {
            pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 1, v32, v27);
            sub_2168ED33C(&v30, v32);
            sub_2168EE084((uint64_t)v32);
          }
        }
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v32, &v27, v33, 2, &v30, &v30, a7, a7);
        uint64_t v22 = sub_21692F35C(a2, &v27);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v22, (void (***)(void))v32);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v32);
        if ((a4 & 1) == 0 && v19 >= v20 && v19 <= v21)
        {
          long long v23 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(KeyFrames, v27);
          sub_21692F460(a2, v23);
          sub_21692F460(a2, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v23 - 72));
          pxrInternal__aapl__pxrReserved__::Ts_Breakdown((double **)a2, v24);
        }
        goto LABEL_29;
      }
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v32, &v27, v33, a3, &v30, v28, 0.0, 0.0);
      long long v25 = sub_21692F35C(a2, &v27);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v25, (void (***)(void))v32);
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v32);
    sub_2168EE084((uint64_t)v28);
LABEL_29:
    sub_2168EE084((uint64_t)&v30);
    return sub_2168EE084((uint64_t)v33);
  }
  return result;
}

void sub_21692F188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084(v5 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_21692F208(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKeyFrameMap>::ope"
            "rator*() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21692F280()
{
}

void *sub_21692F288(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TsKey"
            "FrameMap>::operator++() [T = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::find(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, *a2);
  if (*((void *)KeyFrames + 1) == result || *(double *)(result + 8) != *a2) {
    return *((void *)KeyFrames + 1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_21692F35C(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a1, double *a2)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a1, *a2);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v4;
  if (*((void *)a1 + 1) == v4 || *(double *)(v4 + 8) != *a2)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7);
    uint64_t v5 = sub_216931278((uint64_t *)a1, v5, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7);
    *((double *)v5 + 1) = *a2;
  }
  return v5;
}

void sub_21692F414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsSpline::Eval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  return pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, a2, 0, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsSpline::EvalDerivative@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  return pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, a2, 1, a3, a4);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_21692F460(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((void *)a1 + 1);
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)a1 != v4)
  {
    double v5 = *((double *)a2 + 1);
    if (v5 <= *((double *)v4 - 8)) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a1, v5);
    }
  }

  return sub_216931924((uint64_t *)a1, v4, a2);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t a2, int a3, char a4, void *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a7, double a8)
{
  sub_216931F20(__p, *(void **)a2, (void *)(a2 + 8));
  sub_216932070(v16, *(void *)(a2 + 16), a5);
  pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleValues(a1, (uint64_t *)__p, a3, a4, v16, a6, a7, a8);
  uint64_t v18 = (void **)v16;
  sub_216932118(&v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_21692F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleValues(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, int a3, char a4, uint64_t *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a7, double a8)
{
  int v21 = a3;
  unint64_t v9 = (a2[1] - *a2) >> 3;
  if (v9 == (a5[1] - *a5) >> 4)
  {
    sub_21693219C(&__p, v9, &v21);
    pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleKnotTypes(a1, a2, &__p, a4, a5, a6, a7, a8);
    if (__p)
    {
      BOOL v17 = (const char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    __p = "ts/spline.cpp";
    BOOL v17 = "_BreakdownMultipleValues";
    uint64_t v18 = 460;
    double v19 = "void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleValues(const std::vector<double> &, TsKnotT"
          "ype, BOOL, double, const std::vector<VtValue> &, GfInterval *, TsKeyFrameMap *)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Number of times and values do not match");
  }
}

void sub_21692F6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleKnotTypes(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, void *a3, char a4, uint64_t *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a7, double a8)
{
  v50[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = (a2[1] - *a2) >> 3;
  if (v8 == (uint64_t)(a3[1] - *a3) >> 2 && v8 == (a5[1] - *a5) >> 4)
  {
    double v44 = 0;
    uint64_t v45 = 0;
    uint64_t v43 = (char *)&v44;
    uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
    uint64_t v14 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)KeyFrames;
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        double v42 = 0.0;
        double v42 = *(double *)(v14 + 8 * v17);
        uint64_t v18 = *a5;
        int v41 = 0;
        int v41 = *(_DWORD *)(*a3 + 4 * v17);
        uint64_t v19 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v15, v42);
        char v20 = (void (***)(void))v19;
        if (*((void *)v15 + 1) != v19 && *(double *)(v19 + 8) == v42)
        {
          if (a7)
          {
            uint64_t v28 = sub_21692F35C(a7, &v42);
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v28, v20);
          }
        }
        else
        {
          if (*(void *)(v18 + v16 + 8))
          {
            uint64_t v49 = (uint64_t *)&v41;
            int v21 = (uint64_t *)sub_216820BE0((uint64_t **)&v43, &v41, (uint64_t)&unk_2174BFD90, (_DWORD **)&v49);
            uint64_t v49 = *(uint64_t **)&v42;
            sub_2168EE4C4(v50, (void *)(v18 + v16));
            uint64_t v22 = (uint64_t **)v21[6];
            if ((unint64_t)v22 >= v21[7])
            {
              uint64_t v23 = sub_216932308(v21 + 5, &v49);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::TsKeyFrame *v22 = v49;
              uint64_t v23 = (uint64_t)(v22 + 3);
              sub_2168EDFA8(v22 + 1, v50);
            }
            v21[6] = v23;
            double v27 = v50;
          }
          else
          {
            uint64_t v49 = (uint64_t *)&v41;
            uint64_t v24 = (uint64_t *)sub_216820BE0((uint64_t **)&v43, &v41, (uint64_t)&unk_2174BFD90, (_DWORD **)&v49);
            pxrInternal__aapl__pxrReserved__::Ts_Eval(a1, 1, 0, v48, v42);
            uint64_t v49 = *(uint64_t **)&v42;
            sub_2168EDFA8(v50, v48);
            long long v25 = (uint64_t **)v24[6];
            if ((unint64_t)v25 >= v24[7])
            {
              uint64_t v26 = sub_216932308(v24 + 5, &v49);
            }
            else
            {
              *long long v25 = v49;
              uint64_t v26 = (uint64_t)(v25 + 3);
              sub_2168EDFA8(v25 + 1, v50);
            }
            v24[6] = v26;
            sub_2168EE084((uint64_t)v50);
            double v27 = v48;
          }
          sub_2168EE084((uint64_t)v27);
        }
        ++v17;
        uint64_t v14 = *a2;
        v16 += 16;
      }
      while (v17 < (a2[1] - *a2) >> 3);
    }
    if (a6)
    {
      *(void *)a6 = 0;
      *(unsigned char *)(a6 + 8) = 0;
      *(void *)(a6 + 16) = 0;
      *(unsigned char *)(a6 + 24) = 0;
    }
    for (uint64_t i = v44; i; uint64_t i = *(char **)i)
    {
      int v30 = *((_DWORD *)i + 8);
      if (v30 <= 2)
      {
        if (v30 == 2)
        {
          LODWORD(v48[0]) = 2;
          uint64_t v49 = v48;
          uint64_t v31 = sub_216820BE0((uint64_t **)&v43, (int *)v48, (uint64_t)&unk_2174BFD90, (_DWORD **)&v49);
          pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownSamples(a1, (uint64_t *)v31 + 5, 2, a4, a6, a7, a8);
          break;
        }
        i += 8;
      }
    }
    double v32 = (uint64_t *)v43;
    if (v43 != (char *)&v44)
    {
      do
      {
        uint64_t v33 = *((unsigned int *)v32 + 8);
        if (v33 != 2) {
          pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownSamples(a1, v32 + 5, v33, a4, a6, a7, a8);
        }
        uint64_t v34 = (char *)v32[1];
        if (v34)
        {
          do
          {
            unint64_t v35 = (char **)v34;
            uint64_t v34 = *(char **)v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            unint64_t v35 = (char **)v32[2];
            BOOL v36 = *v35 == (char *)v32;
            double v32 = (uint64_t *)v35;
          }
          while (!v36);
        }
        double v32 = (uint64_t *)v35;
      }
      while (v35 != &v44);
    }
    sub_216932220((uint64_t)&v43, v44);
  }
  else
  {
    uint64_t v43 = "ts/spline.cpp";
    double v44 = "_BreakdownMultipleKnotTypes";
    uint64_t v45 = 481;
    float v46 = "void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownMultipleKnotTypes(const std::vector<double> &, cons"
          "t std::vector<TsKnotType> &, BOOL, double, const std::vector<VtValue> &, GfInterval *, TsKeyFrameMap *)";
    char v47 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 1, (pxrInternal__aapl__pxrReserved__ *)"Numbers of times, values and knot types do not match");
  }
}

void sub_21692FAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char *a16)
{
}

void pxrInternal__aapl__pxrReserved__::TsSpline::_BreakdownSamples(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a6, double a7)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    if (a5) {
      uint64_t v15 = &v18;
    }
    else {
      uint64_t v15 = 0;
    }
    do
    {
      uint64_t v18 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::TsSpline::Breakdown(a1, a3, a4, (void *)(v7 + 8), (uint64_t)v15, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22, *(double *)v7, a7);
      if (v23) {
        BOOL v16 = a6 != 0;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        unint64_t v17 = sub_21692F35C(a6, (double *)v7);
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v17, v22);
      }
      if (a5) {
        sub_2168A5CD4(a5, (uint64_t)&v18);
      }
      if (v23) {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v22);
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
}

void sub_21692FC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void pxrInternal__aapl__pxrReserved__::TsSpline::Clear(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  memset(v7, 0, sizeof(v7));
  uint64_t v2 = *((void *)this + 1);
  if (v2 && !*(void *)(v2 + 8))
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(*(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v7);
  }
  else
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)operator new(0x88uLL);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(v3, *(const pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v7);
    sub_216931C6C(&v6, (uint64_t)v3);
    uint64_t v5 = *(void *)this;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    *(_OWORD *)this = v6;
    *(void *)&long long v6 = v5;
    *((void *)&v6 + 1) = v4;
    if (v4) {
      sub_216784EC4(v4);
    }
  }
  *(void *)&long long v6 = v7;
  sub_21692C928((void ***)&v6);
}

void sub_21692FD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_21692C928(&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrame@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3@<X8>)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrame(KeyFrames, v6, a2);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a3, result);
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a3 = 0;
  }
  *((unsigned char *)a3 + 72) = v8;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameBefore@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3@<X8>)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameBefore(KeyFrames, v6, a2);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a3, result);
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a3 = 0;
  }
  *((unsigned char *)a3 + 72) = v8;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameAfter@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, double a2@<D0>, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3@<X8>)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::Ts_GetClosestKeyFrameAfter(KeyFrames, v6, a2);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(a3, result);
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a3 = 0;
  }
  *((unsigned char *)a3 + 72) = v8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, std::type_info *a3)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t v7 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((double **)KeyFrames + 1) != v7 && v7[1] == a2)
  {
    return pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(this, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v7, a3);
  }
  else
  {
    v9[0] = "ts/spline.cpp";
    v9[1] = "IsKeyFrameRedundant";
    v9[2] = 649;
    v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(TsTime, const VtValue &) const";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Time %0.02f doesn't correspond to a key frame!", a2);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::HasRedundantKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, std::type_info *a2)
{
  uint64_t KeyFrames = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t v7 = *KeyFrames;
  uint64_t v8 = KeyFrames[1];
  uint64_t v11 = *KeyFrames;
  for (i = v8; ; uint64_t v8 = i)
  {
    if (v7 == v8) {
      return 0;
    }
    unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_21692E4E0(&v11, v5, v6);
    if (pxrInternal__aapl__pxrReserved__::TsSpline::IsKeyFrameRedundant(this, v9, a2)) {
      break;
    }
    sub_21692E560(&v11);
    uint64_t v7 = v11;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(pxrInternal__aapl__pxrReserved__::TsSpline *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, a3, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, double a3)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((void *)KeyFrames + 1) == v6 || (uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)v6, *(double *)(v6 + 8) != a2))
  {
    uint64_t v11 = "ts/spline.cpp";
    int v12 = "IsSegmentFlat";
    uint64_t v13 = 687;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(TsTime, TsTime) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Start time %0.02f doesn't correspond to a key frame!");
    return 0;
  }
  unint64_t v9 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a3);
  if (*((double **)KeyFrames + 1) == v9 || v9[1] != a3)
  {
    uint64_t v11 = "ts/spline.cpp";
    int v12 = "IsSegmentFlat";
    uint64_t v13 = 694;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentFlat(TsTime, TsTime) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"End time %0.02f doesn't correspond to a key frame!");
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v7, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v9, v10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(pxrInternal__aapl__pxrReserved__::TsSpline *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(a2, a3, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2, double a3)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((void *)KeyFrames + 1) == v6 || (uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)v6, *(double *)(v6 + 8) != a2))
  {
    uint64_t v11 = "ts/spline.cpp";
    int v12 = "IsSegmentValueMonotonic";
    uint64_t v13 = 719;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(TsTime, TsTime) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Start time %0.02f doesn't correspond to a key frame!");
    return 0;
  }
  unint64_t v9 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a3);
  if (*((double **)KeyFrames + 1) == v9 || v9[1] != a3)
  {
    uint64_t v11 = "ts/spline.cpp";
    int v12 = "IsSegmentValueMonotonic";
    uint64_t v13 = 726;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsSegmentValueMonotonic(TsTime, TsTime) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"End time %0.02f doesn't correspond to a key frame!");
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::Ts_IsSegmentValueMonotonic(v7, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v9, v10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsVarying(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline::_IsVarying(this, 0.0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::_IsVarying(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*(void *)KeyFrames == *(void *)(KeyFrames + 8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v33, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
  int v5 = sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
  sub_2168EE084((uint64_t)&v33);
  unint64_t Extrapolation = (int *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this);
  int v7 = *Extrapolation;
  int v8 = Extrapolation[1];
  unint64_t v9 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(KeyFrames + 8);
  v33.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
  char v10 = v9;
  if ((v5 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v32, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
    sub_2168ED33C(&v33, &v32);
    sub_2168EE084((uint64_t)&v32);
    char v10 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(KeyFrames + 8);
  }
  uint64_t v11 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames;
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames == v10)
  {
LABEL_41:
    uint64_t v28 = 0;
    goto LABEL_45;
  }
  double v12 = -INFINITY;
  double v13 = INFINITY;
  while (1)
  {
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v32, v11);
      double v14 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v32);
      sub_2168EE084((uint64_t)&v32);
      if (v14 < v13) {
        double v13 = v14;
      }
      if (v14 > v12) {
        double v12 = v14;
      }
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v11))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v32, v11);
        double v15 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)&v32);
        sub_2168EE084((uint64_t)&v32);
        if (v15 < v13) {
          double v13 = v15;
        }
        if (v15 > v12) {
          double v12 = v15;
        }
      }
      if (v12 - v13 > a2) {
        goto LABEL_44;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v32, v11);
      char v17 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v33, v16);
      sub_2168EE084((uint64_t)&v32);
      if ((v17 & 1) == 0) {
        goto LABEL_44;
      }
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v11))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v32, v11);
        char v19 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v33, v18);
        sub_2168EE084((uint64_t)&v32);
        if ((v19 & 1) == 0) {
          goto LABEL_44;
        }
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::HasTangents(v11)) {
      goto LABEL_40;
    }
    uint64_t v20 = *(void *)(KeyFrames + 8);
    Knotuint64_t Type = v7;
    if (v11 != *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames) {
      Knotuint64_t Type = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v9);
    }
    int v22 = v8;
    if (v11 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v20 - 72)) {
      int v22 = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v11);
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetZero((uint64_t *)&v32, v11);
    if (!KnotType) {
      goto LABEL_30;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(v11);
    if (v23 == 0.0)
    {
      Knotuint64_t Type = 0;
      if (!v22)
      {
LABEL_37:
        if (KnotType) {
          sub_2168EE084((uint64_t)v31);
        }
        sub_2168EE084((uint64_t)&v32);
        goto LABEL_40;
      }
      goto LABEL_31;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v31, v11);
    if (!pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v31, &v32, v24))break; {
    Knotuint64_t Type = 1;
    }
LABEL_30:
    if (!v22) {
      goto LABEL_37;
    }
LABEL_31:
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(v11);
    if (v25 == 0.0) {
      goto LABEL_37;
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v30, v11);
    char v27 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v30, &v32, v26);
    sub_2168EE084((uint64_t)v30);
    if (KnotType) {
      sub_2168EE084((uint64_t)v31);
    }
    sub_2168EE084((uint64_t)&v32);
    if ((v27 & 1) == 0) {
      goto LABEL_44;
    }
LABEL_40:
    unint64_t v9 = v11;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v11 + 72);
    if (v11 == *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(KeyFrames + 8)) {
      goto LABEL_41;
    }
  }
  sub_2168EE084((uint64_t)v31);
  sub_2168EE084((uint64_t)&v32);
LABEL_44:
  uint64_t v28 = 1;
LABEL_45:
  sub_2168EE084((uint64_t)&v33);
  return v28;
}

void sub_216930574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::IsVaryingSignificantly(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  return pxrInternal__aapl__pxrReserved__::TsSpline::_IsVarying(this, 0.000001);
}

double pxrInternal__aapl__pxrReserved__::TsSpline::SetExtrapolation(pxrInternal__aapl__pxrReserved__::TsSpline *a1, unsigned int a2, unsigned int a3)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(a1);
  uint64_t v6 = *(void **)a1;
  unint64_t v8 = __PAIR64__(a3, a2);
  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(v6, (double *)&v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::GetType(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  v7[2] = *MEMORY[0x263EF8340];
  uint64_t KeyFrames = pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*(void *)KeyFrames == *(void *)(KeyFrames + 8))
  {
    int v5 = (pxrInternal__aapl__pxrReserved__::TfType *)atomic_load((unint64_t *)&qword_267B8E700);
    if (!v5) {
      int v5 = sub_2169324F8(&qword_267B8E700);
    }
    return *(void *)v5;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v7, *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames);
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v7, v2, v3);
    sub_2168EE084((uint64_t)v7);
  }
  return Type;
}

void sub_216930720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeName(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)(*(void *)(pxrInternal__aapl__pxrReserved__::TsSpline::GetTypeid(this) + 8) & 0x7FFFFFFFFFFFFFFFLL);

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled(v3, a2);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::EvalHeld(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  if (*KeyFrames == KeyFrames[1])
  {
    a3[1] = 0;
    return;
  }
  unint64_t v9 = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  if (*v9 == v9[1])
  {
    v17[0] = 0;
    char v18 = 0;
    goto LABEL_18;
  }
  char v10 = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a1);
  uint64_t v11 = *(const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)v10;
  if (*(double *)(*(void *)v10 + 8) >= a4
    || (double v12 = v10,
        uint64_t v13 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v10, a4),
        *((void *)v12 + 1) != v13)
    && ((uint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v13, *(double *)(v13 + 8) == a4)
      ? (BOOL v14 = a2 == 1)
      : (BOOL v14 = 0),
        v14))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17, v11);
    char v18 = 1;
    goto LABEL_12;
  }
  pxrInternal__aapl__pxrReserved__::TsSpline::GetClosestKeyFrameBefore(a1, a4, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  if (v18)
  {
LABEL_12:
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(a3, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
    goto LABEL_13;
  }
LABEL_18:
  v15[0] = "ts/spline.cpp";
  v15[1] = "EvalHeld";
  void v15[2] = 933;
  void v15[3] = "VtValue pxrInternal__aapl__pxrReserved__::TsSpline::EvalHeld(TsTime, TsSide) const";
  char v16 = 0;
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "kf", 0)) {
    goto LABEL_12;
  }
  a3[1] = 0;
LABEL_13:
  if (v18) {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v17);
  }
}

void sub_2169308F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23) {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a14);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TsSpline::DoSidesDiffer(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double a2)
{
  uint64_t v12[2] = *MEMORY[0x263EF8340];
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  uint64_t v4 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, a2);
  if (*((double **)KeyFrames + 1) == v4) {
    return 0;
  }
  int v5 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v4;
  if (v4[1] != a2) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v4))
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v12, v5);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v11, v5);
    char v8 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v12, &v11, v7);
    sub_2168EE084((uint64_t)&v11);
    sub_2168EE084((uint64_t)v12);
    if ((v8 & 1) == 0) {
      return 1;
    }
  }
  if (*(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)KeyFrames == v5) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72))) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v12, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v5 - 72));
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v11, v5);
  int v10 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v12, &v11, v9);
  sub_2168EE084((uint64_t)&v11);
  sub_2168EE084((uint64_t)v12);
  return !v10;
}

void sub_216930A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TsSpline::IsLinear(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  if (*KeyFrames != KeyFrames[1])
  {
    uint64_t v3 = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
    if (v3[1] - *v3 == 144)
    {
      uint64_t v4 = *(void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
      uint64_t v7 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this) + 8);
      uint64_t v17 = v4;
      uint64_t v18 = v7;
      if (v4 == v7)
      {
LABEL_8:
        if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this) == 1) {
          return *(_DWORD *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetExtrapolation(*this) + 4) == 1;
        }
      }
      else
      {
        while (1)
        {
          char v8 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)sub_216930C00(&v17, v5, v6);
          if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(*v8) != 1) {
            break;
          }
          std::type_info v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)sub_216930C00(&v17, v9, v10);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v19, *v11);
          if ((sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v19) & 1) == 0)
          {
            sub_2168EE084((uint64_t)v19);
            return 0;
          }
          BOOL v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)sub_216930C00(&v17, v12, v13);
          char IsDualValued = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(*v14);
          sub_2168EE084((uint64_t)v19);
          if (IsDualValued) {
            return 0;
          }
          sub_216930C7C(&v17);
          if (v17 == v18) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return 0;
}

void sub_216930BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216930C00(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsSpline>::op"
            "erator->() [T = const pxrInternal__aapl__pxrReserved__::TsSpline, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216930C7C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TsSpline>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TsSpline, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

double pxrInternal__aapl__pxrReserved__::TsSpline::BakeSplineLoops(pxrInternal__aapl__pxrReserved__::TsSpline *this)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(this);
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this;

  return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::BakeSplineLoops(v2);
}

void pxrInternal__aapl__pxrReserved__::TsSpline::SetLoopParams(pxrInternal__aapl__pxrReserved__::TsSpline *this, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a2)
{
  pxrInternal__aapl__pxrReserved__::TsSpline::_Detach(this);
  char v4 = *(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)this;

  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(v4, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::lower_bound(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  double v4 = *a2;

  return pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(KeyFrames, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline::upper_bound(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **this, double *a2)
{
  uint64_t KeyFrames = (pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*this);
  double v4 = *a2;

  return pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(KeyFrames, v4);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **a2)
{
  sub_216779180(a1, (uint64_t)"Ts.Spline(", 10);
  uint64_t KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a2);
  uint64_t v5 = KeyFrames[1];
  uint64_t v6 = v5 - *KeyFrames;
  if (v5 != *KeyFrames)
  {
    sub_216779180(a1, (uint64_t)"[", 1);
    uint64_t v7 = *(void *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a2);
    uint64_t v10 = *(void *)(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(*a2) + 8);
    uint64_t v16 = v7;
    uint64_t v17 = v10;
    if (v7 != v10)
    {
      uint64_t v11 = v6 / 72 - 1;
      do
      {
        uint64_t v12 = sub_216930F10(&v16, v8, v9);
        pxrInternal__aapl__pxrReserved__::operator<<(a1, v12);
        if (v11) {
          uint64_t v13 = ", ";
        }
        else {
          uint64_t v13 = "]";
        }
        if (v11) {
          uint64_t v14 = 2;
        }
        else {
          uint64_t v14 = 1;
        }
        sub_216779180(a1, (uint64_t)v13, v14);
        sub_216930C7C(&v16);
        --v11;
      }
      while (v16 != v17);
    }
  }
  sub_216779180(a1, (uint64_t)")", 1);
  return a1;
}

uint64_t sub_216930F10(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TsSpline>::op"
            "erator*() [T = const pxrInternal__aapl__pxrReserved__::TsSpline, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216930F88()
{
}

uint64_t *sub_216930F90()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7514A0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7514A0, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216931050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void *sub_216931094(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    sub_216873544(result, a4);
    uint64_t result = (void *)sub_21693111C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169310FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21692C928(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21693111C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a4 + v7), (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_21693117C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v4 + v2));
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169311A0(void *a1, double **a2)
{
  if ((double *)a1[2] == a2[2])
  {
    uint64_t v4 = (double *)*a1;
    uint64_t v2 = (double *)(a1 + 1);
    uint64_t v3 = v4;
    if (v4 == v2) {
      return 1;
    }
    uint64_t v5 = *a2;
    while (v3[4] == v5[4]
         && *((unsigned __int8 *)v3 + 40) == *((unsigned __int8 *)v5 + 40)
         && v3[6] == v5[6]
         && *((unsigned __int8 *)v3 + 56) == *((unsigned __int8 *)v5 + 56))
    {
      char v6 = (double *)*((void *)v3 + 1);
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v3 = v6;
          char v6 = *(double **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v3 = (double *)*((void *)v7 + 2);
          BOOL v8 = *(void *)v3 == (void)v7;
          uint64_t v7 = v3;
        }
        while (!v8);
      }
      uint64_t v9 = (double *)*((void *)v5 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(double **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (double *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v8);
      }
      uint64_t v5 = v10;
      if (v3 == v2) {
        return 1;
      }
    }
  }
  return 0;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_216931278(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  uint64_t v4 = this;
  char v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v11 > 0x38E38E38E38E38ELL) {
      sub_21677CB10();
    }
    unint64_t v12 = 0x8E38E38E38E38E39 * (((uint64_t)this - v10) >> 3);
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_216815D10(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v18 = v16;
    uint64_t v19 = &v16[72 * v12];
    uint64_t v20 = v19;
    char v21 = &v16[72 * v15];
    sub_2169314A8(&v18, a3);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_216931648(a1, &v18, (uint64_t)v4);
    sub_2169318D4((uint64_t)&v18);
  }
  else if (this == v6)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(this, a3);
    a1[1] = (uint64_t)v4 + 72;
  }
  else
  {
    sub_216931404((uint64_t)a1, (void (***)(void))this, (unint64_t)v6, (uint64_t)this + 72);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v4, (void (***)(void))a3);
  }
  return v4;
}

void sub_2169313E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void (***sub_216931404(uint64_t a1, void (***a2)(void), unint64_t a3, uint64_t a4))(void)
{
  char v6 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 8);
  uint64_t v7 = (void (***)(void))((char *)v6 + (void)a2 - a4);
  unint64_t v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v6 + (void)a2 - a4);
    unint64_t v8 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(a1 + 8);
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v8, v10);
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v10 + 72);
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v8 + 72);
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;

  return sub_2169316FC(a2, v7, (void (***)(void))v6);
}

void sub_2169314A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_2169314A8(void *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
  if (v4 == (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[3])
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*a1;
    uint64_t v5 = (void (***)(void))a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      uint64_t v11 = v4 - v6;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x1C71C71C71C71C72 * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v29 = a1[4];
      unint64_t v15 = (char *)sub_216815D10(v29, v13);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v15[72 * v14];
      uint64_t v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      uint64_t v18 = &v15[72 * v17];
      v27.i64[1] = (uint64_t)v16;
      uint64_t v28 = v18;
      uint64_t v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
      uint64_t v20 = a1[2] - (void)v19;
      if (v20)
      {
        char v21 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72 * (v20 / 72));
        uint64_t v22 = 72 * (v20 / 72);
        do
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v16, v19);
          uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72);
          uint64_t v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v19 + 72);
          v22 -= 72;
        }
        while (v22);
        unint64_t v15 = v26;
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27.i64[0];
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
        uint64_t v18 = v28;
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v19);
        char v21 = v16;
      }
      uint64_t v26 = (char *)*a1;
      *a1 = v15;
      a1[1] = v16;
      int64x2_t v27 = v23;
      uint64_t v24 = (char *)a1[3];
      a1[2] = v21;
      a1[3] = v18;
      uint64_t v28 = v24;
      sub_2169318D4((uint64_t)&v26);
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
    }
    else
    {
      int64_t v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -9 * (v8 >> 1);
      sub_21693175C(v5, (void (***)(void))v4, &v5[-9 * (v8 >> 1)]);
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v4, a2);
  a1[2] += 72;
  return result;
}

void sub_216931630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169318D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216931648(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_2169317BC((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216931850(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void (***sub_2169316FC(void (***a1)(void), void (***a2)(void), void (***a3)(void)))(void)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 9;
      a3 -= 9;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void (***sub_21693175C(void (***a1)(void), void (***a2)(void), void (***a3)(void)))(void)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=(a3, v4);
      v4 += 9;
      a3 += 9;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_2169317BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 72;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v11 + v10);
    v10 -= 72;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v12, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v10 + a3));
  }
  return a6;
}

uint64_t sub_216931850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a4 + v7), (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2169318B0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v4 + v2));
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169318D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_216931924(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *this, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a3)
{
  uint64_t v4 = this;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v11 > 0x38E38E38E38E38ELL) {
      sub_21677CB10();
    }
    unint64_t v12 = 0x8E38E38E38E38E39 * (((uint64_t)this - v10) >> 3);
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v10) >> 3);
    unint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      unint64_t v14 = 0x8E38E38E38E38E39 * (((uint64_t)v6 - *a1) >> 3) + 1;
    }
    if (v13 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v22 = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_216815D10(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v18 = v16;
    uint64_t v19 = &v16[72 * v12];
    uint64_t v20 = v19;
    char v21 = &v16[72 * v15];
    sub_216931ACC(&v18, a3);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)sub_216931648(a1, &v18, (uint64_t)v4);
    sub_2169318D4((uint64_t)&v18);
  }
  else if (this == v6)
  {
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(this, a3);
    a1[1] = (uint64_t)v4 + 72;
  }
  else
  {
    sub_216931404((uint64_t)a1, (void (***)(void))this, (unint64_t)v6, (uint64_t)this + 72);
    if (v4 <= a3) {
      a3 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)a3 + 72 * (a1[1] > (unint64_t)a3));
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v4, (void (***)(void))a3);
  }
  return v4;
}

void sub_216931AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *sub_216931ACC(void *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
  if (v4 == (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[3])
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*a1;
    uint64_t v5 = (void (***)(void))a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      uint64_t v11 = v4 - v6;
      BOOL v10 = v11 == 0;
      uint64_t v12 = 0x1C71C71C71C71C72 * (v11 >> 3);
      if (v10) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v29 = a1[4];
      unint64_t v15 = (char *)sub_216815D10(v29, v13);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v15[72 * v14];
      uint64_t v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      uint64_t v18 = &v15[72 * v17];
      v27.i64[1] = (uint64_t)v16;
      uint64_t v28 = v18;
      uint64_t v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[1];
      uint64_t v20 = a1[2] - (void)v19;
      if (v20)
      {
        char v21 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72 * (v20 / 72));
        uint64_t v22 = 72 * (v20 / 72);
        do
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v16, v19);
          uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v16 + 72);
          uint64_t v19 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v19 + 72);
          v22 -= 72;
        }
        while (v22);
        unint64_t v15 = v26;
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v27.i64[0];
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
        uint64_t v18 = v28;
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v19);
        char v21 = v16;
      }
      uint64_t v26 = (char *)*a1;
      *a1 = v15;
      a1[1] = v16;
      int64x2_t v27 = v23;
      uint64_t v24 = (char *)a1[3];
      a1[2] = v21;
      a1[3] = v18;
      uint64_t v28 = v24;
      sub_2169318D4((uint64_t)&v26);
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a1[2];
    }
    else
    {
      int64_t v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -9 * (v8 >> 1);
      sub_21693175C(v5, (void (***)(void))v4, &v5[-9 * (v8 >> 1)]);
      a1[1] += 8 * v9;
      a1[2] = v4;
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v4, a2);
  a1[2] += 72;
  return result;
}

void sub_216931C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169318D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216931C6C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C7514C0;
  v4[1] = 0;
  v4[2] = 0;
  uint64_t v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216931CC4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::~TsSpline_KeyFrames(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216931CE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216931D0C(uint64_t a1)
{
  uint64_t v1 = *(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)(a1 + 24);
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::~TsSpline_KeyFrames(v1);
    operator delete(v2);
  }
}

uint64_t sub_216931D44(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C751510)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216931D88(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_216815D10(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v10[72 * v4];
  uint64_t v16 = &v10[72 * v9];
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame(v14, a2);
  unint64_t v15 = (char *)v14 + 72;
  sub_216931EA8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_2169318D4((uint64_t)&v13);
  return v11;
}

void sub_216931E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169318D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216931EA8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2169317BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216931F20(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  sub_216931FA8(a1, a2, a3, v4);
  return a1;
}

void *sub_216931FA8(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_21677CACC(result, a4);
    return (void *)sub_216932018(v6, a2, a3);
  }
  return result;
}

void sub_216931FFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216932018(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      void *v3 = a2[4];
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

void *sub_216932070(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    BOOL v6 = (void *)a1[1];
    uint64_t v7 = &v6[2 * a2];
    uint64_t v8 = 16 * a2;
    do
    {
      sub_2168EE4C4(v6, a3);
      v6 += 2;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2169320F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216932118(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_2168EE084(v4 - 16);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_21693219C(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216781458(a1, a2);
    BOOL v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216932204(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216932220(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_216932220(a1, *(void *)a2);
    sub_216932220(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 40);
    sub_216932280(&v4);
    operator delete(a2);
  }
}

void sub_216932280(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 24;
        sub_2168EE084((uint64_t)(v4 - 16));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216932308(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v14[4] = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  void v14[3] = &v10[24 * v9];
  *(void *)uint64_t v11 = *a2;
  sub_2168EDFA8((void *)v11 + 1, a2 + 1);
  v14[2] = v11 + 24;
  sub_216932410(a1, v14);
  uint64_t v12 = a1[1];
  sub_2169324A4((uint64_t)v14);
  return v12;
}

void sub_2169323FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169324A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216932410(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    uint64_t v7 = *(void *)(v4 - 24);
    v4 -= 24;
    *(void *)(v6 - 24) = v7;
    v6 -= 24;
    uint64_t result = sub_2168EDFA8((void *)(v6 + 8), (void *)(v4 + 8));
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2169324A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_2168EE084(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfType *sub_2169324F8(atomic_ullong *a1)
{
  uint64_t result = sub_21693253C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result) {
      operator delete(result);
    }
    return (pxrInternal__aapl__pxrReserved__::TfType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TfType *sub_21693253C()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::TfType *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::TfType::TfType(v0);
  return v0;
}

void sub_21693256C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  *(void *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)this + 8);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return this;
}

{
  *(void *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)this + 8);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return this;
}

pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::TsSpline_KeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, const pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a3)
{
  *(void *)this = *(void *)a2;
  long long v5 = *(_OWORD *)((char *)a2 + 24);
  long long v6 = *(_OWORD *)((char *)a2 + 40);
  long long v7 = *(_OWORD *)((char *)a2 + 56);
  long long v8 = *(_OWORD *)((char *)a2 + 72);
  long long v9 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 88) = 0u;
  uint64_t v10 = (char *)this + 88;
  *(_OWORD *)((char *)this + 56) = v7;
  *(_OWORD *)((char *)this + 72) = v8;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 40) = v6;
  *(_OWORD *)((char *)this + 8) = v9;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (a3)
  {
    int v12 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)) ^ 1;
    if (this == a2) {
      LOBYTE(v12) = 1;
    }
    if ((v12 & 1) == 0) {
      sub_216934D20((uint64_t)v10, *((void (****)(void))a2 + 11), *((void (****)(void))a2 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3));
    }
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(this, a3);
  }
  else if (this != a2)
  {
    sub_216934D20((uint64_t)this + 112, *((void (****)(void))a2 + 14), *((void (****)(void))a2 + 15), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
    sub_216934D20((uint64_t)v10, *((void (****)(void))a2 + 11), *((void (****)(void))a2 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 3));
  }
  return this;
}

void sub_216932714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21692C928((void ***)va);
  sub_21692C928((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2)
{
  sub_216851EE4((uint64_t)&v5, "Ts", "TsSpline_KeyFrames::SetKeyFrames");
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
  {
    if ((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112) != a2) {
      sub_216934D20((uint64_t)this + 112, *(void (****)(void))a2, *((void (****)(void))a2 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
    }
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster(this);
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetNormalFromLooped(this);
  }
  else if ((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88) != a2)
  {
    sub_216934D20((uint64_t)this + 88, *(void (****)(void))a2, *((void (****)(void))a2 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  }
  while (v6--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v5);
}

void sub_216932818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::~TsSpline_KeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  uint64_t v2 = (void **)((char *)this + 112);
  sub_21692C928(&v2);
  uint64_t v2 = (void **)((char *)this + 88);
  sub_21692C928(&v2);
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 112);
  sub_21692C928(&v2);
  uint64_t v2 = (void **)((char *)this + 88);
  sub_21692C928(&v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  int Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  uint64_t v3 = 88;
  if (Looping) {
    uint64_t v3 = 112;
  }
  return (uint64_t)this + v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetNormalKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  return (uint64_t)this + 88;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)sub_216851EE4((uint64_t)&v4, "Ts", "TsSpline_KeyFrames::_UnrollMaster");
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrames(v2, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  while (v5--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v4);
}

void sub_216932978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetNormalFromLooped(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  sub_216851EE4((uint64_t)&v22, "Ts", "TsSpline_KeyFrames::_SetNormalFromLooped");
  uint64_t LoopedInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  double v3 = *LoopedInterval;
  double v4 = LoopedInterval[2];
  uint64_t MasterInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  double v6 = *MasterInterval;
  double v7 = MasterInterval[2];
  long long v8 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  long long v9 = (void (***)(void))*((void *)this + 11);
  uint64_t v10 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v3);
  sub_216934F60((uint64_t)this + 88, v9, v10);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((void *)this + 14);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v3);
  while (v11 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v12)
  {
    sub_21692F460((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v11);
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v11 + 72);
  }
  unint64_t v13 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v6);
  unint64_t v14 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v7);
  sub_216934F60((uint64_t)this + 88, v13, v14);
  unint64_t v15 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v6);
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v7);
  if ((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16 != v15)
  {
    do
    {
      sub_21692F460((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v15);
      unint64_t v15 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v15 + 72);
    }
    while (v15 != (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v16);
  }
  uint64_t v17 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v4);
  sub_216934F60((uint64_t)this + 88, v17, *((void (****)(void))this + 12));
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112), v4);
  uint64_t v19 = result;
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((void *)this + 15);
  if (v20 != result)
  {
    do
    {
      uint64_t result = sub_21692F460(v8, v19);
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v19 + 72);
    }
    while (v19 != v20);
  }
  while (v23--)
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v22);
  return result;
}

void sub_216932B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::TsKeyFrame *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SwapKeyFrames(void *a1, uint64_t *a2)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
  uint64_t v5 = *a2;
  if (result)
  {
    *a2 = a1[14];
    a1[14] = v5;
    uint64_t v6 = a2[1];
    a2[1] = a1[15];
    a1[15] = v6;
    uint64_t v7 = a2[2];
    a2[2] = a1[16];
    a1[16] = v7;
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1);
    return pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetNormalFromLooped((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1);
  }
  else
  {
    *a2 = a1[11];
    a1[11] = v5;
    uint64_t v8 = a2[1];
    a2[1] = a1[12];
    a1[12] = v8;
    uint64_t v9 = a2[2];
    a2[2] = a1[13];
    a1[13] = v9;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetKeyFrame(void *a1, uint64_t a2, uint64_t a3)
{
  sub_216851EE4((uint64_t)&v34, "Ts", "TsSpline_KeyFrames::SetKeyFrame");
  double v33 = *(double *)(a2 + 8);
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1)))
  {
    uint64_t LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
    double v7 = *(double *)LoopedInterval;
    int v8 = *(unsigned __int8 *)(LoopedInterval + 8);
    double v9 = *(double *)(LoopedInterval + 16);
    int v10 = *(unsigned __int8 *)(LoopedInterval + 24);
    uint64_t MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
    double v12 = *(double *)(MasterInterval + 16);
    if (*(double *)MasterInterval >= v33
      && (*(double *)MasterInterval == v33 ? (BOOL v13 = *(unsigned char *)(MasterInterval + 8) == 0) : (BOOL v13 = 1), v13))
    {
      int v14 = 0;
    }
    else
    {
      BOOL v16 = *(unsigned __int8 *)(MasterInterval + 24) != 0;
      if (v12 != v33) {
        BOOL v16 = 0;
      }
      int v14 = v12 > v33 || v16;
    }
    if (v7 < v33 || (v7 == v33 ? (BOOL v17 = v8 == 0) : (BOOL v17 = 1), !v17))
    {
      if (v9 <= v33)
      {
        if (v9 != v33) {
          goto LABEL_27;
        }
        BOOL v18 = v10 != 0;
      }
      else
      {
        BOOL v18 = 1;
      }
      if (((!v18 | v14) & 1) == 0) {
        goto LABEL_42;
      }
    }
LABEL_27:
    uint64_t v19 = sub_21692F35C((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), &v33);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v19, (void (***)(void))a2);
    uint64_t v20 = sub_21692F35C((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), &v33);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v20, (void (***)(void))a2);
    sub_2167B31F4(__p, 1uLL, &v33);
    if (v14)
    {
      uint64_t v23 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), v33);
      if (a1[15] == v23 || *(double *)(v23 + 8) != v33)
      {
LABEL_35:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      int64x2_t v27 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v23 + 72);
      *(void *)&long long i = v23;
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrameRange(v23, a1 + 14, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)&i, &v27, (pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1), (uint64_t)__p);
    }
    if (a3)
    {
      for (long long i = *(_OWORD *)__p; (void)i != *((void *)&i + 1); sub_21693353C(&i))
      {
        uint64_t v24 = (double *)sub_2169334BC((uint64_t *)&i, v21, v22);
        pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, *v24, (uint64_t)&v27);
        sub_2168A5CD4(a3, (uint64_t)&v27);
      }
    }
    goto LABEL_35;
  }
  if (a3)
  {
    double v15 = *(double *)(a3 + 16);
    if (*(double *)a3 <= v15 && (*(double *)a3 != v15 || *(unsigned char *)(a3 + 8) && *(unsigned char *)(a3 + 24)))
    {
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindSetKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2, (uint64_t)&v27);
      sub_2168A5CD4(a3, (uint64_t)&v27);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindSetKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)a2, (uint64_t)&v27);
      *(void *)a3 = v27;
      *(unsigned char *)(a3 + 8) = v28;
      *(void *)(a3 + 16) = v29;
      *(unsigned char *)(a3 + 24) = v30;
    }
  }
  double v25 = sub_21692F35C((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), &v33);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v25, (void (***)(void))a2);
LABEL_42:
  while (v35--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v34);
}

void sub_216932EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_21684E6B8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrameRange(int a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::TsKeyFrame **a3, const pxrInternal__aapl__pxrReserved__::TsKeyFrame **a4, pxrInternal__aapl__pxrReserved__::TsLoopParams *this, uint64_t a6)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval(this);
  double v11 = *(double *)LoopedInterval;
  int v12 = *(unsigned __int8 *)(LoopedInterval + 8);
  double v13 = *(double *)(LoopedInterval + 16);
  int v14 = *(unsigned __int8 *)(LoopedInterval + 24);
  uint64_t MasterInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(this);
  double v16 = *MasterInterval;
  double v17 = MasterInterval[2];
  char v47 = 0;
  double v48 = 0;
  uint64_t v49 = 0;
  double v44 = a2;
  sub_216931094(&v47, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  double v18 = v16 - v11;
  double v19 = fmax(v17 - v16, 0.0);
  signed int v20 = vcvtpd_s64_f64((v13 - v17) / v19);
  signed int v21 = -vcvtpd_s64_f64(v18 / v19);
  if (v21 <= v20)
  {
    do
    {
      if (v21)
      {
        double ValueOffset = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset(this);
        uint64_t v23 = *a3;
        if (*a4 != *a3)
        {
          double v24 = v19 * (double)v21;
          double v25 = ValueOffset * (double)v21;
          do
          {
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54, v23);
            double v26 = v24 + v55;
            BOOL v27 = v11 != v24 + v55;
            if (!v12) {
              BOOL v27 = 1;
            }
            double v46 = v24 + v55;
            if (v11 < v26 || !v27)
            {
              BOOL v28 = v13 == v26;
              if (!v14) {
                BOOL v28 = 0;
              }
              if (v13 > v26 || v28)
              {
                double v55 = v24 + v55;
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v53, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54);
                if (sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)v53))
                {
                  double v29 = v25 + *(double *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
                  v52[1] = &unk_26C750B03;
                  *(double *)BOOL v52 = v29;
                  pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue((uint64_t)&v54, v52);
                  sub_2168EE084((uint64_t)v52);
                  if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54))
                  {
                    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v50, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54);
                    double v30 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v50);
                    *(void *)&v51[1] = &unk_26C750B03;
                    v51[0] = v25 + v30;
                    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftValue((uint64_t)&v54, v51);
                    sub_2168EE084((uint64_t)v51);
                    sub_2168EE084((uint64_t)v50);
                  }
                }
                uint64_t v31 = sub_21692F35C((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)&v47, &v46);
                pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator=((void (***)(void))v31, (void (***)(void))&v54);
                if (a6)
                {
                  double v33 = *(double **)(a6 + 8);
                  unint64_t v32 = *(void *)(a6 + 16);
                  if ((unint64_t)v33 >= v32)
                  {
                    int v35 = *(double **)a6;
                    uint64_t v36 = ((uint64_t)v33 - *(void *)a6) >> 3;
                    unint64_t v37 = v36 + 1;
                    if ((unint64_t)(v36 + 1) >> 61) {
                      sub_21677CB10();
                    }
                    uint64_t v38 = v32 - (void)v35;
                    if (v38 >> 2 > v37) {
                      unint64_t v37 = v38 >> 2;
                    }
                    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v39 = v37;
                    }
                    if (v39)
                    {
                      char v40 = (char *)sub_21677CB28(a6 + 16, v39);
                      int v35 = *(double **)a6;
                      double v33 = *(double **)(a6 + 8);
                    }
                    else
                    {
                      char v40 = 0;
                    }
                    int v41 = (double *)&v40[8 * v36];
                    *int v41 = v46;
                    uint64_t v34 = v41 + 1;
                    while (v33 != v35)
                    {
                      uint64_t v42 = *((void *)v33-- - 1);
                      *((void *)v41-- - 1) = v42;
                    }
                    *(void *)a6 = v41;
                    *(void *)(a6 + 8) = v34;
                    *(void *)(a6 + 16) = &v40[8 * v39];
                    if (v35) {
                      operator delete(v35);
                    }
                  }
                  else
                  {
                    double *v33 = v46;
                    uint64_t v34 = v33 + 1;
                  }
                  *(void *)(a6 + 8) = v34;
                }
                sub_2168EE084((uint64_t)v53);
              }
            }
            pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v54);
            uint64_t v23 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v23 + 72);
          }
          while (v23 != *a4);
        }
      }
    }
    while (v21++ != v20);
  }
  if (&v47 != (void (****)(void))v44) {
    sub_216934D20((uint64_t)v44, v47, v48, 0x8E38E38E38E38E39 * (v48 - v47));
  }
  unint64_t v54 = (void **)&v47;
  sub_21692C928(&v54);
}

void sub_2169332C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a13;
  sub_21692C928(&a24);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0xFFF0000000000000;
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0x7FF0000000000000;
  *(unsigned char *)(a3 + 24) = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  int v8 = (char *)this + 112;
  double v9 = (char *)this + 88;
  uint64_t v10 = 88;
  if (result)
  {
    uint64_t v10 = 112;
    double v11 = (char *)this + 112;
  }
  else
  {
    double v11 = (char *)this + 88;
  }
  if (*(void *)((char *)this + v10) != *((void *)v11 + 1))
  {
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6)) {
      int v12 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
    }
    else {
      int v12 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
    }
    pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v12, a2);
    pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6)) {
      double v13 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
    }
    else {
      double v13 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
    }
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v13, a2);
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6)) {
      double v15 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
    }
    else {
      double v15 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
    }
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(v15, a2);
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6)) {
      double v17 = v8;
    }
    else {
      double v17 = v9;
    }
    if (*v17 != v14)
    {
      double v18 = *(double *)(v14 - 64);
      BOOL v19 = fabs(v18) != INFINITY;
      if (v18 != a2) {
        BOOL v19 = 0;
      }
      *(double *)a3 = v18;
      *(unsigned char *)(a3 + 8) = v19;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    if (result) {
      signed int v20 = v8;
    }
    else {
      signed int v20 = v9;
    }
    if (*((void *)v20 + 1) != v16)
    {
      double v21 = *(double *)(v16 + 8);
      BOOL v22 = fabs(v21) != INFINITY;
      if (v21 != a2) {
        BOOL v22 = 0;
      }
      *(double *)(a3 + 16) = v21;
      *(unsigned char *)(a3 + 24) = v22;
    }
  }
  return result;
}

uint64_t sub_2169334BC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<double>>::operator*() [T = std::vector<do"
            "uble>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216933534()
{
}

void *sub_21693353C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<double>>::operator++() [T ="
            " std::vector<double>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

double *pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindSetKeyFrameChangedInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this@<X0>, const pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  char v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  int Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  if (Looping) {
    uint64_t v8 = 112;
  }
  else {
    uint64_t v8 = 88;
  }
  if (Looping) {
    double v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 112);
  }
  else {
    double v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 88);
  }
  double v10 = *((double *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v61);
  v64.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
  int IsKeyFrameRedundant = pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant((pxrInternal__aapl__pxrReserved__ *)v9, a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v61, &v64, v11);
  sub_2168EE084((uint64_t)&v64);
  if (IsKeyFrameRedundant)
  {
    uint64_t result = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, v10);
    if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)result || result[1] != v10) {
      goto LABEL_54;
    }
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, v10);
    double v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v14;
    if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v14 || *(double *)(v14 + 8) != v10) {
      double v15 = v9[1];
    }
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v61);
    v64.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    int v17 = pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant((pxrInternal__aapl__pxrReserved__ *)v9, v15, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v61, &v64, v16);
    uint64_t result = (double *)sub_2168EE084((uint64_t)&v64);
    if (v17) {
      goto LABEL_54;
    }
  }
  uint64_t result = (double *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval(this, v10, (uint64_t)&v61);
  double v18 = *(double **)((char *)this + v8);
  if (v18 != (double *)v9[1])
  {
    double v19 = *(double *)&v61;
    if (*(double *)&v61 == -INFINITY)
    {
      int v20 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
      uint64_t v21 = 88;
      if (v20)
      {
        uint64_t v21 = 112;
        BOOL v22 = (char *)this + 112;
      }
      else
      {
        BOOL v22 = (char *)this + 88;
      }
      EffectiveExtrapolationuint64_t Type = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v18, (unsigned int *)this, *((void *)v22 + 1) - *(void *)((char *)this + v21) == 72, 0);
      int v24 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
      uint64_t v25 = 88;
      if (v24)
      {
        uint64_t v25 = 112;
        double v26 = (char *)this + 112;
      }
      else
      {
        double v26 = (char *)this + 88;
      }
      if (EffectiveExtrapolationType != pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a2, (unsigned int *)this, *((void *)v26 + 1) - *(void *)((char *)this + v25) == 72, 0))goto LABEL_28; {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v64, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v18);
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v63, a2);
      int v28 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v27);
      sub_2168EE084((uint64_t)&v63);
      sub_2168EE084((uint64_t)&v64);
      if (!v28
        || EffectiveExtrapolationType
        && (v18[1] != v10
         || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v64, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v18), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope((uint64_t *)&v63, a2), int v30 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v29), sub_2168EE084((uint64_t)&v63), sub_2168EE084((uint64_t)&v64), !v30)))
      {
LABEL_28:
        double v19 = -INFINITY;
        goto LABEL_36;
      }
      *(double *)&long long v61 = v10;
      BYTE8(v61) = 0;
    }
    else
    {
      uint64_t v31 = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, *(double *)&v61);
      unint64_t v32 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v31;
      if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v31
        || v31[1] != v19
        || pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v31))
      {
LABEL_36:
        uint64_t v35 = v62;
        if (*(double *)&v62 == INFINITY)
        {
          uint64_t v36 = v9[1];
          int v37 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
          uint64_t v38 = 88;
          if (v37)
          {
            uint64_t v38 = 112;
            unint64_t v39 = (char *)this + 112;
          }
          else
          {
            unint64_t v39 = (char *)this + 88;
          }
          int v40 = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType((const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)((char *)v36 - 72), (unsigned int *)this, *((void *)v39 + 1) - *(void *)((char *)this + v38) == 72, 1);
          int v41 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
          uint64_t v42 = 88;
          if (v41)
          {
            uint64_t v42 = 112;
            uint64_t v43 = (char *)this + 112;
          }
          else
          {
            uint64_t v43 = (char *)this + 88;
          }
          if (v40 != pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a2, (unsigned int *)this, *((void *)v43 + 1) - *(void *)((char *)this + v42) == 72, 1))goto LABEL_49; {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v64, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)((char *)v36 - 72));
          }
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v63, a2);
          int v45 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v44);
          sub_2168EE084((uint64_t)&v63);
          sub_2168EE084((uint64_t)&v64);
          if (!v45) {
            goto LABEL_49;
          }
          if (!v40
            || *((double *)v36 - 8) == v10
            && (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v64, (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)((char *)v36 - 72)), pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope((uint64_t *)&v63, a2), char v47 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v46), sub_2168EE084((uint64_t)&v63), sub_2168EE084((uint64_t)&v64), (v47 & 1) != 0))
          {
            *(double *)&long long v62 = v10;
            BYTE8(v62) = 0;
            uint64_t v35 = *(void *)&v10;
          }
          else
          {
LABEL_49:
            uint64_t v35 = 0x7FF0000000000000;
          }
        }
        uint64_t result = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v9, v10);
        double v48 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)result;
        if (v9[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)result || result[1] != v10) {
          goto LABEL_52;
        }
        KeyFrameRange = (double *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(this, v10);
        BOOL v52 = v51;
        if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)v48, (double *)a2, 0)|| KeyFrameRange[1] != v10&& (!pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)KeyFrameRange)|| pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)KeyFrameRange, v48, v53)&& pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat((pxrInternal__aapl__pxrReserved__ *)KeyFrameRange, a2, v54)))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v64, v48);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v63, a2);
          char v56 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v55) ^ 1;
          if (fabs(v10) == INFINITY) {
            char v56 = 0;
          }
          *(double *)&long long v61 = v10;
          BYTE8(v61) = v56;
          sub_2168EE084((uint64_t)&v63);
          sub_2168EE084((uint64_t)&v64);
          double v19 = v10;
        }
        uint64_t result = (double *)pxrInternal__aapl__pxrReserved__::TsKeyFrame::IsEquivalentAtSide((double *)v48, (double *)a2, 1);
        if (result
          || v9[1] != v52
          && (uint64_t result = (double *)pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(v48, v52, v57), result)
          && (uint64_t result = (double *)pxrInternal__aapl__pxrReserved__::Ts_IsSegmentFlat(a2, v52, v60), result))
        {
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v64, v48);
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v63, a2);
          char v59 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v58) ^ 1;
          if (fabs(v10) == INFINITY) {
            char v59 = 0;
          }
          *(double *)&long long v62 = v10;
          BYTE8(v62) = v59;
          sub_2168EE084((uint64_t)&v63);
          uint64_t result = (double *)sub_2168EE084((uint64_t)&v64);
        }
        else
        {
LABEL_52:
          double v10 = *(double *)&v35;
        }
        if (v19 <= v10 && (v19 != v10 || BYTE8(v61) && BYTE8(v62))) {
          goto LABEL_58;
        }
LABEL_54:
        *(void *)a3 = 0;
        *(unsigned char *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        *(unsigned char *)(a3 + 24) = 0;
        return result;
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v64, v32);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v63, a2);
      int v34 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v64, &v63, v33) ^ 1;
      if (fabs(v10) == INFINITY) {
        LOBYTE(v34) = 0;
      }
      *(double *)&long long v61 = v10;
      BYTE8(v61) = v34;
      sub_2168EE084((uint64_t)&v63);
      sub_2168EE084((uint64_t)&v64);
    }
    double v19 = v10;
    goto LABEL_36;
  }
LABEL_58:
  long long v49 = v62;
  *(_OWORD *)a3 = v61;
  *(_OWORD *)(a3 + 16) = v49;
  return result;
}

void sub_216933C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(void *a1, uint64_t a2, double a3)
{
  double v35 = a3;
  sub_216851EE4((uint64_t)&v33, "Ts", "TsSpline_KeyFrames::RemoveKeyFrame");
  if (a2)
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1)))
  {
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), v35);
    if (a1[12] == v15 || *(double *)(v15 + 8) != v35)
    {
      int v28 = "ts/spline_KeyFrames.cpp";
      double v29 = "RemoveKeyFrame";
      uint64_t v30 = 268;
      uint64_t v31 = "void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(TsTime, GfInterval *)";
      char v32 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe does not exist; not removing");
      goto LABEL_52;
    }
    if (a2)
    {
      pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, v35, (uint64_t)&v28);
      sub_2168A5CD4(a2, (uint64_t)&v28);
    }
    goto LABEL_51;
  }
  uint64_t LoopedInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
  double v6 = *(double *)LoopedInterval;
  int v7 = *(unsigned __int8 *)(LoopedInterval + 8);
  double v8 = *(double *)(LoopedInterval + 16);
  int v9 = *(unsigned __int8 *)(LoopedInterval + 24);
  uint64_t MasterInterval = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 1));
  double v11 = *(double *)MasterInterval;
  double v12 = *(double *)(MasterInterval + 16);
  if (*(double *)MasterInterval >= v35 && (v11 == v35 ? (BOOL v13 = *(unsigned char *)(MasterInterval + 8) == 0) : (BOOL v13 = 1), v13))
  {
    int v14 = 0;
  }
  else
  {
    BOOL v16 = *(unsigned __int8 *)(MasterInterval + 24) != 0;
    if (v12 != v35) {
      BOOL v16 = 0;
    }
    int v14 = v12 > v35 || v16;
  }
  if (v6 < v35 || v6 == v35 && v7)
  {
    char v17 = v14;
    if (v8 > v35) {
      goto LABEL_27;
    }
    if (v8 == v35)
    {
      if (v9) {
        char v17 = v14;
      }
      else {
        char v17 = 1;
      }
LABEL_27:
      if ((v17 & 1) == 0) {
        goto LABEL_52;
      }
    }
  }
  uint64_t v18 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), v35);
  if (a1[15] == v18 || *(double *)(v18 + 8) != v35)
  {
    int v28 = "ts/spline_KeyFrames.cpp";
    double v29 = "RemoveKeyFrame";
    uint64_t v30 = 218;
    uint64_t v31 = "void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::RemoveKeyFrame(TsTime, GfInterval *)";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe does not exist; not removing");
    goto LABEL_52;
  }
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, v35, (uint64_t)&v28);
    sub_2168A5CD4(a2, (uint64_t)&v28);
  }
  sub_2169344AC((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), &v35);
  if (v14)
  {
    double v19 = fmax(v12 - v11, 0.0);
    signed int v20 = vcvtpd_s64_f64((v8 - v12) / v19);
    signed int v21 = -vcvtpd_s64_f64((v11 - v6) / v19);
    if (v21 <= v20)
    {
      int v22 = v20 + 1;
      do
      {
        if (v21)
        {
          double v23 = v19 * (double)v21 + v35;
          BOOL v24 = v6 != v23;
          if (!v7) {
            BOOL v24 = 1;
          }
          double v27 = v19 * (double)v21 + v35;
          if (v6 < v23 || !v24)
          {
            BOOL v25 = v8 == v23;
            if (!v9) {
              BOOL v25 = 0;
            }
            if (v8 > v23 || v25)
            {
              if (a2)
              {
                pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)a1, v23, (uint64_t)&v28);
                sub_2168A5CD4(a2, (uint64_t)&v28);
              }
              sub_2169344AC((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 14), &v27);
            }
          }
        }
        ++v21;
      }
      while (v22 != v21);
    }
  }
LABEL_51:
  sub_2169344AC((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)(a1 + 11), &v35);
LABEL_52:
  while (v34--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v33);
}

void sub_216934004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_FindRemoveKeyFrameChangedInterval@<X0>(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  double v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8))) {
    int v7 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 112);
  }
  else {
    int v7 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 88);
  }
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v7, a2);
  if (v7[1] == (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v8
    || (int v9 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v8, *(double *)(v8 + 8) != a2))
  {
    int v9 = v7[1];
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  if (result) {
    double v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 112);
  }
  else {
    double v11 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrameMap **)((char *)this + 88);
  }
  if (v11[1] == v9) {
    goto LABEL_15;
  }
  double v12 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6)
      ? (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112)
      : (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)&v46);
  v49.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
  int IsKeyFrameRedundant = pxrInternal__aapl__pxrReserved__::Ts_IsKeyFrameRedundant(v12, v9, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v46, &v49, v13);
  uint64_t result = sub_2168EE084((uint64_t)&v49);
  if (IsKeyFrameRedundant) {
    goto LABEL_15;
  }
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetTimeInterval(this, a2, (uint64_t)&v46);
  KeyFrameRange = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(this, a2);
  char v17 = v16;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  uint64_t v18 = 88;
  if (result)
  {
    uint64_t v18 = 112;
    double v19 = (char *)this + 112;
  }
  else
  {
    double v19 = (char *)this + 88;
  }
  if (*((void *)v19 + 1) - *(void *)((char *)this + v18) == 72)
  {
    *(void *)a3 = 0xFFF0000000000000;
    *(unsigned char *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0x7FF0000000000000;
    goto LABEL_16;
  }
  double v20 = *(double *)&v46;
  BOOL v21 = *(double *)&v46 == -INFINITY;
  int Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  uint64_t v23 = 88;
  if (Looping)
  {
    uint64_t v23 = 112;
    BOOL v24 = (char *)this + 112;
  }
  else
  {
    BOOL v24 = (char *)this + 88;
  }
  if (v21)
  {
    EffectiveExtrapolationuint64_t Type = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v17, (unsigned int *)this, *((void *)v24 + 1) - *(void *)((char *)this + v23) == 72, 0);
    int v26 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    uint64_t v27 = 88;
    if (v26)
    {
      uint64_t v27 = 112;
      int v28 = (char *)this + 112;
    }
    else
    {
      int v28 = (char *)this + 88;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v9, (unsigned int *)this, *((void *)v28 + 1) - *(void *)((char *)this + v27) == 72, 0);
    if (EffectiveExtrapolationType | result
      || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v49, v17),
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue((uint64_t *)&v48, v9),
          v30 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v49, &v48, v29), sub_2168EE084((uint64_t)&v48), uint64_t result = sub_2168EE084((uint64_t)&v49), (v30 & 1) == 0))
    {
      double v20 = -INFINITY;
      goto LABEL_43;
    }
    BOOL v31 = 0;
    goto LABEL_42;
  }
  uint64_t v32 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound((pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *)v24, v20);
  uint64_t v33 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v32;
  if (*((void *)v24 + 1) == v32 || *(double *)(v32 + 8) != v20) {
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)*((void *)v24 + 1);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  if (result) {
    int v34 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)((char *)this + 112);
  }
  else {
    int v34 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame **)((char *)this + 88);
  }
  if (v34[1] != v33)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v33);
    if (!result)
    {
      BOOL v31 = fabs(a2) != INFINITY;
LABEL_42:
      *(double *)&long long v46 = a2;
      BYTE8(v46) = v31;
      double v20 = a2;
    }
  }
LABEL_43:
  double v35 = *(double *)&v47;
  if (*(double *)&v47 == INFINITY)
  {
    int v36 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    uint64_t v37 = 88;
    if (v36)
    {
      uint64_t v37 = 112;
      uint64_t v38 = (char *)this + 112;
    }
    else
    {
      uint64_t v38 = (char *)this + 88;
    }
    int v39 = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(KeyFrameRange, (unsigned int *)this, *((void *)v38 + 1) - *(void *)((char *)this + v37) == 72, 1);
    int v40 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
    uint64_t v41 = 88;
    if (v40)
    {
      uint64_t v41 = 112;
      uint64_t v42 = (char *)this + 112;
    }
    else
    {
      uint64_t v42 = (char *)this + 88;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(v9, (unsigned int *)this, *((void *)v42 + 1) - *(void *)((char *)this + v41) == 72, 1);
    if (v39 | result
      || (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v49, KeyFrameRange),
          pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue((uint64_t *)&v48, v9),
          v44 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v49, &v48, v43), sub_2168EE084((uint64_t)&v48), uint64_t result = sub_2168EE084((uint64_t)&v49), !v44))
    {
      double v35 = INFINITY;
    }
    else
    {
      *(double *)&long long v47 = a2;
      BYTE8(v47) = 0;
      double v35 = a2;
    }
  }
  if (v20 > v35 || v20 == v35 && (!BYTE8(v46) || !BYTE8(v47)))
  {
LABEL_15:
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
LABEL_16:
    *(unsigned char *)(a3 + 24) = 0;
    return result;
  }
  long long v45 = v47;
  *(_OWORD *)a3 = v46;
  *(_OWORD *)(a3 + 16) = v45;
  return result;
}

void sub_216934474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2169344AC(pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a1, double *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a1, *a2);
  if (*((void *)a1 + 1) != v4 && *(double *)(v4 + 8) == *a2)
  {
    sub_216934F0C((uint64_t)a1, (void (***)(void))v4);
  }
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::Clear(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  sub_216851EE4((uint64_t)&v7, "Ts", "TsSpline_KeyFrames::Clear");
  long long v2 = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 88) = 0u;
  long long v9 = v2;
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  uint64_t v10 = v3;
  double v11 = (void **)&v9;
  sub_21692C928(&v11);
  long long v4 = *((_OWORD *)this + 7);
  *((_OWORD *)this + 7) = 0u;
  long long v9 = v4;
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  uint64_t v10 = v5;
  double v11 = (void **)&v9;
  sub_21692C928(&v11);
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_LoopParamsChanged(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, char a2, char a3, int a4)
{
  if (((a2 & 1) != 0 || (a3 & 1) != 0 || a4)
    && pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetLoopedFromNormal(this);
  }
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetLoopedFromNormal(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  sub_216851EE4((uint64_t)&v3, "Ts", "TsSpline_KeyFrames::_SetLoopedFromNormal");
  sub_216934D20((uint64_t)this + 112, *((void (****)(void))this + 11), *((void (****)(void))this + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 3));
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollMaster(this);
  while (v4--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v3);
}

void sub_2169346B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  double v6 = (pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 8);
  uint64_t result = sub_216934FD0((double *)(a1 + 8), (double *)(a2 + 8));
  if (result)
  {
    unsigned int v7 = sub_216934774((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
    int v8 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6) ^ 1;
    uint64_t result = v8 & v7;
    if ((v8 & 1) == 0)
    {
      if (v7)
      {
        return sub_216934774((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
      }
    }
  }
  return result;
}

uint64_t sub_216934774(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TsKeyFrame::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 72;
    v4 += 72;
  }
  while (v2 != v3);
  return result;
}

double pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::BakeSplineLoops(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)pxrInternal__aapl__pxrReserved__::TsLoopParams::SetLooping((unsigned char *)this + 8, 0);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrames(v3, (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88), v2);
  pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((uint64_t)v5);
  *((unsigned char *)this + 8) = v5[0];
  *((void *)this + 2) = v6;
  *((unsigned char *)this + 24) = v7;
  *((void *)this + 4) = v8;
  *((unsigned char *)this + 40) = v9;
  *((void *)this + 6) = v10;
  *((unsigned char *)this + 56) = v11;
  *((void *)this + 8) = v12;
  *((unsigned char *)this + 72) = v13;
  double result = v14;
  *((double *)this + 10) = v14;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrames(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, pxrInternal__aapl__pxrReserved__::TsKeyFrameMap *a2, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a3)
{
  uint64_t LoopedInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLoopedInterval(a3);
  double v6 = *LoopedInterval;
  double v7 = LoopedInterval[2];
  uint64_t MasterInterval = (double *)pxrInternal__aapl__pxrReserved__::TsLoopParams::GetMasterInterval(a3);
  double v9 = *MasterInterval;
  double v10 = MasterInterval[2];
  char v11 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v6);
  uint64_t v12 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v9);
  sub_216934F60((uint64_t)a2, v11, v12);
  char v13 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v10);
  double v14 = (void (***)(void))pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v7);
  sub_216934F60((uint64_t)a2, v13, v14);
  BOOL v16 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v9);
  uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(a2, v10);
  pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_UnrollKeyFrameRange((int)v15, (uint64_t *)a2, &v16, &v15, a3, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFramesMutable(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  int Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  uint64_t v3 = 88;
  if (Looping) {
    uint64_t v3 = 112;
  }
  return (uint64_t)this + v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, double a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  uint64_t v5 = (char *)this + 112;
  double v6 = (char *)this + 88;
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8))) {
    double v7 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
  }
  else {
    double v7 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  }
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(v7, a2);
  int Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v4);
  uint64_t v10 = 88;
  if (Looping) {
    uint64_t v10 = 112;
  }
  if (*(void *)((char *)this + v10) == v8) {
    return v8;
  }
  uint64_t v11 = v8 - 72;
  if (*(double *)(v8 - 64) == a2)
  {
    if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v4)) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v6;
    }
    if (v11 != *v12) {
      return v8 - 144;
    }
  }
  return v11;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetKeyFrameRange(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, double a2, double a3)
{
  double v6 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8);
  double v7 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8))) {
    double v9 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 112);
  }
  else {
    double v9 = (pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 88);
  }
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::lower_bound(v9, a2);
  int Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6);
  uint64_t v12 = 88;
  if (Looping) {
    uint64_t v12 = 112;
  }
  if (*(void *)((char *)this + v12) == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = -1;
  }
  uint64_t v14 = v10 + 72 * v13;
  if (pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(v6)) {
    uint64_t v15 = v7;
  }
  else {
    uint64_t v15 = v8;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrameMap::upper_bound(v15, a3);
  return v14;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_GetEffectiveExtrapolationType(unsigned int *a1, pxrInternal__aapl__pxrReserved__::TsKeyFrame *a2, int *a3)
{
  int Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsLoopParams *)(a1 + 2));
  double v7 = a1 + 28;
  uint64_t v8 = 22;
  if (Looping) {
    uint64_t v8 = 28;
  }
  else {
    double v7 = a1 + 22;
  }
  BOOL v9 = *((void *)v7 + 1) - *(void *)&a1[v8] == 72;
  int v10 = *a3;

  return pxrInternal__aapl__pxrReserved__::Ts_GetEffectiveExtrapolationType(a2, a1, v9, v10);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::GetLoopParams(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this)
{
  return (uint64_t)this + 8;
}

void pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetLoopParams(pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *this, const pxrInternal__aapl__pxrReserved__::TsLoopParams *a2)
{
  sub_216851EE4((uint64_t)&v11, "Ts", "TsSpline_KeyFrames::SetLoopParams");
  char Looping = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping(a2);
  char v5 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  double ValueOffset = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset(a2);
  double v7 = pxrInternal__aapl__pxrReserved__::TsLoopParams::GetValueOffset((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8));
  BOOL v8 = sub_216934FD0((double *)a2, (double *)this + 1);
  char v9 = Looping ^ v5;
  *((unsigned char *)this + 8) = *(unsigned char *)a2;
  *((void *)this + 2) = *((void *)a2 + 1);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 16);
  *((void *)this + 4) = *((void *)a2 + 3);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 32);
  *((void *)this + 6) = *((void *)a2 + 5);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 48);
  *((void *)this + 8) = *((void *)a2 + 7);
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 64);
  *((void *)this + 10) = *((void *)a2 + 9);
  if (ValueOffset != v7) {
    char v9 = 1;
  }
  if (((v9 & 1) != 0 || !v8)
    && pxrInternal__aapl__pxrReserved__::TsLoopParams::GetLooping((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames *)((char *)this + 8)))
  {
    pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::_SetLoopedFromNormal(this);
  }
  while (v12--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
}

void sub_216934CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames::SetExtrapolation(void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

void sub_216934D20(uint64_t a1, void (***a2)(void), void (***a3)(void), unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void (****)(void))a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_216934EAC((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216873544((void *)a1, v11);
    uint64_t v12 = sub_21693111C(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_21693175C(a2, v13, v9);
    uint64_t v12 = sub_21693111C(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_21693175C(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v16 - 72));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216934E9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216934EA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216934EAC(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v3 - 72));
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216934F0C(uint64_t a1, void (***a2)(void))
{
  sub_21693175C(a2 + 9, *(void (****)(void))(a1 + 8), a2);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 != v3)
  {
    do
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v5 - 72));
    while (v5 != v4);
  }
  *(void *)(a1 + 8) = v4;
}

void (***sub_216934F60(uint64_t a1, void (***a2)(void), void (***a3)(void)))(void)
{
  if (a2 != a3)
  {
    sub_21693175C(a3, *(void (****)(void))(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(v7 - 72));
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

BOOL sub_216934FD0(double *a1, double *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
      && a1[1] == a2[1]
      && *((unsigned __int8 *)a1 + 16) == *((unsigned __int8 *)a2 + 16)
      && a1[3] == a2[3]
      && *((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32)
      && a1[5] == a2[5]
      && *((unsigned __int8 *)a1 + 48) == *((unsigned __int8 *)a2 + 48)
      && a1[7] == a2[7]
      && *((unsigned __int8 *)a1 + 64) == *((unsigned __int8 *)a2 + 64)
      && a1[9] == a2[9];
}

void pxrInternal__aapl__pxrReserved__::TsTest_Evaluator::Sample(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

pxrInternal__aapl__pxrReserved__::TsTest_SplineData *pxrInternal__aapl__pxrReserved__::TsTest_Evaluator::BakeInnerLoops@<X0>(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2, a1);
}

void sub_216935090()
{
  sub_216779094(v3, "TsTest_Museum::TwoKnotBezier");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751560, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_Museum::TwoKnotLinear");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751560, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_Museum::SimpleInnerLoop");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751560, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_Museum::Recurve");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751560, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_Museum::Crossover");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751560, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216935244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsTest_Museum::GetData(int a1@<W0>, pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X8>)
{
  v44[10] = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      uint64_t v35 = 0x3FF0000000000000;
      int v36 = 2;
      unint64_t v37 = 0x3FF0000000000000;
      unint64_t v38 = 0x3FF0000000000000;
      uint64_t v39 = 0x3FE0000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      uint64_t v30 = 0x4014000000000000;
      int v31 = 2;
      uint64_t v32 = 0x4000000000000000;
      v33.i64[0] = 0;
      *(void *)&long long v34 = 0x3FE0000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      sub_2169359B8((uint64_t)&v25, v40, 2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v25);
      goto LABEL_9;
    case 1:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      uint64_t v35 = 0x3FF0000000000000;
      int v36 = 1;
      unint64_t v37 = 0x3FF0000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      uint64_t v30 = 0x4014000000000000;
      int v31 = 1;
      uint64_t v32 = 0x4000000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      sub_2169359B8((uint64_t)&v25, v40, 2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v25);
LABEL_9:
      uint64_t v8 = v26;
      char v9 = &v25;
      goto LABEL_12;
    case 2:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      uint64_t v35 = 0x405C000000000000;
      int v36 = 2;
      unint64_t v37 = 0x402199999999999ALL;
      unint64_t v38 = 0x402E000000000000;
      uint64_t v39 = 0x3FECCCCCCCCCCCCDLL;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      uint64_t v30 = 0x4061200000000000;
      int v31 = 2;
      uint64_t v32 = 0;
      int64x2_t v33 = vdupq_n_s64(0xC015333333333333);
      long long v34 = xmmword_217458500;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      uint64_t v25 = 0x4062200000000000;
      LODWORD(v26) = 2;
      uint64_t v27 = 0x4021000000000000;
      __asm { FMOV            V0.2D, #12.5 }
      int64x2_t v28 = _Q0;
      long long v29 = xmmword_217458510;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      uint64_t v20 = 0x4063600000000000;
      int v21 = 2;
      uint64_t v22 = 0x4034333333333333;
      int64x2_t v23 = vdupq_n_s64(0xC02F666666666666);
      long long v24 = xmmword_217458520;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v15);
      uint64_t v15 = 0x4066A00000000000;
      LODWORD(v16) = 2;
      uint64_t v17 = 0x404319999999999ALL;
      unint64_t v18 = 0xC022000000000000;
      uint64_t v19 = 0x4000000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::InnerLoopParams((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *)&v11);
      char v11 = 1;
      long long v12 = xmmword_217458530;
      long long v13 = xmmword_217458540;
      uint64_t v14 = 0x4034333333333333;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v42, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v43, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v44, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v15);
      sub_2169359B8((uint64_t)v10, v40, 5);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, v10);
      sub_2167FB780((uint64_t)v10, v10[1]);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetInnerLoopParams((__n128 *)a2, (__n128 *)&v11);
      return;
    case 3:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      uint64_t v35 = 0x4062200000000000;
      int v36 = 2;
      unint64_t v37 = 0xC016666666666666;
      unint64_t v38 = 0xBFF4CCCCCCCCCCCDLL;
      uint64_t v39 = 0x400E666666666666;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      uint64_t v30 = 0x4063800000000000;
      int v31 = 2;
      uint64_t v32 = 0;
      int64x2_t v33 = vdupq_n_s64(0xBFF4CCCCCCCCCCCDLL);
      long long v34 = xmmword_2174584D0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      uint64_t v25 = 0x4064E00000000000;
      LODWORD(v26) = 2;
      uint64_t v27 = 0x403CCCCCCCCCCCCDLL;
      int64x2_t v28 = vdupq_n_s64(0x3FD999999999999AuLL);
      long long v29 = xmmword_2174584F0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      uint64_t v20 = 0x4067200000000000;
      int v21 = 2;
      uint64_t v22 = 0;
      v23.i64[0] = 0x400CCCCCCCCCCCCDLL;
      *((void *)&v24 + 1) = 0x4014000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v42, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v43, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      sub_2169359B8((uint64_t)&v15, v40, 4);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v15);
      goto LABEL_11;
    case 4:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      uint64_t v35 = 0x4062200000000000;
      int v36 = 2;
      unint64_t v37 = 0xC016666666666666;
      unint64_t v38 = 0xBFF4CCCCCCCCCCCDLL;
      uint64_t v39 = 0x400E666666666666;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      uint64_t v30 = 0x4063800000000000;
      int v31 = 2;
      uint64_t v32 = 0;
      int64x2_t v33 = vdupq_n_s64(0xBFF4CCCCCCCCCCCDLL);
      long long v34 = xmmword_2174584D0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      uint64_t v25 = 0x4064E00000000000;
      LODWORD(v26) = 2;
      uint64_t v27 = 0x403CCCCCCCCCCCCDLL;
      int64x2_t v28 = vdupq_n_s64(0x4003333333333333uLL);
      long long v29 = xmmword_2174584E0;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      uint64_t v20 = 0x4067200000000000;
      int v21 = 2;
      uint64_t v22 = 0;
      v23.i64[0] = 0x400CCCCCCCCCCCCDLL;
      *((void *)&v24 + 1) = 0x4014000000000000;
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v40, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v35);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v41, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v30);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v42, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v25);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)v43, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v20);
      sub_2169359B8((uint64_t)&v15, v40, 4);
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots((uint64_t)a2, (uint64_t **)&v15);
LABEL_11:
      uint64_t v8 = v16;
      char v9 = &v15;
LABEL_12:
      sub_2167FB780((uint64_t)v9, v8);
      break;
    default:
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
      break;
  }
}

void sub_21693591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  sub_2167FB780((uint64_t)&a20, a21);
  sub_2167FB780(v21 + 8, *(void **)(v21 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_2169359B8(uint64_t a1, double *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 80 * a3;
    do
    {
      sub_216935A3C((uint64_t **)a1, v4, a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)a2);
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
  }
  return a1;
}

void sub_216935A24(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216935A3C(uint64_t **a1, uint64_t *a2, double *a3, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a4)
{
  uint64_t v6 = (uint64_t **)sub_216935AC0(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_216935C58((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

double *sub_216935AC0(void *a1, uint64_t *a2, double **a3, uint64_t *a4, double *a5)
{
  uint64_t v9 = (double *)(a1 + 1);
  if (a1 + 1 != a2 && !pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(a5, (double *)a2 + 4))
  {
    if (!pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<((double *)a2 + 4, a5))
    {
      *a3 = (double *)a2;
      *a4 = (uint64_t)a2;
      return (double *)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (double *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = *(double **)v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = (double *)a2;
      do
      {
        uint64_t v15 = (double *)*((void *)v18 + 2);
        BOOL v17 = *(void *)v15 == (void)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (double *)a2;
    }
    return (double *)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    long long v12 = (double *)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (double *)a2;
      return (double *)a2;
    }
  }
  char v11 = (double *)*a2;
  if (*a2)
  {
    do
    {
      long long v12 = v11;
      char v11 = (double *)*((void *)v11 + 1);
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      long long v12 = (double *)v16[2];
      BOOL v17 = *(void *)v12 == (void)v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (double *)sub_216935CC8((uint64_t)a1, a3, a5);
}

void sub_216935C58(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_216935CB0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void *sub_216935CC8(uint64_t a1, void *a2, double *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (double *)(v4 + 32);
        if (!pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(a3, (double *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleBezier(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  if (pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetRequiredFeatures(this) != 4)
  {
    v34.n128_u64[0] = (unint64_t)"ts/tsTest_SampleBezier.cpp";
    v34.n128_u64[1] = (unint64_t)"TsTest_SampleBezier";
    uint64_t v35 = 69;
    int v36 = "TsTest_SampleVec pxrInternal__aapl__pxrReserved__::TsTest_SampleBezier(const SData &, const int)";
    char v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"SampleBezier supports only plain Beziers");
    goto LABEL_5;
  }
  Knots = (void *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots(this);
  unint64_t v7 = Knots[2];
  if (v7 <= 1)
  {
    v34.n128_u64[0] = (unint64_t)"ts/tsTest_SampleBezier.cpp";
    v34.n128_u64[1] = (unint64_t)"TsTest_SampleBezier";
    uint64_t v35 = 76;
    int v36 = "TsTest_SampleVec pxrInternal__aapl__pxrReserved__::TsTest_SampleBezier(const SData &, const int)";
    char v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"SampleBezier requires at least two keyframes");
LABEL_5:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return;
  }
  unint64_t v8 = v3 / v7;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v9 = (double *)(Knots + 1);
  unint64_t v10 = (double *)*Knots;
  char v11 = (double *)*Knots;
  while (1)
  {
    long long v12 = (double *)*((void *)v10 + 1);
    uint64_t v13 = v10;
    if (v12)
    {
      do
      {
        unint64_t v10 = v12;
        long long v12 = *(double **)v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        unint64_t v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (!v14);
    }
    if (v10 == v9) {
      break;
    }
    if ((int)v8 >= 1)
    {
      int v15 = 0;
      do
      {
        double v16 = 1.0 / (double)((int)v8 + 1) * (double)v15;
        double v17 = v11[4];
        double v18 = v11[6];
        double v19 = v11[12];
        double v20 = v18 + v19 * v11[10];
        double v21 = v10[4];
        double v22 = v10[6];
        double v23 = v10[11];
        double v24 = v21 - v23;
        double v25 = v22 - v23 * v10[9];
        pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v34.n128_f64, (1.0 - v16)* ((1.0 - v16) * ((1.0 - v16) * v17 + v16 * (v17 + v19)) + v16 * ((1.0 - v16) * (v17 + v19) + v16 * v24))+ v16 * ((1.0 - v16) * ((1.0 - v16) * (v17 + v19) + v16 * v24) + v16 * (v16 * v21 + (1.0 - v16) * v24)), (1.0 - v16) * ((1.0 - v16) * ((1.0 - v16) * v18 + v16 * v20) + v16 * ((1.0 - v16) * v20 + v16 * v25))+ v16 * ((1.0 - v16) * ((1.0 - v16) * v20 + v16 * v25) + v16 * (v16 * v22 + (1.0 - v16) * v25)));
        unint64_t v26 = *(void *)(a3 + 8);
        if (v26 >= *(void *)(a3 + 16))
        {
          uint64_t v27 = sub_2169360A4(a3, &v34);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a3 + 8), &v34);
          uint64_t v27 = v26 + 16;
          *(void *)(a3 + 8) = v26 + 16;
        }
        *(void *)(a3 + 8) = v27;
        ++v15;
      }
      while (v8 != v15);
    }
    int64x2_t v28 = (double *)*((void *)v11 + 1);
    if (v28)
    {
      do
      {
        char v11 = v28;
        int64x2_t v28 = *(double **)v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        long long v29 = v11;
        char v11 = (double *)*((void *)v11 + 2);
      }
      while (*(double **)v11 != v29);
    }
  }
  uint64_t v30 = *(double **)v9;
  if (*(void *)v9)
  {
    do
    {
      int v31 = v30;
      uint64_t v30 = (double *)*((void *)v30 + 1);
    }
    while (v30);
  }
  else
  {
    do
    {
      int v31 = (double *)*((void *)v9 + 2);
      BOOL v14 = *(void *)v31 == (void)v9;
      uint64_t v9 = v31;
    }
    while (v14);
  }
  pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v34.n128_f64, v31[4], v31[6]);
  unint64_t v32 = *(void *)(a3 + 8);
  if (v32 >= *(void *)(a3 + 16))
  {
    uint64_t v33 = sub_2169360A4(a3, &v34);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a3 + 8), &v34);
    uint64_t v33 = v32 + 16;
    *(void *)(a3 + 8) = v32 + 16;
  }
  *(void *)(a3 + 8) = v33;
}

void sub_216936074(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169360A4(uint64_t a1, __n128 *a2)
{
  int v3 = *(__n128 **)a1;
  uint64_t v4 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_21677CB10();
  }
  uint64_t v7 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16) - (void)v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 16;
  if (v9) {
    unint64_t v10 = (char *)sub_216787EE0(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  __p = v10;
  BOOL v14 = (__n128 *)&v10[16 * v4];
  double v16 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v14, a2);
  int v15 = v14 + 1;
  sub_2169361D4((__n128 **)a1, &__p);
  uint64_t v11 = *(void *)(a1 + 8);
  if (v15 != v14) {
    int v15 = (__n128 *)((char *)v15 + (((char *)v14 - (char *)v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_21693619C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169361D4(__n128 **a1, void *a2)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (__n128 *)a2[1];
  while (v4 != v5)
    pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v6 - 1, --v4);
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (__n128 *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (__n128 *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this)
{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

{
  *(double *)this = a2;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this, double a2, char a3)
{
  *(double *)this = a2;
  *(unsigned char *)(this + 8) = a3;
  return this;
}

{
  *(double *)this = a2;
  *(unsigned char *)(this + 8) = a3;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime(uint64_t this, const pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime *a2)
{
  uint64_t v2 = *(void *)a2;
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *(void *)this = v2;
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)a2;
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *(void *)this = v2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator=(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)double result = v2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator=(uint64_t result, double a2)
{
  *(double *)double result = a2;
  *(unsigned char *)(result + 8) = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator<(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 < *(double *)a2) {
    return 1;
  }
  if (*(double *)a1 == *(double *)a2 && *(unsigned char *)(a1 + 8)) {
    return *(unsigned char *)(a2 + 8) == 0;
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::operator!=(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

void *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes@<X0>(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  double result = (void *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8));
  uint64_t v4 = result + 1;
  unint64_t v5 = (void *)*result;
  if ((void *)*result != result + 1)
  {
    BOOL v6 = 0;
    do
    {
      if (v6 || *((unsigned char *)v5 + 56))
      {
        uint64_t v10 = v5[4];
        char v11 = 1;
        sub_216936BC0((uint64_t **)a2, (uint64_t)&v10, (uint64_t)&v10);
      }
      uint64_t v10 = v5[4];
      char v11 = 0;
      double result = sub_216936BC0((uint64_t **)a2, (uint64_t)&v10, (uint64_t)&v10);
      BOOL v6 = *((_DWORD *)v5 + 10) == 0;
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          unint64_t v5 = v8;
        }
        while (!v9);
      }
      unint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  return result;
}

void sub_216936464(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::TsTest_SampleTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  *(unsigned char *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8));
  *((void *)this + 20) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = (char *)this + 152;
  return this;
}

{
  *(unsigned char *)this = 0;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8));
  *((void *)this + 20) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = (char *)this + 152;
  return this;
}

pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::TsTest_SampleTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2)
{
  *(unsigned char *)this = 1;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8), a2);
  *((void *)this + 20) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = (char *)this + 152;
  return this;
}

{
  *(unsigned char *)this = 1;
  pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8), a2);
  *((void *)this + 20) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = (char *)this + 152;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddTimes(void *result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t **)(result + 18);
    do
    {
      uint64_t v5 = *v2++;
      uint64_t v6 = v5;
      char v7 = 0;
      double result = sub_216936BC0(v4, (uint64_t)&v6, (uint64_t)&v6);
    }
    while (v2 != v3);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddTimes(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t **)(result + 18);
    uint64_t v5 = (double *)(result + 19);
    do
    {
      double result = sub_216936CC0(v4, v5, v2, v2);
      v2 += 16;
    }
    while (v2 != v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddKnotTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  if (*(unsigned char *)this)
  {
    pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes(this, (uint64_t)&v2);
    sub_2169366E4((void *)this + 18, v2, v3);
    sub_2167FB780((uint64_t)&v2, v3[0]);
  }
  else
  {
    uint64_t v2 = "ts/tsTest_SampleTimes.cpp";
    v3[0] = "AddKnotTimes";
    v3[1] = (void *)135;
    v3[2] = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddKnotTimes()";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v2, 1, (pxrInternal__aapl__pxrReserved__ *)"AddKnotTimes: no spline data");
  }
}

void sub_2169366CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void *sub_2169366E4(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (double *)(result + 1);
    do
    {
      double result = sub_216936CC0(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      char v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          char v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this, int a2)
{
  if (*(unsigned char *)this)
  {
    if (a2 <= 0)
    {
      double v15 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
      double v16 = "AddUniformInterpolationTimes";
      uint64_t v17 = 154;
      double v18 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(const int)";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"AddUniformInterpolationTimes: Too few samples");
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes(this, (uint64_t)&v13);
      if (v14[1] > (void *)1)
      {
        char v4 = v14[0];
        if (v14[0])
        {
          do
          {
            uint64_t v5 = v4;
            char v4 = (void *)v4[1];
          }
          while (v4);
        }
        else
        {
          uint64_t v6 = v14;
          do
          {
            uint64_t v5 = v6[2];
            BOOL v7 = *v5 == (void)v6;
            uint64_t v6 = (void **)v5;
          }
          while (v7);
        }
        if (a2 >= 2)
        {
          int v8 = 0;
          double v9 = *(double *)(v13 + 32);
          double v10 = (*((double *)v5 + 4) - v9) / (double)(a2 + 1);
          char v11 = (uint64_t **)((char *)this + 144);
          int v12 = a2 - 1;
          do
          {
            double v15 = v9 + v10 * (double)v8;
            LOBYTE(v16) = 0;
            sub_216936BC0(v11, (uint64_t)&v15, (uint64_t)&v15);
            ++v8;
          }
          while (v12 != v8);
        }
      }
      else
      {
        double v15 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
        double v16 = "AddUniformInterpolationTimes";
        uint64_t v17 = 161;
        double v18 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(const int)";
        char v19 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"AddUniformInterpolationTimes: Too few knots");
      }
      sub_2167FB780((uint64_t)&v13, v14[0]);
    }
  }
  else
  {
    double v15 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
    double v16 = "AddUniformInterpolationTimes";
    uint64_t v17 = 148;
    double v18 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(const int)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"AddUniformInterpolationTimes: no spline data");
  }
}

void sub_216936924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this, double a2)
{
  if (*(unsigned char *)this)
  {
    if (a2 <= 0.0)
    {
      double v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
      double v15 = "AddExtrapolationTimes";
      uint64_t v16 = 185;
      uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
      char v18 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: invalid factor", a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::_GetKnotTimes(this, (uint64_t)&v12);
      if (v13[1] > (void *)1)
      {
        if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8)) == 3
          || *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation((pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *)((char *)this + 8)) == 3)
        {
          double v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
          double v15 = "AddExtrapolationTimes";
          uint64_t v16 = 201;
          uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
          char v18 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: extrapolating loops");
        }
        else
        {
          char v4 = v13[0];
          double v5 = *(double *)(v12 + 32);
          if (v13[0])
          {
            do
            {
              uint64_t v6 = v4;
              char v4 = (void *)v4[1];
            }
            while (v4);
          }
          else
          {
            BOOL v7 = v13;
            do
            {
              uint64_t v6 = v7[2];
              BOOL v8 = *v6 == (void)v7;
              BOOL v7 = (void **)v6;
            }
            while (v8);
          }
          double v9 = *((double *)v6 + 4);
          double v10 = (v9 - v5) * a2;
          char v11 = (uint64_t **)((char *)this + 144);
          double v14 = v5 - v10;
          LOBYTE(v15) = 0;
          sub_216936BC0(v11, (uint64_t)&v14, (uint64_t)&v14);
          double v14 = v9 + v10;
          LOBYTE(v15) = 0;
          sub_216936BC0(v11, (uint64_t)&v14, (uint64_t)&v14);
        }
      }
      else
      {
        double v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
        double v15 = "AddExtrapolationTimes";
        uint64_t v16 = 192;
        uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
        char v18 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: too few knots");
      }
      sub_2167FB780((uint64_t)&v12, v13[0]);
    }
  }
  else
  {
    double v14 = COERCE_DOUBLE("ts/tsTest_SampleTimes.cpp");
    double v15 = "AddExtrapolationTimes";
    uint64_t v16 = 179;
    uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(const double)";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"AddExtrapolationTimes: no spline data", a2);
  }
}

void sub_216936B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddStandardTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddKnotTimes(this);
  pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddUniformInterpolationTimes(this, 200);

  pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::AddExtrapolationTimes(this, 0.2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::GetTimes(pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *this)
{
  return (uint64_t)this + 144;
}

void *sub_216936BC0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  double v5 = (void **)sub_216936C4C((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    BOOL v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x30uLL);
    void v6[4] = *(void *)a3;
    *((unsigned char *)v6 + 40) = *(unsigned char *)(a3 + 8);
    sub_21677B358(a1, v9, v7, v6);
  }
  return v6;
}

void *sub_216936C4C(uint64_t a1, void *a2, uint64_t a3)
{
  double v5 = *(uint64_t **)(a1 + 8);
  double result = (void *)(a1 + 8);
  char v4 = v5;
  if (v5)
  {
    double v6 = *(double *)a3;
    int v7 = *(unsigned __int8 *)(a3 + 8);
    do
    {
      while (1)
      {
        BOOL v8 = v4;
        double v9 = *((double *)v4 + 4);
        if (v6 >= v9)
        {
          BOOL v10 = v6 != v9 || v7 == 0;
          if (v10 || *((unsigned char *)v4 + 40)) {
            break;
          }
        }
        char v4 = (uint64_t *)*v4;
        double result = v8;
        if (!*v8) {
          goto LABEL_23;
        }
      }
      if (v9 >= v6)
      {
        int v11 = *((unsigned __int8 *)v4 + 40);
        BOOL v12 = v9 != v6 || v11 == 0;
        if (v12 || v7 != 0) {
          break;
        }
      }
      double result = v8 + 1;
      char v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    BOOL v8 = result;
  }
LABEL_23:
  *a2 = v8;
  return result;
}

void *sub_216936CC0(uint64_t **a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v6 = sub_216936D50(a1, a2, &v11, &v10, a3);
  int v7 = *(void **)v6;
  if (!*(void *)v6)
  {
    BOOL v8 = (uint64_t **)v6;
    int v7 = operator new(0x30uLL);
    void v7[4] = *(void *)a4;
    *((unsigned char *)v7 + 40) = *(unsigned char *)(a4 + 8);
    sub_21677B358(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_216936D50(uint64_t **a1, double *a2, double **a3, double *a4, uint64_t a5)
{
  if (a1 + 1 == (uint64_t **)a2
    || (double v5 = *(double *)a5, v6 = a2[4], *(double *)a5 < v6)
    || ((int v10 = *(unsigned __int8 *)(a5 + 8), *(double *)a5 == v6) ? (v11 = v10 == 0) : (v11 = 1),
        !v11 && !*((unsigned char *)a2 + 40)))
  {
    int v7 = *(uint64_t **)a2;
    if (*a1 == (uint64_t *)a2)
    {
      double v9 = a2;
    }
    else
    {
      if (v7)
      {
        BOOL v8 = *(uint64_t **)a2;
        do
        {
          double v9 = (double *)v8;
          BOOL v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        uint64_t v16 = a2;
        do
        {
          double v9 = (double *)*((void *)v16 + 2);
          BOOL v11 = *(void *)v9 == (void)v16;
          uint64_t v16 = v9;
        }
        while (v11);
      }
      double v17 = v9[4];
      if (v17 >= *(double *)a5)
      {
        BOOL v18 = v17 != *(double *)a5 || *((unsigned char *)v9 + 40) == 0;
        if (v18 || *(unsigned char *)(a5 + 8) != 0) {
          return (double *)sub_216936C4C((uint64_t)a1, a3, a5);
        }
      }
    }
    if (v7)
    {
      *a3 = v9;
      return v9 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v5 || (v6 == v5 ? (BOOL v12 = *((unsigned char *)a2 + 40) == 0) : (BOOL v12 = 1), !v12 ? (v13 = v10 == 0) : (v13 = 0), v13))
  {
    uint64_t v14 = *((void *)a2 + 1);
    if (v14)
    {
      double v15 = (double *)*((void *)a2 + 1);
      do
      {
        a4 = v15;
        double v15 = *(double **)v15;
      }
      while (v15);
    }
    else
    {
      double v21 = a2;
      do
      {
        a4 = (double *)*((void *)v21 + 2);
        BOOL v11 = *(void *)a4 == (void)v21;
        double v21 = a4;
      }
      while (!v11);
    }
    if (a4 == (double *)(a1 + 1)
      || (double v22 = a4[4], v5 < v22)
      || (v5 == v22 ? (BOOL v23 = v10 == 0) : (BOOL v23 = 1), !v23 && !*((unsigned char *)a4 + 40)))
    {
      if (v14)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return (double *)sub_216936C4C((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *(void *)a4 = a2;
  return a4;
}

void sub_216936EB8()
{
  sub_216779094(v3, "TsTest_SplineData::InterpHeld");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7515A0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::InterpLinear");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7515A0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::InterpCurve");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7515A0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::ExtrapHeld");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751570, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::ExtrapLinear");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751570, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::ExtrapSloped");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751570, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::ExtrapLoop");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751570, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::LoopNone");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751580, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::LoopContinue");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751580, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::LoopRepeat");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751580, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::LoopReset");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751580, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::LoopOscillate");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751580, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::FeatureHeldSegments");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751590, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::FeatureLinearSegments");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751590, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::FeatureBezierSegments");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751590, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::FeatureHermiteSegments");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751590, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::FeatureDualValuedKnots");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751590, 32, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::FeatureInnerLoops");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751590, 64, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "TsTest_SplineData::FeatureExtrapolatingLoops");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751590, 128, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_2169374CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 58) = 0u;
  return result;
}

{
  double result;

  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 58) = 0u;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  __n128 result = *((__n128 *)a2 + 1);
  long long v3 = *((_OWORD *)a2 + 2);
  long long v4 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 58) = *(_OWORD *)((char *)a2 + 58);
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v4;
  *((__n128 *)this + 1) = result;
  return result;
}

{
  __n128 result;
  long long v3;
  long long v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  __n128 result = *((__n128 *)a2 + 1);
  long long v3 = *((_OWORD *)a2 + 2);
  long long v4 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 58) = *(_OWORD *)((char *)a2 + 58);
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v4;
  *((__n128 *)this + 1) = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && *(double *)(a1 + 56) == *(double *)(a2 + 56)
      && *(double *)(a1 + 64) == *(double *)(a2 + 64)
      && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator!=(uint64_t a1, uint64_t a2)
{
  return !pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator==(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator<(double *a1, double *a2)
{
  return *a1 < *a2;
}

double pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::InnerLoopParams(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *this)
{
  *(unsigned char *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 1;
  *((void *)this + 6) = 0;
  return result;
}

{
  double result;

  *(unsigned char *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 1;
  *((void *)this + 6) = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::InnerLoopParams(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *((_OWORD *)a2 + 1);
  long long v4 = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v4;
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;
  long long v3;
  long long v4;

  __n128 result = *(__n128 *)a2;
  long long v3 = *((_OWORD *)a2 + 1);
  long long v4 = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v4;
  *(__n128 *)this = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator==(double *a1, double *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && *((unsigned __int8 *)a1 + 40) == *((unsigned __int8 *)a2 + 40)
      && a1[6] == a2[6];
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator!=(double *a1, double *a2)
{
  return !pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator==(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::IsValid(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams *this)
{
  if (!*(unsigned char *)this) {
    return 1;
  }
  double v2 = *((double *)this + 1);
  double v1 = *((double *)this + 2);
  return v1 > v2 && *((double *)this + 3) <= v2 && *((double *)this + 4) >= v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation(uint64_t result, int a2)
{
  *(_DWORD *)__n128 result = a2;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

{
  *(_DWORD *)__n128 result = a2;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *a2)
{
  __n128 result = *(__n128 *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;

  __n128 result = *(__n128 *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(__n128 *)this = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::operator==(double *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (v2 != 3) {
    return v2 != 2 || a1[1] == *(double *)(a2 + 8);
  }
  return *((_DWORD *)a1 + 4) == *(_DWORD *)(a2 + 16);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::operator!=(double *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 1;
  }
  if (v2 == 3) {
    return *((_DWORD *)a1 + 4) != *(_DWORD *)(a2 + 16);
  }
  if (v2 == 2) {
    return a1[1] != *(double *)(a2 + 8);
  }
  return 0;
}

double pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((unsigned char *)this + 80) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((unsigned char *)this + 120) = 1;
  *((void *)this + 16) = 0;
  return result;
}

{
  double result;

  *(unsigned char *)this = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((unsigned char *)this + 80) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((unsigned char *)this + 120) = 1;
  *((void *)this + 16) = 0;
  return result;
}

pxrInternal__aapl__pxrReserved__::TsTest_SplineData *pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  sub_216938B68((uint64_t *)this + 1, (uint64_t)a2 + 8);
  long long v4 = *((_OWORD *)a2 + 2);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)this + 2) = v4;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 56) = v5;
  long long v6 = *((_OWORD *)a2 + 5);
  long long v7 = *((_OWORD *)a2 + 6);
  long long v8 = *((_OWORD *)a2 + 7);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((_OWORD *)this + 6) = v7;
  *((_OWORD *)this + 7) = v8;
  *((_OWORD *)this + 5) = v6;
  return this;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;

  *(unsigned char *)this = *(unsigned char *)a2;
  sub_216938B68((uint64_t *)this + 1, (uint64_t)a2 + 8);
  long long v4 = *((_OWORD *)a2 + 2);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)this + 2) = v4;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 56) = v5;
  long long v6 = *((_OWORD *)a2 + 5);
  long long v7 = *((_OWORD *)a2 + 6);
  long long v8 = *((_OWORD *)a2 + 7);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((_OWORD *)this + 6) = v7;
  *((_OWORD *)this + 7) = v8;
  *((_OWORD *)this + 5) = v6;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (a1 != a2) {
    sub_216938C4C((uint64_t **)(a1 + 8), *(void **)(a2 + 8), (void *)(a2 + 16));
  }
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((void *)a1 + 3) != *((void *)a2 + 3)) {
    return 0;
  }
  long long v4 = (unsigned __int8 *)*((void *)a1 + 1);
  long long v5 = a1 + 16;
  if (v4 != a1 + 16)
  {
    long long v6 = (void *)*((void *)a2 + 1);
    while (pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::operator==((uint64_t)(v4 + 32), (uint64_t)(v6 + 4)))
    {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
      long long v8 = v4;
      if (v7)
      {
        do
        {
          long long v4 = v7;
          long long v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v4 = (unsigned __int8 *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v4 == (void)v8;
          long long v8 = v4;
        }
        while (!v9);
      }
      int v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (void *)v6[2];
          BOOL v9 = *v11 == (void)v6;
          long long v6 = v11;
        }
        while (!v9);
      }
      long long v6 = v11;
      if (v4 == v5) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  int v12 = *((_DWORD *)a1 + 8);
  if (v12 != *((_DWORD *)a2 + 8)) {
    return 0;
  }
  if (v12 == 3)
  {
    if (*((_DWORD *)a1 + 12) != *((_DWORD *)a2 + 12)) {
      return 0;
    }
  }
  else if (v12 == 2 && *((double *)a1 + 5) != *((double *)a2 + 5))
  {
    return 0;
  }
  int v13 = *((_DWORD *)a1 + 14);
  if (v13 != *((_DWORD *)a2 + 14)) {
    return 0;
  }
  if (v13 == 3)
  {
    if (*((_DWORD *)a1 + 18) == *((_DWORD *)a2 + 18)) {
      goto LABEL_27;
    }
    return 0;
  }
  if (v13 == 2 && *((double *)a1 + 8) != *((double *)a2 + 8)) {
    return 0;
  }
LABEL_27:

  return pxrInternal__aapl__pxrReserved__::TsTest_SplineData::InnerLoopParams::operator==((double *)a1 + 10, (double *)a2 + 10);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return !pxrInternal__aapl__pxrReserved__::TsTest_SplineData::operator==(a1, a2);
}

unsigned char *pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetIsHermite(unsigned char *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t **pxrInternal__aapl__pxrReserved__::TsTest_SplineData::AddKnot(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *a2)
{
  long long v3 = (uint64_t **)((char *)this + 8);
  sub_216938EE0((uint64_t)this + 8, (double *)a2);

  return sub_216938F5C(v3, (double *)a2, a2);
}

uint64_t **pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetKnots(uint64_t a1, uint64_t **a2)
{
  double result = (uint64_t **)(a1 + 8);
  if (result != a2) {
    return sub_216938C4C(result, *a2, a2 + 1);
  }
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPreExtrapolation(__n128 *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *a2)
{
  __n128 result = *(__n128 *)a2;
  this[3].n128_u32[0] = *((_DWORD *)a2 + 4);
  this[2] = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPostExtrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this, const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *a2)
{
  __n128 result = *(__n128 *)a2;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 4);
  *(__n128 *)((char *)this + 56) = result;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetInnerLoopParams(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  __n128 v3 = a2[1];
  __n128 v4 = a2[2];
  this[8].n128_u64[0] = a2[3].n128_u64[0];
  this[6] = v3;
  this[7] = v4;
  this[5] = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetIsHermite(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetInnerLoopParams(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  return (uint64_t)this + 80;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetRequiredFeatures(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  double v1 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((void *)this + 1);
  if (v1 == (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16))
  {
    unsigned int v2 = 0;
  }
  else
  {
    unsigned int v2 = 0;
    do
    {
      int v3 = *((_DWORD *)v1 + 10);
      if (v3 == 2)
      {
        if (*(unsigned char *)this) {
          int v5 = 8;
        }
        else {
          int v5 = 4;
        }
        v2 |= v5;
      }
      else
      {
        int v4 = v2 | 2;
        if (!v3) {
          v2 |= 1u;
        }
        if (v3 == 1) {
          unsigned int v2 = v4;
        }
      }
      if (*((unsigned char *)v1 + 56)) {
        v2 |= 0x20u;
      }
      if (*((unsigned __int8 *)v1 + 104) | *((unsigned __int8 *)v1 + 105)) {
        v2 |= 0x10u;
      }
      long long v6 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((void *)v1 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = *(pxrInternal__aapl__pxrReserved__::TsTest_SplineData **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((void *)v1 + 2);
          BOOL v8 = *(void *)v7 == (void)v1;
          double v1 = v7;
        }
        while (!v8);
      }
      double v1 = v7;
    }
    while (v7 != (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16));
  }
  if (*((unsigned char *)this + 80)) {
    uint64_t v9 = v2 | 0x40;
  }
  else {
    uint64_t v9 = v2;
  }
  int v10 = *((_DWORD *)this + 8);
  if (v10 == 2 || *((_DWORD *)this + 14) == 2) {
    uint64_t v9 = v9 | 0x100;
  }
  if (v10 == 3 || *((_DWORD *)this + 14) == 3) {
    return v9 | 0x80;
  }
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetDebugDescription(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *this)
{
  sub_21677B834((uint64_t)v53);
  double v1 = sub_216779180(v53, (uint64_t)"Spline:", 7);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(void *)(*v1 - 24)));
  unsigned int v2 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale((std::locale *)&v52);
  std::ostream::put();
  std::ostream::flush();
  int v3 = sub_216779180(v1, (uint64_t)"  hermite ", 10);
  if (*(unsigned char *)this) {
    int v4 = "true";
  }
  else {
    int v4 = "false";
  }
  if (*(unsigned char *)this) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = 5;
  }
  long long v6 = sub_216779180(v3, (uint64_t)v4, v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  long long v7 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)&v52);
  std::ostream::put();
  std::ostream::flush();
  BOOL v8 = sub_216779180(v6, (uint64_t)"  preExtrap ", 12);
  sub_2169388C0((unsigned int *)this + 8);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v52;
  }
  else {
    uint64_t v9 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  BOOL v11 = sub_216779180(v8, (uint64_t)v9, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  int v12 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)&v51);
  std::ostream::put();
  std::ostream::flush();
  int v13 = sub_216779180(v11, (uint64_t)"  postExtrap ", 13);
  sub_2169388C0((unsigned int *)this + 14);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v51;
  }
  else {
    uint64_t v14 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v51.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = sub_216779180(v13, (uint64_t)v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  double v17 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v56);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)this + 80))
  {
    BOOL v18 = sub_216779180(v53, (uint64_t)"Loop:", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    char v19 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale((std::locale *)&v52);
    std::ostream::put();
    std::ostream::flush();
    sub_216779180(v18, (uint64_t)"  start ", 8);
    double v20 = (void *)std::ostream::operator<<();
    sub_216779180(v20, (uint64_t)", end ", 6);
    double v21 = (void *)std::ostream::operator<<();
    sub_216779180(v21, (uint64_t)", preStart ", 11);
    double v22 = (void *)std::ostream::operator<<();
    sub_216779180(v22, (uint64_t)", postEnd ", 10);
    BOOL v23 = (void *)std::ostream::operator<<();
    sub_216779180(v23, (uint64_t)", closed ", 9);
    double v24 = (void *)std::ostream::operator<<();
    sub_216779180(v24, (uint64_t)", offset ", 9);
    double v25 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
    unint64_t v26 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale((std::locale *)&v52);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v27 = sub_216779180(v53, (uint64_t)"Knots:", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
  int64x2_t v28 = std::locale::use_facet((const std::locale *)&v52, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale((std::locale *)&v52);
  std::ostream::put();
  std::ostream::flush();
  long long v29 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((void *)this + 1);
  if (v29 != (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16))
  {
    uint64_t v30 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      sub_216779180(v53, (uint64_t)"  ", 2);
      int v31 = (void *)std::ostream::operator<<();
      sub_216779180(v31, (uint64_t)": ", 2);
      unint64_t v32 = (void *)std::ostream::operator<<();
      uint64_t v33 = sub_216779180(v32, (uint64_t)", ", 2);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C7515A0, *((unsigned int *)v29 + 10), (uint64_t)&v51);
      std::string::basic_string(&v52, &v51, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __n128 v34 = &v52;
      }
      else {
        __n128 v34 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v52.__r_.__value_.__l.__size_;
      }
      sub_216779180(v33, (uint64_t)v34, v35);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (*((_DWORD *)v29 + 10) == 2)
      {
        sub_216779180(v53, (uint64_t)", preSlope ", 11);
        int v36 = (void *)std::ostream::operator<<();
        sub_216779180(v36, (uint64_t)", postSlope ", 12);
        std::ostream::operator<<();
        if (!*(unsigned char *)this)
        {
          sub_216779180(v53, (uint64_t)", preLen ", 9);
          char v37 = (void *)std::ostream::operator<<();
          sub_216779180(v37, (uint64_t)", postLen ", 10);
          std::ostream::operator<<();
        }
        unint64_t v38 = sub_216779180(v53, (uint64_t)", auto ", 7);
        if (*((unsigned char *)v29 + 104)) {
          uint64_t v39 = "true";
        }
        else {
          uint64_t v39 = "false";
        }
        if (*((unsigned char *)v29 + 104)) {
          uint64_t v40 = 4;
        }
        else {
          uint64_t v40 = 5;
        }
        uint64_t v41 = sub_216779180(v38, (uint64_t)v39, v40);
        uint64_t v42 = sub_216779180(v41, (uint64_t)" / ", 3);
        if (*((unsigned char *)v29 + 105)) {
          uint64_t v43 = "true";
        }
        else {
          uint64_t v43 = "false";
        }
        if (*((unsigned char *)v29 + 105)) {
          uint64_t v44 = 4;
        }
        else {
          uint64_t v44 = 5;
        }
        sub_216779180(v42, (uint64_t)v43, v44);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(v53[0] - 24)));
      long long v45 = std::locale::use_facet((const std::locale *)&v52, v30);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale((std::locale *)&v52);
      std::ostream::put();
      std::ostream::flush();
      long long v46 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((void *)v29 + 1);
      if (v46)
      {
        do
        {
          long long v47 = v46;
          long long v46 = *(pxrInternal__aapl__pxrReserved__::TsTest_SplineData **)v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          long long v47 = (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)*((void *)v29 + 2);
          BOOL v48 = *(void *)v47 == (void)v29;
          long long v29 = v47;
        }
        while (!v48);
      }
      long long v29 = v47;
    }
    while (v47 != (pxrInternal__aapl__pxrReserved__::TsTest_SplineData *)((char *)this + 16));
  }
  std::stringbuf::str();
  v53[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v53 + *(void *)(v53[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v53[1] = MEMORY[0x263F8C318] + 16;
  if (v54 < 0) {
    operator delete((void *)v53[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v55);
}

void sub_2169387FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_21677B9CC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_2169388C0(unsigned int *a1)
{
  sub_21677B834((uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C751570, *a1, (uint64_t)&__p);
  std::string::basic_string(&v9, &__p, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v13);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v2 = &v9;
  }
  else {
    unsigned int v2 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  sub_216779180(v10, (uint64_t)v2, size);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*a1 == 3)
  {
    int v4 = sub_216779180(v10, (uint64_t)" ", 1);
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C751580, a1[4], (uint64_t)&__p);
    std::string::basic_string(&v9, &__p, 4uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v13);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v9;
    }
    else {
      uint64_t v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v6 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v6 = v9.__r_.__value_.__l.__size_;
    }
    sub_216779180(v4, (uint64_t)v5, v6);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (*a1 == 2)
  {
    sub_216779180(v10, (uint64_t)" ", 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v12);
}

void sub_216938B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_21677B9CC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t *sub_216938B68(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216938BC0(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_216938BA8(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216938BC0(uint64_t *result, double *a2, double *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    std::string::size_type v6 = result + 1;
    do
    {
      __n128 result = sub_216935A3C(v5, v6, v4 + 4, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)(v4 + 4));
      long long v7 = (double *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          long long v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (double *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t **sub_216938C4C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    std::string::size_type v6 = *result;
    long long v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      BOOL v8 = (uint64_t *)v6[1];
    }
    else {
      BOOL v8 = v6;
    }
    double v17 = result;
    BOOL v18 = v8;
    char v19 = v8;
    if (v8)
    {
      BOOL v18 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          long long v10 = *((_OWORD *)v9 + 3);
          long long v11 = *((_OWORD *)v9 + 4);
          long long v12 = *((_OWORD *)v9 + 5);
          *(_OWORD *)((char *)v8 + 90) = *(_OWORD *)((char *)v9 + 90);
          *((_OWORD *)v8 + 4) = v11;
          *((_OWORD *)v8 + 5) = v12;
          *((_OWORD *)v8 + 3) = v10;
          sub_216938DC8(v5, (uint64_t)v8);
          BOOL v8 = v18;
          char v19 = v18;
          if (v18) {
            BOOL v18 = sub_216799E28((uint64_t)v18);
          }
          char v13 = (void *)v9[1];
          if (v13)
          {
            do
            {
              a2 = v13;
              char v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v14 = *a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v14);
          }
          if (!v8) {
            break;
          }
          BOOL v9 = a2;
        }
        while (a2 != a3);
      }
    }
    __n128 result = (uint64_t **)sub_2167FF3FC((uint64_t)&v17);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_216938E38(v5, (_OWORD *)a2 + 2);
      std::string::size_type v15 = (void *)a2[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          std::string::size_type v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)a2[2];
          BOOL v14 = *v16 == (void)a2;
          a2 = v16;
        }
        while (!v14);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_216938DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167FF3FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216938DC8(uint64_t **a1, uint64_t a2)
{
  int v3 = a1 + 1;
  int v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        int v3 = (uint64_t **)v4;
        if (*(double *)(a2 + 32) >= *((double *)v4 + 4)) {
          break;
        }
        int v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      int v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *sub_216938E38(uint64_t **a1, _OWORD *a2)
{
  int v4 = operator new(0x70uLL);
  uint64_t v5 = v4;
  long long v6 = a2[3];
  void v4[4] = a2[2];
  v4[5] = v6;
  *(_OWORD *)((char *)v4 + 90) = *(_OWORD *)((char *)a2 + 58);
  long long v7 = a2[1];
  v4[2] = *a2;
  uint64_t v4[3] = v7;
  BOOL v8 = a1 + 1;
  BOOL v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v9;
        if (*((double *)v4 + 4) >= *((double *)v9 + 4)) {
          break;
        }
        BOOL v9 = (uint64_t *)*v9;
        long long v10 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      BOOL v9 = (uint64_t *)v9[1];
    }
    while (v9);
    long long v10 = v8 + 1;
  }
  else
  {
    long long v10 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v8, v10, (uint64_t *)v4);
  return v5;
}

uint64_t sub_216938EE0(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  double v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    uint64_t v5 = (uint64_t *)(v2 + 8);
    if (*(double *)(v2 + 32) >= v3)
    {
      uint64_t v5 = (uint64_t *)v2;
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v5;
  }
  while (*v5);
  if (v4 == a1 + 8 || v3 < *(double *)(v4 + 32)) {
    return 0;
  }
  sub_2167AE00C((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t **sub_216938F5C(uint64_t **a1, double *a2, _OWORD *a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v5;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    long long v10 = operator new(0x70uLL);
    long long v11 = a3[3];
    v10[4] = a3[2];
    v10[5] = v11;
    *(_OWORD *)((char *)v10 + 90) = *(_OWORD *)((char *)a3 + 58);
    long long v12 = a3[1];
    _OWORD v10[2] = *a3;
    void v10[3] = v12;
    sub_21677B358(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void pxrInternal__aapl__pxrReserved__::TsTest_TsEvaluator::Eval(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, const pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes *a2@<X2>, uint64_t a3@<X8>)
{
  v24[2] = *MEMORY[0x263EF8340];
  sub_2169391F0(a1, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v22);
  uint64_t KeyFrames = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v22);
  uint64_t v7 = *KeyFrames;
  uint64_t v8 = KeyFrames[1];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (v7 != v8)
  {
    Times = (void *)pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::GetTimes(a2);
    long long v10 = Times + 1;
    long long v11 = (void *)*Times;
    if ((void *)*Times != Times + 1)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime::SampleTime((uint64_t)&v20, (const pxrInternal__aapl__pxrReserved__::TsTest_SampleTimes::SampleTime *)(v11 + 4));
        double v12 = v20;
        pxrInternal__aapl__pxrReserved__::TsSpline::Eval(&v22, v21 == 0, v24, v20);
        double v13 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
        pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v19.n128_f64, v12, v13);
        unint64_t v14 = *(void *)(a3 + 8);
        if (v14 >= *(void *)(a3 + 16))
        {
          uint64_t v15 = sub_2169360A4(a3, &v19);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a3 + 8), &v19);
          uint64_t v15 = v14 + 16;
          *(void *)(a3 + 8) = v14 + 16;
        }
        *(void *)(a3 + 8) = v15;
        sub_2168EE084((uint64_t)v24);
        uint64_t v16 = (void *)v11[1];
        if (v16)
        {
          do
          {
            double v17 = v16;
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            double v17 = (void *)v11[2];
            BOOL v18 = *v17 == (void)v11;
            long long v11 = v17;
          }
          while (!v18);
        }
        long long v11 = v17;
      }
      while (v17 != v10);
    }
  }
  if (v23) {
    sub_216784EC4(v23);
  }
}

void sub_216939194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16)
{
  BOOL v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }
  if (a15) {
    sub_216784EC4(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169391F0(pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X0>, pxrInternal__aapl__pxrReserved__::TsSpline *a2@<X8>)
{
  uint64_t v53[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetRequiredFeatures(a1) & 0x98) != 0)
  {
    int v36 = "ts/tsTest_TsEvaluator.cpp";
    char v37 = "_ConvertToTsSpline";
    uint64_t v38 = 45;
    uint64_t v39 = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
    char v40 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported spline features");
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
    return;
  }
  Knots = (void *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetKnots(a1);
  BOOL v5 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1) != 2 || Knots[2] == 0;
  if (!v5 && *(_DWORD *)(*Knots + 40) != 2)
  {
    int v36 = "ts/tsTest_TsEvaluator.cpp";
    char v37 = "_ConvertToTsSpline";
    uint64_t v38 = 55;
    uint64_t v39 = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
    char v40 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported pre-slope");
    pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
    return;
  }
  if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1) == 2 && Knots[2] != 0)
  {
    uint64_t v7 = Knots + 1;
    uint64_t v8 = Knots[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = v7[2];
        BOOL v5 = *(void *)v9 == (void)v7;
        uint64_t v7 = (void *)v9;
      }
      while (v5);
    }
    if (*(_DWORD *)(v9 + 40) != 2)
    {
      int v36 = "ts/tsTest_TsEvaluator.cpp";
      char v37 = "_ConvertToTsSpline";
      uint64_t v38 = 63;
      uint64_t v39 = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
      char v40 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported post-slope");
      pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
      return;
    }
  }
  pxrInternal__aapl__pxrReserved__::TsSpline::TsSpline(a2);
  int v10 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1);
  Postunint64_t Extrapolation = (_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1);
  pxrInternal__aapl__pxrReserved__::TsSpline::SetExtrapolation(a2, v10 != 0, *PostExtrapolation != 0);
  uint64_t v33 = Knots;
  unint64_t v14 = (double *)*Knots;
  double v12 = (double *)(Knots + 1);
  double v13 = v14;
  if (v14 != v12)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      char v37 = (const char *)*((void *)v13 + 4);
      v53[1] = &unk_26C750B03;
      *(double *)BOOL v53 = v13[6];
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue((uint64_t)&v36, v53);
      sub_2168EE084((uint64_t)v53);
      v52[1] = &unk_26C750B03;
      *(double *)std::string v52 = v13[9];
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v52);
      sub_2168EE084((uint64_t)v52);
      v51[1] = &unk_26C750B03;
      *(double *)std::string v51 = v13[10];
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v51);
      sub_2168EE084((uint64_t)v51);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v13[11]);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v13[12]);
      if (*((_DWORD *)v13 + 10) >= 3u)
      {
        v34[0] = "ts/tsTest_TsEvaluator.cpp";
        v34[1] = "_ConvertToTsSpline";
        v34[2] = 93;
        v34[3] = "TsSpline pxrInternal__aapl__pxrReserved__::_ConvertToTsSpline(const SData &)";
        char v35 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected knot type");
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetKnotType((uint64_t)&v36);
      }
      if (*((unsigned char *)v13 + 56))
      {
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetIsDualValued((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
        v50[1] = &unk_26C750B03;
        *(double *)uint64_t v50 = v13[8];
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetValue((uint64_t)&v36, v50, 0);
        sub_2168EE084((uint64_t)v50);
      }
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v49, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v49, 0);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v49);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      uint64_t v15 = (double *)*((void *)v13 + 1);
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(double **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (double *)*((void *)v13 + 2);
          BOOL v5 = *(void *)v16 == (void)v13;
          double v13 = v16;
        }
        while (!v5);
      }
      double v13 = v16;
    }
    while (v16 != v12);
  }
  BOOL v17 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1) != 1 || v33[2] == 0;
  if (v17 || *(_DWORD *)(*v33 + 40) != 2)
  {
    if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1) != 2 || !v33[2]) {
      goto LABEL_40;
    }
    uint64_t KeyFrames = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, *KeyFrames);
    Preunint64_t Extrapolation = pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPreExtrapolation(a1);
    v46[1] = &unk_26C750B03;
    v46[0] = *(void *)(PreExtrapolation + 8);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v46);
    sub_2168EE084((uint64_t)v46);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v45, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v45, 0);
    __n128 v19 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v45;
  }
  else
  {
    BOOL v18 = (const pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, *v18);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v48, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v48);
    sub_2168EE084((uint64_t)v48);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetLeftTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v47, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v47, 0);
    __n128 v19 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v47;
  }
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame(v19);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
LABEL_40:
  if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1) == 1 && v33[2])
  {
    uint64_t v22 = *(void *)v12;
    if (*(void *)v12)
    {
      do
      {
        uint64_t v23 = v22;
        uint64_t v22 = *(void *)(v22 + 8);
      }
      while (v22);
    }
    else
    {
      do
      {
        uint64_t v23 = *((void *)v12 + 2);
        BOOL v5 = *(void *)v23 == (void)v12;
        double v12 = (double *)v23;
      }
      while (v5);
    }
    if (*(_DWORD *)(v23 + 40) == 2)
    {
      uint64_t v24 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(v24 + 8) - 72));
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v44, (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v44);
      sub_2168EE084((uint64_t)v44);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v43, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v43, 0);
      double v25 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v43;
LABEL_53:
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame(v25);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
      goto LABEL_54;
    }
  }
  if (*(_DWORD *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1) == 2 && v33[2] != 0)
  {
    uint64_t v27 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames((pxrInternal__aapl__pxrReserved__::TsSpline_KeyFrames **)a2);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)(*(void *)(v27 + 8) - 72));
    uint64_t v28 = pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetPostExtrapolation(a1);
    v42[1] = &unk_26C750B03;
    v42[0] = *(void *)(v28 + 8);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentSlope((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, v42);
    sub_2168EE084((uint64_t)v42);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::SetRightTangentLength((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36, 1.0);
    pxrInternal__aapl__pxrReserved__::TsKeyFrame::TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v41, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&v36);
    pxrInternal__aapl__pxrReserved__::TsSpline::SetKeyFrame(a2, (const pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v41, 0);
    double v25 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)v41;
    goto LABEL_53;
  }
LABEL_54:
  Inneruint64_t LoopParams = pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetInnerLoopParams(a1);
  if (*(unsigned char *)InnerLoopParams)
  {
    double v30 = *(double *)(InnerLoopParams + 16);
    double v31 = *(double *)(InnerLoopParams + 32);
    double v32 = 1.0;
    if (v31 <= v30) {
      double v32 = 0.0;
    }
    if (!*(unsigned char *)(InnerLoopParams + 40)) {
      double v32 = 0.0;
    }
    pxrInternal__aapl__pxrReserved__::TsLoopParams::TsLoopParams((pxrInternal__aapl__pxrReserved__::TsLoopParams *)&v36, 1, *(double *)(InnerLoopParams + 8), v30 - *(double *)(InnerLoopParams + 8), *(double *)(InnerLoopParams + 8) - *(double *)(InnerLoopParams + 24), v32 + v31 - v30, *(double *)(InnerLoopParams + 48));
    pxrInternal__aapl__pxrReserved__::TsSpline::SetLoopParams(a2, (const pxrInternal__aapl__pxrReserved__::TsLoopParams *)&v36);
  }
}

void sub_2169398A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a37);
  pxrInternal__aapl__pxrReserved__::TsKeyFrame::~TsKeyFrame((pxrInternal__aapl__pxrReserved__::TsKeyFrame *)&a16);
  uint64_t v39 = *(std::__shared_weak_count **)(v37 + 8);
  if (v39) {
    sub_216784EC4(v39);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsTest_TsEvaluator::Sample(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, uint64_t a2@<X8>)
{
  sub_2169391F0(a1, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v17);
  uint64_t KeyFrames = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v17);
  if (*KeyFrames == KeyFrames[1]
    || (long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v17),
        0x8E38E38E38E38E39 * ((uint64_t)(v6[1] - *v6) >> 3) <= 1))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    double v7 = *(double *)(*(void *)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v17) + 8);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v17);
    pxrInternal__aapl__pxrReserved__::TsSpline::Sample(v16, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v17, v7, *(double *)(*(void *)(v8 + 8) - 64), 1.0, 1.0, 0.000001);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v9 = v16[0];
    uint64_t v10 = v16[1];
    while (v9 != v10)
    {
      double v11 = *(double *)(v9 + 8);
      double v12 = (double *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 24));
      pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(v15.n128_f64, v11, *v12);
      unint64_t v13 = *(void *)(a2 + 8);
      if (v13 >= *(void *)(a2 + 16))
      {
        uint64_t v14 = sub_2169360A4(a2, &v15);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(*(__n128 **)(a2 + 8), &v15);
        uint64_t v14 = v13 + 16;
        *(void *)(a2 + 8) = v13 + 16;
      }
      *(void *)(a2 + 8) = v14;
      v9 += 56;
    }
    v15.n128_u64[0] = (unint64_t)v16;
    sub_2169203B8((void ***)&v15);
  }
  if (v18) {
    sub_216784EC4(v18);
  }
}

void sub_216939B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TsTest_TsEvaluator::BakeInnerLoops(const pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a1@<X1>, pxrInternal__aapl__pxrReserved__::TsTest_SplineData *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)pxrInternal__aapl__pxrReserved__::TsTest_SplineData::GetInnerLoopParams(a1))
  {
    sub_2169391F0(a1, (pxrInternal__aapl__pxrReserved__::TsSpline *)&v11);
    pxrInternal__aapl__pxrReserved__::TsSpline::BakeSplineLoops((pxrInternal__aapl__pxrReserved__::TsSpline *)&v11);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2);
    unint64_t Extrapolation = pxrInternal__aapl__pxrReserved__::TsSpline::GetExtrapolation(&v11);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation((uint64_t)&v13, Extrapolation != 0);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPreExtrapolation((__n128 *)a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *)&v13);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation::Extrapolation((uint64_t)&v13, HIDWORD(Extrapolation) != 0);
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::SetPostExtrapolation(a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Extrapolation *)&v13);
    long long v6 = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v11);
    for (long long i = *(pxrInternal__aapl__pxrReserved__::TsKeyFrame **)(pxrInternal__aapl__pxrReserved__::TsSpline::GetKeyFrames(&v11)
                                                               + 8);
          v6 != i;
          long long v6 = (pxrInternal__aapl__pxrReserved__::TsKeyFrame *)((char *)v6 + 72))
    {
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot::Knot((pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v13);
      uint64_t v13 = *((void *)v6 + 1);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetValue(v22, v6);
      double v15 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
      sub_2168EE084((uint64_t)v22);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentSlope(v22, v6);
      double v18 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
      sub_2168EE084((uint64_t)v22);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentSlope(v22, v6);
      double v19 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
      sub_2168EE084((uint64_t)v22);
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftTangentLength(v6);
      uint64_t v20 = v8;
      pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetRightTangentLength(v6);
      uint64_t v21 = v9;
      Knotuint64_t Type = pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetKnotType(v6);
      if (KnotType)
      {
        if (KnotType == 1)
        {
          int v14 = 1;
        }
        else if (KnotType == 2)
        {
          int v14 = 2;
        }
        else
        {
          v22[0] = (uint64_t)"ts/tsTest_TsEvaluator.cpp";
          v22[1] = (uint64_t)"_ConvertToSplineData";
          v22[2] = 193;
          v22[3] = (uint64_t)"SData pxrInternal__aapl__pxrReserved__::_ConvertToSplineData(const TsSpline &)";
          char v23 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected knot type");
        }
      }
      else
      {
        int v14 = 0;
      }
      if (pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetIsDualValued(v6))
      {
        char v16 = 1;
        pxrInternal__aapl__pxrReserved__::TsKeyFrame::GetLeftValue(v22, v6);
        double v17 = sub_21691CF34((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
        sub_2168EE084((uint64_t)v22);
      }
      pxrInternal__aapl__pxrReserved__::TsTest_SplineData::AddKnot(a2, (const pxrInternal__aapl__pxrReserved__::TsTest_SplineData::Knot *)&v13);
    }
    if (v12) {
      sub_216784EC4(v12);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TsTest_SplineData::TsTest_SplineData(a2, a1);
  }
}

void sub_216939E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  sub_2167FB780(v10 + 8, *(void **)(v10 + 16));
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

double *pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(double *this, double a2, double a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_Sample::TsTest_Sample(__n128 *this, __n128 *a2)
{
  __n128 result = *a2;
  *this = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *this = *a2;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TsTest_Sample::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E710, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E710))
  {
    qword_267B8E708 = pxrInternal__aapl__pxrReserved__::VtZero<double>();
    __cxa_guard_release(&qword_267B8E710);
  }
  return &qword_267B8E708;
}

void sub_216939F30(_Unwind_Exception *a1)
{
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<float>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E720))
  {
    double v1 = pxrInternal__aapl__pxrReserved__::VtZero<float>();
    dword_267B8E718 = LODWORD(v1);
    __cxa_guard_release(&qword_267B8E720);
  }
  return &dword_267B8E718;
}

void sub_216939FA8(_Unwind_Exception *a1)
{
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E730, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E730))
  {
    dword_267B8E728 = pxrInternal__aapl__pxrReserved__::VtZero<int>();
    __cxa_guard_release(&qword_267B8E730);
  }
  return &dword_267B8E728;
}

void sub_21693A020(_Unwind_Exception *a1)
{
}

char *pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E740))
  {
    byte_267B8E738 = pxrInternal__aapl__pxrReserved__::VtZero<BOOL>();
    __cxa_guard_release(&qword_267B8E740);
  }
  return &byte_267B8E738;
}

void sub_21693A098(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E758, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E758))
  {
    qword_267B8E748 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2d>();
    unk_267B8E750 = v1;
    __cxa_guard_release(&qword_267B8E758);
  }
  return &qword_267B8E748;
}

void sub_21693A114(_Unwind_Exception *a1)
{
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E768))
  {
    double v1 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2f>();
    dword_267B8E760 = LODWORD(v1);
    *(_DWORD *)algn_267B8E764 = v2;
    __cxa_guard_release(&qword_267B8E768);
  }
  return &dword_267B8E760;
}

void sub_21693A190(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E788, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E788))
  {
    qword_267B8E770 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3d>();
    *(void *)algn_267B8E778 = v1;
    qword_267B8E780 = v2;
    __cxa_guard_release(&qword_267B8E788);
  }
  return &qword_267B8E770;
}

void sub_21693A210(_Unwind_Exception *a1)
{
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E7A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E7A0))
  {
    double v1 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3f>();
    dword_267B8E790 = LODWORD(v1);
    *(_DWORD *)algn_267B8E794 = v2;
    dword_267B8E798 = v3;
    __cxa_guard_release(&qword_267B8E7A0);
  }
  return &dword_267B8E790;
}

void sub_21693A290(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E7C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E7C8))
  {
    qword_267B8E7A8 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4d>();
    unk_267B8E7B0 = v1;
    qword_267B8E7B8 = v2;
    unk_267B8E7C0 = v3;
    __cxa_guard_release(&qword_267B8E7C8);
  }
  return &qword_267B8E7A8;
}

void sub_21693A310(_Unwind_Exception *a1)
{
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E7E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E7E0))
  {
    double v1 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4f>();
    dword_267B8E7D0 = LODWORD(v1);
    *(_DWORD *)algn_267B8E7D4 = v2;
    dword_267B8E7D8 = v3;
    unk_267B8E7DC = v4;
    __cxa_guard_release(&qword_267B8E7E0);
  }
  return &dword_267B8E7D0;
}

void sub_21693A390(_Unwind_Exception *a1)
{
}

int *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E7F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E7F8))
  {
    double v1 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatf>();
    dword_267B8E7E8 = LODWORD(v1);
    *(_DWORD *)algn_267B8E7EC = v2;
    dword_267B8E7F0 = v3;
    unk_267B8E7F4 = v4;
    __cxa_guard_release(&qword_267B8E7F8);
  }
  return &dword_267B8E7E8;
}

void sub_21693A410(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E820))
  {
    qword_267B8E800 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatd>();
    *(void *)algn_267B8E808 = v1;
    qword_267B8E810 = v2;
    unk_267B8E818 = v3;
    __cxa_guard_release(&qword_267B8E820);
  }
  return &qword_267B8E800;
}

void sub_21693A490(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E848))
  {
    qword_267B8E828 = pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2d>();
    unk_267B8E830 = v1;
    qword_267B8E838 = v2;
    unk_267B8E840 = v3;
    __cxa_guard_release(&qword_267B8E848);
  }
  return &qword_267B8E828;
}

void sub_21693A510(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E898))
  {
    pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((uint64_t)&unk_267B8E850);
    __cxa_guard_release(&qword_267B8E898);
  }
  return &unk_267B8E850;
}

void sub_21693A588(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E920, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E920))
  {
    pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((uint64_t)&unk_267B8E8A0);
    __cxa_guard_release(&qword_267B8E920);
  }
  return &unk_267B8E8A0;
}

void sub_21693A600(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E940))
  {
    pxrInternal__aapl__pxrReserved__::VtZero<std::string>(qword_267B8E928);
    __cxa_guard_release(&qword_267B8E940);
  }
  return qword_267B8E928;
}

void sub_21693A678(_Unwind_Exception *a1)
{
}

long long *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E970))
  {
    qword_267B8E968 = 0;
    xmmword_267B8E948 = 0u;
    unk_267B8E958 = 0u;
    __cxa_guard_release(&qword_267B8E970);
  }
  return &xmmword_267B8E948;
}

long long *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E9A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E9A0))
  {
    qword_267B8E998 = 0;
    xmmword_267B8E978 = 0u;
    unk_267B8E988 = 0u;
    __cxa_guard_release(&qword_267B8E9A0);
  }
  return &xmmword_267B8E978;
}

void *pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero()
{
  return &unk_267B8E9A8;
}

void sub_21693A75C()
{
  sub_216779094(v2, "TsLeft");
  sub_216779094(__p, "left");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7515F0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TsRight");
  sub_216779094(__p, "right");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7515F0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_21693A830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693A86C()
{
  sub_216779094(v2, "TsKnotHeld");
  sub_216779094(__p, "held");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751600, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TsKnotLinear");
  sub_216779094(__p, "linear");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751600, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TsKnotBezier");
  sub_216779094(__p, "bezier");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751600, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_21693A998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693A9DC()
{
  sub_216779094(v2, "TsExtrapolationHeld");
  sub_216779094(__p, "held");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751610, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TsExtrapolationLinear");
  sub_216779094(__p, "linear");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C751610, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_21693AAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__14TsTypeRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  uint64_t v2 = std::string::insert(&v14, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TsTypeRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TsTypeRegistry *)operator new(0x30uLL);
      pxrInternal__aapl__pxrReserved__::TsTypeRegistry::TsTypeRegistry(v9, v10, v11);
      unint64_t v13 = atomic_load(a1);
      if (v13)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::TsTypeRegistry *)v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v18 = 84;
          double v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry"
                ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
          char v20 = 0;
          int v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v12);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v18 = 88;
        double v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>:"
              ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
        char v20 = 0;
        int v21 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v12, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TsTypeRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v5;
}

void sub_21693ACC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    void v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>:"
            ":SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::DeleteInstance()
{
  for (uint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
        result;
        uint64_t result = v1)
  {
    uint64_t v1 = result;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == result)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v2();
    }
    sched_yield();
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TsTypeRegistry *pxrInternal__aapl__pxrReserved__::TsTypeRegistry::TsTypeRegistry(pxrInternal__aapl__pxrReserved__::TsTypeRegistry *this, uint64_t a2, char *a3)
{
  *(void *)this = &unk_26C751630;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance, (unint64_t)this))
  {
    v6[0] = "tf/instantiateSingleton.h";
    v6[1] = "SetInstanceConstructed";
    void v6[2] = 56;
    v6[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>:"
            ":SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TsTypeRegistry]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(this);
  return this;
}

void sub_21693AEFC(_Unwind_Exception *a1)
{
  sub_216850320(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TsTypeRegistry::~TsTypeRegistry(pxrInternal__aapl__pxrReserved__::TsTypeRegistry *this)
{
  *(void *)this = &unk_26C751630;
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(this);
  sub_216850320((uint64_t)this + 8);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::TsTypeRegistry::~TsTypeRegistry(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E9B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E9B8))
  {
    std::string v14 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], v12, v13);
    qword_267B8E9B0 = (uint64_t)(sub_2168503EC((void *)(a1 + 8), v14) + 3);
    __cxa_guard_release(&qword_267B8E9B8);
  }
  if (sub_21691CE68(a3))
  {
    int v8 = *(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::VtValue *))qword_267B8E9B0;
    return v8(a2, a3);
  }
  else
  {
    uint64_t v10 = (void *)(a1 + 8);
    v29[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a3, v6, v7);
    double v11 = sub_2168503EC(v10, v29);
    if (!v11)
    {
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(0);
      uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a3, v15, v16);
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(Type, &v31);
      uint64_t v18 = sub_2168E79D8(&v31);
      if (!(v19 & 1 | (unint64_t)v18)
        || (int v21 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v31),
            pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v21),
            v29[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a3, v22, v23),
            (uint64_t v24 = sub_2168503EC(v10, v29)) == 0))
      {
        v29[0] = "ts/typeRegistry.cpp";
        v29[1] = "InitializeDataHolder";
        uint64_t v29[2] = 79;
        v29[3] = "void pxrInternal__aapl__pxrReserved__::TsTypeRegistry::InitializeDataHolder(Ts_PolymorphicDataHolder *,"
                 " const VtValue &)";
        char v30 = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v19, v20, (uint64_t)__p);
        if (v28 >= 0) {
          unint64_t v26 = __p;
        }
        else {
          unint64_t v26 = (void **)__p[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot create keyframes of type %s", (const char *)v26);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::TsTraits<double>::zero();
        pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Ts_TypedData();
      }
      uint64_t v25 = v32;
      if (v32 && atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      double v11 = v24;
    }
    return ((uint64_t (*)(uint64_t, pxrInternal__aapl__pxrReserved__::VtValue *))v11[3])(a2, a3);
  }
}

void sub_21693B204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(atomic_uint **)(v16 - 40);
  if (v18)
  {
    if (atomic_fetch_add_explicit(v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v18 + 8))(v18);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TsTypeRegistry::IsSupportedType(pxrInternal__aapl__pxrReserved__::TsTypeRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return sub_216877FD4((void *)this + 1, a2) != 0;
}

void *sub_21693B2A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21693BC28;
  return result;
}

void *sub_21693B328(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21693BC68;
  return result;
}

void *sub_21693B3A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E238, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21693BCCC;
  return result;
}

void *sub_21693B428(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E250, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21693F078;
  return result;
}

void *sub_21693B4A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_216941E8C;
  return result;
}

void *sub_21693B528(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_216943C84;
  return result;
}

void *sub_21693B5A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21694584C;
  return result;
}

void *sub_21693B628(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_2169478AC;
  return result;
}

void *sub_21693B6A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_216949920;
  return result;
}

void *sub_21693B728(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21694B900;
  return result;
}

void *sub_21693B7A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C570, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21694D8C8;
  return result;
}

void *sub_21693B828(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5A0, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21694FCBC;
  return result;
}

void *sub_21693B8A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_216952964;
  return result;
}

void *sub_21693B928(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_2169554DC;
  return result;
}

void *sub_21693B9A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_216956B24;
  return result;
}

void *sub_21693BA28(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_216958144;
  return result;
}

void *sub_21693BAA8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C258], a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_216959518;
  return result;
}

void *sub_21693BB28(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C747090, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21695A8E8;
  return result;
}

void *sub_21693BBA8(uint64_t a1, const std::type_info *a2, char *a3)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TsTypeRegistry>::_CreateInstance();
  }
  uint64_t v4 = v3 + 8;
  long long v6 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2C0, a2, a3);
  uint64_t result = sub_216850618(v4, v6, (uint64_t)&unk_2174BFD90, &v6);
  result[3] = sub_21695C430;
  return result;
}

void sub_21693BC28(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  sub_21691CEA0(a2);

  pxrInternal__aapl__pxrReserved__::Ts_TypedData<double>::Ts_TypedData();
}

void sub_21693BC68(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  sub_216921C28(a2);

  pxrInternal__aapl__pxrReserved__::Ts_TypedData<float>::Ts_TypedData();
}

void *sub_21693BCA8(void *result)
{
  *uint64_t result = &unk_26C750DC8;
  return result;
}

void *sub_21693BCCC(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unint64_t v3 = (long long *)sub_2168FA45C(a2);

  return sub_21693BD0C(a1, v3);
}

void *sub_21693BD0C(void *a1, long long *a2)
{
  *a1 = &unk_26C751660;
  a1[1] = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  int v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  sub_21693D768((uint64_t)&v11, (uint64_t)a2, a2, (uint64_t)v4, v5);
  long long v6 = operator new(0xA0uLL);
  long long v7 = v12;
  *long long v6 = v11;
  v6[1] = v7;
  long long v11 = 0u;
  long long v12 = 0u;
  *((void *)v6 + 4) = v13;
  uint64_t v13 = 0;
  *(_OWORD *)((char *)v6 + 40) = v14;
  *(_OWORD *)((char *)v6 + 56) = v15;
  long long v14 = 0u;
  long long v15 = 0u;
  *((void *)v6 + 9) = v16;
  uint64_t v16 = 0;
  long long v8 = v18;
  v6[5] = v17;
  v6[6] = v8;
  long long v17 = 0u;
  long long v18 = 0u;
  *((void *)v6 + 14) = v19;
  uint64_t v19 = 0;
  long long v9 = v20;
  *(_OWORD *)((char *)v6 + 136) = v21;
  *(_OWORD *)((char *)v6 + 120) = v9;
  long long v21 = 0u;
  long long v20 = 0u;
  *((void *)v6 + 19) = v22;
  uint64_t v22 = 0;
  a1[2] = v6;
  sub_2168F83DC((uint64_t)&v20);
  sub_2168F83DC((uint64_t)&v17);
  sub_2168F83DC((uint64_t)&v14);
  sub_2168F83DC((uint64_t)&v11);
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void sub_21693BE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21693BE64(uint64_t a1)
{
  return a1;
}

void *sub_21693BEB8(void *a1)
{
  *a1 = &unk_26C751660;
  uint64_t v4 = (void *)a1[2];
  uint64_t v2 = a1 + 2;
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_21693D824((uint64_t)v2, v3);
  }
  return a1;
}

void sub_21693BF08(void *__p)
{
  void *__p = &unk_26C751660;
  uint64_t v4 = (void *)__p[2];
  uint64_t v2 = __p + 2;
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_21693D824((uint64_t)v2, v3);
  }

  operator delete(__p);
}

__n128 sub_21693BF68(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C751660;
  sub_21693D898((void *)(a2 + 16), (_OWORD **)(a1 + 16));
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_21693BFCC@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  int v5 = a1;
  sub_21693D990(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_21693C018(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_21693DAE8((uint64_t)v10, a1, a2);
  sub_21693DCF0((uint64_t)v10, v6, v7, v8, a3, a4);
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC((uint64_t)&v10[i]);
  do
  {
    sub_2168F83DC((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC((uint64_t)&v11);
}

void sub_21693C0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21693EE38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21693C0D4(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21693DAE8((uint64_t)v9, a1, a2);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  long long v5 = v4[1];
  long long v11 = *v4;
  long long v12 = v5;
  uint64_t v6 = *((void *)v4 + 4);
  uint64_t v13 = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      uint64_t v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  a3[1] = &off_26C74EE30;
  sub_2168F8DBC(a3, (uint64_t)&v11);
  sub_2168F83DC((uint64_t)&v11);
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC((uint64_t)&v9[i]);
  do
  {
    sub_2168F83DC((uint64_t)&v9[i]);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC((uint64_t)&v10);
}

void sub_21693C1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC(v2 - 80);
  sub_21693EE38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21693C1E0(double *a1, double *a2)
{
  void v13[2] = *MEMORY[0x263EF8340];
  int v4 = (*(uint64_t (**)(double *))(*(void *)a1 + 56))(a1);
  if (v4 != (*(unsigned int (**)(double *))(*(void *)a2 + 56))(a2) || a1[1] != a2[1]) {
    return 0;
  }
  (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 80))(v13, a1);
  (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 80))(&v12, a2);
  if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v13, &v12, v5)&& (int v6 = (*(uint64_t (**)(double *))(*(void *)a1 + 104))(a1), v6 == (*(unsigned int (**)(double *))(*(void *)a2 + 104))(a2)))
  {
    if ((*(unsigned int (**)(double *))(*(void *)a1 + 104))(a1))
    {
      (*(void (**)(void *__return_ptr, double *))(*(void *)a1 + 120))(v11, a1);
      (*(void (**)(std::type_info *__return_ptr, double *))(*(void *)a2 + 120))(&v10, a2);
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v11, &v10, v9);
      sub_2168EE084((uint64_t)&v10);
      sub_2168EE084((uint64_t)v11);
    }
    else
    {
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_2168EE084((uint64_t)&v12);
  sub_2168EE084((uint64_t)v13);
  return v7;
}

void sub_21693C43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va2);
  sub_2168EE084((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_21693C48C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void sub_21693C494(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    uint64_t v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
            ">>::SetKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21693C544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21693C564(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        std::type_info v10 = v15;
      }
      else {
        std::type_info v10 = v7;
      }
      if (v14 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_21693C6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21693C6E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16) + 40;
  a2[1] = &off_26C74EE30;
  return sub_2168F8DBC(a2, v2);
}

uint64_t sub_21693C700(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  int v4 = sub_21693EE9C(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v20, v4);
  if (v20[1])
  {
    uint64_t v8 = (long long *)sub_2168FA45C(v5);
    sub_21693E46C(a1[2] + 40, v8);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    void v18[2] = 667;
    uint64_t v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<doubl"
             "e>>::SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    int v9 = v17;
    std::type_info v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v11 = v16;
    if (v9 < 0) {
      uint64_t v11 = v10;
    }
    if (v15 >= 0) {
      std::type_info v12 = __p;
    }
    else {
      std::type_info v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  return sub_2168EE084((uint64_t)v20);
}

void sub_21693C8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21693C8F4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  a1[1] = &off_26C74EE30;

  return sub_2168F8DBC(a1, (uint64_t)v2);
}

uint64_t sub_21693C93C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

unsigned char *sub_21693C944(unsigned char *result, int a2)
{
  v3[2] = *MEMORY[0x263EF8340];
  result[68] = a2;
  if (a2)
  {
    uint64_t v2 = result;
    (*(void (**)(void *__return_ptr))(*(void *)result + 80))(v3);
    (*(void (**)(unsigned char *, void *))(*(void *)v2 + 136))(v2, v3);
    return (unsigned char *)sub_2168EE084((uint64_t)v3);
  }
  return result;
}

void sub_21693C9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21693CA18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16) + 40;
  }
  a2[1] = &off_26C74EE30;
  return sub_2168F8DBC(a2, v2);
}

void sub_21693CA40(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1))
  {
    int v4 = sub_21693EE9C(a2);
    char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v22, v4);
    if (v22[1])
    {
      uint64_t v8 = (long long *)sub_2168FA45C(v5);
      sub_21693E46C(a1[2], v8);
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(uint64_t *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v17 = "ts/data.h";
      uint64_t v18 = "SetLeftValue";
      uint64_t v19 = 737;
      long long v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
            ">>::SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
      int v9 = v16;
      std::type_info v10 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      uint64_t v11 = v15;
      if (v9 < 0) {
        uint64_t v11 = v10;
      }
      if (v14 >= 0) {
        std::type_info v12 = __p;
      }
      else {
        std::type_info v12 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    sub_2168EE084((uint64_t)v22);
  }
  else
  {
    char v17 = "ts/data.h";
    uint64_t v18 = "SetLeftValue";
    uint64_t v19 = 725;
    long long v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_21693CC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void sub_21693CC98(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  v9[5] = *MEMORY[0x263EF8340];
  double v7 = 1.0 / (a2[1] - a1[1]);
  (*(void (**)(unint64_t *__return_ptr))(*(void *)a1 + 80))(v9);
  sub_21693EF28((pxrInternal__aapl__pxrReserved__::VtValue *)v9, (uint64_t)v6);
  sub_2168EE084((uint64_t)v9);
  (*(void (**)(unint64_t *__return_ptr, double *))(*(void *)a2 + 120))(v8, a2);
  sub_21693EF28((pxrInternal__aapl__pxrReserved__::VtValue *)v8, (uint64_t)v9);
  sub_2168EE084((uint64_t)v8);
  sub_21693EA94(v9, v6, (uint64_t)v8);
  sub_21693ED50(v8, &v7, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  a3[1] = &off_26C74EE30;
  sub_2168F8DBC(a3, (uint64_t)v5);
  sub_2168F83DC((uint64_t)v5);
  sub_2168F83DC((uint64_t)v8);
  sub_2168F83DC((uint64_t)v9);
  sub_2168F83DC((uint64_t)v6);
}

void sub_21693CDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void sub_21693CE78(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  double v22 = a4;
  uint64_t v6 = sub_2168FA45C(a1);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v19 = *(_OWORD *)v6;
  long long v20 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v21 = v8;
  if (v8)
  {
    int v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v20 + 1)) {
      int v9 = (atomic_ullong *)*((void *)&v20 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = sub_2168FA45C(a2);
  long long v11 = *(_OWORD *)(v10 + 16);
  long long v16 = *(_OWORD *)v10;
  long long v17 = v11;
  uint64_t v12 = *(void *)(v10 + 32);
  uint64_t v18 = v12;
  if (v12)
  {
    uint64_t v13 = (atomic_ullong *)(v12 - 16);
    if (*((void *)&v17 + 1)) {
      uint64_t v13 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
  }
  sub_21693E884(&v22, (unint64_t *)&v16, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
  sub_21693E90C((unint64_t *)&v19, v14, (uint64_t)v15);
  sub_2168F83DC((uint64_t)v14);
  a3[1] = &off_26C74EE30;
  sub_2168F8DBC(a3, (uint64_t)v15);
  sub_2168F83DC((uint64_t)v15);
  sub_2168F83DC((uint64_t)&v16);
  sub_2168F83DC((uint64_t)&v19);
}

void sub_21693CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  sub_2168F83DC(v6 - 64);
  _Unwind_Resume(a1);
}

void sub_21693CFCC(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<doubl"
          "e>>::GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21693D078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693D094(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<doubl"
          "e>>::GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21693D140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21693D15C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  uint64_t v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
          ">>::GetLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21693D204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21693D220()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  uint64_t v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double"
          ">>::GetRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21693D2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693D2E4()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetLeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21693D388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693D3A4()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetRightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21693D448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693D464()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetLeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21693D508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693D524()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetRightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21693D5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21693D5E4()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  uint64_t v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::GetTangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_21693D68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21693D6A8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<double>>"
          "::SetTangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::VtArray<double>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21693D74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21693D768(uint64_t result, uint64_t a2, long long *a3, uint64_t a4, long long *a5)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)double result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v6;
  if (v6)
  {
    long long v7 = (atomic_ullong *)(v6 - 16);
    if (*(void *)(result + 24)) {
      long long v7 = *(atomic_ullong **)(result + 24);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  long long v8 = *a3;
  *(_OWORD *)(result + 56) = a3[1];
  *(_OWORD *)(result + 40) = v8;
  uint64_t v9 = *((void *)a3 + 4);
  *(void *)(result + 72) = v9;
  if (v9)
  {
    uint64_t v10 = (atomic_ullong *)(v9 - 16);
    if (*(void *)(result + 64)) {
      uint64_t v10 = *(atomic_ullong **)(result + 64);
    }
    atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
  }
  long long v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(result + 80) = *(_OWORD *)a4;
  *(_OWORD *)(result + 96) = v11;
  uint64_t v12 = *(void *)(a4 + 32);
  *(void *)(result + 112) = v12;
  if (v12)
  {
    uint64_t v13 = (atomic_ullong *)(v12 - 16);
    if (*(void *)(result + 104)) {
      uint64_t v13 = *(atomic_ullong **)(result + 104);
    }
    atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
  }
  long long v14 = *a5;
  *(_OWORD *)(result + 136) = a5[1];
  *(_OWORD *)(result + 120) = v14;
  uint64_t v15 = *((void *)a5 + 4);
  *(void *)(result + 152) = v15;
  if (v15)
  {
    long long v16 = (atomic_ullong *)(v15 - 16);
    if (*(void *)(result + 144)) {
      long long v16 = *(atomic_ullong **)(result + 144);
    }
    atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_21693D824(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168F83DC((uint64_t)a2 + 120);
    sub_2168F83DC((uint64_t)a2 + 80);
    sub_2168F83DC((uint64_t)a2 + 40);
    sub_2168F83DC((uint64_t)a2);
    operator delete(a2);
  }
}

void *sub_21693D898(void *a1, _OWORD **a2)
{
  char v4 = (char *)operator new(0xA0uLL);
  long long v5 = *a2;
  long long v6 = (*a2)[1];
  *(_OWORD *)char v4 = **a2;
  *((_OWORD *)v4 + 1) = v6;
  uint64_t v7 = *((void *)v5 + 4);
  *((void *)v4 + 4) = v7;
  if (v7)
  {
    long long v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)v4 + 3)) {
      long long v8 = (atomic_ullong *)*((void *)v4 + 3);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  long long v9 = *(_OWORD *)((char *)v5 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)((char *)v5 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  uint64_t v10 = *((void *)v5 + 9);
  *((void *)v4 + 9) = v10;
  if (v10)
  {
    long long v11 = (atomic_ullong *)(v10 - 16);
    if (*((void *)v4 + 8)) {
      long long v11 = (atomic_ullong *)*((void *)v4 + 8);
    }
    atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
  }
  long long v12 = v5[6];
  *((_OWORD *)v4 + 5) = v5[5];
  *((_OWORD *)v4 + 6) = v12;
  uint64_t v13 = *((void *)v5 + 14);
  *((void *)v4 + 14) = v13;
  if (v13)
  {
    long long v14 = (atomic_ullong *)(v13 - 16);
    if (*((void *)v4 + 13)) {
      long long v14 = (atomic_ullong *)*((void *)v4 + 13);
    }
    atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
  }
  long long v15 = *(_OWORD *)((char *)v5 + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)((char *)v5 + 136);
  *(_OWORD *)(v4 + 120) = v15;
  uint64_t v16 = *((void *)v5 + 19);
  *((void *)v4 + 19) = v16;
  if (v16)
  {
    long long v17 = (atomic_ullong *)(v16 - 16);
    if (*((void *)v4 + 18)) {
      long long v17 = (atomic_ullong *)*((void *)v4 + 18);
    }
    atomic_fetch_add_explicit(v17, 1uLL, memory_order_relaxed);
  }
  *a1 = v4;
  return a1;
}

void *sub_21693D990@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x1D0uLL);
  double result = sub_21693D9F4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21693D9E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21693D9F4(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C7517A8;
  sub_21693DAE8((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21693DA44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21693DA58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7517A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21693DA78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7517A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21693DABC(uint64_t a1)
{
  sub_21693EDD8((uint64_t)&v1, a1 + 24);
}

uint64_t sub_21693DAE8(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C7517F8;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v6 = a1 + 56;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  if (a2 && a3)
  {
    sub_21693DE50(a1 + 56, a1 + 120, (uint64_t)a2, a3);
    sub_21693E054(v6);
    if ((*(unsigned int (**)(void *))(*a2 + 152))(a2)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      sub_21693E46C(v5, (long long *)(a2[2] + 40));
    }
  }
  else
  {
    v9[0] = "ts/evalCache.h";
    v9[1] = "_Init";
    v9[2] = 499;
    v9[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::VtArray<double>, true>"
            "::_Init(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::VtArray<dou"
            "ble>, INTERPOLATABLE = true]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_21693DC78(_Unwind_Exception *a1)
{
  sub_21693DC98(v2);
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21693DC98(uint64_t a1)
{
  for (uint64_t i = 344; i != 184; i -= 40)
    sub_2168F83DC(a1 + i);
  do
  {
    sub_2168F83DC(a1 + i);
    i -= 40;
  }
  while (i != 24);
  return a1;
}

void sub_21693DCF0(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 88), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    sub_21693EC1C((unint64_t *)(a1 + 280), (uint64_t)&v15, v11);
  }
  else
  {
    long long v12 = *(_OWORD *)(a1 + 32);
    long long v15 = *(_OWORD *)(a1 + 16);
    long long v16 = v12;
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v17 = v13;
    if (v13)
    {
      long long v14 = (atomic_ullong *)(v13 - 16);
      if (*((void *)&v16 + 1)) {
        long long v14 = (atomic_ullong *)*((void *)&v16 + 1);
      }
      atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
    }
  }
  a5[1] = &off_26C74EE30;
  sub_2168F8DBC(a5, (uint64_t)&v15);
  sub_2168F83DC((uint64_t)&v15);
}

void sub_21693DDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21693DDBC(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<double>>::zero();
  long long v3 = v2[1];
  long long v6 = *v2;
  long long v7 = v3;
  uint64_t v4 = *((void *)v2 + 4);
  uint64_t v8 = v4;
  if (v4)
  {
    uint64_t v5 = (atomic_ullong *)(v4 - 16);
    if (*((void *)&v7 + 1)) {
      uint64_t v5 = (atomic_ullong *)*((void *)&v7 + 1);
    }
    atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
  }
  a1[1] = &off_26C74EE30;
  sub_2168F8DBC(a1, (uint64_t)&v6);
  sub_2168F83DC((uint64_t)&v6);
}

void sub_21693DE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21693DE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  sub_21693E46C(a2, (long long *)(*(void *)(a3 + 16) + 40));
  sub_21693E520(a3, a4, (uint64_t)&v13);
  if ((long long *)(a2 + 40) != &v13)
  {
    sub_2168F83DC(a2 + 40);
    long long v10 = v14;
    *(_OWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 56) = v10;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)(a2 + 72) = v15;
    uint64_t v15 = 0;
  }
  sub_2168F83DC((uint64_t)&v13);
  sub_21693E680(a3, a4, (uint64_t)&v13);
  if ((long long *)(a2 + 80) != &v13)
  {
    sub_2168F83DC(a2 + 80);
    long long v11 = v14;
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v11;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)(a2 + 112) = v15;
    uint64_t v15 = 0;
  }
  sub_2168F83DC((uint64_t)&v13);
  sub_21693E820(a3, a4, (uint64_t)&v13);
  if ((long long *)(a2 + 120) != &v13)
  {
    sub_2168F83DC(a2 + 120);
    long long v12 = v14;
    *(_OWORD *)(a2 + 120) = v13;
    *(_OWORD *)(a2 + 136) = v12;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)(a2 + 152) = v15;
    uint64_t v15 = 0;
  }
  sub_2168F83DC((uint64_t)&v13);
}

void sub_21693E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21693E054(uint64_t a1)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)a1 * 3.0;
  double v5 = v3 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  double v6 = v4 + v3 * -6.0;
  double v7 = *(double *)(a1 + 16);
  double v8 = v5 - v2 - v7 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v8;
  double v9 = (unint64_t *)(a1 + 64);
  sub_21693E46C(a1 + 224, (long long *)(a1 + 64));
  v18[0] = 0xC008000000000000;
  sub_21693E884((double *)v18, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
  v16[0] = 0x4008000000000000;
  sub_21693E884((double *)v16, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  sub_21693E90C(v20, v19, (uint64_t)&v21);
  if ((long long *)(a1 + 264) != &v21)
  {
    sub_2168F83DC(a1 + 264);
    long long v10 = v22;
    *(_OWORD *)(a1 + 264) = v21;
    *(_OWORD *)(a1 + 280) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a1 + 296) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
  sub_2168F83DC((uint64_t)v19);
  sub_2168F83DC((uint64_t)v20);
  v14[0] = 0x4008000000000000;
  sub_21693E884((double *)v14, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  unint64_t v17 = 0xC018000000000000;
  sub_21693E884((double *)&v17, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  sub_21693E90C(v19, v18, (uint64_t)v20);
  uint64_t v15 = 0x4008000000000000;
  sub_21693E884((double *)&v15, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_21693E90C(v20, v16, (uint64_t)&v21);
  if ((long long *)(a1 + 304) != &v21)
  {
    sub_2168F83DC(a1 + 304);
    long long v11 = v22;
    *(_OWORD *)(a1 + 304) = v21;
    *(_OWORD *)(a1 + 320) = v11;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a1 + 336) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
  sub_2168F83DC((uint64_t)v16);
  sub_2168F83DC((uint64_t)v20);
  sub_2168F83DC((uint64_t)v18);
  sub_2168F83DC((uint64_t)v19);
  unint64_t v17 = 0xBFF0000000000000;
  sub_21693E884((double *)&v17, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  uint64_t v15 = 0x4008000000000000;
  sub_21693E884((double *)&v15, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_21693E90C(v18, v16, (uint64_t)v19);
  unint64_t v13 = 0xC008000000000000;
  sub_21693E884((double *)&v13, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
  sub_21693E90C(v19, v14, (uint64_t)v20);
  sub_21693E90C(v20, (unint64_t *)(a1 + 184), (uint64_t)&v21);
  if ((long long *)(a1 + 344) != &v21)
  {
    sub_2168F83DC(a1 + 344);
    long long v12 = v22;
    *(_OWORD *)(a1 + 344) = v21;
    *(_OWORD *)(a1 + 360) = v12;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a1 + 376) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
  sub_2168F83DC((uint64_t)v20);
  sub_2168F83DC((uint64_t)v14);
  sub_2168F83DC((uint64_t)v19);
  sub_2168F83DC((uint64_t)v16);
  sub_2168F83DC((uint64_t)v18);
}

void sub_21693E318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2168F83DC(v27 - 112);
  sub_2168F83DC(v27 - 152);
  sub_2168F83DC((uint64_t)&a10);
  sub_2168F83DC((uint64_t)&a27);
  sub_2168F83DC((uint64_t)&a16);
  sub_2168F83DC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_21693E46C(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      double v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        double v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_21693E504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21693E520(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    uint64_t v16 = 0x3FD5555555555555;
    uint64_t v13 = 0x4000000000000000;
    sub_21693E884((double *)&v13, (unint64_t *)(*(void *)(a1 + 16) + 40), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
    if (*(unsigned char *)(a2 + 68)) {
      long long v8 = *(unint64_t **)(a2 + 16);
    }
    else {
      long long v8 = (unint64_t *)(*(void *)(a2 + 16) + 40);
    }
    sub_21693E90C(v14, v8, (uint64_t)v15);
    sub_21693E884((double *)&v16, v15, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
    sub_2168F83DC((uint64_t)v15);
    sub_2168F83DC((uint64_t)v14);
  }
  else if (v4 == 2)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    long long v6 = (unint64_t *)(v5 + 40);
    sub_21693E884((double *)(a1 + 56), (unint64_t *)(v5 + 120), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15);
    sub_21693E90C(v6, v15, a3);
    sub_2168F83DC((uint64_t)v15);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    long long v10 = *(_OWORD *)(v9 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(a3 + 16) = v10;
    uint64_t v11 = *(void *)(v9 + 72);
    *(void *)(a3 + 32) = v11;
    if (v11)
    {
      long long v12 = (atomic_ullong *)(v11 - 16);
      if (*(void *)(a3 + 24)) {
        long long v12 = *(atomic_ullong **)(a3 + 24);
      }
      atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
    }
  }
}

void sub_21693E63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va1);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21693E680(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    int v5 = *(_DWORD *)(a2 + 64);
    if (v5 == 1) {
      goto LABEL_10;
    }
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(a2 + 16);
      if (*(unsigned char *)(a2 + 68)) {
        uint64_t v7 = *(unint64_t **)(a2 + 16);
      }
      else {
        uint64_t v7 = (unint64_t *)(v6 + 40);
      }
      sub_21693E884((double *)(a2 + 48), (unint64_t *)(v6 + 80), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
      sub_21693EA94(v7, v18, a3);
      sub_2168F83DC((uint64_t)v18);
      return;
    }
    if (v4 == 1)
    {
LABEL_10:
      uint64_t v19 = 0x3FD5555555555555;
      uint64_t v11 = (unint64_t *)(*(void *)(a1 + 16) + 40);
      uint64_t v16 = 0x4000000000000000;
      if (*(unsigned char *)(a2 + 68)) {
        long long v12 = *(unint64_t **)(a2 + 16);
      }
      else {
        long long v12 = (unint64_t *)(*(void *)(a2 + 16) + 40);
      }
      sub_21693E884((double *)&v16, v12, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v17);
      sub_21693E90C(v11, v17, (uint64_t)v18);
      sub_21693E884((double *)&v19, v18, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      sub_2168F83DC((uint64_t)v18);
      sub_2168F83DC((uint64_t)v17);
      return;
    }
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v13 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 16) + 40;
    }
    long long v14 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_OWORD *)(a3 + 16) = v14;
    uint64_t v10 = *(void *)(v13 + 32);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    long long v9 = *(_OWORD *)(v8 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(a3 + 16) = v9;
    uint64_t v10 = *(void *)(v8 + 72);
  }
  *(void *)(a3 + 32) = v10;
  if (v10)
  {
    uint64_t v15 = (atomic_ullong *)(v10 - 16);
    if (*(void *)(a3 + 24)) {
      uint64_t v15 = *(atomic_ullong **)(a3 + 24);
    }
    atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
  }
}

void sub_21693E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21693E820@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(result + 64))
  {
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v3 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v3 = *(void *)(a2 + 16) + 40;
    }
    long long v4 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v3;
    *(_OWORD *)(a3 + 16) = v4;
    uint64_t v5 = *(void *)(v3 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(result + 16);
    long long v7 = *(_OWORD *)(v6 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(a3 + 16) = v7;
    uint64_t v5 = *(void *)(v6 + 72);
  }
  *(void *)(a3 + 32) = v5;
  if (v5)
  {
    uint64_t v8 = *(atomic_ullong **)(a3 + 24);
    long long v9 = (atomic_ullong *)(v5 - 16);
    if (!v8) {
      uint64_t v8 = v9;
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  return result;
}

double sub_21693E884@<D0>(double *a1@<X0>, unint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  sub_2168F9ADC((uint64_t)a3, *a2);
  uint64_t v6 = (double *)a2[4];
  unint64_t v7 = *a2;
  sub_2168F9DFC(a3, v8, v9);
  if (v7)
  {
    uint64_t v11 = (double *)*((void *)a3 + 4);
    uint64_t v12 = 8 * v7;
    do
    {
      double v13 = *v6++;
      double result = *a1 * v13;
      *v11++ = result;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

void sub_21693E8F4(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_21693E90C(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *a1;
  unint64_t v7 = *a2;
  unint64_t v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), unint64_t v8 = *a1, v9))
  {
    sub_2168F9ADC(a3, v8);
    double v12 = pxrInternal__aapl__pxrReserved__::VtZero<double>();
    if (v6)
    {
      double v13 = (double *)a1[4];
      unint64_t v14 = *a1;
      if (v7)
      {
        uint64_t v15 = (double *)a2[4];
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          uint64_t v16 = *(double **)(a3 + 32);
          uint64_t v17 = 8 * v14;
          do
          {
            double v18 = *v13++;
            double v19 = v18;
            double v20 = *v15++;
            *v16++ = v19 + v20;
            v17 -= 8;
          }
          while (v17);
        }
      }
      else
      {
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          unint64_t v26 = *(double **)(a3 + 32);
          uint64_t v27 = 8 * v14;
          do
          {
            double v28 = *v13++;
            *v26++ = v12 + v28;
            v27 -= 8;
          }
          while (v27);
        }
      }
    }
    else
    {
      long long v21 = (double *)a2[4];
      unint64_t v22 = *a2;
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v22)
      {
        uint64_t v23 = *(double **)(a3 + 32);
        uint64_t v24 = 8 * v22;
        do
        {
          double v25 = *v21++;
          *v23++ = v12 + v25;
          v24 -= 8;
        }
        while (v24);
      }
    }
  }
  else
  {
    v29[0] = "vt/array.h";
    v29[1] = "operator+";
    uint64_t v29[2] = 1042;
    v29[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator+(const VtArray<T> &, const VtArray<T> &) [T = double]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "+");
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_21693EA7C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_21693EA94(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *a1;
  unint64_t v7 = *a2;
  unint64_t v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), unint64_t v8 = *a1, v9))
  {
    sub_2168F9ADC(a3, v8);
    double v12 = pxrInternal__aapl__pxrReserved__::VtZero<double>();
    if (v6)
    {
      double v13 = (double *)a1[4];
      unint64_t v14 = *a1;
      if (v7)
      {
        uint64_t v15 = (double *)a2[4];
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          uint64_t v16 = *(double **)(a3 + 32);
          uint64_t v17 = 8 * v14;
          do
          {
            double v18 = *v13++;
            double v19 = v18;
            double v20 = *v15++;
            *v16++ = v19 - v20;
            v17 -= 8;
          }
          while (v17);
        }
      }
      else
      {
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v14)
        {
          unint64_t v26 = *(double **)(a3 + 32);
          uint64_t v27 = 8 * v14;
          do
          {
            double v28 = *v13++;
            *v26++ = v28 - v12;
            v27 -= 8;
          }
          while (v27);
        }
      }
    }
    else
    {
      long long v21 = (double *)a2[4];
      unint64_t v22 = *a2;
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v22)
      {
        uint64_t v23 = *(double **)(a3 + 32);
        uint64_t v24 = 8 * v22;
        do
        {
          double v25 = *v21++;
          *v23++ = v12 - v25;
          v24 -= 8;
        }
        while (v24);
      }
    }
  }
  else
  {
    v29[0] = "vt/array.h";
    v29[1] = "operator-";
    uint64_t v29[2] = 1043;
    v29[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator-(const VtArray<T> &, const VtArray<T> &) [T = double]";
    char v30 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "-");
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_21693EC04(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_21693EC1C(unint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v10 = a3;
  sub_21693E884(&v10, a1 + 15, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  sub_21693E90C(v5, a1 + 10, (uint64_t)v6);
  sub_21693E884(&v10, v6, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
  sub_21693E90C(v7, a1 + 5, (uint64_t)v8);
  sub_21693E884(&v10, v8, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v9);
  sub_21693E90C(v9, a1, a2);
  sub_2168F83DC((uint64_t)v9);
  sub_2168F83DC((uint64_t)v8);
  sub_2168F83DC((uint64_t)v7);
  sub_2168F83DC((uint64_t)v6);
  sub_2168F83DC((uint64_t)v5);
}

void sub_21693ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_2168F83DC(v19 - 64);
  sub_2168F83DC(v19 - 104);
  sub_2168F83DC((uint64_t)&a19);
  sub_2168F83DC((uint64_t)&a14);
  sub_2168F83DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_21693ED50@<D0>(unint64_t *a1@<X0>, double *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  sub_2168F9ADC((uint64_t)a3, *a1);
  unint64_t v6 = (double *)a1[4];
  unint64_t v7 = *a1;
  sub_2168F9DFC(a3, v8, v9);
  if (v7)
  {
    uint64_t v11 = (double *)*((void *)a3 + 4);
    uint64_t v12 = 8 * v7;
    do
    {
      double v13 = *v6++;
      double result = v13 * *a2;
      *v11++ = result;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

void sub_21693EDC0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_21693EDD8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC(a2 + i);
  do
  {
    sub_2168F83DC(a2 + i);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC(a2 + 16);
}

uint64_t sub_21693EE38(uint64_t a1)
{
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC(a1 + i);
  do
  {
    sub_2168F83DC(a1 + i);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC(a1 + 16);
  return a1;
}

std::type_info *sub_21693EE9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_2168F9F4C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74E238, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21693EF28@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_2168F9F4C(a1))
  {
    return sub_21693EFC4(a1, a2);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FA4F0, (uint64_t)&stru_26C74E238);
    long long v5 = *(_OWORD *)(result + 16);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_OWORD *)(a2 + 16) = v5;
    uint64_t v6 = *(void *)(result + 32);
    *(void *)(a2 + 32) = v6;
    if (v6)
    {
      unint64_t v7 = (atomic_ullong *)(v6 - 16);
      if (*(void *)(a2 + 24)) {
        unint64_t v7 = *(atomic_ullong **)(a2 + 24);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t sub_21693EFC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168FA3C8(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_21693F060(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void *sub_21693F078(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (long long *)sub_2168F8EBC(a2);

  return sub_21693F0B8(a1, v3);
}

void *sub_21693F0B8(void *a1, long long *a2)
{
  *a1 = &unk_26C751830;
  a1[1] = 0;
  long long v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  sub_21693D768((uint64_t)&v11, (uint64_t)a2, a2, (uint64_t)v4, v5);
  uint64_t v6 = operator new(0xA0uLL);
  long long v7 = v12;
  *uint64_t v6 = v11;
  v6[1] = v7;
  long long v11 = 0u;
  long long v12 = 0u;
  *((void *)v6 + 4) = v13;
  uint64_t v13 = 0;
  *(_OWORD *)((char *)v6 + 40) = v14;
  *(_OWORD *)((char *)v6 + 56) = v15;
  long long v14 = 0u;
  long long v15 = 0u;
  *((void *)v6 + 9) = v16;
  uint64_t v16 = 0;
  long long v8 = v18;
  unint64_t v6[5] = v17;
  v6[6] = v8;
  long long v17 = 0u;
  long long v18 = 0u;
  *((void *)v6 + 14) = v19;
  uint64_t v19 = 0;
  long long v9 = v20;
  *(_OWORD *)((char *)v6 + 136) = v21;
  *(_OWORD *)((char *)v6 + 120) = v9;
  long long v21 = 0u;
  long long v20 = 0u;
  *((void *)v6 + 19) = v22;
  uint64_t v22 = 0;
  a1[2] = v6;
  sub_2168F83DC((uint64_t)&v20);
  sub_2168F83DC((uint64_t)&v17);
  sub_2168F83DC((uint64_t)&v14);
  sub_2168F83DC((uint64_t)&v11);
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void sub_21693F1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21693F210(uint64_t a1)
{
  return a1;
}

void *sub_21693F264(void *a1)
{
  *a1 = &unk_26C751830;
  long long v4 = (void *)a1[2];
  double v2 = a1 + 2;
  uint64_t v3 = v4;
  *double v2 = 0;
  if (v4) {
    sub_216940784((uint64_t)v2, v3);
  }
  return a1;
}

void sub_21693F2B4(void *__p)
{
  void *__p = &unk_26C751830;
  long long v4 = (void *)__p[2];
  double v2 = __p + 2;
  uint64_t v3 = v4;
  *double v2 = 0;
  if (v4) {
    sub_216940784((uint64_t)v2, v3);
  }

  operator delete(__p);
}

__n128 sub_21693F314(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C751830;
  sub_21693D898((void *)(a2 + 16), (_OWORD **)(a1 + 16));
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_21693F378@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_2169407F8(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_21693F3C4(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_216940950((uint64_t)v10, a1, a2);
  sub_216940B58((uint64_t)v10, v6, v7, v8, a3, a4);
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC((uint64_t)&v10[i]);
  do
  {
    sub_2168F83DC((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC((uint64_t)&v11);
}

void sub_21693F464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216941C4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21693F480(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_216940950((uint64_t)v9, a1, a2);
  long long v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  long long v5 = v4[1];
  long long v11 = *v4;
  long long v12 = v5;
  uint64_t v6 = *((void *)v4 + 4);
  uint64_t v13 = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v12 + 1)) {
      uint64_t v7 = (atomic_ullong *)*((void *)&v12 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  a3[1] = &off_26C74ECC0;
  sub_2168F8DBC(a3, (uint64_t)&v11);
  sub_2168F83DC((uint64_t)&v11);
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC((uint64_t)&v9[i]);
  do
  {
    sub_2168F83DC((uint64_t)&v9[i]);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC((uint64_t)&v10);
}

void sub_21693F55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC(v2 - 80);
  sub_216941C4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21693F58C(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    uint64_t v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
            ">::SetKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21693F63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21693F65C(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        uint64_t v10 = v15;
      }
      else {
        uint64_t v10 = v7;
      }
      if (v14 >= 0) {
        long long v11 = __p;
      }
      else {
        long long v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_21693F7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21693F7DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16) + 40;
  a2[1] = &off_26C74ECC0;
  return sub_2168F8DBC(a2, v2);
}

uint64_t sub_21693F7F8(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  long long v4 = sub_216941CB0(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v20, v4);
  if (v20[1])
  {
    long long v8 = (long long *)sub_2168F8EBC(v5);
    sub_2169412D4(a1[2] + 40, v8);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    void v18[2] = 667;
    uint64_t v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float"
             ">>::SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    int v9 = v17;
    uint64_t v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    long long v11 = v16;
    if (v9 < 0) {
      long long v11 = v10;
    }
    if (v15 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  return sub_2168EE084((uint64_t)v20);
}

void sub_21693F99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21693F9EC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  a1[1] = &off_26C74ECC0;

  return sub_2168F8DBC(a1, (uint64_t)v2);
}

void *sub_21693FA34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16) + 40;
  }
  a2[1] = &off_26C74ECC0;
  return sub_2168F8DBC(a2, v2);
}

void sub_21693FA5C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1))
  {
    long long v4 = sub_216941CB0(a2);
    char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v22, v4);
    if (v22[1])
    {
      long long v8 = (long long *)sub_2168F8EBC(v5);
      sub_2169412D4(a1[2], v8);
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(uint64_t *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v17 = "ts/data.h";
      uint64_t v18 = "SetLeftValue";
      uint64_t v19 = 737;
      long long v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
            ">::SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
      int v9 = v16;
      uint64_t v10 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      long long v11 = v15;
      if (v9 < 0) {
        long long v11 = v10;
      }
      if (v14 >= 0) {
        long long v12 = __p;
      }
      else {
        long long v12 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    sub_2168EE084((uint64_t)v22);
  }
  else
  {
    char v17 = "ts/data.h";
    uint64_t v18 = "SetLeftValue";
    uint64_t v19 = 725;
    long long v20 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_21693FC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void sub_21693FCB4(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  unint64_t v9[5] = *MEMORY[0x263EF8340];
  double v7 = 1.0 / (a2[1] - a1[1]);
  (*(void (**)(unint64_t *__return_ptr))(*(void *)a1 + 80))(v9);
  sub_216941D3C((pxrInternal__aapl__pxrReserved__::VtValue *)v9, (uint64_t)v6);
  sub_2168EE084((uint64_t)v9);
  (*(void (**)(unint64_t *__return_ptr, double *))(*(void *)a2 + 120))(v8, a2);
  sub_216941D3C((pxrInternal__aapl__pxrReserved__::VtValue *)v8, (uint64_t)v9);
  sub_2168EE084((uint64_t)v8);
  sub_2169418A0(v9, v6, (uint64_t)v8);
  sub_216941B5C(v8, &v7, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  a3[1] = &off_26C74ECC0;
  sub_2168F8DBC(a3, (uint64_t)v5);
  sub_2168F83DC((uint64_t)v5);
  sub_2168F83DC((uint64_t)v8);
  sub_2168F83DC((uint64_t)v9);
  sub_2168F83DC((uint64_t)v6);
}

void sub_21693FDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void sub_21693FE94(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  double v22 = a4;
  uint64_t v6 = sub_2168F8EBC(a1);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v19 = *(_OWORD *)v6;
  long long v20 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v21 = v8;
  if (v8)
  {
    int v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v20 + 1)) {
      int v9 = (atomic_ullong *)*((void *)&v20 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = sub_2168F8EBC(a2);
  long long v11 = *(_OWORD *)(v10 + 16);
  long long v16 = *(_OWORD *)v10;
  long long v17 = v11;
  uint64_t v12 = *(void *)(v10 + 32);
  uint64_t v18 = v12;
  if (v12)
  {
    uint64_t v13 = (atomic_ullong *)(v12 - 16);
    if (*((void *)&v17 + 1)) {
      uint64_t v13 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
  }
  sub_216941688(&v22, (unint64_t *)&v16, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
  sub_216941718((unint64_t *)&v19, v14, (uint64_t)v15);
  sub_2168F83DC((uint64_t)v14);
  a3[1] = &off_26C74ECC0;
  sub_2168F8DBC(a3, (uint64_t)v15);
  sub_2168F83DC((uint64_t)v15);
  sub_2168F83DC((uint64_t)&v16);
  sub_2168F83DC((uint64_t)&v19);
}

void sub_21693FF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  sub_2168F83DC(v6 - 64);
  _Unwind_Resume(a1);
}

void sub_21693FFE8(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float"
          ">>::GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216940094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169400B0(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float"
          ">>::GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694015C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216940178()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  uint64_t v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
          ">::GetLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216940220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694023C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  uint64_t v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>"
          ">::GetRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_2169402E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216940300()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetLeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169403A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169403C0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetRightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216940464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216940480()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetLeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216940524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216940540()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetRightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169405E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216940600()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  uint64_t v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":GetTangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_2169406A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169406C4()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::VtArray<float>>:"
          ":SetTangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::VtArray<float>]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216940768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216940784(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168F83DC((uint64_t)a2 + 120);
    sub_2168F83DC((uint64_t)a2 + 80);
    sub_2168F83DC((uint64_t)a2 + 40);
    sub_2168F83DC((uint64_t)a2);
    operator delete(a2);
  }
}

void *sub_2169407F8@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x1D0uLL);
  double result = sub_21694085C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216940848(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21694085C(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C751978;
  sub_216940950((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_2169408AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2169408C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169408E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751978;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216940924(uint64_t a1)
{
  sub_216941BEC((uint64_t)&v1, a1 + 24);
}

uint64_t sub_216940950(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C7519C8;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v6 = a1 + 56;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  if (a2 && a3)
  {
    sub_216940CB8(a1 + 56, a1 + 120, (uint64_t)a2, a3);
    sub_216940EBC(v6);
    if ((*(unsigned int (**)(void *))(*a2 + 152))(a2)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      sub_2169412D4(v5, (long long *)(a2[2] + 40));
    }
  }
  else
  {
    v9[0] = "ts/evalCache.h";
    v9[1] = "_Init";
    v9[2] = 499;
    v9[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::VtArray<float>, true>:"
            ":_Init(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::VtArray<floa"
            "t>, INTERPOLATABLE = true]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_216940AE0(_Unwind_Exception *a1)
{
  sub_216940B00(v2);
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216940B00(uint64_t a1)
{
  for (uint64_t i = 344; i != 184; i -= 40)
    sub_2168F83DC(a1 + i);
  do
  {
    sub_2168F83DC(a1 + i);
    i -= 40;
  }
  while (i != 24);
  return a1;
}

void sub_216940B58(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 88), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    sub_216941A28((unint64_t *)(a1 + 280), (uint64_t)&v15, v11);
  }
  else
  {
    long long v12 = *(_OWORD *)(a1 + 32);
    long long v15 = *(_OWORD *)(a1 + 16);
    long long v16 = v12;
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v17 = v13;
    if (v13)
    {
      char v14 = (atomic_ullong *)(v13 - 16);
      if (*((void *)&v16 + 1)) {
        char v14 = (atomic_ullong *)*((void *)&v16 + 1);
      }
      atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
    }
  }
  a5[1] = &off_26C74ECC0;
  sub_2168F8DBC(a5, (uint64_t)&v15);
  sub_2168F83DC((uint64_t)&v15);
}

void sub_216940C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216940C24(void *a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::VtArray<float>>::zero();
  long long v3 = v2[1];
  long long v6 = *v2;
  long long v7 = v3;
  uint64_t v4 = *((void *)v2 + 4);
  uint64_t v8 = v4;
  if (v4)
  {
    uint64_t v5 = (atomic_ullong *)(v4 - 16);
    if (*((void *)&v7 + 1)) {
      uint64_t v5 = (atomic_ullong *)*((void *)&v7 + 1);
    }
    atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
  }
  a1[1] = &off_26C74ECC0;
  sub_2168F8DBC(a1, (uint64_t)&v6);
  sub_2168F83DC((uint64_t)&v6);
}

void sub_216940CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216940CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  sub_2169412D4(a2, (long long *)(*(void *)(a3 + 16) + 40));
  sub_216941388(a3, a4, (uint64_t)&v13);
  if ((long long *)(a2 + 40) != &v13)
  {
    sub_2168F83DC(a2 + 40);
    long long v10 = v14;
    *(_OWORD *)(a2 + 40) = v13;
    *(_OWORD *)(a2 + 56) = v10;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)(a2 + 72) = v15;
    uint64_t v15 = 0;
  }
  sub_2168F83DC((uint64_t)&v13);
  sub_2169414E8(a3, a4, (uint64_t)&v13);
  if ((long long *)(a2 + 80) != &v13)
  {
    sub_2168F83DC(a2 + 80);
    long long v11 = v14;
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v11;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)(a2 + 112) = v15;
    uint64_t v15 = 0;
  }
  sub_2168F83DC((uint64_t)&v13);
  sub_21693E820(a3, a4, (uint64_t)&v13);
  if ((long long *)(a2 + 120) != &v13)
  {
    sub_2168F83DC(a2 + 120);
    long long v12 = v14;
    *(_OWORD *)(a2 + 120) = v13;
    *(_OWORD *)(a2 + 136) = v12;
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)(a2 + 152) = v15;
    uint64_t v15 = 0;
  }
  sub_2168F83DC((uint64_t)&v13);
}

void sub_216940E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216940EBC(uint64_t a1)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)a1 * 3.0;
  double v5 = v3 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  double v6 = v4 + v3 * -6.0;
  double v7 = *(double *)(a1 + 16);
  double v8 = v5 - v2 - v7 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v8;
  double v9 = (unint64_t *)(a1 + 64);
  sub_2169412D4(a1 + 224, (long long *)(a1 + 64));
  v18[0] = 0xC008000000000000;
  sub_216941688((double *)v18, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
  v16[0] = 0x4008000000000000;
  sub_216941688((double *)v16, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  sub_216941718(v20, v19, (uint64_t)&v21);
  if ((long long *)(a1 + 264) != &v21)
  {
    sub_2168F83DC(a1 + 264);
    long long v10 = v22;
    *(_OWORD *)(a1 + 264) = v21;
    *(_OWORD *)(a1 + 280) = v10;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a1 + 296) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
  sub_2168F83DC((uint64_t)v19);
  sub_2168F83DC((uint64_t)v20);
  v14[0] = 0x4008000000000000;
  sub_216941688((double *)v14, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
  unint64_t v17 = 0xC018000000000000;
  sub_216941688((double *)&v17, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  sub_216941718(v19, v18, (uint64_t)v20);
  uint64_t v15 = 0x4008000000000000;
  sub_216941688((double *)&v15, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_216941718(v20, v16, (uint64_t)&v21);
  if ((long long *)(a1 + 304) != &v21)
  {
    sub_2168F83DC(a1 + 304);
    long long v11 = v22;
    *(_OWORD *)(a1 + 304) = v21;
    *(_OWORD *)(a1 + 320) = v11;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a1 + 336) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
  sub_2168F83DC((uint64_t)v16);
  sub_2168F83DC((uint64_t)v20);
  sub_2168F83DC((uint64_t)v18);
  sub_2168F83DC((uint64_t)v19);
  unint64_t v17 = 0xBFF0000000000000;
  sub_216941688((double *)&v17, v9, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
  uint64_t v15 = 0x4008000000000000;
  sub_216941688((double *)&v15, (unint64_t *)(a1 + 104), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
  sub_216941718(v18, v16, (uint64_t)v19);
  unint64_t v13 = 0xC008000000000000;
  sub_216941688((double *)&v13, (unint64_t *)(a1 + 144), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
  sub_216941718(v19, v14, (uint64_t)v20);
  sub_216941718(v20, (unint64_t *)(a1 + 184), (uint64_t)&v21);
  if ((long long *)(a1 + 344) != &v21)
  {
    sub_2168F83DC(a1 + 344);
    long long v12 = v22;
    *(_OWORD *)(a1 + 344) = v21;
    *(_OWORD *)(a1 + 360) = v12;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a1 + 376) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
  sub_2168F83DC((uint64_t)v20);
  sub_2168F83DC((uint64_t)v14);
  sub_2168F83DC((uint64_t)v19);
  sub_2168F83DC((uint64_t)v16);
  sub_2168F83DC((uint64_t)v18);
}

void sub_216941180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2168F83DC(v27 - 112);
  sub_2168F83DC(v27 - 152);
  sub_2168F83DC((uint64_t)&a10);
  sub_2168F83DC((uint64_t)&a27);
  sub_2168F83DC((uint64_t)&a16);
  sub_2168F83DC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_2169412D4(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      double v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        double v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_21694136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216941388(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    uint64_t v16 = 0x3FD5555555555555;
    uint64_t v13 = 0x4000000000000000;
    sub_216941688((double *)&v13, (unint64_t *)(*(void *)(a1 + 16) + 40), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
    if (*(unsigned char *)(a2 + 68)) {
      long long v8 = *(unint64_t **)(a2 + 16);
    }
    else {
      long long v8 = (unint64_t *)(*(void *)(a2 + 16) + 40);
    }
    sub_216941718(v14, v8, (uint64_t)v15);
    sub_216941688((double *)&v16, v15, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
    sub_2168F83DC((uint64_t)v15);
    sub_2168F83DC((uint64_t)v14);
  }
  else if (v4 == 2)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    long long v6 = (unint64_t *)(v5 + 40);
    sub_216941688((double *)(a1 + 56), (unint64_t *)(v5 + 120), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15);
    sub_216941718(v6, v15, a3);
    sub_2168F83DC((uint64_t)v15);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    long long v10 = *(_OWORD *)(v9 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(a3 + 16) = v10;
    uint64_t v11 = *(void *)(v9 + 72);
    *(void *)(a3 + 32) = v11;
    if (v11)
    {
      long long v12 = (atomic_ullong *)(v11 - 16);
      if (*(void *)(a3 + 24)) {
        long long v12 = *(atomic_ullong **)(a3 + 24);
      }
      atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
    }
  }
}

void sub_2169414A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va1);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169414E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    int v5 = *(_DWORD *)(a2 + 64);
    if (v5 == 1) {
      goto LABEL_10;
    }
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(a2 + 16);
      if (*(unsigned char *)(a2 + 68)) {
        uint64_t v7 = *(unint64_t **)(a2 + 16);
      }
      else {
        uint64_t v7 = (unint64_t *)(v6 + 40);
      }
      sub_216941688((double *)(a2 + 48), (unint64_t *)(v6 + 80), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
      sub_2169418A0(v7, v18, a3);
      sub_2168F83DC((uint64_t)v18);
      return;
    }
    if (v4 == 1)
    {
LABEL_10:
      uint64_t v19 = 0x3FD5555555555555;
      uint64_t v11 = (unint64_t *)(*(void *)(a1 + 16) + 40);
      uint64_t v16 = 0x4000000000000000;
      if (*(unsigned char *)(a2 + 68)) {
        long long v12 = *(unint64_t **)(a2 + 16);
      }
      else {
        long long v12 = (unint64_t *)(*(void *)(a2 + 16) + 40);
      }
      sub_216941688((double *)&v16, v12, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v17);
      sub_216941718(v11, v17, (uint64_t)v18);
      sub_216941688((double *)&v19, v18, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      sub_2168F83DC((uint64_t)v18);
      sub_2168F83DC((uint64_t)v17);
      return;
    }
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v13 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 16) + 40;
    }
    long long v14 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_OWORD *)(a3 + 16) = v14;
    uint64_t v10 = *(void *)(v13 + 32);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    long long v9 = *(_OWORD *)(v8 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(a3 + 16) = v9;
    uint64_t v10 = *(void *)(v8 + 72);
  }
  *(void *)(a3 + 32) = v10;
  if (v10)
  {
    uint64_t v15 = (atomic_ullong *)(v10 - 16);
    if (*(void *)(a3 + 24)) {
      uint64_t v15 = *(atomic_ullong **)(a3 + 24);
    }
    atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
  }
}

void sub_216941640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216941688(double *a1@<X0>, unint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  sub_2168F8250((uint64_t)a3, *a2);
  uint64_t v6 = (float *)a2[4];
  unint64_t v7 = *a2;
  sub_2168F8710(a3, v8, v9);
  if (v7)
  {
    uint64_t v10 = (float *)*((void *)a3 + 4);
    double v11 = *a1;
    uint64_t v12 = 4 * v7;
    do
    {
      float v13 = *v6++;
      float v14 = v11 * v13;
      *v10++ = v14;
      v12 -= 4;
    }
    while (v12);
  }
}

void sub_216941700(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_216941718(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *a1;
  unint64_t v7 = *a2;
  unint64_t v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), unint64_t v8 = *a1, v9))
  {
    sub_2168F8250(a3, v8);
    double v12 = pxrInternal__aapl__pxrReserved__::VtZero<float>();
    float v13 = *(float *)&v12;
    if (v6)
    {
      float v14 = (float *)a1[4];
      unint64_t v15 = *a1;
      if (v7)
      {
        uint64_t v16 = (float *)a2[4];
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v15)
        {
          unint64_t v17 = *(float **)(a3 + 32);
          uint64_t v18 = 4 * v15;
          do
          {
            float v19 = *v14++;
            float v20 = v19;
            float v21 = *v16++;
            *v17++ = v20 + v21;
            v18 -= 4;
          }
          while (v18);
        }
      }
      else
      {
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v15)
        {
          uint64_t v27 = *(float **)(a3 + 32);
          uint64_t v28 = 4 * v15;
          do
          {
            float v29 = *v14++;
            *v27++ = v13 + v29;
            v28 -= 4;
          }
          while (v28);
        }
      }
    }
    else
    {
      long long v22 = (float *)a2[4];
      unint64_t v23 = *a2;
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v23)
      {
        uint64_t v24 = *(float **)(a3 + 32);
        uint64_t v25 = 4 * v23;
        do
        {
          float v26 = *v22++;
          *v24++ = v13 + v26;
          v25 -= 4;
        }
        while (v25);
      }
    }
  }
  else
  {
    v30[0] = "vt/array.h";
    v30[1] = "operator+";
    uint64_t v30[2] = 1042;
    v30[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator+(const VtArray<T> &, const VtArray<T> &) [T = float]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v30, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "+");
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_216941888(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_2169418A0(unint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *a1;
  unint64_t v7 = *a2;
  unint64_t v8 = *a2;
  if (!*a1 || (v7 ? (v9 = v6 == v7) : (v9 = 1), unint64_t v8 = *a1, v9))
  {
    sub_2168F8250(a3, v8);
    double v12 = pxrInternal__aapl__pxrReserved__::VtZero<float>();
    float v13 = *(float *)&v12;
    if (v6)
    {
      float v14 = (float *)a1[4];
      unint64_t v15 = *a1;
      if (v7)
      {
        uint64_t v16 = (float *)a2[4];
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v15)
        {
          unint64_t v17 = *(float **)(a3 + 32);
          uint64_t v18 = 4 * v15;
          do
          {
            float v19 = *v14++;
            float v20 = v19;
            float v21 = *v16++;
            *v17++ = v20 - v21;
            v18 -= 4;
          }
          while (v18);
        }
      }
      else
      {
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
        if (v15)
        {
          uint64_t v27 = *(float **)(a3 + 32);
          uint64_t v28 = 4 * v15;
          do
          {
            float v29 = *v14++;
            *v27++ = v29 - v13;
            v28 -= 4;
          }
          while (v28);
        }
      }
    }
    else
    {
      long long v22 = (float *)a2[4];
      unint64_t v23 = *a2;
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v10, v11);
      if (v23)
      {
        uint64_t v24 = *(float **)(a3 + 32);
        uint64_t v25 = 4 * v23;
        do
        {
          float v26 = *v22++;
          *v24++ = v13 - v26;
          v25 -= 4;
        }
        while (v25);
      }
    }
  }
  else
  {
    v30[0] = "vt/array.h";
    v30[1] = "operator-";
    uint64_t v30[2] = 1043;
    v30[3] = "VtArray<T> pxrInternal__aapl__pxrReserved__::operator-(const VtArray<T> &, const VtArray<T> &) [T = float]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v30, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-conforming inputs for operator %s", "-");
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

void sub_216941A10(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_216941A28(unint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v10 = a3;
  sub_216941688(&v10, a1 + 15, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
  sub_216941718(v5, a1 + 10, (uint64_t)v6);
  sub_216941688(&v10, v6, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
  sub_216941718(v7, a1 + 5, (uint64_t)v8);
  sub_216941688(&v10, v8, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v9);
  sub_216941718(v9, a1, a2);
  sub_2168F83DC((uint64_t)v9);
  sub_2168F83DC((uint64_t)v8);
  sub_2168F83DC((uint64_t)v7);
  sub_2168F83DC((uint64_t)v6);
  sub_2168F83DC((uint64_t)v5);
}

void sub_216941AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_2168F83DC(v19 - 64);
  sub_2168F83DC(v19 - 104);
  sub_2168F83DC((uint64_t)&a19);
  sub_2168F83DC((uint64_t)&a14);
  sub_2168F83DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_216941B5C(unint64_t *a1@<X0>, double *a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  sub_2168F8250((uint64_t)a3, *a1);
  unint64_t v6 = (float *)a1[4];
  unint64_t v7 = *a1;
  sub_2168F8710(a3, v8, v9);
  if (v7)
  {
    double v10 = (float *)*((void *)a3 + 4);
    double v11 = *a2;
    uint64_t v12 = 4 * v7;
    do
    {
      float v13 = *v6++;
      float v14 = v11 * v13;
      *v10++ = v14;
      v12 -= 4;
    }
    while (v12);
  }
}

void sub_216941BD4(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_216941BEC(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC(a2 + i);
  do
  {
    sub_2168F83DC(a2 + i);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC(a2 + 16);
}

uint64_t sub_216941C4C(uint64_t a1)
{
  for (uint64_t i = 400; i != 240; i -= 40)
    sub_2168F83DC(a1 + i);
  do
  {
    sub_2168F83DC(a1 + i);
    i -= 40;
  }
  while (i != 80);
  sub_2168F83DC(a1 + 16);
  return a1;
}

std::type_info *sub_216941CB0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_2168F8860(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74E250, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216941D3C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_2168F8860(a1))
  {
    return sub_216941DD8(a1, a2);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168F9008, (uint64_t)&stru_26C74E250);
    long long v5 = *(_OWORD *)(result + 16);
    *(_OWORD *)a2 = *(_OWORD *)result;
    *(_OWORD *)(a2 + 16) = v5;
    uint64_t v6 = *(void *)(result + 32);
    *(void *)(a2 + 32) = v6;
    if (v6)
    {
      unint64_t v7 = (atomic_ullong *)(v6 - 16);
      if (*(void *)(a2 + 24)) {
        unint64_t v7 = *(atomic_ullong **)(a2 + 24);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t sub_216941DD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168F8E28(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216941E74(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void *sub_216941E8C(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (long long *)sub_216941ECC(a2);

  return sub_216941F60(a1, v3);
}

uint64_t sub_216941ECC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216943B00(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2d>::Invoke, (uint64_t)&stru_26C74C6F0);
  }
}

void *sub_216941F60(void *a1, long long *a2)
{
  *a1 = &unk_26C751A00;
  a1[1] = 0;
  int v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  long long v8 = *a2;
  long long v9 = *a2;
  long long v10 = *(_OWORD *)v4;
  long long v11 = *(_OWORD *)v5;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = v8;
  v6[1] = v9;
  void v6[2] = v10;
  v6[3] = v11;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_216941FF8(void *a1)
{
  *a1 = &unk_26C751A00;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216942048(void *__p)
{
  void *__p = &unk_26C751A00;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_2169420A8(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C751A00;
  int v4 = operator new(0x40uLL);
  uint64_t v5 = *(long long **)(a1 + 16);
  long long v6 = *v5;
  long long v7 = v5[1];
  long long v8 = v5[3];
  v4[2] = v5[2];
  uint64_t v4[3] = v8;
  _OWORD *v4 = v6;
  v4[1] = v7;
  *(void *)(a2 + 16) = v4;
  uint64_t v9 = *(void *)(a1 + 62);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 62) = v9;
  return result;
}

double sub_216942120@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_21694340C(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

unsigned int *sub_21694216C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>, double a4@<D0>)
{
  sub_216943540((uint64_t)v16, a1, a2);
  if (v16[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v18, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    float64x2_t v13 = vaddq_f64(v18[6], vmulq_n_f64(vaddq_f64(v18[7], vmulq_n_f64(vaddq_f64(v18[8], vmulq_n_f64(v18[9], v12)), v12)), v12));
  }
  else
  {
    float64x2_t v13 = v17;
  }
  float64x2_t v15 = v13;
  a3[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  double result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)double result = v15;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void *sub_216942248@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_216943540((uint64_t)&v8, a1, a2);
  int v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  a3[1] = (char *)&off_26C74E420 + 2;
  double result = operator new(0x18uLL);
  *(void *)double result = v5;
  *((void *)result + 1) = v6;
  atomic_store(0, (unsigned int *)result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169422C0(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    uint64_t v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216942370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216942390(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_2169424DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_216942510@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  double result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 16);
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216942568(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  int v4 = sub_216943A74(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    *(_OWORD *)(a1[2] + 16) = *(_OWORD *)sub_216941ECC(v5);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    void v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    double v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    double v10 = v15;
    if (v8 < 0) {
      double v10 = v9;
    }
    if (v14 >= 0) {
      BOOL v11 = __p;
    }
    else {
      BOOL v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_216942708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_216942758@<X0>(unsigned int **a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  a1[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  double result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)double result = *(_OWORD *)v2;
  atomic_store(0, result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_2169427B4@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(_OWORD **)(a1 + 16);
  }
  else {
    uint64_t v3 = (_OWORD *)(*(void *)(a1 + 16) + 16);
  }
  a2[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  double result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)double result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_21694281C(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    int v4 = sub_216943A74(a2);
    char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v21, v4);
    if (v21[1])
    {
      *(_OWORD *)a1[2] = *(_OWORD *)sub_216941ECC(v5);
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v16 = "ts/data.h";
      long long v17 = "SetLeftValue";
      uint64_t v18 = 737;
      uint64_t v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      int v8 = v15;
      double v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      double v10 = v14;
      if (v8 < 0) {
        double v10 = v9;
      }
      if (v13 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    sub_2168EE084((uint64_t)v21);
  }
  else
  {
    char v16 = "ts/data.h";
    long long v17 = "SetLeftValue";
    uint64_t v18 = 725;
    uint64_t v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_216942A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_216942A74@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  void v15[2] = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v15);
  double v7 = sub_216943B38((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  double v9 = v8;
  sub_2168EE084((uint64_t)v15);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v15, a2);
  double v10 = sub_216943B38((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  double v12 = v11;
  sub_2168EE084((uint64_t)v15);
  a3[1] = (char *)&off_26C74E420 + 2;
  double result = operator new(0x18uLL);
  double v14 = 1.0 / (v5 - v6);
  *(double *)double result = v14 * (v10 - v7);
  *((double *)result + 1) = v14 * (v12 - v9);
  atomic_store(0, (unsigned int *)result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_216942BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_216942BDC@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, unsigned int **a3@<X8>, double a4@<D0>)
{
  float64x2_t v7 = *(float64x2_t *)sub_216941ECC(a1);
  float64x2_t v9 = vaddq_f64(v7, vmulq_n_f64(*(float64x2_t *)sub_216941ECC(a2), a4));
  a3[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  double result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)double result = v9;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_216942C70(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216942D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216942D38(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216942DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216942E00()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  uint64_t v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216942EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216942EC4()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  uint64_t v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216942F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216942F88()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216943048()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169430EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216943108()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169431AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169431C8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694326C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216943288()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  uint64_t v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216943330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694334C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2d>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169433F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21694340C@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xF8uLL);
  double result = sub_216943470(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21694345C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216943470(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C751B48;
  sub_216943540((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_2169434C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2169434D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169434F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751B48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216943540(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C751B98;
  if (a2 && a3)
  {
    sub_216943788(a1 + 32, a1 + 96, (uint64_t)a2, a3);
    double v6 = sub_216943898(a1 + 32);
    if ((*(unsigned int (**)(void *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2[2] + 16);
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    _OWORD v8[2] = 499;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec2d, true>::_Init("
            "const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, INTERPOLATABLE = true]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

unsigned int *sub_216943674@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, unsigned int **a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 64), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    float64x2_t v12 = vaddq_f64(*(float64x2_t *)(a1 + 160), vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 176), vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), vmulq_n_f64(*(float64x2_t *)(a1 + 208), v11)), v11)), v11));
  }
  else
  {
    float64x2_t v12 = *(float64x2_t *)(a1 + 16);
  }
  float64x2_t v14 = v12;
  a5[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  double result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)double result = v14;
  atomic_store(0, result + 4);
  *a5 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void *sub_216943728@<X0>(void *a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2d>::zero();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  a1[1] = (char *)&off_26C74E420 + 2;
  double result = operator new(0x18uLL);
  *(void *)double result = v3;
  *((void *)result + 1) = v4;
  atomic_store(0, (unsigned int *)result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

__n128 sub_216943788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  *(_OWORD *)a2 = *(_OWORD *)(*(void *)(a3 + 16) + 16);
  *(void *)(a2 + 16) = *(_OWORD *)&sub_216943950(a3, a4);
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = *(_OWORD *)&sub_2169439C8(a3, a4);
  *(void *)(a2 + 40) = v11;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      float64x2_t v12 = *(__n128 **)(a4 + 16);
    }
    else {
      float64x2_t v12 = (__n128 *)(*(void *)(a4 + 16) + 16);
    }
  }
  else
  {
    float64x2_t v12 = (__n128 *)(*(void *)(a3 + 16) + 16);
  }
  __n128 result = *v12;
  *(__n128 *)(a2 + 48) = *v12;
  return result;
}

double sub_216943898(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)a1 * 3.0;
  double v4 = v2 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  double v5 = v3 - v2 * 6.0;
  double v6 = *(double *)(a1 + 16) * 3.0;
  double v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 64);
  double v8 = *(double *)(a1 + 64);
  double v9 = *(double *)(a1 + 72);
  double v10 = *(double *)(a1 + 80);
  double v11 = *(double *)(a1 + 88);
  double v12 = v10 * 3.0;
  *(double *)(a1 + 144) = v10 * 3.0 - v8 * 3.0;
  *(double *)(a1 + 152) = v11 * 3.0 - v9 * 3.0;
  double v13 = v8 * 3.0 - v10 * 6.0;
  double v14 = *(double *)(a1 + 104);
  double v15 = *(double *)(a1 + 96) * 3.0;
  *(double *)(a1 + 160) = v13 + v15;
  *(double *)(a1 + 168) = v9 * 3.0 - v11 * 6.0 + v14 * 3.0;
  double result = v11 * 3.0 - v9 - v14 * 3.0 + *(double *)(a1 + 120);
  *(double *)(a1 + 176) = v12 - v8 - v15 + *(double *)(a1 + 112);
  *(double *)(a1 + 184) = result;
  return result;
}

float64x2_t sub_216943950(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(void *)(a1 + 16) + 16), *(float64x2_t *)(*(void *)(a1 + 16) + 16)), *(float64x2_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else if (v2 == 2)
  {
    return vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*(void *)(a1 + 16) + 48), *(double *)(a1 + 56)), *(float64x2_t *)(*(void *)(a1 + 16) + 16));
  }
  else
  {
    return *(float64x2_t *)(*(void *)(a1 + 16) + 16);
  }
}

float64x2_t sub_2169439C8(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2)
  {
    int v3 = *(_DWORD *)(a2 + 64);
    if (v3 == 1) {
      return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0)), *(float64x2_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0))), *(float64x2_t *)(*(void *)(a1 + 16) + 16)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
    }
    if (v3 == 2) {
      return vsubq_f64(*(float64x2_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0)), vmulq_n_f64(*(float64x2_t *)(*(void *)(a2 + 16) + 32), *(double *)(a2 + 48)));
    }
    if (v2 == 1) {
      return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0)), *(float64x2_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0))), *(float64x2_t *)(*(void *)(a1 + 16) + 16)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
    }
    else {
      return *(float64x2_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0));
    }
  }
  else
  {
    return *(float64x2_t *)(*(void *)(a1 + 16) + 16);
  }
}

std::type_info *sub_216943A74(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  double v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216943B00(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C6F0, v1, v3);
    double v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216943B00(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C6F0);
  }
  else {
    return 0;
  }
}

double sub_216943B38(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216943B00(a1)) {
    return sub_216943B90((uint64_t)a1);
  }
  else {
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2d>::Invoke, (uint64_t)&stru_26C74C6F0);
  }
}

double sub_216943B90(uint64_t a1)
{
  double v2 = *(double *)sub_216943BF0((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

atomic_uint *sub_216943BF0(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  double v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F3DDC(a1);
}

void *sub_216943C84(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (uint64_t *)sub_216943CC4(a2);

  return sub_216943D58(a1, v3);
}

uint64_t sub_216943CC4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169456CC(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2f>::Invoke, (uint64_t)&stru_26C74C700);
  }
}

void *sub_216943D58(void *a1, uint64_t *a2)
{
  *a1 = &unk_26C751BD0;
  a1[1] = 0;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  double v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)v4;
  uint64_t v8 = *(void *)v5;
  a1[2] = *a2;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  *(void *)((char *)a1 + 62) = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void *sub_216943DCC(void *result)
{
  *double result = &unk_26C751BD0;
  return result;
}

__n128 sub_216943DF0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C751BD0;
  long long v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v2;
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_216943E30@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  double v5 = a1;
  sub_216944FE4(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_216943E7C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  sub_216945118((uint64_t)v15, a1, a2);
  if (v15[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v18, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    unsigned __int32 v13 = sub_216945600(v19, v12).u32[0];
  }
  else
  {
    unsigned __int32 v13 = v16;
    int v14 = v17;
  }
  *(void *)(a3 + 8) = (char *)&off_26C74E368 + 3;
  *(_DWORD *)a3 = v13;
  *(_DWORD *)(a3 + 4) = v14;
}

double sub_216943F14@<D0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_216945118((uint64_t)v6, a1, a2);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  a3[1] = (char *)&off_26C74E368 + 3;
  double result = *(double *)v4;
  *a3 = *(void *)v4;
  return result;
}

void sub_216943F68(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216944018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216944038(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216944184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169441B8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 24);
  a2[1] = (char *)&off_26C74E368 + 3;
  return result;
}

uint64_t sub_2169441D0(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  BOOL v4 = sub_216945640(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    a1[3] = *(void *)sub_216943CC4(v5);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    void v17[2] = 667;
    v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    double v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    double v10 = v15;
    if (v8 < 0) {
      double v10 = v9;
    }
    if (v14 >= 0) {
      BOOL v11 = __p;
    }
    else {
      BOOL v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_21694436C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

int *sub_2169443BC@<X0>(void *a1@<X8>)
{
  double result = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  *a1 = *(void *)result;
  a1[1] = (char *)&off_26C74E368 + 3;
  return result;
}

uint64_t sub_2169443F4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = 16;
  if (!*(unsigned char *)(result + 68)) {
    uint64_t v2 = 24;
  }
  *a2 = *(void *)(result + v2);
  a2[1] = (char *)&off_26C74E368 + 3;
  return result;
}

void sub_216944420(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    BOOL v4 = sub_216945640(a2);
    char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v21, v4);
    if (v21[1])
    {
      a1[2] = *(void *)sub_216943CC4(v5);
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v16 = "ts/data.h";
      long long v17 = "SetLeftValue";
      uint64_t v18 = 737;
      uint64_t v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      int v8 = v15;
      double v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      double v10 = v14;
      if (v8 < 0) {
        double v10 = v9;
      }
      if (v13 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    sub_2168EE084((uint64_t)v21);
  }
  else
  {
    char v16 = "ts/data.h";
    long long v17 = "SetLeftValue";
    uint64_t v18 = 725;
    uint64_t v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_216944624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_216944674@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  void v17[2] = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v17);
  float v7 = sub_216945704((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  float v9 = v8;
  sub_2168EE084((uint64_t)v17);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v17, a2);
  float v10 = sub_216945704((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  float v12 = v11;
  double v13 = 1.0 / (v5 - v6);
  uint64_t result = sub_2168EE084((uint64_t)v17);
  float v15 = v13 * (float)(v10 - v7);
  float v16 = v13 * (float)(v12 - v9);
  *(void *)(a3 + 8) = (char *)&off_26C74E368 + 3;
  *(float *)a3 = v15;
  *(float *)(a3 + 4) = v16;
  return result;
}

void sub_2169447B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

float32x2_t sub_2169447D0@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, float32x2_t *a3@<X8>, double a4@<D0>)
{
  float32x2_t v6 = *(float32x2_t *)sub_216943CC4(a1);
  float32x2_t result = vadd_f32(v6, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)sub_216943CC4(a2)), a4)));
  a3[1] = (float32x2_t)((char *)&off_26C74E368 + 3);
  *a3 = result;
  return result;
}

void sub_216944848(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169448F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216944910(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169449BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2169449D8()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216944A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216944A9C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216944B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216944B60()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216944C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216944C20()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216944CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216944CE0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216944D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216944DA0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216944E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216944E60()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216944F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216944F24()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec2f>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216944FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216944FE4@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xB0uLL);
  float32x2_t result = sub_216945048(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216945034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216945048(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C751D18;
  sub_216945118((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_216945098(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2169450AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169450CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751D18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216945118(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C751D68;
  if (a2 && a3)
  {
    sub_2169452F4(a1 + 24, a1 + 88, (uint64_t)a2, a3);
    float v6 = sub_2169453F8(a1 + 24);
    if ((*(unsigned int (**)(void *, float))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(void *)(a1 + 12) = a2[3];
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    _OWORD v8[2] = 499;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec2f, true>::_Init("
            "const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, INTERPOLATABLE = true]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_216945248(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    unsigned __int32 v12 = sub_216945600((float32x2_t *)(a1 + 120), v11).u32[0];
  }
  else
  {
    unsigned __int32 v12 = *(_DWORD *)(a1 + 12);
    int v13 = *(_DWORD *)(a1 + 16);
  }
  *(void *)(a5 + 8) = (char *)&off_26C74E368 + 3;
  *(_DWORD *)a5 = v12;
  *(_DWORD *)(a5 + 4) = v13;
}

double sub_2169452B8@<D0>(void *a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec2f>::zero();
  a1[1] = (char *)&off_26C74E368 + 3;
  double result = *(double *)v2;
  *a1 = *(void *)v2;
  return result;
}

double sub_2169452F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  BOOL v10 = (double *)(a3 + 24);
  *(void *)a2 = *(void *)(a3 + 24);
  *(_DWORD *)(a2 + 8) = sub_2169454C0(a3, a4).u32[0];
  *(_DWORD *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 16) = sub_216945540((float32x2_t *)a3, a4).u32[0];
  *(_DWORD *)(a2 + 20) = v12;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      BOOL v10 = (double *)(a4 + 16);
    }
    else {
      BOOL v10 = (double *)(a4 + 24);
    }
  }
  double result = *v10;
  *(double *)(a2 + 24) = *v10;
  return result;
}

float sub_2169453F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  *(void *)(a1 + 96) = v1;
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)a1 * 3.0;
  double v5 = v3 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  double v6 = v4 + v3 * -6.0;
  double v7 = *(double *)(a1 + 16);
  double v8 = v5 - v2 - v7 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v8;
  LODWORD(v5) = *(_DWORD *)(a1 + 72);
  float v9 = *(float *)(a1 + 76);
  float v10 = *(float *)&v5 * 3.0;
  float v11 = v9 * 3.0;
  *(float *)(a1 + 104) = (float)(*(float *)&v5 * 3.0) - (float)(*(float *)&v1 * 3.0);
  *(float *)(a1 + 108) = (float)(v9 * 3.0) - (float)(*((float *)&v1 + 1) * 3.0);
  *(float *)&double v6 = (float)(*(float *)&v1 * 3.0) - (float)(*(float *)&v5 * 6.0);
  *(float *)&double v7 = (float)(*((float *)&v1 + 1) * 3.0) - (float)(v9 * 6.0);
  float v12 = *(float *)(a1 + 84);
  *(float *)&double v5 = *(float *)(a1 + 80) * 3.0;
  *(float *)(a1 + 112) = *(float *)&v6 + *(float *)&v5;
  *(float *)(a1 + 116) = *(float *)&v7 + (float)(v12 * 3.0);
  float result = (float)((float)(v10 - *(float *)&v1) - *(float *)&v5) + *(float *)(a1 + 88);
  *(float *)&double v8 = (float)((float)(v11 - *((float *)&v1 + 1)) - (float)(v12 * 3.0)) + *(float *)(a1 + 92);
  *(float *)(a1 + 120) = result;
  *(_DWORD *)(a1 + 124) = LODWORD(v8);
  return result;
}

float32x2_t sub_2169454C0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    uint64_t v4 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 24;
    }
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(a1 + 24), *(float32x2_t *)(a1 + 24)), *(float32x2_t *)(a2 + v4))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else if (v2 == 2)
  {
    return vadd_f32(*(float32x2_t *)(a1 + 24), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 40)), *(double *)(a1 + 56))));
  }
  else
  {
    return *(float32x2_t *)(a1 + 24);
  }
}

float32x2_t sub_216945540(float32x2_t *a1, uint64_t a2)
{
  __int32 v2 = a1[8].i32[0];
  if (!v2) {
    return a1[3];
  }
  int v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1) {
    goto LABEL_9;
  }
  if (v3 == 2)
  {
    uint64_t v4 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 24;
    }
    return vsub_f32(*(float32x2_t *)(a2 + v4), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 32)), *(double *)(a2 + 48))));
  }
  if (v2 == 1)
  {
LABEL_9:
    uint64_t v6 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v6 = 24;
    }
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(a2 + v6), *(float32x2_t *)(a2 + v6)), a1[3])), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else
  {
    uint64_t v7 = 16;
    if (!*(unsigned char *)(a2 + 68)) {
      uint64_t v7 = 24;
    }
    return *(float32x2_t *)(a2 + v7);
  }
}

float32x2_t sub_216945600(float32x2_t *a1, double a2)
{
  return vadd_f32(*a1, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(a1[1], vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(a1[2], vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[3]), a2)))), a2)))), a2)));
}

std::type_info *sub_216945640(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_2169456CC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C700, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_2169456CC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C700);
  }
  else {
    return 0;
  }
}

float sub_216945704(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169456CC(a1)) {
    return sub_21694575C(a1);
  }
  else {
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec2f>::Invoke, (uint64_t)&stru_26C74C700);
  }
}

float sub_21694575C(void *a1)
{
  float v2 = *(float *)sub_2169457BC(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v2;
}

void *sub_2169457BC(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

void *sub_21694584C(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (long long *)sub_21694588C(a2);

  return sub_216945920(a1, v3);
}

uint64_t sub_21694588C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216947714(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3d>::Invoke, (uint64_t)&stru_26C74C730);
  }
}

void *sub_216945920(void *a1, long long *a2)
{
  *a1 = &unk_26C751DA0;
  a1[1] = 0;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  double v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  long long v8 = *a2;
  *(void *)float v9 = *((void *)a2 + 2);
  *(_OWORD *)&unsigned char v9[8] = *a2;
  *(void *)&v9[24] = *(void *)v9;
  long long v10 = *(_OWORD *)v4;
  *(void *)float v11 = v4[2];
  *(void *)&v11[24] = v5[2];
  *(_OWORD *)&v11[8] = *(_OWORD *)v5;
  uint64_t v6 = operator new(0x60uLL);
  void v6[2] = *(_OWORD *)&v9[16];
  v6[3] = v10;
  void v6[4] = *(_OWORD *)v11;
  unint64_t v6[5] = *(_OWORD *)&v11[16];
  *uint64_t v6 = v8;
  v6[1] = *(_OWORD *)v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_2169459E4(void *a1)
{
  *a1 = &unk_26C751DA0;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216945A34(void *__p)
{
  void *__p = &unk_26C751DA0;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_216945A94(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C751DA0;
  BOOL v4 = operator new(0x60uLL);
  double v5 = *(_OWORD **)(a1 + 16);
  long long v6 = v5[1];
  _OWORD *v4 = *v5;
  v4[1] = v6;
  long long v7 = v5[2];
  long long v8 = v5[3];
  long long v9 = v5[5];
  void v4[4] = v5[4];
  v4[5] = v9;
  v4[2] = v7;
  void v4[3] = v8;
  *(void *)(a2 + 16) = v4;
  uint64_t v10 = *(void *)(a1 + 62);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 62) = v10;
  return result;
}

double sub_216945B14@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  double v5 = a1;
  sub_216946EB4(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void *sub_216945B60@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_216946FE8((uint64_t)v16, a1, a2);
  if (v16[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v19, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    float64x2_t v15 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v25, v12), v23), v12), v21), v12), v19[8]);
    double v13 = v12 * (v12 * (v26 * v12 + v24) + v22) + v20;
  }
  else
  {
    float64x2_t v15 = v17;
    double v13 = v18;
  }
  a3[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  *(float64x2_t *)double result = v15;
  *((double *)result + 2) = v13;
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void *sub_216945C80@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_216946FE8((uint64_t)v8, a1, a2);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  long long v7 = *(_OWORD *)v4;
  uint64_t v5 = v4[2];
  a3[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  *(_OWORD *)double result = v7;
  *((void *)result + 2) = v5;
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_216945D08(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216945DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216945DD8(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216945F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216945F58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  uint64_t v5 = *(void *)(v3 + 40);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 24);
  *((void *)result + 2) = v5;
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216945FB8(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  BOOL v4 = sub_216947688(a2);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v22, v4);
  if (v22[1])
  {
    uint64_t v8 = sub_21694588C(v5);
    uint64_t v9 = a1[2];
    long long v10 = *(_OWORD *)v8;
    *(void *)(v9 + 40) = *(void *)(v8 + 16);
    *(_OWORD *)(v9 + 24) = v10;
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    void v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    int v11 = v19;
    double v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    double v13 = v18;
    if (v11 < 0) {
      double v13 = v12;
    }
    if (v17 >= 0) {
      char v14 = __p;
    }
    else {
      char v14 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  return sub_2168EE084((uint64_t)v22);
}

void sub_216946160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_2169461B0@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  a1[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  uint64_t v4 = v2[2];
  *(_OWORD *)double result = *(_OWORD *)v2;
  *((void *)result + 2) = v4;
  atomic_store(0, (unsigned int *)result + 6);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void *sub_216946214@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16) + 24;
  }
  a2[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  uint64_t v5 = *(void *)(v3 + 16);
  *(_OWORD *)double result = *(_OWORD *)v3;
  *((void *)result + 2) = v5;
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_216946284(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v24[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    uint64_t v4 = sub_216947688(a2);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v24, v4);
    if (v24[1])
    {
      uint64_t v8 = sub_21694588C(v5);
      uint64_t v9 = a1[2];
      long long v10 = *(_OWORD *)v8;
      *(void *)(v9 + 16) = *(void *)(v8 + 16);
      *(_OWORD *)uint64_t v9 = v10;
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v19 = "ts/data.h";
      double v20 = "SetLeftValue";
      uint64_t v21 = 737;
      uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      int v11 = v18;
      double v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      double v13 = v17;
      if (v11 < 0) {
        double v13 = v12;
      }
      if (v16 >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    sub_2168EE084((uint64_t)v24);
  }
  else
  {
    char v19 = "ts/data.h";
    double v20 = "SetLeftValue";
    uint64_t v21 = 725;
    uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_216946494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_2169464E4@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v19);
  double v7 = sub_21694774C((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
  double v9 = v8;
  double v11 = v10;
  sub_2168EE084((uint64_t)v19);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v19, a2);
  double v12 = sub_21694774C((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
  double v14 = v13;
  double v16 = v15;
  sub_2168EE084((uint64_t)v19);
  a3[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  double v18 = 1.0 / (v5 - v6);
  *(double *)double result = v18 * (v12 - v7);
  *((double *)result + 1) = v18 * (v14 - v9);
  *((double *)result + 2) = v18 * (v16 - v11);
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_216946648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216946668@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = sub_21694588C(a1);
  double v7 = *(double *)(v6 + 16);
  float64x2_t v12 = *(float64x2_t *)v6;
  double v8 = (float64x2_t *)sub_21694588C(a2);
  float64_t v9 = v8[1].f64[0] * a4;
  float64x2_t v14 = vaddq_f64(v12, vmulq_n_f64(*v8, a4));
  double v10 = v7 + v9;
  a3[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  *(float64x2_t *)double result = v14;
  *((double *)result + 2) = v10;
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_216946718(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169467C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169467E0(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2169468A8()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216946950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694696C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216946A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216946A30()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216946AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216946AF0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216946B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216946BB0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216946C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216946C70()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216946D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216946D30()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216946DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216946DF4()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3d>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216946E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216946EB4@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x140uLL);
  double result = sub_216946F18(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216946F04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216946F18(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C751EE8;
  sub_216946FE8((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_216946F68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216946F7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216946F9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C751EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216946FE8(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C751F38;
  if (a2 && a3)
  {
    sub_21694724C(a1 + 40, a1 + 104, (uint64_t)a2, a3);
    double v6 = sub_216947374(a1 + 40);
    if ((*(unsigned int (**)(void *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v7 = a2[2];
      long long v8 = *(_OWORD *)(v7 + 24);
      *(void *)(a1 + 32) = *(void *)(v7 + 40);
      *(_OWORD *)(a1 + 16) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    _OWORD v10[2] = 499;
    void v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec3d, true>::_Init"
             "(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, INTERPOLATABLE = true]";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void *sub_216947124@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 72), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    double v12 = sub_216947624((double *)(a1 + 200), v11);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
  }
  else
  {
    double v12 = *(double *)(a1 + 16);
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 32);
  }
  a5[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  *(double *)double result = v12;
  *((void *)result + 1) = v14;
  *((void *)result + 2) = v16;
  atomic_store(0, (unsigned int *)result + 6);
  *a5 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void *sub_2169471D4@<X0>(void *a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3d>::zero();
  long long v5 = *(_OWORD *)v2;
  uint64_t v3 = v2[2];
  a1[1] = (char *)&off_26C74E648 + 2;
  double result = operator new(0x20uLL);
  *(_OWORD *)double result = v5;
  *((void *)result + 2) = v3;
  atomic_store(0, (unsigned int *)result + 6);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

double sub_21694724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  long long v11 = *(_OWORD *)(v10 + 24);
  *(void *)(a2 + 16) = *(void *)(v10 + 40);
  *(_OWORD *)a2 = v11;
  *(void *)(a2 + 24) = *(_OWORD *)&sub_21694746C(a3, a4);
  *(void *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = *(_OWORD *)&sub_216947520(a3, a4);
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = v15;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      uint64_t v16 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v16 = *(void *)(a4 + 16) + 24;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a3 + 16) + 24;
  }
  double result = *(double *)(v16 + 16);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)v16;
  *(double *)(a2 + 88) = result;
  return result;
}

double sub_216947374(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)a1 * 3.0;
  double v4 = v2 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  double v5 = v3 - v2 * 6.0;
  double v6 = *(double *)(a1 + 16) * 3.0;
  double v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 64);
  *(void *)(a1 + 176) = *(void *)(a1 + 80);
  double v8 = *(double *)(a1 + 64);
  double v9 = *(double *)(a1 + 72);
  double v10 = *(double *)(a1 + 80);
  double v11 = *(double *)(a1 + 88);
  double v12 = *(double *)(a1 + 96);
  double v13 = *(double *)(a1 + 104);
  double v14 = v11 * 3.0;
  double v15 = v12 * 3.0;
  double v16 = v13 * 3.0;
  double v17 = v13 * 3.0 - v10 * 3.0;
  *(double *)(a1 + 184) = v11 * 3.0 - v8 * 3.0;
  *(double *)(a1 + 192) = v12 * 3.0 - v9 * 3.0;
  double v18 = v8 * 3.0 - v11 * 6.0;
  double v19 = v9 * 3.0 - v12 * 6.0;
  double v20 = v10 * 3.0 - v13 * 6.0;
  double v21 = *(double *)(a1 + 112) * 3.0;
  double v22 = *(double *)(a1 + 120) * 3.0;
  double v23 = *(double *)(a1 + 128);
  double v24 = *(double *)(a1 + 136);
  *(double *)(a1 + 200) = v17;
  *(double *)(a1 + 208) = v18 + v21;
  *(double *)(a1 + 216) = v19 + v22;
  *(double *)(a1 + 224) = v20 + v23 * 3.0;
  double v25 = v15 - v9 - v22 + *(double *)(a1 + 144);
  double result = v16 - v10 - v23 * 3.0 + *(double *)(a1 + 152);
  *(double *)(a1 + 232) = v14 - v8 - v21 + v24;
  *(double *)(a1 + 240) = v25;
  *(double *)(a1 + 248) = result;
  return result;
}

float64x2_t sub_21694746C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    uint64_t v4 = 24;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 0;
    }
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(void *)(a1 + 16) + 24), *(float64x2_t *)(*(void *)(a1 + 16) + 24)), *(float64x2_t *)(*(void *)(a2 + 16) + v4)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else if (v2 == 2)
  {
    return vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*(void *)(a1 + 16) + 72), *(double *)(a1 + 56)), *(float64x2_t *)(*(void *)(a1 + 16) + 24));
  }
  else
  {
    return *(float64x2_t *)(*(void *)(a1 + 16) + 24);
  }
}

float64x2_t sub_216947520(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (!v2) {
    return *(float64x2_t *)(*(void *)(a1 + 16) + 24);
  }
  int v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1) {
    goto LABEL_9;
  }
  if (v3 == 2)
  {
    uint64_t v4 = 24;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 0;
    }
    return vsubq_f64(*(float64x2_t *)(*(void *)(a2 + 16) + v4), vmulq_n_f64(*(float64x2_t *)(*(void *)(a2 + 16) + 48), *(double *)(a2 + 48)));
  }
  if (v2 == 1)
  {
LABEL_9:
    uint64_t v6 = 24;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v6 = 0;
    }
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(void *)(a2 + 16) + v6), *(float64x2_t *)(*(void *)(a2 + 16) + v6)), *(float64x2_t *)(*(void *)(a1 + 16) + 24)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else
  {
    uint64_t v7 = 24;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v7 = 0;
    }
    return *(float64x2_t *)(*(void *)(a2 + 16) + v7);
  }
}

double sub_216947624(double *a1, double a2)
{
  return ((a1[9] * a2 + a1[6]) * a2 + a1[3]) * a2 + *a1;
}

std::type_info *sub_216947688(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  double v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216947714(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C730, v1, v3);
    double v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216947714(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C730);
  }
  else {
    return 0;
  }
}

double sub_21694774C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216947714(a1)) {
    return sub_2169477A8((uint64_t)a1);
  }
  else {
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3d>::Invoke, (uint64_t)&stru_26C74C730);
  }
}

double sub_2169477A8(uint64_t a1)
{
  double v2 = *(double *)sub_216947818((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

atomic_uint *sub_216947818(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  double v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F4C60(a1);
}

void *sub_2169478AC(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = sub_2169478EC(a2);

  return sub_216947980(a1, v3);
}

uint64_t sub_2169478EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216949788(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3f>::Invoke, (uint64_t)&stru_26C74C740);
  }
}

void *sub_216947980(void *a1, uint64_t a2)
{
  *a1 = &unk_26C751F70;
  a1[1] = 0;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  double v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  *(void *)double v8 = *(void *)a2;
  *(_DWORD *)&v8[8] = *(_DWORD *)(a2 + 8);
  *(void *)&v8[12] = *(void *)a2;
  *(_DWORD *)&v8[20] = *(_DWORD *)&v8[8];
  *(void *)&v8[24] = *(void *)v4;
  LODWORD(v9) = v4[2];
  HIDWORD(v9) = v5[2];
  *(void *)((char *)&v9 + 4) = *(void *)v5;
  uint64_t v6 = operator new(0x30uLL);
  *uint64_t v6 = *(_OWORD *)v8;
  v6[1] = *(_OWORD *)&v8[16];
  void v6[2] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_216947A3C(void *a1)
{
  *a1 = &unk_26C751F70;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216947A8C(void *__p)
{
  void *__p = &unk_26C751F70;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_216947AEC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C751F70;
  BOOL v4 = operator new(0x30uLL);
  double v5 = *(long long **)(a1 + 16);
  long long v6 = *v5;
  long long v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  _OWORD *v4 = v6;
  *(void *)(a2 + 16) = v4;
  uint64_t v8 = *(void *)(a1 + 62);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 62) = v8;
  return result;
}

double sub_216947B64@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  double v5 = a1;
  sub_216948ECC(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

_DWORD *sub_216947BB0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_216949000((uint64_t)v19, a1, a2);
  if (v19[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v23, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    unsigned __int32 v13 = sub_216949674((uint64_t)&v24, v12).u32[0];
    int v15 = v14;
    int v17 = v16;
  }
  else
  {
    unsigned __int32 v13 = v20;
    int v15 = v21;
    int v17 = v22;
  }
  a3[1] = (char *)&off_26C74E590 + 2;
  double result = operator new(0x10uLL);
  *double result = v13;
  result[1] = v15;
  result[2] = v17;
  atomic_store(0, result + 3);
  *a3 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

_DWORD *sub_216947C88@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_216949000((uint64_t)v8, a1, a2);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  int v5 = v4[2];
  a3[1] = (char *)&off_26C74E590 + 2;
  uint64_t v6 = *(void *)v4;
  double result = operator new(0x10uLL);
  *(void *)double result = v6;
  result[2] = v5;
  atomic_store(0, result + 3);
  *a3 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

void sub_216947D08(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216947DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216947DD8(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216947F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216947F58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (char *)&off_26C74E590 + 2;
  double result = operator new(0x10uLL);
  int v5 = *(_DWORD *)(v3 + 20);
  *(void *)double result = *(void *)(v3 + 12);
  result[2] = v5;
  atomic_store(0, result + 3);
  *a2 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216947FB8(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  BOOL v4 = sub_2169496FC(a2);
  int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v22, v4);
  if (v22[1])
  {
    uint64_t v8 = sub_2169478EC(v5);
    uint64_t v9 = a1[2];
    uint64_t v10 = *(void *)v8;
    *(_DWORD *)(v9 + 20) = *(_DWORD *)(v8 + 8);
    *(void *)(v9 + 12) = v10;
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    void v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    int v11 = v19;
    double v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    unsigned __int32 v13 = v18;
    if (v11 < 0) {
      unsigned __int32 v13 = v12;
    }
    if (v17 >= 0) {
      char v14 = __p;
    }
    else {
      char v14 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  return sub_2168EE084((uint64_t)v22);
}

void sub_216948160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

_DWORD *sub_2169481B0@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  a1[1] = (char *)&off_26C74E590 + 2;
  double result = operator new(0x10uLL);
  int v4 = v2[2];
  *(void *)double result = *(void *)v2;
  result[2] = v4;
  atomic_store(0, result + 3);
  *a1 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

_DWORD *sub_216948214@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16) + 12;
  }
  a2[1] = (char *)&off_26C74E590 + 2;
  double result = operator new(0x10uLL);
  int v5 = *(_DWORD *)(v3 + 8);
  *(void *)double result = *(void *)v3;
  result[2] = v5;
  atomic_store(0, result + 3);
  *a2 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

void sub_216948284(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v24[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    int v4 = sub_2169496FC(a2);
    int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v24, v4);
    if (v24[1])
    {
      uint64_t v8 = sub_2169478EC(v5);
      uint64_t v9 = a1[2];
      uint64_t v10 = *(void *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      *(void *)uint64_t v9 = v10;
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v19 = "ts/data.h";
      unsigned __int32 v20 = "SetLeftValue";
      uint64_t v21 = 737;
      uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      int v11 = v18;
      double v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      unsigned __int32 v13 = v17;
      if (v11 < 0) {
        unsigned __int32 v13 = v12;
      }
      if (v16 >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    sub_2168EE084((uint64_t)v24);
  }
  else
  {
    char v19 = "ts/data.h";
    unsigned __int32 v20 = "SetLeftValue";
    uint64_t v21 = 725;
    uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_216948494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_2169484E4@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  void v21[2] = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v21);
  float v7 = sub_2169497C0((pxrInternal__aapl__pxrReserved__::VtValue *)v21);
  float v9 = v8;
  float v11 = v10;
  sub_2168EE084((uint64_t)v21);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v21, a2);
  float v12 = sub_2169497C0((pxrInternal__aapl__pxrReserved__::VtValue *)v21);
  float v14 = v13;
  float v16 = v15;
  sub_2168EE084((uint64_t)v21);
  a3[1] = (char *)&off_26C74E590 + 2;
  double result = operator new(0x10uLL);
  double v18 = 1.0 / (v5 - v6);
  float v19 = v18 * (float)(v12 - v7);
  float v20 = v18 * (float)(v14 - v9);
  *(float *)&double v18 = v18 * (float)(v16 - v11);
  *(float *)double result = v19;
  *((float *)result + 1) = v20;
  *((_DWORD *)result + 2) = LODWORD(v18);
  atomic_store(0, (unsigned int *)result + 3);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 3, 1u, memory_order_relaxed);
  return result;
}

void sub_216948660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216948680@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = sub_2169478EC(a1);
  float v7 = *(float *)(v6 + 8);
  float32x2_t v8 = *(float32x2_t *)v6;
  float v9 = (float32x2_t *)sub_2169478EC(a2);
  float v10 = v9[1].f32[0] * a4;
  float32x2_t v11 = vadd_f32(v8, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v9), a4)));
  float v12 = v7 + v10;
  a3[1] = (char *)&off_26C74E590 + 2;
  double result = operator new(0x10uLL);
  *(float32x2_t *)double result = v11;
  *((float *)result + 2) = v12;
  atomic_store(0, (unsigned int *)result + 3);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 3, 1u, memory_order_relaxed);
  return result;
}

void sub_216948730(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169487DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169487F8(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169488A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2169488C0()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216948968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216948984()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216948A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216948A48()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216948AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216948B08()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216948BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216948BC8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216948C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216948C88()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216948D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216948D48()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216948DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216948E0C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec3f>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216948EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216948ECC@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xD0uLL);
  double result = sub_216948F30(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216948F1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216948F30(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C7520B8;
  sub_216949000((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_216948F80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216948F94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7520B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216948FB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7520B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216949000(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C752108;
  if (a2 && a3)
  {
    sub_216949254(a1 + 24, a1 + 88, (uint64_t)a2, a3);
    float v6 = sub_21694937C(a1 + 24);
    if ((*(unsigned int (**)(void *, float))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v7 = a2[2];
      uint64_t v8 = *(void *)(v7 + 12);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(v7 + 20);
      *(void *)(a1 + 12) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    _OWORD v10[2] = 499;
    void v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec3f, true>::_Init"
             "(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, INTERPOLATABLE = true]";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

_DWORD *sub_21694913C@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 56), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    unsigned __int32 v12 = sub_216949674(a1 + 136, v11).u32[0];
    int v14 = v13;
    int v16 = v15;
  }
  else
  {
    unsigned __int32 v12 = *(_DWORD *)(a1 + 12);
    int v14 = *(_DWORD *)(a1 + 16);
    int v16 = *(_DWORD *)(a1 + 20);
  }
  a5[1] = (char *)&off_26C74E590 + 2;
  double result = operator new(0x10uLL);
  *double result = v12;
  result[1] = v14;
  result[2] = v16;
  atomic_store(0, result + 3);
  *a5 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

_DWORD *sub_2169491EC@<X0>(void *a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec3f>::zero();
  int v3 = v2[2];
  a1[1] = (char *)&off_26C74E590 + 2;
  uint64_t v4 = *(void *)v2;
  double result = operator new(0x10uLL);
  *(void *)double result = v4;
  result[2] = v3;
  atomic_store(0, result + 3);
  *a1 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

float sub_216949254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 + 12);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v10 + 20);
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 12) = sub_21694947C(a3, a4).u32[0];
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v13;
  *(_DWORD *)(a2 + 24) = sub_216949550(a3, a4).u32[0];
  *(_DWORD *)(a2 + 28) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      uint64_t v16 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v16 = *(void *)(a4 + 16) + 12;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a3 + 16) + 12;
  }
  float result = *(float *)(v16 + 8);
  *(void *)(a2 + 36) = *(void *)v16;
  *(float *)(a2 + 44) = result;
  return result;
}

float sub_21694937C(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)a1 * 3.0;
  double v4 = v2 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  double v5 = v3 + v2 * -6.0;
  double v6 = *(double *)(a1 + 16);
  double v7 = v4 - v1 - v6 * 3.0 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6 * 3.0;
  *(double *)(a1 + 56) = v7;
  *(void *)(a1 + 112) = *(void *)(a1 + 64);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 72);
  LODWORD(v7) = *(_DWORD *)(a1 + 64);
  LODWORD(v1) = *(_DWORD *)(a1 + 68);
  float v8 = *(float *)(a1 + 72);
  float v9 = *(float *)(a1 + 76);
  float v10 = *(float *)(a1 + 80);
  float v11 = *(float *)(a1 + 84);
  float v12 = v9 * 3.0;
  float v13 = v10 * 3.0;
  float v14 = v11 * 3.0;
  float v15 = (float)(v11 * 3.0) - (float)(v8 * 3.0);
  *(float *)(a1 + 124) = (float)(v9 * 3.0) - (float)(*(float *)&v7 * 3.0);
  *(float *)(a1 + 128) = (float)(v10 * 3.0) - (float)(*(float *)&v1 * 3.0);
  *(float *)&double v6 = (float)(*(float *)&v7 * 3.0) - (float)(v9 * 6.0);
  *(float *)&double v4 = (float)(*(float *)&v1 * 3.0) - (float)(v10 * 6.0);
  float v16 = (float)(v8 * 3.0) - (float)(v11 * 6.0);
  float v17 = *(float *)(a1 + 88) * 3.0;
  float v18 = *(float *)(a1 + 92) * 3.0;
  float v19 = *(float *)(a1 + 96);
  float v20 = *(float *)(a1 + 100);
  *(float *)(a1 + 132) = v15;
  *(float *)(a1 + 136) = *(float *)&v6 + v17;
  *(float *)(a1 + 140) = *(float *)&v4 + v18;
  *(float *)(a1 + 144) = v16 + (float)(v19 * 3.0);
  float result = (float)((float)(v12 - *(float *)&v7) - v17) + v20;
  *(float *)&double v1 = (float)((float)(v13 - *(float *)&v1) - v18) + *(float *)(a1 + 104);
  *(float *)&double v5 = (float)((float)(v14 - v8) - (float)(v19 * 3.0)) + *(float *)(a1 + 108);
  *(float *)(a1 + 148) = result;
  *(_DWORD *)(a1 + 152) = LODWORD(v1);
  *(_DWORD *)(a1 + 156) = LODWORD(v5);
  return result;
}

float32x2_t sub_21694947C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    uint64_t v4 = 12;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 0;
    }
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(*(void *)(a1 + 16) + 12), *(float32x2_t *)(*(void *)(a1 + 16) + 12)), *(float32x2_t *)(*(void *)(a2 + 16) + v4))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else if (v2 == 2)
  {
    return vadd_f32(*(float32x2_t *)(*(void *)(a1 + 16) + 12), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(void *)(a1 + 16) + 36)), *(double *)(a1 + 56))));
  }
  else
  {
    return *(float32x2_t *)(*(void *)(a1 + 16) + 12);
  }
}

float32x2_t sub_216949550(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (!v2) {
    return *(float32x2_t *)(*(void *)(a1 + 16) + 12);
  }
  int v3 = *(_DWORD *)(a2 + 64);
  if (v3 == 1) {
    goto LABEL_9;
  }
  if (v3 == 2)
  {
    uint64_t v4 = 12;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v4 = 0;
    }
    return vsub_f32(*(float32x2_t *)(*(void *)(a2 + 16) + v4), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(void *)(a2 + 16) + 24)), *(double *)(a2 + 48))));
  }
  if (v2 == 1)
  {
LABEL_9:
    uint64_t v6 = 12;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v6 = 0;
    }
    return vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(vadd_f32(vadd_f32(*(float32x2_t *)(*(void *)(a2 + 16) + v6), *(float32x2_t *)(*(void *)(a2 + 16) + v6)), *(float32x2_t *)(*(void *)(a1 + 16) + 12))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)));
  }
  else
  {
    uint64_t v7 = 12;
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v7 = 0;
    }
    return *(float32x2_t *)(*(void *)(a2 + 16) + v7);
  }
}

float32x2_t sub_216949674(uint64_t a1, double a2)
{
  return vadd_f32(*(float32x2_t *)a1, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(*(float32x2_t *)(a1 + 12), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(vadd_f32(*(float32x2_t *)(a1 + 24), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 36)), a2)))), a2)))), a2)));
}

std::type_info *sub_2169496FC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  double v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216949788(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C740, v1, v3);
    double v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216949788(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C740);
  }
  else {
    return 0;
  }
}

float sub_2169497C0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216949788(a1)) {
    return sub_21694981C((uint64_t)a1);
  }
  else {
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec3f>::Invoke, (uint64_t)&stru_26C74C740);
  }
}

float sub_21694981C(uint64_t a1)
{
  float v2 = *(float *)sub_21694988C((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

atomic_uint *sub_21694988C(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  float v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F489C(a1);
}

void *sub_216949920(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (long long *)sub_216949960(a2);

  return sub_2169499F4(a1, v3);
}

uint64_t sub_216949960(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21694B764(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4d>::Invoke, (uint64_t)&stru_26C74C770);
  }
}

void *sub_2169499F4(void *a1, long long *a2)
{
  *a1 = &unk_26C752140;
  a1[1] = 0;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  double v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = *a2;
  long long v11 = *(_OWORD *)v4;
  long long v12 = *((_OWORD *)v4 + 1);
  long long v13 = *(_OWORD *)v5;
  long long v14 = *((_OWORD *)v5 + 1);
  uint64_t v6 = operator new(0x80uLL);
  void v6[4] = v11;
  unint64_t v6[5] = v12;
  v6[6] = v13;
  v6[7] = v14;
  *uint64_t v6 = v8;
  v6[1] = v9;
  void v6[2] = v10;
  v6[3] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_216949AA4(void *a1)
{
  *a1 = &unk_26C752140;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216949AF4(void *__p)
{
  void *__p = &unk_26C752140;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_216949B54(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C752140;
  BOOL v4 = operator new(0x80uLL);
  double v5 = *(long long **)(a1 + 16);
  long long v6 = *v5;
  long long v7 = v5[1];
  long long v8 = v5[3];
  v4[2] = v5[2];
  void v4[3] = v8;
  _OWORD *v4 = v6;
  v4[1] = v7;
  long long v9 = v5[4];
  long long v10 = v5[5];
  long long v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  void v4[4] = v9;
  v4[5] = v10;
  *(void *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_216949BDC@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  double v5 = a1;
  sub_21694AF20(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void *sub_216949C28@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_21694B054((uint64_t)v21, a1, a2);
  if (v21[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v26, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    double v13 = sub_21694B654(&v27, v12);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
  }
  else
  {
    double v13 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v24;
    uint64_t v19 = v25;
  }
  a3[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  *(double *)double result = v13;
  *((void *)result + 1) = v15;
  *((void *)result + 2) = v17;
  *((void *)result + 3) = v19;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_216949D04@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21694B054((uint64_t)v9, a1, a2);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  long long v8 = *(_OWORD *)v4;
  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3];
  a3[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  *(_OWORD *)double result = v8;
  *((void *)result + 2) = v5;
  *((void *)result + 3) = v6;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_216949D8C(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216949E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216949E5C(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216949FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216949FDC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  long long v5 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 32);
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_21694A034(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  BOOL v4 = sub_21694B6D8(a2);
  long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v22, v4);
  if (v22[1])
  {
    long long v8 = (_OWORD *)sub_216949960(v5);
    uint64_t v9 = a1[2];
    long long v10 = v8[1];
    *(_OWORD *)(v9 + 32) = *v8;
    *(_OWORD *)(v9 + 48) = v10;
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    void v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    int v11 = v19;
    double v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    double v13 = v18;
    if (v11 < 0) {
      double v13 = v12;
    }
    if (v17 >= 0) {
      char v14 = __p;
    }
    else {
      char v14 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  return sub_2168EE084((uint64_t)v22);
}

void sub_21694A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21694A224@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  a1[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  long long v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)double result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_21694A280@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(_OWORD **)(a1 + 16);
  }
  else {
    uint64_t v3 = (_OWORD *)(*(void *)(a1 + 16) + 32);
  }
  a2[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  long long v5 = v3[1];
  *(_OWORD *)double result = *v3;
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_21694A2E8(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v24[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    long long v4 = sub_21694B6D8(a2);
    long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v24, v4);
    if (v24[1])
    {
      long long v8 = (_OWORD *)sub_216949960(v5);
      uint64_t v9 = (_OWORD *)a1[2];
      long long v10 = v8[1];
      *uint64_t v9 = *v8;
      v9[1] = v10;
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v19 = "ts/data.h";
      float v20 = "SetLeftValue";
      uint64_t v21 = 737;
      uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      int v11 = v18;
      double v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      double v13 = v17;
      if (v11 < 0) {
        double v13 = v12;
      }
      if (v16 >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    sub_2168EE084((uint64_t)v24);
  }
  else
  {
    char v19 = "ts/data.h";
    float v20 = "SetLeftValue";
    uint64_t v21 = 725;
    uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_21694A4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21694A540@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  void v23[2] = *MEMORY[0x263EF8340];
  double v21 = a1[1];
  double v22 = a2[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v23);
  double v5 = sub_21694B79C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  sub_2168EE084((uint64_t)v23);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v23, a2);
  double v12 = sub_21694B79C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  sub_2168EE084((uint64_t)v23);
  a3[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  double v20 = 1.0 / (v22 - v21);
  *(double *)double result = v20 * (v12 - v5);
  *((double *)result + 1) = v20 * (v14 - v7);
  *((double *)result + 2) = v20 * (v16 - v9);
  *((double *)result + 3) = v20 * (v18 - v11);
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_21694A6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21694A6DC@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  double v6 = (float64x2_t *)sub_216949960(a1);
  float64x2_t v10 = v6[1];
  float64x2_t v11 = *v6;
  double v7 = (float64x2_t *)sub_216949960(a2);
  float64x2_t v8 = vaddq_f64(v11, vmulq_n_f64(*v7, a4));
  float64x2_t v12 = vaddq_f64(v10, vmulq_n_f64(v7[1], a4));
  float64x2_t v14 = v8;
  a3[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  *(float64x2_t *)double result = v14;
  *((float64x2_t *)result + 1) = v12;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_21694A784(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694A830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694A84C(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694A8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694A914()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21694A9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694A9D8()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21694AA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694AA9C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694AB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694AB5C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694AC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694AC1C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694ACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694ACDC()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694AD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21694AD9C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_21694AE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694AE60()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4d>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694AF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21694AF20@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x188uLL);
  double result = sub_21694AF84(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21694AF70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21694AF84(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C752288;
  sub_21694B054((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21694AFD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21694AFE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21694B008(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752288;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21694B054(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C7522D8;
  if (a2 && a3)
  {
    sub_21694B2B4(a1 + 48, a1 + 112, (uint64_t)a2, a3);
    double v6 = sub_21694B3CC(a1 + 48);
    if ((*(unsigned int (**)(void *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v7 = a2[2];
      long long v8 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    _OWORD v10[2] = 499;
    void v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec4d, true>::_Init"
             "(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, INTERPOLATABLE = true]";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void *sub_21694B188@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 80), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    double v12 = sub_21694B654((double *)(a1 + 240), v11);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
  }
  else
  {
    double v12 = *(double *)(a1 + 16);
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
  }
  a5[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  *(double *)double result = v12;
  *((void *)result + 1) = v14;
  *((void *)result + 2) = v16;
  *((void *)result + 3) = v18;
  atomic_store(0, (unsigned int *)result + 8);
  *a5 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_21694B23C@<X0>(void *a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4d>::zero();
  long long v6 = *(_OWORD *)v2;
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  a1[1] = (char *)&off_26C74E870 + 2;
  double result = operator new(0x28uLL);
  *(_OWORD *)double result = v6;
  *((void *)result + 2) = v3;
  *((void *)result + 3) = v4;
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

__n128 sub_21694B2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  long long v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(a2 + 16) = v11;
  *(void *)(a2 + 32) = *(_OWORD *)&sub_21694B4F0(a3, a4);
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = *(_OWORD *)&sub_21694B584(a3, a4);
  *(void *)(a2 + 72) = v15;
  *(void *)(a2 + 80) = v16;
  *(void *)(a2 + 88) = v17;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      uint64_t v18 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v18 = *(void *)(a4 + 16) + 32;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a3 + 16) + 32;
  }
  __n128 result = *(__n128 *)v18;
  long long v20 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 112) = v20;
  return result;
}

double sub_21694B3CC(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)a1 * 3.0;
  double v4 = v2 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  double v5 = v3 - v2 * 6.0;
  double v6 = *(double *)(a1 + 16) * 3.0;
  double v7 = v4 - v1 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6;
  *(double *)(a1 + 56) = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 208) = v8;
  double v9 = *(double *)(a1 + 64);
  *(void *)&long long v8 = *(void *)(a1 + 72);
  double v10 = *(double *)(a1 + 80);
  double v11 = *(double *)(a1 + 88);
  double v12 = *(double *)(a1 + 96);
  double v13 = *(double *)(a1 + 104);
  double v14 = *(double *)(a1 + 112);
  double v15 = *(double *)(a1 + 120);
  double v16 = v12 * 3.0;
  double v17 = v13 * 3.0;
  double v18 = v14 * 3.0;
  *(double *)(a1 + 224) = v12 * 3.0 - v9 * 3.0;
  *(double *)(a1 + 232) = v13 * 3.0 - *(double *)&v8 * 3.0;
  *(double *)(a1 + 240) = v14 * 3.0 - v10 * 3.0;
  *(double *)(a1 + 248) = v15 * 3.0 - v11 * 3.0;
  double v19 = v9 * 3.0 - v12 * 6.0;
  double v20 = *(double *)&v8 * 3.0 - v13 * 6.0;
  double v21 = v10 * 3.0 - v14 * 6.0;
  double v22 = *(double *)(a1 + 152);
  double v23 = *(double *)(a1 + 128) * 3.0;
  double v24 = *(double *)(a1 + 136) * 3.0;
  double v25 = *(double *)(a1 + 144) * 3.0;
  *(double *)(a1 + 256) = v19 + v23;
  *(double *)(a1 + 264) = v20 + v24;
  *(double *)(a1 + 272) = v21 + v25;
  *(double *)(a1 + 280) = v11 * 3.0 - v15 * 6.0 + v22 * 3.0;
  *(double *)&long long v8 = v17 - *(double *)&v8 - v24 + *(double *)(a1 + 168);
  double v26 = v18 - v10 - v25 + *(double *)(a1 + 176);
  double result = v15 * 3.0 - v11 - v22 * 3.0 + *(double *)(a1 + 184);
  *(double *)(a1 + 288) = v16 - v9 - v23 + *(double *)(a1 + 160);
  *(void *)(a1 + 296) = v8;
  *(double *)(a1 + 304) = v26;
  *(double *)(a1 + 312) = result;
  return result;
}

float64x2_t sub_21694B4F0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    return vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(*(void *)(a1 + 16) + 32), *(float64x2_t *)(*(void *)(a1 + 16) + 32)), *(float64x2_t *)(*(void *)(a2 + 16) + 32 * (*(unsigned char *)(a2 + 68) == 0))), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
  }
  else if (v2 == 2)
  {
    return vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*(void *)(a1 + 16) + 96), *(double *)(a1 + 56)), *(float64x2_t *)(*(void *)(a1 + 16) + 32));
  }
  else
  {
    return *(float64x2_t *)(*(void *)(a1 + 16) + 32);
  }
}

float64x2_t sub_21694B584(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2)
  {
    int v3 = *(_DWORD *)(a2 + 64);
    if (v3 == 1) {
      goto LABEL_7;
    }
    if (v3 == 2) {
      return vsubq_f64(*(float64x2_t *)(*(void *)(a2 + 16) + 32 * (*(unsigned char *)(a2 + 68) == 0)), vmulq_n_f64(*(float64x2_t *)(*(void *)(a2 + 16) + 64), *(double *)(a2 + 48)));
    }
    if (v2 == 1)
    {
LABEL_7:
      double v5 = (float64x2_t *)(*(void *)(a2 + 16) + 32 * (*(unsigned char *)(a2 + 68) == 0));
      return vmulq_f64(vaddq_f64(vaddq_f64(*v5, *v5), *(float64x2_t *)(*(void *)(a1 + 16) + 32)), (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL));
    }
    else
    {
      return *(float64x2_t *)(*(void *)(a2 + 16) + 32 * (*(unsigned char *)(a2 + 68) == 0));
    }
  }
  else
  {
    return *(float64x2_t *)(*(void *)(a1 + 16) + 32);
  }
}

double sub_21694B654(double *a1, double a2)
{
  return ((a1[12] * a2 + a1[8]) * a2 + a1[4]) * a2 + *a1;
}

std::type_info *sub_21694B6D8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  double v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21694B764(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C770, v1, v3);
    double v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21694B764(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C770);
  }
  else {
    return 0;
  }
}

double sub_21694B79C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21694B764(a1)) {
    return sub_21694B7F8((uint64_t)a1);
  }
  else {
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4d>::Invoke, (uint64_t)&stru_26C74C770);
  }
}

double sub_21694B7F8(uint64_t a1)
{
  double v2 = *(double *)sub_21694B86C((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

atomic_uint *sub_21694B86C(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  double v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F5CD0(a1);
}

void *sub_21694B900(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (long long *)sub_21694B940(a2);

  return sub_21694B9D4(a1, v3);
}

uint64_t sub_21694B940(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21694D72C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4f>::Invoke, (uint64_t)&stru_26C74C780);
  }
}

void *sub_21694B9D4(void *a1, long long *a2)
{
  *a1 = &unk_26C752310;
  a1[1] = 0;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  double v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  long long v8 = *a2;
  long long v9 = *a2;
  long long v10 = *(_OWORD *)v4;
  long long v11 = *(_OWORD *)v5;
  double v6 = operator new(0x40uLL);
  *double v6 = v8;
  v6[1] = v9;
  void v6[2] = v10;
  v6[3] = v11;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_21694BA6C(void *a1)
{
  *a1 = &unk_26C752310;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21694BABC(void *__p)
{
  void *__p = &unk_26C752310;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_21694BB1C(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C752310;
  BOOL v4 = operator new(0x40uLL);
  double v5 = *(long long **)(a1 + 16);
  long long v6 = *v5;
  long long v7 = v5[1];
  long long v8 = v5[3];
  v4[2] = v5[2];
  void v4[3] = v8;
  _OWORD *v4 = v6;
  v4[1] = v7;
  *(void *)(a2 + 16) = v4;
  uint64_t v9 = *(void *)(a1 + 62);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 62) = v9;
  return result;
}

double sub_21694BB94@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  double v5 = a1;
  sub_21694CEE8(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

_DWORD *sub_21694BBE0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_21694D01C((uint64_t)v22, a1, a2);
  if (v22[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v27, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    double v13 = sub_21694D634((uint64_t)&v28, v12);
    int v14 = LODWORD(v13);
    int v16 = v15;
    int v18 = v17;
    int v20 = v19;
  }
  else
  {
    int v14 = v23;
    int v16 = v24;
    int v18 = v25;
    int v20 = v26;
  }
  a3[1] = (char *)&off_26C74E7B8 + 2;
  double result = operator new(0x14uLL);
  *double result = v14;
  result[1] = v16;
  result[2] = v18;
  result[3] = v20;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_21694BCBC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  sub_21694D01C((uint64_t)v7, a1, a2);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  a3[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  long long v6 = *(_OWORD *)v4;
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = v6;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_21694BD34(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694BDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21694BE04(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_21694BF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_21694BF84@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 16);
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_21694BFDC(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  BOOL v4 = sub_21694D6A0(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    *(_OWORD *)(a1[2] + 16) = *(_OWORD *)sub_21694B940(v5);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    void v17[2] = 667;
    void v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    double v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    double v10 = v15;
    if (v8 < 0) {
      double v10 = v9;
    }
    if (v14 >= 0) {
      BOOL v11 = __p;
    }
    else {
      BOOL v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_21694C17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_21694C1CC@<X0>(unsigned int **a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  a1[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = *(_OWORD *)v2;
  atomic_store(0, result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_21694C228@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(_OWORD **)(a1 + 16);
  }
  else {
    uint64_t v3 = (_OWORD *)(*(void *)(a1 + 16) + 16);
  }
  a2[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_21694C290(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    BOOL v4 = sub_21694D6A0(a2);
    char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v21, v4);
    if (v21[1])
    {
      *(_OWORD *)a1[2] = *(_OWORD *)sub_21694B940(v5);
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v16 = "ts/data.h";
      long long v17 = "SetLeftValue";
      uint64_t v18 = 737;
      int v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      int v8 = v15;
      double v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      double v10 = v14;
      if (v8 < 0) {
        double v10 = v9;
      }
      if (v13 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    sub_2168EE084((uint64_t)v21);
  }
  else
  {
    char v16 = "ts/data.h";
    long long v17 = "SetLeftValue";
    uint64_t v18 = 725;
    int v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_21694C498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21694C4E8@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  v26[2] = *MEMORY[0x263EF8340];
  double v24 = a1[1];
  double v25 = a2[1];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 80))(v26);
  float v5 = sub_21694D764((pxrInternal__aapl__pxrReserved__::VtValue *)v26);
  float v7 = v6;
  float v9 = v8;
  float v11 = v10;
  sub_2168EE084((uint64_t)v26);
  (*(void (**)(void *__return_ptr, double *))(*(void *)a2 + 120))(v26, a2);
  float v12 = sub_21694D764((pxrInternal__aapl__pxrReserved__::VtValue *)v26);
  float v14 = v13;
  float v16 = v15;
  float v18 = v17;
  sub_2168EE084((uint64_t)v26);
  a3[1] = (char *)&off_26C74E7B8 + 2;
  double result = operator new(0x14uLL);
  double v20 = 1.0 / (v25 - v24);
  float v21 = v20 * (float)(v12 - v5);
  float v22 = v20 * (float)(v14 - v7);
  float v23 = v20 * (float)(v16 - v9);
  *(float *)&double v20 = v20 * (float)(v18 - v11);
  *(float *)double result = v21;
  *((float *)result + 1) = v22;
  *((float *)result + 2) = v23;
  *((_DWORD *)result + 3) = LODWORD(v20);
  atomic_store(0, (unsigned int *)result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_21694C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_21694C6A4@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, unsigned int **a3@<X8>, double a4@<D0>)
{
  float32x4_t v8 = *(float32x4_t *)sub_21694B940(a1);
  float v6 = (float32x2_t *)sub_21694B940(a2);
  float32x4_t v10 = vaddq_f32(v8, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v6), a4)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v6->f32), a4)));
  a3[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  double result = (unsigned int *)operator new(0x14uLL);
  *(float32x4_t *)double result = v10;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_21694C74C(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694C7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694C814(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694C8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694C8DC()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21694C984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694C9A0()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21694CA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694CA64()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694CB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694CB24()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694CBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694CBE4()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694CC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694CCA4()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694CD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21694CD64()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_21694CE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694CE28()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfVec4f>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694CECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21694CEE8@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0xF8uLL);
  double result = sub_21694CF4C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21694CF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21694CF4C(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C752458;
  sub_21694D01C((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21694CF9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21694CFB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21694CFD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21694D01C(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C7524A8;
  if (a2 && a3)
  {
    sub_21694D26C(a1 + 32, a1 + 96, (uint64_t)a2, a3);
    float v6 = sub_21694D384(a1 + 32);
    if ((*(unsigned int (**)(void *, float))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2[2] + 16);
    }
  }
  else
  {
    v8[0] = "ts/evalCache.h";
    v8[1] = "_Init";
    _OWORD v8[2] = 499;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfVec4f, true>::_Init("
            "const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, INTERPOLATABLE = true]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

_DWORD *sub_21694D150@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 64), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    double v12 = sub_21694D634(a1 + 160, v11);
    int v13 = LODWORD(v12);
    int v15 = v14;
    int v17 = v16;
    int v19 = v18;
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 12);
    int v15 = *(_DWORD *)(a1 + 16);
    int v17 = *(_DWORD *)(a1 + 20);
    int v19 = *(_DWORD *)(a1 + 24);
  }
  a5[1] = (char *)&off_26C74E7B8 + 2;
  double result = operator new(0x14uLL);
  *double result = v13;
  result[1] = v15;
  result[2] = v17;
  result[3] = v19;
  atomic_store(0, result + 4);
  *a5 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_21694D204@<X0>(unsigned int **a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfVec4f>::zero();
  a1[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  long long v4 = *(_OWORD *)v2;
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = v4;
  atomic_store(0, result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

__n128 sub_21694D26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  *(_OWORD *)a2 = *(_OWORD *)(*(void *)(a3 + 16) + 16);
  *(_DWORD *)(a2 + 16) = sub_21694D4B0(a3, a4).u32[0];
  *(_DWORD *)(a2 + 20) = v10;
  *(_DWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 28) = v12;
  *(_DWORD *)(a2 + 32) = sub_21694D558(a3, a4).u32[0];
  *(_DWORD *)(a2 + 36) = v13;
  *(_DWORD *)(a2 + 40) = v14;
  *(_DWORD *)(a2 + 44) = v15;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      int v16 = *(__n128 **)(a4 + 16);
    }
    else {
      int v16 = (__n128 *)(*(void *)(a4 + 16) + 16);
    }
  }
  else
  {
    int v16 = (__n128 *)(*(void *)(a3 + 16) + 16);
  }
  __n128 result = *v16;
  *(__n128 *)(a2 + 48) = *v16;
  return result;
}

float sub_21694D384(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)a1 * 3.0;
  double v4 = v2 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v2 * 3.0 - v3;
  double v5 = v3 + v2 * -6.0;
  double v6 = *(double *)(a1 + 16);
  double v7 = *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v5 + v6 * 3.0;
  *(double *)(a1 + 56) = v4 - v1 - v6 * 3.0 + v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 64);
  float v8 = *(float *)(a1 + 64);
  LODWORD(v1) = *(_DWORD *)(a1 + 68);
  LODWORD(v5) = *(_DWORD *)(a1 + 72);
  LODWORD(v6) = *(_DWORD *)(a1 + 76);
  float v9 = *(float *)(a1 + 80);
  float v10 = *(float *)(a1 + 84);
  float v11 = *(float *)(a1 + 88);
  float v12 = *(float *)(a1 + 92);
  float v13 = v9 * 3.0;
  float v14 = v10 * 3.0;
  float v15 = v11 * 3.0;
  float v16 = v12 * 3.0;
  *(float *)(a1 + 144) = (float)(v9 * 3.0) - (float)(v8 * 3.0);
  *(float *)(a1 + 148) = (float)(v10 * 3.0) - (float)(*(float *)&v1 * 3.0);
  *(float *)(a1 + 152) = (float)(v11 * 3.0) - (float)(*(float *)&v5 * 3.0);
  *(float *)(a1 + 156) = (float)(v12 * 3.0) - (float)(*(float *)&v6 * 3.0);
  *(float *)&double v7 = (float)(v8 * 3.0) - (float)(v9 * 6.0);
  float v17 = (float)(*(float *)&v1 * 3.0) - (float)(v10 * 6.0);
  float v18 = (float)(*(float *)&v5 * 3.0) - (float)(v11 * 6.0);
  float v19 = (float)(*(float *)&v6 * 3.0) - (float)(v12 * 6.0);
  float v20 = *(float *)(a1 + 108);
  float v21 = *(float *)(a1 + 96) * 3.0;
  float v22 = *(float *)(a1 + 100) * 3.0;
  float v23 = *(float *)(a1 + 104) * 3.0;
  *(float *)(a1 + 160) = *(float *)&v7 + v21;
  *(float *)(a1 + 164) = v17 + v22;
  *(float *)(a1 + 168) = v18 + v23;
  *(float *)(a1 + 172) = v19 + (float)(v20 * 3.0);
  float result = (float)((float)(v13 - v8) - v21) + *(float *)(a1 + 112);
  *(float *)&double v1 = (float)((float)(v14 - *(float *)&v1) - v22) + *(float *)(a1 + 116);
  *(float *)&double v5 = (float)((float)(v15 - *(float *)&v5) - v23) + *(float *)(a1 + 120);
  *(float *)&double v6 = (float)((float)(v16 - *(float *)&v6) - (float)(v20 * 3.0)) + *(float *)(a1 + 124);
  *(float *)(a1 + 176) = result;
  *(_DWORD *)(a1 + 180) = LODWORD(v1);
  *(_DWORD *)(a1 + 184) = LODWORD(v5);
  *(_DWORD *)(a1 + 188) = LODWORD(v6);
  return result;
}

float32x4_t sub_21694D4B0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    float32x4_t v4 = vaddq_f32(vaddq_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 16), *(float32x4_t *)(*(void *)(a1 + 16) + 16)), *(float32x4_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0)));
    float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    return vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v4.f32), v5)), vmulq_f64(vcvt_hight_f64_f32(v4), v5));
  }
  else if (v2 == 2)
  {
    return vaddq_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 16), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(void *)(a1 + 16) + 48)), *(double *)(a1 + 56))), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 48)), *(double *)(a1 + 56))));
  }
  else
  {
    return *(float32x4_t *)(*(void *)(a1 + 16) + 16);
  }
}

float32x4_t sub_21694D558(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2)
  {
    int v3 = *(_DWORD *)(a2 + 64);
    if (v3 == 1) {
      goto LABEL_7;
    }
    if (v3 == 2) {
      return vsubq_f32(*(float32x4_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0)), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(void *)(a2 + 16) + 32)), *(double *)(a2 + 48))), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)(*(void *)(a2 + 16) + 32)), *(double *)(a2 + 48))));
    }
    if (v2 == 1)
    {
LABEL_7:
      float32x4_t v5 = vaddq_f32(vaddq_f32(*(float32x4_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0)), *(float32x4_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0))), *(float32x4_t *)(*(void *)(a1 + 16) + 16));
      float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
      return vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v5.f32), v6)), vmulq_f64(vcvt_hight_f64_f32(v5), v6));
    }
    else
    {
      return *(float32x4_t *)(*(void *)(a2 + 16) + 16 * (*(unsigned char *)(a2 + 68) == 0));
    }
  }
  else
  {
    return *(float32x4_t *)(*(void *)(a1 + 16) + 16);
  }
}

double sub_21694D634(uint64_t a1, double a2)
{
  float32x4_t v2 = vaddq_f32(*(float32x4_t *)(a1 + 32), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 48)), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)(a1 + 48)), a2)));
  float32x4_t v3 = vaddq_f32(*(float32x4_t *)(a1 + 16), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v2.f32), a2)), vmulq_n_f64(vcvt_hight_f64_f32(v2), a2)));
  *(void *)&double result = vaddq_f32(*(float32x4_t *)a1, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v3.f32), a2)), vmulq_n_f64(vcvt_hight_f64_f32(v3), a2))).u64[0];
  return result;
}

std::type_info *sub_21694D6A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  double v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21694D72C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C780, v1, v3);
    double v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21694D72C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C780);
  }
  else {
    return 0;
  }
}

float sub_21694D764(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21694D72C(a1)) {
    return sub_21694D7C0((uint64_t)a1);
  }
  else {
    return *(float *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfVec4f>::Invoke, (uint64_t)&stru_26C74C780);
  }
}

float sub_21694D7C0(uint64_t a1)
{
  float v2 = *(float *)sub_21694D834((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

atomic_uint *sub_21694D834(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  float v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F58F0(a1);
}

void *sub_21694D8C8(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (long long *)sub_21694D908(a2);

  return sub_21694D99C(a1, v3);
}

uint64_t sub_21694D908(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21694FB20(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Invoke, (uint64_t)&stru_26C74C570);
  }
}

void *sub_21694D99C(void *a1, long long *a2)
{
  *a1 = &unk_26C7524E0;
  a1[1] = 0;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  float32x4_t v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = *a2;
  long long v11 = *(_OWORD *)v4;
  long long v12 = *((_OWORD *)v4 + 1);
  long long v13 = *(_OWORD *)v5;
  long long v14 = *((_OWORD *)v5 + 1);
  float64x2_t v6 = operator new(0x80uLL);
  void v6[4] = v11;
  unint64_t v6[5] = v12;
  v6[6] = v13;
  v6[7] = v14;
  *float64x2_t v6 = v8;
  v6[1] = v9;
  void v6[2] = v10;
  v6[3] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_21694DA4C(void *a1)
{
  *a1 = &unk_26C7524E0;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21694DA9C(void *__p)
{
  void *__p = &unk_26C7524E0;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_21694DAFC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C7524E0;
  BOOL v4 = operator new(0x80uLL);
  float32x4_t v5 = *(long long **)(a1 + 16);
  long long v6 = *v5;
  long long v7 = v5[1];
  long long v8 = v5[3];
  v4[2] = v5[2];
  void v4[3] = v8;
  _OWORD *v4 = v6;
  v4[1] = v7;
  long long v9 = v5[4];
  long long v10 = v5[5];
  long long v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  void v4[4] = v9;
  v4[5] = v10;
  *(void *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_21694DB84@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  float32x4_t v5 = a1;
  sub_21694EF18(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void *sub_21694DBD0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_21694F04C((uint64_t)v21, a1, a2);
  if (v21[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v26, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    float64_t v13 = sub_21694F7F4((uint64_t)&v27, v12);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
  }
  else
  {
    float64_t v13 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v24;
    uint64_t v19 = v25;
  }
  a3[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  *(float64_t *)double result = v13;
  *((void *)result + 1) = v15;
  *((void *)result + 2) = v17;
  *((void *)result + 3) = v19;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_21694DCAC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_21694F04C((uint64_t)v9, a1, a2);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  long long v8 = *(_OWORD *)v4;
  uint64_t v5 = v4[2];
  uint64_t v6 = v4[3];
  a3[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  *(_OWORD *)double result = v8;
  *((void *)result + 2) = v5;
  *((void *)result + 3) = v6;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_21694DD34(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::S"
            "etKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694DDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21694DE04(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_21694DF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21694DF84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  long long v5 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 32);
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_21694DFDC(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  BOOL v4 = sub_21694FA94(a2);
  long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v22, v4);
  if (v22[1])
  {
    long long v8 = (_OWORD *)sub_21694D908(v5);
    uint64_t v9 = a1[2];
    long long v10 = v8[1];
    *(_OWORD *)(v9 + 32) = *v8;
    *(_OWORD *)(v9 + 48) = v10;
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    void v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::"
             "SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    int v11 = v19;
    double v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    float64_t v13 = v18;
    if (v11 < 0) {
      float64_t v13 = v12;
    }
    if (v17 >= 0) {
      char v14 = __p;
    }
    else {
      char v14 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  return sub_2168EE084((uint64_t)v22);
}

void sub_21694E17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21694E1CC@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  a1[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  long long v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)double result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_21694E228@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(_OWORD **)(a1 + 16);
  }
  else {
    uint64_t v3 = (_OWORD *)(*(void *)(a1 + 16) + 32);
  }
  a2[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  long long v5 = v3[1];
  *(_OWORD *)double result = *v3;
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_21694E290(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v24[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    long long v4 = sub_21694FA94(a2);
    long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v24, v4);
    if (v24[1])
    {
      long long v8 = (_OWORD *)sub_21694D908(v5);
      uint64_t v9 = (_OWORD *)a1[2];
      long long v10 = v8[1];
      *uint64_t v9 = *v8;
      v9[1] = v10;
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v19 = "ts/data.h";
      float v20 = "SetLeftValue";
      uint64_t v21 = 737;
      uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::S"
            "etLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      int v11 = v18;
      double v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      float64_t v13 = v17;
      if (v11 < 0) {
        float64_t v13 = v12;
      }
      if (v16 >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    sub_2168EE084((uint64_t)v24);
  }
  else
  {
    char v19 = "ts/data.h";
    float v20 = "SetLeftValue";
    uint64_t v21 = 725;
    uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "LeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_21694E498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21694E4E8@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  (*(void (**)(float64x2_t *__return_ptr))(*(void *)a1 + 80))(&v24);
  v23[0] = sub_21694FB58((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  v23[1] = v7;
  void v23[2] = v8;
  void v23[3] = v9;
  sub_2168EE084((uint64_t)&v24);
  (*(void (**)(float64x2_t *__return_ptr, double *))(*(void *)a2 + 120))(&v24, a2);
  double v10 = sub_21694FB58((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
  float64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  sub_2168EE084((uint64_t)&v24);
  v24.f64[0] = v10;
  v24.f64[1] = v12;
  uint64_t v25 = v14;
  uint64_t v26 = v16;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator-=(v24.f64, v23);
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v24, 1.0 / (v5 - v6));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v20 = v17[2];
  uint64_t v21 = v17[3];
  a3[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  *(void *)double result = v18;
  *((void *)result + 1) = v19;
  *((void *)result + 2) = v20;
  *((void *)result + 3) = v21;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_21694E664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21694E684@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  double v7 = (float64x2_t *)sub_21694D908(a1);
  float64x2_t v8 = v7[1];
  float64x2_t v21 = *v7;
  float64x2_t v22 = v8;
  double v9 = (float64x2_t *)sub_21694D908(a2);
  float64x2_t v10 = v9[1];
  float64x2_t v19 = *v9;
  float64x2_t v20 = v10;
  float64x2_t v17 = v19;
  float64x2_t v18 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v17, a4);
  long long v12 = v11[1];
  v16[0] = *v11;
  v16[1] = v12;
  float64x2_t v17 = v21;
  float64x2_t v18 = v22;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v17.f64, (double *)v16);
  float64x2_t v13 = v17;
  float64x2_t v14 = v18;
  a3[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  *(float64x2_t *)double result = v13;
  *((float64x2_t *)result + 1) = v14;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_21694E77C(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::"
          "GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694E844(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::"
          "GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21694E8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694E90C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::G"
          "etLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21694E9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21694E9D0()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::G"
          "etRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21694EA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694EA94()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "LeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694EB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694EB54()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "RightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694EBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694EC14()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "LeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694ECB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694ECD4()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "RightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694ED78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21694ED94()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Get"
          "TangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_21694EE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21694EE58()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Set"
          "TangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21694EEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21694EF18@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x188uLL);
  double result = sub_21694EF7C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21694EF68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21694EF7C(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C752628;
  sub_21694F04C((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21694EFCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21694EFE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21694F000(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752628;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21694F04C(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C752678;
  if (a2 && a3)
  {
    sub_21694F2AC(a1 + 48, a1 + 112, (uint64_t)a2, a3);
    float64_t v6 = sub_21694F3C4(a1 + 48);
    if ((*(unsigned int (**)(void *, float64_t))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v7 = a2[2];
      long long v8 = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 32);
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  else
  {
    v10[0] = "ts/evalCache.h";
    v10[1] = "_Init";
    _OWORD v10[2] = 499;
    void v10[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfMatrix2d, true>::_I"
             "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d, IN"
             "TERPOLATABLE = true]";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void *sub_21694F180@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 80), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    float64_t v12 = sub_21694F7F4(a1 + 240, v11);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
  }
  else
  {
    float64_t v12 = *(double *)(a1 + 16);
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
  }
  a5[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  *(float64_t *)double result = v12;
  *((void *)result + 1) = v14;
  *((void *)result + 2) = v16;
  *((void *)result + 3) = v18;
  atomic_store(0, (unsigned int *)result + 8);
  *a5 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_21694F234@<X0>(void *a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::zero();
  long long v6 = *(_OWORD *)v2;
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  a1[1] = (char *)&off_26C7526A0 + 2;
  double result = operator new(0x28uLL);
  *(_OWORD *)double result = v6;
  *((void *)result + 2) = v3;
  *((void *)result + 3) = v4;
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

__n128 sub_21694F2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  long long v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(a2 + 16) = v11;
  *(double *)(a2 + 32) = sub_21694F5E4(a3, a4);
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = sub_21694F6CC(a3, a4).n128_u64[0];
  *(void *)(a2 + 72) = v15;
  *(void *)(a2 + 80) = v16;
  *(void *)(a2 + 88) = v17;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      uint64_t v18 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v18 = *(void *)(a4 + 16) + 32;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a3 + 16) + 32;
  }
  __n128 result = *(__n128 *)v18;
  long long v20 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 112) = v20;
  return result;
}

float64_t sub_21694F3C4(uint64_t a1)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)a1 * 3.0;
  double v5 = v3 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  double v6 = v4 + v3 * -6.0;
  double v7 = *(double *)(a1 + 16);
  double v8 = *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v6 + v7 * 3.0;
  *(double *)(a1 + 56) = v5 - v2 - v7 * 3.0 + v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 208) = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  float64x2_t v52 = *(float64x2_t *)(a1 + 64);
  long long v53 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -3.0);
  float64x2_t v43 = *(float64x2_t *)v11;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v11 + 24);
  long long v14 = *(_OWORD *)(a1 + 112);
  float64x2_t v52 = *(float64x2_t *)(a1 + 96);
  long long v53 = v14;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  long long v16 = v15[1];
  long long v50 = *v15;
  long long v51 = v16;
  float64x2_t v52 = v43;
  *(void *)&long long v53 = v12;
  *((void *)&v53 + 1) = v13;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v50);
  long long v17 = v53;
  *(float64x2_t *)(a1 + 224) = v52;
  *(_OWORD *)(a1 + 240) = v17;
  long long v18 = *(_OWORD *)(a1 + 80);
  float64x2_t v52 = *(float64x2_t *)(a1 + 64);
  long long v53 = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  float64x2_t v44 = *(float64x2_t *)v19;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = *(void *)(v19 + 24);
  long long v22 = *(_OWORD *)(a1 + 112);
  float64x2_t v52 = *(float64x2_t *)(a1 + 96);
  long long v53 = v22;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -6.0);
  long long v24 = v23[1];
  long long v50 = *v23;
  long long v51 = v24;
  float64x2_t v52 = v44;
  *(void *)&long long v53 = v20;
  *((void *)&v53 + 1) = v21;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v50);
  float64x2_t v45 = v52;
  long long v25 = v53;
  long long v26 = *(_OWORD *)(a1 + 144);
  float64x2_t v52 = *(float64x2_t *)(a1 + 128);
  long long v53 = v26;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  long long v28 = v27[1];
  long long v48 = *v27;
  long long v49 = v28;
  float64x2_t v52 = v45;
  long long v53 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v48);
  long long v29 = v53;
  *(float64x2_t *)(a1 + 256) = v52;
  *(_OWORD *)(a1 + 272) = v29;
  long long v30 = *(_OWORD *)(a1 + 80);
  float64x2_t v52 = *(float64x2_t *)(a1 + 64);
  long long v53 = v30;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -1.0);
  float64x2_t v46 = *(float64x2_t *)v31;
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v33 = *(void *)(v31 + 24);
  long long v34 = *(_OWORD *)(a1 + 112);
  float64x2_t v52 = *(float64x2_t *)(a1 + 96);
  long long v53 = v34;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 3.0);
  long long v36 = v35[1];
  long long v50 = *v35;
  long long v51 = v36;
  float64x2_t v52 = v46;
  *(void *)&long long v53 = v32;
  *((void *)&v53 + 1) = v33;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v50);
  float64x2_t v47 = v52;
  long long v37 = v53;
  long long v38 = *(_OWORD *)(a1 + 144);
  float64x2_t v52 = *(float64x2_t *)(a1 + 128);
  long long v53 = v38;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, -3.0);
  long long v40 = v39[1];
  long long v48 = *v39;
  long long v49 = v40;
  float64x2_t v52 = v47;
  long long v53 = v37;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)&v48);
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)(a1 + 160));
  float64_t result = v52.f64[0];
  long long v42 = v53;
  *(float64x2_t *)(a1 + 288) = v52;
  *(_OWORD *)(a1 + 304) = v42;
  return result;
}

double sub_21694F5E4(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    long long v12 = *(_OWORD *)(v11 + 48);
    float64x2_t v18 = *(float64x2_t *)(v11 + 32);
    long long v19 = v12;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v18, 2.0);
    long long v14 = *(_OWORD *)(v13 + 16);
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v15 = *(double **)(a2 + 16);
    }
    else {
      uint64_t v15 = (double *)(*(void *)(a2 + 16) + 32);
    }
    float64x2_t v18 = *(float64x2_t *)v13;
    long long v19 = v14;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v18.f64, v15);
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v18, 0.333333333);
    return *(double *)v16;
  }
  else if (v2 == 2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    double v4 = *(double *)(a1 + 56);
    long long v5 = *(_OWORD *)(v3 + 112);
    float64x2_t v18 = *(float64x2_t *)(v3 + 96);
    long long v19 = v5;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v18, v4);
    long long v7 = v6[1];
    v17[0] = *v6;
    v17[1] = v7;
    long long v8 = *(_OWORD *)(v3 + 48);
    float64x2_t v18 = *(float64x2_t *)(v3 + 32);
    long long v19 = v8;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v18.f64, (double *)v17);
    return v18.f64[0];
  }
  else
  {
    return *(double *)(*(void *)(a1 + 16) + 32);
  }
}

__n128 sub_21694F6CC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (!v2) {
    return *(__n128 *)(*(void *)(a1 + 16) + 32);
  }
  int v3 = *(_DWORD *)(a2 + 64);
  if (v3 != 1)
  {
    if (v3 == 2)
    {
      uint64_t v4 = *(void *)(a2 + 16);
      if (*(unsigned char *)(a2 + 68)) {
        uint64_t v5 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v5 = v4 + 32;
      }
      double v6 = *(double *)(a2 + 48);
      long long v7 = *(_OWORD *)(v4 + 80);
      __n128 v21 = *(__n128 *)(v4 + 64);
      long long v22 = v7;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=((float64x2_t *)&v21, v6);
      long long v9 = v8[1];
      long long v19 = *v8;
      long long v20 = v9;
      long long v10 = *(_OWORD *)(v5 + 16);
      __n128 v21 = *(__n128 *)v5;
      long long v22 = v10;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator-=(v21.n128_f64, (double *)&v19);
      return v21;
    }
    if (v2 != 1) {
      return *(__n128 *)(*(void *)(a2 + 16) + 32 * (*(unsigned char *)(a2 + 68) == 0));
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a2 + 68)) {
    uint64_t v13 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 16) + 32;
  }
  long long v14 = *(_OWORD *)(v13 + 16);
  __n128 v21 = *(__n128 *)v13;
  long long v22 = v14;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=((float64x2_t *)&v21, 2.0);
  long long v16 = v15[1];
  long long v19 = *v15;
  long long v20 = v16;
  long long v17 = *(_OWORD *)(v12 + 48);
  __n128 v21 = *(__n128 *)(v12 + 32);
  long long v22 = v17;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v21.n128_f64, (double *)&v19);
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=((float64x2_t *)&v21, 0.333333333);
  return *(__n128 *)v18;
}

float64_t sub_21694F7F4(uint64_t a1, double a2)
{
  long long v4 = *(_OWORD *)(a1 + 112);
  float64x2_t v12 = *(float64x2_t *)(a1 + 96);
  long long v13 = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v12, a2);
  long long v6 = *(_OWORD *)(v5 + 16);
  float64x2_t v12 = *(float64x2_t *)v5;
  long long v13 = v6;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v12.f64, (double *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v12, a2);
  long long v8 = *(_OWORD *)(v7 + 16);
  float64x2_t v12 = *(float64x2_t *)v7;
  long long v13 = v8;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v12.f64, (double *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v12, a2);
  long long v10 = *(_OWORD *)(v9 + 16);
  float64x2_t v12 = *(float64x2_t *)v9;
  long long v13 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v12.f64, (double *)a1);
  return v12.f64[0];
}

uint64_t *sub_21694F8A8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_21694F8C4(atomic_uint **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 8, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_21694F8EC(void *result, void *a2)
{
  *a2 = *result;
  *float64_t result = 0;
  return result;
}

uint64_t sub_21694F8FC()
{
  return 1;
}

unint64_t sub_21694F904(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  int v3 = *a1 + 2;
  long long v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_2168F5C84((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_21694F964(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(*a1, *a2);
}

BOOL sub_21694F970(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(*a1, a2);
}

uint64_t sub_21694F97C()
{
  return 0;
}

void *sub_21694F988(double **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_21694F998()
{
  return &unk_26C74C570;
}

uint64_t sub_21694F9A4()
{
  return 0;
}

uint64_t sub_21694F9AC()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_21694F9B8()
{
  return 0;
}

uint64_t sub_21694F9C0()
{
  return 0;
}

BOOL sub_21694F9C8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217452F88 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21694FA04(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C570, a2, a3);
}

void *sub_21694FA28()
{
  return &unk_26C74C570;
}

uint64_t sub_21694FA34(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21694FA3C@<X0>(_OWORD **a1@<X0>, void *a2@<X8>)
{
  int v3 = *a1;
  a2[1] = (char *)&off_26C7526A0 + 2;
  float64_t result = operator new(0x28uLL);
  long long v5 = v3[1];
  *(_OWORD *)float64_t result = *v3;
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

std::type_info *sub_21694FA94(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21694FB20(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C570, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21694FB20(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 78) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C570);
  }
  else {
    return 0;
  }
}

double sub_21694FB58(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21694FB20(a1)) {
    return sub_21694FBB4((uint64_t)a1);
  }
  else {
    return *(double *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::Invoke, (uint64_t)&stru_26C74C570);
  }
}

double sub_21694FBB4(uint64_t a1)
{
  double v2 = *(double *)sub_21694FC28((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

atomic_uint *sub_21694FC28(atomic_uint **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  double v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F5CD0(a1);
}

void *sub_21694FCBC(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = sub_21694FCFC(a2);

  return sub_21694FD90(a1, v3);
}

uint64_t sub_21694FCFC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21695273C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      BOOL v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Invoke, (uint64_t)&stru_26C74C5A0);
  }
}

void *sub_21694FD90(void *a1, uint64_t a2)
{
  *a1 = &unk_26C752768;
  a1[1] = 0;
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  long long v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  long long v6 = *(_OWORD *)(a2 + 48);
  _OWORD v17[2] = *(_OWORD *)(a2 + 32);
  void v17[3] = v6;
  *(void *)&void v17[4] = *(void *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v7;
  *(_OWORD *)((char *)&v17[5] + 8) = v7;
  *(_OWORD *)((char *)&v17[6] + 8) = v17[2];
  *(_OWORD *)((char *)&v17[7] + 8) = v6;
  *((void *)&v17[8] + 1) = *(void *)&v17[4];
  *(_OWORD *)((char *)&v17[4] + 8) = v17[0];
  long long v8 = *v4;
  long long v9 = v4[1];
  long long v10 = v4[3];
  uint64_t v11 = *((void *)v4 + 8);
  v17[11] = v4[2];
  v17[12] = v10;
  v17[9] = v8;
  v17[10] = v9;
  uint64_t v12 = v5[8];
  long long v13 = *((_OWORD *)v5 + 2);
  *(_OWORD *)((char *)&v17[16] + 8) = *((_OWORD *)v5 + 3);
  long long v14 = *((_OWORD *)v5 + 1);
  *(_OWORD *)((char *)&v17[13] + 8) = *(_OWORD *)v5;
  *(void *)&v17[13] = v11;
  *((void *)&v17[17] + 1) = v12;
  *(_OWORD *)((char *)&v17[15] + 8) = v13;
  *(_OWORD *)((char *)&v17[14] + 8) = v14;
  uint64_t v15 = operator new(0x120uLL);
  memcpy(v15, v17, 0x120uLL);
  a1[2] = v15;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_21694FE8C(void *a1)
{
  *a1 = &unk_26C752768;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21694FEDC(void *__p)
{
  void *__p = &unk_26C752768;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_21694FF3C(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C752768;
  BOOL v4 = operator new(0x120uLL);
  memcpy(v4, *(const void **)(a1 + 16), 0x120uLL);
  *(void *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(a1 + 62);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 62) = v5;
  return result;
}

double sub_21694FFB8@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_2169514C4(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void *sub_216950004@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_2169515F8((uint64_t)v16, a1, a2);
  if (v16[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v22, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    sub_216952264((uint64_t)&v23, (uint64_t)&v24, v12);
  }
  else
  {
    long long v26 = v19;
    long long v27 = v20;
    uint64_t v28 = v21;
    long long v24 = v17;
    long long v25 = v18;
  }
  a3[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  long long v14 = v27;
  *((_OWORD *)result + 2) = v26;
  *((_OWORD *)result + 3) = v14;
  *((void *)result + 8) = v28;
  long long v15 = v25;
  *(_OWORD *)double result = v24;
  *((_OWORD *)result + 1) = v15;
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void *sub_2169500F8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_2169515F8((uint64_t)v10, a1, a2);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  long long v5 = v4[3];
  long long v13 = v4[2];
  long long v14 = v5;
  uint64_t v15 = *((void *)v4 + 8);
  long long v6 = v4[1];
  long long v11 = *v4;
  long long v12 = v6;
  a3[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  long long v8 = v14;
  *((_OWORD *)result + 2) = v13;
  *((_OWORD *)result + 3) = v8;
  *((void *)result + 8) = v15;
  long long v9 = v12;
  *(_OWORD *)double result = v11;
  *((_OWORD *)result + 1) = v9;
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void sub_2169501CC(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::S"
            "etKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695027C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695029C(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        double v10 = v15;
      }
      else {
        double v10 = v7;
      }
      if (v14 >= 0) {
        long long v11 = __p;
      }
      else {
        long long v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_2169503E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21695041C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 72);
  long long v5 = *(_OWORD *)(v3 + 104);
  long long v6 = *(_OWORD *)(v3 + 120);
  long long v7 = *(_OWORD *)(v3 + 88);
  *((void *)result + 8) = *(void *)(v3 + 136);
  *((_OWORD *)result + 2) = v5;
  *((_OWORD *)result + 3) = v6;
  *((_OWORD *)result + 1) = v7;
  atomic_store(0, (unsigned int *)result + 18);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216950490(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v24[2] = *MEMORY[0x263EF8340];
  BOOL v4 = sub_2169526B0(a2);
  long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v24, v4);
  if (v24[1])
  {
    uint64_t v8 = sub_21694FCFC(v5);
    uint64_t v9 = a1[2];
    *(_OWORD *)(v9 + 72) = *(_OWORD *)v8;
    long long v10 = *(_OWORD *)(v8 + 16);
    long long v11 = *(_OWORD *)(v8 + 32);
    long long v12 = *(_OWORD *)(v8 + 48);
    *(void *)(v9 + 136) = *(void *)(v8 + 64);
    *(_OWORD *)(v9 + 120) = v12;
    *(_OWORD *)(v9 + 104) = v11;
    *(_OWORD *)(v9 + 88) = v10;
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v22[0] = "ts/data.h";
    v22[1] = "SetValue";
    v22[2] = 667;
    void v22[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::"
             "SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v20);
    int v13 = v21;
    char v14 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v15 = v20;
    if (v13 < 0) {
      uint64_t v15 = v14;
    }
    if (v19 >= 0) {
      char v16 = __p;
    }
    else {
      char v16 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v15, (const char *)v16);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
  return sub_2168EE084((uint64_t)v24);
}

void sub_21695064C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_21695069C@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  a1[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  *(_OWORD *)double result = *v2;
  long long v5 = v2[2];
  long long v4 = v2[3];
  long long v6 = v2[1];
  *((void *)result + 8) = *((void *)v2 + 8);
  *((_OWORD *)result + 2) = v5;
  *((_OWORD *)result + 3) = v4;
  *((_OWORD *)result + 1) = v6;
  atomic_store(0, (unsigned int *)result + 18);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void *sub_216950710@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16) + 72;
  }
  a2[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  *(_OWORD *)double result = *(_OWORD *)v3;
  long long v6 = *(_OWORD *)(v3 + 32);
  long long v5 = *(_OWORD *)(v3 + 48);
  long long v7 = *(_OWORD *)(v3 + 16);
  *((void *)result + 8) = *(void *)(v3 + 64);
  *((_OWORD *)result + 2) = v6;
  *((_OWORD *)result + 3) = v5;
  *((_OWORD *)result + 1) = v7;
  atomic_store(0, (unsigned int *)result + 18);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void sub_216950790(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v26[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    long long v4 = sub_2169526B0(a2);
    long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v26, v4);
    if (v26[1])
    {
      uint64_t v8 = sub_21694FCFC(v5);
      uint64_t v9 = a1[2];
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
      long long v10 = *(_OWORD *)(v8 + 16);
      long long v11 = *(_OWORD *)(v8 + 32);
      long long v12 = *(_OWORD *)(v8 + 48);
      *(void *)(v9 + 64) = *(void *)(v8 + 64);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      *(_OWORD *)(v9 + 16) = v10;
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v21 = "ts/data.h";
      uint64_t v22 = "SetLeftValue";
      uint64_t v23 = 737;
      long long v24 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::S"
            "etLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      char v25 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v19);
      int v13 = v20;
      char v14 = (void **)v19[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      uint64_t v15 = v19;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v18 >= 0) {
        char v16 = __p;
      }
      else {
        char v16 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v15, (const char *)v16);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
    sub_2168EE084((uint64_t)v26);
  }
  else
  {
    char v21 = "ts/data.h";
    uint64_t v22 = "SetLeftValue";
    uint64_t v23 = 725;
    long long v24 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "LeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    char v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_2169509B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_216950A00@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  (*(void (**)(float64x2_t *__return_ptr))(*(void *)a1 + 80))(v30);
  sub_216952774((pxrInternal__aapl__pxrReserved__::VtValue *)v30, (uint64_t)v23);
  sub_2168EE084((uint64_t)v30);
  uint64_t v22 = 0;
  float64x2_t v20 = 0u;
  float64x2_t v21 = 0u;
  float64x2_t v18 = 0u;
  float64x2_t v19 = 0u;
  (*(void (**)(float64x2_t *__return_ptr, double *))(*(void *)a2 + 120))(v30, a2);
  sub_216952774((pxrInternal__aapl__pxrReserved__::VtValue *)v30, (uint64_t)&v18);
  sub_2168EE084((uint64_t)v30);
  float64x2_t v15 = v20;
  float64x2_t v16 = v21;
  uint64_t v17 = v22;
  float64x2_t v13 = v18;
  float64x2_t v14 = v19;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator-=(v13.f64, (double *)v23);
  uint64_t v30[2] = v15;
  v30[3] = v16;
  uint64_t v31 = v17;
  v30[0] = v13;
  v30[1] = v14;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(v30, 1.0 / (v5 - v6));
  long long v8 = v7[3];
  long long v27 = v7[2];
  long long v28 = v8;
  uint64_t v29 = *((void *)v7 + 8);
  long long v9 = v7[1];
  long long v25 = *v7;
  long long v26 = v9;
  a3[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  long long v11 = v28;
  *((_OWORD *)result + 2) = v27;
  *((_OWORD *)result + 3) = v11;
  *((void *)result + 8) = v29;
  long long v12 = v26;
  *(_OWORD *)double result = v25;
  *((_OWORD *)result + 1) = v12;
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void sub_216950BB8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1 - 128);
  _Unwind_Resume(a1);
}

void *sub_216950BD8@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_21694FCFC(a1);
  long long v8 = *(_OWORD *)(v7 + 48);
  long long v34 = *(_OWORD *)(v7 + 32);
  long long v35 = v8;
  uint64_t v36 = *(void *)(v7 + 64);
  long long v9 = *(_OWORD *)(v7 + 16);
  float64x2_t v32 = *(float64x2_t *)v7;
  long long v33 = v9;
  uint64_t v10 = sub_21694FCFC(a2);
  uint64_t v31 = *(void *)(v10 + 64);
  long long v11 = *(_OWORD *)(v10 + 48);
  long long v29 = *(_OWORD *)(v10 + 32);
  long long v30 = v11;
  long long v12 = *(_OWORD *)(v10 + 16);
  float64x2_t v27 = *(float64x2_t *)v10;
  long long v28 = v12;
  long long v24 = v29;
  long long v25 = v11;
  uint64_t v26 = v31;
  float64x2_t v22 = v27;
  long long v23 = v12;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v22, a4);
  v20[0] = *(_OWORD *)v13;
  long long v14 = *(_OWORD *)(v13 + 16);
  long long v15 = *(_OWORD *)(v13 + 32);
  long long v16 = *(_OWORD *)(v13 + 48);
  uint64_t v21 = *(void *)(v13 + 64);
  v20[2] = v15;
  void v20[3] = v16;
  v20[1] = v14;
  long long v24 = v34;
  long long v25 = v35;
  uint64_t v26 = v36;
  float64x2_t v22 = v32;
  long long v23 = v33;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v22.f64, (double *)v20);
  a3[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  long long v18 = v25;
  *((_OWORD *)result + 2) = v24;
  *((_OWORD *)result + 3) = v18;
  *((void *)result + 8) = v26;
  long long v19 = v23;
  *(float64x2_t *)double result = v22;
  *((_OWORD *)result + 1) = v19;
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void sub_216950D28(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::"
          "GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216950DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216950DF0(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::"
          "GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216950E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216950EB8()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::G"
          "etLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216950F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216950F7C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::G"
          "etRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216951024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216951040()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "LeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169510E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216951100()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "RightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169511A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169511C0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "LeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216951264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216951280()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "RightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216951324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216951340()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Get"
          "TangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_2169513E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216951404()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Set"
          "TangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169514A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169514C4@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x2F0uLL);
  double result = sub_216951528(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216951514(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216951528(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C7528B0;
  sub_2169515F8((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_216951578(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21695158C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7528B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169515AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7528B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2169515F8(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C752900;
  if (a2 && a3)
  {
    sub_2169518BC(a1 + 88, a1 + 152, (uint64_t)a2, a3);
    double v6 = sub_216951A3C(a1 + 88);
    if ((*(unsigned int (**)(void *, double))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v7 = a2[2];
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 72);
      long long v8 = *(_OWORD *)(v7 + 88);
      long long v9 = *(_OWORD *)(v7 + 104);
      long long v10 = *(_OWORD *)(v7 + 120);
      *(void *)(a1 + 80) = *(void *)(v7 + 136);
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  else
  {
    v12[0] = "ts/evalCache.h";
    v12[1] = "_Init";
    uint64_t v12[2] = 499;
    uint64_t v12[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfMatrix3d, true>::_I"
             "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d, IN"
             "TERPOLATABLE = true]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void *sub_216951748@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 120), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    sub_216952264(a1 + 440, (uint64_t)&v17, v11);
  }
  else
  {
    long long v12 = *(_OWORD *)(a1 + 64);
    long long v19 = *(_OWORD *)(a1 + 48);
    long long v20 = v12;
    uint64_t v21 = *(void *)(a1 + 80);
    long long v13 = *(_OWORD *)(a1 + 32);
    long long v17 = *(_OWORD *)(a1 + 16);
    long long v18 = v13;
  }
  a5[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  long long v15 = v20;
  *((_OWORD *)result + 2) = v19;
  *((_OWORD *)result + 3) = v15;
  *((void *)result + 8) = v21;
  long long v16 = v18;
  *(_OWORD *)double result = v17;
  *((_OWORD *)result + 1) = v16;
  atomic_store(0, (unsigned int *)result + 18);
  *a5 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void *sub_216951808@<X0>(void *a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::zero();
  long long v6 = v2[2];
  long long v7 = v2[3];
  uint64_t v8 = *((void *)v2 + 8);
  long long v4 = *v2;
  long long v5 = v2[1];
  a1[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  *((_OWORD *)result + 2) = v6;
  *((_OWORD *)result + 3) = v7;
  *((void *)result + 8) = v8;
  *(_OWORD *)double result = v4;
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 18);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void *sub_2169518BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  long long v11 = *(_OWORD *)(v10 + 88);
  long long v12 = *(_OWORD *)(v10 + 104);
  long long v13 = *(_OWORD *)(v10 + 120);
  *(void *)(a2 + 64) = *(void *)(v10 + 136);
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 72);
  sub_216951E7C(a3, a4, (uint64_t)&v20);
  long long v14 = v20;
  *(_OWORD *)(a2 + 88) = v21;
  long long v15 = v23;
  *(_OWORD *)(a2 + 104) = v22;
  *(_OWORD *)(a2 + 120) = v15;
  *(void *)(a2 + 136) = v24;
  *(_OWORD *)(a2 + 72) = v14;
  sub_216952058(a3, a4, (uint64_t)&v20);
  long long v16 = v23;
  *(_OWORD *)(a2 + 176) = v22;
  *(_OWORD *)(a2 + 192) = v16;
  *(void *)(a2 + 208) = v24;
  long long v17 = v21;
  *(_OWORD *)(a2 + 144) = v20;
  *(_OWORD *)(a2 + 160) = v17;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      long long v18 = *(const void **)(a4 + 16);
    }
    else {
      long long v18 = (const void *)(*(void *)(a4 + 16) + 72);
    }
  }
  else
  {
    long long v18 = (const void *)(*(void *)(a3 + 16) + 72);
  }
  return memmove((void *)(a2 + 216), v18, 0x48uLL);
}

double sub_216951A3C(uint64_t a1)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)a1 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  double v5 = *(double *)(a1 + 24);
  double v6 = *(double *)(a1 + 16) * 3.0;
  *(double *)(a1 + 48) = v4 + v3 * -6.0 + v6;
  *(double *)(a1 + 56) = v3 * 3.0 - v2 - v6 + v5;
  uint64_t v7 = a1 + 352;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 384) = v10;
  *(_OWORD *)(a1 + 400) = v9;
  *(void *)(a1 + 416) = *(void *)(a1 + 128);
  long long v11 = *(_OWORD *)(a1 + 80);
  float64x2_t v12 = *(float64x2_t *)(a1 + 64);
  *(float64x2_t *)(a1 + 352) = v12;
  *(_OWORD *)(a1 + 368) = v11;
  long long v13 = *(_OWORD *)(a1 + 112);
  long long v67 = v10;
  long long v68 = v13;
  uint64_t v69 = *(void *)(a1 + 128);
  float64x2_t v65 = v12;
  long long v66 = v8;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -3.0);
  long long v81 = *(_OWORD *)(v14 + 16);
  long long v82 = *(_OWORD *)(v14 + 32);
  long long v83 = *(_OWORD *)(v14 + 48);
  uint64_t v84 = *(void *)(v14 + 64);
  float64x2_t v80 = *(float64x2_t *)v14;
  long long v15 = *(_OWORD *)(a1 + 152);
  long long v16 = *(_OWORD *)(a1 + 184);
  long long v67 = *(_OWORD *)(a1 + 168);
  long long v68 = v16;
  uint64_t v69 = *(void *)(a1 + 200);
  float64x2_t v65 = *(float64x2_t *)(a1 + 136);
  long long v66 = v15;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  float64x2_t v75 = *(float64x2_t *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  long long v19 = *(_OWORD *)(v17 + 32);
  long long v20 = *(_OWORD *)(v17 + 48);
  uint64_t v79 = *(void *)(v17 + 64);
  long long v77 = v19;
  long long v78 = v20;
  long long v76 = v18;
  long long v67 = v82;
  long long v68 = v83;
  uint64_t v69 = v84;
  float64x2_t v65 = v80;
  long long v66 = v81;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v65.f64, v75.f64);
  float64x2_t v21 = v65;
  *(_OWORD *)(v7 + 88) = v66;
  long long v22 = v68;
  *(_OWORD *)(v7 + 104) = v67;
  *(_OWORD *)(v7 + 120) = v22;
  *(void *)(a1 + 488) = v69;
  *(float64x2_t *)(v7 + 72) = v21;
  long long v23 = *(_OWORD *)(a1 + 112);
  long long v67 = *(_OWORD *)(a1 + 96);
  long long v68 = v23;
  uint64_t v69 = *(void *)(a1 + 128);
  long long v24 = *(_OWORD *)(a1 + 80);
  float64x2_t v65 = *(float64x2_t *)(a1 + 64);
  long long v66 = v24;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  long long v76 = *(_OWORD *)(v25 + 16);
  long long v77 = *(_OWORD *)(v25 + 32);
  long long v78 = *(_OWORD *)(v25 + 48);
  uint64_t v79 = *(void *)(v25 + 64);
  float64x2_t v75 = *(float64x2_t *)v25;
  long long v26 = *(_OWORD *)(a1 + 152);
  long long v27 = *(_OWORD *)(a1 + 184);
  long long v67 = *(_OWORD *)(a1 + 168);
  long long v68 = v27;
  uint64_t v69 = *(void *)(a1 + 200);
  float64x2_t v65 = *(float64x2_t *)(a1 + 136);
  long long v66 = v26;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -6.0);
  float64x2_t v70 = *(float64x2_t *)v28;
  long long v29 = *(_OWORD *)(v28 + 16);
  long long v30 = *(_OWORD *)(v28 + 32);
  long long v31 = *(_OWORD *)(v28 + 48);
  uint64_t v74 = *(void *)(v28 + 64);
  long long v72 = v30;
  long long v73 = v31;
  long long v71 = v29;
  long long v82 = v77;
  long long v83 = v78;
  uint64_t v84 = v79;
  float64x2_t v80 = v75;
  long long v81 = v76;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v80.f64, v70.f64);
  long long v32 = *(_OWORD *)(a1 + 256);
  long long v67 = *(_OWORD *)(a1 + 240);
  long long v68 = v32;
  uint64_t v69 = *(void *)(a1 + 272);
  long long v33 = *(_OWORD *)(a1 + 224);
  float64x2_t v65 = *(float64x2_t *)(a1 + 208);
  long long v66 = v33;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  long long v60 = *v34;
  long long v35 = v34[1];
  long long v36 = v34[2];
  long long v37 = v34[3];
  uint64_t v64 = *((void *)v34 + 8);
  long long v62 = v36;
  long long v63 = v37;
  long long v61 = v35;
  long long v67 = v82;
  long long v68 = v83;
  uint64_t v69 = v84;
  float64x2_t v65 = v80;
  long long v66 = v81;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v65.f64, (double *)&v60);
  long long v38 = v68;
  *(_OWORD *)(a1 + 528) = v67;
  *(_OWORD *)(a1 + 544) = v38;
  *(void *)(a1 + 560) = v69;
  long long v39 = v66;
  *(float64x2_t *)(a1 + 496) = v65;
  *(_OWORD *)(a1 + 512) = v39;
  long long v40 = *(_OWORD *)(a1 + 112);
  long long v67 = *(_OWORD *)(a1 + 96);
  long long v68 = v40;
  uint64_t v69 = *(void *)(a1 + 128);
  long long v41 = *(_OWORD *)(a1 + 80);
  float64x2_t v65 = *(float64x2_t *)(a1 + 64);
  long long v66 = v41;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -1.0);
  long long v71 = *(_OWORD *)(v42 + 16);
  long long v72 = *(_OWORD *)(v42 + 32);
  long long v73 = *(_OWORD *)(v42 + 48);
  uint64_t v74 = *(void *)(v42 + 64);
  float64x2_t v70 = *(float64x2_t *)v42;
  long long v43 = *(_OWORD *)(a1 + 152);
  long long v44 = *(_OWORD *)(a1 + 184);
  long long v67 = *(_OWORD *)(a1 + 168);
  long long v68 = v44;
  uint64_t v69 = *(void *)(a1 + 200);
  float64x2_t v65 = *(float64x2_t *)(a1 + 136);
  long long v66 = v43;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, 3.0);
  long long v60 = *v45;
  long long v46 = v45[1];
  long long v47 = v45[2];
  long long v48 = v45[3];
  uint64_t v64 = *((void *)v45 + 8);
  long long v62 = v47;
  long long v63 = v48;
  long long v61 = v46;
  long long v77 = v72;
  long long v78 = v73;
  uint64_t v79 = v74;
  float64x2_t v75 = v70;
  long long v76 = v71;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v75.f64, (double *)&v60);
  long long v49 = *(_OWORD *)(a1 + 256);
  long long v67 = *(_OWORD *)(a1 + 240);
  long long v68 = v49;
  uint64_t v69 = *(void *)(a1 + 272);
  long long v50 = *(_OWORD *)(a1 + 224);
  float64x2_t v65 = *(float64x2_t *)(a1 + 208);
  long long v66 = v50;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v65, -3.0);
  v58[0] = *(_OWORD *)v51;
  long long v52 = *(_OWORD *)(v51 + 16);
  long long v53 = *(_OWORD *)(v51 + 32);
  long long v54 = *(_OWORD *)(v51 + 48);
  uint64_t v59 = *(void *)(v51 + 64);
  float64x2_t v58[2] = v53;
  v58[3] = v54;
  v58[1] = v52;
  long long v82 = v77;
  long long v83 = v78;
  uint64_t v84 = v79;
  float64x2_t v80 = v75;
  long long v81 = v76;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v80.f64, (double *)v58);
  long long v67 = v82;
  long long v68 = v83;
  uint64_t v69 = v84;
  float64x2_t v65 = v80;
  long long v66 = v81;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v65.f64, (double *)(a1 + 280));
  float64x2_t v55 = v65;
  *(_OWORD *)(v7 + 232) = v66;
  double result = *(double *)&v67;
  long long v57 = v68;
  *(_OWORD *)(v7 + 248) = v67;
  *(_OWORD *)(v7 + 264) = v57;
  *(void *)(a1 + 632) = v69;
  *(float64x2_t *)(v7 + 216) = v55;
  return result;
}

void sub_216951E7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    uint64_t v17 = *(void *)(a1 + 16);
    long long v18 = *(_OWORD *)(v17 + 88);
    long long v19 = *(_OWORD *)(v17 + 120);
    long long v41 = *(_OWORD *)(v17 + 104);
    long long v42 = v19;
    uint64_t v43 = *(void *)(v17 + 136);
    float64x2_t v39 = *(float64x2_t *)(v17 + 72);
    long long v40 = v18;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, 2.0);
    uint64_t v21 = *(void *)(v20 + 64);
    uint64_t v48 = v21;
    long long v23 = *(_OWORD *)(v20 + 32);
    long long v22 = *(_OWORD *)(v20 + 48);
    long long v46 = v23;
    long long v47 = v22;
    float64x2_t v25 = *(float64x2_t *)v20;
    long long v24 = *(_OWORD *)(v20 + 16);
    float64x2_t v44 = *(float64x2_t *)v20;
    long long v45 = v24;
    if (*(unsigned char *)(a2 + 68)) {
      long long v26 = *(double **)(a2 + 16);
    }
    else {
      long long v26 = (double *)(*(void *)(a2 + 16) + 72);
    }
    uint64_t v38 = v21;
    long long v36 = v23;
    long long v37 = v22;
    float64x2_t v34 = v25;
    long long v35 = v24;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v34.f64, v26);
    long long v41 = v36;
    long long v42 = v37;
    uint64_t v43 = v38;
    float64x2_t v39 = v34;
    long long v40 = v35;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, 0.333333333);
    *(_OWORD *)a3 = *(_OWORD *)v27;
    long long v29 = *(_OWORD *)(v27 + 32);
    long long v28 = *(_OWORD *)(v27 + 48);
    long long v30 = *(_OWORD *)(v27 + 16);
    *(void *)(a3 + 64) = *(void *)(v27 + 64);
    *(_OWORD *)(a3 + 32) = v29;
    *(_OWORD *)(a3 + 48) = v28;
  }
  else
  {
    if (v4 == 2)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      double v6 = *(double *)(a1 + 56);
      long long v7 = *(_OWORD *)(v5 + 232);
      long long v8 = *(_OWORD *)(v5 + 264);
      long long v41 = *(_OWORD *)(v5 + 248);
      long long v42 = v8;
      uint64_t v43 = *(void *)(v5 + 280);
      float64x2_t v39 = *(float64x2_t *)(v5 + 216);
      long long v40 = v7;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, v6);
      float64x2_t v34 = *(float64x2_t *)v9;
      long long v11 = *(_OWORD *)(v9 + 32);
      long long v10 = *(_OWORD *)(v9 + 48);
      long long v12 = *(_OWORD *)(v9 + 16);
      uint64_t v38 = *(void *)(v9 + 64);
      long long v36 = v11;
      long long v37 = v10;
      long long v35 = v12;
      *(_OWORD *)a3 = *(_OWORD *)(v5 + 72);
      long long v13 = *(_OWORD *)(v5 + 88);
      long long v14 = *(_OWORD *)(v5 + 104);
      long long v15 = *(_OWORD *)(v5 + 120);
      *(void *)(a3 + 64) = *(void *)(v5 + 136);
      *(_OWORD *)(a3 + 32) = v14;
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 16) = v13;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=((double *)a3, v34.f64);
      return;
    }
    uint64_t v31 = *(void *)(a1 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(v31 + 72);
    long long v32 = *(_OWORD *)(v31 + 104);
    long long v33 = *(_OWORD *)(v31 + 120);
    long long v30 = *(_OWORD *)(v31 + 88);
    *(void *)(a3 + 64) = *(void *)(v31 + 136);
    *(_OWORD *)(a3 + 32) = v32;
    *(_OWORD *)(a3 + 48) = v33;
  }
  *(_OWORD *)(a3 + 16) = v30;
}

void sub_216952058(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (!v4)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(v18 + 72);
    long long v19 = *(_OWORD *)(v18 + 104);
    long long v20 = *(_OWORD *)(v18 + 120);
    long long v21 = *(_OWORD *)(v18 + 88);
    *(void *)(a3 + 64) = *(void *)(v18 + 136);
    *(_OWORD *)(a3 + 32) = v19;
    *(_OWORD *)(a3 + 48) = v20;
LABEL_19:
    *(_OWORD *)(a3 + 16) = v21;
    return;
  }
  int v5 = *(_DWORD *)(a2 + 64);
  if (v5 == 1) {
    goto LABEL_10;
  }
  if (v5 != 2)
  {
    if (v4 != 1)
    {
      if (*(unsigned char *)(a2 + 68)) {
        uint64_t v37 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v37 = *(void *)(a2 + 16) + 72;
      }
      *(_OWORD *)a3 = *(_OWORD *)v37;
      long long v36 = *(_OWORD *)(v37 + 32);
      long long v35 = *(_OWORD *)(v37 + 48);
      long long v21 = *(_OWORD *)(v37 + 16);
      *(void *)(a3 + 64) = *(void *)(v37 + 64);
      goto LABEL_18;
    }
LABEL_10:
    uint64_t v22 = *(void *)(a1 + 16);
    if (*(unsigned char *)(a2 + 68)) {
      uint64_t v23 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v23 = *(void *)(a2 + 16) + 72;
    }
    float64x2_t v45 = *(float64x2_t *)v23;
    long long v24 = *(_OWORD *)(v23 + 16);
    long long v25 = *(_OWORD *)(v23 + 32);
    long long v26 = *(_OWORD *)(v23 + 48);
    uint64_t v49 = *(void *)(v23 + 64);
    long long v47 = v25;
    long long v48 = v26;
    long long v46 = v24;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v45, 2.0);
    v38[0] = *(_OWORD *)v27;
    long long v28 = *(_OWORD *)(v27 + 16);
    long long v29 = *(_OWORD *)(v27 + 32);
    long long v30 = *(_OWORD *)(v27 + 48);
    uint64_t v39 = *(void *)(v27 + 64);
    v38[2] = v29;
    v38[3] = v30;
    v38[1] = v28;
    float64x2_t v31 = *(float64x2_t *)(v22 + 72);
    uint64_t v44 = *(void *)(v22 + 136);
    long long v32 = *(_OWORD *)(v22 + 120);
    long long v42 = *(_OWORD *)(v22 + 104);
    long long v43 = v32;
    long long v33 = *(_OWORD *)(v22 + 88);
    float64x2_t v40 = v31;
    long long v41 = v33;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v40.f64, (double *)v38);
    long long v47 = v42;
    long long v48 = v43;
    uint64_t v49 = v44;
    float64x2_t v45 = v40;
    long long v46 = v41;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v45, 0.333333333);
    *(_OWORD *)a3 = *(_OWORD *)v34;
    long long v36 = *(_OWORD *)(v34 + 32);
    long long v35 = *(_OWORD *)(v34 + 48);
    long long v21 = *(_OWORD *)(v34 + 16);
    *(void *)(a3 + 64) = *(void *)(v34 + 64);
LABEL_18:
    *(_OWORD *)(a3 + 32) = v36;
    *(_OWORD *)(a3 + 48) = v35;
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 68)) {
    uint64_t v7 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v7 = v6 + 72;
  }
  double v8 = *(double *)(a2 + 48);
  long long v9 = *(_OWORD *)(v6 + 192);
  long long v47 = *(_OWORD *)(v6 + 176);
  long long v48 = v9;
  uint64_t v49 = *(void *)(v6 + 208);
  long long v10 = *(_OWORD *)(v6 + 160);
  float64x2_t v45 = *(float64x2_t *)(v6 + 144);
  long long v46 = v10;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v45, v8);
  float64x2_t v40 = *(float64x2_t *)v11;
  long long v13 = *(_OWORD *)(v11 + 32);
  long long v12 = *(_OWORD *)(v11 + 48);
  long long v14 = *(_OWORD *)(v11 + 16);
  uint64_t v44 = *(void *)(v11 + 64);
  long long v42 = v13;
  long long v43 = v12;
  long long v41 = v14;
  *(_OWORD *)a3 = *(_OWORD *)v7;
  long long v15 = *(_OWORD *)(v7 + 16);
  long long v16 = *(_OWORD *)(v7 + 32);
  long long v17 = *(_OWORD *)(v7 + 48);
  *(void *)(a3 + 64) = *(void *)(v7 + 64);
  *(_OWORD *)(a3 + 32) = v16;
  *(_OWORD *)(a3 + 48) = v17;
  *(_OWORD *)(a3 + 16) = v15;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator-=((double *)a3, v40.f64);
}

void sub_216952264(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v6 = *(_OWORD *)(a1 + 232);
  long long v7 = *(_OWORD *)(a1 + 264);
  long long v31 = *(_OWORD *)(a1 + 248);
  long long v32 = v7;
  uint64_t v33 = *(void *)(a1 + 280);
  float64x2_t v29 = *(float64x2_t *)(a1 + 216);
  long long v30 = v6;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v29, a3);
  uint64_t v38 = *(void *)(v8 + 64);
  long long v9 = *(_OWORD *)(v8 + 48);
  long long v36 = *(_OWORD *)(v8 + 32);
  long long v37 = v9;
  long long v10 = *(_OWORD *)(v8 + 16);
  float64x2_t v34 = *(float64x2_t *)v8;
  long long v35 = v10;
  float64x2_t v19 = v34;
  long long v20 = v10;
  long long v21 = v36;
  long long v22 = v9;
  uint64_t v23 = v38;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v19.f64, (double *)(a1 + 144));
  long long v31 = v21;
  long long v32 = v22;
  uint64_t v33 = v23;
  float64x2_t v29 = v19;
  long long v30 = v20;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v29, a3);
  uint64_t v43 = *(void *)(v11 + 64);
  long long v12 = *(_OWORD *)(v11 + 48);
  long long v41 = *(_OWORD *)(v11 + 32);
  long long v42 = v12;
  long long v13 = *(_OWORD *)(v11 + 16);
  float64x2_t v39 = *(float64x2_t *)v11;
  long long v40 = v13;
  float64x2_t v24 = v39;
  long long v25 = v13;
  long long v26 = v41;
  long long v27 = v12;
  uint64_t v28 = v43;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v24.f64, (double *)(a1 + 72));
  long long v31 = v26;
  long long v32 = v27;
  uint64_t v33 = v28;
  float64x2_t v29 = v24;
  long long v30 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v29, a3);
  uint64_t v48 = *((void *)v14 + 8);
  uint64_t v15 = v48;
  long long v16 = v14[3];
  long long v46 = v14[2];
  long long v47 = v16;
  long long v18 = v14[1];
  long long v44 = *v14;
  long long v17 = v44;
  long long v45 = v18;
  *(_OWORD *)(a2 + 32) = v46;
  *(_OWORD *)(a2 + 48) = v16;
  *(void *)(a2 + 64) = v15;
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=((double *)a2, (double *)a1);
}

uint64_t *sub_2169523D8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 72), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2169523F4(atomic_uint **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 18, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_21695241C(void *result, void *a2)
{
  *a2 = *result;
  *double result = 0;
  return result;
}

uint64_t sub_21695242C()
{
  return 1;
}

unint64_t sub_216952434(double **a1)
{
  return sub_2169525A4((uint64_t)&v2, *a1);
}

BOOL sub_21695245C(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(*a1, *a2);
}

BOOL sub_216952468(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(*a1, a2);
}

uint64_t sub_216952474()
{
  return 0;
}

void *sub_216952480(double **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_216952490()
{
  return &unk_26C74C5A0;
}

uint64_t sub_21695249C()
{
  return 0;
}

uint64_t sub_2169524A4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169524B0()
{
  return 0;
}

uint64_t sub_2169524B8()
{
  return 0;
}

BOOL sub_2169524C0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4256 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169524FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5A0, a2, a3);
}

void *sub_216952520()
{
  return &unk_26C74C5A0;
}

uint64_t sub_21695252C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216952534@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (char *)&off_26C752928 + 2;
  double result = operator new(0x50uLL);
  *(_OWORD *)double result = *(_OWORD *)v3;
  long long v6 = *(_OWORD *)(v3 + 32);
  long long v5 = *(_OWORD *)(v3 + 48);
  long long v7 = *(_OWORD *)(v3 + 16);
  *((void *)result + 8) = *(void *)(v3 + 64);
  *((_OWORD *)result + 2) = v6;
  *((_OWORD *)result + 3) = v5;
  *((_OWORD *)result + 1) = v7;
  atomic_store(0, (unsigned int *)result + 18);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

unint64_t sub_2169525A4(uint64_t a1, double *a2)
{
  char v4 = 0;
  uint64_t v3 = 0;
  sub_2168F6978((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t sub_216952618(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 18);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x50uLL);
    uint64_t v4 = (uint64_t)*a1;
    *(_OWORD *)uint64_t v3 = **a1;
    long long v6 = *(_OWORD *)(v4 + 32);
    long long v5 = *(_OWORD *)(v4 + 48);
    long long v7 = *(_OWORD *)(v4 + 16);
    *((void *)v3 + 8) = *(void *)(v4 + 64);
    *((_OWORD *)v3 + 2) = v6;
    *((_OWORD *)v3 + 3) = v5;
    *((_OWORD *)v3 + 1) = v7;
    atomic_store(0, (unsigned int *)v3 + 18);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 18, 1u, memory_order_relaxed);
    *a1 = v3;
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 72), 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete((void *)v4);
    }
  }
  return (uint64_t)*a1;
}

std::type_info *sub_2169526B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21695273C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C5A0, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21695273C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 77) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C5A0);
  }
  else {
    return 0;
  }
}

__n128 sub_216952774@<Q0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_21695273C(a1))
  {
    sub_216952804(a1, a2);
  }
  else
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::Invoke, (uint64_t)&stru_26C74C5A0);
    *(_OWORD *)a2 = *(_OWORD *)v5;
    long long v6 = *(_OWORD *)(v5 + 32);
    __n128 result = *(__n128 *)(v5 + 48);
    long long v7 = *(_OWORD *)(v5 + 16);
    *(void *)(a2 + 64) = *(void *)(v5 + 64);
    *(_OWORD *)(a2 + 32) = v6;
    *(__n128 *)(a2 + 48) = result;
    *(_OWORD *)(a2 + 16) = v7;
  }
  return result;
}

uint64_t sub_216952804@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_2169528D0(a1);
  long long v10 = *(_OWORD *)(result + 32);
  long long v11 = *(_OWORD *)(result + 48);
  uint64_t v12 = *(void *)(result + 64);
  long long v8 = *(_OWORD *)result;
  long long v9 = *(_OWORD *)(result + 16);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(result + 48) = v5;
  *(void *)(result + 64) = *(void *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v6;
  *(void *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 32) = v10;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v9;
  uint64_t v7 = a1[1];
  if (v7 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v7 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

uint64_t sub_2169528D0(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216952618((_OWORD **)a1);
}

void *sub_216952964(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (_OWORD *)sub_2169529A4(a2);

  return sub_216952A38(a1, v3);
}

uint64_t sub_2169529A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21695529C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Invoke, (uint64_t)&stru_26C74C5C0);
  }
}

void *sub_216952A38(void *a1, _OWORD *a2)
{
  *a1 = &unk_26C7529F0;
  a1[1] = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  long long v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  long long v6 = a2[5];
  _OWORD v20[4] = a2[4];
  unint64_t v20[5] = v6;
  long long v7 = a2[7];
  v20[6] = a2[6];
  v20[7] = v7;
  long long v8 = a2[1];
  v20[0] = *a2;
  v20[1] = v8;
  long long v9 = a2[3];
  v20[2] = a2[2];
  void v20[3] = v9;
  v20[14] = v20[6];
  v20[15] = v7;
  v20[12] = v20[4];
  v20[13] = v6;
  v20[10] = v20[2];
  v20[11] = v9;
  v20[8] = v20[0];
  v20[9] = v8;
  long long v10 = v4[1];
  v20[16] = *v4;
  v20[17] = v10;
  long long v11 = v4[7];
  v20[22] = v4[6];
  v20[23] = v11;
  long long v12 = v4[5];
  v20[20] = v4[4];
  v20[21] = v12;
  long long v13 = v4[3];
  v20[18] = v4[2];
  v20[19] = v13;
  long long v14 = v5[7];
  v20[30] = v5[6];
  v20[31] = v14;
  long long v15 = v5[5];
  v20[28] = v5[4];
  v20[29] = v15;
  long long v16 = v5[3];
  v20[26] = v5[2];
  v20[27] = v16;
  long long v17 = v5[1];
  v20[24] = *v5;
  v20[25] = v17;
  long long v18 = operator new(0x200uLL);
  memcpy(v18, v20, 0x200uLL);
  a1[2] = v18;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_216952B30(void *a1)
{
  *a1 = &unk_26C7529F0;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216952B80(void *__p)
{
  void *__p = &unk_26C7529F0;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_216952BE0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C7529F0;
  uint64_t v4 = operator new(0x200uLL);
  memcpy(v4, *(const void **)(a1 + 16), 0x200uLL);
  *(void *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(a1 + 62);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 62) = v5;
  return result;
}

double sub_216952C5C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_2169541C4(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void *sub_216952CA8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  sub_2169542F8((uint64_t)v18, a1, a2);
  if (v18[8])
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic(v27, v6, a4, v7, v8);
    double v10 = 1.0;
    if (v9 <= 1.0) {
      double v10 = v9;
    }
    BOOL v11 = v9 < 0.0;
    double v12 = 0.0;
    if (!v11) {
      double v12 = v10;
    }
    sub_21695503C(v28, (uint64_t)&v29, v12);
  }
  else
  {
    long long v33 = v23;
    long long v34 = v24;
    long long v35 = v25;
    long long v36 = v26;
    long long v29 = v19;
    long long v30 = v20;
    long long v31 = v21;
    long long v32 = v22;
  }
  a3[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  long long v14 = v34;
  *((_OWORD *)result + 4) = v33;
  *((_OWORD *)result + 5) = v14;
  long long v15 = v36;
  *((_OWORD *)result + 6) = v35;
  *((_OWORD *)result + 7) = v15;
  long long v16 = v30;
  *(_OWORD *)double result = v29;
  *((_OWORD *)result + 1) = v16;
  long long v17 = v32;
  *((_OWORD *)result + 2) = v31;
  *((_OWORD *)result + 3) = v17;
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void *sub_216952DA0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  sub_2169542F8((uint64_t)&v14, a1, a2);
  uint64_t v4 = (long long *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  long long v5 = v4[5];
  long long v19 = v4[4];
  long long v20 = v5;
  long long v6 = v4[7];
  long long v21 = v4[6];
  long long v22 = v6;
  long long v7 = v4[1];
  long long v15 = *v4;
  long long v16 = v7;
  long long v8 = v4[3];
  long long v17 = v4[2];
  long long v18 = v8;
  a3[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  long long v10 = v20;
  *((_OWORD *)result + 4) = v19;
  *((_OWORD *)result + 5) = v10;
  long long v11 = v22;
  *((_OWORD *)result + 6) = v21;
  *((_OWORD *)result + 7) = v11;
  long long v12 = v16;
  *(_OWORD *)double result = v15;
  *((_OWORD *)result + 1) = v12;
  long long v13 = v18;
  *((_OWORD *)result + 2) = v17;
  *((_OWORD *)result + 3) = v13;
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void sub_216952E78(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::S"
            "etKnotType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216952F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216952F48(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        long long v10 = v15;
      }
      else {
        long long v10 = v7;
      }
      if (v14 >= 0) {
        long long v11 = __p;
      }
      else {
        long long v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216953094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169530C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(_OWORD **)(a1 + 16);
  a2[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  long long v5 = v3[11];
  long long v7 = v3[8];
  long long v6 = v3[9];
  *((_OWORD *)result + 2) = v3[10];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)double result = v7;
  *((_OWORD *)result + 1) = v6;
  long long v8 = v3[15];
  long long v10 = v3[12];
  long long v9 = v3[13];
  *((_OWORD *)result + 6) = v3[14];
  *((_OWORD *)result + 7) = v8;
  *((_OWORD *)result + 4) = v10;
  *((_OWORD *)result + 5) = v9;
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216953138(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v27[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_216955210(a2);
  long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v27, v4);
  if (v27[1])
  {
    long long v8 = (long long *)sub_2169529A4(v5);
    long long v9 = (_OWORD *)a1[2];
    long long v10 = *v8;
    long long v11 = v8[1];
    long long v12 = v8[3];
    v9[10] = v8[2];
    v9[11] = v12;
    unsigned char v9[8] = v10;
    v9[9] = v11;
    long long v13 = v8[4];
    long long v14 = v8[5];
    long long v15 = v8[7];
    v9[14] = v8[6];
    v9[15] = v15;
    v9[12] = v13;
    v9[13] = v14;
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v25[0] = "ts/data.h";
    v25[1] = "SetValue";
    v25[2] = 667;
    uint64_t v25[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::"
             "SetValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v23);
    int v16 = v24;
    long long v17 = (void **)v23[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v18 = v23;
    if (v16 < 0) {
      uint64_t v18 = v17;
    }
    if (v22 >= 0) {
      long long v19 = __p;
    }
    else {
      long long v19 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v18, (const char *)v19);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
  return sub_2168EE084((uint64_t)v27);
}

void sub_2169532F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_216953340@<X0>(void *a1@<X8>)
{
  int v2 = (long long *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  a1[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  long long v4 = v2[3];
  long long v6 = *v2;
  long long v5 = v2[1];
  *((_OWORD *)result + 2) = v2[2];
  *((_OWORD *)result + 3) = v4;
  *(_OWORD *)double result = v6;
  *((_OWORD *)result + 1) = v5;
  long long v7 = v2[7];
  long long v9 = v2[4];
  long long v8 = v2[5];
  *((_OWORD *)result + 6) = v2[6];
  *((_OWORD *)result + 7) = v7;
  *((_OWORD *)result + 4) = v9;
  *((_OWORD *)result + 5) = v8;
  atomic_store(0, (unsigned int *)result + 32);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void *sub_2169533B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(long long **)(a1 + 16);
  }
  else {
    uint64_t v3 = (long long *)(*(void *)(a1 + 16) + 128);
  }
  a2[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  long long v5 = v3[3];
  long long v7 = *v3;
  long long v6 = v3[1];
  *((_OWORD *)result + 2) = v3[2];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)double result = v7;
  *((_OWORD *)result + 1) = v6;
  long long v8 = v3[7];
  long long v10 = v3[4];
  long long v9 = v3[5];
  *((_OWORD *)result + 6) = v3[6];
  *((_OWORD *)result + 7) = v8;
  *((_OWORD *)result + 4) = v10;
  *((_OWORD *)result + 5) = v9;
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void sub_216953434(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v29[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    long long v4 = sub_216955210(a2);
    long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v29, v4);
    if (v29[1])
    {
      long long v8 = (long long *)sub_2169529A4(v5);
      long long v9 = (_OWORD *)a1[2];
      long long v10 = *v8;
      long long v11 = v8[1];
      long long v12 = v8[3];
      v9[2] = v8[2];
      v9[3] = v12;
      *long long v9 = v10;
      v9[1] = v11;
      long long v13 = v8[4];
      long long v14 = v8[5];
      long long v15 = v8[7];
      unint64_t v9[6] = v8[6];
      v9[7] = v15;
      void v9[4] = v13;
      unint64_t v9[5] = v14;
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v24 = "ts/data.h";
      long long v25 = "SetLeftValue";
      uint64_t v26 = 737;
      long long v27 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::S"
            "etLeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      char v28 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v22);
      int v16 = v23;
      long long v17 = (void **)v22[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      uint64_t v18 = v22;
      if (v16 < 0) {
        uint64_t v18 = v17;
      }
      if (v21 >= 0) {
        long long v19 = __p;
      }
      else {
        long long v19 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v18, (const char *)v19);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    sub_2168EE084((uint64_t)v29);
  }
  else
  {
    char v24 = "ts/data.h";
    long long v25 = "SetLeftValue";
    uint64_t v26 = 725;
    long long v27 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "LeftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_216953654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_2169536A4@<X0>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  double v5 = a2[1];
  double v6 = a1[1];
  memset(v33, 0, sizeof(v33));
  (*(void (**)(float64x2_t *__return_ptr))(*(void *)a1 + 80))(v42);
  sub_2169552D4((pxrInternal__aapl__pxrReserved__::VtValue *)v42, (uint64_t)v33);
  sub_2168EE084((uint64_t)v42);
  float64x2_t v31 = 0u;
  float64x2_t v32 = 0u;
  float64x2_t v29 = 0u;
  float64x2_t v30 = 0u;
  float64x2_t v27 = 0u;
  float64x2_t v28 = 0u;
  float64x2_t v25 = 0u;
  float64x2_t v26 = 0u;
  (*(void (**)(float64x2_t *__return_ptr, double *))(*(void *)a2 + 120))(v42, a2);
  sub_2169552D4((pxrInternal__aapl__pxrReserved__::VtValue *)v42, (uint64_t)&v25);
  sub_2168EE084((uint64_t)v42);
  float64x2_t v21 = v29;
  float64x2_t v22 = v30;
  float64x2_t v23 = v31;
  float64x2_t v24 = v32;
  float64x2_t v17 = v25;
  float64x2_t v18 = v26;
  float64x2_t v19 = v27;
  float64x2_t v20 = v28;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator-=(v17.f64, (double *)v33);
  v42[4] = v21;
  v42[5] = v22;
  v42[6] = v23;
  v42[7] = v24;
  v42[0] = v17;
  v42[1] = v18;
  void v42[2] = v19;
  v42[3] = v20;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v42, 1.0 / (v5 - v6));
  long long v8 = v7[5];
  long long v38 = v7[4];
  long long v39 = v8;
  long long v9 = v7[7];
  long long v40 = v7[6];
  long long v41 = v9;
  long long v10 = v7[1];
  long long v34 = *v7;
  long long v35 = v10;
  long long v11 = v7[3];
  long long v36 = v7[2];
  long long v37 = v11;
  a3[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  long long v13 = v39;
  *((_OWORD *)result + 4) = v38;
  *((_OWORD *)result + 5) = v13;
  long long v14 = v41;
  *((_OWORD *)result + 6) = v40;
  *((_OWORD *)result + 7) = v14;
  long long v15 = v35;
  *(_OWORD *)double result = v34;
  *((_OWORD *)result + 1) = v15;
  long long v16 = v37;
  *((_OWORD *)result + 2) = v36;
  *((_OWORD *)result + 3) = v16;
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void sub_216953884(_Unwind_Exception *a1)
{
  sub_2168EE084(v1 - 192);
  _Unwind_Resume(a1);
}

void *sub_2169538A4@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  long long v7 = (float64x2_t *)sub_2169529A4(a1);
  float64x2_t v8 = v7[5];
  float64x2_t v50 = v7[4];
  float64x2_t v51 = v8;
  float64x2_t v9 = v7[7];
  float64x2_t v52 = v7[6];
  float64x2_t v53 = v9;
  float64x2_t v10 = v7[1];
  float64x2_t v46 = *v7;
  float64x2_t v47 = v10;
  float64x2_t v11 = v7[3];
  float64x2_t v48 = v7[2];
  float64x2_t v49 = v11;
  long long v12 = (float64x2_t *)sub_2169529A4(a2);
  float64x2_t v13 = v12[5];
  float64x2_t v42 = v12[4];
  float64x2_t v43 = v13;
  float64x2_t v14 = v12[7];
  float64x2_t v44 = v12[6];
  float64x2_t v45 = v14;
  float64x2_t v15 = v12[1];
  float64x2_t v38 = *v12;
  float64x2_t v39 = v15;
  float64x2_t v16 = v12[3];
  float64x2_t v40 = v12[2];
  float64x2_t v41 = v16;
  float64x2_t v34 = v42;
  float64x2_t v35 = v43;
  float64x2_t v36 = v44;
  float64x2_t v37 = v45;
  float64x2_t v30 = v38;
  float64x2_t v31 = v39;
  float64x2_t v32 = v40;
  float64x2_t v33 = v16;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v30, a4);
  long long v18 = *v17;
  long long v19 = v17[1];
  long long v20 = v17[3];
  uint64_t v29[2] = v17[2];
  void v29[3] = v20;
  v29[0] = v18;
  v29[1] = v19;
  long long v21 = v17[4];
  long long v22 = v17[5];
  long long v23 = v17[7];
  v29[6] = v17[6];
  v29[7] = v23;
  void v29[4] = v21;
  v29[5] = v22;
  float64x2_t v34 = v50;
  float64x2_t v35 = v51;
  float64x2_t v36 = v52;
  float64x2_t v37 = v53;
  float64x2_t v30 = v46;
  float64x2_t v31 = v47;
  float64x2_t v32 = v48;
  float64x2_t v33 = v49;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v30.f64, (double *)v29);
  a3[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  float64x2_t v25 = v35;
  *((float64x2_t *)result + 4) = v34;
  *((float64x2_t *)result + 5) = v25;
  float64x2_t v26 = v37;
  *((float64x2_t *)result + 6) = v36;
  *((float64x2_t *)result + 7) = v26;
  float64x2_t v27 = v31;
  *(float64x2_t *)double result = v30;
  *((float64x2_t *)result + 1) = v27;
  float64x2_t v28 = v33;
  *((float64x2_t *)result + 2) = v32;
  *((float64x2_t *)result + 3) = v28;
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void sub_216953A28(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::"
          "GetLeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216953AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216953AF0(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::"
          "GetRightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216953B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216953BB8()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::G"
          "etLeftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216953C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216953C7C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::G"
          "etRightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216953D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216953D40()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "LeftTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216953DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216953E00()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "RightTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216953EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216953EC0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "LeftTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216953F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216953F80()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "RightTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216954024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216954040()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Get"
          "TangentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_2169540E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216954104()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Set"
          "TangentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169541A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169541C4@<X0>(void **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x4E8uLL);
  double result = sub_216954228(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216954214(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216954228(void *a1, void **a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C752B38;
  sub_2169542F8((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_216954278(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21695428C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169542AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752B38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2169542F8(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C752B88;
  if (a2 && a3)
  {
    sub_2169545D8(a1 + 144, (_OWORD *)(a1 + 208), (uint64_t)a2, a3);
    float64_t v6 = sub_216954750(a1 + 144);
    if ((*(unsigned int (**)(void *, float64_t))(*a2 + 152))(a2, v6)
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 152))(a3))
    {
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
      long long v7 = (_OWORD *)a2[2];
      long long v9 = v7[10];
      long long v8 = v7[11];
      long long v10 = v7[9];
      *(_OWORD *)(a1 + 16) = v7[8];
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 64) = v8;
      long long v11 = v7[12];
      long long v12 = v7[13];
      long long v13 = v7[15];
      *(_OWORD *)(a1 + 112) = v7[14];
      *(_OWORD *)(a1 + 128) = v13;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v12;
    }
  }
  else
  {
    v15[0] = "ts/evalCache.h";
    v15[1] = "_Init";
    void v15[2] = 499;
    void v15[3] = "void pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::GfMatrix4d, true>::_I"
             "nit(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d, IN"
             "TERPOLATABLE = true]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void *sub_216954444@<X0>(uint64_t a1@<X0>, const double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Ts_SolveCubic((float64x2_t *)(a1 + 176), a2, a6, a3, a4);
    double v9 = 1.0;
    if (v8 <= 1.0) {
      double v9 = v8;
    }
    BOOL v10 = v8 < 0.0;
    double v11 = 0.0;
    if (!v10) {
      double v11 = v9;
    }
    sub_21695503C((float64x2_t *)(a1 + 720), (uint64_t)&v21, v11);
  }
  else
  {
    long long v12 = *(_OWORD *)(a1 + 96);
    long long v25 = *(_OWORD *)(a1 + 80);
    long long v26 = v12;
    long long v13 = *(_OWORD *)(a1 + 128);
    long long v27 = *(_OWORD *)(a1 + 112);
    long long v28 = v13;
    long long v14 = *(_OWORD *)(a1 + 32);
    long long v21 = *(_OWORD *)(a1 + 16);
    long long v22 = v14;
    long long v15 = *(_OWORD *)(a1 + 64);
    long long v23 = *(_OWORD *)(a1 + 48);
    long long v24 = v15;
  }
  a5[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  long long v17 = v26;
  *((_OWORD *)result + 4) = v25;
  *((_OWORD *)result + 5) = v17;
  long long v18 = v28;
  *((_OWORD *)result + 6) = v27;
  *((_OWORD *)result + 7) = v18;
  long long v19 = v22;
  *(_OWORD *)double result = v21;
  *((_OWORD *)result + 1) = v19;
  long long v20 = v24;
  *((_OWORD *)result + 2) = v23;
  *((_OWORD *)result + 3) = v20;
  atomic_store(0, (unsigned int *)result + 32);
  *a5 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void *sub_216954514@<X0>(void *a1@<X8>)
{
  char v2 = (long long *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::zero();
  long long v8 = v2[4];
  long long v9 = v2[5];
  long long v10 = v2[6];
  long long v11 = v2[7];
  long long v4 = *v2;
  long long v5 = v2[1];
  long long v6 = v2[2];
  long long v7 = v2[3];
  a1[1] = (char *)&off_26C74E928 + 2;
  double result = operator new(0x88uLL);
  *((_OWORD *)result + 4) = v8;
  *((_OWORD *)result + 5) = v9;
  *((_OWORD *)result + 6) = v10;
  *((_OWORD *)result + 7) = v11;
  *(_OWORD *)double result = v4;
  *((_OWORD *)result + 1) = v5;
  *((_OWORD *)result + 2) = v6;
  *((_OWORD *)result + 3) = v7;
  atomic_store(0, (unsigned int *)result + 32);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void *sub_2169545D8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 64);
  double v8 = *(double *)(a3 + 8);
  if (v7 == 2)
  {
    *(double *)(a1 + 8) = v8 + *(double *)(a3 + 56);
  }
  else
  {
    *(double *)(a1 + 8) = (v8 + v8 + *(double *)(a4 + 8)) / 3.0;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a4 + 64) == 2)
  {
    double v9 = *(double *)(a4 + 8) - *(double *)(a4 + 48);
    goto LABEL_7;
  }
LABEL_6:
  double v9 = (*(double *)(a3 + 8) + *(double *)(a4 + 8) + *(double *)(a4 + 8)) / 3.0;
LABEL_7:
  *(double *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = *(void *)(a4 + 8);
  long long v10 = *(_OWORD **)(a3 + 16);
  long long v11 = v10[8];
  long long v13 = v10[10];
  long long v12 = v10[11];
  a2[1] = v10[9];
  a2[2] = v13;
  *a2 = v11;
  long long v14 = v10[12];
  long long v15 = v10[13];
  long long v16 = v10[15];
  a2[6] = v10[14];
  a2[7] = v16;
  a2[4] = v14;
  a2[5] = v15;
  a2[3] = v12;
  sub_216954C38(a3, a4, (uint64_t)&v27);
  long long v17 = v32;
  a2[12] = v31;
  a2[13] = v17;
  long long v18 = v34;
  a2[14] = v33;
  a2[15] = v18;
  long long v19 = v28;
  a2[8] = v27;
  a2[9] = v19;
  long long v20 = v30;
  a2[10] = v29;
  a2[11] = v20;
  sub_216954E28(a3, a4, (uint64_t)&v27);
  long long v21 = v32;
  a2[20] = v31;
  a2[21] = v21;
  long long v22 = v34;
  a2[22] = v33;
  a2[23] = v22;
  long long v23 = v28;
  a2[16] = v27;
  a2[17] = v23;
  long long v24 = v30;
  a2[18] = v29;
  a2[19] = v24;
  if (*(_DWORD *)(a3 + 64))
  {
    if (*(unsigned char *)(a4 + 68)) {
      long long v25 = *(const void **)(a4 + 16);
    }
    else {
      long long v25 = (const void *)(*(void *)(a4 + 16) + 128);
    }
  }
  else
  {
    long long v25 = (const void *)(*(void *)(a3 + 16) + 128);
  }
  return memmove(a2 + 24, v25, 0x80uLL);
}

float64_t sub_216954750(uint64_t a1)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)a1 * 3.0;
  double v5 = v3 * 3.0;
  *(void *)(a1 + 32) = *(void *)a1;
  *(double *)(a1 + 40) = v3 * 3.0 - v4;
  double v6 = *(double *)(a1 + 16) * 3.0;
  double v7 = v4 + v3 * -6.0 + v6;
  double v8 = v5 - v2 - v6 + *(double *)(a1 + 24);
  *(double *)(a1 + 48) = v7;
  *(double *)(a1 + 56) = v8;
  float64x2_t v10 = *(float64x2_t *)(a1 + 128);
  long long v9 = *(_OWORD *)(a1 + 144);
  float64x2_t v11 = *(float64x2_t *)(a1 + 112);
  *(float64x2_t *)(a1 + 640) = v10;
  *(_OWORD *)(a1 + 656) = v9;
  float64x2_t v12 = *(float64x2_t *)(a1 + 144);
  float64x2_t v14 = *(float64x2_t *)(a1 + 160);
  long long v13 = *(_OWORD *)(a1 + 176);
  *(float64x2_t *)(a1 + 672) = v14;
  *(_OWORD *)(a1 + 688) = v13;
  long long v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 592) = v15;
  long long v16 = *(_OWORD *)(a1 + 112);
  float64x2_t v18 = *(float64x2_t *)(a1 + 64);
  float64x2_t v17 = *(float64x2_t *)(a1 + 80);
  float64x2_t v19 = *(float64x2_t *)(a1 + 96);
  *(float64x2_t *)(a1 + 608) = v19;
  *(_OWORD *)(a1 + 624) = v16;
  float64x2_t v113 = v10;
  float64x2_t v114 = v12;
  float64x2_t v20 = *(float64x2_t *)(a1 + 176);
  float64x2_t v115 = v14;
  float64x2_t v116 = v20;
  float64x2_t v109 = v18;
  float64x2_t v110 = v17;
  float64x2_t v111 = v19;
  float64x2_t v112 = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -3.0);
  float64x2_t v137 = v21[4];
  float64x2_t v138 = v21[5];
  float64x2_t v139 = v21[6];
  float64x2_t v140 = v21[7];
  float64x2_t v133 = *v21;
  float64x2_t v134 = v21[1];
  float64x2_t v135 = v21[2];
  float64x2_t v136 = v21[3];
  float64x2_t v22 = *(float64x2_t *)(a1 + 272);
  float64x2_t v113 = *(float64x2_t *)(a1 + 256);
  float64x2_t v114 = v22;
  float64x2_t v23 = *(float64x2_t *)(a1 + 304);
  float64x2_t v115 = *(float64x2_t *)(a1 + 288);
  float64x2_t v116 = v23;
  float64x2_t v24 = *(float64x2_t *)(a1 + 208);
  float64x2_t v109 = *(float64x2_t *)(a1 + 192);
  float64x2_t v110 = v24;
  float64x2_t v25 = *(float64x2_t *)(a1 + 240);
  float64x2_t v111 = *(float64x2_t *)(a1 + 224);
  float64x2_t v112 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  float64x2_t v27 = *v26;
  float64x2_t v28 = v26[1];
  float64x2_t v29 = v26[3];
  float64x2_t v127 = v26[2];
  float64x2_t v128 = v29;
  float64x2_t v125 = v27;
  float64x2_t v126 = v28;
  float64x2_t v30 = v26[4];
  float64x2_t v31 = v26[5];
  float64x2_t v32 = v26[7];
  float64x2_t v131 = v26[6];
  float64x2_t v132 = v32;
  float64x2_t v129 = v30;
  float64x2_t v130 = v31;
  float64x2_t v115 = v139;
  float64x2_t v116 = v140;
  float64x2_t v113 = v137;
  float64x2_t v114 = v138;
  float64x2_t v111 = v135;
  float64x2_t v112 = v136;
  float64x2_t v109 = v133;
  float64x2_t v110 = v134;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v109.f64, v125.f64);
  float64x2_t v33 = v114;
  *(float64x2_t *)(a1 + 768) = v113;
  *(float64x2_t *)(a1 + 784) = v33;
  float64x2_t v34 = v116;
  *(float64x2_t *)(a1 + 800) = v115;
  *(float64x2_t *)(a1 + 816) = v34;
  float64x2_t v35 = v110;
  *(float64x2_t *)(a1 + 704) = v109;
  *(float64x2_t *)(a1 + 720) = v35;
  float64x2_t v36 = v112;
  *(float64x2_t *)(a1 + 736) = v111;
  *(float64x2_t *)(a1 + 752) = v36;
  float64x2_t v37 = *(float64x2_t *)(a1 + 144);
  float64x2_t v113 = *(float64x2_t *)(a1 + 128);
  float64x2_t v114 = v37;
  float64x2_t v38 = *(float64x2_t *)(a1 + 176);
  float64x2_t v115 = *(float64x2_t *)(a1 + 160);
  float64x2_t v116 = v38;
  float64x2_t v39 = *(float64x2_t *)(a1 + 80);
  float64x2_t v109 = *(float64x2_t *)(a1 + 64);
  float64x2_t v110 = v39;
  float64x2_t v40 = *(float64x2_t *)(a1 + 112);
  float64x2_t v111 = *(float64x2_t *)(a1 + 96);
  float64x2_t v112 = v40;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  float64x2_t v129 = v41[4];
  float64x2_t v130 = v41[5];
  float64x2_t v131 = v41[6];
  float64x2_t v132 = v41[7];
  float64x2_t v125 = *v41;
  float64x2_t v126 = v41[1];
  float64x2_t v127 = v41[2];
  float64x2_t v128 = v41[3];
  float64x2_t v42 = *(float64x2_t *)(a1 + 272);
  float64x2_t v113 = *(float64x2_t *)(a1 + 256);
  float64x2_t v114 = v42;
  float64x2_t v43 = *(float64x2_t *)(a1 + 304);
  float64x2_t v115 = *(float64x2_t *)(a1 + 288);
  float64x2_t v116 = v43;
  float64x2_t v44 = *(float64x2_t *)(a1 + 208);
  float64x2_t v109 = *(float64x2_t *)(a1 + 192);
  float64x2_t v110 = v44;
  float64x2_t v45 = *(float64x2_t *)(a1 + 240);
  float64x2_t v111 = *(float64x2_t *)(a1 + 224);
  float64x2_t v112 = v45;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -6.0);
  float64x2_t v47 = *v46;
  float64x2_t v48 = v46[1];
  float64x2_t v49 = v46[3];
  float64x2_t v119 = v46[2];
  float64x2_t v120 = v49;
  float64x2_t v117 = v47;
  float64x2_t v118 = v48;
  float64x2_t v50 = v46[4];
  float64x2_t v51 = v46[5];
  float64x2_t v52 = v46[7];
  float64x2_t v123 = v46[6];
  float64x2_t v124 = v52;
  float64x2_t v121 = v50;
  float64x2_t v122 = v51;
  float64x2_t v139 = v131;
  float64x2_t v140 = v132;
  float64x2_t v137 = v129;
  float64x2_t v138 = v130;
  float64x2_t v135 = v127;
  float64x2_t v136 = v128;
  float64x2_t v133 = v125;
  float64x2_t v134 = v126;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v133.f64, v117.f64);
  float64x2_t v53 = *(float64x2_t *)(a1 + 400);
  float64x2_t v113 = *(float64x2_t *)(a1 + 384);
  float64x2_t v114 = v53;
  float64x2_t v54 = *(float64x2_t *)(a1 + 432);
  float64x2_t v115 = *(float64x2_t *)(a1 + 416);
  float64x2_t v116 = v54;
  float64x2_t v55 = *(float64x2_t *)(a1 + 336);
  float64x2_t v109 = *(float64x2_t *)(a1 + 320);
  float64x2_t v110 = v55;
  float64x2_t v56 = *(float64x2_t *)(a1 + 368);
  float64x2_t v111 = *(float64x2_t *)(a1 + 352);
  float64x2_t v112 = v56;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  long long v58 = *v57;
  long long v59 = v57[1];
  long long v60 = v57[3];
  long long v103 = v57[2];
  long long v104 = v60;
  long long v101 = v58;
  long long v102 = v59;
  long long v61 = v57[4];
  long long v62 = v57[5];
  long long v63 = v57[7];
  long long v107 = v57[6];
  long long v108 = v63;
  long long v105 = v61;
  long long v106 = v62;
  float64x2_t v115 = v139;
  float64x2_t v116 = v140;
  float64x2_t v113 = v137;
  float64x2_t v114 = v138;
  float64x2_t v111 = v135;
  float64x2_t v112 = v136;
  float64x2_t v109 = v133;
  float64x2_t v110 = v134;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v109.f64, (double *)&v101);
  float64x2_t v64 = v114;
  *(float64x2_t *)(a1 + 896) = v113;
  *(float64x2_t *)(a1 + 912) = v64;
  float64x2_t v65 = v116;
  *(float64x2_t *)(a1 + 928) = v115;
  *(float64x2_t *)(a1 + 944) = v65;
  float64x2_t v66 = v110;
  *(float64x2_t *)(a1 + 832) = v109;
  *(float64x2_t *)(a1 + 848) = v66;
  float64x2_t v67 = v112;
  *(float64x2_t *)(a1 + 864) = v111;
  *(float64x2_t *)(a1 + 880) = v67;
  float64x2_t v68 = *(float64x2_t *)(a1 + 144);
  float64x2_t v113 = *(float64x2_t *)(a1 + 128);
  float64x2_t v114 = v68;
  float64x2_t v69 = *(float64x2_t *)(a1 + 176);
  float64x2_t v115 = *(float64x2_t *)(a1 + 160);
  float64x2_t v116 = v69;
  float64x2_t v70 = *(float64x2_t *)(a1 + 80);
  float64x2_t v109 = *(float64x2_t *)(a1 + 64);
  float64x2_t v110 = v70;
  float64x2_t v71 = *(float64x2_t *)(a1 + 112);
  float64x2_t v111 = *(float64x2_t *)(a1 + 96);
  float64x2_t v112 = v71;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -1.0);
  float64x2_t v121 = v72[4];
  float64x2_t v122 = v72[5];
  float64x2_t v123 = v72[6];
  float64x2_t v124 = v72[7];
  float64x2_t v117 = *v72;
  float64x2_t v118 = v72[1];
  float64x2_t v119 = v72[2];
  float64x2_t v120 = v72[3];
  float64x2_t v73 = *(float64x2_t *)(a1 + 272);
  float64x2_t v113 = *(float64x2_t *)(a1 + 256);
  float64x2_t v114 = v73;
  float64x2_t v74 = *(float64x2_t *)(a1 + 304);
  float64x2_t v115 = *(float64x2_t *)(a1 + 288);
  float64x2_t v116 = v74;
  float64x2_t v75 = *(float64x2_t *)(a1 + 208);
  float64x2_t v109 = *(float64x2_t *)(a1 + 192);
  float64x2_t v110 = v75;
  float64x2_t v76 = *(float64x2_t *)(a1 + 240);
  float64x2_t v111 = *(float64x2_t *)(a1 + 224);
  float64x2_t v112 = v76;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, 3.0);
  long long v78 = *v77;
  long long v79 = v77[1];
  long long v80 = v77[3];
  long long v103 = v77[2];
  long long v104 = v80;
  long long v101 = v78;
  long long v102 = v79;
  long long v81 = v77[4];
  long long v82 = v77[5];
  long long v83 = v77[7];
  long long v107 = v77[6];
  long long v108 = v83;
  long long v105 = v81;
  long long v106 = v82;
  float64x2_t v131 = v123;
  float64x2_t v132 = v124;
  float64x2_t v129 = v121;
  float64x2_t v130 = v122;
  float64x2_t v127 = v119;
  float64x2_t v128 = v120;
  float64x2_t v125 = v117;
  float64x2_t v126 = v118;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v125.f64, (double *)&v101);
  float64x2_t v84 = *(float64x2_t *)(a1 + 400);
  float64x2_t v113 = *(float64x2_t *)(a1 + 384);
  float64x2_t v114 = v84;
  float64x2_t v85 = *(float64x2_t *)(a1 + 432);
  float64x2_t v115 = *(float64x2_t *)(a1 + 416);
  float64x2_t v116 = v85;
  float64x2_t v86 = *(float64x2_t *)(a1 + 336);
  float64x2_t v109 = *(float64x2_t *)(a1 + 320);
  float64x2_t v110 = v86;
  float64x2_t v87 = *(float64x2_t *)(a1 + 368);
  float64x2_t v111 = *(float64x2_t *)(a1 + 352);
  float64x2_t v112 = v87;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v109, -3.0);
  long long v89 = *v88;
  long long v90 = v88[1];
  long long v91 = v88[3];
  v100[2] = v88[2];
  v100[3] = v91;
  v100[0] = v89;
  v100[1] = v90;
  long long v92 = v88[4];
  long long v93 = v88[5];
  long long v94 = v88[7];
  v100[6] = v88[6];
  v100[7] = v94;
  v100[4] = v92;
  v100[5] = v93;
  float64x2_t v139 = v131;
  float64x2_t v140 = v132;
  float64x2_t v137 = v129;
  float64x2_t v138 = v130;
  float64x2_t v135 = v127;
  float64x2_t v136 = v128;
  float64x2_t v133 = v125;
  float64x2_t v134 = v126;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v133.f64, (double *)v100);
  float64x2_t v113 = v137;
  float64x2_t v114 = v138;
  float64x2_t v115 = v139;
  float64x2_t v116 = v140;
  float64x2_t v109 = v133;
  float64x2_t v110 = v134;
  float64x2_t v111 = v135;
  float64x2_t v112 = v136;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v109.f64, (double *)(a1 + 448));
  float64x2_t v95 = v114;
  *(float64x2_t *)(a1 + 1024) = v113;
  *(float64x2_t *)(a1 + 1040) = v95;
  float64x2_t v96 = v116;
  *(float64x2_t *)(a1 + 1056) = v115;
  *(float64x2_t *)(a1 + 1072) = v96;
  float64x2_t v97 = v110;
  *(float64x2_t *)(a1 + 960) = v109;
  *(float64x2_t *)(a1 + 976) = v97;
  float64_t result = v111.f64[0];
  float64x2_t v99 = v112;
  *(float64x2_t *)(a1 + 992) = v111;
  *(float64x2_t *)(a1 + 1008) = v99;
  return result;
}

void sub_216954C38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4 == 1)
  {
    float64x2_t v25 = *(float64x2_t **)(a1 + 16);
    float64x2_t v26 = v25[13];
    float64x2_t v60 = v25[12];
    float64x2_t v61 = v26;
    float64x2_t v27 = v25[15];
    float64x2_t v62 = v25[14];
    float64x2_t v63 = v27;
    float64x2_t v28 = v25[9];
    float64x2_t v56 = v25[8];
    float64x2_t v57 = v28;
    float64x2_t v29 = v25[11];
    float64x2_t v58 = v25[10];
    float64x2_t v59 = v29;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, 2.0);
    float64x2_t v31 = v30[5];
    float64x2_t v68 = v30[4];
    float64x2_t v69 = v31;
    float64x2_t v32 = v30[7];
    float64x2_t v70 = v30[6];
    float64x2_t v71 = v32;
    float64x2_t v33 = v30[1];
    float64x2_t v64 = *v30;
    float64x2_t v65 = v33;
    float64x2_t v34 = v30[3];
    float64x2_t v66 = v30[2];
    float64x2_t v67 = v34;
    if (*(unsigned char *)(a2 + 68)) {
      float64x2_t v35 = *(double **)(a2 + 16);
    }
    else {
      float64x2_t v35 = (double *)(*(void *)(a2 + 16) + 128);
    }
    float64x2_t v52 = v68;
    float64x2_t v53 = v69;
    float64x2_t v54 = v70;
    float64x2_t v55 = v71;
    float64x2_t v48 = v64;
    float64x2_t v49 = v65;
    float64x2_t v50 = v66;
    float64x2_t v51 = v67;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v48.f64, v35);
    float64x2_t v60 = v52;
    float64x2_t v61 = v53;
    float64x2_t v62 = v54;
    float64x2_t v63 = v55;
    float64x2_t v56 = v48;
    float64x2_t v57 = v49;
    float64x2_t v58 = v50;
    float64x2_t v59 = v51;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, 0.333333333);
    long long v37 = v36[3];
    long long v39 = *v36;
    long long v38 = v36[1];
    *(_OWORD *)(a3 + 32) = v36[2];
    *(_OWORD *)(a3 + 48) = v37;
    *(_OWORD *)a3 = v39;
    *(_OWORD *)(a3 + 16) = v38;
    long long v40 = v36[6];
    long long v41 = v36[7];
    long long v43 = v36[4];
    long long v42 = v36[5];
  }
  else
  {
    if (v4 == 2)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      double v6 = *(double *)(a1 + 56);
      float64x2_t v7 = *(float64x2_t *)(v5 + 464);
      float64x2_t v60 = *(float64x2_t *)(v5 + 448);
      float64x2_t v61 = v7;
      float64x2_t v8 = *(float64x2_t *)(v5 + 496);
      float64x2_t v62 = *(float64x2_t *)(v5 + 480);
      float64x2_t v63 = v8;
      float64x2_t v9 = *(float64x2_t *)(v5 + 400);
      float64x2_t v56 = *(float64x2_t *)(v5 + 384);
      float64x2_t v57 = v9;
      float64x2_t v10 = *(float64x2_t *)(v5 + 432);
      float64x2_t v58 = *(float64x2_t *)(v5 + 416);
      float64x2_t v59 = v10;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, v6);
      float64x2_t v12 = v11[3];
      float64x2_t v14 = *v11;
      float64x2_t v13 = v11[1];
      float64x2_t v50 = v11[2];
      float64x2_t v51 = v12;
      float64x2_t v48 = v14;
      float64x2_t v49 = v13;
      float64x2_t v15 = v11[7];
      float64x2_t v17 = v11[4];
      float64x2_t v16 = v11[5];
      float64x2_t v54 = v11[6];
      float64x2_t v55 = v15;
      float64x2_t v52 = v17;
      float64x2_t v53 = v16;
      long long v18 = *(_OWORD *)(v5 + 128);
      long long v19 = *(_OWORD *)(v5 + 144);
      long long v20 = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(a3 + 48) = v20;
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v19;
      long long v21 = *(_OWORD *)(v5 + 192);
      long long v22 = *(_OWORD *)(v5 + 208);
      long long v23 = *(_OWORD *)(v5 + 240);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(v5 + 224);
      *(_OWORD *)(a3 + 112) = v23;
      *(_OWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 80) = v22;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)a3, v48.f64);
      return;
    }
    float64x2_t v44 = *(_OWORD **)(a1 + 16);
    long long v45 = v44[11];
    long long v47 = v44[8];
    long long v46 = v44[9];
    *(_OWORD *)(a3 + 32) = v44[10];
    *(_OWORD *)(a3 + 48) = v45;
    *(_OWORD *)a3 = v47;
    *(_OWORD *)(a3 + 16) = v46;
    long long v40 = v44[14];
    long long v41 = v44[15];
    long long v43 = v44[12];
    long long v42 = v44[13];
  }
  *(_OWORD *)(a3 + 96) = v40;
  *(_OWORD *)(a3 + 112) = v41;
  *(_OWORD *)(a3 + 64) = v43;
  *(_OWORD *)(a3 + 80) = v42;
}

void sub_216954E28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if (!v4)
  {
    float64x2_t v26 = *(_OWORD **)(a1 + 16);
    long long v27 = v26[11];
    long long v29 = v26[8];
    long long v28 = v26[9];
    *(_OWORD *)(a3 + 32) = v26[10];
    *(_OWORD *)(a3 + 48) = v27;
    *(_OWORD *)a3 = v29;
    *(_OWORD *)(a3 + 16) = v28;
    long long v30 = v26[14];
    long long v31 = v26[15];
    long long v33 = v26[12];
    long long v32 = v26[13];
LABEL_18:
    *(_OWORD *)(a3 + 96) = v30;
    *(_OWORD *)(a3 + 112) = v31;
    *(_OWORD *)(a3 + 64) = v33;
    *(_OWORD *)(a3 + 80) = v32;
    return;
  }
  int v5 = *(_DWORD *)(a2 + 64);
  if (v5 == 1)
  {
LABEL_10:
    float64x2_t v34 = *(float64x2_t **)(a1 + 16);
    if (*(unsigned char *)(a2 + 68)) {
      float64x2_t v35 = *(float64x2_t **)(a2 + 16);
    }
    else {
      float64x2_t v35 = (float64x2_t *)(*(void *)(a2 + 16) + 128);
    }
    float64x2_t v36 = *v35;
    float64x2_t v37 = v35[1];
    float64x2_t v38 = v35[3];
    float64x2_t v72 = v35[2];
    float64x2_t v73 = v38;
    float64x2_t v70 = v36;
    float64x2_t v71 = v37;
    float64x2_t v39 = v35[4];
    float64x2_t v40 = v35[5];
    float64x2_t v41 = v35[7];
    float64x2_t v76 = v35[6];
    float64x2_t v77 = v41;
    float64x2_t v74 = v39;
    float64x2_t v75 = v40;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v70, 2.0);
    long long v43 = *v42;
    long long v44 = v42[1];
    long long v45 = v42[3];
    void v61[2] = v42[2];
    v61[3] = v45;
    v61[0] = v43;
    v61[1] = v44;
    long long v46 = v42[4];
    long long v47 = v42[5];
    long long v48 = v42[7];
    v61[6] = v42[6];
    v61[7] = v48;
    v61[4] = v46;
    v61[5] = v47;
    float64x2_t v49 = v34[11];
    float64x2_t v64 = v34[10];
    float64x2_t v65 = v49;
    float64x2_t v50 = v34[9];
    float64x2_t v62 = v34[8];
    float64x2_t v63 = v50;
    float64x2_t v51 = v34[15];
    float64x2_t v68 = v34[14];
    float64x2_t v69 = v51;
    float64x2_t v52 = v34[13];
    float64x2_t v66 = v34[12];
    float64x2_t v67 = v52;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v62.f64, (double *)v61);
    float64x2_t v74 = v66;
    float64x2_t v75 = v67;
    float64x2_t v76 = v68;
    float64x2_t v77 = v69;
    float64x2_t v70 = v62;
    float64x2_t v71 = v63;
    float64x2_t v72 = v64;
    float64x2_t v73 = v65;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v70, 0.333333333);
    long long v54 = v53[3];
    long long v56 = *v53;
    long long v55 = v53[1];
    *(_OWORD *)(a3 + 32) = v53[2];
    *(_OWORD *)(a3 + 48) = v54;
    *(_OWORD *)a3 = v56;
    *(_OWORD *)(a3 + 16) = v55;
    long long v30 = v53[6];
    long long v31 = v53[7];
    long long v33 = v53[4];
    long long v32 = v53[5];
    goto LABEL_18;
  }
  if (v5 != 2)
  {
    if (v4 != 1)
    {
      if (*(unsigned char *)(a2 + 68)) {
        float64x2_t v57 = *(long long **)(a2 + 16);
      }
      else {
        float64x2_t v57 = (long long *)(*(void *)(a2 + 16) + 128);
      }
      long long v58 = v57[3];
      long long v60 = *v57;
      long long v59 = v57[1];
      *(_OWORD *)(a3 + 32) = v57[2];
      *(_OWORD *)(a3 + 48) = v58;
      *(_OWORD *)a3 = v60;
      *(_OWORD *)(a3 + 16) = v59;
      long long v30 = v57[6];
      long long v31 = v57[7];
      long long v33 = v57[4];
      long long v32 = v57[5];
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 68)) {
    float64x2_t v7 = *(long long **)(a2 + 16);
  }
  else {
    float64x2_t v7 = (long long *)(v6 + 128);
  }
  double v8 = *(double *)(a2 + 48);
  float64x2_t v9 = *(float64x2_t *)(v6 + 336);
  float64x2_t v74 = *(float64x2_t *)(v6 + 320);
  float64x2_t v75 = v9;
  float64x2_t v10 = *(float64x2_t *)(v6 + 368);
  float64x2_t v76 = *(float64x2_t *)(v6 + 352);
  float64x2_t v77 = v10;
  float64x2_t v11 = *(float64x2_t *)(v6 + 272);
  float64x2_t v70 = *(float64x2_t *)(v6 + 256);
  float64x2_t v71 = v11;
  float64x2_t v12 = *(float64x2_t *)(v6 + 304);
  float64x2_t v72 = *(float64x2_t *)(v6 + 288);
  float64x2_t v73 = v12;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v70, v8);
  float64x2_t v14 = v13[3];
  float64x2_t v16 = *v13;
  float64x2_t v15 = v13[1];
  float64x2_t v64 = v13[2];
  float64x2_t v65 = v14;
  float64x2_t v62 = v16;
  float64x2_t v63 = v15;
  float64x2_t v17 = v13[7];
  float64x2_t v19 = v13[4];
  float64x2_t v18 = v13[5];
  float64x2_t v68 = v13[6];
  float64x2_t v69 = v17;
  float64x2_t v66 = v19;
  float64x2_t v67 = v18;
  long long v20 = *v7;
  long long v21 = v7[1];
  long long v22 = v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(_OWORD *)(a3 + 48) = v22;
  *(_OWORD *)a3 = v20;
  *(_OWORD *)(a3 + 16) = v21;
  long long v23 = v7[4];
  long long v24 = v7[5];
  long long v25 = v7[7];
  *(_OWORD *)(a3 + 96) = v7[6];
  *(_OWORD *)(a3 + 112) = v25;
  *(_OWORD *)(a3 + 64) = v23;
  *(_OWORD *)(a3 + 80) = v24;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator-=((double *)a3, v62.f64);
}

void sub_21695503C(float64x2_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  float64x2_t v6 = a1[29];
  float64x2_t v49 = a1[28];
  float64x2_t v50 = v6;
  float64x2_t v7 = a1[31];
  float64x2_t v51 = a1[30];
  float64x2_t v52 = v7;
  float64x2_t v8 = a1[25];
  float64x2_t v45 = a1[24];
  float64x2_t v46 = v8;
  float64x2_t v9 = a1[27];
  float64x2_t v47 = a1[26];
  float64x2_t v48 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v45, a3);
  float64x2_t v11 = v10[5];
  float64x2_t v57 = v10[4];
  float64x2_t v58 = v11;
  float64x2_t v12 = v10[7];
  float64x2_t v59 = v10[6];
  float64x2_t v60 = v12;
  float64x2_t v13 = v10[1];
  float64x2_t v53 = *v10;
  float64x2_t v54 = v13;
  float64x2_t v14 = v10[3];
  float64x2_t v55 = v10[2];
  float64x2_t v56 = v14;
  float64x2_t v35 = v59;
  float64x2_t v36 = v60;
  float64x2_t v33 = v57;
  float64x2_t v34 = v58;
  float64x2_t v31 = v55;
  float64x2_t v32 = v14;
  float64x2_t v29 = v53;
  float64x2_t v30 = v54;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v29.f64, a1[16].f64);
  float64x2_t v49 = v33;
  float64x2_t v50 = v34;
  float64x2_t v51 = v35;
  float64x2_t v52 = v36;
  float64x2_t v45 = v29;
  float64x2_t v46 = v30;
  float64x2_t v47 = v31;
  float64x2_t v48 = v32;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v45, a3);
  float64x2_t v16 = v15[5];
  float64x2_t v65 = v15[4];
  float64x2_t v66 = v16;
  float64x2_t v17 = v15[7];
  float64x2_t v67 = v15[6];
  float64x2_t v68 = v17;
  float64x2_t v18 = v15[1];
  float64x2_t v61 = *v15;
  float64x2_t v62 = v18;
  float64x2_t v19 = v15[3];
  float64x2_t v63 = v15[2];
  float64x2_t v64 = v19;
  float64x2_t v43 = v67;
  float64x2_t v44 = v68;
  float64x2_t v41 = v65;
  float64x2_t v42 = v66;
  float64x2_t v39 = v63;
  float64x2_t v40 = v19;
  float64x2_t v37 = v61;
  float64x2_t v38 = v62;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v37.f64, a1[8].f64);
  float64x2_t v49 = v41;
  float64x2_t v50 = v42;
  float64x2_t v51 = v43;
  float64x2_t v52 = v44;
  float64x2_t v45 = v37;
  float64x2_t v46 = v38;
  float64x2_t v47 = v39;
  float64x2_t v48 = v40;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v45, a3);
  long long v21 = v20[5];
  long long v73 = v20[4];
  long long v74 = v21;
  long long v22 = v20[7];
  long long v75 = v20[6];
  long long v76 = v22;
  long long v23 = v20[1];
  long long v69 = *v20;
  long long v70 = v23;
  long long v24 = v20[3];
  long long v71 = v20[2];
  long long v72 = v24;
  long long v25 = v74;
  *(_OWORD *)(a2 + 64) = v73;
  *(_OWORD *)(a2 + 80) = v25;
  long long v26 = v76;
  *(_OWORD *)(a2 + 96) = v75;
  *(_OWORD *)(a2 + 112) = v26;
  long long v27 = v70;
  *(_OWORD *)a2 = v69;
  *(_OWORD *)(a2 + 16) = v27;
  long long v28 = v72;
  *(_OWORD *)(a2 + 32) = v71;
  *(_OWORD *)(a2 + 48) = v28;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)a2, a1->f64);
}

std::type_info *sub_216955210(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21695529C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C5C0, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21695529C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C5C0);
  }
  else {
    return 0;
  }
}

__n128 sub_2169552D4@<Q0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_21695529C(a1))
  {
    sub_216955364((uint64_t)a1, (long long *)a2);
  }
  else
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::Invoke, (uint64_t)&stru_26C74C5C0);
    long long v6 = *(_OWORD *)(v5 + 48);
    long long v8 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a2 + 48) = v6;
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v7;
    __n128 result = *(__n128 *)(v5 + 96);
    long long v9 = *(_OWORD *)(v5 + 112);
    long long v11 = *(_OWORD *)(v5 + 64);
    long long v10 = *(_OWORD *)(v5 + 80);
    *(__n128 *)(a2 + 96) = result;
    *(_OWORD *)(a2 + 112) = v9;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v10;
  }
  return result;
}

long long *sub_216955364@<X0>(uint64_t a1@<X0>, long long *a2@<X8>)
{
  __n128 result = sub_216955448((long long **)a1);
  long long v16 = result[4];
  long long v17 = result[5];
  long long v18 = result[6];
  long long v19 = result[7];
  long long v12 = *result;
  long long v13 = result[1];
  long long v14 = result[2];
  long long v15 = result[3];
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[3];
  result[2] = a2[2];
  result[3] = v7;
  *__n128 result = v5;
  result[1] = v6;
  long long v8 = a2[4];
  long long v9 = a2[5];
  long long v10 = a2[7];
  result[6] = a2[6];
  result[7] = v10;
  result[4] = v8;
  result[5] = v9;
  a2[2] = v14;
  a2[3] = v15;
  *a2 = v12;
  a2[1] = v13;
  a2[6] = v18;
  a2[7] = v19;
  a2[4] = v16;
  a2[5] = v17;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11 && (*(void *)(a1 + 8) & 3) != 3) {
    __n128 result = (long long *)(*(uint64_t (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

long long *sub_216955448(long long **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  double v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, long long **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F6B38(a1);
}

void *sub_2169554DC(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double v3 = (long long *)sub_21695551C(a2);

  return sub_2169555B0(a1, v3);
}

uint64_t sub_21695551C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216956AEC(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatd>::Invoke, (uint64_t)&stru_26C74C5F0);
  }
}

void *sub_2169555B0(void *a1, long long *a2)
{
  *a1 = &unk_26C752BC0;
  a1[1] = 0;
  int v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  long long v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = *a2;
  long long v11 = *(_OWORD *)v4;
  long long v12 = *((_OWORD *)v4 + 1);
  long long v13 = *(_OWORD *)v5;
  long long v14 = *((_OWORD *)v5 + 1);
  long long v6 = operator new(0x80uLL);
  void v6[4] = v11;
  unint64_t v6[5] = v12;
  v6[6] = v13;
  v6[7] = v14;
  *long long v6 = v8;
  v6[1] = v9;
  void v6[2] = v10;
  v6[3] = v9;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_216955660(void *a1)
{
  *a1 = &unk_26C752BC0;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2169556B0(void *__p)
{
  void *__p = &unk_26C752BC0;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_216955710(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C752BC0;
  int v4 = operator new(0x80uLL);
  long long v5 = *(long long **)(a1 + 16);
  long long v6 = *v5;
  long long v7 = v5[1];
  long long v8 = v5[3];
  v4[2] = v5[2];
  void v4[3] = v8;
  _OWORD *v4 = v6;
  v4[1] = v7;
  long long v9 = v5[4];
  long long v10 = v5[5];
  long long v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  void v4[4] = v9;
  v4[5] = v10;
  *(void *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_216955798@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_2169568EC(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void *sub_2169557E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  v16[0] = &unk_26C751248;
  sub_2169265E4((uint64_t)v16, a1, a2);
  v16[0] = &unk_26C7511F8;
  double v8 = sub_216926690((uint64_t)v16, a4, v6, v7);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  a3[1] = &off_26C74EC08;
  double result = operator new(0x28uLL);
  *(double *)double result = v8;
  *((void *)result + 1) = v10;
  *((void *)result + 2) = v12;
  *((void *)result + 3) = v14;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_2169558B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = &unk_26C751248;
  sub_2169265E4((uint64_t)&v5, a1, a2);
  uint64_t v5 = &unk_26C7511F8;
  return sub_216926570(a3);
}

void sub_216955948(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169559F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216955A18(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        uint64_t v10 = v15;
      }
      else {
        uint64_t v10 = v7;
      }
      if (v14 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216955B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216955B98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = &off_26C74EC08;
  double result = operator new(0x28uLL);
  long long v5 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 32);
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_216955BEC(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v22[2] = *MEMORY[0x263EF8340];
  int v4 = sub_216956A60(a2);
  long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v22, v4);
  if (v22[1])
  {
    double v8 = (_OWORD *)sub_21695551C(v5);
    uint64_t v9 = a1[2];
    long long v10 = v8[1];
    *(_OWORD *)(v9 + 32) = *v8;
    *(_OWORD *)(v9 + 48) = v10;
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v20[0] = "ts/data.h";
    v20[1] = "SetValue";
    v20[2] = 667;
    void v20[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v18);
    int v11 = v19;
    uint64_t v12 = (void **)v18[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v13 = v18;
    if (v11 < 0) {
      uint64_t v13 = v12;
    }
    if (v17 >= 0) {
      char v14 = __p;
    }
    else {
      char v14 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
  return sub_2168EE084((uint64_t)v22);
}

void sub_216955D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_216955DDC@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  a1[1] = &off_26C74EC08;
  double result = operator new(0x28uLL);
  long long v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)double result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_216955E34@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(_OWORD **)(a1 + 16);
  }
  else {
    uint64_t v3 = (_OWORD *)(*(void *)(a1 + 16) + 32);
  }
  a2[1] = &off_26C74EC08;
  double result = operator new(0x28uLL);
  long long v5 = v3[1];
  *(_OWORD *)double result = *v3;
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_216955E98(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v24[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    long long v4 = sub_216956A60(a2);
    long long v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v24, v4);
    if (v24[1])
    {
      double v8 = (_OWORD *)sub_21695551C(v5);
      uint64_t v9 = (_OWORD *)a1[2];
      long long v10 = v8[1];
      *uint64_t v9 = *v8;
      v9[1] = v10;
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v19 = "ts/data.h";
      long long v20 = "SetLeftValue";
      uint64_t v21 = 737;
      uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v17);
      int v11 = v18;
      uint64_t v12 = (void **)v17[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      uint64_t v13 = v17;
      if (v11 < 0) {
        uint64_t v13 = v12;
      }
      if (v16 >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v13, (const char *)v14);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
    }
    sub_2168EE084((uint64_t)v24);
  }
  else
  {
    char v19 = "ts/data.h";
    long long v20 = "SetLeftValue";
    uint64_t v21 = 725;
    uint64_t v22 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_2169560A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

void *sub_2169560F0@<X0>(void *a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatd>::zero();
  a1[1] = &off_26C74EC08;
  double result = operator new(0x28uLL);
  long long v4 = *((_OWORD *)v2 + 1);
  *(_OWORD *)double result = *(_OWORD *)v2;
  *((_OWORD *)result + 1) = v4;
  atomic_store(0, (unsigned int *)result + 8);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void *sub_216956148@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, a1);
}

void sub_216956150(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169561FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216956218(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169562C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2169562E0()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216956388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2169563A4()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21695644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216956468()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695650C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216956528()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169565CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169565E8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695668C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169566A8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695674C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216956768()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216956810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695682C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatd>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169568D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169568EC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x78uLL);
  double result = sub_216956950(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21695693C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216956950(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C752D08;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  a1[3] = &unk_26C751248;
  sub_2169265E4((uint64_t)(a1 + 3), v4, v5);
  a1[3] = &unk_26C7511F8;
  return a1;
}

void sub_2169569E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2169569F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216956A14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752D08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

std::type_info *sub_216956A60(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216956AEC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C5F0, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216956AEC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 89) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C5F0);
  }
  else {
    return 0;
  }
}

void *sub_216956B24(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  char v3 = (long long *)sub_216956B64(a2);

  return sub_216956BF8(a1, v3);
}

uint64_t sub_216956B64(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21695810C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::GfQuatf>::Invoke, (uint64_t)&stru_26C74C600);
  }
}

void *sub_216956BF8(void *a1, long long *a2)
{
  *a1 = &unk_26C752D58;
  a1[1] = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  long long v8 = *a2;
  long long v9 = *a2;
  long long v10 = *(_OWORD *)v4;
  long long v11 = *(_OWORD *)v5;
  char v6 = operator new(0x40uLL);
  *char v6 = v8;
  v6[1] = v9;
  void v6[2] = v10;
  v6[3] = v11;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void *sub_216956C90(void *a1)
{
  *a1 = &unk_26C752D58;
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216956CE0(void *__p)
{
  void *__p = &unk_26C752D58;
  uint64_t v2 = (void *)__p[2];
  __p[2] = 0;
  if (v2) {
    operator delete(v2);
  }

  operator delete(__p);
}

__n128 sub_216956D40(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C752D58;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = *(long long **)(a1 + 16);
  long long v6 = *v5;
  long long v7 = v5[1];
  long long v8 = v5[3];
  v4[2] = v5[2];
  void v4[3] = v8;
  _OWORD *v4 = v6;
  v4[1] = v7;
  *(void *)(a2 + 16) = v4;
  uint64_t v9 = *(void *)(a1 + 62);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 62) = v9;
  return result;
}

double sub_216956DB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_216957F0C(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

_DWORD *sub_216956E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  v15[0] = &unk_26C751330;
  sub_2169268A0((uint64_t)v15, a1, a2);
  v15[0] = &unk_26C7512E0;
  LODWORD(a4) = sub_216926944((uint64_t)v15, a4, v6, v7);
  int v9 = v8;
  int v11 = v10;
  int v13 = v12;
  a3[1] = &off_26C74EA98;
  double result = operator new(0x14uLL);
  *double result = LODWORD(a4);
  result[1] = v9;
  result[2] = v11;
  result[3] = v13;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_216956ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v5 = &unk_26C751330;
  sub_2169268A0((uint64_t)&v5, a1, a2);
  uint64_t v5 = &unk_26C7512E0;
  return sub_21692683C(a3);
}

void sub_216956F68(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216957018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216957038(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        int v10 = v15;
      }
      else {
        int v10 = v7;
      }
      if (v14 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216957184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_2169571B8@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  a2[1] = (unsigned int *)&off_26C74EA98;
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = *(_OWORD *)(v3 + 16);
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_21695720C(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_216958080(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    *(_OWORD *)(a1[2] + 16) = *(_OWORD *)sub_216956B64(v5);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    _OWORD v17[2] = 667;
    void v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    int v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    int v10 = v15;
    if (v8 < 0) {
      int v10 = v9;
    }
    if (v14 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_2169573AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_2169573FC@<X0>(unsigned int **a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  a1[1] = (unsigned int *)&off_26C74EA98;
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = *(_OWORD *)v2;
  atomic_store(0, result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_216957454@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = *(_OWORD **)(a1 + 16);
  }
  else {
    uint64_t v3 = (_OWORD *)(*(void *)(a1 + 16) + 16);
  }
  a2[1] = (unsigned int *)&off_26C74EA98;
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169574B8(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v21[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void *))(*a1 + 104))(a1))
  {
    uint64_t v4 = sub_216958080(a2);
    char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v21, v4);
    if (v21[1])
    {
      *(_OWORD *)a1[2] = *(_OWORD *)sub_216956B64(v5);
      if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
        (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
      }
    }
    else
    {
      char v16 = "ts/data.h";
      long long v17 = "SetLeftValue";
      uint64_t v18 = 737;
      char v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetL"
            "eftValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v14);
      int v8 = v15;
      int v9 = (void **)v14[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      int v10 = v14;
      if (v8 < 0) {
        int v10 = v9;
      }
      if (v13 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    sub_2168EE084((uint64_t)v21);
  }
  else
  {
    char v16 = "ts/data.h";
    long long v17 = "SetLeftValue";
    uint64_t v18 = 725;
    char v19 = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframe is not dual-valued; cannot set left value");
  }
}

void sub_2169576C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_216957710@<X0>(unsigned int **a1@<X8>)
{
  int v2 = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::GfQuatf>::zero();
  a1[1] = (unsigned int *)&off_26C74EA98;
  double result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)double result = *(_OWORD *)v2;
  atomic_store(0, result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void *sub_216957768@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, a1);
}

void sub_216957770(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21695781C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216957838(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_2169578E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216957900()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_2169579A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2169579C4()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216957A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216957A88()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216957B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216957B48()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216957BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216957C08()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216957CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216957CC8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216957D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216957D88()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216957E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216957E4C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::GfQuatf>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216957EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216957F0C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x58uLL);
  double result = sub_216957F70(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216957F5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216957F70(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C752EA0;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  a1[3] = &unk_26C751330;
  sub_2169268A0((uint64_t)(a1 + 3), v4, v5);
  a1[3] = &unk_26C7512E0;
  return a1;
}

void sub_216958000(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216958014(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216958034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C752EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

std::type_info *sub_216958080(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21695810C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C600, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21695810C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C600);
  }
  else {
    return 0;
  }
}

uint64_t sub_216958144(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  char v3 = (unsigned __int8 *)sub_216958184(a2);

  return sub_216958218(a1, v3);
}

uint64_t sub_216958184(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216959490(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8C230];
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169594C4, v4);
  }
}

uint64_t sub_216958218(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)a1 = &unk_26C752EF0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  *(_DWORD *)(a1 + 16) = (*v4 << 16) | (*a2 << 8) | (*pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero() << 24) | *a2;
  *(void *)(a1 + 62) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void *sub_216958298(void *result)
{
  *double result = &unk_26C752EF0;
  return result;
}

__n128 sub_2169582BC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C752EF0;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_2169582FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_2169591E0(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

uint64_t sub_216958348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_216959314((uint64_t)v6, a1, a2);
  char v5 = v6[8];
  *(void *)(a3 + 8) = &unk_26C7501AB;
  *(unsigned char *)a3 = v5;
  return result;
}

char *sub_216958398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_216959314((uint64_t)&v6, a1, a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  char v5 = *result;
  *(void *)(a3 + 8) = &unk_26C7501AB;
  *(unsigned char *)a3 = v5;
  return result;
}

void sub_2169583EC(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetKnotType(TsKnotType) [T = BOOL]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695849C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169584BC(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        int v10 = v15;
      }
      else {
        int v10 = v7;
      }
      if (v14 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_216958604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216958638@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = *(unsigned char *)(result + 17);
  return result;
}

uint64_t sub_216958654(unsigned char *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_216959404(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    a1[17] = *(unsigned char *)sub_216958184(v5);
    if (((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(unsigned char *, void))(*(void *)a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    _OWORD v17[2] = 667;
    void v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetValue(VtValue) [T = BOOL]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    int v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    int v10 = v15;
    if (v8 < 0) {
      int v10 = v9;
    }
    if (v14 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_2169587EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

char *sub_21695883C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  *(void *)(a1 + 8) = &unk_26C7501AB;
  *(unsigned char *)a1 = *result;
  return result;
}

void sub_216958878(uint64_t a1, int a2)
{
  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    _OWORD v5[2] = 684;
    void v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetIsDualValued(BOOL) [T = BOOL]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0) {
      int v2 = __p;
    }
    else {
      int v2 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 68) = 0;
  }
}

void sub_216958924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216958940@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 16;
  if (!*(unsigned char *)(result + 68)) {
    uint64_t v2 = 17;
  }
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = *(unsigned char *)(result + v2);
  return result;
}

void sub_21695896C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetLeftValue(VtValue) [T = BOOL]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216958A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216958A28@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  *(void *)(a1 + 8) = &unk_26C7501AB;
  *(unsigned char *)a1 = *result;
  return result;
}

void *sub_216958A64@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, a1);
}

void sub_216958A6C(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetLeftTangentSlope() const [T = BOOL]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216958B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216958B30(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetRightTangentSlope() const [T = BOOL]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216958BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216958BF4()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetLeftTangentLength() const [T = BOOL]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216958C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216958CB4()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetRightTangentLength() const [T = BOOL]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_216958D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216958D74()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetLeftTangentSlope(VtValue) [T = BOOL]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216958E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216958E30()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetRightTangentSlope(VtValue) [T = BOOL]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216958ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216958EEC()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetLeftTangentLength(TsTime) [T = BOOL]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216958F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216958FA8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetRightTangentLength(TsTime) [T = BOOL]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216959048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216959064()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::GetTangentSymmetryBroken() const [T = BOOL]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216959108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216959124()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<BOOL>::SetTangentSymmetryBroken(BOOL) [T = BOOL]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169591C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169591E0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x28uLL);
  uint64_t result = sub_216959244(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216959230(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216959244(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C753038;
  sub_216959314((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_216959294(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2169592A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169592C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753038;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216959314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C753088;
  if (a2 && a3)
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 17);
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    _OWORD v5[2] = 417;
    void v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<BOOL, false>::Ts_EvalCache(const Ts_TypedData<T> *, const Ts_"
            "TypedData<T> *) [T = BOOL, INTERPOLATABLE = false]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

uint64_t sub_2169593AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v2;
  return result;
}

char *sub_2169593C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<BOOL>::zero();
  char v3 = *result;
  *(void *)(a1 + 8) = &unk_26C7501AB;
  *(unsigned char *)a1 = v3;
  return result;
}

std::type_info *sub_216959404(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_216959490(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C230], v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_216959490(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16)) {
    return 1;
  }
  if ((v1 & 4) == 0) {
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C230]);
}

unsigned char *sub_2169594C4@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(1uLL);
  *uint64_t result = 0;
  *a1 = result;
  uint64_t v3 = MEMORY[0x263F8C230];
  a1[1] = sub_21695950C;
  a1[2] = v3;
  return result;
}

void sub_21695950C(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_216959518(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (int *)sub_216959558(a2);

  return sub_2169595EC(a1, v3);
}

uint64_t sub_216959558(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21695A85C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      char v5 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8C258];
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21695A894, v4);
  }
}

uint64_t sub_2169595EC(uint64_t a1, int *a2)
{
  *(void *)a1 = &unk_26C7530C0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  char v5 = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  int v6 = *a2;
  int v7 = *v4;
  int v8 = *v5;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(void *)(a1 + 62) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void *sub_216959660(void *result)
{
  *uint64_t result = &unk_26C7530C0;
  return result;
}

__n128 sub_216959684(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C7530C0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_2169596C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_21695A5AC(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

uint64_t sub_216959710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_21695A6E0((uint64_t)v6, a1, a2);
  int v5 = v6[2];
  *(void *)(a3 + 8) = &unk_26C750543;
  *(_DWORD *)a3 = v5;
  return result;
}

int *sub_216959760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21695A6E0((uint64_t)&v6, a1, a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  int v5 = *result;
  *(void *)(a3 + 8) = &unk_26C750543;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_2169597B4(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetKnotType(TsKnotType) [T = int]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216959864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216959884(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        int v10 = v15;
      }
      else {
        int v10 = v7;
      }
      if (v14 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_2169599CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216959A00@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = *(_DWORD *)(result + 20);
  return result;
}

uint64_t sub_216959A1C(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_21695A7D0(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v19, v4);
  if (v19[1])
  {
    a1[5] = *(_DWORD *)sub_216959558(v5);
    if (((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(_DWORD *, void))(*(void *)a1 + 64))(a1, 0);
    }
  }
  else
  {
    v17[0] = "ts/data.h";
    v17[1] = "SetValue";
    _OWORD v17[2] = 667;
    void v17[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetValue(VtValue) [T = int]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v15);
    int v8 = v16;
    int v9 = (void **)v15[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    int v10 = v15;
    if (v8 < 0) {
      int v10 = v9;
    }
    if (v14 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v10, (const char *)v11);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  return sub_2168EE084((uint64_t)v19);
}

void sub_216959BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

int *sub_216959C04@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  *(void *)(a1 + 8) = &unk_26C750543;
  *(_DWORD *)a1 = *result;
  return result;
}

void sub_216959C40(uint64_t a1, int a2)
{
  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    _OWORD v5[2] = 684;
    void v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetIsDualValued(BOOL) [T = int]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0) {
      int v2 = __p;
    }
    else {
      int v2 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 68) = 0;
  }
}

void sub_216959CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216959D08@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 16;
  if (!*(unsigned char *)(result + 68)) {
    uint64_t v2 = 20;
  }
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = *(_DWORD *)(result + v2);
  return result;
}

void sub_216959D38()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetLeftValue(VtValue) [T = int]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216959DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_216959DF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  *(void *)(a1 + 8) = &unk_26C750543;
  *(_DWORD *)a1 = *result;
  return result;
}

void *sub_216959E30@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, a1);
}

void sub_216959E38(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetLeftTangentSlope() const [T = int]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216959EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216959EFC(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetRightTangentSlope() const [T = int]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_216959FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216959FC0()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetLeftTangentLength() const [T = int]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21695A064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21695A080()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetRightTangentLength() const [T = int]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21695A124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695A140()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetLeftTangentSlope(VtValue) [T = int]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695A1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695A1FC()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetRightTangentSlope(VtValue) [T = int]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695A29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695A2B8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetLeftTangentLength(TsTime) [T = int]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695A358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695A374()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetRightTangentLength(TsTime) [T = int]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695A414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695A430()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::GetTangentSymmetryBroken() const [T = int]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_21695A4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695A4F0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<int>::SetTangentSymmetryBroken(BOOL) [T = int]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695A590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21695A5AC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x28uLL);
  uint64_t result = sub_21695A610(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21695A5FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21695A610(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C753208;
  sub_21695A6E0((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21695A660(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21695A674(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21695A694(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753208;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21695A6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C753258;
  if (a2 && a3)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 20);
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    _OWORD v5[2] = 417;
    void v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<int, false>::Ts_EvalCache(const Ts_TypedData<T> *, const Ts_T"
            "ypedData<T> *) [T = int, INTERPOLATABLE = false]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

uint64_t sub_21695A778@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 8);
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = v2;
  return result;
}

int *sub_21695A794@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TsTraits<int>::zero();
  int v3 = *result;
  *(void *)(a1 + 8) = &unk_26C750543;
  *(_DWORD *)a1 = v3;
  return result;
}

std::type_info *sub_21695A7D0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21695A85C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x263F8C258], v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21695A85C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 5) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C258]);
  }
  else {
    return 0;
  }
}

_DWORD *sub_21695A894@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(4uLL);
  *uint64_t result = 0;
  *a1 = result;
  uint64_t v3 = MEMORY[0x263F8C258];
  a1[1] = sub_21695A8DC;
  a1[2] = v3;
  return result;
}

void sub_21695A8DC(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

void *sub_21695A8E8(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = (long long *)sub_21695A928(a2);

  return sub_21695A9BC(a1, v3);
}

uint64_t sub_21695A928(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21695C360(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      char v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21695C398, (uint64_t)&stru_26C747090);
  }
}

void *sub_21695A9BC(void *a1, long long *a2)
{
  *a1 = &unk_26C753290;
  a1[1] = 0;
  char v4 = (long long *)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  char v5 = (long long *)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  sub_21695BC4C((char *)&v8, a2, a2, v4, v5);
  char v6 = (char *)operator new(0x60uLL);
  *(_OWORD *)char v6 = v8;
  *((void *)v6 + 2) = v9;
  *(_OWORD *)(v6 + 24) = v10;
  *((void *)v6 + 5) = v11;
  *((_OWORD *)v6 + 3) = v12;
  *((void *)v6 + 8) = v13;
  *((void *)v6 + 11) = v15;
  *(_OWORD *)(v6 + 72) = v14;
  a1[2] = v6;
  a1[6] = 0;
  a1[7] = 0;
  *(void *)((char *)a1 + 62) = 0;
  return a1;
}

void sub_21695AA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21695AA9C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_21695AB00(void *a1)
{
  *a1 = &unk_26C753290;
  char v4 = (void **)a1[2];
  uint64_t v2 = a1 + 2;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_21695BD84((int)v2, v3);
  }
  return a1;
}

void sub_21695AB50(void *__p)
{
  void *__p = &unk_26C753290;
  char v4 = (void **)__p[2];
  uint64_t v2 = __p + 2;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_21695BD84((int)v2, v3);
  }

  operator delete(__p);
}

__n128 sub_21695ABB0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C753290;
  sub_21695BE00((char **)(a2 + 16), (long long **)(a1 + 16));
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_21695AC14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_21695BF8C(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void sub_21695AC60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21695C0D0((uint64_t)&v4, a1, a2);
  if (SHIBYTE(v6) < 0)
  {
    sub_216778F24(__p, (void *)v5, *((unint64_t *)&v5 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = v5;
    uint64_t v8 = v6;
  }
  *(void *)(a3 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a3, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)v5);
  }
}

void sub_21695AD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695AD34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21695C0D0((uint64_t)&v6, a1, a2);
  uint64_t v4 = (void **)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  if (*((char *)v4 + 23) < 0)
  {
    sub_216778F24(__p, *v4, (unint64_t)v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    long long v10 = v4[2];
    *(_OWORD *)std::string __p = v5;
  }
  *(void *)(a3 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a3, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
}

void sub_21695ADD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695AE04(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetKnotType(TsKnotType) [T = std::string]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695AEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695AED4(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        long long v10 = v15;
      }
      else {
        long long v10 = v7;
      }
      if (v14 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_21695B020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_21695B054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16) + 24;
  *(void *)(a2 + 8) = &off_26C750BB8;
  return sub_21691B31C((unsigned int **)a2, v2);
}

uint64_t sub_21695B070(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_21695C2D4(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v20, v4);
  if (v20[1])
  {
    char v8 = (const std::string *)sub_21695A928(v5);
    std::string::operator=((std::string *)(a1[2] + 24), v8);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    void v18[2] = 667;
    uint64_t v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetValue(VtValue) [T = std::string]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    int v9 = v17;
    long long v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    uint64_t v11 = v16;
    if (v9 < 0) {
      uint64_t v11 = v10;
    }
    if (v15 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  return sub_2168EE084((uint64_t)v20);
}

void sub_21695B214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

unsigned int *sub_21695B264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  *(void *)(a1 + 8) = &off_26C750BB8;

  return sub_21691B31C((unsigned int **)a1, (uint64_t)v2);
}

void sub_21695B2AC(uint64_t a1, int a2)
{
  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    _OWORD v5[2] = 684;
    void v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetIsDualValued(BOOL) [T = std::string]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 68) = 0;
  }
}

void sub_21695B35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_21695B378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16) + 24;
  }
  *(void *)(a2 + 8) = &off_26C750BB8;
  return sub_21691B31C((unsigned int **)a2, v2);
}

void sub_21695B3A0()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetLeftValue(VtValue) [T = std::string]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695B444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_21695B460@<X0>(uint64_t a1@<X8>)
{
  char v2 = pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  *(void *)(a1 + 8) = &off_26C750BB8;

  return sub_21691B31C((unsigned int **)a1, (uint64_t)v2);
}

void *sub_21695B4A8@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, a1);
}

void sub_21695B4B0(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetLeftTangentSlope() const [T = std::string]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21695B55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695B578(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetRightTangentSlope() const [T = std::string]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21695B624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21695B640()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetLeftTangentLength() const [T = std::string]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21695B6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21695B704()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetRightTangentLength() const [T = std::string]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21695B7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695B7C8()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetLeftTangentSlope(VtValue) [T = std::string]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695B86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695B888()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetRightTangentSlope(VtValue) [T = std::string]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695B92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695B948()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetLeftTangentLength(TsTime) [T = std::string]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695B9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695BA08()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetRightTangentLength(TsTime) [T = std::string]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695BAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695BAC8()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::GetTangentSymmetryBroken() const [T = std::string]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_21695BB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695BB8C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<std::string>::SetTangentSymmetryBroken(BOOL) [T = std::string]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174BFD94 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695BC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21695BC4C(char *__dst, long long *a2, long long *a3, long long *a4, long long *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v11;
  }
  long long v12 = __dst + 72;
  if (*((char *)a5 + 23) < 0)
  {
    sub_216778F24(v12, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v13 = *a5;
    *((void *)__dst + 11) = *((void *)a5 + 2);
    *(_OWORD *)long long v12 = v13;
  }
  return __dst;
}

void sub_21695BD38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695BD84(int a1, void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 95) < 0) {
      operator delete(__p[9]);
    }
    if (*((char *)__p + 71) < 0) {
      operator delete(__p[6]);
    }
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
    if (*((char *)__p + 23) < 0) {
      operator delete(*__p);
    }
    operator delete(__p);
  }
}

char **sub_21695BE00(char **a1, long long **a2)
{
  char v4 = (char *)operator new(0x60uLL);
  sub_21695BE5C(v4, *a2);
  *a1 = v4;
  return a1;
}

void sub_21695BE48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_21695BE5C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_216778F24(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  uint64_t v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_216778F24(v7, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return __dst;
}

void sub_21695BF40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21695BF8C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x38uLL);
  double result = sub_21695BFF0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21695BFDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21695BFF0(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C7533D8;
  sub_21695C0D0((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_21695C040(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21695C054(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7533D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21695C074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7533D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21695C0B8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

uint64_t sub_21695C0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C753428;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (a2 && a3)
  {
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(*(void *)(a2 + 16) + 24));
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    _OWORD v5[2] = 417;
    void v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<std::string, false>::Ts_EvalCache(const Ts_TypedData<T> *, co"
            "nst Ts_TypedData<T> *) [T = std::string, INTERPOLATABLE = false]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

void sub_21695C184(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695C1A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 31) < 0)
  {
    sub_216778F24(__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 24);
  }
  *(void *)(a2 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a2, (uint64_t)__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695C220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695C23C(uint64_t a1@<X8>)
{
  char v2 = (void **)pxrInternal__aapl__pxrReserved__::TsTraits<std::string>::zero();
  if (*((char *)v2 + 23) < 0)
  {
    sub_216778F24(__p, *v2, (unint64_t)v2[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)v2;
    long long v5 = v2[2];
    *(_OWORD *)std::string __p = v3;
  }
  *(void *)(a1 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a1, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695C2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::type_info *sub_21695C2D4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21695C360(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C747090, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21695C360(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C747090);
  }
  else {
    return 0;
  }
}

void *sub_21695C398@<X0>(void *a1@<X8>)
{
  double result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = 0;
  *a1 = result;
  a1[1] = sub_21695C3E4;
  a1[2] = &stru_26C747090;
  return result;
}

void sub_21695C3E4(void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 23) < 0) {
      operator delete(*__p);
    }
    operator delete(__p);
  }
}

uint64_t sub_21695C430(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  long long v3 = (uint64_t *)sub_21695C470(a2);

  return sub_21695C504(a1, v3);
}

uint64_t sub_21695C470(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21695DC44(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21695DC7C, (uint64_t)&stru_26C74C2C0);
  }
}

uint64_t sub_21695C504(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_26C753460;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  long long v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  sub_21695D6F0((uint64_t *)v8, a2, a2, v4, v5);
  long long v6 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 62) = 0;
  return a1;
}

void *sub_21695C58C(void *a1)
{
  *a1 = &unk_26C753460;
  sub_21695D7A4(a1 + 2);
  return a1;
}

void sub_21695C5D0(void *a1)
{
  *a1 = &unk_26C753460;
  sub_21695D7A4(a1 + 2);

  operator delete(a1);
}

__n128 sub_21695C624(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C753460;
  sub_21695D808((uint64_t *)(a2 + 16), (uint64_t *)(a1 + 16));
  __n128 result = *(__n128 *)(a1 + 48);
  *(void *)(a2 + 62) = *(void *)(a1 + 62);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

double sub_21695C688@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v5 = a1;
  sub_21695D8BC(&v5, &v7, &v6);
  double result = *(double *)&v6;
  *a3 = v6;
  return result;
}

void *sub_21695C6D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  double result = sub_21695DA08(&v7, a1, a2);
  uint64_t v5 = v8;
  if ((v8 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v5 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8); {
    *a3 = v5;
    }
    a3[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
    if ((v5 & 7) != 0)
    {
      long long v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        *a3 = v6;
      }
      atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *a3 = v8;
    a3[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_21695C788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, atomic_uint **a3@<X8>)
{
  sub_21695DA08(&v7, a1, a2);
  double result = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  uint64_t v5 = (atomic_uint *)*result;
  if ((*result & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v5 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8); {
    *a3 = v5;
    }
    a3[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
    if ((v5 & 7) != 0)
    {
      long long v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        *a3 = v6;
      }
      atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *a3 = v5;
    a3[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_21695C85C(_DWORD *a1, uint64_t a2)
{
  int v2 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  if ((*(uint64_t (**)(_DWORD *, uint64_t, void **))(*(void *)a1 + 72))(a1, a2, __p))
  {
    a1[16] = v2;
  }
  else
  {
    v4[0] = "ts/data.h";
    v4[1] = "SetKnotType";
    v4[2] = 601;
    void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetK"
            "notType(TsKnotType) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (uint64_t *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695C90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695C92C(uint64_t a1, int a2, uint64_t a3)
{
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a2 && (v5 & 1) == 0)
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Value cannot be interpolated; only 'held' key frames are allowed.");
    }
    return 0;
  }
  if (a2 == 2)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C751600, 2, (uint64_t)v15);
      int v6 = v16;
      uint64_t v7 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
      if (v6 >= 0) {
        long long v10 = v15;
      }
      else {
        long long v10 = v7;
      }
      if (v14 >= 0) {
        long long v11 = __p;
      }
      else {
        long long v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set keyframe type %s; values of type '%s' do not support tangents.",
        v8,
        v9,
        v10,
        v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v17;
      *(void *)(a3 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    return 0;
  }
  return 1;
}

void sub_21695CA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695CAAC@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  int v2 = *(atomic_uint **)(result + 24);
  *a2 = v2;
  a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v2 & 7) != 0)
  {
    long long v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return result;
}

uint64_t sub_21695CAE0(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_21695DBB8(a2);
  char v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v20, v4);
  if (v20[1])
  {
    uint64_t v8 = (void *)sub_21695C470(v5);
    sub_2168D2318(a1 + 3, v8);
    if (((*(uint64_t (**)(void *))(*a1 + 152))(a1) & 1) == 0) {
      (*(void (**)(void *, void))(*a1 + 64))(a1, 0);
    }
  }
  else
  {
    v18[0] = "ts/data.h";
    v18[1] = "SetValue";
    void v18[2] = 667;
    uint64_t v18[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::Set"
             "Value(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v6, v7, (uint64_t)v16);
    int v9 = v17;
    long long v10 = (void **)v16[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    long long v11 = v16;
    if (v9 < 0) {
      long long v11 = v10;
    }
    if (v15 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"cannot convert type '%s' to '%s' to assign to keyframe", (const char *)v11, (const char *)v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  return sub_2168EE084((uint64_t)v20);
}

void sub_21695CC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

atomic_uint **sub_21695CCD0@<X0>(atomic_uint **a1@<X8>)
{
  double result = (atomic_uint **)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  long long v3 = *result;
  *a1 = *result;
  a1[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v4;
    }
  }
  return result;
}

void sub_21695CD24(uint64_t a1, int a2)
{
  if (a2)
  {
    v5[0] = "ts/data.h";
    v5[1] = "SetIsDualValued";
    _OWORD v5[2] = 684;
    void v5[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetI"
            "sDualValued(BOOL) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v4 >= 0) {
      int v2 = __p;
    }
    else {
      int v2 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v2);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 68) = 0;
  }
}

void sub_21695CDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695CDF0@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = 16;
  if (!*(unsigned char *)(result + 68)) {
    uint64_t v2 = 24;
  }
  long long v3 = *(atomic_uint **)(result + v2);
  *a2 = v3;
  a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v3 & 7) != 0)
  {
    char v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v4;
    }
  }
  return result;
}

void sub_21695CE38()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftValue";
  v3[2] = 721;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetLef"
          "tValue(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' cannot be dual-valued", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695CEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint **sub_21695CEF8@<X0>(atomic_uint **a1@<X8>)
{
  double result = (atomic_uint **)pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  long long v3 = *result;
  *a1 = *result;
  a1[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v3 & 7) != 0)
  {
    char v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v4;
    }
  }
  return result;
}

void *sub_21695CF4C@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, a1);
}

void sub_21695CF54(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetLeftTangentSlope";
  _OWORD v5[2] = 784;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::Get"
          "LeftTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21695D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695D01C(uint64_t a1@<X8>)
{
  v5[0] = "ts/data.h";
  v5[1] = "GetRightTangentSlope";
  _OWORD v5[2] = 797;
  void v5[3] = "virtual VtValue pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::Get"
          "RightTangentSlope() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    char v2 = __p;
  }
  else {
    char v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = 0;
}

void sub_21695D0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21695D0E4()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetLeftTangentLength";
  v4[2] = 810;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::GetL"
          "eftTangentLength() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21695D18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21695D1A8()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetRightTangentLength";
  v4[2] = 823;
  void v4[3] = "virtual TsTime pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::GetR"
          "ightTangentLength() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0.0;
}

void sub_21695D250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695D26C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentSlope";
  v3[2] = 836;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetLef"
          "tTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695D310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695D32C()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentSlope";
  v3[2] = 856;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetRig"
          "htTangentSlope(VtValue) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695D3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695D3EC()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetLeftTangentLength";
  v3[2] = 878;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetLef"
          "tTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695D490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695D4AC()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetRightTangentLength";
  v3[2] = 908;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetRig"
          "htTangentLength(TsTime) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695D550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695D56C()
{
  v4[0] = "ts/data.h";
  v4[1] = "GetTangentSymmetryBroken";
  v4[2] = 938;
  void v4[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::GetTan"
          "gentSymmetryBroken() const [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v3 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_21695D614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695D630()
{
  v3[0] = "ts/data.h";
  v3[1] = "SetTangentSymmetryBroken";
  v3[2] = 951;
  void v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::Ts_TypedData<pxrInternal__aapl__pxrReserved__::TfToken>::SetTan"
          "gentSymmetryBroken(BOOL) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v2 >= 0) {
    unint64_t v0 = __p;
  }
  else {
    unint64_t v0 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"keyframes of type '%s' do not have tangents", (const char *)v0);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695D6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21695D6F0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  *double result = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *a3;
  result[1] = *a3;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *a4;
  result[2] = *a4;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *a5;
  result[3] = *a5;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *sub_21695D7A4(void *result)
{
  uint64_t v1 = result[3];
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v2 = result[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = result[1];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t *sub_21695D808(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *double result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = a2[1];
  result[1] = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a2[2];
  result[2] = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a2[3];
  result[3] = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *sub_21695D8BC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x28uLL);
  double result = sub_21695D920(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21695D90C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21695D920(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C7535A8;
  sub_21695DA08(a1 + 3, *a2, *a3);
  return a1;
}

void sub_21695D970(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_21695D984(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7535A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21695D9A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7535A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21695D9E8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_21695DA08(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_26C7535F8;
  a1[1] = 0;
  if (a2 && a3)
  {
    sub_2168D2318(a1 + 1, (void *)(a2 + 24));
  }
  else
  {
    v5[0] = "ts/evalCache.h";
    v5[1] = "Ts_EvalCache";
    _OWORD v5[2] = 417;
    void v5[3] = "pxrInternal__aapl__pxrReserved__::Ts_EvalCache<pxrInternal__aapl__pxrReserved__::TfToken, false>::Ts_EvalCac"
            "he(const Ts_TypedData<T> *, const Ts_TypedData<T> *) [T = pxrInternal__aapl__pxrReserved__::TfToken, INTERPO"
            "LATABLE = false]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Constructing an Ts_EvalCache from invalid keyframes");
  }
  return a1;
}

uint64_t sub_21695DAC8@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *(atomic_uint **)(result + 8);
  if ((v2 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v2 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8); {
    *a2 = v2;
    }
    a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
    if ((v2 & 7) != 0)
    {
      uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v3;
      }
      atomic_fetch_add_explicit(v3, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *a2 = v2;
    a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  }
  return result;
}

void *sub_21695DB30@<X0>(atomic_uint **a1@<X8>)
{
  double result = pxrInternal__aapl__pxrReserved__::TsTraits<pxrInternal__aapl__pxrReserved__::TfToken>::zero();
  uint64_t v3 = (atomic_uint *)*result;
  if ((*result & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v3 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8); {
    *a1 = v3;
    }
    a1[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        *a1 = v4;
      }
      atomic_fetch_add_explicit(v4, 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  }
  return result;
}

std::type_info *sub_21695DBB8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v3[2] = *MEMORY[0x263EF8340];
  if ((sub_21695DC44(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_26C74C2C0, v1, v3);
    uint64_t v1 = (std::type_info *)sub_2168ED33C(v1, v3);
    sub_2168EE084((uint64_t)v3);
  }
  return v1;
}

uint64_t sub_21695DC44(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C2C0);
  }
  else {
    return 0;
  }
}

void *sub_21695DC7C@<X0>(void *a1@<X8>)
{
  double result = operator new(8uLL);
  *double result = 0;
  *a1 = result;
  a1[1] = sub_21695DCC4;
  a1[2] = &stru_26C74C2C0;
  return result;
}

void sub_21695DCC4(void *__p)
{
  if (__p)
  {
    if ((*(void *)__p & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(__p);
  }
}

void sub_21695DCE8()
{
  sub_216779094(v3, "AR_RESOLVER_INIT");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C753620, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  uint64_t v0 = sub_21695DDA0();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "AR_RESOLVER_INIT", "Print debug output during asset resolver initialization");
}

void sub_21695DD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695DDA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798B218))
  {
    uint64_t v1 = operator new(4uLL);
    *uint64_t v1 = 0;
    qword_26798B210 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798B218);
  }
  return qword_26798B210;
}

void sub_21695DE04(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(void *this)
{
  *this = &unk_26C753640;
  return this;
}

double pxrInternal__aapl__pxrReserved__::ArAsset::GetDetachedAsset@<D0>(pxrInternal__aapl__pxrReserved__::ArAsset *this@<X0>, const pxrInternal__aapl__pxrReserved__::ArAsset *a2@<X1>, _OWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromAsset(this, a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  char v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  long long v13 = (const void **)(a1 + 24);
  if (v12 >= 0) {
    char v14 = v6 + 24;
  }
  else {
    char v14 = (unsigned __int8 *)*((void *)v6 + 3);
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((void *)a1 + 4))) {
      return 0;
    }
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      long long v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  uint64_t v15 = a1[71];
  char v16 = (char *)*((void *)a1 + 7);
  if ((v15 & 0x80u) == 0) {
    uint64_t v17 = a1[71];
  }
  else {
    uint64_t v17 = *((void *)a1 + 7);
  }
  uint64_t v18 = v6[71];
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *((void *)v6 + 7);
  }
  if (v17 != v18) {
    return 0;
  }
  char v20 = (const void **)(a1 + 48);
  if (v19 >= 0) {
    uint64_t v21 = v6 + 48;
  }
  else {
    uint64_t v21 = (unsigned __int8 *)*((void *)v6 + 6);
  }
  if ((v15 & 0x80) != 0)
  {
    if (!memcmp(*v20, v21, (size_t)v16)) {
      goto LABEL_47;
    }
    return 0;
  }
  if (a1[71])
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      char v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v15) {
        goto LABEL_47;
      }
    }
    return 0;
  }
LABEL_47:

  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 72), (std::type_info *)(v6 + 72), v16);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t vars8;

  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  char v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (!sub_21691B1C8(a1 + 24, v6 + 24)
    || !pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==((uint64_t *)a1 + 6, (uint64_t *)v6 + 6))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::operator==(a1 + 72, v6 + 72);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator==(a1, a2) ^ 1;
}

uint64_t sub_21695E058()
{
  uint64_t v0 = sub_21695F068();

  return sub_21695F194(v0);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::ArResolver::ArResolver(this);
  *(_OWORD *)(v2 + 1) = 0u;
  uint64_t v3 = v2 + 1;
  *uint64_t v2 = &unk_26C753698;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  uint64_t v4 = (long long **)atomic_load((unint64_t *)&qword_267B8E9C0);
  if (!v4) {
    uint64_t v4 = (long long **)sub_21695F490(&qword_267B8E9C0);
  }
  uint64_t v13 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  sub_216812BD8((char *)&v13, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1] - (char *)*v4) >> 3));
  sub_216779094(v9, "PXR_AR_DEFAULT_SEARCH_PATH");
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v9, (uint64_t)__p, (uint64_t)v11);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  unint64_t v5 = v12;
  if ((v12 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)v11[1];
  }
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)v11, ":", v9);
    sub_21695F4FC(&v13, v14, (std::string *)v9[0], (long long *)v9[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v9[1] - (char *)v9[0]) >> 3));
    __p[0] = v9;
    sub_216782F20((void ***)__p);
  }
  pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(v9, &v13);
  sub_21680F80C(v3);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)v9;
  *((void *)this + 3) = v10;
  v9[1] = 0;
  uint64_t v10 = 0;
  v9[0] = 0;
  __p[0] = v9;
  sub_216782F20((void ***)__p);
  if ((char)v12 < 0) {
    operator delete(v11[0]);
  }
  v11[0] = &v13;
  sub_216782F20((void ***)v11);
  return this;
}

void sub_21695E23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  a10 = &a16;
  sub_216782F20((void ***)&a10);
  if (a28 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v30 - 56);
  sub_216782F20((void ***)&__p);
  *(void *)(v30 - 56) = (char *)v28 + 32;
  sub_216787968((void ***)(v30 - 56));
  *(void *)(v30 - 56) = v29;
  sub_216782F20((void ***)(v30 - 56));
  pxrInternal__aapl__pxrReserved__::ArResolver::~ArResolver(v28);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this)
{
  *(void *)this = &unk_26C753698;
  uint64_t v2 = (void **)((char *)this + 8);
  uint64_t v3 = (void **)((char *)this + 32);
  sub_216787968(&v3);
  uint64_t v3 = v2;
  sub_216782F20(&v3);
  pxrInternal__aapl__pxrReserved__::ArResolver::~ArResolver(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::SetDefaultSearchPath(uint64_t a1)
{
  unint64_t v2 = atomic_load((unint64_t *)&qword_267B8E9C0);
  if (!v2) {
    unint64_t v2 = sub_21695F490(&qword_267B8E9C0);
  }
  if (v2 != a1)
  {
    uint64_t v3 = *(std::string **)a1;
    uint64_t v4 = *(long long **)(a1 + 8);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
    sub_21680F694(v2, v3, v4, v5);
  }
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)a4 = *(_OWORD *)a2;
      a4[2] = *(void *)(a2 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(void *)(a2 + 8))
  {
LABEL_5:
    uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a3 + 8);
    }
    if (v7)
    {
      sub_21695E570(a3, a2, v14);
      if (sub_21695E72C(a2))
      {
        pxrInternal__aapl__pxrReserved__::ArResolver::Resolve(a1);
        if ((v13 & 0x80u) == 0) {
          uint64_t v8 = v13;
        }
        else {
          uint64_t v8 = v12;
        }
        if ((char)v13 < 0) {
          operator delete(__p);
        }
        if (v8) {
          uint64_t v9 = v14;
        }
        else {
          uint64_t v9 = (void **)a2;
        }
      }
      else
      {
        uint64_t v9 = v14;
      }
      pxrInternal__aapl__pxrReserved__::TfNormPath(a4, v9, 0);
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfNormPath(a4, a2, 0);
    }
    return;
  }
  uint64_t v10 = *(void **)a2;

  sub_216778F24(a4, v10, 0);
}

void sub_21695E550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695E570(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a1)) {
    goto LABEL_8;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6 && pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_216778F24(__dst, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a1;
      uint64_t v15 = *(void *)(a1 + 16);
    }
    uint64_t v9 = (char *)HIBYTE(v15);
    uint64_t v10 = __dst;
    if (v15 < 0)
    {
      uint64_t v10 = (void **)__dst[0];
      uint64_t v9 = (char *)__dst[1];
    }
    for (; v9; --v9)
    {
      if (*(unsigned char *)v10 == 92) {
        *(unsigned char *)uint64_t v10 = 47;
      }
      uint64_t v10 = (void **)((char *)v10 + 1);
    }
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)__dst, 47, &__p);
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&__p.__r_.__value_.__l.__data_, a2, v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::TfNormPath(a3, v12, 0);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__dst[0]);
    }
  }
  else
  {
LABEL_8:
    if (*(char *)(a2 + 23) < 0)
    {
      uint64_t v7 = *(void **)a2;
      unint64_t v8 = *(void *)(a2 + 8);
      sub_216778F24(a3, v7, v8);
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      a3[2] = *(void *)(a2 + 16);
    }
  }
}

void sub_21695E6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21695E72C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  unint64_t v2 = (char *)a1;
  BOOL result = pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a1);
  if (result)
  {
    char v4 = v2[23];
    if (v4 >= 0) {
      uint64_t v5 = v2[23];
    }
    else {
      uint64_t v5 = *((void *)v2 + 1);
    }
    if (v4 < 0) {
      unint64_t v2 = *(char **)v2;
    }
    uint64_t v6 = &v2[v5];
    if (v5 >= 2)
    {
      uint64_t v7 = v5;
      unint64_t v8 = v2;
      do
      {
        uint64_t v9 = (char *)memchr(v8, 46, v7 - 1);
        if (!v9) {
          break;
        }
        if (*(_WORD *)v9 == 12078)
        {
          if (v9 != v6 && v9 == v2) {
            return 0;
          }
          break;
        }
        unint64_t v8 = v9 + 1;
        uint64_t v7 = v6 - v8;
      }
      while (v6 - v8 >= 2);
      if (v5 > 2)
      {
        uint64_t v10 = v2;
        do
        {
          uint64_t v11 = (char *)memchr(v10, 46, v5 - 2);
          if (!v11) {
            break;
          }
          if (*(_WORD *)v11 == 11822 && v11[2] == 47) {
            return v11 == v6 || v11 != v2;
          }
          uint64_t v10 = v11 + 1;
          uint64_t v5 = v6 - v10;
        }
        while (v6 - v10 > 2);
      }
    }
    uint64_t v11 = v6;
    return v11 == v6 || v11 != v2;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifierForNewAsset(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      a3[2] = *(void *)(a1 + 16);
      return;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
LABEL_5:
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = v7;
    }
    if (v6 && pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a1))
    {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      if (v8) {
        sub_21695E570(a2, a1, __p);
      }
      else {
        pxrInternal__aapl__pxrReserved__::TfAbsPath(__p, a1);
      }
      pxrInternal__aapl__pxrReserved__::TfNormPath(a3, __p, 0);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfNormPath(a3, a1, 0);
    }
    return;
  }
  uint64_t v9 = *(void **)a1;

  sub_216778F24(a3, v9, 0);
}

void sub_21695E988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_Resolve(pxrInternal__aapl__pxrReserved__::ArResolver *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    sub_21695EBB8((uint64_t)v17, a2, (uint64_t)a3);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::ArchGetCwd(__p);
  sub_21695EBB8((uint64_t)__p, a2, (uint64_t)v17);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = (void *)HIBYTE(v18);
  char v8 = HIBYTE(v18);
  if (v18 < 0) {
    uint64_t v7 = v17[1];
  }
  if (v7)
  {
LABEL_10:
    *(_OWORD *)a3 = *(_OWORD *)v17;
    a3[2] = v18;
    return;
  }
  if (sub_21695E72C(a2))
  {
    InternallyManagedCurrentContext = (uint64_t *)pxrInternal__aapl__pxrReserved__::ArResolver::_GetInternallyManagedCurrentContext(a1);
    if (InternallyManagedCurrentContext) {
      InternallyManagedCurrentContext = (uint64_t *)sub_21695FB38(InternallyManagedCurrentContext);
    }
    uint64_t v10 = 0;
    v19[0] = InternallyManagedCurrentContext;
    v19[1] = (char *)a1 + 8;
    do
    {
      char v11 = (uint64_t *)v19[v10];
      if (v11)
      {
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        while (v12 != v13)
        {
          sub_21695EBB8(v12, a2, (uint64_t)__p);
          if (v8 < 0) {
            operator delete(v17[0]);
          }
          uint64_t v18 = v16;
          *(_OWORD *)uint64_t v17 = *(_OWORD *)__p;
          char v14 = (void *)HIBYTE(v16);
          char v8 = HIBYTE(v16);
          if ((v16 & 0x8000000000000000) != 0) {
            char v14 = __p[1];
          }
          if (v14) {
            goto LABEL_10;
          }
          v12 += 24;
        }
      }
      ++v10;
    }
    while (v10 != 2);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v8 < 0) {
LABEL_13:
  }
    operator delete(v17[0]);
}

void sub_21695EB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695EBB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a1, a2, &v7);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v7;
    uint64_t v10 = v8;
  }
  if (pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)__p, 0))
  {
    pxrInternal__aapl__pxrReserved__::TfAbsPath(&v7, __p);
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + 16) = v8;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695ECA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetCurrentContextPtr(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this)
{
  BOOL result = (uint64_t *)pxrInternal__aapl__pxrReserved__::ArResolver::_GetInternallyManagedCurrentContext(this);
  if (result)
  {
    return (uint64_t *)sub_21695FB38(result);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_ResolveForNewAsset(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      uint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(void *)(a1 + 8))
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::TfAbsPath(__p, a1);
    goto LABEL_6;
  }
  sub_216778F24(__p, *(void **)a1, 0);
LABEL_6:
  if (SHIBYTE(v4) < 0)
  {
    sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v4;
  }
}

void sub_21695EDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetModificationTimestamp(uint64_t a1, uint64_t a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetModificationTimestamp(a3, a2, (double *)a3);
}

double pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset@<D0>(const char *a1@<X1>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Open(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAssetForWrite@<D0>(uint64_t a1@<X1>, int a2@<W2>, _OWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Create(a1, a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_IsContextDependentPath(uint64_t a1, uint64_t a2)
{
  return sub_21695E72C(a2);
}

void *pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateDefaultContext@<X0>(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_21695F340(a2, *((void **)this + 4), *((void **)this + 5), (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 4);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateContextFromString(unsigned __int8 *a1@<X1>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfStringTokenize(a1, ":", v3);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(v4, v3);
  sub_21695F780(a2, v4);
  long long v5 = v4;
  sub_216782F20((void ***)&v5);
  long long v5 = (long long **)v3;
  sub_216782F20((void ***)&v5);
}

void sub_21695EEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v11 - 24) = v10;
  sub_216782F20((void ***)(v11 - 24));
  *(void *)(v11 - 24) = &a10;
  sub_216782F20((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateDefaultContextForAsset(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::TfAbsPath(&__p, a1);
    pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_2168758C4(v4, 1uLL, (long long *)&v6);
    pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(&__p, v4);
    sub_21695F780(a2, (long long **)&__p);
    p_p = &__p;
    sub_216782F20((void ***)&p_p);
    p_p = (std::string *)v4;
    sub_216782F20((void ***)&p_p);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    memset(&v6, 0, sizeof(v6));
    sub_21695F780(a2, (long long **)&v6);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6;
    sub_216782F20((void ***)&__p);
  }
}

void sub_21695EFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t *sub_21695F068()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_21695F23C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21695F148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_21695F194(uint64_t *a1)
{
  unint64_t v2 = operator new(8uLL);
  *unint64_t v2 = &unk_26C753778;
  long long v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  long long v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21695F220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695F23C(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21695F2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695F2D4(pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase::~Ar_ResolverFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *sub_21695F2FC()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v0);
  return v0;
}

void sub_21695F32C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21695F340(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_21695F3C8((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21695F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void *sub_21695F3C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_21695F458((uint64_t)v7);
  return v4;
}

uint64_t sub_21695F458(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168B84AC(a1);
  }
  return a1;
}

unint64_t sub_21695F490(atomic_ullong *a1)
{
  unint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *unint64_t v2 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    uint64_t v6 = (void **)v2;
    sub_216782F20(&v6);
    operator delete(v3);
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

std::string *sub_21695F4FC(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        char v21 = (long long *)&a3[a5];
      }
      else
      {
        char v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = (uint64_t)sub_21695F6C0(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_21680F12C((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_21680F908(a3, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        int v19 = (char *)sub_216782ED8(v9, v18);
      }
      else {
        int v19 = 0;
      }
      char v23 = v19;
      long long v24 = &v19[24 * v15];
      long long v25 = v24;
      long long v26 = &v19[24 * v18];
      sub_2168663C8(&v23, (long long *)a3, a5);
      uint64_t v5 = (std::string *)sub_21680F250((uint64_t)a1, &v23, (long long *)v5);
      sub_216790E64((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_21695F6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

char *sub_21695F6C0(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  unint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_216778F24(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      unint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_21680F480((uint64_t)v9);
  return v4;
}

void sub_21695F76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_21695F780(uint64_t *a1, long long **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_21695F7D0(a1, a2);
  return a1;
}

void sub_21695F7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216787968((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21695F7D0(uint64_t *a1, long long **a2)
{
  uint64_t v4 = operator new(0x20uLL);
  sub_21695F864((uint64_t)v4, a2);
  sub_21695FA28(&v5, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(a1, &v5);
  if (v5.n128_u64[1]) {
    sub_216784EC4((std::__shared_weak_count *)v5.n128_u64[1]);
  }
}

void sub_21695F83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21695F864(uint64_t a1, long long **a2)
{
  *(void *)a1 = &unk_26C7537B8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  sub_216812BD8((char *)(a1 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_21695F8CC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped::~_Untyped(v1);
  _Unwind_Resume(a1);
}

void sub_21695F8E0(void **a1)
{
  *a1 = &unk_26C7537B8;
  unint64_t v2 = a1 + 1;
  sub_216782F20(&v2);
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped::~_Untyped((pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped *)a1);
}

void sub_21695F93C(void **a1)
{
  *a1 = &unk_26C7537B8;
  uint64_t v3 = a1 + 1;
  sub_216782F20(&v3);
  pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped::~_Untyped((pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped *)a1);
  operator delete(v2);
}

void *sub_21695F99C(uint64_t a1)
{
  unint64_t v2 = operator new(0x20uLL);
  sub_21695F864((uint64_t)v2, (long long **)(a1 + 8));
  return v2;
}

void sub_21695F9D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21695F9E8()
{
  return &unk_26C753818;
}

uint64_t sub_21695F9F4(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator<((const void ***)(a1 + 8), (const void ***)(a2 + 8));
}

uint64_t sub_21695FA00(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator==((unsigned __int8 **)(a1 + 8), a2 + 8);
}

unint64_t sub_21695FA0C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext *a2)
{
  return pxrInternal__aapl__pxrReserved__::hash_value((uint64_t **)(a1 + 8), a2);
}

std::string *sub_21695FA14@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::GetAsString((std::string **)(a1 + 8), a2);
}

uint64_t sub_21695FA1C()
{
  return 0;
}

void *sub_21695FA28(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C753838;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21695FA80(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173243D0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21695FA9C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21695FAC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21695FAF4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C753888)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_21695FB38(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v1 + 24))();
    if (!strcmp((const char *)(0x80000002174599D9 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL)))break; {
    v1 += 16;
    }
    if (v1 == v2) {
      return 0;
    }
  }
  return *(void *)v1 + 8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(uint64_t *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_21680BC90(a1, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  uint64_t v4 = *a2;
  __n128 v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (*((char *)v4 + 23) < 0)
      {
        if (v4[1])
        {
LABEL_6:
          pxrInternal__aapl__pxrReserved__::TfAbsPath(__p, v4);
          uint64_t v6 = (void *)HIBYTE(v15);
          if (v15 < 0) {
            uint64_t v6 = __p[1];
          }
          if (v6)
          {
            unint64_t v7 = a1[1];
            if (v7 >= a1[2])
            {
              uint64_t v10 = sub_2167E9A44(a1, (long long *)__p);
            }
            else
            {
              if (SHIBYTE(v15) < 0)
              {
                sub_216778F24((unsigned char *)a1[1], __p[0], (unint64_t)__p[1]);
              }
              else
              {
                long long v8 = *(_OWORD *)__p;
                *(void *)(v7 + 16) = v15;
                *(_OWORD *)unint64_t v7 = v8;
              }
              uint64_t v10 = v7 + 24;
              a1[1] = v7 + 24;
            }
            a1[1] = v10;
          }
          else
          {
            v12[0] = "ar/defaultResolverContext.cpp";
            v12[1] = "ArDefaultResolverContext";
            uint64_t v12[2] = 48;
            uint64_t v12[3] = "pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::ArDefaultResolverContext(const std::vec"
                     "tor<std::string> &)";
            char v13 = 0;
            uint64_t v9 = v4;
            if (*((char *)v4 + 23) < 0) {
              uint64_t v9 = (uint64_t *)*v4;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v12, (pxrInternal__aapl__pxrReserved__ *)"Could not determine absolute path for search path prefix '%s'", (char *)__p[1], v9);
          }
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (*((unsigned char *)v4 + 23))
      {
        goto LABEL_6;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  return a1;
}

void sub_21695FD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator<(const void ***a1, const void ***a2)
{
  return sub_21695FFC4(*a1, a1[1], *a2, a2[1], (uint64_t)&v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator==(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  char v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = sub_2168513F8((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator!=(unsigned __int8 **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::operator==(a1, a2) ^ 1;
}

std::string *pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext::GetAsString@<X0>(std::string **this@<X0>, std::string *a2@<X8>)
{
  sub_216779094(a2, "Search path: ");
  if (*this == this[1])
  {
    char v6 = "[ ]";
  }
  else
  {
    std::string::append(a2, "[\n    ");
    pxrInternal__aapl__pxrReserved__::TfStringJoin("\n    ", this, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char v6 = "\n]";
  }
  return std::string::append(a2, v6);
}

void sub_21695FF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::hash_value(uint64_t **this, const pxrInternal__aapl__pxrReserved__::ArDefaultResolverContext *a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  sub_216960068((unint64_t)&v3, *this, 0xAAAAAAAAAAAAAAABLL * (this[1] - *this));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_21695FFC4(const void **a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  if (a3 == a4) {
    return 0;
  }
  unint64_t v7 = a3;
  while (a1 != a2 && !sub_21677B108(a5, a1, v7))
  {
    BOOL v10 = sub_21677B108(a5, v7, a1);
    uint64_t result = 0;
    if (!v10)
    {
      a1 += 3;
      v7 += 3;
      if (v7 != a4) {
        continue;
      }
    }
    return result;
  }
  return 1;
}

unint64_t sub_216960068(unint64_t this, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    char v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)this;
    do
    {
      --v3;
      __n128 v5 = a2 + 3;
      char v6 = (char *)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        unint64_t v7 = (char *)*((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (uint64_t *)*a2;
        unint64_t v7 = v6;
      }
      this = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(v4, (pxrInternal__aapl__pxrReserved__ *)a2, v7);
      a2 = v5;
    }
    while (v3);
  }
  return this;
}

FILE *pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Open@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::ArchOpenFile(a1, "rb");
  char v4 = result;
  if (result) {
    return (FILE *)sub_2169606AC(&v4, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetModificationTimestamp(char *a1, uint64_t a2, double *a3)
{
  *(void *)__n128 v5 = 0;
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  BOOL ModificationTime = pxrInternal__aapl__pxrReserved__::ArchGetModificationTime((pxrInternal__aapl__pxrReserved__ *)a1, (double *)v5, a3);
  double result = *(double *)v5;
  if (!ModificationTime) {
    return NAN;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset(pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *this, __sFILE *a2)
{
  char v4 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(this);
  void *v4 = &unk_26C753930;
  v4[1] = a2;
  if (!a2)
  {
    v6[0] = "ar/filesystemAsset.cpp";
    v6[1] = "ArFilesystemAsset";
    void v6[2] = 59;
    v6[3] = "pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset(FILE *)";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid file handle");
  }
  return this;
}

void sub_216960224(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::~ArFilesystemAsset(FILE **this)
{
  *this = (FILE *)&unk_26C753930;
  fclose(this[1]);

  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)this);
}

{
  uint64_t vars8;

  *this = (FILE *)&unk_26C753930;
  fclose(this[1]);

  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)this);
}

{
  void *v2;
  uint64_t vars8;

  *this = (FILE *)&unk_26C753930;
  fclose(this[1]);
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)this);

  operator delete(v2);
}

off_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetSize(FILE **this, __sFILE *a2)
{
  return pxrInternal__aapl__pxrReserved__::ArchGetFileLength(this[1], a2);
}

void *pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetBuffer@<X0>(pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(v10, *((void *)this + 1), 0);
  uint64_t v3 = v10[0];
  if (v10[0])
  {
    char v4 = operator new(0x10uLL);
    v10[0] = 0;
    uint64_t v5 = v10[1];
    void *v4 = v3;
    v4[1] = v5;
    sub_21696051C(&v9, (uint64_t)v4);
    *a2 = v3;
    char v6 = operator new(0x30uLL);
    long long v7 = v9;
    long long v9 = 0uLL;
    *char v6 = &unk_26C753A58;
    v6[1] = 0;
    void v6[2] = 0;
    v6[3] = v3;
    *((_OWORD *)v6 + 2) = v7;
    a2[1] = v6;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return sub_2168351F0((uint64_t)v10, 0);
}

void sub_216960400(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  __cxa_rethrow();
}

void sub_21696041C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  __cxa_end_catch();
  if (a3) {
    sub_216784EC4(a3);
  }
  sub_2168351F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

ssize_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Read(FILE **this, __sFILE *a2, char *a3, off_t a4)
{
  ssize_t result = pxrInternal__aapl__pxrReserved__::ArchPRead(this[1], a2, a3, a4);
  if (result == -1)
  {
    v8[0] = "ar/filesystemAsset.cpp";
    v8[1] = "Read";
    _OWORD v8[2] = 105;
    void v8[3] = "virtual size_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::Read(void *, size_t, size_t) const";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v7 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Error occurred reading file: %s", (const char *)v5);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_2169604F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *this)
{
  return *((void *)this + 1);
}

void *sub_21696051C(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C753990;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216960580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216960658((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_21696059C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2169605C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    sub_2168351F0(*(void *)(a1 + 24), 0);
    operator delete(v1);
  }
}

uint64_t sub_216960614(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7539E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216960658(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_2168351F0((uint64_t)v2, 0);
    operator delete(v2);
  }
}

void *sub_2169606AC@<X0>(__sFILE **a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x28uLL);
  ssize_t result = sub_216960708(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2169606F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216960708(void *a1, __sFILE **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C753A08;
  pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset((pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *)(a1 + 3), *a2);
  return a1;
}

void sub_216960754(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216960768(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216960788(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753A08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2169607CC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2169607F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753A58;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    sub_216784EC4(shared_weak_owners);
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216960850(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753A58;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    sub_216784EC4(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);

  operator delete(v3);
}

void sub_2169608B0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (v2)
  {
    sub_216784EC4(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (v3)
    {
      sub_216784EC4(v3);
    }
  }
}

uint64_t sub_216960904(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C753A98)) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Create(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)a1, &v18);
  std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  if (!size
    || (pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)&v18, 0) & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::TfMakeDirs((uint64_t)&v18, 0xFFFFFFFFLL, 1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17);
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    if (a2)
    {
      if (a2 != 1)
      {
LABEL_11:
        unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v7) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v8 = v17;
        unint64_t v9 = atomic_load((unint64_t *)(v7 + 144));
        if (v8 >= v9
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17, (atomic_ullong *)v7))
        {
          sub_216960F34((uint64_t)&v13, a3);
        }
        else
        {
          *a3 = 0;
          a3[1] = 0;
        }
        pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *)&v13);
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v17);
        goto LABEL_18;
      }
      pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(a1, (uint64_t)v12);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Update((std::string *)a1, (uint64_t)v12);
    }
    sub_216960B40((uint64_t)&v13, (uint64_t)v12);
    pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *)v12);
    goto LABEL_11;
  }
  *(void *)&long long v13 = "ar/filesystemWritableAsset.cpp";
  *((void *)&v13 + 1) = "Create";
  *(void *)&long long v14 = 48;
  *((void *)&v14 + 1) = "static std::shared_ptr<ArFilesystemWritableAsset> pxrInternal__aapl__pxrReserved__::ArFilesyst"
                          "emWritableAsset::Create(const ArResolvedPath &, ArResolver::WriteMode)";
  LOBYTE(v15) = 0;
  BOOL v10 = &v18;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v11 = (const char *)a1;
  }
  else {
    uint64_t v11 = *(const char **)a1;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not create directory '%s' for asset '%s'", (const char *)v10, v11);
  *a3 = 0;
  a3[1] = 0;
LABEL_18:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_216960AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (*(char *)(v19 - 33) < 0) {
    operator delete(*(void **)(v19 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216960B40(uint64_t a1, uint64_t a2)
{
  char v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  unint64_t v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)unint64_t v7 = v8;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)a2 = 0;
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::ArFilesystemWritableAsset(void *a1, uint64_t a2)
{
  char v4 = pxrInternal__aapl__pxrReserved__::ArWritableAsset::ArWritableAsset(a1);
  void *v4 = &unk_26C753AB8;
  v4[1] = *(void *)a2;
  long long v5 = *(_OWORD *)(a2 + 8);
  void v4[4] = *(void *)(a2 + 24);
  *((_OWORD *)v4 + 1) = v5;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v6 = *(_OWORD *)(a2 + 32);
  v4[7] = *(void *)(a2 + 48);
  *(_OWORD *)(v4 + 5) = v6;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)a2 = 0;
  if (!v4[1])
  {
    v8[0] = "ar/filesystemWritableAsset.cpp";
    v8[1] = "ArFilesystemWritableAsset";
    _OWORD v8[2] = 75;
    void v8[3] = "pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::ArFilesystemWritableAsset(TfSafeOutputFile &&)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid output file");
  }
  return a1;
}

void sub_216960CB4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(v2);
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::~ArFilesystemWritableAsset(pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *this)
{
  *(void *)this = &unk_26C753AB8;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));

  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C753AB8;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));

  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C753AB8;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);

  operator delete(v2);
}

BOOL pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Close(pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *this)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close((pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset *)((char *)this + 8));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v7;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  BOOL v5 = v3 >= v4
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (atomic_ullong *)v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return v5;
}

void sub_216960E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Write(FILE **this, __sFILE *a2, char *a3, off_t a4)
{
  ssize_t result = pxrInternal__aapl__pxrReserved__::ArchPWrite(this[1], a2, a3, a4);
  if (result == (char *)-1)
  {
    v8[0] = "ar/filesystemWritableAsset.cpp";
    v8[1] = "Write";
    _OWORD v8[2] = 96;
    void v8[3] = "virtual size_t pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::Write(const void *, size_t, size_t)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v7 >= 0) {
      BOOL v5 = __p;
    }
    else {
      BOOL v5 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Error occurred writing file: %s", (const char *)v5);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_216960F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216960F34@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x58uLL);
  ssize_t result = sub_216960F90(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_216960F7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216960F90(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C753B00;
  pxrInternal__aapl__pxrReserved__::ArFilesystemWritableAsset::ArFilesystemWritableAsset(a1 + 3, a2);
  return a1;
}

void sub_216960FD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216960FEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21696100C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753B00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216961050(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromBuffer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a2;
  return sub_216961460(a1, &v4, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a2;
  return sub_216961604(a1, &v4, a3);
}

void pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::~ArInMemoryAsset(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this)
{
  *(void *)this = &unk_26C753B50;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::~ArInMemoryAsset(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromAsset(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this@<X0>, const pxrInternal__aapl__pxrReserved__::ArAsset *a2@<X1>, void *a3@<X8>)
{
  size_t v5 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *, const pxrInternal__aapl__pxrReserved__::ArAsset *))(*(void *)this + 16))(this, a2);
  long long v12 = 0uLL;
  long long v6 = operator new[](v5);
  sub_216961348(&v12, (uint64_t)v6);
  uint64_t v7 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *, void, size_t, void))(*(void *)this + 32))(this, v12, v5, 0);
  if (v7 == v5)
  {
    long long v8 = v12;
    long long v12 = 0uLL;
    size_t v13 = v5;
    sub_216961604((uint64_t)&v8, (uint64_t *)&v13, a3);
    if (*((void *)&v8 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  else
  {
    *(void *)&long long v8 = "ar/inMemoryAsset.cpp";
    *((void *)&v8 + 1) = "FromAsset";
    uint64_t v9 = 82;
    BOOL v10 = "static std::shared_ptr<ArInMemoryAsset> pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::FromAsset(const ArAsset &)";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read asset into memory. Expected %zu bytes, read %zu.", v5, v7);
    *a3 = 0;
    a3[1] = 0;
  }
  if (*((void *)&v12 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_2169612A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_216784EC4(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_216961348(void *a1, uint64_t a2)
{
  sub_216961710(&v5, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetSize(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this)
{
  return *((void *)this + 3);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetBuffer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

size_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::Read(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this, void *__dst, size_t a3, uint64_t a4)
{
  if (a4 + a3 > *((void *)this + 3)) {
    return 0;
  }
  size_t v4 = a3;
  memcpy(__dst, (const void *)(*((void *)this + 1) + a4), a3);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this)
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::ArInMemoryAsset::GetDetachedAsset@<D0>(pxrInternal__aapl__pxrReserved__::ArInMemoryAsset *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 3);
  sub_216961460((uint64_t *)this + 1, &v5, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void *sub_216961460@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x38uLL);
  double result = sub_2169614D4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2169614C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169614D4(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C753BB0;
  uint64_t v5 = *a3;
  pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(a1 + 3);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  a1[3] = &unk_26C753B50;
  a1[4] = v7;
  a1[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = v5;
  return a1;
}

void sub_216961564(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216961578(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216961598(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C753BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2169615DC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_216961604@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x38uLL);
  uint64_t result = sub_216961678((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_216961664(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216961678(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C753BB0;
  uint64_t v5 = *a3;
  pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset((void *)(a1 + 24));
  *(void *)(a1 + 24) = &unk_26C753B50;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 48) = v5;
  return a1;
}

void sub_2169616FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_216961710(void *a1, uint64_t a2)
{
  *a1 = a2;
  size_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C753C00;
  v4[1] = 0;
  v4[2] = 0;
  double v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216961768(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete[](v1);
  }
  __cxa_rethrow();
}

void sub_216961780(_Unwind_Exception *a1)
{
}

void sub_216961798(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2169617C0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete[](v1);
  }
}

uint64_t sub_2169617D0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C753C40)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t *sub_216961814()
{
  sub_216961B98();

  return sub_216961CC4();
}

void *pxrInternal__aapl__pxrReserved__::ArNotice::ResolverNotice::ResolverNotice(void *this)
{
  *this = &unk_26C753C60;
  return this;
}

{
  *this = &unk_26C753C60;
  return this;
}

void pxrInternal__aapl__pxrReserved__::ArNotice::ResolverNotice::~ResolverNotice(pxrInternal__aapl__pxrReserved__::ArNotice::ResolverNotice *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged *pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged *this)
{
  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C753CD0;
  void v3[3] = v3;
  pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(this, (uint64_t)v3);
  sub_216961F44(v3);
  return this;
}

{
  void v3[5];

  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C753CD0;
  void v3[3] = v3;
  pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(this, (uint64_t)v3);
  sub_216961F44(v3);
  return this;
}

void sub_216961938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216961F44((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::ResolverChanged(void *a1, uint64_t a2)
{
  *a1 = &unk_26C753C80;
  sub_216961FC8((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_216961990(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(v1);
  _Unwind_Resume(a1);
}

void sub_216961A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216961F44((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::~ResolverChanged(pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged *this)
{
  *(void *)this = &unk_26C753C80;
  sub_216961F44((void *)this + 1);

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C753C80;
  sub_216961F44((void *)this + 1);

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C753C80;
  sub_216961F44((void *)this + 1);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArNotice::ResolverChanged::AffectsContext(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_21683A7CC();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t *sub_216961B98()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216961C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216961CC4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216961DF4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216961DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216961DF4(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216961E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216961E90()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C753CD0;
  return result;
}

void sub_216961EC8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C753CD0;
}

uint64_t sub_216961EF0()
{
  return 1;
}

uint64_t sub_216961EF8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C753D40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216961F38()
{
  return &unk_26C753D40;
}

void *sub_216961F44(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216961FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(void *this)
{
  *this = &unk_26C753D60;
  return this;
}

uint64_t *sub_216962090()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216962150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v1 = *(void *)(a1 + 8);
    if (v1)
    {
      uint64_t v3 = *(void *)a1;
      uint64_t v4 = *(void *)a1 + v1;
      int v5 = *(unsigned __int8 *)(v4 - 1);
      unint64_t v2 = (unsigned __int8 *)(v4 - 1);
      if (v5 == 93) {
        return v3 + v1 != (void)sub_21696220C(a1, v2);
      }
    }
  }
  else
  {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
    if (*(unsigned char *)(a1 + 23))
    {
      unint64_t v2 = (unsigned __int8 *)(a1 + v1 - 1);
      if (*v2 == 93)
      {
        uint64_t v3 = a1;
        return v3 + v1 != (void)sub_21696220C(a1, v2);
      }
    }
  }
  return 0;
}

unsigned __int8 *sub_21696220C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = (unsigned __int8 *)a1;
  }
  else {
    uint64_t v3 = *(unsigned __int8 **)a1;
  }
  if (v3 == a2)
  {
    if ((v2 & 0x80u) != 0) {
      uint64_t v2 = *(void *)(a1 + 8);
    }
    return &v3[v2];
  }
  else
  {
    uint64_t v4 = a2 - 1;
    uint64_t v5 = 1;
    do
    {
      int v6 = *v4;
      if ((v6 == 93 || v6 == 91) && (v4 == v3 || *(v4 - 1) != 92))
      {
        if (v6 == 91) {
          --v5;
        }
        else {
          ++v5;
        }
      }
      uint64_t v7 = v4 - 1;
      if (v4 == v3) {
        break;
      }
      --v4;
    }
    while (v5);
    if ((v2 & 0x80u) != 0) {
      uint64_t v2 = *(void *)(a1 + 8);
    }
    uint64_t v8 = &v3[v2];
    if (v5) {
      return v8;
    }
    else {
      return v7 + 1;
    }
  }
}

void pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(long long **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        if (*((void *)v3 + 1)) {
          goto LABEL_8;
        }
      }
      else if (*((unsigned char *)v3 + 23))
      {
        goto LABEL_8;
      }
      uint64_t v3 = (long long *)((char *)v3 + 24);
    }
    while (v3 != v4);
    goto LABEL_11;
  }
LABEL_8:
  if (v3 == v4)
  {
LABEL_11:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (*((char *)v3 + 23) < 0)
  {
    sub_216778F24(a2, *(void **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v5 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v8 = a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
    std::string::size_type v7 = a2->__r_.__value_.__r.__words[0] + size;
    if (*(unsigned char *)(v7 - 1) == 93)
    {
LABEL_17:
      while (v7 != v8)
      {
        int v10 = *(unsigned __int8 *)--v7;
        if (v10 != 93)
        {
          std::string::size_type v8 = v7 + 1;
          break;
        }
      }
      if ((v6 & 0x80u) == 0) {
        char v11 = a2;
      }
      else {
        char v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      std::string::size_type size = v8 - (void)v11;
    }
  }
  else
  {
    std::string::size_type v7 = (std::string::size_type)a2 + v6;
    std::string::size_type v8 = (std::string::size_type)a2;
    if (a2->__r_.__value_.__s.__data_[v6 - 1] == 93) {
      goto LABEL_17;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  for (uint64_t i = (uint64_t)v3 + 24; (long long *)i != v4; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      if (*(void *)(i + 8))
      {
LABEL_29:
        sub_216962FC0(i, (uint64_t)&v17);
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v17;
        }
        else {
          v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)v17.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&v17, v13, 91);
        std::string v18 = v17;
        memset(&v17, 0, sizeof(v17));
        std::string::push_back(&v18, 93);
        std::string v19 = v18;
        memset(&v18, 0, sizeof(v18));
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v14 = &v19;
        }
        else {
          long long v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
        }
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v15 = v19.__r_.__value_.__l.__size_;
        }
        std::string::insert(a2, size, (const std::string::value_type *)v14, v15);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v16 = v19.__r_.__value_.__l.__size_;
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::size_type v16 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        }
        std::string::size_type size = size + v16 - 1;
      }
    }
    else if (*(unsigned char *)(i + 23))
    {
      goto LABEL_29;
    }
  }
}

void sub_2169624C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v2[0] = a1;
  v2[1] = a1 + 24;
  sub_216962580(v2, &v3, a2);
}

void sub_216962580(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  if (a1 == a2)
  {
LABEL_8:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  long long v5 = a1;
  while (1)
  {
    uint64_t v6 = (long long *)*v5;
    if (*(char *)(*v5 + 23) < 0) {
      break;
    }
    if (*(unsigned char *)(*v5 + 23))
    {
      long long v8 = *v6;
      a3->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
      goto LABEL_10;
    }
LABEL_7:
    if (++v5 == a2) {
      goto LABEL_8;
    }
  }
  unint64_t v7 = *((void *)v6 + 1);
  if (!v7) {
    goto LABEL_7;
  }
  sub_216778F24(a3, *(void **)v6, v7);
LABEL_10:
  uint64_t v9 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v11 = a3->__r_.__value_.__r.__words[0];
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
    std::string::size_type v10 = a3->__r_.__value_.__r.__words[0] + size;
    if (*(unsigned char *)(v10 - 1) == 93)
    {
LABEL_14:
      while (v10 != v11)
      {
        int v13 = *(unsigned __int8 *)--v10;
        if (v13 != 93)
        {
          std::string::size_type v11 = v10 + 1;
          break;
        }
      }
      if ((v9 & 0x80u) == 0) {
        long long v14 = a3;
      }
      else {
        long long v14 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      std::string::size_type size = v11 - (void)v14;
    }
  }
  else
  {
    std::string::size_type v10 = (std::string::size_type)a3 + v9;
    std::string::size_type v11 = (std::string::size_type)a3;
    if (a3->__r_.__value_.__s.__data_[v9 - 1] == 93) {
      goto LABEL_14;
    }
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v15 = v5 + 1;
  if (v15 != a2)
  {
    while (2)
    {
      uint64_t v16 = *v15;
      if (*(char *)(*v15 + 23) < 0)
      {
        if (!*(void *)(v16 + 8)) {
          goto LABEL_41;
        }
      }
      else if (!*(unsigned char *)(*v15 + 23))
      {
        goto LABEL_41;
      }
      sub_216962FC0(v16, (uint64_t)&v21);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v21;
      }
      else {
        v17.__i_ = (std::__wrap_iter<const char *>::iterator_type)v21.__r_.__value_.__r.__words[0];
      }
      std::string::insert(&v21, v17, 91);
      std::string v22 = v21;
      memset(&v21, 0, sizeof(v21));
      std::string::push_back(&v22, 93);
      std::string v23 = v22;
      memset(&v22, 0, sizeof(v22));
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v18 = &v23;
      }
      else {
        std::string v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v19 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v19 = v23.__r_.__value_.__l.__size_;
      }
      std::string::insert(a3, size, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v20 = v23.__r_.__value_.__l.__size_;
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::size_type v20 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      std::string::size_type size = size + v20 - 1;
LABEL_41:
      if (++v15 == a2) {
        return;
      }
      continue;
    }
  }
}

void sub_216962780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v3[0] = a1;
  v3[1] = a2;
  sub_216962580(v3, &v4, a3);
}

void pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v6 = *(char **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    if (!v7) {
      goto LABEL_12;
    }
    int v5 = v6[v7 - 1];
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      uint64_t v7 = 0;
      uint64_t v6 = (char *)a1;
LABEL_12:
      long long v8 = (unsigned __int8 *)&v6[v7];
      if ((v4 & 0x80) != 0) {
        goto LABEL_8;
      }
LABEL_13:
      long long v14 = (unsigned __int8 *)(a1 + v4);
      if (v8 != (unsigned __int8 *)(a1 + v4))
      {
        std::string::size_type v15 = sub_21696220C(a1, v8);
        if (v14 != v15)
        {
          int v13 = (char *)v15;
          goto LABEL_16;
        }
      }
      *(void *)((char *)&v23 + 7) = 0;
      *(void *)&long long v23 = 0;
      *(_OWORD *)a2 = *(_OWORD *)v2;
      *(void *)(a2 + 16) = *(void *)(v2 + 16);
LABEL_21:
      uint64_t v18 = v23;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = v18;
      *(void *)(a2 + 39) = *(void *)((char *)&v23 + 7);
      *(unsigned char *)(a2 + 47) = 0;
      return;
    }
    int v5 = *(unsigned __int8 *)(a1 + v4 - 1);
    uint64_t v6 = (char *)a1;
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v5 != 93) {
    goto LABEL_12;
  }
  long long v8 = (unsigned __int8 *)&v6[v7 - 1];
  if ((v4 & 0x80) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v9 = *(char **)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  std::string::size_type v11 = (unsigned __int8 *)(*(void *)a1 + v10);
  if (v8 == v11 || (long long v12 = sub_21696220C(a1, v8), v11 == v12))
  {
    *(void *)((char *)&v23 + 7) = 0;
    *(void *)&long long v23 = 0;
    sub_216778F24((unsigned char *)a2, v9, v10);
    goto LABEL_21;
  }
  int v13 = (char *)v12;
  uint64_t v2 = (uint64_t)v9;
LABEL_16:
  sub_21682E90C(&v23, (char *)v2, v13, (unint64_t)&v13[-v2]);
  sub_21682E90C(__p, v13 + 1, (char *)v8, v8 - (unsigned __int8 *)(v13 + 1));
  sub_216962A4C((uint64_t)__p, (uint64_t)&v19);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  long long v16 = v19;
  *(_OWORD *)std::string __p = v19;
  uint64_t v17 = v20;
  uint64_t v22 = v20;
  *(_OWORD *)a2 = v23;
  *(void *)(a2 + 16) = v24;
  *(_OWORD *)(a2 + 24) = v16;
  *(void *)(a2 + 40) = v17;
}

void sub_216962A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_216962A4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *(void *)(a1 + 16);
      return;
    }
    int v5 = (char *)(a1 + v4);
    uint64_t v6 = (unsigned __int8 *)(a1 + v4 - 1);
    int v7 = *v6;
    long long v8 = (char *)a1;
    goto LABEL_6;
  }
  long long v8 = *(char **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    int v5 = &v8[v4];
    uint64_t v6 = (unsigned __int8 *)&v8[v4 - 1];
    int v7 = *v6;
LABEL_6:
    if (v7 == 93)
    {
      uint64_t v9 = sub_21696220C(a1, v6);
      if (&v8[v4] != (char *)v9) {
        int v5 = (char *)v9;
      }
    }
    sub_21682E90C(&__p, v8, v5, v5 - v8);
    sub_216779094(v19, "\\[");
    sub_216779094(v17, "[");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)v19, (unsigned __int8 *)v17, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v21;
    *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
    v21.__r_.__value_.__s.__data_[0] = 0;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    sub_216779094(v19, "\\]");
    sub_216779094(v17, "]");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)v19, (unsigned __int8 *)v17, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v21;
    *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
    v21.__r_.__value_.__s.__data_[0] = 0;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    if ((v10 & 0x80u) == 0) {
      std::string::size_type v11 = (char *)a1;
    }
    else {
      std::string::size_type v11 = *(char **)a1;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    sub_21682E90C(&v21, v5, &v11[v10], &v11[v10] - v5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v14 = std::string::insert(&v21, 0, (const std::string::value_type *)p_p, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)(a2 + 16) = *((void *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  long long v16 = *(char **)a1;

  sub_216778F24((unsigned char *)a2, v16, 0);
}

void sub_216962CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  LODWORD(v4) = *(char *)(a1 + 23);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      uint64_t v7 = *(void *)a1;
      if (*(unsigned char *)(v6 + v8 - 1) == 93) {
        goto LABEL_7;
      }
    }
LABEL_22:
    long long v12 = (unsigned __int8 *)(v6 + v8);
    if ((v4 & 0x80000000) != 0) {
      goto LABEL_17;
    }
LABEL_23:
    uint64_t v17 = (unsigned __int8 *)(a1 + v5);
    if (v12 != (unsigned __int8 *)(a1 + v5))
    {
      char v18 = sub_21696220C(a1, v12);
      if (v17 != v18)
      {
        long long v16 = (char *)v18;
        std::string __dst = *(std::string *)a1;
        goto LABEL_26;
      }
    }
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
    __dst.__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
LABEL_34:
    std::string::size_type v22 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = v22;
    *(void *)(a2 + 39) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
    *(unsigned char *)(a2 + 47) = 0;
    return;
  }
  if (!*(unsigned char *)(a1 + 23))
  {
    uint64_t v8 = 0;
    uint64_t v6 = a1;
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + v5 - 1) != 93)
  {
LABEL_20:
    uint64_t v6 = a1;
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = a1;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
LABEL_7:
  uint64_t v9 = v7 + v8;
  do
  {
    if ((v4 & 0x80000000) != 0)
    {
      if (v9 == v6)
      {
        uint64_t v8 = *(void *)(a1 + 8);
        goto LABEL_22;
      }
    }
    else if (v9 == a1)
    {
      goto LABEL_20;
    }
    int v11 = *(unsigned __int8 *)--v9;
    int v10 = v11;
  }
  while (v11 == 93);
  if (v10 == 92) {
    long long v12 = (unsigned __int8 *)(v9 + 2);
  }
  else {
    long long v12 = (unsigned __int8 *)(v9 + 1);
  }
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_17:
  int v13 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  long long v14 = (unsigned __int8 *)(*(void *)a1 + v4);
  if (v12 == v14 || (long long v15 = sub_21696220C(a1, v12), v14 == v15))
  {
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
    __dst.__r_.__value_.__r.__words[0] = 0;
    sub_216778F24((unsigned char *)a2, v13, v4);
    goto LABEL_34;
  }
  long long v16 = (char *)v15;
  sub_216778F24(&__dst, v13, v4);
  LOBYTE(v4) = *(unsigned char *)(a1 + 23);
LABEL_26:
  if ((v4 & 0x80u) == 0) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = *(void *)a1;
  }
  std::string::erase(&__dst, (std::string::size_type)&v16[-v19], v12 - (unsigned __int8 *)v16 + 1);
  sub_21682E90C(__p, v16 + 1, (char *)v12, v12 - (unsigned __int8 *)(v16 + 1));
  sub_216962A4C((uint64_t)__p, (uint64_t)&v23);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  long long v20 = v23;
  *(_OWORD *)std::string __p = v23;
  uint64_t v21 = v24;
  uint64_t v26 = v24;
  *(std::string *)a2 = __dst;
  *(_OWORD *)(a2 + 24) = v20;
  *(void *)(a2 + 40) = v21;
}

void sub_216962F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void sub_216962FC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *(void *)(a1 + 16);
      return;
    }
    uint64_t v5 = (char *)(a1 + v4);
    uint64_t v6 = (unsigned __int8 *)(a1 + v4 - 1);
    int v7 = *v6;
    uint64_t v8 = (char *)a1;
    goto LABEL_6;
  }
  uint64_t v8 = *(char **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = &v8[v4];
    uint64_t v6 = (unsigned __int8 *)&v8[v4 - 1];
    int v7 = *v6;
LABEL_6:
    if (v7 == 93)
    {
      uint64_t v9 = sub_21696220C(a1, v6);
      if (&v8[v4] != (char *)v9) {
        uint64_t v5 = (char *)v9;
      }
    }
    sub_21682E90C(&__p, v8, v5, v5 - v8);
    sub_216779094(v19, "[");
    sub_216779094(v17, "\\[");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)v19, (unsigned __int8 *)v17, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v21;
    *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
    v21.__r_.__value_.__s.__data_[0] = 0;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    sub_216779094(v19, "]");
    sub_216779094(v17, "\\]");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&__p.__r_.__value_.__l.__data_, (unsigned __int8 *)v19, (unsigned __int8 *)v17, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v21;
    *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
    v21.__r_.__value_.__s.__data_[0] = 0;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    if ((v10 & 0x80u) == 0) {
      int v11 = (char *)a1;
    }
    else {
      int v11 = *(char **)a1;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    sub_21682E90C(&v21, v5, &v11[v10], &v11[v10] - v5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v14 = std::string::insert(&v21, 0, (const std::string::value_type *)p_p, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)(a2 + 16) = *((void *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  long long v16 = *(char **)a1;

  sub_216778F24((unsigned char *)a2, v16, 0);
}

void sub_216963230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169632A4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_2169632EC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_216963334()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

std::string *pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver(std::string *__str)
{
  uint64_t v2 = (std::string *)atomic_load((unint64_t *)&qword_267B8E9C8);
  if (!v2) {
    uint64_t v2 = (std::string *)sub_2168BC10C(&qword_267B8E9C8);
  }

  return std::string::operator=(v2, __str);
}

void *pxrInternal__aapl__pxrReserved__::ArResolver::ArResolver(void *this)
{
  *this = &unk_26C753DB0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifierForNewAsset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::Resolve(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::BindContext(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::UnbindContext(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContext(pxrInternal__aapl__pxrReserved__::ArResolver *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateContextFromString(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateContextFromString@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  sub_216963590();

  return sub_216963630(a1, a2);
}

void sub_216963590()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EB10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EB10))
  {
    sub_216964F2C();
    __cxa_atexit((void (*)(void *))sub_216966B64, qword_267B8E9F0, &dword_216758000);
    __cxa_guard_release(&qword_267B8EB10);
  }
}

void sub_216963618(_Unwind_Exception *a1)
{
}

uint64_t sub_216963630@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3)
  {
    uint64_t result = sub_21696A840(qword_267B8E9F8);
    if (result) {
      goto LABEL_5;
    }
LABEL_9:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  uint64_t result = sub_21696A6EC((int8x8_t *)qword_267B8E9F0, (unsigned __int8 *)a1, 0);
  if (!result) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 80);

  return v5();
}

void pxrInternal__aapl__pxrReserved__::ArResolver::CreateContextFromStrings(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  sub_216963590();
  memset(v8, 0, sizeof(v8));
  sub_21696D174(v8, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      uint64_t v6 = v4 + 24;
      sub_216963630(v4, v7);
      if (v7[0] != v7[1]) {
        sub_21696C4E0(v8, (uint64_t)v7);
      }
      uint64_t v9 = v7;
      sub_216787968((void ***)&v9);
      uint64_t v4 = v6 + 24;
    }
    while (v6 + 24 != v5);
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a2, v8);
  v7[0] = (void **)v8;
  sub_2167AD7AC(v7);
}

void sub_2169637AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_2167AD7AC(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::RefreshContext(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(pxrInternal__aapl__pxrReserved__::ArResolver *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 96))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetAssetInfo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CanWriteAssetToPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::IsContextDependentPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::BeginCacheScope(pxrInternal__aapl__pxrReserved__::ArResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArResolver *, pxrInternal__aapl__pxrReserved__::VtValue *))(*(void *)this + 160))(this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::EndCacheScope(pxrInternal__aapl__pxrReserved__::ArResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::ArResolver *, pxrInternal__aapl__pxrReserved__::VtValue *))(*(void *)this + 168))(this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::IsRepositoryPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

BOOL pxrInternal__aapl__pxrReserved__::ArResolver::IsRelativePath(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  return v2 && pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2);
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_CreateDefaultContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_CreateDefaultContextForAsset(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_CreateContextFromString(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_GetCurrentContext(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::ArResolver::_GetExtension(uint64_t a1@<X1>, std::string *a2@<X8>)
{
}

double pxrInternal__aapl__pxrReserved__::ArResolver::_GetAssetInfo@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArResolver::_GetModificationTimestamp()
{
  return NAN;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_CanWriteAssetToPath()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_IsContextDependentPath()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_IsRepositoryPath()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::_GetInternallyManagedCurrentContext(pxrInternal__aapl__pxrReserved__::ArResolver *this)
{
  sub_216963590();
  char v4 = 0;
  uint64_t v1 = (void *)sub_2168520EC(qword_267B8EA50, &v4);
  uint64_t v2 = v1[1];
  if (*v1 == v2) {
    return 0;
  }
  else {
    return *(void *)(v2 - 8);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::ArGetResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  return qword_267B8E9F0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::ArGetRegisteredURISchemes(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E9E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E9E8))
  {
    sub_216963590();
    sub_216963B48();
    __cxa_atexit((void (*)(void *))sub_216963C50, &qword_267B8E9D0, &dword_216758000);
    __cxa_guard_release(&qword_267B8E9E8);
  }
  return &qword_267B8E9D0;
}

void sub_216963B30(_Unwind_Exception *a1)
{
}

void sub_216963B48()
{
  qword_267B8E9D0 = 0;
  qword_267B8E9D8 = 0;
  qword_267B8E9E0 = 0;
  sub_21680BC90(&qword_267B8E9D0, *((unint64_t *)&xmmword_267B8EA18 + 1));
  uint64_t v0 = (void *)xmmword_267B8EA18;
  for (uint64_t i = (long long *)qword_267B8E9D8; v0; v0 = (void *)*v0)
  {
    uint64_t v2 = (long long *)(v0 + 2);
    if ((unint64_t)i >= qword_267B8E9E0)
    {
      uint64_t i = (long long *)sub_2168DF188(&qword_267B8E9D0, v2);
    }
    else
    {
      sub_2167E99E4(&qword_267B8E9D0, v2);
      uint64_t i = (long long *)((char *)i + 24);
    }
    qword_267B8E9D8 = (uint64_t)i;
  }
  unint64_t v3 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)i - qword_267B8E9D0) >> 3));
  if (i == (long long *)qword_267B8E9D0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  sub_216878D58(qword_267B8E9D0, i, (uint64_t)v5, v4, 1);
}

void sub_216963C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_216963C50(void **a1)
{
  unint64_t v3 = a1;
  sub_216782F20(&v3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetUnderlyingResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  sub_216963590();
  uint64_t v1 = qword_267B8E9F8;

  return sub_21696A840(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetAvailableResolvers@<X0>(const std::type_info *a1@<X1>, char *a2@<X2>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_216964050(a1, a2, v21);
  sub_216963E40(v21, v5, v6, &v22);
  sub_216964874((uint64_t)v21);
  uint64_t v7 = v22;
  uint64_t v8 = v23;
  if (v22 != v23)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a3 + 2;
    do
    {
      if ((unint64_t)v9 >= *v10)
      {
        uint64_t v11 = (v9 - *a3) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v12 = *v10 - (void)*a3;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          long long v15 = (char *)sub_21677CB28((uint64_t)(a3 + 2), v14);
        }
        else {
          long long v15 = 0;
        }
        long long v16 = &v15[8 * v11];
        *(void *)long long v16 = *(void *)(v7 + 16);
        uint64_t v9 = v16 + 8;
        char v18 = *a3;
        uint64_t v17 = a3[1];
        if (v17 != *a3)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          uint64_t v17 = *a3;
        }
        *a3 = v16;
        a3[1] = v9;
        a3[2] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v9 = *(void *)(v7 + 16);
        v9 += 8;
      }
      a3[1] = v9;
      v7 += 56;
    }
    while (v7 != v8);
  }
  return sub_216964874((uint64_t)&v22);
}

void sub_216963E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216963E40@<X0>(uint64_t *a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v7 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  BOOL v8 = *v7 == 0;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v8) {
    uint64_t v11 = *a1;
  }
  else {
    uint64_t v11 = v21;
  }
  if (v8) {
    uint64_t v12 = a1[1];
  }
  else {
    uint64_t v12 = v22;
  }
  if (v11 != v12)
  {
    while (1)
    {
      if (*(unsigned char *)(v11 + 48) && *(void *)(v11 + 16) != v6)
      {
        uint64_t v13 = (void **)atomic_load((unint64_t *)&qword_267B8EB20);
        if (!v13) {
          uint64_t v13 = (void **)sub_21696D354(&qword_267B8EB20);
        }
        unint64_t v14 = *v13;
        unint64_t v15 = atomic_load((unint64_t *)&qword_267B8EB20);
        if (!v15) {
          unint64_t v15 = sub_21696D354(&qword_267B8EB20);
        }
        long long v16 = *(void **)(v15 + 8);
        if (v14 != v16)
        {
          do
          {
            if (*v14 == *(void *)(v11 + 16)) {
              goto LABEL_19;
            }
            ++v14;
          }
          while (v14 != v16);
          unint64_t v14 = *(void **)(v15 + 8);
        }
LABEL_19:
        unint64_t v17 = atomic_load((unint64_t *)&qword_267B8EB20);
        if (!v17) {
          unint64_t v17 = sub_21696D354(&qword_267B8EB20);
        }
        if (v14 == *(void **)(v17 + 8)) {
          sub_21696D228(a4, v11);
        }
      }
      v11 += 56;
      if (v11 == v12)
      {
        uint64_t v9 = *a1;
        uint64_t v10 = a1[1];
        break;
      }
    }
  }
  while (v9 != v10)
  {
    if (*(void *)(v9 + 16) == v6)
    {
      sub_21696D228(a4, v9);
      break;
    }
    v9 += 56;
  }
  if (*(void *)(a4[1] - 40) != v6)
  {
    v19[0] = "ar/resolver.cpp";
    v19[1] = "_GetAvailablePrimaryResolvers";
    void v19[2] = 348;
    void v19[3] = "std::vector<_ResolverInfo> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetAvailablePrimaryRes"
             "olvers(const std::vector<_ResolverInfo> &)";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v19, "availablePrimaryResolvers.back().type == defaultResolverType", 0);
  }
  return sub_216964874((uint64_t)&v21);
}

void sub_216964020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216964874((uint64_t)va);
  sub_216964874(v6);
  _Unwind_Resume(a1);
}

void sub_216964050(const std::type_info *a1@<X1>, char *a2@<X2>, uint64_t *a3@<X8>)
{
  float64x2_t v55 = 0;
  float64x2_t v56 = 0;
  uint64_t v57 = 0;
  *((void *)&__dst + 1) = 0;
  uint64_t v47 = 0;
  *(void *)&long long __dst = (char *)&__dst + 8;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v4, (uint64_t **)&__dst);
  sub_21696D648(&v55, (void *)__dst, (void *)&__dst + 1);
  unint64_t v5 = 126 - 2 * __clz((v56 - v55) >> 3);
  if (v56 == v55) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_21696DD48((uint64_t)v55, v56, v6, 1);
  sub_2167FB780((uint64_t)&__dst, *((void **)&__dst + 1));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v45 = (uint64_t)(a3 + 2);
  BOOL v8 = v55;
  uint64_t v7 = v56;
  uint64_t v9 = v56 - v55;
  if (v56 != v55)
  {
    if ((unint64_t)v9 >= 0x2492492492492491) {
      sub_21677CB10();
    }
    sub_21696D450(&__dst, v9 >> 3, 0, v45);
    sub_21696D4D0(a3, &__dst);
    sub_21696D57C((uint64_t)&__dst);
    BOOL v8 = v55;
    uint64_t v7 = v56;
  }
  if (v8 != v7)
  {
    while (1)
    {
      sub_21696D6A0(v8, &v54);
      uint64_t v10 = sub_2168E79D8(&v54);
      if (!(v11 & 1 | (unint64_t)v10)) {
        goto LABEL_70;
      }
      memset(v53, 0, sizeof(v53));
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78((uint64_t *)&v54);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v12, v8, (uint64_t *)&__dst);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216969F68();
      if ((*((void *)v13 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (uint64_t *)((*((void *)v13 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      }
      v51.n128_u8[0] = 0;
      LOBYTE(v52) = 0;
      pxrInternal__aapl__pxrReserved__::JsFindValue((uint64_t)&__dst, (uint64_t)EmptyString, (uint64_t *)&v51, (uint64_t)&v58);
      if ((_BYTE)v52 && v51.n128_u64[1]) {
        sub_216784EC4((std::__shared_weak_count *)v51.n128_u64[1]);
      }
      sub_216812ED4((uint64_t)&__dst, *((void **)&__dst + 1));
      if ((_BYTE)v60)
      {
        if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v58))
        {
LABEL_21:
          *(void *)&long long __dst = "ar/resolver.cpp";
          *((void *)&__dst + 1) = "_GetAvailableResolvers";
          uint64_t v47 = 273;
          *(void *)float64x2_t v48 = "std::vector<_ResolverInfo> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetAvailableResolvers()";
          v48[8] = 0;
          unint64_t v18 = *(void *)(sub_216969F68() + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v18)
          {
            uint64_t v19 = (const char *)(v18 + 16);
            if (*(char *)(v18 + 39) < 0) {
              uint64_t v19 = *(const char **)v19;
            }
          }
          else
          {
            uint64_t v19 = "";
          }
          uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
          if (*(char *)(TypeName + 23) >= 0) {
            float64x2_t v43 = (const char *)TypeName;
          }
          else {
            float64x2_t v43 = *(const char **)TypeName;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' metadata for %s must be a list of strings.", v19, v43);
          if (!(_BYTE)v60) {
            goto LABEL_69;
          }
          float64x2_t v41 = v59;
          if (!v59) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v58);
        unint64_t v17 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
        long long v16 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
        while (v17 != v16)
        {
          if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v17)) {
            goto LABEL_21;
          }
          unint64_t v17 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v17 + 16);
        }
        char v20 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v58);
        sub_216782DE0(&v51, (v20[1] - *v20) >> 4);
        uint64_t v21 = *v20;
        uint64_t v22 = v20[1];
        if (v21 != v22)
        {
          unint64_t v23 = v51.n128_u64[0];
          do
          {
            unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v21);
            if (*(char *)(String + 23) < 0)
            {
              sub_216778F24(&__dst, *(void **)String, *(void *)(String + 8));
            }
            else
            {
              long long v25 = *(_OWORD *)String;
              uint64_t v47 = *(void *)(String + 16);
              long long __dst = v25;
            }
            if (*(char *)(v23 + 23) < 0) {
              operator delete(*(void **)v23);
            }
            long long v26 = __dst;
            *(void *)(v23 + 16) = v47;
            *(_OWORD *)unint64_t v23 = v26;
            v23 += 24;
            uint64_t v21 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v21 + 16);
          }
          while (v21 != v22);
        }
        sub_21680F80C((uint64_t *)v53);
        *(__n128 *)float64x2_t v53 = v51;
        *(void *)&v53[16] = v52;
        uint64_t v52 = 0;
        __n128 v51 = 0uLL;
        *(void *)&long long __dst = &v51;
        sub_216782F20((void ***)&__dst);
        if ((_BYTE)v60 && v59) {
          sub_216784EC4(v59);
        }
      }
      unint64_t v27 = sub_216969F68();
      sub_21696D774((pxrInternal__aapl__pxrReserved__::TfType *)(v27 + 16), v8, &v51);
      unint64_t v28 = sub_216969F68();
      sub_21696D774((pxrInternal__aapl__pxrReserved__::TfType *)(v28 + 24), v8, &v49);
      long long __dst = 0uLL;
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v47);
      *(_OWORD *)float64x2_t v48 = 0uLL;
      *(_DWORD *)&v48[23] = 0;
      *(void *)&v48[16] = 0;
      uint64_t v29 = (atomic_uint *)*((void *)&__dst + 1);
      long long __dst = v54;
      if (*((void *)&v54 + 1)) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v54 + 1) + 8), 1u, memory_order_relaxed);
      }
      if (v29 && atomic_fetch_add_explicit(v29 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v29 + 8))(v29);
      }
      uint64_t v47 = *(void *)v8;
      sub_21680F80C((uint64_t *)v48);
      *(void *)float64x2_t v48 = *(void *)v53;
      *(_OWORD *)&v48[8] = *(_OWORD *)&v53[8];
      memset(v53, 0, sizeof(v53));
      v48[24] = *(void *)v48 == *(void *)&v48[8];
      if ((_BYTE)v52) {
        v48[25] = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v51);
      }
      if (v50) {
        v48[26] = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v49);
      }
      unint64_t v30 = a3[1];
      unint64_t v31 = a3[2];
      if (v30 >= v31)
      {
        uint64_t v34 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v30 - *a3) >> 3);
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) > 0x492492492492492) {
          sub_21677CB10();
        }
        unint64_t v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v31 - *a3) >> 3);
        if (2 * v36 > v35) {
          unint64_t v35 = 2 * v36;
        }
        if (v36 >= 0x249249249249249) {
          unint64_t v37 = 0x492492492492492;
        }
        else {
          unint64_t v37 = v35;
        }
        sub_21696D450(&v58, v37, v34, v45);
        float64x2_t v38 = v60;
        *float64x2_t v60 = __dst;
        long long __dst = 0uLL;
        *((void *)v38 + 2) = v47;
        *((void *)v38 + 3) = 0;
        *((void *)v38 + 4) = 0;
        *((void *)v38 + 5) = 0;
        *(_OWORD *)((char *)v38 + 24) = *(_OWORD *)v48;
        *((void *)v38 + 5) = *(void *)&v48[16];
        memset(v48, 0, 24);
        __int16 v39 = *(_WORD *)&v48[24];
        *((unsigned char *)v38 + 50) = v48[26];
        *((_WORD *)v38 + 24) = v39;
        float64x2_t v60 = (_OWORD *)((char *)v60 + 56);
        sub_21696D4D0(a3, &v58);
        uint64_t v33 = a3[1];
        sub_21696D57C((uint64_t)&v58);
      }
      else
      {
        *(_OWORD *)unint64_t v30 = __dst;
        long long __dst = 0uLL;
        *(void *)(v30 + 16) = v47;
        *(void *)(v30 + 24) = 0;
        *(void *)(v30 + 32) = 0;
        *(void *)(v30 + 40) = 0;
        *(_OWORD *)(v30 + 24) = *(_OWORD *)v48;
        *(void *)(v30 + 40) = *(void *)&v48[16];
        memset(v48, 0, 24);
        __int16 v32 = *(_WORD *)&v48[24];
        *(unsigned char *)(v30 + 50) = v48[26];
        *(_WORD *)(v30 + 48) = v32;
        uint64_t v33 = v30 + 56;
      }
      a3[1] = v33;
      float64x2_t v58 = (unint64_t *)v48;
      sub_216782F20((void ***)&v58);
      uint64_t v40 = *((void *)&__dst + 1);
      if (*((void *)&__dst + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
      }
      if (v50 && v49.n128_u64[1]) {
        sub_216784EC4((std::__shared_weak_count *)v49.n128_u64[1]);
      }
      if (!(_BYTE)v52) {
        goto LABEL_69;
      }
      float64x2_t v41 = (std::__shared_weak_count *)v51.n128_u64[1];
      if (!v51.n128_u64[1]) {
        goto LABEL_69;
      }
LABEL_68:
      sub_216784EC4(v41);
LABEL_69:
      *(void *)&long long __dst = v53;
      sub_216782F20((void ***)&__dst);
LABEL_70:
      uint64_t v44 = *((void *)&v54 + 1);
      if (*((void *)&v54 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v54 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      BOOL v8 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)((char *)v8 + 8);
      if (v8 == v7)
      {
        uint64_t v7 = v55;
        break;
      }
    }
  }
  if (v7)
  {
    float64x2_t v56 = v7;
    operator delete(v7);
  }
}

void sub_2169646DC(_Unwind_Exception *a1)
{
  sub_216964874(v1);
  uint64_t v4 = *(void **)(v2 - 152);
  if (v4)
  {
    *(void *)(v2 - 144) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216964874(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    for (uint64_t i = *(void *)(a1 + 8); (void *)i != v2; sub_21696D5D0(i))
      i -= 56;
    *(void *)(a1 + 8) = v2;
    operator delete(*(void **)a1);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::ArCreateResolver@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, pxrInternal__aapl__pxrReserved__::ArDefaultResolver **a2@<X8>)
{
  return sub_2169648DC(this, 0, a2);
}

void *sub_2169648DC@<X0>(pxrInternal__aapl__pxrReserved__::TfType *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::ArDefaultResolver **a3@<X8>)
{
  v57[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (void **)atomic_load((unint64_t *)&qword_267B8EB20);
  if (!v6) {
    uint64_t v6 = (void **)sub_21696D354(&qword_267B8EB20);
  }
  unint64_t v7 = (unint64_t)v6[2];
  BOOL v8 = v6[1];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = ((char *)v8 - (unsigned char *)*v6) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v11 = v7 - (void)*v6;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      unint64_t v14 = (char *)sub_21677CB28((uint64_t)(v6 + 2), v13);
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v10];
    long long v16 = &v14[8 * v13];
    *(void *)unint64_t v15 = *(void *)a1;
    uint64_t v9 = v15 + 8;
    unint64_t v18 = (char *)*v6;
    unint64_t v17 = (char *)v6[1];
    if (v17 != *v6)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*v6;
    }
    *uint64_t v6 = v15;
    v6[1] = v9;
    void v6[2] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *BOOL v8 = *(void *)a1;
    uint64_t v9 = v8 + 1;
  }
  v6[1] = v9;
  *(void *)&long long v48 = &unk_26C7544C8;
  char v50 = (const char *)&v48;
  sub_21687BABC((uint64_t)v57, (uint64_t)&v48);
  sub_21686060C(&v48);
  uint64_t v47 = v22;
  *a3 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v48);
  if (*(void *)a1 == (void)v48)
  {
    *(void *)&long long v48 = "ar/resolver.cpp";
    *((void *)&v48 + 1) = "_CreateResolver";
    uint64_t v49 = 430;
    char v50 = "std::unique_ptr<ArResolver> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateResolver(const TfT"
          "ype &, std::string *)";
    LOBYTE(v51) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid resolver type");
LABEL_50:
    if (a2)
    {
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v47);
      if (*(char *)(TypeName + 23) >= 0) {
        uint64_t v42 = TypeName;
      }
      else {
        uint64_t v42 = *(void *)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Using default asset resolver %s", v40, v41, v42);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v48;
      *(void *)(a2 + 16) = v49;
    }
    float64x2_t v43 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v43);
    *a3 = v43;
    return sub_2168EB980(v57);
  }
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)a1, *v25, v26) & 1) == 0)
  {
    *(void *)&long long v48 = "ar/resolver.cpp";
    *((void *)&v48 + 1) = "_CreateResolver";
    uint64_t v49 = 435;
    char v50 = "std::unique_ptr<ArResolver> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CreateResolver(const TfT"
          "ype &, std::string *)";
    LOBYTE(v51) = 0;
    uint64_t v37 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    if (*(char *)(v37 + 23) >= 0) {
      float64x2_t v38 = (const char *)v37;
    }
    else {
      float64x2_t v38 = *(const char **)v37;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Given type %s does not derive from ArResolver", v38);
    goto LABEL_50;
  }
  if (*(void *)a1 == v22) {
    goto LABEL_50;
  }
  sub_21696D6A0(a1, &v46);
  unint64_t v27 = sub_2168E79D8(&v46);
  if (v28 & 1 | (unint64_t)v27)
  {
    long long v48 = v46;
    if (*((void *)&v46 + 1)) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v46 + 1) + 8), 1u, memory_order_relaxed);
    }
    uint64_t v49 = *(void *)a1;
    LOBYTE(v50) = 0;
    uint64_t v51 = 850045863;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    float64x2_t v56 = 0;
    sub_21696A92C((uint64_t *)&v48, (uint64_t *)&v45);
    *a3 = v45;
    uint64_t v45 = 0;
    if (v56) {
      sub_216784EC4(v56);
    }
    std::mutex::~mutex((std::mutex *)&v51);
    uint64_t v29 = *((void *)&v48 + 1);
    if (*((void *)&v48 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    if (a2 && *a3)
    {
      uint64_t v30 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
      if (*(char *)(v30 + 23) >= 0) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = *(void *)v30;
      }
      uint64_t v32 = sub_2168E5D78((uint64_t *)&v46);
      unint64_t v35 = (void *)(v32 + 32);
      if (*(char *)(v32 + 55) < 0) {
        unint64_t v35 = (void *)*v35;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Using asset resolver %s from plugin %s", v33, v34, v31, v35);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v48;
      *(void *)(a2 + 16) = v49;
    }
  }
  uint64_t v36 = *((void *)&v46 + 1);
  if (*((void *)&v46 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  if (!*a3) {
    goto LABEL_50;
  }
  return sub_2168EB980(v57);
}

void sub_216964D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, atomic_uint *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21696F6DC((uint64_t)va);
  if (a7 && atomic_fetch_add_explicit(a7 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a7 + 8))(a7);
  }
  uint64_t v11 = *v8;
  *BOOL v8 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_2168EB980((void *)(v9 - 88));
  _Unwind_Resume(a1);
}

uint64_t *sub_216964E28()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216964EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216964F2C()
{
  qword_267B8E9F0[0] = (uint64_t)&unk_26C753E88;
  *(_OWORD *)&qword_267B8E9F8 = 0u;
  *(_OWORD *)&qword_267B8EA08 = 0u;
  xmmword_267B8EA18 = 0u;
  dword_267B8EA28 = 1065353216;
  xmmword_267B8EA30 = 0u;
  *(_OWORD *)&qword_267B8EA40 = 0u;
  sub_216969230(qword_267B8EA50);
  qword_267B8EAB0 = (uint64_t)&unk_26C74B518;
  __dmb(0xBu);
  qword_267B8EAB8 = 0;
  __dmb(0xBu);
  qword_267B8EAC0 = 0;
  qword_267B8EAB0 = (uint64_t)&unk_26C754060;
  uint64_t v1 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  uint64_t v4 = 0;
  *uint64_t v1 = &unk_26C7540C0;
  qword_267B8EAC8 = (uint64_t)v1;
  do
    qword_267B8E9F0[++v4 + 32] = 0;
  while (v4 != 3);
  qword_267B8EAE8 = 0;
  qword_267B8EAE0 = 0;
  qword_267B8EAF0 = (uint64_t)&unk_267B8EAF8;
  qword_267B8EAD8 = (uint64_t)sub_216969774;
  sub_216964050(v2, v3, (uint64_t *)&v234);
  __dst.__r_.__value_.__r.__words[0] = v244;
  sub_216963E40((uint64_t *)&v234, v7, v8, (uint64_t *)&v238);
  if (sub_216969824(0))
  {
    memset(v248, 0, 24);
    sub_21680BC90((uint64_t *)v248, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v238.__r_.__value_.__l.__size_ - v238.__r_.__value_.__r.__words[0]) >> 3));
    std::string::size_type size = v238.__r_.__value_.__l.__size_;
    for (std::string::size_type i = v238.__r_.__value_.__r.__words[0]; i != size; i += 56)
    {
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(i + 16));
      uint64_t v12 = (long long *)*((void *)&v248[0] + 1);
      if (*((void *)&v248[0] + 1) >= *(void *)&v248[1])
      {
        uint64_t v14 = sub_2167E9A44((uint64_t *)v248, (long long *)TypeName);
      }
      else
      {
        if (*(char *)(TypeName + 23) < 0)
        {
          sub_216778F24(*((unsigned char **)&v248[0] + 1), *(void **)TypeName, *(void *)(TypeName + 8));
        }
        else
        {
          long long v13 = *(_OWORD *)TypeName;
          *(void *)(*((void *)&v248[0] + 1) + 16) = *(void *)(TypeName + 16);
          long long *v12 = v13;
        }
        uint64_t v14 = (uint64_t)v12 + 24;
      }
      *((void *)&v248[0] + 1) = v14;
    }
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)v248, (std::string *)&__p);
    *(void *)&long long v246 = v248;
    sub_216782F20((void ***)&v246);
    unint64_t v17 = v237.__r_.__value_.__s.__data_[15] >= 0 ? &__p : (void **)__p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found primary asset resolver types: [%s]\n", v15, v16, v17);
    if (v237.__r_.__value_.__s.__data_[15] < 0) {
      operator delete(__p);
    }
  }
  unint64_t v18 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_RESOLVER);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v18)
  {
    if (sub_216969824(0)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Plugin asset resolver disabled via PXR_AR_DISABLE_PLUGIN_RESOLVER.\n", v19, v20);
    }
    goto LABEL_55;
  }
  unint64_t v21 = atomic_load((unint64_t *)&qword_267B8E9C8);
  if (!v21) {
    unint64_t v21 = sub_2168BC10C(&qword_267B8E9C8);
  }
  if (*(char *)(v21 + 23) < 0)
  {
    if (*(void *)(v21 + 8)) {
      goto LABEL_26;
    }
  }
  else if (*(unsigned char *)(v21 + 23))
  {
LABEL_26:
    unint64_t v22 = atomic_load((unint64_t *)&qword_267B8E9C8);
    if (!v22) {
      unint64_t v22 = sub_2168BC10C(&qword_267B8E9C8);
    }
    std::string __p = (void *)pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(v22);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v248);
    if (__p == *(void **)&v248[0])
    {
      *(void *)&v248[0] = "ar/resolver.cpp";
      *((void *)&v248[0] + 1) = "_InitializePrimaryResolver";
      *(void *)&v248[1] = 1088;
      *((void *)&v248[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_I"
                                  "nitializePrimaryResolver(const std::vector<_ResolverInfo> &)";
      LOBYTE(v249[0]) = 0;
      unint64_t v37 = atomic_load((unint64_t *)&qword_267B8E9C8);
      if (!v37) {
        unint64_t v37 = sub_2168BC10C(&qword_267B8E9C8);
      }
      if (*(char *)(v37 + 23) < 0) {
        unint64_t v37 = *(void *)v37;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v248, (pxrInternal__aapl__pxrReserved__ *)"ArGetResolver(): Preferred resolver %s not found. Using default resolver.", v24, v37);
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)&__p, *v25, v26))
      {
        if (sub_216969824(0))
        {
          unint64_t v30 = atomic_load((unint64_t *)&qword_267B8E9C8);
          if (!v30) {
            unint64_t v30 = sub_2168BC10C(&qword_267B8E9C8);
          }
          if (*(char *)(v30 + 23) < 0) {
            unint64_t v30 = *(void *)v30;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Using preferred resolver %s\n", v28, v29, v30);
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      }
      else
      {
        *(void *)&v248[0] = "ar/resolver.cpp";
        *((void *)&v248[0] + 1) = "_InitializePrimaryResolver";
        *(void *)&v248[1] = 1094;
        *((void *)&v248[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::"
                                    "_InitializePrimaryResolver(const std::vector<_ResolverInfo> &)";
        LOBYTE(v249[0]) = 0;
        unint64_t v38 = atomic_load((unint64_t *)&qword_267B8E9C8);
        if (!v38) {
          unint64_t v38 = sub_2168BC10C(&qword_267B8E9C8);
        }
        if (*(char *)(v38 + 23) < 0) {
          unint64_t v38 = *(void *)v38;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v248, (pxrInternal__aapl__pxrReserved__ *)"ArGetResolver(): Preferred resolver %s does not derive from ArResolver. Using default resolver.\n", v27, v38);
      }
    }
    goto LABEL_55;
  }
  std::string::size_type v32 = v238.__r_.__value_.__l.__size_;
  std::string::size_type v31 = v238.__r_.__value_.__r.__words[0];
  if (v238.__r_.__value_.__r.__words[0] == v238.__r_.__value_.__l.__size_)
  {
    *(void *)&v248[0] = "ar/resolver.cpp";
    *((void *)&v248[0] + 1) = "_InitializePrimaryResolver";
    *(void *)&v248[1] = 1103;
    *((void *)&v248[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_Ini"
                                "tializePrimaryResolver(const std::vector<_ResolverInfo> &)";
    LOBYTE(v249[0]) = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v248, "!primaryResolvers.empty()", 0))goto LABEL_55; {
    std::string::size_type v32 = v238.__r_.__value_.__l.__size_;
    }
    std::string::size_type v31 = v238.__r_.__value_.__r.__words[0];
  }
  __dst.__r_.__value_.__r.__words[0] = *(void *)(v31 + 16);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - v31) >> 3)) >= 3 && sub_216969824(0))
  {
    uint64_t v33 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&__dst);
    if (*(char *)(v33 + 23) >= 0) {
      uint64_t v36 = v33;
    }
    else {
      uint64_t v36 = *(void *)v33;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found multiple primary asset resolvers, using %s\n", v34, v35, v36);
  }
LABEL_55:
  memset(v248, 0, 24);
  std::string __p = qword_267B8E9F0;
  v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238;
  v237.__r_.__value_.__l.__size_ = (std::string::size_type)v248;
  if ((sub_216969884((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::TfType *)&__dst) & 1) == 0) {
    sub_216969884((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::TfType *)&v244);
  }
  if (sub_216969824(0))
  {
    float64x2_t v41 = v248;
    if (SBYTE7(v248[1]) < 0) {
      float64x2_t v41 = *(_OWORD **)&v248[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): %s for primary resolver\n", v39, v40, v41);
  }
  if (SBYTE7(v248[1]) < 0) {
    operator delete(*(void **)&v248[0]);
  }
  sub_216964874((uint64_t)&v238);
  uint64_t v42 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS);
  if (!v42) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v42)
  {
    if (sub_216969824(0)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Plugin URI asset resolvers disabled via PXR_AR_DISABLE_PLUGIN_URI_RESOLVERS.\n", v43, v44);
    }
    goto LABEL_296;
  }
  memset(v248, 0, sizeof(v248));
  v249[0] = 1.0;
  v228 = v235;
  v229 = v234;
  if (v234 != v235)
  {
    unint64_t v45 = 0;
    while (1)
    {
      if (sub_216969824(0))
      {
        uint64_t v46 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v229 + 2));
        if (*(char *)(v46 + 23) >= 0) {
          uint64_t v49 = v46;
        }
        else {
          uint64_t v49 = *(void *)v46;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found URI resolver %s\n", v47, v48, v49);
      }
      long long v244 = 0uLL;
      unint64_t v245 = 0;
      sub_21680BC90((uint64_t *)&v244, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v229[4] - v229[3]) >> 3));
      char v50 = (long long *)v229[3];
      uint64_t v51 = (long long *)v229[4];
      if (v50 != v51)
      {
        v231 = (pxrInternal__aapl__pxrReserved__::TfType *)(v229 + 2);
        while (1)
        {
          if (*((char *)v50 + 23) < 0)
          {
            sub_216778F24(&__dst, *(void **)v50, *((void *)v50 + 1));
          }
          else
          {
            long long v52 = *v50;
            __dst.__r_.__value_.__r.__words[2] = *((void *)v50 + 2);
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v52;
          }
          pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)&__dst, (uint64_t)&v238);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::string __dst = v238;
          unint64_t v53 = sub_216891D24((uint64_t)&v248[1] + 8, (uint64_t)&__dst);
          unint64_t v54 = *((void *)&v248[0] + 1);
          if (*((void *)&v248[0] + 1))
          {
            unint64_t v55 = v53;
            uint8x8_t v56 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v248 + 8));
            v56.i16[0] = vaddlv_u8(v56);
            unint64_t v57 = v56.u32[0];
            if (v56.u32[0] > 1uLL)
            {
              std::string::size_type v0 = v53;
              if (v53 >= *((void *)&v248[0] + 1)) {
                std::string::size_type v0 = v53 % *((void *)&v248[0] + 1);
              }
            }
            else
            {
              std::string::size_type v0 = (*((void *)&v248[0] + 1) - 1) & v53;
            }
            float64x2_t v58 = *(unsigned __int8 ***)(*(void *)&v248[0] + 8 * v0);
            if (v58)
            {
              for (j = *v58; j; j = *(unsigned __int8 **)j)
              {
                unint64_t v60 = *((void *)j + 1);
                if (v60 == v55)
                {
                  if (sub_2168513F8((uint64_t)v249, j + 16, (unsigned __int8 *)&__dst))
                  {
                    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)"ar/resolver.cpp";
                    v238.__r_.__value_.__l.__size_ = (std::string::size_type)"_InitializeURIResolvers";
                    v238.__r_.__value_.__r.__words[2] = 1180;
                    v239 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_Initiali"
                           "zeURIResolvers(const std::vector<_ResolverInfo> &)";
                    char v240 = 0;
                    uint64_t v90 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v231);
                    int v91 = *(char *)(v90 + 23);
                    uint64_t v92 = *(void *)v90;
                    int v93 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    std::string::size_type v0 = __dst.__r_.__value_.__r.__words[0];
                    uint64_t v94 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(*((void *)j + 5) + 16));
                    p_dst = &__dst;
                    if (v93 < 0) {
                      p_dst = (std::string *)v0;
                    }
                    if (v91 >= 0) {
                      uint64_t v97 = v90;
                    }
                    else {
                      uint64_t v97 = v92;
                    }
                    if (*(char *)(v94 + 23) >= 0) {
                      uint64_t v98 = v94;
                    }
                    else {
                      uint64_t v98 = *(void *)v94;
                    }
                    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v238, (pxrInternal__aapl__pxrReserved__ *)"ArGetResolver(): %s registered to handle scheme '%s' which is already handled by %s. Ignoring.\n", v95, v97, p_dst, v98);
                    goto LABEL_169;
                  }
                }
                else
                {
                  if (v57 > 1)
                  {
                    if (v60 >= v54) {
                      v60 %= v54;
                    }
                  }
                  else
                  {
                    v60 &= v54 - 1;
                  }
                  if (v60 != v0) {
                    break;
                  }
                }
              }
            }
          }
          std::string::size_type v61 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          float64x2_t v62 = &__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            std::string::size_type v61 = __dst.__r_.__value_.__l.__size_;
            float64x2_t v62 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if (!v61) {
            break;
          }
          if (v62->__r_.__value_.__s.__data_[0] - 123 <= 0xFFFFFFE5)
          {
            LOBYTE(__p) = 0;
            float64x2_t v63 = "Scheme must start with ASCII 'a-z'";
LABEL_125:
            sub_216779094(&v237, v63);
            goto LABEL_126;
          }
          float64x2_t v64 = &__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            float64x2_t v64 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          float64x2_t v65 = (unsigned __int8 *)&v64->__r_.__value_.__s.__data_[1];
          float64x2_t v66 = (unsigned __int8 *)v62 + v61;
          if (v61 != 1)
          {
            while (1)
            {
              unsigned __int8 v73 = *v65;
              if ((*v65 - 58) <= 0xF5u && (v73 - 123) <= 0xE5u)
              {
                uint64_t v74 = (1 << v73) & 0x680000000000;
                BOOL v75 = *v65 > 0x2Eu || v74 == 0;
                if (v75) {
                  break;
                }
              }
              if (++v65 == v66) {
                goto LABEL_124;
              }
            }
          }
          if (v65 == v66)
          {
LABEL_124:
            LOBYTE(__p) = 1;
            float64x2_t v63 = "";
            goto LABEL_125;
          }
          v243[0] = v65;
          v243[1] = v66;
          unsigned int CodePoint = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)v243);
          if (CodePoint - 57344 >= 0xFFFFF800 || CodePoint >= 0x110000) {
            unsigned int v69 = 65533;
          }
          else {
            unsigned int v69 = CodePoint;
          }
          unsigned int v242 = v69;
          sub_216969D94(&v242);
          long long v72 = &v246;
          if (v247 < 0) {
            long long v72 = (long long *)v246;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' not allowed in scheme. Characters must be ASCII 'a-z', '-', '+', or '.'", v70, v71, v72);
          LOBYTE(__p) = 0;
          std::string v237 = v238;
          memset(&v238, 0, sizeof(v238));
          if (SHIBYTE(v247) < 0) {
            operator delete((void *)v246);
          }
LABEL_126:
          if ((_BYTE)__p)
          {
            long long v76 = (_OWORD *)*((void *)&v244 + 1);
            if (*((void *)&v244 + 1) >= v245)
            {
              uint64_t v81 = sub_2167E9A44((uint64_t *)&v244, (long long *)&__dst);
            }
            else
            {
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_216778F24(*((unsigned char **)&v244 + 1), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v77 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                *(void *)(*((void *)&v244 + 1) + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
                *long long v76 = v77;
              }
              uint64_t v81 = (uint64_t)v76 + 24;
            }
            *((void *)&v244 + 1) = v81;
          }
          else
          {
            long long v78 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION);
            if (!v78) {
              pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
            }
            if (*v78)
            {
              long long v79 = (_OWORD *)*((void *)&v244 + 1);
              if (*((void *)&v244 + 1) >= v245)
              {
                uint64_t v89 = sub_2167E9A44((uint64_t *)&v244, (long long *)&__dst);
              }
              else
              {
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_216778F24(*((unsigned char **)&v244 + 1), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v80 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                  *(void *)(*((void *)&v244 + 1) + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
                  *long long v79 = v80;
                }
                uint64_t v89 = (uint64_t)v79 + 24;
              }
              *((void *)&v244 + 1) = v89;
              v238.__r_.__value_.__r.__words[0] = (std::string::size_type)"ar/resolver.cpp";
              v238.__r_.__value_.__l.__size_ = (std::string::size_type)"_InitializeURIResolvers";
              v238.__r_.__value_.__r.__words[2] = 1196;
              v239 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_InitializeURIR"
                     "esolvers(const std::vector<_ResolverInfo> &)";
              char v240 = 0;
              int v99 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
              std::string::size_type v100 = __dst.__r_.__value_.__r.__words[0];
              uint64_t v101 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v231);
              long long v103 = &__dst;
              if (v99 < 0) {
                long long v103 = (std::string *)v100;
              }
              if (*(char *)(v101 + 23) >= 0) {
                uint64_t v104 = v101;
              }
              else {
                uint64_t v104 = *(void *)v101;
              }
              long long v105 = &v237;
              if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v105 = (std::string *)v237.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v238, (pxrInternal__aapl__pxrReserved__ *)"'%s' for '%s' is not a valid resource identifier scheme and will be restricted in future releases: %s", v102, v103, v104, v105);
            }
            else
            {
              v238.__r_.__value_.__r.__words[0] = (std::string::size_type)"ar/resolver.cpp";
              v238.__r_.__value_.__l.__size_ = (std::string::size_type)"_InitializeURIResolvers";
              v238.__r_.__value_.__r.__words[2] = 1206;
              v239 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_InitializeURIR"
                     "esolvers(const std::vector<_ResolverInfo> &)";
              char v240 = 0;
              int v82 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
              std::string::size_type v83 = __dst.__r_.__value_.__r.__words[0];
              uint64_t v84 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v231);
              float64x2_t v86 = &__dst;
              if (v82 < 0) {
                float64x2_t v86 = (std::string *)v83;
              }
              if (*(char *)(v84 + 23) >= 0) {
                uint64_t v87 = v84;
              }
              else {
                uint64_t v87 = *(void *)v84;
              }
              double v88 = &v237;
              if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                double v88 = (std::string *)v237.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v238, (pxrInternal__aapl__pxrReserved__ *)"'%s' for '%s' is not a valid resource identifier scheme: %s. Paths with this prefix will be handled by other resolvers. Set PXR_AR_DISABLE_STRICT_SCHEME_VALIDATION to disable strict scheme validation.", v85, v86, v87, v88);
            }
          }
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v237.__r_.__value_.__l.__data_);
          }
LABEL_169:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          char v50 = (long long *)((char *)v50 + 24);
          if (v50 == v51) {
            goto LABEL_174;
          }
        }
        LOBYTE(__p) = 0;
        float64x2_t v63 = "Scheme cannot be empty";
        goto LABEL_125;
      }
LABEL_174:
      if ((void)v244 != *((void *)&v244 + 1))
      {
        if (sub_216969824(0))
        {
          uint64_t v106 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v229 + 2));
          int v107 = *(char *)(v106 + 23);
          uint64_t v108 = *(void *)v106;
          pxrInternal__aapl__pxrReserved__::TfStringJoin("\", \"", (std::string **)&v244, &v238);
          if (v107 >= 0) {
            uint64_t v111 = v106;
          }
          else {
            uint64_t v111 = v108;
          }
          float64x2_t v112 = &v238;
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            float64x2_t v112 = (std::string *)v238.__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Using %s for URI scheme(s) [\"%s\"]\n", v109, v110, v111, v112);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v238.__r_.__value_.__l.__data_);
          }
        }
        if (v229[2] == *(void *)(qword_267B8E9F8 + 16))
        {
          float64x2_t v113 = (std::__shared_weak_count *)qword_267B8EA00;
          uint64_t v230 = qword_267B8E9F8;
          if (qword_267B8EA00) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_267B8EA00 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          float64x2_t v113 = (std::__shared_weak_count *)operator new(0xC0uLL);
          v113->__shared_owners_ = 0;
          v113->__shared_weak_owners_ = 0;
          v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C754158;
          *(_OWORD *)&v238.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v230 = sub_216969AD4((uint64_t)&v113[1], (uint64_t)v229, (uint64_t *)&v238);
        }
        v232 = (pxrInternal__aapl__pxrReserved__::TfType *)*((void *)&v244 + 1);
        uint64_t v114 = v244;
        if ((void)v244 != *((void *)&v244 + 1))
        {
          while (1)
          {
            if (*(char *)(v114 + 23) < 0) {
              unint64_t v115 = *(void *)(v114 + 8);
            }
            else {
              unint64_t v115 = *(unsigned __int8 *)(v114 + 23);
            }
            if (v115 > v45) {
              unint64_t v45 = v115;
            }
            unint64_t v116 = sub_216891D24((uint64_t)&v248[1] + 8, v114);
            std::string::size_type v117 = v116;
            unint64_t v118 = *((void *)&v248[0] + 1);
            if (*((void *)&v248[0] + 1))
            {
              uint8x8_t v119 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v248 + 8));
              v119.i16[0] = vaddlv_u8(v119);
              unint64_t v120 = v119.u32[0];
              if (v119.u32[0] > 1uLL)
              {
                std::string::size_type v0 = v116;
                if (v116 >= *((void *)&v248[0] + 1)) {
                  std::string::size_type v0 = v116 % *((void *)&v248[0] + 1);
                }
              }
              else
              {
                std::string::size_type v0 = (*((void *)&v248[0] + 1) - 1) & v116;
              }
              float64x2_t v121 = *(unsigned __int8 ***)(*(void *)&v248[0] + 8 * v0);
              if (v121)
              {
                for (k = *v121; k; k = *(unsigned __int8 **)k)
                {
                  unint64_t v123 = *((void *)k + 1);
                  if (v123 == v117)
                  {
                    if (sub_2168513F8((uint64_t)v249, k + 16, (unsigned __int8 *)v114)) {
                      goto LABEL_266;
                    }
                  }
                  else
                  {
                    if (v120 > 1)
                    {
                      if (v123 >= v118) {
                        v123 %= v118;
                      }
                    }
                    else
                    {
                      v123 &= v118 - 1;
                    }
                    if (v123 != v0) {
                      break;
                    }
                  }
                }
              }
            }
            float64x2_t v124 = operator new(0x38uLL);
            v238.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
            v238.__r_.__value_.__l.__size_ = (std::string::size_type)&v248[1];
            *float64x2_t v124 = 0;
            v124[1] = v117;
            uint64_t v125 = *(void *)(v114 + 16);
            *((_OWORD *)v124 + 1) = *(_OWORD *)v114;
            v124[4] = v125;
            *(void *)(v114 + 8) = 0;
            *(void *)(v114 + 16) = 0;
            *(void *)uint64_t v114 = 0;
            v124[5] = v230;
            v124[6] = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v238.__r_.__value_.__s.__data_[16] = 1;
            float v126 = (float)(unint64_t)(*((void *)&v248[1] + 1) + 1);
            if (v118 && (float)(v249[0] * (float)v118) >= v126) {
              goto LABEL_257;
            }
            BOOL v127 = (v118 & (v118 - 1)) == 0;
            if (v118 < 3) {
              BOOL v127 = 0;
            }
            unint64_t v128 = (2 * v118) | !v127;
            unint64_t v129 = vcvtps_u32_f32(v126 / v249[0]);
            int8x8_t prime = (int8x8_t)(v128 <= v129 ? v129 : v128);
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            }
            unint64_t v118 = *((void *)&v248[0] + 1);
            if (*(void *)&prime > *((void *)&v248[0] + 1)) {
              break;
            }
            if (*(void *)&prime < *((void *)&v248[0] + 1))
            {
              unint64_t v137 = vcvtps_u32_f32((float)*((unint64_t *)&v248[1] + 1) / v249[0]);
              if (*((void *)&v248[0] + 1) < 3uLL
                || (uint8x8_t v138 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v248 + 8)),
                    v138.i16[0] = vaddlv_u8(v138),
                    v138.u32[0] > 1uLL))
              {
                unint64_t v137 = std::__next_prime(v137);
              }
              else
              {
                uint64_t v139 = 1 << -(char)__clz(v137 - 1);
                if (v137 >= 2) {
                  unint64_t v137 = v139;
                }
              }
              if (*(void *)&prime <= v137) {
                int8x8_t prime = (int8x8_t)v137;
              }
              if (*(void *)&prime >= v118)
              {
                unint64_t v118 = *((void *)&v248[0] + 1);
              }
              else
              {
                if (prime) {
                  break;
                }
                double v144 = *(void **)&v248[0];
                *(void *)&v248[0] = 0;
                if (v144) {
                  operator delete(v144);
                }
                unint64_t v118 = 0;
                *((void *)&v248[0] + 1) = 0;
              }
            }
LABEL_252:
            if ((v118 & (v118 - 1)) != 0)
            {
              if (v117 >= v118) {
                std::string::size_type v0 = v117 % v118;
              }
              else {
                std::string::size_type v0 = v117;
              }
            }
            else
            {
              std::string::size_type v0 = (v118 - 1) & v117;
            }
LABEL_257:
            double v142 = *(void **)(*(void *)&v248[0] + 8 * v0);
            if (v142)
            {
              *(void *)v238.__r_.__value_.__l.__data_ = *v142;
              *double v142 = v238.__r_.__value_.__r.__words[0];
            }
            else
            {
              *(void *)v238.__r_.__value_.__l.__data_ = *(void *)&v248[1];
              *(void *)&v248[1] = v238.__r_.__value_.__r.__words[0];
              *(void *)(*(void *)&v248[0] + 8 * v0) = &v248[1];
              if (*(void *)v238.__r_.__value_.__l.__data_)
              {
                unint64_t v143 = *(void *)(*(void *)v238.__r_.__value_.__l.__data_ + 8);
                if ((v118 & (v118 - 1)) != 0)
                {
                  if (v143 >= v118) {
                    v143 %= v118;
                  }
                }
                else
                {
                  v143 &= v118 - 1;
                }
                *(void *)(*(void *)&v248[0] + 8 * v143) = v238.__r_.__value_.__r.__words[0];
              }
            }
            v238.__r_.__value_.__r.__words[0] = 0;
            ++*((void *)&v248[1] + 1);
            sub_216969EDC((uint64_t)&v238);
LABEL_266:
            v114 += 24;
            if ((pxrInternal__aapl__pxrReserved__::TfType *)v114 == v232) {
              goto LABEL_277;
            }
          }
          if (*(void *)&prime >> 61) {
            sub_21677CA1C();
          }
          float64x2_t v131 = operator new(8 * *(void *)&prime);
          float64x2_t v132 = *(void **)&v248[0];
          *(void *)&v248[0] = v131;
          if (v132) {
            operator delete(v132);
          }
          uint64_t v133 = 0;
          *((int8x8_t *)&v248[0] + 1) = prime;
          do
            *(void *)(*(void *)&v248[0] + 8 * v133++) = 0;
          while (*(void *)&prime != v133);
          float64x2_t v134 = *(void ***)&v248[1];
          if (*(void *)&v248[1])
          {
            unint64_t v135 = *(void *)(*(void *)&v248[1] + 8);
            uint8x8_t v136 = (uint8x8_t)vcnt_s8(prime);
            v136.i16[0] = vaddlv_u8(v136);
            if (v136.u32[0] > 1uLL)
            {
              if (v135 >= *(void *)&prime) {
                v135 %= *(void *)&prime;
              }
            }
            else
            {
              v135 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)&v248[0] + 8 * v135) = &v248[1];
            for (m = *v134; m; unint64_t v135 = v141)
            {
              unint64_t v141 = m[1];
              if (v136.u32[0] > 1uLL)
              {
                if (v141 >= *(void *)&prime) {
                  v141 %= *(void *)&prime;
                }
              }
              else
              {
                v141 &= *(void *)&prime - 1;
              }
              if (v141 != v135)
              {
                if (!*(void *)(*(void *)&v248[0] + 8 * v141))
                {
                  *(void *)(*(void *)&v248[0] + 8 * v141) = v134;
                  goto LABEL_248;
                }
                *float64x2_t v134 = (void *)*m;
                void *m = **(void **)(*(void *)&v248[0] + 8 * v141);
                **(void **)(*(void *)&v248[0] + 8 * v141) = m;
                m = v134;
              }
              unint64_t v141 = v135;
LABEL_248:
              float64x2_t v134 = (void **)m;
              m = (void *)*m;
            }
          }
          unint64_t v118 = (unint64_t)prime;
          goto LABEL_252;
        }
LABEL_277:
        if (v113) {
          sub_216784EC4(v113);
        }
      }
      v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244;
      sub_216782F20((void ***)&v238);
      v229 += 7;
      if (v229 == v228) {
        goto LABEL_282;
      }
    }
  }
  unint64_t v45 = 0;
LABEL_282:
  if (*((void *)&xmmword_267B8EA18 + 1))
  {
    sub_216969F24((uint64_t)&qword_267B8EA08, (void *)xmmword_267B8EA18);
    *(void *)&xmmword_267B8EA18 = 0;
    uint64_t v145 = qword_267B8EA10;
    if (qword_267B8EA10)
    {
      uint64_t v146 = 0;
      do
        *(void *)(qword_267B8EA08 + 8 * v146++) = 0;
      while (v145 != v146);
    }
    *((void *)&xmmword_267B8EA18 + 1) = 0;
  }
  uint64_t v147 = *(void *)&v248[0];
  *(void *)&v248[0] = 0;
  double v148 = (void *)qword_267B8EA08;
  qword_267B8EA08 = v147;
  if (v148) {
    operator delete(v148);
  }
  unint64_t v149 = *((void *)&v248[0] + 1);
  *((void *)&v248[0] + 1) = 0;
  xmmword_267B8EA18 = v248[1];
  dword_267B8EA28 = LODWORD(v249[0]);
  qword_267B8EA10 = v149;
  if (*((void *)&v248[1] + 1))
  {
    unint64_t v150 = *(void *)(*(void *)&v248[1] + 8);
    if ((v149 & (v149 - 1)) != 0)
    {
      if (v150 >= v149) {
        v150 %= v149;
      }
    }
    else
    {
      v150 &= v149 - 1;
    }
    *(void *)(qword_267B8EA08 + 8 * v150) = &xmmword_267B8EA18;
    v248[1] = 0uLL;
  }
  *(void *)&xmmword_267B8EA30 = v45;
  sub_216966C20((uint64_t)v248);
LABEL_296:
  *(_OWORD *)&v238.__r_.__value_.__r.__words[1] = 0uLL;
  v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&v238.__r_.__value_.__l.__size_;
  AllDerivedTypes = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*v151, (uint64_t **)&v238);
  std::string::size_type v153 = v238.__r_.__value_.__r.__words[2];
  uint64_t v154 = (int64x2_t *)((char *)&xmmword_267B8EA30 + 8);
  uint64_t v155 = qword_267B8EA48;
  unint64_t v156 = *((void *)&xmmword_267B8EA30 + 1);
  if (v238.__r_.__value_.__r.__words[2] > (qword_267B8EA48 - *((void *)&xmmword_267B8EA30 + 1)) >> 4)
  {
    if (v238.__r_.__value_.__r.__words[2] >> 60) {
      sub_21677CB10();
    }
    uint64_t v157 = (void *)qword_267B8EA40;
    *(void *)v249 = &qword_267B8EA48;
    uint64_t v158 = operator new(16 * v238.__r_.__value_.__r.__words[2]);
    uint64_t v159 = (uint64_t)v157 + (void)v158 - v156;
    if (v157 == (void *)v156)
    {
      int64x2_t v162 = vdupq_n_s64(v156);
      double v160 = (char *)v157 + (void)v158 - v156;
    }
    else
    {
      double v160 = (char *)v157 + (void)v158 - v156;
      do
      {
        long long v161 = *((_OWORD *)v157 - 1);
        v157 -= 2;
        *((_OWORD *)v160 - 1) = v161;
        v160 -= 16;
        *uint64_t v157 = 0;
        v157[1] = 0;
      }
      while (v157 != (void *)v156);
      int64x2_t v162 = *(int64x2_t *)((char *)&xmmword_267B8EA30 + 8);
      uint64_t v155 = qword_267B8EA48;
    }
    *((void *)&xmmword_267B8EA30 + 1) = v160;
    qword_267B8EA40 = v159;
    *(int64x2_t *)((char *)v248 + 8) = v162;
    qword_267B8EA48 = (uint64_t)v158 + 16 * v153;
    *((void *)&v248[1] + 1) = v155;
    *(void *)&v248[0] = v162.i64[0];
    AllDerivedTypes = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_21696A2C0((uint64_t)v248);
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(AllDerivedTypes);
  double v163 = (std::string::__raw *)v238.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v238.__r_.__value_.__l.__data_ != &v238.__r_.__value_.__r.__words[1])
  {
    do
    {
      double v164 = (uint64_t *)&v163[1].__words[1];
      if (sub_216969824(0))
      {
        uint64_t v165 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v163[1].__words[1]);
        if (*(char *)(v165 + 23) >= 0) {
          uint64_t v168 = v165;
        }
        else {
          uint64_t v168 = *(void *)v165;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Found package resolver %s\n", v166, v167, v168);
      }
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*v164, &__dst);
      uint64_t v169 = sub_2168E79D8(&__dst);
      if (v170 & 1 | (unint64_t)v169)
      {
        uint64_t v171 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78((uint64_t *)&__dst);
        pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v171, (const pxrInternal__aapl__pxrReserved__::TfType *)&v163[1].__words[1], (uint64_t *)v248);
        uint64_t v172 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216969F68();
        if ((*(void *)v172 & 0xFFFFFFFFFFFFFFF8) != 0) {
          Emptyunint64_t String = (uint64_t *)((*(void *)v172 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v172);
        }
        LOBYTE(v246) = 0;
        LOBYTE(v247) = 0;
        pxrInternal__aapl__pxrReserved__::JsFindValue((uint64_t)v248, (uint64_t)EmptyString, (uint64_t *)&v246, (uint64_t)&__p);
        if ((_BYTE)v247 && *((void *)&v246 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v246 + 1));
        }
        sub_216812ED4((uint64_t)v248, *((void **)&v248[0] + 1));
        if (v237.__r_.__value_.__s.__data_[8])
        {
          long long v246 = 0uLL;
          uint64_t v247 = 0;
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&__p))
          {
            unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&__p);
            uint64_t v180 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
            uint64_t v179 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
            while (v180 != v179)
            {
              if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v180)) {
                goto LABEL_328;
              }
              uint64_t v180 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v180 + 16);
            }
            uint64_t v185 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&__p);
            sub_216782DE0(&v244, (v185[1] - *v185) >> 4);
            uint64_t v187 = *v185;
            uint64_t v186 = v185[1];
            if (*v185 != v186)
            {
              uint64_t v188 = v244;
              do
              {
                unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v187);
                if (*(char *)(String + 23) < 0)
                {
                  sub_216778F24(v248, *(void **)String, *(void *)(String + 8));
                }
                else
                {
                  long long v190 = *(_OWORD *)String;
                  *(void *)&v248[1] = *(void *)(String + 16);
                  v248[0] = v190;
                }
                if (*(char *)(v188 + 23) < 0) {
                  operator delete(*(void **)v188);
                }
                long long v191 = v248[0];
                *(void *)(v188 + 16) = *(void *)&v248[1];
                *(_OWORD *)uint64_t v188 = v191;
                v188 += 24;
                uint64_t v187 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v187 + 16);
              }
              while (v187 != v186);
            }
            sub_21680F80C((uint64_t *)&v246);
            long long v246 = v244;
            uint64_t v247 = v245;
            unint64_t v245 = 0;
            long long v244 = 0uLL;
            *(void *)&v248[0] = &v244;
            sub_216782F20((void ***)v248);
            uint64_t v192 = (long long *)*((void *)&v246 + 1);
            v233 = (long long *)*((void *)&v246 + 1);
            for (n = (long long *)v246; n != v192; n = (long long *)((char *)n + 24))
            {
              if (*((char *)n + 23) < 0)
              {
                if (*((void *)n + 1))
                {
LABEL_347:
                  uint64_t v194 = (char *)operator new(0xA0uLL);
                  uint64_t v195 = v194;
                  *((void *)v194 + 1) = 0;
                  *((void *)v194 + 2) = 0;
                  *(void *)uint64_t v194 = &unk_26C754220;
                  std::string::size_type v196 = __dst.__r_.__value_.__l.__size_;
                  *((void *)v194 + 3) = __dst.__r_.__value_.__r.__words[0];
                  uint64_t v197 = v194 + 24;
                  *((void *)v194 + 4) = v196;
                  if (v196) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v196 + 8), 1u, memory_order_relaxed);
                  }
                  *((void *)v194 + 5) = *v164;
                  v194[48] = 0;
                  *((void *)v194 + 7) = 850045863;
                  uint64_t v198 = v194 + 136;
                  *((_OWORD *)v195 + 4) = 0u;
                  *((_OWORD *)v195 + 5) = 0u;
                  *((_OWORD *)v195 + 6) = 0u;
                  *((_OWORD *)v195 + 7) = 0u;
                  *((void *)v195 + 16) = 0;
                  if (*((char *)n + 23) < 0)
                  {
                    sub_216778F24(v198, *(void **)n, *((void *)n + 1));
                  }
                  else
                  {
                    long long v199 = *n;
                    *((void *)v195 + 19) = *((void *)n + 2);
                    *(_OWORD *)uint64_t v198 = v199;
                  }
                  uint64_t v201 = (void *)qword_267B8EA40;
                  uint64_t v200 = qword_267B8EA48;
                  if (qword_267B8EA40 >= (unint64_t)qword_267B8EA48)
                  {
                    uint64_t v203 = v154;
                    uint64_t v204 = (void *)*((void *)&xmmword_267B8EA30 + 1);
                    uint64_t v205 = (qword_267B8EA40 - *((void *)&xmmword_267B8EA30 + 1)) >> 4;
                    unint64_t v206 = v205 + 1;
                    if ((unint64_t)(v205 + 1) >> 60) {
                      sub_21677CB10();
                    }
                    if ((qword_267B8EA48 - *((void *)&xmmword_267B8EA30 + 1)) >> 3 > v206) {
                      unint64_t v206 = (qword_267B8EA48 - *((void *)&xmmword_267B8EA30 + 1)) >> 3;
                    }
                    if ((unint64_t)(qword_267B8EA48 - *((void *)&xmmword_267B8EA30 + 1)) >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v207 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v207 = v206;
                    }
                    *(void *)v249 = &qword_267B8EA48;
                    if (v207 >> 60) {
                      sub_21677CA1C();
                    }
                    uint64_t v208 = (char *)operator new(16 * v207);
                    uint64_t v209 = &v208[16 * v205];
                    *(void *)uint64_t v209 = v197;
                    *((void *)v209 + 1) = v195;
                    if (v201 == v204)
                    {
                      int64x2_t v212 = vdupq_n_s64((unint64_t)v201);
                      uint64_t v210 = &v208[16 * v205];
                      uint64_t v154 = v203;
                    }
                    else
                    {
                      uint64_t v210 = &v208[16 * v205];
                      uint64_t v154 = v203;
                      do
                      {
                        long long v211 = *((_OWORD *)v201 - 1);
                        v201 -= 2;
                        *((_OWORD *)v210 - 1) = v211;
                        v210 -= 16;
                        *uint64_t v201 = 0;
                        v201[1] = 0;
                      }
                      while (v201 != v204);
                      int64x2_t v212 = *v203;
                      uint64_t v200 = v203[1].i64[0];
                    }
                    uint64_t v192 = v233;
                    uint64_t v202 = (uint64_t)(v209 + 16);
                    v154->i64[0] = (uint64_t)v210;
                    v154->i64[1] = (uint64_t)(v209 + 16);
                    *(int64x2_t *)((char *)v248 + 8) = v212;
                    v154[1].i64[0] = (uint64_t)&v208[16 * v207];
                    *((void *)&v248[1] + 1) = v200;
                    *(void *)&v248[0] = v212.i64[0];
                    sub_21696A2C0((uint64_t)v248);
                  }
                  else
                  {
                    *(void *)qword_267B8EA40 = v197;
                    v201[1] = v195;
                    uint64_t v202 = (uint64_t)(v201 + 2);
                  }
                  qword_267B8EA40 = v202;
                  double v164 = (uint64_t *)&v163[1].__words[1];
                  if (sub_216969824(0))
                  {
                    uint64_t v213 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v163[1].__words[1]);
                    if (*(char *)(v213 + 23) >= 0) {
                      uint64_t v214 = v213;
                    }
                    else {
                      uint64_t v214 = *(void *)v213;
                    }
                    v215 = n;
                    if (*((char *)n + 23) < 0) {
                      v215 = *(long long **)n;
                    }
                    uint64_t v216 = sub_2168E5D78((uint64_t *)&__dst);
                    v219 = (void *)(v216 + 8);
                    if (*(char *)(v216 + 31) < 0) {
                      v219 = (void *)*v219;
                    }
                    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"ArGetResolver(): Using package resolver %s for %s from plugin %s\n", v217, v218, v214, v215, v219);
                  }
                }
              }
              else if (*((unsigned char *)n + 23))
              {
                goto LABEL_347;
              }
            }
          }
          else
          {
LABEL_328:
            *(void *)&v248[0] = "ar/resolver.cpp";
            *((void *)&v248[0] + 1) = "_InitializePackageResolvers";
            *(void *)&v248[1] = 1280;
            *((void *)&v248[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolv"
                                        "er::_InitializePackageResolvers()";
            LOBYTE(v249[0]) = 0;
            unint64_t v181 = *(void *)sub_216969F68() & 0xFFFFFFFFFFFFFFF8;
            if (v181)
            {
              uint64_t v182 = (const char *)(v181 + 16);
              if (*(char *)(v181 + 39) < 0) {
                uint64_t v182 = *(const char **)v182;
              }
            }
            else
            {
              uint64_t v182 = "";
            }
            uint64_t v220 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v163[1].__words[1]);
            if (*(char *)(v220 + 23) >= 0) {
              v221 = (const char *)v220;
            }
            else {
              v221 = *(const char **)v220;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v248, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' metadata for %s must be a list of strings.", v182, v221);
          }
          *(void *)&v248[0] = &v246;
          sub_216782F20((void ***)v248);
        }
        else
        {
          *(void *)&v248[0] = "ar/resolver.cpp";
          *((void *)&v248[0] + 1) = "_InitializePackageResolvers";
          *(void *)&v248[1] = 1268;
          *((void *)&v248[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver"
                                      "::_InitializePackageResolvers()";
          LOBYTE(v249[0]) = 0;
          unint64_t v183 = *(void *)sub_216969F68() & 0xFFFFFFFFFFFFFFF8;
          if (v183)
          {
            uint64_t v184 = (const char *)(v183 + 16);
            if (*(char *)(v183 + 39) < 0) {
              uint64_t v184 = *(const char **)v184;
            }
          }
          else
          {
            uint64_t v184 = "";
          }
          uint64_t v222 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v163[1].__words[1]);
          if (*(char *)(v222 + 23) >= 0) {
            v223 = (const char *)v222;
          }
          else {
            v223 = *(const char **)v222;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v248, 1, (pxrInternal__aapl__pxrReserved__ *)"No package formats specified in '%s' metadata for '%s'", v184, v223);
        }
        if (v237.__r_.__value_.__s.__data_[8] && v237.__r_.__value_.__r.__words[0]) {
          sub_216784EC4((std::__shared_weak_count *)v237.__r_.__value_.__l.__data_);
        }
      }
      else if (sub_216969824(0))
      {
        uint64_t v174 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v163[1].__words[1]);
        if (*(char *)(v174 + 23) >= 0) {
          uint64_t v177 = v174;
        }
        else {
          uint64_t v177 = *(void *)v174;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Could not find plugin for package resolver %s", v175, v176, v177);
      }
      std::string::size_type v224 = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string::size_type))(*(void *)v224 + 8))(v224);
      }
      v225 = (std::string *)v163->__words[1];
      if (v225)
      {
        do
        {
          v226 = v225;
          v225 = (std::string *)v225->__r_.__value_.__r.__words[0];
        }
        while (v225);
      }
      else
      {
        do
        {
          v226 = (std::string *)v163->__words[2];
          BOOL v75 = v226->__r_.__value_.__r.__words[0] == (void)v163;
          double v163 = (std::string::__raw *)v226;
        }
        while (!v75);
      }
      double v163 = (std::string::__raw *)v226;
    }
    while (v226 != (std::string *)&v238.__r_.__value_.__r.__words[1]);
  }
  sub_2167FB780((uint64_t)&v238, (void *)v238.__r_.__value_.__l.__size_);
  return sub_216964874((uint64_t)&v234);
}

void sub_21696683C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,void *a23,char a24,int a25,__int16 a26,char a27,int a28,void *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45)
{
  if (qword_267B8EA00) {
    sub_216784EC4((std::__shared_weak_count *)qword_267B8EA00);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216966B64(uint64_t a1)
{
  sub_216969578((void *)(a1 + 192));
  sub_21696A424((void *)(a1 + 96));
  sub_216966BB8((void **)(a1 + 72));
  sub_216966C20(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void **sub_216966BB8(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5) {
          sub_216784EC4(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216966C20(uint64_t a1)
{
  sub_216969F24(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216966C5C(uint64_t a1)
{
  sub_216969578((void *)(a1 + 192));
  sub_21696A424((void *)(a1 + 96));
  sub_216966BB8((void **)(a1 + 72));
  sub_216966C20(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete((void *)a1);
}

void sub_216966CBC(int8x8_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8 = sub_21696A584(a1, a2, 0);
  if (!v8) {
    uint64_t v8 = sub_21696A690(a1, a3, 0);
  }
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a3, (uint64_t)v11);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v11;
  uint64_t v16 = v12;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v11);
    (*(void (**)(long long *__return_ptr, uint64_t, void **, void **))(*(void *)v8 + 16))(&v9, v8, v11, v15);
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
    *(_OWORD *)uint64_t v11 = v9;
    uint64_t v12 = v10;
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v11, a4);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, void **))(*(void *)v8 + 16))(v8, a2, v15);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_216966E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_216966E94(int8x8_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8 = sub_21696A584(a1, a2, 0);
  if (!v8) {
    uint64_t v8 = sub_21696A690(a1, a3, 0);
  }
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a3, (uint64_t)v11);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v11;
  uint64_t v16 = v12;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v11);
    (*(void (**)(long long *__return_ptr, uint64_t, void **, void **))(*(void *)v8 + 24))(&v9, v8, v11, v15);
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
    *(_OWORD *)uint64_t v11 = v9;
    uint64_t v12 = v10;
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)v11, a4);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, void **))(*(void *)v8 + 24))(v8, a2, v15);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_216967020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_21696706C(void *a1@<X0>, uint64_t a2@<X1>, std::string *p_dst@<X8>)
{
  char v20 = a1;
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    memset(&v19, 0, sizeof(v19));
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)&v13);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&v16;
    sub_21696AB3C(&__dst, (long long *)&v13);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    sub_21696ABC4((uint64_t *)&v20, (uint64_t)&v19, (uint64_t)&v13);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(&__dst, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string __dst = v13;
    }
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v7 = HIBYTE(v18);
      if (v18 < 0) {
        uint64_t v7 = v17;
      }
      if (v7)
      {
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)&v16, (uint64_t)&v13);
          v11[0] = &v19;
          v11[1] = &v16;
          sub_21696AB3C(v11, (long long *)&v13);
          if (v15 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v13.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = sub_21696AE30(a1, (uint64_t)&__dst);
          if (!v8) {
            break;
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v8 + 16))(&v13);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v19.__r_.__value_.__l.__data_);
          }
          std::string v19 = v13;
          std::string::size_type v9 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
          if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v9 = v19.__r_.__value_.__l.__size_;
          }
          if (!v9) {
            break;
          }
          pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&__dst, (uint64_t)&v19, &v13);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::string __dst = v13;
          uint64_t v10 = HIBYTE(v18);
          if (v18 < 0) {
            uint64_t v10 = v17;
          }
          if (!v10) {
            goto LABEL_32;
          }
        }
      }
      else
      {
LABEL_32:
        std::string *p_dst = __dst;
        p_dst = &__dst;
      }
    }
    p_dst->__r_.__value_.__l.__size_ = 0;
    p_dst->__r_.__value_.__r.__words[2] = 0;
    p_dst->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_21696ABC4((uint64_t *)&v20, a2, (uint64_t)p_dst);
  }
}

void sub_2169672E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v31 - 41) < 0) {
    operator delete(*(void **)(v31 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_21696734C(int8x8_t *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)&v8);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v5 + 40))(&__str, v5, &v8);
    std::string::operator=(&v8, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v8, &__str);
    *a3 = __str;
    if (v10 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, char *))(*(void *)v5 + 40);
    v6(v5, a2);
  }
}

void sub_21696747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_2169674AC(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  sub_21696BDA4(v26, a1[6] + 1);
  uint64_t v6 = a1[1];
  if (*(unsigned char *)(v6 + 161))
  {
    uint64_t v7 = sub_21696A840(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2, v26[0]);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  for (std::string::size_type i = (void *)a1[5]; i; std::string::size_type i = (void *)*i)
  {
    uint64_t v10 = i[5];
    if (*(unsigned char *)(v10 + 161))
    {
      uint64_t v11 = sub_21696A840(v10);
      if (v11) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a2, v26[0] + 16 * v8);
      }
      ++v8;
    }
  }
  sub_21696BCF4(a3, v26);
  char v27 = 0;
  uint64_t v12 = (void **)sub_2168520EC(a1 + 12, &v27);
  unint64_t v13 = (unint64_t)v12[2];
  char v14 = v12[1];
  if ((unint64_t)v14 >= v13)
  {
    uint64_t v16 = ((char *)v14 - (unsigned char *)*v12) >> 3;
    if ((unint64_t)(v16 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v17 = v13 - (void)*v12;
    uint64_t v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
      uint64_t v18 = v16 + 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19) {
      char v20 = (char *)sub_21677CB28((uint64_t)(v12 + 2), v19);
    }
    else {
      char v20 = 0;
    }
    unint64_t v21 = &v20[8 * v16];
    unint64_t v22 = &v20[8 * v19];
    *(void *)unint64_t v21 = a2;
    char v15 = v21 + 8;
    uint64_t v24 = (char *)*v12;
    unint64_t v23 = (char *)v12[1];
    if (v23 != *v12)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v21 - sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v25;
        v21 -= 8;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)*v12;
    }
    long long *v12 = v21;
    v12[1] = v15;
    uint64_t v12[2] = v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    void *v14 = a2;
    char v15 = v14 + 1;
  }
  v12[1] = v15;
  char v28 = (void **)v26;
  sub_216932118(&v28);
}

void sub_21696767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_216932118(&a14);
  _Unwind_Resume(a1);
}

void sub_2169676A4(void *a1, std::string *a2, uint64_t **a3)
{
  if ((sub_21696BE24((pxrInternal__aapl__pxrReserved__::VtValue *)a3) & 1) != 0
    || (uint64_t v24 = (void **)"ar/resolver.cpp",
        uint64_t v25 = "_UnbindContext",
        uint64_t v26 = 689,
        char v27 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_UnbindContext"
              "(const ArResolverContext &, VtValue *)",
        char v28 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "bindingData->IsHolding<_ResolverContextData>()", 0) & 1) != 0))
  {
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    uint64_t v6 = sub_21696C44C(a3);
    long long v7 = *(_OWORD *)v6;
    *(_OWORD *)uint64_t v6 = 0uLL;
    long long v22 = v7;
    uint64_t v8 = v6[2];
    void v6[2] = v23;
    uint64_t v23 = v8;
    uint64_t v9 = a1[1];
    if (*(unsigned char *)(v9 + 161))
    {
      uint64_t v10 = sub_21696A840(v9);
      (*(void (**)(uint64_t, std::string *, void))(*(void *)v10 + 56))(v10, a2, v22);
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
    }
    for (std::string::size_type i = (void *)a1[5]; i; std::string::size_type i = (void *)*i)
    {
      uint64_t v13 = i[5];
      if (*(unsigned char *)(v13 + 161))
      {
        uint64_t v14 = sub_21696A840(v13);
        if (v14) {
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v14 + 56))(v14, a2, v22 + 16 * v11);
        }
        ++v11;
      }
    }
    char v15 = sub_21696C44C(a3);
    long long v16 = *(_OWORD *)v15;
    *(_OWORD *)char v15 = v22;
    long long v22 = v16;
    uint64_t v17 = v15[2];
    void v15[2] = v23;
    uint64_t v23 = v17;
    __p.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v18 = (void *)sub_2168520EC(a1 + 12, &__p);
    uint64_t v19 = v18[1];
    if (*v18 == v19)
    {
      uint64_t v24 = (void **)"ar/resolver.cpp";
      uint64_t v25 = "_UnbindContext";
      uint64_t v26 = 720;
      char v27 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_UnbindContext(c"
            "onst ArResolverContext &, VtValue *)";
      char v28 = 0;
      pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString(a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"No context was bound, cannot unbind context: %s", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v18[1] = v19 - 8;
    }
    uint64_t v24 = (void **)&v22;
    sub_216932118(&v24);
  }
}

void sub_2169678E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a19 = &a16;
  sub_216932118((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_216967928(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 161))
  {
    uint64_t v5 = sub_21696A840(v4);
    (*(void (**)(void ***__return_ptr))(*(void *)v5 + 64))(v9);
    sub_21696C4E0(v10, (uint64_t)v9);
    uint64_t v11 = v9;
    sub_216787968((void ***)&v11);
  }
  for (std::string::size_type i = *(void **)(a1 + 40); i; std::string::size_type i = (void *)*i)
  {
    uint64_t v7 = i[5];
    if (*(unsigned char *)(v7 + 161))
    {
      uint64_t v8 = sub_21696A840(v7);
      if (v8)
      {
        (*(void (**)(void ***__return_ptr))(*(void *)v8 + 64))(v9);
        sub_21696C4E0(v10, (uint64_t)v9);
        uint64_t v11 = v9;
        sub_216787968((void ***)&v11);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a2, v10);
  v9[0] = (void **)v10;
  sub_2167AD7AC(v9);
}

void sub_216967A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = v13;
  sub_216787968((void ***)(v14 - 40));
  a10 = (void **)&a13;
  sub_2167AD7AC(&a10);
  _Unwind_Resume(a1);
}

void sub_216967A88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)v12);
    sub_216967A88(a1, v12);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v13 = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v6 + 161))
    {
      uint64_t v7 = sub_21696A840(v6);
      (*(void (**)(void ***__return_ptr))(*(void *)v7 + 72))(v11);
      sub_21696C4E0((uint64_t *)v12, (uint64_t)v11);
      long long v16 = v11;
      sub_216787968((void ***)&v16);
    }
    for (std::string::size_type i = *(void **)(a1 + 40); i; std::string::size_type i = (void *)*i)
    {
      uint64_t v9 = i[5];
      if (*(unsigned char *)(v9 + 161))
      {
        uint64_t v10 = sub_21696A840(v9);
        if (v10)
        {
          (*(void (**)(void ***__return_ptr))(*(void *)v10 + 72))(v11);
          sub_21696C4E0((uint64_t *)v12, (uint64_t)v11);
          long long v16 = v11;
          sub_216787968((void ***)&v16);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a3, v12);
    v11[0] = v12;
    sub_2167AD7AC(v11);
  }
}

void sub_216967BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)(v13 - 40) = v12;
  sub_216787968((void ***)(v13 - 40));
  a9 = (void **)&a12;
  sub_2167AD7AC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216967C50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 8);
  if (*(unsigned char *)(result + 161))
  {
    unint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_21696A840(result) + 80);
    return v3();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

unsigned char *sub_216967CD0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned char **)(a1 + 8);
  if (result[161])
  {
    uint64_t v5 = sub_21696A840((uint64_t)result);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
  }
  for (std::string::size_type i = *(void **)(a1 + 40); i; std::string::size_type i = (void *)*i)
  {
    uint64_t result = (unsigned char *)i[5];
    if (result[161])
    {
      uint64_t result = (unsigned char *)sub_21696A840((uint64_t)result);
      if (result) {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)result + 88))(result, a2);
      }
    }
  }
  return result;
}

void sub_216967D78(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v17 = 0;
  uint64_t v4 = a1[1];
  if (*(unsigned char *)(v4 + 161))
  {
    uint64_t v5 = sub_21696A840(v4);
    (*(void (**)(void ***__return_ptr))(*(void *)v5 + 96))(v14);
    sub_21696C4E0(&v15, (uint64_t)v14);
    uint64_t v18 = v14;
    sub_216787968((void ***)&v18);
  }
  for (std::string::size_type i = (void *)a1[5]; i; std::string::size_type i = (void *)*i)
  {
    uint64_t v7 = i[5];
    if (*(unsigned char *)(v7 + 161))
    {
      uint64_t v8 = sub_21696A840(v7);
      if (v8)
      {
        (*(void (**)(void ***__return_ptr))(*(void *)v8 + 96))(v14);
        sub_21696C4E0(&v15, (uint64_t)v14);
        uint64_t v18 = v14;
        sub_216787968((void ***)&v18);
      }
    }
  }
  LOBYTE(v18) = 0;
  uint64_t v9 = (void *)sub_2168520EC(a1 + 12, &v18);
  uint64_t v10 = v9[1];
  if (*v9 != v10)
  {
    uint64_t v11 = *(void ***)(v10 - 8);
    if (v11)
    {
      uint64_t v12 = v16;
      if ((unint64_t)v16 >= v17)
      {
        uint64_t v13 = sub_21696C780(&v15, v11);
      }
      else
      {
        void *v16 = 0;
        v12[1] = 0;
        uint64_t v12[2] = 0;
        sub_21695F340(v12, *v11, v11[1], ((char *)v11[1] - (char *)*v11) >> 4);
        uint64_t v13 = (uint64_t)(v12 + 3);
      }
      long long v16 = (void *)v13;
    }
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(a2, &v15);
  v14[0] = (void **)&v15;
  sub_2167AD7AC(v14);
}

void sub_216967EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_2167AD7AC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216967F4C(int8x8_t *a1, char *a2)
{
  uint64_t v11 = 0;
  uint64_t v3 = sub_21696A690(a1, a2, &v11);
  if (!*(unsigned char *)(v11 + 49)) {
    return 0;
  }
  uint64_t v4 = v3;
  if (!pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2)) {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 104))(v4, a2);
  }
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v4 + 104))(v4, v7);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return v5;
}

void sub_216968038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21682E578((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21696804C(int8x8_t *a1, char *a2)
{
  uint64_t v3 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)a2, (uint64_t)&v5);
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 112))(v3, &__p);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v6 < 0) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(uint64_t, char *))(*(void *)v3 + 112);
    v4(v3, a2);
  }
}

void sub_216968148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_21696815C(int8x8_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[2] = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  memset(&v26, 0, sizeof(v26));
  v27[1] = 0;
  uint64_t v7 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v15);
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)v11);
    if (SHIBYTE(v12) < 0)
    {
      sub_216778F24(v9, v11[0], (unint64_t)v11[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v11;
      uint64_t v10 = v12;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, void **, void **))(*(void *)v7 + 120))(&v19, v7, v15, v9);
    if (SBYTE7(v25[0]) < 0) {
      operator delete((void *)v24);
    }
    long long v24 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(void *)&v25[0] = *((void *)&v19.__r_.__value_.__l + 2);
    *((unsigned char *)&v19.__r_.__value_.__s + 23) = 0;
    v19.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v25[1]) < 0) {
      operator delete(*((void **)&v25[0] + 1));
    }
    *(_OWORD *)((char *)v25 + 8) = v20;
    *((void *)&v25[1] + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v21;
    HIBYTE(v2sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
    LOBYTE(v20) = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    std::string v26 = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_2168ED33C(v27, v23);
    sub_2168EE084((uint64_t)v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)v20);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
    std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v26, (uint64_t)&v13, &v19);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      std::string v26 = v19;
    }
    *(_OWORD *)a4 = v24;
    *(void *)(a4 + 16) = *(void *)&v25[0];
    *(void *)&v25[0] = 0;
    long long v24 = 0uLL;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)((char *)v25 + 8);
    *(void *)(a4 + 40) = *((void *)&v25[1] + 1);
    memset((char *)v25 + 8, 0, 24);
    *(std::string *)(a4 + 48) = v26;
    memset(&v26, 0, sizeof(v26));
    sub_2168EDFA8((void *)(a4 + 72), v27);
    if (v14 < 0) {
      operator delete(v13);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v7 + 120))(v7, a2, a3);
  }
  sub_2168EE084((uint64_t)v27);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25[1]) < 0) {
    operator delete(*((void **)&v25[0] + 1));
  }
  if (SBYTE7(v25[0]) < 0) {
    operator delete((void *)v24);
  }
}

void sub_2169684AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_21682E578((uint64_t)&a15);
  sub_21682E578((uint64_t)&a21);
  sub_21696C898(v21 - 144);
  _Unwind_Resume(a1);
}

void sub_216968500(int8x8_t *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)v7);
    *(_OWORD *)std::string __p = *(_OWORD *)v7;
    uint64_t v12 = v8;
    v7[1] = 0;
    uint64_t v8 = 0;
    v7[0] = 0;
    (*(void (**)(uint64_t, void **, void **))(*(void *)v5 + 128))(v5, v13, __p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7[0]);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    char v6 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)v5 + 128);
    v6(v5, a2, a3);
  }
}

void sub_216968660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_21682E578((uint64_t)&a9);
  sub_21682E578((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_216968694(int8x8_t *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)a2, (uint64_t)v9);
    uint64_t v7 = sub_21696AE30(a1, (uint64_t)v9);
    if (v7)
    {
      (*(void (**)(uint64_t, void **, void **))(*(void *)v7 + 24))(v7, v9, &__p);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, char *))(*(void *)v6 + 136);
    v8(v6, a2);
  }
}

void sub_2169687AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169687C0(int8x8_t *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    if (a3) {
      MEMORY[0x21D4477E0](a3, "Cannot open package-relative paths for write");
    }
    return 0;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v5 + 144);
    return v7(v5, a2, a3);
  }
}

void sub_216968868(int8x8_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    v9[0] = "ar/resolver.cpp";
    v9[1] = "_OpenAssetForWrite";
    v9[2] = 943;
    void v9[3] = "virtual std::shared_ptr<ArWritableAsset> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Dispatchi"
            "ngResolver::_OpenAssetForWrite(const ArResolvedPath &, WriteMode) const";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot open package-relative paths for write");
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)v7 + 152);
    v8(v7, a2, a3);
  }
}

void sub_21696894C(void *a1, uint64_t **a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  long long v42 = 0uLL;
  if (sub_21696BE24((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = sub_21696C44C(a2);
    uint64_t v5 = *v4;
    uint64_t *v4 = v41;
    uint64_t v41 = v5;
    long long v6 = *(_OWORD *)(v4 + 1);
    *(_OWORD *)(v4 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v42;
    long long v42 = v6;
    uint64_t v7 = v6;
  }
  else
  {
    sub_21696C8F4(&v41, a1[6] + ((uint64_t)(a1[10] - a1[9]) >> 4) + 2);
    uint64_t v5 = v41;
    uint64_t v7 = v42;
  }
  if (a1[6] + ((uint64_t)(a1[10] - a1[9]) >> 4) + 2 != (v7 - v5) >> 4)
  {
    float64x2_t v43 = (void **)"ar/resolver.cpp";
    uint64_t v44 = "_BeginCacheScope";
    uint64_t v45 = 986;
    uint64_t v46 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_BeginCacheScope(VtValue *)";
    LOBYTE(v47) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v43, "cacheData.size() == 2 + _packageResolvers.size() + _uriResolvers.size()", 0);
  }
  uint64_t v8 = a1[1];
  if (*(unsigned char *)(v8 + 162))
  {
    uint64_t v9 = sub_21696A840(v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 160))(v9, v41);
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  for (std::string::size_type i = (void *)a1[5]; i; std::string::size_type i = (void *)*i)
  {
    uint64_t v12 = i[5];
    if (*(unsigned char *)(v12 + 162))
    {
      uint64_t v13 = sub_21696A840(v12);
      if (v13) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 160))(v13, v41 + 16 * v10);
      }
      ++v10;
    }
  }
  uint64_t v14 = a1[10] - a1[9];
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v14 >> 4;
    uint64_t v17 = 16 * v10;
    do
    {
      uint64_t v18 = sub_21696B92C(*(void *)(a1[9] + v15));
      if (v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, v41 + v17 + v15);
      }
      ++v10;
      v15 += 16;
      --v16;
    }
    while (v16);
  }
  if (!v41
    || (std::string v19 = (void *)(v41 + 16 * v10), v20 = v19 + 1, v19[1])
    && (sub_21696CB60((pxrInternal__aapl__pxrReserved__::VtValue *)v19) & 1) == 0)
  {
    float64x2_t v43 = (void **)"ar/threadLocalScopedCache.h";
    uint64_t v44 = "BeginCacheScope";
    uint64_t v45 = 79;
    uint64_t v46 = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::(anonymous n"
          "amespace)::_DispatchingResolver::_Cache>::BeginCacheScope(VtValue *) [Cacheduint64_t Type = pxrInternal__aapl__pxrReser"
          "ved__::(anonymous namespace)::_DispatchingResolver::_Cache]";
    LOBYTE(v47) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected cache scope data", v41, v42);
    goto LABEL_32;
  }
  LOBYTE(v43) = 0;
  uint64_t v21 = (unint64_t *)sub_2168520EC(a1 + 24, &v43);
  if (sub_21696CB60((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
  {
    if ((*v20 & 4) != 0) {
      long long v22 = (long long *)(*(uint64_t (**)(void *))((*v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
    }
    else {
      long long v22 = (long long *)*v19;
    }
  }
  else
  {
    unint64_t v23 = v21[1];
    if (*v21 == v23)
    {
      uint64_t v25 = (char *)operator new(0x260uLL);
      *((void *)v25 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(void *)uint64_t v25 = &unk_26C7543C0;
      std::string v26 = v25 + 24;
      bzero(v25 + 24, 0x248uLL);
      char v27 = v25 + 552;
      for (uint64_t j = 560; j != 608; j += 24)
        *(void *)&v25[j] = 0;
      *((_OWORD *)v25 + 32) = 0u;
      *((_OWORD *)v25 + 33) = 0u;
      *((_OWORD *)v25 + 30) = 0u;
      *((_OWORD *)v25 + 3sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0u;
      *((_OWORD *)v25 + 28) = 0u;
      *((_OWORD *)v25 + 29) = 0u;
      *((_OWORD *)v25 + 26) = 0u;
      *((_OWORD *)v25 + 27) = 0u;
      *((_OWORD *)v25 + 24) = 0u;
      *((_OWORD *)v25 + 25) = 0u;
      *((_OWORD *)v25 + 22) = 0u;
      *((_OWORD *)v25 + 23) = 0u;
      *((_OWORD *)v25 + 20) = 0u;
      *((_OWORD *)v25 + 2sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0u;
      *((_OWORD *)v25 + 18) = 0u;
      *((_OWORD *)v25 + 19) = 0u;
      *((_OWORD *)v25 + 16) = 0u;
      *((_OWORD *)v25 + 17) = 0u;
      *((_OWORD *)v25 + 14) = 0u;
      *((_OWORD *)v25 + 15) = 0u;
      *((_OWORD *)v25 + 12) = 0u;
      *((_OWORD *)v25 + 13) = 0u;
      *((_OWORD *)v25 + 10) = 0u;
      *((_OWORD *)v25 + 1sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0u;
      *((_OWORD *)v25 + 8) = 0u;
      *((_OWORD *)v25 + 9) = 0u;
      *((_OWORD *)v25 + 6) = 0u;
      *((_OWORD *)v25 + 7) = 0u;
      *((_OWORD *)v25 + 4) = 0u;
      *((_OWORD *)v25 + 5) = 0u;
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      __dmb(0xBu);
      *((void *)v25 + 3) = 0;
      __dmb(0xBu);
      *((void *)v25 + 68) = 0;
      *char v27 = 0u;
      *(_OWORD *)(v25 + 568) = 0u;
      *(_OWORD *)(v25 + 584) = 0u;
      *((void *)v25 + 4) = v27;
      __dmb(0xBu);
      *((void *)v25 + 3) = 1;
      uint64_t v29 = (const char *)v21[2];
      unint64_t v30 = (void **)v21[1];
      if (v30 >= (void **)v29)
      {
        unint64_t v32 = *v21;
        uint64_t v33 = (uint64_t)((uint64_t)v30 - *v21) >> 4;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60) {
          sub_21677CB10();
        }
        if ((uint64_t)&v29[-v32] >> 3 > v34) {
          unint64_t v34 = (uint64_t)&v29[-v32] >> 3;
        }
        if ((unint64_t)&v29[-v32] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        uint64_t v47 = v21 + 2;
        if (v35 >> 60) {
          sub_21677CA1C();
        }
        uint64_t v36 = (char *)operator new(16 * v35);
        unint64_t v37 = &v36[16 * v33];
        *(void *)unint64_t v37 = v26;
        *((void *)v37 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v25;
        if (v30 == (void **)v32)
        {
          uint64_t v40 = v30;
          unint64_t v38 = &v36[16 * v33];
        }
        else
        {
          unint64_t v38 = &v36[16 * v33];
          do
          {
            long long v39 = *((_OWORD *)v30 - 1);
            v30 -= 2;
            *((_OWORD *)v38 - sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v39;
            v38 -= 16;
            *unint64_t v30 = 0;
            v30[1] = 0;
          }
          while (v30 != (void **)v32);
          uint64_t v40 = (void **)*v21;
          unint64_t v30 = (void **)v21[1];
          uint64_t v29 = (const char *)v21[2];
        }
        uint64_t v31 = v37 + 16;
        *uint64_t v21 = (unint64_t)v38;
        float64x2_t v43 = v40;
        uint64_t v44 = (const char *)v40;
        v21[1] = (unint64_t)(v37 + 16);
        uint64_t v45 = (uint64_t)v30;
        void v21[2] = (unint64_t)&v36[16 * v35];
        uint64_t v46 = v29;
        sub_21696A2C0((uint64_t)&v43);
      }
      else
      {
        *unint64_t v30 = v26;
        v30[1] = v25;
        uint64_t v31 = v30 + 2;
      }
      v21[1] = (unint64_t)v31;
      goto LABEL_30;
    }
    long long v22 = (long long *)(v23 - 16);
  }
  sub_21696CBE4(v21, v22);
LABEL_30:
  unint64_t v24 = v21[1];
  sub_2168EDEE4((uint64_t)&v43, (uint64_t)v19);
  sub_21696CED8(v19, (void *)(v24 - 16));
  if (v44) {
    (*((void (**)(void ***))v44 + 4))(&v43);
  }
LABEL_32:
  sub_21696BCF4((pxrInternal__aapl__pxrReserved__::VtValue *)a2, &v41);
  float64x2_t v43 = (void **)&v41;
  sub_216932118(&v43);
}

void sub_216968E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216932118(&a12);
  _Unwind_Resume(a1);
}

void sub_216968EB4(void *a1, uint64_t **a2)
{
  if ((sub_21696BE24((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || (unint64_t v23 = (void **)"ar/resolver.cpp",
        unint64_t v24 = "_EndCacheScope",
        uint64_t v25 = 1023,
        std::string v26 = "virtual void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DispatchingResolver::_EndCacheScope(VtValue *)",
        char v27 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "cacheScopeData->IsHolding<_ResolverCacheData>()", 0) & 1) != 0))
  {
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    uint64_t v4 = sub_21696C44C(a2);
    long long v5 = *(_OWORD *)v4;
    *(_OWORD *)uint64_t v4 = 0uLL;
    long long v21 = v5;
    uint64_t v6 = v4[2];
    v4[2] = v22;
    uint64_t v22 = v6;
    uint64_t v7 = a1[1];
    if (*(unsigned char *)(v7 + 162))
    {
      uint64_t v8 = sub_21696A840(v7);
      (*(void (**)(uint64_t, void))(*(void *)v8 + 168))(v8, v21);
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    for (std::string::size_type i = (void *)a1[5]; i; std::string::size_type i = (void *)*i)
    {
      uint64_t v11 = i[5];
      if (*(unsigned char *)(v11 + 162))
      {
        uint64_t v12 = sub_21696A840(v11);
        if (v12) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 168))(v12, v21 + 16 * v9);
        }
        ++v9;
      }
    }
    uint64_t v13 = a1[10] - a1[9];
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v13 >> 4;
      uint64_t v16 = 16 * v9;
      do
      {
        uint64_t v17 = sub_21696B92C(*(void *)(a1[9] + v14));
        if (v17) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 40))(v17, v21 + v16 + v14);
        }
        v14 += 16;
        --v15;
      }
      while (v15);
    }
    LOBYTE(v23) = 0;
    uint64_t v18 = (void *)sub_2168520EC(a1 + 24, &v23);
    uint64_t v19 = v18[1];
    if (*v18 == v19)
    {
      unint64_t v23 = (void **)"ar/threadLocalScopedCache.h";
      unint64_t v24 = "EndCacheScope";
      uint64_t v25 = 101;
      std::string v26 = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::(anonymous"
            " namespace)::_DispatchingResolver::_Cache>::EndCacheScope(VtValue *) [Cacheduint64_t Type = pxrInternal__aapl__pxrRes"
            "erved__::(anonymous namespace)::_DispatchingResolver::_Cache]";
      char v27 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "!cacheStack.empty()", 0))
      {
LABEL_20:
        sub_21696BCF4((pxrInternal__aapl__pxrReserved__::VtValue *)a2, (uint64_t *)&v21);
        unint64_t v23 = (void **)&v21;
        sub_216932118(&v23);
        return;
      }
      uint64_t v19 = v18[1];
    }
    long long v20 = *(std::__shared_weak_count **)(v19 - 8);
    if (v20) {
      sub_216784EC4(v20);
    }
    v18[1] = v19 - 16;
    goto LABEL_20;
  }
}

void sub_21696910C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 56) = &a9;
  sub_216932118((void ***)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_216969134(int8x8_t *a1, char *a2)
{
  uint64_t v3 = sub_21696A690(a1, a2, 0);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)a2, (uint64_t)v7);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 176))(v3, v7);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    return v4;
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, char *))(*(void *)v3 + 176);
    return v6(v3, a2);
  }
}

void sub_21696921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216969230(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C753F68;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t v2 = &unk_26C753FC8;
  a1[3] = v2;
  for (uint64_t i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_216969494;
  return a1;
}

void sub_2169692FC(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216969304(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_2169693AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_2169693C0(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_2169693C8(void *a1)
{
  uint64_t v1 = sub_21696A424(a1);

  operator delete(v1);
}

void *sub_2169693F0()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t result = &unk_26C753FC8;
  return result;
}

uint64_t sub_216969428(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_216969488(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t sub_216969494(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

uint64_t sub_2169694B4(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))sub_216969784, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_21696955C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_216969570(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void *sub_216969578(void *a1)
{
  *a1 = &unk_26C754060;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  unint64_t v3 = (tbb::internal **)a1[8];
  unint64_t v5 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), (void (*)(void *, unint64_t))sub_216969794);
  unint64_t v6 = a1[6];
  if (v5 > v6)
  {
    uint64_t v7 = v3 - 1;
    do
    {
      char v8 = v7[v5];
      v7[v5] = 0;
      if ((unint64_t)v8 >= 0x40) {
        tbb::internal::NFS_Free(v8, v4);
      }
      --v5;
    }
    while (v5 > v6);
    unint64_t v5 = v6;
  }
  uint64_t v9 = *v3;
  if ((unint64_t)*v3 >= 0x40)
  {
    for (; v5; --v5)
      v3[v5 - 1] = 0;
    tbb::internal::NFS_Free(v9, v4);
  }
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), v4);
  *a1 = &unk_26C74B518;
  return a1;
}

void sub_2169696A8(void *a1)
{
  uint64_t v1 = sub_216969578(a1);

  operator delete(v1);
}

void *sub_2169696D0()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t result = &unk_26C7540C0;
  return result;
}

uint64_t sub_216969708(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_216969768(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t sub_216969774(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void sub_216969784(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

void sub_216969794(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = (char **)(a1 + (--v2 << 7));
      if (*((unsigned char *)v4 + 24))
      {
        unint64_t v5 = *v4;
        if (*v4)
        {
          unint64_t v6 = v4[1];
          uint64_t v7 = *v4;
          if (v6 != v5)
          {
            do
            {
              char v8 = (std::__shared_weak_count *)*((void *)v6 - 1);
              if (v8) {
                sub_216784EC4(v8);
              }
              v6 -= 16;
            }
            while (v6 != v5);
            uint64_t v7 = *v4;
          }
          v4[1] = v5;
          operator delete(v7);
        }
        *((unsigned char *)v4 + 24) = 0;
      }
    }
    while (v2);
  }
}

BOOL sub_216969824(int a1)
{
  uint64_t v2 = sub_21695DDA0();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_21695DDA0();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "AR_RESOLVER_INIT");
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_216969884(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4) {
    return 0;
  }
  uint64_t v7 = *a1;
  while (1)
  {
    if (*(void *)(v3 + 16) == *(void *)a2)
    {
      sub_2169648DC(a2, a1[2], &v14);
      if (v14) {
        break;
      }
    }
    v3 += 56;
    if (v3 == v4) {
      return 0;
    }
  }
  sub_216969C84(&v12, (uint64_t)v14);
  uint64_t v9 = operator new(0xC0uLL);
  v9[1] = 0;
  v9[2] = 0;
  *uint64_t v9 = &unk_26C754158;
  uint64_t v10 = sub_216969AD4((uint64_t)(v9 + 3), v3, &v12);
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 16);
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  return 1;
}

void sub_216969974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(a1);
}

void sub_2169699A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C754158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2169699C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C754158;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

atomic_uint *sub_216969A04(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 160);
  sub_216782F20(&v5);
  uint64_t v2 = *(atomic_uint **)(a1 + 144);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3) {
    sub_216784EC4(v3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t result = *(atomic_uint **)(a1 + 32);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_216969AD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  BOOL v6 = *a3 != 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 104) = v7;
  *(unsigned char *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = 850045863;
  *(void *)(a1 + 96) = v8;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a1 + 112) = *(void *)a2;
  *(void *)(a1 + 120) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  sub_216812BD8((char *)(a1 + 136), *(long long **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  __int16 v11 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(a1 + 160) = v11;
  return a1;
}

void sub_216969BE0(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v2 + 120);
  if (v6) {
    sub_217324248(v6);
  }
  sub_21732445C(v3, v4, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216969C08(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 24);
  sub_216782F20(&v4);
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_216969C84(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C7541A8;
  v4[1] = 0;
  v4[2] = 0;
  double v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216969CDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173244E0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216969CF8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216969D20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216969D50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7541F8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216969D94(unsigned int *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, *a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216969EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216969EDC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216812F30((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_216969F24(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216812F30((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unint64_t sub_216969F68()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  std::string::size_type v0 = (char *)atomic_load((unint64_t *)&qword_267B8EB18);
  if (!v0)
  {
    std::string::size_type v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "extensions", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "uriSchemes", 0);
    uint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "implementsContexts", 0);
    char v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "implementsScopedCaches", 0);
    uint64_t v5 = *(void ***)v0;
    uint64_t v19 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (void **)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v19 = v6;
      }
    }
    uint64_t v7 = (atomic_uint *)*v2;
    long long v20 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        long long v20 = v8;
      }
    }
    uint64_t v9 = (atomic_uint *)*v3;
    long long v21 = v9;
    if ((v9 & 7) != 0)
    {
      uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
        long long v21 = v10;
      }
    }
    __int16 v11 = (atomic_uint *)*v4;
    uint64_t v22 = v11;
    if ((v11 & 7) != 0)
    {
      uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v22 = v12;
      }
    }
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    *((void *)v0 + 6) = 0;
    uint64_t v13 = (char *)operator new(0x20uLL);
    uint64_t v14 = 0;
    *((void *)v0 + 4) = v13;
    *((void *)v0 + 5) = v13;
    *((void *)v0 + 6) = v13 + 32;
    do
    {
      unint64_t v15 = (unint64_t)(&v19)[v14];
      *(void *)&v13[v14 * 8] = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v13[v14 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
    }
    while (v14 != 4);
    *((void *)v0 + 5) = v13 + 32;
    for (uint64_t i = 3; i != -1; --i)
    {
      unint64_t v17 = (unint64_t)(&v19)[i];
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v18 = 0;
    atomic_compare_exchange_strong(&qword_267B8EB18, (unint64_t *)&v18, (unint64_t)v0);
    if (v18)
    {
      uint64_t v19 = (void **)(v0 + 32);
      sub_216889A04(&v19);
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EB18);
    }
  }
  return (unint64_t)v0;
}

void sub_21696A1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_21696A2C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    char v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      sub_216784EC4(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21696A320(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C754220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21696A340(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C754220;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

atomic_uint *sub_21696A384(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    sub_216784EC4(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));
  uint64_t result = *(atomic_uint **)(a1 + 32);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    char v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v4();
  }
  return result;
}

void *sub_21696A424(void *a1)
{
  *a1 = &unk_26C753F68;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_21696A4C0(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

unint64_t *sub_21696A4C0(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  uint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::ArResolverContext const*>>,128ul>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1 + (a2 << 7) - 128;
    do
    {
      if (*(unsigned char *)(v3 + 24))
      {
        unint64_t v4 = *(void **)v3;
        if (*(void *)v3)
        {
          *(void *)(v3 + 8) = v4;
          operator delete(v4);
        }
        *(unsigned char *)(v3 + 24) = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

uint64_t sub_21696A584(int8x8_t *a1, char *a2, void *a3)
{
  if (!*(void *)&a1[6]) {
    return 0;
  }
  unint64_t v6 = a2[23];
  if (a2[23] < 0)
  {
    int8x8_t v11 = a1[8];
    uint64_t v10 = *(char **)a2;
    uint64_t v12 = (unint64_t)(*(void *)&v11 + 1) < *((void *)a2 + 1) ? *(void *)&v11 + 1 : *((void *)a2 + 1);
    uint64_t v9 = &v10[v12];
  }
  else
  {
    int8x8_t v7 = a1[8];
    uint64_t v8 = *(void *)&v7 + 1 < v6 ? *(void *)&v7 + 1 : a2[23];
    uint64_t v9 = &a2[v8];
    uint64_t v10 = a2;
  }
  uint64_t v13 = (char *)memchr(v10, 58, v9 - v10);
  uint64_t v14 = v13 ? v13 : v9;
  if (v14 == v9) {
    return 0;
  }
  if ((v6 & 0x80u) == 0) {
    unint64_t v15 = a2;
  }
  else {
    unint64_t v15 = *(char **)a2;
  }
  sub_21682E90C(__p, v15, v14, v14 - v15);
  uint64_t v16 = sub_21696A6EC(a1, (unsigned __int8 *)__p, a3);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  return v16;
}

void sub_21696A674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21696A690(int8x8_t *a1, char *a2, void *a3)
{
  uint64_t result = sub_21696A584(a1, a2, a3);
  if (!result)
  {
    if (a3) {
      *a3 = *(void *)&a1[1] + 112;
    }
    uint64_t v6 = (uint64_t)a1[1];
    return sub_21696A840(v6);
  }
  return result;
}

uint64_t sub_21696A6EC(int8x8_t *a1, unsigned __int8 *a2, void *a3)
{
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii(a2, (uint64_t)__p);
  unint64_t v5 = sub_216891D24((uint64_t)&a1[6], (uint64_t)__p);
  int8x8_t v6 = a1[4];
  if (v6)
  {
    unint64_t v7 = v5;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = v5;
      if (v5 >= *(void *)&v6) {
        unint64_t v10 = v5 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v6 - 1) & v5;
    }
    int8x8_t v11 = *(uint64_t ***)(*(void *)&a1[3] + 8 * v10);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        uint64_t v13 = (uint64_t)&a1[7];
        do
        {
          unint64_t v14 = v12[1];
          if (v7 == v14)
          {
            if (sub_2168513F8(v13, (unsigned __int8 *)v12 + 16, (unsigned __int8 *)__p))
            {
              uint64_t v16 = v12 + 5;
              goto LABEL_19;
            }
          }
          else
          {
            if (v9 > 1)
            {
              if (v14 >= *(void *)&v6) {
                v14 %= *(void *)&v6;
              }
            }
            else
            {
              v14 &= *(void *)&v6 - 1;
            }
            if (v14 != v10) {
              break;
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v16 = 0;
LABEL_19:
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v16) {
      goto LABEL_21;
    }
    return 0;
  }
  if (!v16) {
    return 0;
  }
LABEL_21:
  if (a3) {
    *a3 = *v16 + 112;
  }
  return sub_21696A840(*v16);
}

uint64_t sub_21696A840(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v2 & 1) == 0)
  {
    sub_21696A92C((uint64_t *)a1, &v6);
    std::mutex::lock((std::mutex *)(a1 + 32));
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 24));
    uint64_t v4 = v6;
    if (v3)
    {
      std::mutex::unlock((std::mutex *)(a1 + 32));
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    else
    {
      uint64_t v6 = 0;
      sub_21696AA84((void *)(a1 + 96), v4);
      atomic_store(1u, (unsigned __int8 *)(a1 + 24));
      std::mutex::unlock((std::mutex *)(a1 + 32));
    }
  }
  return *(void *)(a1 + 96);
}

void sub_21696A904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_21696A92C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(a1);
  if ((pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v4) & 1) == 0)
  {
    unint64_t v9 = "ar/resolver.cpp";
    unint64_t v10 = "Create";
    uint64_t v11 = 378;
    uint64_t v12 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArResolver, pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase>::Create() [Re"
          "solveruint64_t Type = pxrInternal__aapl__pxrReserved__::ArResolver, ResolverTypeFactory = pxrInternal__aapl__pxrReserve"
          "d__::Ar_ResolverFactoryBase]";
    char v13 = 0;
    sub_2168E5D78(a1);
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin %s for %s");
    goto LABEL_6;
  }
  unint64_t v7 = sub_21696AACC((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), v5, v6);
  if (!v7 || (uint64_t result = (*(uint64_t (**)(void *))(*(void *)v7 + 16))(v7)) == 0)
  {
    unint64_t v9 = "ar/resolver.cpp";
    unint64_t v10 = "Create";
    uint64_t v11 = 392;
    uint64_t v12 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArResolver, pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase>::Create() [Re"
          "solveruint64_t Type = pxrInternal__aapl__pxrReserved__::ArResolver, ResolverTypeFactory = pxrInternal__aapl__pxrReserve"
          "d__::Ar_ResolverFactoryBase]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
    sub_2168E5D78(a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to manufacture asset resolver %s from plugin %s");
LABEL_6:
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void sub_21696AA84(void *a1, uint64_t a2)
{
  sub_216969C84(&v5, a2);
  unsigned __int8 v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_21696AACC(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void *sub_21696AB3C(void *a1, long long *a2)
{
  uint64_t v4 = *a1;
  if (*(char *)(*a1 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v6 = a1[1];
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  long long v7 = *(long long *)((char *)a2 + 24);
  *(void *)(v6 + 16) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v6 = v7;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  return a1;
}

void sub_21696ABC4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v28 = 0;
  uint64_t v6 = sub_21696A690((int8x8_t *)v5, (char *)a2, &v28);
  if (*(unsigned char *)(v28 + 50)) {
    goto LABEL_2;
  }
  LOBYTE(v20[0]) = 0;
  long long v7 = (void *)sub_2168520EC((atomic_ullong *)(v5 + 192), v20);
  uint64_t v8 = v7[1];
  if (*v7 == v8) {
    goto LABEL_2;
  }
  unint64_t v10 = *(uint64_t **)(v8 - 16);
  unint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v10)
    {
      sub_216784EC4(v9);
LABEL_2:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
      return;
    }
  }
  else if (!v10)
  {
    goto LABEL_2;
  }
  uint64_t v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(v15, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v15 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
  }
  *(_OWORD *)long long v20 = *(_OWORD *)v15;
  uint64_t v11 = v16;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v21 = v11;
  std::string __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v12 = sub_21696AFEC(v10, (uint64_t)&v25, v20);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (!v12) {
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 32))(v20, v6, a2);
    uint64_t v13 = v27 + 40;
    if (*(char *)(v27 + 63) < 0) {
      operator delete(*(void **)v13);
    }
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v20;
    *(void *)(v13 + 16) = v21;
    goto LABEL_25;
  }
  operator delete(v15[0]);
  if (v12) {
    goto LABEL_22;
  }
LABEL_25:
  if (*(char *)(v27 + 63) < 0)
  {
    sub_216778F24((unsigned char *)a3, *(void **)(v27 + 40), *(void *)(v27 + 48));
  }
  else
  {
    long long v14 = *(_OWORD *)(v27 + 40);
    *(void *)(a3 + 16) = *(void *)(v27 + 56);
    *(_OWORD *)a3 = v14;
  }
  uint64_t v27 = 0;
  sub_21685C048(&v25);
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_21696ADEC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 72) = 0;
  sub_21685C048((void *)(v2 - 88));
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21696AE30(void *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(a2, (uint64_t)v16);
  *(_OWORD *)long long v20 = *(_OWORD *)v16;
  uint64_t v21 = v17;
  v16[1] = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  if (v19 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
  }
  (*(void (**)(void **__return_ptr, void *, void **))(*a1 + 112))(v16, a1, v20);
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10] - v3;
  if (!v4)
  {
LABEL_23:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v4 >> 4;
  if (v17 >= 0) {
    long long v7 = (void *)HIBYTE(v17);
  }
  else {
    long long v7 = v16[1];
  }
  if (v17 >= 0) {
    uint64_t v8 = v16;
  }
  else {
    uint64_t v8 = (void **)v16[0];
  }
  while (1)
  {
    uint64_t v9 = *(void *)(v3 + 16 * v5);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 135);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = (void *)*(unsigned __int8 *)(v9 + 135);
    }
    else {
      uint64_t v11 = *(void **)(v9 + 120);
    }
    if (v11 != v7) {
      goto LABEL_22;
    }
    int v12 = (const void **)(v9 + 112);
    if ((v10 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v9 + 135)) {
      goto LABEL_24;
    }
    uint64_t v13 = v8;
    while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v13)
    {
      int v12 = (const void **)((char *)v12 + 1);
      uint64_t v13 = (void **)((char *)v13 + 1);
      if (!--v10) {
        goto LABEL_24;
      }
    }
LABEL_22:
    if (++v5 == v6) {
      goto LABEL_23;
    }
  }
  if (memcmp(*v12, v8, *(void *)(v9 + 120))) {
    goto LABEL_22;
  }
LABEL_24:
  uint64_t v14 = sub_21696B92C(v9);
LABEL_25:
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  return v14;
}

void sub_21696AFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21696AFEC(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_21696B06C(a1, 1, a3, (uint64_t)(a3 + 24), a2, 1, (uint64_t (*)(uint64_t, unsigned char *, uint64_t))sub_21696B3A8, 0);
}

uint64_t sub_21696B06C(uint64_t *a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned char *, uint64_t), void *a8)
{
  if ((char)a3[23] >= 0) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = *(unsigned char **)a3;
  }
  char v14 = *v13;
  if (*v13)
  {
    unint64_t v15 = 0;
    uint64_t v16 = v13 + 1;
    do
    {
      unint64_t v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      int v17 = *v16++;
      char v14 = v17;
    }
    while (v17);
  }
  else
  {
    unint64_t v15 = 0;
  }
  unint64_t v33 = 0;
  uint64_t v18 = *a1;
  __dmb(0xBu);
  uint64_t v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_21696B578((uint64_t)&v35, (uint64_t)a1, v18 & v15, 0);
    unint64_t v19 = v37 + 16;
    do
      unint64_t v19 = *(void *)v19;
    while (v19 >= 0x40 && !sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2) {
      break;
    }
    if (v19)
    {
      uint64_t v20 = 1;
LABEL_18:
      uint64_t v21 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_54;
      }
      goto LABEL_19;
    }
    unint64_t v28 = *a1;
    __dmb(0xBu);
    if (v18 == v28 || !sub_21686CF40((uint64_t)a1, v15, v18, v28))
    {
      sub_21685C048(&v35);
      return 0;
    }
LABEL_39:
    sub_21685C048(&v35);
    uint64_t v18 = v28;
  }
  if (v19)
  {
LABEL_15:
    uint64_t v20 = 0;
    goto LABEL_18;
  }
  if (!a8) {
    a8 = (void *)a7(v32, a3, a4);
  }
  if (!v36)
  {
    char v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v35) & 1) == 0)
    {
      unint64_t v19 = v37 + 16;
      while (1)
      {
        unint64_t v19 = *(void *)v19;
        if (v19 < 0x40) {
          break;
        }
        if (sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v36) {
            goto LABEL_15;
          }
          uint64_t v20 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v35, 3uLL);
          char v36 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  unint64_t v28 = *a1;
  __dmb(0xBu);
  if (v18 != v28)
  {
    if (!sub_21686CF40((uint64_t)a1, v15, v18, v28)) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  unint64_t v28 = v18;
LABEL_41:
  unint64_t v33 = sub_21686C9CC((uint64_t)a1, v37, a8, v28);
  uint64_t v21 = 0;
  uint64_t v20 = 1;
  unint64_t v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_54:
    sub_21685C048(&v35);
    goto LABEL_49;
  }
LABEL_19:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v22 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        uint64_t v24 = (atomic_ullong *)v35;
        unint64_t v35 = 0;
        if (v36)
        {
LABEL_24:
          atomic_ullong v25 = *v24;
          unint64_t v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v27 = v25;
            atomic_compare_exchange_strong(v24, (unint64_t *)&v27, v26);
            if (v27 == v25) {
              break;
            }
            if (atomic_fetch_add_explicit(v24, 0, memory_order_relaxed) != v25)
            {
              sched_yield();
              goto LABEL_24;
            }
          }
        }
        else
        {
          atomic_fetch_add(v24, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v28 = *a1;
        __dmb(0xBu);
        a8 = (void *)v21;
        goto LABEL_39;
      }
    }
  }
  sub_21685C048(&v35);
  *(void *)(a5 + 16) = v19;
  *(void *)(a5 + 24) = v15;
LABEL_49:
  if (v33) {
    sub_21696B3AC(a1, v33, v32, 0);
  }
  if (v21) {
    sub_21696B544((uint64_t)a1, v21);
  }
  return v20;
}

void sub_21696B388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21696B3AC(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    uint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    long long v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    uint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      int v12 = v7 + 2;
      do
      {
        *(v12 - sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
        void *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_21696B534(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_21696B544(uint64_t a1, uint64_t a2)
{
  sub_21677B5A0(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_21696B578(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_216851020(a3);
  unint64_t v9 = *(void *)(a2 + 8 * v8 + 8) + 24 * (a3 - ((1 << v8) & 0xFFFFFFFFFFFFFFFELL));
  *(void *)(a1 + 16) = v9;
  uint64_t v10 = *(void *)(v9 + 16);
  __dmb(0xBu);
  if (v10 == 3
    && (uint64_t v11 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v11)))
  {
    *(void *)a1 = v11;
    uint64_t v12 = *(void *)(a1 + 16);
    if (*(void *)(v12 + 16) == 3) {
      sub_21696B66C(a2, v12, a3);
    }
  }
  else
  {
    uint64_t v13 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v13;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v13);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v13);
    }
  }
  return a1;
}

void sub_21696B658(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_21696B66C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_21696B578(&v20, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v22 + 16);
  unint64_t v12 = *(void *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v14 = *(unsigned char **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0) {
        uint64_t v14 = (unsigned char *)(v12 + 16);
      }
      char v15 = *v14;
      if (*v14)
      {
        unint64_t v16 = 0;
        int64x2_t v17 = v14 + 1;
        do
        {
          unint64_t v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          int v18 = *v17++;
          char v15 = v18;
        }
        while (v18);
      }
      else
      {
        unint64_t v16 = 0;
      }
      if ((v16 & v13) != a3) {
        break;
      }
      if (v21 || (char v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v20) & 1) != 0))
      {
        unint64_t *v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_31:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v20);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v22 + 16);
        unint64_t v12 = *(void *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v20);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_21685C048(&v20);
}

void sub_21696B82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21696B840(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v7 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x40);
  v12[0] = v7;
  v12[1] = a1;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  unsigned int v8 = (unsigned char *)(v7 + 16);
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v8, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(v7 + 32) = *((void *)a2 + 2);
    *(_OWORD *)unsigned int v8 = v9;
  }
  long long v10 = *a3;
  *(void *)(v7 + 56) = *((void *)a3 + 2);
  *(_OWORD *)(v7 + 40) = v10;
  *((void *)a3 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  v12[0] = 0;
  sub_21696B8F8(v12, v6);
  return v7;
}

void sub_21696B8E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_21696B8F8(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_21696B92C(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 24));
  if (v2) {
    return *(void *)(a1 + 96);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78((uint64_t *)a1);
  if ((pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v3) & 1) == 0)
  {
    long long v10 = "ar/resolver.cpp";
    uint64_t v11 = "Create";
    uint64_t v12 = 378;
    uint64_t v13 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArPackageResolver, pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase>"
          "::Create() [Resolveruint64_t Type = pxrInternal__aapl__pxrReserved__::ArPackageResolver, ResolverTypeFactory = pxrInter"
          "nal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase]";
    char v14 = 0;
    sub_2168E5D78((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin %s for %s");
    goto LABEL_7;
  }
  char v6 = sub_21696BB74((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16), v4, v5);
  if (!v6 || (uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6)) == 0)
  {
    long long v10 = "ar/resolver.cpp";
    uint64_t v11 = "Create";
    uint64_t v12 = 392;
    uint64_t v13 = "std::unique_ptr<ResolverType> pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PluginResolver<pxrInte"
          "rnal__aapl__pxrReserved__::ArPackageResolver, pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase>"
          "::Create() [Resolveruint64_t Type = pxrInternal__aapl__pxrReserved__::ArPackageResolver, ResolverTypeFactory = pxrInter"
          "nal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase]";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16));
    sub_2168E5D78((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to manufacture asset resolver %s from plugin %s");
LABEL_7:
    uint64_t v7 = 0;
  }
  std::mutex::lock((std::mutex *)(a1 + 32));
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 24));
  if (v8)
  {
    std::mutex::unlock((std::mutex *)(a1 + 32));
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    sub_21696BB2C((void *)(a1 + 96), v7);
    atomic_store(1u, (unsigned __int8 *)(a1 + 24));
    std::mutex::unlock((std::mutex *)(a1 + 32));
  }
  return *(void *)(a1 + 96);
}

void sub_21696BB04(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_21696BB2C(void *a1, uint64_t a2)
{
  sub_21696BBE4(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_21696BB74(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void *sub_21696BBE4(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C754270;
  v4[1] = 0;
  v4[2] = 0;
  double v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21696BC3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_21732453C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21696BC58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21696BC80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21696BCB0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7542C0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t *sub_21696BCF4(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  if ((sub_21696BE24(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_21696BEB0((uint64_t)a1, v8);
    long long v9 = (void **)v8;
    sub_216932118(&v9);
  }
  uint64_t result = sub_21696C44C((uint64_t **)a1);
  uint64_t v5 = *result;
  *uint64_t result = *a2;
  *a2 = v5;
  uint64_t v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  uint64_t v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_21696BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216932118((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_21696BDA4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    uint64_t v6 = 16 * a2;
    uint64_t v7 = (void *)(v4 + 8);
    do
    {
      *uint64_t v7 = 0;
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_21696BE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_21696BE24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021745AD68 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7542D8);
}

uint64_t sub_21696BEB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C7542E8;
  sub_21696C3D4((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21696BF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21696BF80(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_21696BFA0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21696C0C8(a1);
}

uint64_t sub_21696BFB0()
{
  return 1;
}

unint64_t sub_21696BFB8(uint64_t *a1)
{
  return sub_21696C128((uint64_t)&v2, *a1);
}

uint64_t sub_21696BFE0(pxrInternal__aapl__pxrReserved__::VtValue ***a1, uint64_t *a2, char *a3)
{
  return sub_21696C1B4(*a1, *a2, a3);
}

uint64_t sub_21696BFEC(pxrInternal__aapl__pxrReserved__::VtValue ***a1, uint64_t a2, char *a3)
{
  return sub_21696C1B4(*a1, a2, a3);
}

uint64_t sub_21696BFF8()
{
  return 0;
}

void *sub_21696C004(uint64_t **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtStreamOut(*a1, a2);
}

void *sub_21696C00C()
{
  return &unk_26C7542D8;
}

uint64_t sub_21696C018()
{
  return 0;
}

uint64_t sub_21696C020()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_21696C02C()
{
  return 0;
}

uint64_t sub_21696C034()
{
  return 0;
}

BOOL sub_21696C03C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021745AD68 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21696C078(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7542D8, a2, a3);
}

void *sub_21696C09C()
{
  return &unk_26C7542D8;
}

uint64_t sub_21696C0A8(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21696C0B0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *a1;
  *(void *)(a2 + 8) = &off_26C7542E8;
  return sub_21696C3D4((unsigned int **)a2, v2);
}

uint64_t *sub_21696C0C8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)v2;
    sub_216932118(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_21696C128(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = v3 >> 4;
    do
    {
      uint64_t Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v2);
      if (v4)
      {
        uint64_t v5 = Hash + ((unint64_t)(Hash + v5 + (Hash + v5) * (Hash + v5)) >> 1);
      }
      else
      {
        int v4 = 1;
        uint64_t v5 = Hash;
      }
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v2 + 16);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

uint64_t sub_21696C1B4(pxrInternal__aapl__pxrReserved__::VtValue **a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = *(std::type_info **)a2;
  if (v4 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v3, v5, a3);
    if (!result) {
      break;
    }
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v3 + 16);
    ++v5;
  }
  while (v3 != v4);
  return result;
}

uint64_t *sub_21696C228(uint64_t **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x20uLL);
    int v4 = *a1;
    *((void *)v3 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    sub_21696C2C8(v3, *v4, v4[1], (v4[1] - *v4) >> 4);
    atomic_store(0, v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v6 = *a1;
    *a1 = (uint64_t *)v3;
    sub_21696C0C8((uint64_t *)&v6);
  }
  return *a1;
}

void sub_21696C2B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21696C2C8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = (void *)sub_21696C350((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21696C330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216932118(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_21696C350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_2168EE4C4((void *)(a4 + v7), (void *)(a2 + v7));
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_21696C3B0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_2168EE084(v4 + v2);
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21696C3D4(unsigned int **a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x20uLL);
  *((void *)v4 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  uint64_t result = sub_21696C2C8(v4, *a2, a2[1], (a2[1] - *a2) >> 4);
  atomic_store(0, v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_21696C438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21696C44C(uint64_t **a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21696C228(a1);
}

void **sub_21696C4E0(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    void v15[4] = result;
    if (v12) {
      uint64_t v13 = (char *)sub_216782ED8((uint64_t)result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v14 = &v13[24 * v9];
    v15[0] = v13;
    v15[1] = v14;
    void v15[3] = &v13[24 * v12];
    *(void *)char v14 = 0;
    *((void *)v14 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(_OWORD *)char v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v15[2] = v14 + 24;
    sub_21696C62C(a1, v15);
    unsigned __int8 v8 = (void *)a1[1];
    uint64_t result = sub_2167ADE8C(v15);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unsigned __int8 v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_21696C618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167ADE8C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21696C62C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21696C6A4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21696C6A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_21696C748((uint64_t)v11);
  return v9;
}

uint64_t sub_21696C748(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2167ADE40(a1);
  }
  return a1;
}

uint64_t sub_21696C780(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int64x2_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  char v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_21695F340(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  sub_21696C62C(a1, v14);
  uint64_t v12 = a1[1];
  sub_2167ADE8C(v14);
  return v12;
}

void sub_21696C884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167ADE8C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21696C898(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21696C8F4(void *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = (result - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (result != v6)
        uint64_t result = sub_2168EE084(result - 16);
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return sub_21696C974(a1, v5);
  }
  return result;
}

uint64_t sub_21696C974(void *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = 16 * a2;
      char v15 = (void *)(v7 + 8);
      v7 += 16 * a2;
      do
      {
        *char v15 = 0;
        v15 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v23 = result;
    if (v12) {
      long long v13 = (char *)sub_216787EE0(result, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64x2_t v19 = v13;
    uint64x2_t v20 = &v13[16 * v10];
    uint64_t v22 = &v13[16 * v12];
    uint64_t v16 = 16 * a2;
    int64x2_t v17 = v20 + 8;
    int v18 = &v20[16 * a2];
    do
    {
      *int64x2_t v17 = 0;
      v17 += 2;
      v16 -= 16;
    }
    while (v16);
    char v21 = v18;
    sub_21696CA88(a1, &v19);
    return sub_21696CB10((uint64_t)&v19);
  }
  return result;
}

void sub_21696CA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21696CB10((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21696CA88(void *a1, void *a2)
{
  uint64_t v5 = (void *)*a1;
  unint64_t v4 = (void *)a1[1];
  uint64_t result = (void *)a2[1];
  while (v4 != v5)
  {
    v4 -= 2;
    uint64_t result = sub_2168EDFA8(result - 2, v4);
  }
  a2[1] = result;
  uint64_t v7 = (void *)*a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21696CB10(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    sub_2168EE084(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21696CB60(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_120_DispatchingResolver6_CacheEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7543A0);
}

unint64_t *sub_21696CBE4(unint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  uint64_t v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *result;
    uint64_t v9 = (uint64_t)((uint64_t)v5 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v11 = v4 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v23 = result + 2;
    if (v12 >> 60) {
      sub_21677CA1C();
    }
    long long v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      unint64_t v8 = *v3;
      uint64_t v5 = (void *)v3[1];
    }
    if (v5 == (void *)v8)
    {
      int64x2_t v18 = vdupq_n_s64(v8);
      uint64_t v16 = &v13[16 * v9];
    }
    else
    {
      uint64_t v16 = &v13[16 * v9];
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v16 - sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v17;
        v16 -= 16;
        *uint64_t v5 = 0;
        v5[1] = 0;
      }
      while (v5 != (void *)v8);
      int64x2_t v18 = *(int64x2_t *)v3;
    }
    uint64_t v7 = v14 + 16;
    unint64_t *v3 = (unint64_t)v16;
    v3[1] = (unint64_t)(v14 + 16);
    int64x2_t v21 = v18;
    unint64_t v19 = v3[2];
    uint64_t v3[2] = (unint64_t)&v13[16 * v12];
    unint64_t v22 = v19;
    uint64_t v20 = v18.i64[0];
    uint64_t result = (unint64_t *)sub_21696A2C0((uint64_t)&v20);
  }
  else
  {
    *uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 2;
  }
  v3[1] = (unint64_t)v7;
  return result;
}

void sub_21696CD30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7543C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21696CD50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7543C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21696CD94(uint64_t a1)
{
  return sub_21696CDB8((unint64_t *)(a1 + 24));
}

uint64_t sub_21696CDB8(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (void *)(v9 + 16);
      unint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          void *v11 = *v10;
          sub_21696B544((uint64_t)a1, (uint64_t)v10);
          unint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_21696CE88((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_21696CE88(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  void *v4 = 0;
  return result;
}

void *sub_21696CED8(void *a1, void *a2)
{
  a1[1] = &off_26C754400;
  uint64_t result = operator new(0x18uLL);
  uint64_t v5 = a2[1];
  *(void *)uint64_t result = *a2;
  *((void *)result + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  atomic_store(0, (unsigned int *)result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_21696CF3C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_21696CF5C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21696D11C(a1);
}

uint64_t sub_21696CF6C()
{
  return 0;
}

uint64_t sub_21696CF74(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL sub_21696CF98(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL sub_21696CFB4(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t *sub_21696CFCC(uint64_t *result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*result + 16));
  if (v1 != 1)
  {
    uint64_t v2 = result;
    unint64_t v3 = operator new(0x18uLL);
    unint64_t v4 = (void *)*v2;
    uint64_t v5 = *(void *)(*v2 + 8);
    *(void *)unint64_t v3 = *(void *)*v2;
    *((void *)v3 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v5;
    if (v5)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      unint64_t v4 = (void *)*v2;
    }
    atomic_store(0, (unsigned int *)v3 + 4);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 4, 1u, memory_order_relaxed);
    unint64_t v6 = v4;
    *uint64_t v2 = (uint64_t)v3;
    return sub_21696D11C((uint64_t *)&v6);
  }
  return result;
}

uint64_t sub_21696D050()
{
  return 0;
}

uint64_t sub_21696D05C()
{
  return std::ostream::operator<<();
}

void *sub_21696D070()
{
  return &unk_26C7543A0;
}

uint64_t sub_21696D07C()
{
  return 0;
}

uint64_t sub_21696D084()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_21696D090()
{
  return 0;
}

uint64_t sub_21696D098()
{
  return 0;
}

BOOL sub_21696D0A0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__110shared_ptrIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_120_DispatchingResolver6_CacheEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21696D0D4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7543A0, a2, a3);
}

void *sub_21696D0F8()
{
  return &unk_26C7543A0;
}

uint64_t sub_21696D104(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21696D10C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = 0;
  return sub_21696CED8(a2, v2);
}

uint64_t *sub_21696D11C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      sub_216784EC4(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void **sub_21696D174(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216782ED8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 24 * v6;
    sub_21696C62C(a1, v7);
    return sub_2167ADE8C(v7);
  }
  return result;
}

void sub_21696D214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167ADE8C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21696D228(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v8 + 1) > 0x492492492492492) {
      sub_21677CB10();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_21696D450(v12, v11, v8, (uint64_t)(a1 + 2));
    sub_21696D3BC(v13, a2);
    v13 += 56;
    sub_21696D4D0(a1, v12);
    uint64_t v7 = a1[1];
    uint64_t result = sub_21696D57C((uint64_t)v12);
  }
  else
  {
    uint64_t result = (uint64_t)sub_21696D3BC(a1[1], a2);
    uint64_t v7 = v5 + 56;
    a1[1] = v5 + 56;
  }
  a1[1] = v7;
  return result;
}

void sub_21696D334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21696D57C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_21696D354(atomic_ullong *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  unint64_t v3 = v2;
  uint64_t v4 = 0;
  v2[1] = 0;
  uint64_t v2[2] = 0;
  *uint64_t v2 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    uint64_t v6 = (void *)*v2;
    if (*v3)
    {
      v3[1] = v6;
      operator delete(v6);
    }
    operator delete(v3);
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

char *sub_21696D3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t result = sub_216812BD8((char *)(a1 + 24), *(long long **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  __int16 v7 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(a1 + 48) = v7;
  return result;
}

void sub_21696D438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324248(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21696D450(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x492492492492493) {
      sub_21677CA1C();
    }
    __int16 v7 = (char *)operator new(56 * a2);
  }
  else
  {
    __int16 v7 = 0;
  }
  uint64_t v8 = &v7[56 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[56 * a2];
  return a1;
}

uint64_t *sub_21696D4D0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      uint64_t v8 = *(void *)(v2 + v5 - 40);
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 40) = v8;
      *(void *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      LOWORD(v8) = *(_WORD *)(v2 + v5 - 8);
      *(unsigned char *)(v6 - 6) = *(unsigned char *)(v2 + v5 - 6);
      *(_WORD *)(v6 - 8) = v8;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *uint64_t result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21696D57C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3 == v2) {
      break;
    }
    *(void *)(a1 + 16) = v3 - 56;
    sub_21696D5D0(v3 - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_21696D5D0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_216782F20(&v3);
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *sub_21696D648(void *a1, void *a2, void *a3)
{
  if (a2 == a3)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = a2;
    do
    {
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      ++v3;
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return sub_21696DB54(a1, a2, a3, v3);
}

void sub_21696D6A0(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(void *)a1, a2);
  uint64_t v4 = sub_2168E79D8(a2);
  if (!(v5 & 1 | (unint64_t)v4) && sub_216969824(0))
  {
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = TypeName;
    }
    else {
      uint64_t v9 = *(void *)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to find plugin for %s", v7, v8, v9);
  }
}

void sub_21696D724(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21696D774@<X0>(pxrInternal__aapl__pxrReserved__::TfType *a1@<X0>, pxrInternal__aapl__pxrReserved__::PlugRegistry *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::GetRoot(a1);
  if (*(void *)a2 == *(void *)result)
  {
    a3->n128_u8[0] = 0;
    a3[1].n128_u8[0] = 0;
    return result;
  }
  sub_21696D6A0(a2, &v33);
  BOOL v7 = sub_2168E79D8(&v33);
  if (!(v8 & 1 | (unint64_t)v7))
  {
    a3->n128_u8[0] = 0;
    a3[1].n128_u8[0] = 0;
    goto LABEL_44;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v33);
  pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v9, a2, (uint64_t *)&v23);
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  }
  __p.n128_u8[0] = 0;
  char v29 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue((uint64_t)&v23, (uint64_t)EmptyString, (uint64_t *)&__p, (uint64_t)&v31);
  if (v29 && __p.n128_u64[1]) {
    sub_216784EC4((std::__shared_weak_count *)__p.n128_u64[1]);
  }
  sub_216812ED4((uint64_t)&v23, v24);
  if (!v32)
  {
LABEL_29:
    pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes(a2, v12, v13, &v23);
    unint64_t v19 = (char *)v23;
    uint64_t v20 = v24;
    if (v23 == v24)
    {
LABEL_36:
      if (v19)
      {
        int8x16_t v24 = v19;
        operator delete(v19);
      }
      a3->n128_u8[0] = 0;
      a3[1].n128_u8[0] = 0;
    }
    else
    {
      while (1)
      {
        sub_21696D774(&__p, a1, v19);
        sub_21696F64C(&v31, &__p);
        if (v29 && __p.n128_u64[1]) {
          sub_216784EC4((std::__shared_weak_count *)__p.n128_u64[1]);
        }
        if (v32) {
          break;
        }
        v19 += 8;
        if (v19 == v20)
        {
          unint64_t v19 = (char *)v23;
          goto LABEL_36;
        }
      }
      *a3 = v31;
      __n128 v31 = 0uLL;
      a3[1].n128_u8[0] = 1;
      if (v23)
      {
        int8x16_t v24 = (char *)v23;
        operator delete(v23);
      }
    }
    goto LABEL_41;
  }
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v31))
  {
    uint64_t v23 = "ar/resolver.cpp";
    int8x16_t v24 = "_FindMetadataValueOnTypeOrBase";
    uint64_t v25 = 217;
    unint64_t v26 = "JsOptionalValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FindMetadataValueOnTypeOrBase(const "
          "TfToken &, const TfType &) [T = BOOL]";
    char v27 = 0;
    unint64_t v14 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      long long v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        long long v15 = *(const char **)v15;
      }
    }
    else
    {
      long long v15 = "";
    }
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    if (*(char *)(TypeName + 23) >= 0) {
      long long v17 = (const char *)TypeName;
    }
    else {
      long long v17 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v21, 0);
    pxrInternal__aapl__pxrReserved__::JsValue::GetTypeName((pxrInternal__aapl__pxrReserved__::JsValue *)v21, &__p);
    if (v30 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (__n128 *)__p.n128_u64[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' metadata for %s must be a %s.", v15, v17, (const char *)p_p);
    if (v30 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v22) {
      sub_216784EC4(v22);
    }
    goto LABEL_29;
  }
  a3->n128_u8[0] = 0;
  a3[1].n128_u8[0] = 0;
  if (v32)
  {
    *a3 = v31;
    __n128 v31 = 0uLL;
    a3[1].n128_u8[0] = 1;
LABEL_41:
    if (v32 && v31.n128_u64[1]) {
      sub_216784EC4((std::__shared_weak_count *)v31.n128_u64[1]);
    }
  }
LABEL_44:
  uint64_t result = v34;
  if (v34)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_21696DA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,char a22,int a23,__int16 a24,char a25)
{
  if (SHIBYTE(a23) < 0) {
    operator delete(__p);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (*(unsigned char *)(v25 - 80))
  {
    char v27 = *(std::__shared_weak_count **)(v25 - 88);
    if (v27) {
      sub_216784EC4(v27);
    }
  }
  unint64_t v28 = *(atomic_uint **)(v25 - 56);
  if (v28)
  {
    if (atomic_fetch_add_explicit(v28 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v28 + 8))(v28);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_21696DB54(void *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = (void *)*a1;
  if (a4 <= (v8 - *a1) >> 3)
  {
    unint64_t v13 = (uint64_t)(a1[1] - (void)v9) >> 3;
    if (v13 >= a4)
    {
      uint64_t result = sub_21696DCF0(a2, a3, v9);
      a1[1] = v15;
    }
    else
    {
      uint64_t v16 = a2;
      sub_21680F304(&v16, v13);
      unint64_t v14 = v16;
      sub_21696DCF0(a2, v16, (void *)*a1);
      return (void *)sub_21696DC98((uint64_t)a1, v14, a3);
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_21677CACC(a1, v11);
    return (void *)sub_21696DC98((uint64_t)a1, a2, a3);
  }
  return result;
}

uint64_t sub_21696DC98(uint64_t result, void *a2, void *a3)
{
  unint64_t v3 = *(void **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      void *v3 = a2[4];
      uint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          char v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          char v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

void *sub_21696DCF0(void *result, void *a2, void *a3)
{
  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      unint64_t v3 = (void *)result[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          unint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)result[2];
          BOOL v5 = *v4 == (void)result;
          uint64_t result = v4;
        }
        while (!v5);
      }
      ++a3;
      uint64_t result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

uint64_t sub_21696DD48(uint64_t result, pxrInternal__aapl__pxrReserved__::TfType *a2, uint64_t a3, char a4)
{
  unint64_t v8 = result;
  while (2)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v8 = (unint64_t)v10;
          unint64_t v11 = a2;
          uint64_t v12 = a2 - v10;
          uint64_t v13 = (a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
                uint64_t v157 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v8);
                int v158 = *(char *)(v157 + 23);
                int v159 = *(char *)(TypeName + 23);
                if (v159 >= 0) {
                  size_t v160 = *(unsigned __int8 *)(TypeName + 23);
                }
                else {
                  size_t v160 = *(void *)(TypeName + 8);
                }
                if (v159 >= 0) {
                  long long v161 = (const void *)TypeName;
                }
                else {
                  long long v161 = *(const void **)TypeName;
                }
                if (v158 >= 0) {
                  size_t v162 = *(unsigned __int8 *)(v157 + 23);
                }
                else {
                  size_t v162 = *(void *)(v157 + 8);
                }
                if (v158 >= 0) {
                  double v163 = (const void *)v157;
                }
                else {
                  double v163 = *(const void **)v157;
                }
                if (v162 >= v160) {
                  size_t v164 = v160;
                }
                else {
                  size_t v164 = v162;
                }
                uint64_t result = memcmp(v161, v163, v164);
                BOOL v165 = v160 < v162;
                if (result) {
                  BOOL v165 = (int)result < 0;
                }
                if (v165)
                {
                  uint64_t v166 = *(void *)v8;
                  *(void *)unint64_t v8 = *(void *)v9;
                  *(void *)uint64_t v9 = v166;
                }
                break;
              case 3:
                uint64_t result = sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), v9);
                break;
              case 4:
                uint64_t result = sub_21696F48C((pxrInternal__aapl__pxrReserved__::TfType *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 16), v9);
                break;
              case 5:
                uint64_t result = sub_21696ED20((pxrInternal__aapl__pxrReserved__::TfType *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 24), v9);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v167 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8);
            BOOL v169 = (pxrInternal__aapl__pxrReserved__::TfType *)v8 == a2 || v167 == a2;
            if (a4)
            {
              if (!v169)
              {
                uint64_t v170 = 0;
                uint64_t v171 = (void *)v8;
                do
                {
                  uint64_t v172 = (pxrInternal__aapl__pxrReserved__::TfType *)v171;
                  uint64_t v171 = v167;
                  uint64_t v173 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v167);
                  uint64_t v174 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v172);
                  int v175 = *(char *)(v174 + 23);
                  int v176 = *(char *)(v173 + 23);
                  if (v176 >= 0) {
                    size_t v177 = *(unsigned __int8 *)(v173 + 23);
                  }
                  else {
                    size_t v177 = *(void *)(v173 + 8);
                  }
                  if (v176 >= 0) {
                    uint64_t v178 = (const void *)v173;
                  }
                  else {
                    uint64_t v178 = *(const void **)v173;
                  }
                  if (v175 >= 0) {
                    size_t v179 = *(unsigned __int8 *)(v174 + 23);
                  }
                  else {
                    size_t v179 = *(void *)(v174 + 8);
                  }
                  if (v175 >= 0) {
                    uint64_t v180 = (const void *)v174;
                  }
                  else {
                    uint64_t v180 = *(const void **)v174;
                  }
                  if (v179 >= v177) {
                    size_t v181 = v177;
                  }
                  else {
                    size_t v181 = v179;
                  }
                  uint64_t result = memcmp(v178, v180, v181);
                  BOOL v182 = v177 < v179;
                  if (result) {
                    BOOL v182 = (int)result < 0;
                  }
                  if (v182)
                  {
                    uint64_t v316 = *v171;
                    uint64_t v183 = v170;
                    while (1)
                    {
                      *(void *)(v8 + v183 + 8) = *(void *)(v8 + v183);
                      if (!v183) {
                        break;
                      }
                      v183 -= 8;
                      uint64_t v184 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                      uint64_t v185 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v183 + v8));
                      int v186 = *(char *)(v185 + 23);
                      int v187 = *(char *)(v184 + 23);
                      if (v187 >= 0) {
                        size_t v188 = *(unsigned __int8 *)(v184 + 23);
                      }
                      else {
                        size_t v188 = *(void *)(v184 + 8);
                      }
                      if (v187 >= 0) {
                        uint64_t v189 = (const void *)v184;
                      }
                      else {
                        uint64_t v189 = *(const void **)v184;
                      }
                      if (v186 >= 0) {
                        size_t v190 = *(unsigned __int8 *)(v185 + 23);
                      }
                      else {
                        size_t v190 = *(void *)(v185 + 8);
                      }
                      if (v186 >= 0) {
                        long long v191 = (const void *)v185;
                      }
                      else {
                        long long v191 = *(const void **)v185;
                      }
                      if (v190 >= v188) {
                        size_t v192 = v188;
                      }
                      else {
                        size_t v192 = v190;
                      }
                      uint64_t result = memcmp(v189, v191, v192);
                      BOOL v193 = v188 < v190;
                      if (result) {
                        BOOL v193 = (int)result < 0;
                      }
                      if (!v193)
                      {
                        uint64_t v194 = (void *)(v8 + v183 + 8);
                        goto LABEL_330;
                      }
                    }
                    uint64_t v194 = (void *)v8;
LABEL_330:
                    *uint64_t v194 = v316;
                  }
                  uint64_t v167 = (pxrInternal__aapl__pxrReserved__::TfType *)(v171 + 1);
                  v170 += 8;
                }
                while (v171 + 1 != (void *)a2);
              }
            }
            else if (!v169)
            {
              v289 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 - 8);
              do
              {
                v290 = (pxrInternal__aapl__pxrReserved__::TfType *)v8;
                unint64_t v8 = (unint64_t)v167;
                uint64_t v291 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v167);
                uint64_t v292 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v290);
                int v293 = *(char *)(v292 + 23);
                int v294 = *(char *)(v291 + 23);
                if (v294 >= 0) {
                  size_t v295 = *(unsigned __int8 *)(v291 + 23);
                }
                else {
                  size_t v295 = *(void *)(v291 + 8);
                }
                if (v294 >= 0) {
                  v296 = (const void *)v291;
                }
                else {
                  v296 = *(const void **)v291;
                }
                if (v293 >= 0) {
                  size_t v297 = *(unsigned __int8 *)(v292 + 23);
                }
                else {
                  size_t v297 = *(void *)(v292 + 8);
                }
                if (v293 >= 0) {
                  v298 = (const void *)v292;
                }
                else {
                  v298 = *(const void **)v292;
                }
                if (v297 >= v295) {
                  size_t v299 = v295;
                }
                else {
                  size_t v299 = v297;
                }
                uint64_t result = memcmp(v296, v298, v299);
                BOOL v300 = v295 < v297;
                if (result) {
                  BOOL v300 = (int)result < 0;
                }
                if (v300)
                {
                  uint64_t v316 = *(void *)v8;
                  v301 = v289;
                  do
                  {
                    *((void *)v301 + 2) = *((void *)v301 + 1);
                    uint64_t v302 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                    uint64_t v303 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v301);
                    int v304 = *(char *)(v303 + 23);
                    int v305 = *(char *)(v302 + 23);
                    if (v305 >= 0) {
                      size_t v306 = *(unsigned __int8 *)(v302 + 23);
                    }
                    else {
                      size_t v306 = *(void *)(v302 + 8);
                    }
                    if (v305 >= 0) {
                      v307 = (const void *)v302;
                    }
                    else {
                      v307 = *(const void **)v302;
                    }
                    if (v304 >= 0) {
                      size_t v308 = *(unsigned __int8 *)(v303 + 23);
                    }
                    else {
                      size_t v308 = *(void *)(v303 + 8);
                    }
                    if (v304 >= 0) {
                      v309 = (const void *)v303;
                    }
                    else {
                      v309 = *(const void **)v303;
                    }
                    if (v308 >= v306) {
                      size_t v310 = v306;
                    }
                    else {
                      size_t v310 = v308;
                    }
                    uint64_t result = memcmp(v307, v309, v310);
                    BOOL v311 = v306 < v308;
                    if (result) {
                      BOOL v311 = (int)result < 0;
                    }
                    v301 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v301 - 8);
                  }
                  while (v311);
                  *((void *)v301 + 2) = v316;
                }
                uint64_t v167 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8);
                v289 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v289 + 8);
              }
              while ((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((pxrInternal__aapl__pxrReserved__::TfType *)v8 != a2)
            {
              unint64_t v312 = v12;
              int64_t v195 = (unint64_t)(v13 - 2) >> 1;
              int64_t v196 = v195;
              do
              {
                int64_t v197 = v196;
                if (v195 >= v196)
                {
                  uint64_t v198 = (2 * v196) | 1;
                  unint64_t v199 = v8 + 8 * v198;
                  if (2 * v196 + 2 < v13)
                  {
                    uint64_t v200 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v198));
                    uint64_t v201 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v199 + 8));
                    int v202 = *(char *)(v201 + 23);
                    int v203 = *(char *)(v200 + 23);
                    if (v203 >= 0) {
                      size_t v204 = *(unsigned __int8 *)(v200 + 23);
                    }
                    else {
                      size_t v204 = *(void *)(v200 + 8);
                    }
                    if (v203 >= 0) {
                      uint64_t v205 = (const void *)v200;
                    }
                    else {
                      uint64_t v205 = *(const void **)v200;
                    }
                    if (v202 >= 0) {
                      size_t v206 = *(unsigned __int8 *)(v201 + 23);
                    }
                    else {
                      size_t v206 = *(void *)(v201 + 8);
                    }
                    if (v202 >= 0) {
                      unint64_t v207 = (const void *)v201;
                    }
                    else {
                      unint64_t v207 = *(const void **)v201;
                    }
                    if (v206 >= v204) {
                      size_t v208 = v204;
                    }
                    else {
                      size_t v208 = v206;
                    }
                    int v209 = memcmp(v205, v207, v208);
                    BOOL v210 = v204 < v206;
                    if (v209) {
                      BOOL v210 = v209 < 0;
                    }
                    if (v210)
                    {
                      v199 += 8;
                      uint64_t v198 = 2 * v197 + 2;
                    }
                  }
                  long long v211 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v197);
                  uint64_t v212 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v199);
                  uint64_t v213 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v211);
                  int v214 = *(char *)(v213 + 23);
                  int v215 = *(char *)(v212 + 23);
                  if (v215 >= 0) {
                    size_t v216 = *(unsigned __int8 *)(v212 + 23);
                  }
                  else {
                    size_t v216 = *(void *)(v212 + 8);
                  }
                  if (v215 >= 0) {
                    v217 = (const void *)v212;
                  }
                  else {
                    v217 = *(const void **)v212;
                  }
                  if (v214 >= 0) {
                    size_t v218 = *(unsigned __int8 *)(v213 + 23);
                  }
                  else {
                    size_t v218 = *(void *)(v213 + 8);
                  }
                  if (v214 >= 0) {
                    v219 = (const void *)v213;
                  }
                  else {
                    v219 = *(const void **)v213;
                  }
                  if (v218 >= v216) {
                    size_t v220 = v216;
                  }
                  else {
                    size_t v220 = v218;
                  }
                  uint64_t result = memcmp(v217, v219, v220);
                  BOOL v221 = v216 < v218;
                  if (result) {
                    BOOL v221 = (int)result < 0;
                  }
                  if (!v221)
                  {
                    int64_t v313 = v197;
                    uint64_t v316 = *(void *)v211;
                    do
                    {
                      uint64_t v222 = (pxrInternal__aapl__pxrReserved__::TfType *)v199;
                      *(void *)long long v211 = *(void *)v199;
                      if (v195 < v198) {
                        break;
                      }
                      uint64_t v223 = (2 * v198) | 1;
                      unint64_t v199 = v8 + 8 * v223;
                      uint64_t v224 = 2 * v198 + 2;
                      if (v224 < v13)
                      {
                        uint64_t v225 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v223));
                        uint64_t v226 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v199 + 8));
                        int v227 = *(char *)(v226 + 23);
                        int v228 = *(char *)(v225 + 23);
                        int64_t v229 = v195;
                        if (v228 >= 0) {
                          size_t v230 = *(unsigned __int8 *)(v225 + 23);
                        }
                        else {
                          size_t v230 = *(void *)(v225 + 8);
                        }
                        if (v228 >= 0) {
                          v231 = (const void *)v225;
                        }
                        else {
                          v231 = *(const void **)v225;
                        }
                        if (v227 >= 0) {
                          size_t v232 = *(unsigned __int8 *)(v226 + 23);
                        }
                        else {
                          size_t v232 = *(void *)(v226 + 8);
                        }
                        if (v227 >= 0) {
                          v233 = (const void *)v226;
                        }
                        else {
                          v233 = *(const void **)v226;
                        }
                        if (v232 >= v230) {
                          size_t v234 = v230;
                        }
                        else {
                          size_t v234 = v232;
                        }
                        int v235 = memcmp(v231, v233, v234);
                        BOOL v4 = v230 >= v232;
                        int64_t v195 = v229;
                        BOOL v236 = !v4;
                        if (v235) {
                          BOOL v236 = v235 < 0;
                        }
                        if (v236)
                        {
                          v199 += 8;
                          uint64_t v223 = v224;
                        }
                      }
                      uint64_t v237 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v199);
                      uint64_t v238 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                      int v239 = *(char *)(v238 + 23);
                      int v240 = *(char *)(v237 + 23);
                      if (v240 >= 0) {
                        size_t v241 = *(unsigned __int8 *)(v237 + 23);
                      }
                      else {
                        size_t v241 = *(void *)(v237 + 8);
                      }
                      if (v240 >= 0) {
                        unsigned int v242 = (const void *)v237;
                      }
                      else {
                        unsigned int v242 = *(const void **)v237;
                      }
                      if (v239 >= 0) {
                        size_t v243 = *(unsigned __int8 *)(v238 + 23);
                      }
                      else {
                        size_t v243 = *(void *)(v238 + 8);
                      }
                      if (v239 >= 0) {
                        long long v244 = (const void *)v238;
                      }
                      else {
                        long long v244 = *(const void **)v238;
                      }
                      if (v243 >= v241) {
                        size_t v245 = v241;
                      }
                      else {
                        size_t v245 = v243;
                      }
                      uint64_t result = memcmp(v242, v244, v245);
                      BOOL v246 = v241 < v243;
                      if (result) {
                        BOOL v246 = (int)result < 0;
                      }
                      long long v211 = v222;
                      uint64_t v198 = v223;
                    }
                    while (!v246);
                    *(void *)uint64_t v222 = v316;
                    int64_t v197 = v313;
                  }
                }
                int64_t v196 = v197 - 1;
              }
              while (v197);
              uint64_t v247 = v312 >> 3;
              do
              {
                uint64_t v248 = 0;
                uint64_t v314 = *(void *)v8;
                v249 = (void *)v8;
                do
                {
                  uint64_t v250 = (uint64_t)&v249[v248 + 1];
                  uint64_t v251 = (2 * v248) | 1;
                  uint64_t v252 = 2 * v248 + 2;
                  if (v252 < v247)
                  {
                    uint64_t v253 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v249[v248 + 1]);
                    uint64_t v254 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v250 + 8));
                    int v255 = *(char *)(v254 + 23);
                    int v256 = *(char *)(v253 + 23);
                    if (v256 >= 0) {
                      size_t v257 = *(unsigned __int8 *)(v253 + 23);
                    }
                    else {
                      size_t v257 = *(void *)(v253 + 8);
                    }
                    if (v256 >= 0) {
                      v258 = (const void *)v253;
                    }
                    else {
                      v258 = *(const void **)v253;
                    }
                    if (v255 >= 0) {
                      size_t v259 = *(unsigned __int8 *)(v254 + 23);
                    }
                    else {
                      size_t v259 = *(void *)(v254 + 8);
                    }
                    if (v255 >= 0) {
                      v260 = (const void *)v254;
                    }
                    else {
                      v260 = *(const void **)v254;
                    }
                    if (v259 >= v257) {
                      size_t v261 = v257;
                    }
                    else {
                      size_t v261 = v259;
                    }
                    uint64_t result = memcmp(v258, v260, v261);
                    BOOL v262 = v257 < v259;
                    if (result) {
                      BOOL v262 = (int)result < 0;
                    }
                    if (v262)
                    {
                      v250 += 8;
                      uint64_t v251 = v252;
                    }
                  }
                  void *v249 = *(void *)v250;
                  v249 = (void *)v250;
                  uint64_t v248 = v251;
                }
                while (v251 <= (uint64_t)((unint64_t)(v247 - 2) >> 1));
                v263 = (uint64_t *)((char *)a2 - 8);
                if ((pxrInternal__aapl__pxrReserved__::TfType *)v250 == (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8))
                {
                  *(void *)uint64_t v250 = v314;
                }
                else
                {
                  *(void *)uint64_t v250 = *v263;
                  uint64_t *v263 = v314;
                  uint64_t v264 = v250 - v8 + 8;
                  if (v264 >= 9)
                  {
                    unint64_t v265 = (((unint64_t)v264 >> 3) - 2) >> 1;
                    v266 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v265);
                    uint64_t v267 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v266);
                    uint64_t v268 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v250);
                    int v269 = *(char *)(v268 + 23);
                    int v270 = *(char *)(v267 + 23);
                    if (v270 >= 0) {
                      size_t v271 = *(unsigned __int8 *)(v267 + 23);
                    }
                    else {
                      size_t v271 = *(void *)(v267 + 8);
                    }
                    if (v270 >= 0) {
                      v272 = (const void *)v267;
                    }
                    else {
                      v272 = *(const void **)v267;
                    }
                    if (v269 >= 0) {
                      size_t v273 = *(unsigned __int8 *)(v268 + 23);
                    }
                    else {
                      size_t v273 = *(void *)(v268 + 8);
                    }
                    if (v269 >= 0) {
                      v274 = (const void *)v268;
                    }
                    else {
                      v274 = *(const void **)v268;
                    }
                    if (v273 >= v271) {
                      size_t v275 = v271;
                    }
                    else {
                      size_t v275 = v273;
                    }
                    uint64_t result = memcmp(v272, v274, v275);
                    BOOL v276 = v271 < v273;
                    if (result) {
                      BOOL v276 = (int)result < 0;
                    }
                    if (v276)
                    {
                      uint64_t v316 = *(void *)v250;
                      do
                      {
                        v277 = v266;
                        *(void *)uint64_t v250 = *(void *)v266;
                        if (!v265) {
                          break;
                        }
                        unint64_t v265 = (v265 - 1) >> 1;
                        v266 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * v265);
                        uint64_t v278 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v266);
                        uint64_t v279 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
                        int v280 = *(char *)(v279 + 23);
                        int v281 = *(char *)(v278 + 23);
                        if (v281 >= 0) {
                          size_t v282 = *(unsigned __int8 *)(v278 + 23);
                        }
                        else {
                          size_t v282 = *(void *)(v278 + 8);
                        }
                        if (v281 >= 0) {
                          v283 = (const void *)v278;
                        }
                        else {
                          v283 = *(const void **)v278;
                        }
                        if (v280 >= 0) {
                          size_t v284 = *(unsigned __int8 *)(v279 + 23);
                        }
                        else {
                          size_t v284 = *(void *)(v279 + 8);
                        }
                        if (v280 >= 0) {
                          v285 = (const void *)v279;
                        }
                        else {
                          v285 = *(const void **)v279;
                        }
                        if (v284 >= v282) {
                          size_t v286 = v282;
                        }
                        else {
                          size_t v286 = v284;
                        }
                        uint64_t result = memcmp(v283, v285, v286);
                        BOOL v287 = v282 < v284;
                        if (result) {
                          BOOL v287 = (int)result < 0;
                        }
                        uint64_t v250 = (uint64_t)v277;
                      }
                      while (v287);
                      *(void *)v277 = v316;
                    }
                  }
                }
                a2 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8);
              }
              while (v247-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            sub_21696EF6C(v15, (pxrInternal__aapl__pxrReserved__::TfType *)v8, v9);
          }
          else
          {
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)v8, v15, v9);
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v15 - 8), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 16));
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 16), (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 + 8 * v14), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 24));
            unint64_t v11 = a2;
            sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v15 - 8), v15, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8 + 8 * v14));
            uint64_t v16 = *(void *)v8;
            *(void *)unint64_t v8 = *(void *)v15;
            *(void *)uint64_t v15 = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v8 - 8));
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v8);
          int v19 = *(char *)(v18 + 23);
          int v20 = *(char *)(v17 + 23);
          if (v20 >= 0) {
            size_t v21 = *(unsigned __int8 *)(v17 + 23);
          }
          else {
            size_t v21 = *(void *)(v17 + 8);
          }
          if (v20 >= 0) {
            unint64_t v22 = (const void *)v17;
          }
          else {
            unint64_t v22 = *(const void **)v17;
          }
          if (v19 >= 0) {
            size_t v23 = *(unsigned __int8 *)(v18 + 23);
          }
          else {
            size_t v23 = *(void *)(v18 + 8);
          }
          if (v19 >= 0) {
            int8x16_t v24 = (const void *)v18;
          }
          else {
            int8x16_t v24 = *(const void **)v18;
          }
          if (v23 >= v21) {
            size_t v25 = v21;
          }
          else {
            size_t v25 = v23;
          }
          int v26 = memcmp(v22, v24, v25);
          BOOL v27 = v21 < v23;
          if (v26) {
            BOOL v27 = v26 < 0;
          }
          if (v27) {
            break;
          }
          uint64_t v316 = *(void *)v8;
          uint64_t v91 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
          uint64_t v92 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
          int v93 = *(char *)(v92 + 23);
          int v94 = *(char *)(v91 + 23);
          if (v94 >= 0) {
            size_t v95 = *(unsigned __int8 *)(v91 + 23);
          }
          else {
            size_t v95 = *(void *)(v91 + 8);
          }
          if (v94 >= 0) {
            float64x2_t v96 = (const void *)v91;
          }
          else {
            float64x2_t v96 = *(const void **)v91;
          }
          if (v93 >= 0) {
            size_t v97 = *(unsigned __int8 *)(v92 + 23);
          }
          else {
            size_t v97 = *(void *)(v92 + 8);
          }
          if (v93 >= 0) {
            uint64_t v98 = (const void *)v92;
          }
          else {
            uint64_t v98 = *(const void **)v92;
          }
          if (v97 >= v95) {
            size_t v99 = v95;
          }
          else {
            size_t v99 = v97;
          }
          uint64_t result = memcmp(v96, v98, v99);
          BOOL v100 = v95 < v97;
          if (result) {
            BOOL v100 = (int)result < 0;
          }
          if (v100)
          {
            uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)v8;
            do
            {
              uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 8);
              uint64_t v101 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v102 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
              int v103 = *(char *)(v102 + 23);
              int v104 = *(char *)(v101 + 23);
              if (v104 >= 0) {
                size_t v105 = *(unsigned __int8 *)(v101 + 23);
              }
              else {
                size_t v105 = *(void *)(v101 + 8);
              }
              if (v104 >= 0) {
                uint64_t v106 = (const void *)v101;
              }
              else {
                uint64_t v106 = *(const void **)v101;
              }
              if (v103 >= 0) {
                size_t v107 = *(unsigned __int8 *)(v102 + 23);
              }
              else {
                size_t v107 = *(void *)(v102 + 8);
              }
              if (v103 >= 0) {
                uint64_t v108 = (const void *)v102;
              }
              else {
                uint64_t v108 = *(const void **)v102;
              }
              if (v107 >= v105) {
                size_t v109 = v105;
              }
              else {
                size_t v109 = v107;
              }
              uint64_t result = memcmp(v106, v108, v109);
              BOOL v110 = v105 < v107;
              if (result) {
                BOOL v110 = (int)result < 0;
              }
            }
            while (!v110);
          }
          else
          {
            uint64_t v111 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + 8);
            do
            {
              uint64_t v10 = v111;
              if (v111 >= v11) {
                break;
              }
              uint64_t v112 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v113 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
              int v114 = *(char *)(v113 + 23);
              int v115 = *(char *)(v112 + 23);
              if (v115 >= 0) {
                size_t v116 = *(unsigned __int8 *)(v112 + 23);
              }
              else {
                size_t v116 = *(void *)(v112 + 8);
              }
              if (v115 >= 0) {
                std::string::size_type v117 = (const void *)v112;
              }
              else {
                std::string::size_type v117 = *(const void **)v112;
              }
              if (v114 >= 0) {
                size_t v118 = *(unsigned __int8 *)(v113 + 23);
              }
              else {
                size_t v118 = *(void *)(v113 + 8);
              }
              if (v114 >= 0) {
                uint8x8_t v119 = (const void *)v113;
              }
              else {
                uint8x8_t v119 = *(const void **)v113;
              }
              if (v118 >= v116) {
                size_t v120 = v116;
              }
              else {
                size_t v120 = v118;
              }
              uint64_t result = memcmp(v117, v119, v120);
              BOOL v121 = (int)result < 0;
              if (!result) {
                BOOL v121 = v116 < v118;
              }
              uint64_t v111 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 8);
            }
            while (!v121);
          }
          float64x2_t v122 = v11;
          if (v10 < v11)
          {
            float64x2_t v122 = v11;
            do
            {
              float64x2_t v122 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v122 - 8);
              uint64_t v123 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v124 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v122);
              int v125 = *(char *)(v124 + 23);
              int v126 = *(char *)(v123 + 23);
              if (v126 >= 0) {
                size_t v127 = *(unsigned __int8 *)(v123 + 23);
              }
              else {
                size_t v127 = *(void *)(v123 + 8);
              }
              if (v126 >= 0) {
                unint64_t v128 = (const void *)v123;
              }
              else {
                unint64_t v128 = *(const void **)v123;
              }
              if (v125 >= 0) {
                size_t v129 = *(unsigned __int8 *)(v124 + 23);
              }
              else {
                size_t v129 = *(void *)(v124 + 8);
              }
              if (v125 >= 0) {
                float64x2_t v130 = (const void *)v124;
              }
              else {
                float64x2_t v130 = *(const void **)v124;
              }
              if (v129 >= v127) {
                size_t v131 = v127;
              }
              else {
                size_t v131 = v129;
              }
              uint64_t result = memcmp(v128, v130, v131);
              BOOL v132 = v127 < v129;
              if (result) {
                BOOL v132 = (int)result < 0;
              }
            }
            while (v132);
          }
          while (v10 < v122)
          {
            uint64_t v133 = *(void *)v10;
            *(void *)uint64_t v10 = *(void *)v122;
            *(void *)float64x2_t v122 = v133;
            do
            {
              uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 + 8);
              uint64_t v134 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v135 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v10);
              int v136 = *(char *)(v135 + 23);
              int v137 = *(char *)(v134 + 23);
              if (v137 >= 0) {
                size_t v138 = *(unsigned __int8 *)(v134 + 23);
              }
              else {
                size_t v138 = *(void *)(v134 + 8);
              }
              if (v137 >= 0) {
                uint64_t v139 = (const void *)v134;
              }
              else {
                uint64_t v139 = *(const void **)v134;
              }
              if (v136 >= 0) {
                size_t v140 = *(unsigned __int8 *)(v135 + 23);
              }
              else {
                size_t v140 = *(void *)(v135 + 8);
              }
              if (v136 >= 0) {
                unint64_t v141 = (const void *)v135;
              }
              else {
                unint64_t v141 = *(const void **)v135;
              }
              if (v140 >= v138) {
                size_t v142 = v138;
              }
              else {
                size_t v142 = v140;
              }
              int v143 = memcmp(v139, v141, v142);
              BOOL v144 = v138 < v140;
              if (v143) {
                BOOL v144 = v143 < 0;
              }
            }
            while (!v144);
            do
            {
              float64x2_t v122 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v122 - 8);
              uint64_t v145 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              uint64_t v146 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v122);
              int v147 = *(char *)(v146 + 23);
              int v148 = *(char *)(v145 + 23);
              if (v148 >= 0) {
                size_t v149 = *(unsigned __int8 *)(v145 + 23);
              }
              else {
                size_t v149 = *(void *)(v145 + 8);
              }
              if (v148 >= 0) {
                unint64_t v150 = (const void *)v145;
              }
              else {
                unint64_t v150 = *(const void **)v145;
              }
              if (v147 >= 0) {
                size_t v151 = *(unsigned __int8 *)(v146 + 23);
              }
              else {
                size_t v151 = *(void *)(v146 + 8);
              }
              if (v147 >= 0) {
                uint64_t v152 = (const void *)v146;
              }
              else {
                uint64_t v152 = *(const void **)v146;
              }
              if (v151 >= v149) {
                size_t v153 = v149;
              }
              else {
                size_t v153 = v151;
              }
              uint64_t result = memcmp(v150, v152, v153);
              BOOL v154 = v149 < v151;
              if (result) {
                BOOL v154 = (int)result < 0;
              }
            }
            while (v154);
          }
          uint64_t v155 = (uint64_t *)((char *)v10 - 8);
          BOOL v4 = (unint64_t)v10 - 8 >= v8;
          BOOL v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 - 8) == (pxrInternal__aapl__pxrReserved__::TfType *)v8;
          if ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v10 - 8) != (pxrInternal__aapl__pxrReserved__::TfType *)v8) {
            *(void *)unint64_t v8 = *v155;
          }
          a4 = 0;
          *uint64_t v155 = v316;
        }
        uint64_t v28 = 0;
        uint64_t v316 = *(void *)v8;
        do
        {
          v28 += 8;
          uint64_t v29 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v28 + v8));
          uint64_t v30 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
          int v31 = *(char *)(v30 + 23);
          int v32 = *(char *)(v29 + 23);
          if (v32 >= 0) {
            size_t v33 = *(unsigned __int8 *)(v29 + 23);
          }
          else {
            size_t v33 = *(void *)(v29 + 8);
          }
          if (v32 >= 0) {
            uint64_t v34 = (const void *)v29;
          }
          else {
            uint64_t v34 = *(const void **)v29;
          }
          if (v31 >= 0) {
            size_t v35 = *(unsigned __int8 *)(v30 + 23);
          }
          else {
            size_t v35 = *(void *)(v30 + 8);
          }
          if (v31 >= 0) {
            char v36 = (const void *)v30;
          }
          else {
            char v36 = *(const void **)v30;
          }
          if (v35 >= v33) {
            size_t v37 = v33;
          }
          else {
            size_t v37 = v35;
          }
          int v38 = memcmp(v34, v36, v37);
          BOOL v39 = v33 < v35;
          if (v38) {
            BOOL v39 = v38 < 0;
          }
        }
        while (v39);
        uint64_t v40 = (pxrInternal__aapl__pxrReserved__::TfType *)(v8 + v28);
        uint64_t v41 = v11;
        if (v28 == 8)
        {
          uint64_t v41 = v11;
          do
          {
            if (v40 >= v41) {
              break;
            }
            uint64_t v41 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v41 - 8);
            uint64_t v53 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v41);
            uint64_t v54 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
            int v55 = *(char *)(v54 + 23);
            int v56 = *(char *)(v53 + 23);
            if (v56 >= 0) {
              size_t v57 = *(unsigned __int8 *)(v53 + 23);
            }
            else {
              size_t v57 = *(void *)(v53 + 8);
            }
            if (v56 >= 0) {
              float64x2_t v58 = (const void *)v53;
            }
            else {
              float64x2_t v58 = *(const void **)v53;
            }
            if (v55 >= 0) {
              size_t v59 = *(unsigned __int8 *)(v54 + 23);
            }
            else {
              size_t v59 = *(void *)(v54 + 8);
            }
            if (v55 >= 0) {
              unint64_t v60 = (const void *)v54;
            }
            else {
              unint64_t v60 = *(const void **)v54;
            }
            if (v59 >= v57) {
              size_t v61 = v57;
            }
            else {
              size_t v61 = v59;
            }
            int v62 = memcmp(v58, v60, v61);
            BOOL v63 = v57 < v59;
            if (v62) {
              BOOL v63 = v62 < 0;
            }
          }
          while (!v63);
        }
        else
        {
          do
          {
            uint64_t v41 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v41 - 8);
            uint64_t v42 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v41);
            uint64_t v43 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
            int v44 = *(char *)(v43 + 23);
            int v45 = *(char *)(v42 + 23);
            if (v45 >= 0) {
              size_t v46 = *(unsigned __int8 *)(v42 + 23);
            }
            else {
              size_t v46 = *(void *)(v42 + 8);
            }
            if (v45 >= 0) {
              uint64_t v47 = (const void *)v42;
            }
            else {
              uint64_t v47 = *(const void **)v42;
            }
            if (v44 >= 0) {
              size_t v48 = *(unsigned __int8 *)(v43 + 23);
            }
            else {
              size_t v48 = *(void *)(v43 + 8);
            }
            if (v44 >= 0) {
              uint64_t v49 = (const void *)v43;
            }
            else {
              uint64_t v49 = *(const void **)v43;
            }
            if (v48 >= v46) {
              size_t v50 = v46;
            }
            else {
              size_t v50 = v48;
            }
            int v51 = memcmp(v47, v49, v50);
            BOOL v52 = v46 < v48;
            if (v51) {
              BOOL v52 = v51 < 0;
            }
          }
          while (!v52);
        }
        if (v40 >= v41)
        {
          uint64_t v89 = (uint64_t *)((char *)v40 - 8);
        }
        else
        {
          float64x2_t v64 = v40;
          float64x2_t v65 = v41;
          do
          {
            uint64_t v66 = *(void *)v64;
            *(void *)float64x2_t v64 = *(void *)v65;
            *(void *)float64x2_t v65 = v66;
            do
            {
              float64x2_t v64 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v64 + 8);
              uint64_t v67 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v64);
              uint64_t v68 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              int v69 = *(char *)(v68 + 23);
              int v70 = *(char *)(v67 + 23);
              if (v70 >= 0) {
                size_t v71 = *(unsigned __int8 *)(v67 + 23);
              }
              else {
                size_t v71 = *(void *)(v67 + 8);
              }
              if (v70 >= 0) {
                long long v72 = (const void *)v67;
              }
              else {
                long long v72 = *(const void **)v67;
              }
              if (v69 >= 0) {
                size_t v73 = *(unsigned __int8 *)(v68 + 23);
              }
              else {
                size_t v73 = *(void *)(v68 + 8);
              }
              if (v69 >= 0) {
                uint64_t v74 = (const void *)v68;
              }
              else {
                uint64_t v74 = *(const void **)v68;
              }
              if (v73 >= v71) {
                size_t v75 = v71;
              }
              else {
                size_t v75 = v73;
              }
              int v76 = memcmp(v72, v74, v75);
              BOOL v77 = v71 < v73;
              if (v76) {
                BOOL v77 = v76 < 0;
              }
            }
            while (v77);
            do
            {
              float64x2_t v65 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v65 - 8);
              uint64_t v78 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v65);
              uint64_t v79 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v316);
              int v80 = *(char *)(v79 + 23);
              int v81 = *(char *)(v78 + 23);
              if (v81 >= 0) {
                size_t v82 = *(unsigned __int8 *)(v78 + 23);
              }
              else {
                size_t v82 = *(void *)(v78 + 8);
              }
              if (v81 >= 0) {
                std::string::size_type v83 = (const void *)v78;
              }
              else {
                std::string::size_type v83 = *(const void **)v78;
              }
              if (v80 >= 0) {
                size_t v84 = *(unsigned __int8 *)(v79 + 23);
              }
              else {
                size_t v84 = *(void *)(v79 + 8);
              }
              if (v80 >= 0) {
                float64x2_t v85 = (const void *)v79;
              }
              else {
                float64x2_t v85 = *(const void **)v79;
              }
              if (v84 >= v82) {
                size_t v86 = v82;
              }
              else {
                size_t v86 = v84;
              }
              int v87 = memcmp(v83, v85, v86);
              BOOL v88 = v82 < v84;
              if (v87) {
                BOOL v88 = v87 < 0;
              }
            }
            while (!v88);
          }
          while (v64 < v65);
          uint64_t v89 = (uint64_t *)((char *)v64 - 8);
        }
        if (v89 != (uint64_t *)v8) {
          *(void *)unint64_t v8 = *v89;
        }
        *uint64_t v89 = v316;
        if (v40 >= v41) {
          break;
        }
LABEL_135:
        uint64_t result = sub_21696DD48(v8, v89, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)(v89 + 1);
      }
      BOOL v90 = sub_21696F1B0((uint64_t *)v8, (pxrInternal__aapl__pxrReserved__::TfType *)v89);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfType *)(v89 + 1);
      uint64_t result = sub_21696F1B0(v89 + 1, a2);
      if (result) {
        break;
      }
      if (!v90) {
        goto LABEL_135;
      }
    }
    a2 = (pxrInternal__aapl__pxrReserved__::TfType *)v89;
    if (!v90) {
      continue;
    }
    return result;
  }
}

uint64_t sub_21696ED20(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4, pxrInternal__aapl__pxrReserved__::TfType *a5)
{
  sub_21696F48C(a1, a2, a3, a4);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a5);
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a4);
  int v12 = *(char *)(v11 + 23);
  int v13 = *(char *)(TypeName + 23);
  if (v13 >= 0) {
    size_t v14 = *(unsigned __int8 *)(TypeName + 23);
  }
  else {
    size_t v14 = *(void *)(TypeName + 8);
  }
  if (v13 >= 0) {
    uint64_t v15 = (const void *)TypeName;
  }
  else {
    uint64_t v15 = *(const void **)TypeName;
  }
  if (v12 >= 0) {
    size_t v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    size_t v16 = *(void *)(v11 + 8);
  }
  if (v12 >= 0) {
    uint64_t v17 = (const void *)v11;
  }
  else {
    uint64_t v17 = *(const void **)v11;
  }
  if (v16 >= v14) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v16;
  }
  uint64_t result = memcmp(v15, v17, v18);
  BOOL v20 = v14 < v16;
  if (result) {
    BOOL v20 = (int)result < 0;
  }
  if (v20)
  {
    uint64_t v21 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v21;
    uint64_t v22 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a4);
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
    int v24 = *(char *)(v23 + 23);
    int v25 = *(char *)(v22 + 23);
    if (v25 >= 0) {
      size_t v26 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      size_t v26 = *(void *)(v22 + 8);
    }
    if (v25 >= 0) {
      BOOL v27 = (const void *)v22;
    }
    else {
      BOOL v27 = *(const void **)v22;
    }
    if (v24 >= 0) {
      size_t v28 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v28 = *(void *)(v23 + 8);
    }
    if (v24 >= 0) {
      uint64_t v29 = (const void *)v23;
    }
    else {
      uint64_t v29 = *(const void **)v23;
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    uint64_t result = memcmp(v27, v29, v30);
    BOOL v31 = v26 < v28;
    if (result) {
      BOOL v31 = (int)result < 0;
    }
    if (v31)
    {
      uint64_t v32 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v32;
      uint64_t v33 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
      uint64_t v34 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      int v35 = *(char *)(v34 + 23);
      int v36 = *(char *)(v33 + 23);
      if (v36 >= 0) {
        size_t v37 = *(unsigned __int8 *)(v33 + 23);
      }
      else {
        size_t v37 = *(void *)(v33 + 8);
      }
      if (v36 >= 0) {
        int v38 = (const void *)v33;
      }
      else {
        int v38 = *(const void **)v33;
      }
      if (v35 >= 0) {
        size_t v39 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        size_t v39 = *(void *)(v34 + 8);
      }
      if (v35 >= 0) {
        uint64_t v40 = (const void *)v34;
      }
      else {
        uint64_t v40 = *(const void **)v34;
      }
      if (v39 >= v37) {
        size_t v41 = v37;
      }
      else {
        size_t v41 = v39;
      }
      uint64_t result = memcmp(v38, v40, v41);
      BOOL v42 = v37 < v39;
      if (result) {
        BOOL v42 = (int)result < 0;
      }
      if (v42)
      {
        uint64_t v43 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v43;
        uint64_t v44 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
        uint64_t v45 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
        int v46 = *(char *)(v45 + 23);
        int v47 = *(char *)(v44 + 23);
        if (v47 >= 0) {
          size_t v48 = *(unsigned __int8 *)(v44 + 23);
        }
        else {
          size_t v48 = *(void *)(v44 + 8);
        }
        if (v47 >= 0) {
          uint64_t v49 = (const void *)v44;
        }
        else {
          uint64_t v49 = *(const void **)v44;
        }
        if (v46 >= 0) {
          size_t v50 = *(unsigned __int8 *)(v45 + 23);
        }
        else {
          size_t v50 = *(void *)(v45 + 8);
        }
        if (v46 >= 0) {
          int v51 = (const void *)v45;
        }
        else {
          int v51 = *(const void **)v45;
        }
        if (v50 >= v48) {
          size_t v52 = v48;
        }
        else {
          size_t v52 = v50;
        }
        uint64_t result = memcmp(v49, v51, v52);
        BOOL v53 = v48 < v50;
        if (result) {
          BOOL v53 = (int)result < 0;
        }
        if (v53)
        {
          uint64_t v54 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v54;
        }
      }
    }
  }
  return result;
}

uint64_t sub_21696EF6C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *this, pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
  int v8 = *(char *)(v7 + 23);
  int v9 = *(char *)(TypeName + 23);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(TypeName + 23);
  }
  else {
    size_t v10 = *(void *)(TypeName + 8);
  }
  if (v9 >= 0) {
    uint64_t v11 = (const void *)TypeName;
  }
  else {
    uint64_t v11 = *(const void **)TypeName;
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    size_t v12 = *(void *)(v7 + 8);
  }
  if (v8 >= 0) {
    int v13 = (const void *)v7;
  }
  else {
    int v13 = *(const void **)v7;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  else {
    BOOL v16 = v10 < v12;
  }
  uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
  uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
  int v19 = *(char *)(v18 + 23);
  int v20 = *(char *)(v17 + 23);
  if (v20 >= 0) {
    size_t v21 = *(unsigned __int8 *)(v17 + 23);
  }
  else {
    size_t v21 = *(void *)(v17 + 8);
  }
  if (v20 >= 0) {
    uint64_t v22 = (const void *)v17;
  }
  else {
    uint64_t v22 = *(const void **)v17;
  }
  if (v19 >= 0) {
    size_t v23 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    size_t v23 = *(void *)(v18 + 8);
  }
  if (v19 >= 0) {
    int v24 = (const void *)v18;
  }
  else {
    int v24 = *(const void **)v18;
  }
  if (v23 >= v21) {
    size_t v25 = v21;
  }
  else {
    size_t v25 = v23;
  }
  uint64_t result = memcmp(v22, v24, v25);
  BOOL v27 = (int)result < 0;
  if (!result) {
    BOOL v27 = v21 < v23;
  }
  if (v16)
  {
    uint64_t v28 = *(void *)a1;
    if (v27)
    {
      *(void *)a1 = *(void *)a3;
LABEL_78:
      *(void *)a3 = v28;
      return result;
    }
    *(void *)a1 = *(void *)this;
    *(void *)this = v28;
    uint64_t v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
    uint64_t v42 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
    int v43 = *(char *)(v42 + 23);
    int v44 = *(char *)(v41 + 23);
    if (v44 >= 0) {
      size_t v45 = *(unsigned __int8 *)(v41 + 23);
    }
    else {
      size_t v45 = *(void *)(v41 + 8);
    }
    if (v44 >= 0) {
      int v46 = (const void *)v41;
    }
    else {
      int v46 = *(const void **)v41;
    }
    if (v43 >= 0) {
      size_t v47 = *(unsigned __int8 *)(v42 + 23);
    }
    else {
      size_t v47 = *(void *)(v42 + 8);
    }
    if (v43 >= 0) {
      size_t v48 = (const void *)v42;
    }
    else {
      size_t v48 = *(const void **)v42;
    }
    if (v47 >= v45) {
      size_t v49 = v45;
    }
    else {
      size_t v49 = v47;
    }
    uint64_t result = memcmp(v46, v48, v49);
    BOOL v50 = v45 < v47;
    if (result) {
      BOOL v50 = (int)result < 0;
    }
    if (v50)
    {
      uint64_t v28 = *(void *)this;
      *(void *)this = *(void *)a3;
      goto LABEL_78;
    }
  }
  else if (v27)
  {
    uint64_t v29 = *(void *)this;
    *(void *)this = *(void *)a3;
    *(void *)a3 = v29;
    uint64_t v30 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
    uint64_t v31 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
    int v32 = *(char *)(v31 + 23);
    int v33 = *(char *)(v30 + 23);
    if (v33 >= 0) {
      size_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      size_t v34 = *(void *)(v30 + 8);
    }
    if (v33 >= 0) {
      int v35 = (const void *)v30;
    }
    else {
      int v35 = *(const void **)v30;
    }
    if (v32 >= 0) {
      size_t v36 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      size_t v36 = *(void *)(v31 + 8);
    }
    if (v32 >= 0) {
      size_t v37 = (const void *)v31;
    }
    else {
      size_t v37 = *(const void **)v31;
    }
    if (v36 >= v34) {
      size_t v38 = v34;
    }
    else {
      size_t v38 = v36;
    }
    uint64_t result = memcmp(v35, v37, v38);
    BOOL v39 = v34 < v36;
    if (result) {
      BOOL v39 = (int)result < 0;
    }
    if (v39)
    {
      uint64_t v40 = *(void *)a1;
      *(void *)a1 = *(void *)this;
      *(void *)this = v40;
    }
  }
  return result;
}

BOOL sub_21696F1B0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v4 = (a2 - (pxrInternal__aapl__pxrReserved__::TfType *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (uint64_t *)((char *)a2 - 8);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
      int v9 = *(char *)(v8 + 23);
      int v10 = *(char *)(TypeName + 23);
      if (v10 >= 0) {
        size_t v11 = *(unsigned __int8 *)(TypeName + 23);
      }
      else {
        size_t v11 = *(void *)(TypeName + 8);
      }
      if (v10 >= 0) {
        size_t v12 = (const void *)TypeName;
      }
      else {
        size_t v12 = *(const void **)TypeName;
      }
      if (v9 >= 0) {
        size_t v13 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        size_t v13 = *(void *)(v8 + 8);
      }
      if (v9 >= 0) {
        size_t v14 = (const void *)v8;
      }
      else {
        size_t v14 = *(const void **)v8;
      }
      if (v13 >= v11) {
        size_t v15 = v11;
      }
      else {
        size_t v15 = v13;
      }
      int v16 = memcmp(v12, v14, v15);
      BOOL v17 = v11 < v13;
      if (v16) {
        BOOL v17 = v16 < 0;
      }
      if (v17)
      {
        uint64_t v18 = *a1;
        *a1 = *v6;
        *BOOL v6 = v18;
      }
      return 1;
    case 3:
      sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 4:
      sub_21696F48C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    case 5:
      sub_21696ED20((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 8));
      return 1;
    default:
      int v19 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2);
      sub_21696EF6C((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 1), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 2));
      int v20 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v20);
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v19);
    int v25 = *(char *)(v24 + 23);
    int v26 = *(char *)(v23 + 23);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v27 = *(void *)(v23 + 8);
    }
    if (v26 >= 0) {
      uint64_t v28 = (const void *)v23;
    }
    else {
      uint64_t v28 = *(const void **)v23;
    }
    if (v25 >= 0) {
      size_t v29 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      size_t v29 = *(void *)(v24 + 8);
    }
    if (v25 >= 0) {
      uint64_t v30 = (const void *)v24;
    }
    else {
      uint64_t v30 = *(const void **)v24;
    }
    if (v29 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v29;
    }
    int v32 = memcmp(v28, v30, v31);
    BOOL v33 = v27 < v29;
    if (v32) {
      BOOL v33 = v32 < 0;
    }
    if (v33)
    {
      uint64_t v47 = *(void *)v20;
      uint64_t v34 = v21;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v34 + 24) = *(uint64_t *)((char *)a1 + v34 + 16);
        if (v34 == -16) {
          break;
        }
        uint64_t v35 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v47);
        uint64_t v36 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + v34 + 8));
        int v37 = *(char *)(v36 + 23);
        int v38 = *(char *)(v35 + 23);
        if (v38 >= 0) {
          size_t v39 = *(unsigned __int8 *)(v35 + 23);
        }
        else {
          size_t v39 = *(void *)(v35 + 8);
        }
        if (v38 >= 0) {
          uint64_t v40 = (const void *)v35;
        }
        else {
          uint64_t v40 = *(const void **)v35;
        }
        if (v37 >= 0) {
          size_t v41 = *(unsigned __int8 *)(v36 + 23);
        }
        else {
          size_t v41 = *(void *)(v36 + 8);
        }
        if (v37 >= 0) {
          uint64_t v42 = (const void *)v36;
        }
        else {
          uint64_t v42 = *(const void **)v36;
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        v34 -= 8;
        if (!v45)
        {
          int v46 = (uint64_t *)((char *)a1 + v34 + 24);
          goto LABEL_63;
        }
      }
      int v46 = a1;
LABEL_63:
      *int v46 = v47;
      if (++v22 == 8) {
        return (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8) == a2;
      }
    }
    int v19 = v20;
    v21 += 8;
    int v20 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v20 + 8);
    if (v20 == a2) {
      return 1;
    }
  }
}

uint64_t sub_21696F48C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4)
{
  sub_21696EF6C(a1, a2, a3);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a4);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
  int v10 = *(char *)(v9 + 23);
  int v11 = *(char *)(TypeName + 23);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(TypeName + 23);
  }
  else {
    size_t v12 = *(void *)(TypeName + 8);
  }
  if (v11 >= 0) {
    size_t v13 = (const void *)TypeName;
  }
  else {
    size_t v13 = *(const void **)TypeName;
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v14 = *(void *)(v9 + 8);
  }
  if (v10 >= 0) {
    size_t v15 = (const void *)v9;
  }
  else {
    size_t v15 = *(const void **)v9;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  uint64_t result = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (result) {
    BOOL v18 = (int)result < 0;
  }
  if (v18)
  {
    uint64_t v19 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v19;
    uint64_t v20 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
    uint64_t v21 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    int v22 = *(char *)(v21 + 23);
    int v23 = *(char *)(v20 + 23);
    if (v23 >= 0) {
      size_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      size_t v24 = *(void *)(v20 + 8);
    }
    if (v23 >= 0) {
      int v25 = (const void *)v20;
    }
    else {
      int v25 = *(const void **)v20;
    }
    if (v22 >= 0) {
      size_t v26 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      size_t v26 = *(void *)(v21 + 8);
    }
    if (v22 >= 0) {
      size_t v27 = (const void *)v21;
    }
    else {
      size_t v27 = *(const void **)v21;
    }
    if (v26 >= v24) {
      size_t v28 = v24;
    }
    else {
      size_t v28 = v26;
    }
    uint64_t result = memcmp(v25, v27, v28);
    BOOL v29 = v24 < v26;
    if (result) {
      BOOL v29 = (int)result < 0;
    }
    if (v29)
    {
      uint64_t v30 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v30;
      uint64_t v31 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      uint64_t v32 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
      int v33 = *(char *)(v32 + 23);
      int v34 = *(char *)(v31 + 23);
      if (v34 >= 0) {
        size_t v35 = *(unsigned __int8 *)(v31 + 23);
      }
      else {
        size_t v35 = *(void *)(v31 + 8);
      }
      if (v34 >= 0) {
        uint64_t v36 = (const void *)v31;
      }
      else {
        uint64_t v36 = *(const void **)v31;
      }
      if (v33 >= 0) {
        size_t v37 = *(unsigned __int8 *)(v32 + 23);
      }
      else {
        size_t v37 = *(void *)(v32 + 8);
      }
      if (v33 >= 0) {
        int v38 = (const void *)v32;
      }
      else {
        int v38 = *(const void **)v32;
      }
      if (v37 >= v35) {
        size_t v39 = v35;
      }
      else {
        size_t v39 = v37;
      }
      uint64_t result = memcmp(v36, v38, v39);
      BOOL v40 = v35 < v37;
      if (result) {
        BOOL v40 = (int)result < 0;
      }
      if (v40)
      {
        uint64_t v41 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v41;
      }
    }
  }
  return result;
}

__n128 sub_21696F64C(__n128 *a1, __n128 *a2)
{
  if (a1[1].n128_u8[0] == a2[1].n128_u8[0])
  {
    if (a1[1].n128_u8[0])
    {
      __n128 result = *a2;
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      uint64_t v4 = (std::__shared_weak_count *)a1->n128_u64[1];
      *a1 = result;
      if (v4)
      {
        sub_216784EC4(v4);
      }
    }
  }
  else if (a1[1].n128_u8[0])
  {
    BOOL v5 = (std::__shared_weak_count *)a1->n128_u64[1];
    if (v5) {
      sub_216784EC4(v5);
    }
    a1[1].n128_u8[0] = 0;
  }
  else
  {
    __n128 result = *a2;
    *a1 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a1[1].n128_u8[0] = 1;
  }
  return result;
}

uint64_t sub_21696F6DC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_216784EC4(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  unint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void *sub_21696F75C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C7544C8;
  return result;
}

void sub_21696F794(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7544C8;
}

unint64_t sub_21696F7BC()
{
  unint64_t result = atomic_load((unint64_t *)&qword_267B8EB20);
  if (!result) {
    unint64_t result = sub_21696D354(&qword_267B8EB20);
  }
  *(void *)(result + 8) -= 8;
  return result;
}

uint64_t sub_21696F7FC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C754528)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21696F83C()
{
  return &unk_26C754528;
}

pxrInternal__aapl__pxrReserved__::ArResolverContext *pxrInternal__aapl__pxrReserved__::ArResolverContext::ArResolverContext(pxrInternal__aapl__pxrReserved__::ArResolverContext *this, const pxrInternal__aapl__pxrReserved__::ArResolverContext **a2)
{
  *(void *)this = 0;
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)this + 2) = 0;
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  while (v3 != v4)
  {
    pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(this, v3);
    unint64_t v3 = (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)((char *)v3 + 24);
  }
  return this;
}

void sub_21696F8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216787968((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(pxrInternal__aapl__pxrReserved__::ArResolverContext *this, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  if (*(void *)a2 != v3)
  {
    do
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)v2 + 16))();
      sub_216970150(&v6, v5);
      pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add((uint64_t *)this, &v6);
      if (v6.n128_u64[1]) {
        sub_216784EC4((std::__shared_weak_count *)v6.n128_u64[1]);
      }
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_21696F95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::ArResolverContext::_Add(uint64_t *a1, __n128 *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (uint64_t *)a1[1];
  if (v4 != (uint64_t *)*a1)
  {
    unint64_t v6 = ((uint64_t)v4 - *a1) >> 4;
    do
    {
      uint64_t v7 = (uint64_t *)(v5 + 16 * (v6 >> 1));
      uint64_t v9 = *v7;
      uint64_t v8 = v7 + 2;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)a2->n128_u64[0] + 24))();
      BOOL v12 = sub_216970110(v10, v11);
      if (v12) {
        v6 += ~(v6 >> 1);
      }
      else {
        v6 >>= 1;
      }
      if (v12) {
        uint64_t v5 = (uint64_t)v8;
      }
    }
    while (v6);
    uint64_t v4 = (uint64_t *)v5;
    uint64_t v5 = a1[1];
  }
  if ((uint64_t *)v5 == v4
    || (uint64_t v13 = *v4,
        uint64_t v14 = (*(uint64_t (**)(void))(*(void *)a2->n128_u64[0] + 24))(),
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13),
        unint64_t result = (void *)strcmp((const char *)(*(void *)(v14 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v15 + 8) & 0x7FFFFFFFFFFFFFFFLL)), result))
  {
    return sub_21696FE2C(a1, v4, a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 - *a1 == a2[1] - *a2)
  {
    if (v2 == v3) {
      return 1;
    }
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *a2;
      uint64_t v9 = *(void *)(v3 + v6);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*a2 + v6) + 24))(*(void *)(*a2 + v6));
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
      if (strcmp((const char *)(*(void *)(v10 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v11 + 8) & 0x7FFFFFFFFFFFFFFFLL))|| ((*(uint64_t (**)(void, void))(**(void **)(v3 + v6) + 40))(*(void *)(v3 + v6), *(void *)(v8 + v6)) & 1) == 0)
      {
        break;
      }
      ++v7;
      uint64_t v3 = *a1;
      v6 += 16;
      if (v7 >= (a1[1] - *a1) >> 4) {
        return 1;
      }
    }
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::ArResolverContext::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (v2 - *a1) >> 4;
  uint64_t v5 = a2[1] - *a2;
  if (v4 < v5 >> 4) {
    return 1;
  }
  if (v4 > v5 >> 4 || v2 == v3) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *a2;
    uint64_t v14 = *(void *)(v3 + v11);
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(*a2 + v11) + 24))(*(void *)(*a2 + v11));
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
    int v17 = strcmp((const char *)(*(void *)(v15 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v16 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    uint64_t v18 = *(void *)(v3 + v11);
    if (v17) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)v18 + 32))(v18, *(void *)(v13 + v11));
    if ((v6 & 1) == 0
      && ((*(uint64_t (**)(void, void))(**(void **)(v3 + v11) + 40))(*(void *)(v3 + v11), *(void *)(v13 + v11)) & 1) != 0)
    {
      ++v12;
      uint64_t v3 = *a1;
      v11 += 16;
      if (v12 < (a1[1] - *a1) >> 4) {
        continue;
      }
    }
    return v6;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
  uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v13 + v11) + 24))(*(void *)(v13 + v11));

  return sub_216970110(v19, v20);
}

void *sub_21696FE2C(uint64_t *a1, void *a2, __n128 *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = ((uint64_t)a2 - *a1) >> 4;
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v15 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v15 >> 60) {
      sub_21677CB10();
    }
    uint64_t v16 = v10 - v7;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v24 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_216787EE0(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v20 = v18;
    uint64_t v21 = &v18[16 * v8];
    int v22 = v21;
    int v23 = &v18[16 * v17];
    sub_2169702C4(&v20, a3);
    unint64_t v4 = (void *)sub_2169703F0(a1, &v20, v4);
    sub_216788028(&v20);
  }
  else if (a2 == (void *)v6)
  {
    *(__n128 *)a2 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a1[1] = (uint64_t)(a2 + 2);
  }
  else
  {
    sub_216970260((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    uint64_t v12 = v7 + 16 * v8;
    __n128 v13 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    uint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
    *(__n128 *)uint64_t v12 = v13;
    if (v14) {
      sub_216784EC4(v14);
    }
  }
  return v4;
}

void sub_21696FF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::ArResolverContext::GetDebugString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type v2 = this->__r_.__value_.__r.__words[0];
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (this->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      (*(void (**)(void **__return_ptr))(**(void **)v2 + 56))(__p);
      if ((v8 & 0x80u) == 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      if ((v8 & 0x80u) == 0) {
        std::string::size_type v6 = v8;
      }
      else {
        std::string::size_type v6 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v5, v6);
      if ((char)v8 < 0) {
        operator delete(__p[0]);
      }
      this = std::string::append(a2, "\n");
      v2 += 16;
    }
    while (v2 != size);
  }
  return this;
}

void sub_216970040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Ar_GetDebugString(pxrInternal__aapl__pxrReserved__ *this, const std::type_info *a2, const void *a3)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v8 >= 0) {
    std::string::size_type v6 = __p;
  }
  else {
    std::string::size_type v6 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"<'%s' @ %p>", v4, v5, v6, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169700F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216970110(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0 && (v3 & 0x8000000000000000) != 0) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  }
  else {
    return v2 < v3;
  }
}

void *sub_216970150(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C7545B0;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2169701A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173243D0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169701C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2169701EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_21697021C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C754600)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216970260(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  char v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    char v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_2169704A4((uint64_t)&v11, a2, v7, v6);
}

__n128 sub_2169702C4(void *a1, __n128 *a2)
{
  unint64_t v4 = (long long *)a1[2];
  if (v4 == (long long *)a1[3])
  {
    uint64_t v5 = (long long *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (long long *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v30 = a1[4];
      uint64_t v15 = (char *)sub_216787EE0(v14, v13);
      unint64_t v17 = &v15[16 * (v13 >> 2)];
      unint64_t v18 = a1[1];
      uint64_t v19 = a1[2] - v18;
      if (v19)
      {
        uint64_t v20 = v19 >> 4;
        uint64_t v21 = &v17[v19 & 0xFFFFFFFFFFFFFFF0];
        uint64_t v22 = 16 * v20;
        int v23 = &v15[16 * (v13 >> 2)];
        do
        {
          *(_OWORD *)int v23 = *(_OWORD *)v18;
          v23 += 16;
          *(void *)unint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          v18 += 16;
          v22 -= 16;
        }
        while (v22);
        int64x2_t v24 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v24 = vdupq_n_s64(v18);
        uint64_t v21 = &v15[16 * (v13 >> 2)];
      }
      size_t v27 = (long long *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v28 = v24;
      uint64_t v25 = a1[3];
      a1[2] = v21;
      a1[3] = &v15[16 * v16];
      uint64_t v29 = v25;
      sub_216788028((void **)&v27);
      unint64_t v4 = (long long *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_2167B0AB0((uint64_t)&v27, v5, v4, (uint64_t)&v5[-(v10 >> 1)]);
      unint64_t v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  __n128 result = *a2;
  long long *v4 = (__int128)*a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a1[2] += 16;
  return result;
}

uint64_t sub_2169703F0(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216970508((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_21697059C(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_2169704A4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        sub_216784EC4(v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_216970508(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    long long v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *long long v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216970610((uint64_t)v12);
  return v10;
}

_OWORD *sub_21697059C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a4;
  long long v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  void v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  sub_21695F458((uint64_t)v6);
  return v4;
}

uint64_t sub_216970610(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder(pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *this, pxrInternal__aapl__pxrReserved__::ArResolver *a2, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a3)
{
  *(void *)this = a2;
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  sub_21695F340((void *)this + 1, *(void **)a3, *((void **)a3 + 1), (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
  *((void *)this + 5) = 0;
  if (*(void *)this) {
    pxrInternal__aapl__pxrReserved__::ArResolver::BindContext(*(void *)this);
  }
  return this;
}

void sub_2169706BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084(v2);
  sub_216787968((void ***)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder(pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *this, const pxrInternal__aapl__pxrReserved__::ArResolverContext *a2)
{
  *(void *)this = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  sub_21695F340((void *)this + 1, *(void **)a2, *((void **)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4);
  *((void *)this + 5) = 0;
  if (*(void *)this) {
    pxrInternal__aapl__pxrReserved__::ArResolver::BindContext(*(void *)this);
  }
  return this;
}

void sub_21697075C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084(v2);
  sub_216787968((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder(pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    pxrInternal__aapl__pxrReserved__::ArResolver::UnbindContext(v2);
  }
  sub_2168EE084((uint64_t)this + 32);
  unint64_t v3 = (void **)((char *)this + 8);
  sub_216787968(&v3);
}

pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache(pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *this)
{
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::BeginCacheScope((pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, this);
  return this;
}

void sub_216970814(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache(pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *this, const pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)sub_2168EE4C4(this, a2);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v3);
  pxrInternal__aapl__pxrReserved__::ArResolver::BeginCacheScope((pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, this);
  return this;
}

void sub_216970860(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache(pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *this)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::EndCacheScope((pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, this);

  sub_2168EE084((uint64_t)this);
}

void pxrInternal__aapl__pxrReserved__::ArTimestamp::_IssueInvalidGetTimeError(pxrInternal__aapl__pxrReserved__::ArTimestamp *this)
{
  v1[0] = "ar/timestamp.cpp";
  v1[1] = "_IssueInvalidGetTimeError";
  v1[2] = 34;
  v1[3] = "void pxrInternal__aapl__pxrReserved__::ArTimestamp::_IssueInvalidGetTimeError() const";
  char v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot call GetTime on an invalid ArTimestamp");
}

void *pxrInternal__aapl__pxrReserved__::ArWritableAsset::ArWritableAsset(void *this)
{
  *this = &unk_26C754628;
  return this;
}

uint64_t sub_216970944()
{
  std::string::size_type v0 = sub_216971174();

  return sub_2169712A0(v0);
}

void *pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(pxrInternal__aapl__pxrReserved__::ArMemoryResolver *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EB48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EB48))
  {
    qword_267B8EB40 = 0;
    __cxa_guard_release(&qword_267B8EB48);
  }
  return &unk_267B8EB28;
}

void *pxrInternal__aapl__pxrReserved__::ArMemoryResolver::SetSandboxingCallback(pxrInternal__aapl__pxrReserved__::ArMemoryResolver *a1)
{
  pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(a1);

  return sub_216970A00(qword_267B8EB28, (uint64_t)a1);
}

void *sub_216970A00(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  sub_216971468((uint64_t)v4, a2);
  sub_216971500(v4, a1);
  sub_21697176C(v4);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_CreateIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix((const std::string *)a2, 63, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
LABEL_3:
      if (*(char *)(a2 + 23) < 0)
      {
        sub_216778F24((unsigned char *)a4, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)a2;
        *(void *)(a4 + 16) = *(void *)(a2 + 16);
      }
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_3;
  }
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifier(a1, a2, a3, (void *)a4);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216970B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_OpenAsset(const std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(a1, 63, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
LABEL_3:
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v4 = (uint64_t *)a1;
    }
    else {
      unint64_t v4 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    }
    uint64_t v5 = [NSURL URLWithString:[NSString stringWithUTF8String:v4]];
    if (!v5) {
      goto LABEL_30;
    }
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v6 = [[(id)objc_msgSend(MEMORY[0x263F08BA0], "componentsWithURL:resolvingAgainstBaseURL:", v5, 0) queryItems];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (!v7) {
      goto LABEL_30;
    }
    uint64_t v8 = *(void *)v23;
    while (1)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v10, "name"), "isEqualToString:", @"address"))
        {
          if (![v10 value]) {
            continue;
          }
          uint64_t v11 = (unint64_t *)&v20;
          int v12 = 16;
          goto LABEL_18;
        }
        if (objc_msgSend((id)objc_msgSend(v10, "name"), "isEqualToString:", @"size")
          && [v10 value])
        {
          uint64_t v11 = &v19;
          int v12 = 10;
LABEL_18:
          unint64_t *v11 = strtoull((const char *)[v10 value], 0, v12);
          continue;
        }
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
      if (!v7)
      {
        char v13 = v20;
        if (v20)
        {
          unint64_t v14 = v19;
          if (v19)
          {
            long long v15 = (pxrInternal__aapl__pxrReserved__::ArMemoryAsset *)operator new(0x18uLL);
            pxrInternal__aapl__pxrReserved__::ArMemoryAsset::ArMemoryAsset(v15, v13, v14);
            sub_216971900(a2, (uint64_t)v15);
            goto LABEL_31;
          }
        }
LABEL_30:
        *a2 = 0;
        a2[1] = 0;
        goto LABEL_31;
      }
    }
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = (const char *)a1;
  }
  else {
    uint64_t v16 = (const char *)a1->__r_.__value_.__r.__words[0];
  }
  unint64_t v17 = pxrInternal__aapl__pxrReserved__::ArchOpenFile(v16, "rb");
  if (!v17) {
    goto LABEL_30;
  }
  unint64_t v18 = (pxrInternal__aapl__pxrReserved__::ArFilesystemAsset *)operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::ArFilesystemAsset::ArFilesystemAsset(v18, v17);
  sub_2169717F0(a2, (uint64_t)v18);
LABEL_31:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216970DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  operator delete(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_GetModificationTimestamp(uint64_t a1, uint64_t a2, std::string *a3)
{
  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(a3, 63, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
LABEL_3:
    double ModificationTimestamp = (float)time(0);
    goto LABEL_6;
  }
  double ModificationTimestamp = pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetModificationTimestamp(a1, a2, (char *)a3);
LABEL_6:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return ModificationTimestamp;
}

void sub_216970EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_Resolve(pxrInternal__aapl__pxrReserved__::ArResolver *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Suffix = pxrInternal__aapl__pxrReserved__::TfStringGetSuffix((const std::string *)a2, 63, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v17.__r_.__value_.__l.__size_) {
      goto LABEL_18;
    }
  }
  else if (*((unsigned char *)&v17.__r_.__value_.__s + 23))
  {
    goto LABEL_18;
  }
  IsRelativePath = (pxrInternal__aapl__pxrReserved__::ArMemoryResolver *)pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback((pxrInternal__aapl__pxrReserved__::ArMemoryResolver *)Suffix);
  if (!qword_267B8EB40) {
    goto LABEL_25;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8
    || (IsRelativePath = (pxrInternal__aapl__pxrReserved__::ArMemoryResolver *)pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2),
        !IsRelativePath))
  {
    pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(IsRelativePath);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (sub_216971084((uint64_t)qword_267B8EB28, v12)) {
      goto LABEL_25;
    }
LABEL_18:
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
    }
    goto LABEL_26;
  }
  pxrInternal__aapl__pxrReserved__::ArchGetCwd(__p);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)__p, a2, v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_sandboxingCallback(v9);
  if (v16 >= 0) {
    uint64_t v10 = v15;
  }
  else {
    uint64_t v10 = (void **)v15[0];
  }
  char v11 = sub_216971084((uint64_t)qword_267B8EB28, (uint64_t)v10);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if ((v11 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_25:
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_Resolve(a1, a2, (void *)a3);
LABEL_26:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_216971034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216971084(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryResolver::_GetExtension(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix(a1, 63, &__p);
  pxrInternal__aapl__pxrReserved__::TfGetExtension((uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21697112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21697114C(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *a1)
{
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(a1);

  operator delete(v1);
}

uint64_t *sub_216971174()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216971348((unint64_t **)v5);
  std::string::size_type v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216971254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2169712A0(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C754748;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21697132C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216971348(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169713B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169713E0(pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase::~Ar_ResolverFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *sub_216971408()
{
  std::string::size_type v0 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v0);
  *(void *)std::string::size_type v0 = &unk_26C754668;
  return v0;
}

void sub_216971454(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216971468(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_216971500(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_216971760(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

void *sub_21697176C(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_2169717F0(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C754788;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216971848(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324560(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216971864(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21697188C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2169718BC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7547D8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216971900(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C754800;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216971958(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324560(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216971974(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_21697199C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2169719CC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C754850)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::ArMemoryAsset *pxrInternal__aapl__pxrReserved__::ArMemoryAsset::ArMemoryAsset(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this, const char *a2, uint64_t a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(this);
  *uint64_t v6 = &unk_26C754878;
  v6[1] = a2;
  void v6[2] = a3;
  if (!a2)
  {
    v8[0] = "arCustom/memoryAsset.cpp";
    v8[1] = "ArMemoryAsset";
    _OWORD v8[2] = 14;
    uint64_t v8[3] = "pxrInternal__aapl__pxrReserved__::ArMemoryAsset::ArMemoryAsset(const char *, size_t)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid input data");
  }
  return this;
}

void sub_216971AB0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArMemoryAsset::~ArMemoryAsset(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this)
{
  *(void *)this = &unk_26C754878;
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

{
  *(void *)this = &unk_26C754878;
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C754878;
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::GetSize(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this)
{
  return *((void *)this + 2);
}

void *pxrInternal__aapl__pxrReserved__::ArMemoryAsset::GetBuffer@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = this[1];
  if (v3)
  {
    *a2 = v3;
    this = operator new(0x20uLL);
    *this = &unk_26C7548D8;
    this[1] = 0;
    this[2] = 0;
    this[3] = v3;
    a2[1] = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void sub_216971BB4(void *a1)
{
}

void sub_216971BC0(_Unwind_Exception *a1)
{
}

size_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::Read(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this, void *__dst, size_t __n, uint64_t a4)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4 && (size_t v5 = __n, a4 + __n <= *((void *)this + 2)))
  {
    memcpy(__dst, (const void *)(v4 + a4), __n);
  }
  else
  {
    v10[0] = "arCustom/memoryAsset.cpp";
    v10[1] = "Read";
    void v10[2] = 53;
    uint64_t v10[3] = "virtual size_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::Read(void *, size_t, size_t) const";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v9 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 3, (pxrInternal__aapl__pxrReserved__ *)"Error occurred reading file: %s", (const char *)v6);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v5;
}

void sub_216971CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArMemoryAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::ArMemoryAsset *this)
{
  return 0;
}

void sub_216971CCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216971CF8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C754918)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12KindRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  unint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::KindRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      char v9 = (pxrInternal__aapl__pxrReserved__::KindRegistry *)operator new(0x38uLL);
      pxrInternal__aapl__pxrReserved__::KindRegistry::KindRegistry(v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::KindRegistry *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          std::string v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>:"
                ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::KindRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        std::string v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_"
              "CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::KindRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::KindRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_216971F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    uint64_t v3[2] = 56;
    void v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::S"
            "etInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::KindRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::DeleteInstance()
{
  for (uint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
        result;
        uint64_t result = v1)
  {
    uint64_t v1 = result;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == result)
    {
      unint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v2();
    }
    sched_yield();
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::~KindTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *this)
{
  uint64_t v6 = (void **)((char *)this + 40);
  sub_216889A04(&v6);
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::KindTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "model", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "component", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "group", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "assembly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "subcomponent", 0);
  uint64_t v3 = *this;
  int v19 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      int v19 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v20 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v6;
    }
  }
  int v7 = this[2];
  uint64_t v21 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v21 = v8;
    }
  }
  char v9 = this[3];
  long long v22 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      long long v22 = v10;
    }
  }
  unint64_t v11 = this[4];
  long long v23 = v11;
  if ((v11 & 7) != 0)
  {
    std::string v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      long long v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  uint64_t v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    long long v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    std::string v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *)this;
}

void sub_21697236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::KindRegistry *pxrInternal__aapl__pxrReserved__::KindRegistry::KindRegistry(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  *((void *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *(void *)this = &unk_26C754938;
  *((_OWORD *)this + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults(this);
  return this;
}

void sub_2169724B4(_Unwind_Exception *a1)
{
  sub_2169735B4(v2);
  sub_216859A88(v1, v4);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  uint64_t v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v2) {
    uint64_t v2 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  std::string __p = 0;
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 4), (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v3) {
    uint64_t v3 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  std::string __p = 0;
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4) {
    uint64_t v4 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 1);
  uint64_t v6 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v6) {
    uint64_t v6 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)v6);
  int v7 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v7) {
    int v7 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 2);
  char v9 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v9) {
    char v9 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  uint64_t v10 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v10) {
    uint64_t v10 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  unint64_t v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 3);
  std::string v12 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v12) {
    std::string v12 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 2));
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v13);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins(v49, Instance);
  for (long long i = *(_OWORD *)v49; (void)i != *((void *)&i + 1); sub_216973534(&i))
  {
    v47[0] = 0;
    v47[1] = 0;
    int v46 = (uint64_t *)v47;
    uint64_t v17 = (uint64_t *)sub_216973444((uint64_t *)&i, v15, v16);
    uint64_t v18 = (const void ***)sub_2168E5D78(v17);
    Metadata = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v18, v45);
    uint64_t v20 = (uint64_t *)atomic_load((unint64_t *)&qword_267B8EB50);
    if (!v20)
    {
      uint64_t v20 = (uint64_t *)operator new(0x20uLL);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v20, "Kinds", 0);
      uint64_t v30 = *v20;
      if ((*v20 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v30 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v33 = v30;
      v20[1] = 0;
      v20[2] = 0;
      void v20[3] = 0;
      std::string __p = v20 + 1;
      LOBYTE(v36) = 0;
      Metadata = (pxrInternal__aapl__pxrReserved__::TfToken *)operator new(8uLL);
      v20[1] = (uint64_t)Metadata;
      v20[2] = (uint64_t)Metadata;
      *(void *)Metadata = v33;
      uint64_t v31 = (char *)Metadata + 8;
      void v20[3] = (uint64_t)Metadata + 8;
      if ((v33 & 7) != 0)
      {
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
          *(void *)Metadata &= 0xFFFFFFFFFFFFFFF8;
        }
        v20[2] = (uint64_t)v31;
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      else
      {
        v20[2] = (uint64_t)v31;
      }
      uint64_t v32 = 0;
      atomic_compare_exchange_strong(&qword_267B8EB50, (unint64_t *)&v32, (unint64_t)v20);
      if (v32)
      {
        std::string __p = v20 + 1;
        sub_216889A04((void ***)&__p);
        if ((*v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        operator delete(v20);
        uint64_t v20 = (uint64_t *)atomic_load((unint64_t *)&qword_267B8EB50);
      }
    }
    if ((*v20 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Metadata);
    }
    if (sub_2169734C4((uint64_t)v45, (const void **)EmptyString, &v46))
    {
      size_t v43 = v46;
      int v44 = (uint64_t *)v47;
      while (1)
      {
        if (v43 == v44) {
          goto LABEL_53;
        }
        sub_2168E5B8C(&v43, v22, v23);
        uint64_t v24 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        v41[0] = 0;
        v41[1] = 0;
        BOOL v40 = (uint64_t *)v41;
        long long v25 = (v42 & 0xFFFFFFFFFFFFFFF8) != 0
            ? (const void **)((v42 & 0xFFFFFFFFFFFFFFF8) + 16)
            : (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
        if (sub_2169734C4((uint64_t)&v46, v25, &v40)) {
          break;
        }
        std::string __p = "kind/registry.cpp";
        uint64_t v36 = "_RegisterDefaults";
        uint64_t v37 = 238;
        int v38 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults()";
        char v39 = 0;
        unint64_t v28 = v42 & 0xFFFFFFFFFFFFFFF8;
        if ((v42 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v29 = (const char *)(v28 + 16);
          if (*(char *)(v28 + 39) < 0) {
            uint64_t v29 = *(const char **)v29;
          }
        }
        else
        {
          uint64_t v29 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Expected dict for kind '%s'", v29);
LABEL_50:
        sub_216812ED4((uint64_t)&v40, v41[0]);
        if ((v42 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_2168E5EA0(&v43);
      }
      unint64_t v34 = 0;
      sub_216779094(&__p, "baseKind");
      size_t v26 = (void **)sub_21678C2D8((uint64_t)&v40, (const void **)&__p);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p);
      }
      if (v41 == v26)
      {
LABEL_41:
        pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v42, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
      }
      else
      {
        uint64_t v27 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v26 + 7);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsString(v27))
        {
          pxrInternal__aapl__pxrReserved__::JsValue::GetString(v27);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
          if ((v34 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v34 = (unint64_t)__p;
          goto LABEL_41;
        }
        std::string __p = "kind/registry.cpp";
        uint64_t v36 = "_RegisterDefaults";
        uint64_t v37 = 249;
        int v38 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_RegisterDefaults()";
        char v39 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Expected string for baseKind");
      }
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_50;
    }
LABEL_53:
    sub_216812ED4((uint64_t)v45, (void *)v45[1]);
    sub_216812ED4((uint64_t)&v46, v47[0]);
  }
  std::string __p = v49;
  sub_216850BF4((void ***)&__p);
}

void sub_216972A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,char a31,void *a32)
{
  sub_216889A04((void ***)&__p);
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v32);
  sub_216812ED4((uint64_t)&a28, a29);
  sub_216812ED4((uint64_t)&a31, a32);
  std::string __p = (void *)(v33 - 112);
  sub_216850BF4((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::~KindRegistry(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  *(void *)this = &unk_26C754938;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  sub_2169735B4((uint64_t)this + 16);
  sub_216859A88(v1, v2);
}

{
  uint64_t *v1;
  const void *v2;

  *(void *)this = &unk_26C754938;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  sub_2169735B4((uint64_t)this + 16);
  sub_216859A88(v1, v2);
}

{
  uint64_t *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C754938;
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  sub_2169735B4((uint64_t)this + 16);
  sub_216859A88(v2, v3);

  operator delete(this);
}

unint64_t pxrInternal__aapl__pxrReserved__::KindRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::KindRegistry *this)
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance();
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    int v7 = EmptyString;
  }
  else {
    int v7 = (unsigned char *)*EmptyString;
  }
  int v8 = (char)*v7;
  if (*v7) {
    BOOL v9 = (v8 - 48) >= 0xA;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    goto LABEL_25;
  }
  if (v8 != 95 && (v8 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_25;
  }
  do
  {
    int v12 = (char)*v7++;
    char v11 = v12;
    unsigned int v13 = (v12 & 0xFFFFFFDF) - 65;
    unsigned int v14 = v12 - 48;
  }
  while (v12 == 95 || v13 < 0x1A || v14 < 0xA);
  if (v11)
  {
LABEL_25:
    uint64_t v20 = "kind/registry.cpp";
    uint64_t v21 = "_Register";
    uint64_t v22 = 65;
    long long v23 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(const TfToken &, const TfToken &)";
    char v24 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid kind: '%s'");
  }
  else
  {
    uint64_t v17 = (void *)((char *)this + 16);
    if (sub_2168CB1F4(v17, a2))
    {
      uint64_t v20 = "kind/registry.cpp";
      uint64_t v21 = "_Register";
      uint64_t v22 = 73;
      long long v23 = "void pxrInternal__aapl__pxrReserved__::KindRegistry::_Register(const TfToken &, const TfToken &)";
      char v24 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Kind '%s' has already been registered");
    }
    else
    {
      uint64_t v19 = 0;
      sub_2168D2318(&v19, a3);
      uint64_t v20 = (char *)a2;
      uint64_t v18 = sub_216973654((uint64_t)v17, a2, (uint64_t)&unk_2174BFD90, (uint64_t **)&v20);
      sub_2168D2318(v18 + 3, &v19);
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::HasKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance();
  }
  return sub_2168CB120((void *)(v3 + 16), this) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::_HasKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_2168CB120((void *)this + 2, a2) != 0;
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::GetBaseKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::KindRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance();
  }

  pxrInternal__aapl__pxrReserved__::KindRegistry::_GetBaseKind(v4, this, a2);
}

void pxrInternal__aapl__pxrReserved__::KindRegistry::_GetBaseKind(pxrInternal__aapl__pxrReserved__::KindRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t v5 = sub_2168CB120((void *)this + 2, a2);
  if (!v5)
  {
    v10[0] = "kind/registry.cpp";
    v10[1] = "_GetBaseKind";
    void v10[2] = 108;
    uint64_t v10[3] = "TfToken pxrInternal__aapl__pxrReserved__::KindRegistry::_GetBaseKind(const TfToken &) const";
    char v11 = 0;
    unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      BOOL v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        BOOL v9 = *(const char **)v9;
      }
    }
    else
    {
      BOOL v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown kind: '%s'", v9);
    int v7 = 0;
    goto LABEL_10;
  }
  uint64_t v6 = (atomic_uint *)v5[3];
  *a3 = v6;
  if ((v6 & 7) != 0)
  {
    int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
LABEL_10:
    }
      *a3 = v7;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::KindRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::KindRegistry::_IsA(v4, this, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::_IsA(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (void *)((char *)this + 16);
  uint64_t v5 = *(void *)a2;
  do
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v7 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 0xFFFFFFFFFFFFFFF8) == v7) {
      break;
    }
    unint64_t v8 = sub_2168CB120(v4, a2);
    if (!v8) {
      break;
    }
    a2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 3);
    uint64_t v5 = v8[3];
  }
  while (v5);
  return v6 == v7;
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsModel(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4) {
    uint64_t v4 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }

  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v4, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsAssembly(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4) {
    uint64_t v4 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }

  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 3), a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsGroup(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4) {
    uint64_t v4 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }

  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 2), a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsComponent(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4) {
    uint64_t v4 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }

  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 1), a3);
}

BOOL pxrInternal__aapl__pxrReserved__::KindRegistry::IsSubComponent(pxrInternal__aapl__pxrReserved__::KindRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v4) {
    uint64_t v4 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }

  return pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 4), a3);
}

void *pxrInternal__aapl__pxrReserved__::KindRegistry::GetAllKinds@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::KindRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::KindRegistry>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::KindRegistry::_GetAllKinds(v2, a1);
}

void *pxrInternal__aapl__pxrReserved__::KindRegistry::_GetAllKinds@<X0>(pxrInternal__aapl__pxrReserved__::KindRegistry *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t result = (void *)sub_216973388((char **)a2, *((void *)this + 5));
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    unint64_t result = *(void **)(a2 + 8);
    do
    {
      unint64_t v6 = v5 + 2;
      if ((unint64_t)result >= *(void *)(a2 + 16))
      {
        unint64_t result = sub_216973984((char **)a2, v6);
      }
      else
      {
        uint64_t v7 = *v6;
        *unint64_t result = *v6;
        if ((v7 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *result &= 0xFFFFFFFFFFFFFFF8;
        }
        ++result;
      }
      *(void *)(a2 + 8) = result;
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return result;
}

void sub_21697336C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216973388(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    unint64_t v6 = (char *)sub_21677CB28(result, a2);
    BOOL v9 = *a1;
    unint64_t v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v11;
        v10 -= 8;
        *(void *)unint64_t v8 = 0;
      }
      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v15 = v12;
    unsigned int v13 = a1[2];
    a1[2] = &v6[8 * v7];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_2168BE9D8((uint64_t)&v14);
  }
  return result;
}

uint64_t sub_216973444(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::operator*() [T = const std::vector<pxrInternal__aa"
            "pl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169734BC()
{
}

BOOL sub_2169734C4(uint64_t a1, const void **a2, uint64_t **a3)
{
  uint64_t v5 = sub_21678C2D8(a1, a2);
  if (a1 + 8 == v5) {
    return 0;
  }
  char v6 = (unint64_t **)(v5 + 56);
  BOOL result = pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 56));
  if (result)
  {
    unint64_t JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v6);
    if ((uint64_t **)JsObject != a3) {
      sub_2168DEE84(a3, *(long long **)JsObject, (long long *)(JsObject + 8));
    }
    return 1;
  }
  return result;
}

void *sub_216973534(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    uint64_t v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::operator++() [T = const std::vector<"
            "pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_2169735B4(uint64_t a1)
{
  sub_2169735F0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2169735F0(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v5 = v2[2];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_216973654(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      BOOL result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          BOOL result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168CB514(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *uint64_t v21 = *v19;
    *uint64_t v19 = v21;
  }
  else
  {
    *uint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  BOOL result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216973888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_2169738AC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169738AC(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = __p[3];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = __p[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

atomic_uint **sub_2169738F8(atomic_ullong *a1)
{
  BOOL result = sub_216973940();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::~KindTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_216973940()
{
  unint64_t v0 = (atomic_uint **)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::KindTokens_StaticTokenType(v0);
  return v0;
}

void sub_216973970(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_216973984(char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v24 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21677CB28(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  unint64_t v12 = &v10[8 * v9];
  long long v23 = v12;
  uint64_t v13 = *a2;
  *(void *)uint64_t v11 = *a2;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  float v14 = v11 + 8;
  v22.i64[1] = (uint64_t)(v11 + 8);
  unint64_t v16 = *a1;
  BOOL v15 = a1[1];
  if (v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64((unint64_t)v15);
  }
  else
  {
    do
    {
      uint64_t v17 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v11 - sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = v17;
      v11 -= 8;
      *(void *)BOOL v15 = 0;
    }
    while (v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
    float v14 = (char *)v22.i64[1];
    unint64_t v12 = v23;
  }
  *a1 = v11;
  a1[1] = v14;
  int64x2_t v22 = v18;
  uint64_t v19 = a1[2];
  a1[2] = v12;
  long long v23 = v19;
  uint64_t v21 = v18.i64[0];
  sub_2168BE9D8((uint64_t)&v21);
  return v14;
}

uint64_t textFileFormatYylex(uint64_t a1, void *a2, BOOL *a3)
{
  uint64_t v4 = a1;
  a2[19] = a1;
  if (!*((_DWORD *)a2 + 20))
  {
    *((_DWORD *)a2 + 20) = 1;
    if (!*((_DWORD *)a2 + 21)) {
      *((_DWORD *)a2 + 2sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 1;
    }
    if (!a2[1]) {
      a2[1] = *MEMORY[0x263EF8350];
    }
    if (!a2[2]) {
      a2[2] = *MEMORY[0x263EF8358];
    }
    uint64_t v5 = a2[5];
    if (!v5 || (v6 = a2[3], (uint64_t v7 = *(void *)(v5 + 8 * v6)) == 0))
    {
      sub_216975DE0(a2);
      uint64_t buffer = textFileFormatYy_create_buffer((__sFILE *)a2[1], 0x4000, (uint64_t)a2);
      uint64_t v6 = a2[3];
      *(void *)(a2[5] + 8 * v6) = buffer;
      uint64_t v5 = a2[5];
      uint64_t v7 = *(void *)(v5 + 8 * v6);
    }
    a2[7] = *(void *)(v7 + 32);
    unint64_t v9 = *(unsigned char **)(v7 + 16);
    a2[9] = v9;
    a2[17] = v9;
    a2[1] = **(void **)(v5 + 8 * v6);
    *((unsigned char *)a2 + 48) = *v9;
  }
LABEL_12:
  uint64_t v10 = (unsigned char *)a2[9];
  uint64_t v11 = *((unsigned __int8 *)a2 + 48);
  unsigned char *v10 = v11;
  int v12 = *((_DWORD *)a2 + 21);
  uint64_t v13 = v10;
LABEL_13:
  int v14 = word_21745B6B0[61 * v12 + dword_217467738[v11]];
  if (v14 >= 1)
  {
    do
    {
      if (word_217467B38[v14])
      {
        *((_DWORD *)a2 + 28) = v14;
        a2[15] = v10;
      }
      int v15 = *++v10;
      int v14 = word_21745B6B0[61 * v14 + dword_217467738[v15]];
    }
    while (v14 > 0);
  }
  int v16 = -v14;
LABEL_18:
  int v17 = (__int16)word_217467B38[v16];
  a2[17] = v13;
  a2[8] = v10 - v13;
  *((unsigned char *)a2 + 48) = *v10;
  unsigned char *v10 = 0;
  a2[9] = v10;
  while (1)
  {
    switch(v17)
    {
      case 0:
        unsigned char *v10 = *((unsigned char *)a2 + 48);
        uint64_t v10 = (unsigned char *)(a2[15] + 1);
        int v16 = *((_DWORD *)a2 + 28);
        goto LABEL_18;
      case 1:
      case 3:
      case 5:
        goto LABEL_12;
      case 2:
        if (*(_DWORD *)(*a2 + 968) != 1) {
          goto LABEL_12;
        }
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 259;
      case 4:
        *((_DWORD *)a2 + 2sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 3;
        goto LABEL_12;
      case 6:
        *((_DWORD *)a2 + 2sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 1;
        goto LABEL_12;
      case 7:
        ++*(_DWORD *)(*a2 + 968);
        return 258;
      case 8:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 269;
      case 9:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 270;
      case 10:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 271;
      case 11:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 272;
      case 12:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 273;
      case 13:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 274;
      case 14:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 275;
      case 15:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 277;
      case 16:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 276;
      case 17:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 278;
      case 18:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 279;
      case 19:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 280;
      case 20:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 281;
      case 21:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 282;
      case 22:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 283;
      case 23:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 284;
      case 24:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 285;
      case 25:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 286;
      case 26:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 287;
      case 27:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 289;
      case 28:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 288;
      case 29:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 290;
      case 30:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 292;
      case 31:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 293;
      case 32:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 294;
      case 33:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 295;
      case 34:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 296;
      case 35:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 298;
      case 36:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 299;
      case 37:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 300;
      case 38:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 302;
      case 39:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 291;
      case 40:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 301;
      case 41:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 303;
      case 42:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 304;
      case 43:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 305;
      case 44:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 306;
      case 45:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 308;
      case 46:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 309;
      case 47:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 307;
      case 48:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 310;
      case 49:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 264;
      case 50:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier((uint64_t)&__dst, (uint64_t)&__p);
        if ((_BYTE)v72) {
          goto LABEL_202;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        uint64_t v52 = 263;
        goto LABEL_416;
      case 51:
        sub_216799F58(&__dst, (void *)a2[17], a2[8]);
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidNamespacedIdentifier((size_t *)&__dst, (uint64_t)&__p);
        if ((_BYTE)v72)
        {
LABEL_202:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v52 = 260;
        }
        else
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = __dst;
          }
          int v74 = 3;
          sub_216976968(v4, (uint64_t)&__p);
          sub_216976F30((uint64_t)&__p);
          uint64_t v52 = 265;
        }
LABEL_416:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return v52;
      case 52:
        pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 1, 0, (unsigned __int8 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 262;
      case 53:
        pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69);
        pxrInternal__aapl__pxrReserved__::Sdf_EvalAssetPath((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 0, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        goto LABEL_402;
      case 54:
        pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69);
        pxrInternal__aapl__pxrReserved__::Sdf_EvalAssetPath((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 1, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
LABEL_402:
        if (sub_216975F44((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69)) {
          uint64_t v52 = 261;
        }
        else {
          uint64_t v52 = 260;
        }
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v69);
        return v52;
      case 55:
      case 56:
        pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 1, 0, (unsigned __int8 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return 267;
      case 57:
      case 58:
        unsigned char *v10 = *((unsigned char *)a2 + 48);
        a2[17] = v13;
        a2[8] = 2;
        a2[9] = v13 + 2;
        *((unsigned char *)a2 + 48) = v13[2];
        void v13[2] = 0;
        a2[9] = v13 + 2;
        memset(&__p, 0, sizeof(__p));
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        return 267;
      case 59:
      case 60:
        *(_DWORD *)int v69 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2[8], 3, v69, (unsigned __int8 *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = __dst;
        }
        int v74 = 3;
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)(*a2 + 968) += *(_DWORD *)v69;
        return 267;
      case 61:
        __p.__r_.__value_.__r.__words[0] = 0x8000000000000000;
        int v74 = 2;
        sub_216976968(v4, (uint64_t)&__p);
        goto LABEL_421;
      case 62:
        v69[0] = 0;
        unint64_t v53 = pxrInternal__aapl__pxrReserved__::TfStringToUInt64((pxrInternal__aapl__pxrReserved__ *)a2[17], v69, a3);
        __p.__r_.__value_.__r.__words[0] = 0;
        int v74 = 0;
        __dst.__r_.__value_.__r.__words[0] = v53;
        sub_216976F8C((uint64_t)&__p, &__dst);
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (!v69[0]) {
          return 266;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/textFileFormat.ll";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"textFileFormatYylex";
        __p.__r_.__value_.__r.__words[2] = 293;
        long long v72 = "int textFileFormatYylex(Sdf_ParserHelpers::Value *, yyscan_t)";
        char v73 = 0;
        uint64_t v55 = a2[17];
        uint64_t v56 = *(unsigned int *)(*a2 + 968);
        size_t v57 = (const char *)(*a2 + 48);
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(void *)(*a2 + 56))
          {
            size_t v57 = *(const char **)v57;
            float64x2_t v58 = " in file ";
          }
          else
          {
            float64x2_t v58 = "";
            size_t v57 = "";
          }
        }
        else
        {
          float64x2_t v58 = " in file ";
          if (!*(unsigned char *)(*a2 + 71))
          {
            float64x2_t v58 = "";
            size_t v57 = "";
          }
        }
        goto LABEL_420;
      case 63:
        v69[0] = 0;
        uint64_t v59 = pxrInternal__aapl__pxrReserved__::TfStringToInt64((pxrInternal__aapl__pxrReserved__ *)a2[17], v69, a3);
        __p.__r_.__value_.__r.__words[0] = 0;
        int v74 = 0;
        __dst.__r_.__value_.__r.__words[0] = v59;
        sub_216976FD0((uint64_t)&__p, &__dst);
        sub_216976968(v4, (uint64_t)&__p);
        sub_216976F30((uint64_t)&__p);
        if (!v69[0]) {
          return 266;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/textFileFormat.ll";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"textFileFormatYylex";
        __p.__r_.__value_.__r.__words[2] = 309;
        long long v72 = "int textFileFormatYylex(Sdf_ParserHelpers::Value *, yyscan_t)";
        char v73 = 0;
        uint64_t v55 = a2[17];
        uint64_t v56 = *(unsigned int *)(*a2 + 968);
        size_t v57 = (const char *)(*a2 + 48);
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(void *)(*a2 + 56))
          {
            size_t v57 = *(const char **)v57;
            float64x2_t v58 = " in file ";
          }
          else
          {
            float64x2_t v58 = "";
            size_t v57 = "";
          }
        }
        else
        {
          float64x2_t v58 = " in file ";
          if (!*(unsigned char *)(*a2 + 71))
          {
            float64x2_t v58 = "";
            size_t v57 = "";
          }
        }
LABEL_420:
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Integer literal '%s' on line %d%s%s out of range, parsing as double.  Consider exponential notation for large floating point values.", v54, v55, v56, v58, v57);
        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::TfStringToDouble((pxrInternal__aapl__pxrReserved__ *)a2[17], v60);
        int v74 = 2;
        sub_216976968(v4, (uint64_t)&__p);
LABEL_421:
        sub_216976F30((uint64_t)&__p);
        return 266;
      case 64:
      case 65:
        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::TfStringToDouble((pxrInternal__aapl__pxrReserved__ *)a2[17], (const char *)a2);
        int v74 = 2;
        sub_216976968(v4, (uint64_t)&__p);
        goto LABEL_421;
      case 66:
        __p.__r_.__value_.__r.__words[0] = 0xFFF0000000000000;
        int v74 = 2;
        sub_216976968(v4, (uint64_t)&__p);
        goto LABEL_421;
      case 67:
        return *(char *)a2[17];
      case 68:
        return 260;
      case 69:
        fwrite((const void *)a2[17], a2[8], 1uLL, (FILE *)a2[2]);
        goto LABEL_12;
      case 70:
        uint64_t v18 = a2[17];
        unsigned char *v10 = *((unsigned char *)a2 + 48);
        uint64_t v19 = a2[5];
        uint64_t v20 = a2[3];
        uint64_t v21 = *(void *)(v19 + 8 * v20);
        if (*(_DWORD *)(v21 + 64))
        {
          uint64_t v22 = a2[7];
        }
        else
        {
          uint64_t v22 = *(void *)(v21 + 32);
          a2[7] = v22;
          *(void *)uint64_t v21 = a2[1];
          uint64_t v21 = *(void *)(v19 + 8 * v20);
          *(_DWORD *)(v21 + 64) = 1;
        }
        unint64_t v23 = a2[9];
        char v24 = *(unsigned char **)(v21 + 8);
        if (v23 <= (unint64_t)&v24[v22])
        {
          a2[9] = a2[17] + ~v18 + (int)v10;
          int v16 = sub_216975FBC((uint64_t)a2);
          uint64_t v10 = (unsigned char *)a2[9];
          int v12 = word_21745B6B0[61 * v16 + 1];
          if (v12 <= 0)
          {
LABEL_85:
            uint64_t v13 = (unsigned char *)a2[17];
            goto LABEL_18;
          }
          if (word_217467B38[v12])
          {
            *((_DWORD *)a2 + 28) = v12;
            a2[15] = v10;
          }
          uint64_t v13 = (unsigned char *)a2[17];
          a2[9] = ++v10;
          goto LABEL_87;
        }
        if (v23 > (unint64_t)&v24[v22 + 1])
        {
          int v62 = (FILE *)*MEMORY[0x263EF8348];
          BOOL v63 = "fatal flex scanner internal error--end of buffer missed";
          goto LABEL_432;
        }
        long long v25 = (char *)a2[17];
        unint64_t v26 = v23 - (void)v25;
        if (*(_DWORD *)(v21 + 60))
        {
          int v27 = v26 - 1;
          if ((int)v26 >= 2)
          {
            int v28 = v26 - 1;
            do
            {
              char v29 = *v25++;
              *v24++ = v29;
              --v28;
            }
            while (v28);
            uint64_t v21 = *(void *)(a2[5] + 8 * a2[3]);
          }
          uint64_t v67 = v4;
          int v68 = v26 - 1;
          int v66 = v18;
          if (*(_DWORD *)(v21 + 64) == 2)
          {
            a2[7] = 0;
            goto LABEL_32;
          }
          uint64_t v65 = v27;
          uint64_t v32 = ~(uint64_t)v27;
          unint64_t v33 = *(void *)(v21 + 24);
          unint64_t v34 = v33 + v32;
          if (v33 + v32) {
            goto LABEL_44;
          }
          float64x2_t v64 = v13;
          size_t v35 = (char *)a2[9];
          do
          {
            if (!*(_DWORD *)(v21 + 40))
            {
              *(void *)(v21 + 8) = 0;
LABEL_431:
              int v62 = (FILE *)*MEMORY[0x263EF8348];
              BOOL v63 = "fatal error - scanner input buffer overflow";
              goto LABEL_432;
            }
            uint64_t v36 = *(void **)(v21 + 8);
            uint64_t v37 = 2 * v33;
            uint64_t v38 = v33 + (v33 >> 3);
            if (v37) {
              uint64_t v38 = v37;
            }
            *(void *)(v21 + 24) = v38;
            char v39 = (char *)realloc(v36, v38 + 2);
            *(void *)(v21 + 8) = v39;
            if (!v39) {
              goto LABEL_431;
            }
            size_t v35 = &v39[(int)v35 - (int)v36];
            a2[9] = v35;
            uint64_t v21 = *(void *)(a2[5] + 8 * a2[3]);
            unint64_t v33 = *(void *)(v21 + 24);
            unint64_t v34 = v33 + v32;
          }
          while (!(v33 + v32));
          uint64_t v13 = v64;
LABEL_44:
          if (v34 >= 0x2000) {
            size_t v40 = 0x2000;
          }
          else {
            size_t v40 = v34;
          }
          if (*(_DWORD *)(v21 + 44))
          {
            size_t v30 = 0;
            while (1)
            {
              int v41 = getc((FILE *)a2[1]);
              if (v41 == -1 || v41 == 10) {
                break;
              }
              *(unsigned char *)(*(void *)(*(void *)(a2[5] + 8 * a2[3]) + 8) + v65 + v30++) = v41;
              if (v40 == v30)
              {
                size_t v30 = v40;
                break;
              }
            }
            if (v41 != -1)
            {
              if (v41 == 10)
              {
                int v31 = 0;
                *(unsigned char *)(*(void *)(*(void *)(a2[5] + 8 * a2[3]) + 8) + v65 + v30++) = 10;
                a2[7] = v30;
                goto LABEL_64;
              }
LABEL_66:
              a2[7] = v30;
              uint64_t v21 = *(void *)(a2[5] + 8 * a2[3]);
              *(void *)(v21 + 32) = v30;
              if (v30)
              {
                int v31 = 0;
                goto LABEL_68;
              }
              int v27 = v68;
              if (!v68)
              {
LABEL_70:
                textFileFormatYyrestart((__sFILE *)a2[1], a2);
                int v27 = v68;
                size_t v30 = a2[7];
                uint64_t v21 = *(void *)(a2[5] + 8 * a2[3]);
                int v31 = 1;
                goto LABEL_71;
              }
LABEL_33:
              size_t v30 = 0;
              int v31 = 2;
              *(_DWORD *)(v21 + 64) = 2;
              goto LABEL_71;
            }
            if (!ferror((FILE *)a2[1])) {
              goto LABEL_66;
            }
LABEL_435:
            int v62 = (FILE *)*MEMORY[0x263EF8348];
            BOOL v63 = "input in flex scanner failed";
LABEL_432:
            fprintf(v62, "%s\n", v63);
            exit(2);
          }
          *__error() = 0;
          size_t v30 = fread((void *)(*(void *)(*(void *)(a2[5] + 8 * a2[3]) + 8) + v65), 1uLL, v40, (FILE *)a2[1]);
          a2[7] = v30;
          if (!v30)
          {
            while (ferror((FILE *)a2[1]))
            {
              if (*__error() != 4) {
                goto LABEL_435;
              }
              *__error() = 0;
              clearerr((FILE *)a2[1]);
              size_t v43 = fread((void *)(*(void *)(*(void *)(a2[5] + 8 * a2[3]) + 8) + v65), 1uLL, v40, (FILE *)a2[1]);
              a2[7] = v43;
              if (v43)
              {
                size_t v30 = v43;
                goto LABEL_63;
              }
            }
            uint64_t v21 = *(void *)(a2[5] + 8 * a2[3]);
            int v27 = v68;
LABEL_32:
            *(void *)(v21 + 32) = 0;
            if (!v27) {
              goto LABEL_70;
            }
            goto LABEL_33;
          }
LABEL_63:
          int v31 = 0;
LABEL_64:
          uint64_t v21 = *(void *)(a2[5] + 8 * a2[3]);
          *(void *)(v21 + 32) = v30;
LABEL_68:
          int v27 = v68;
LABEL_71:
          size_t v44 = v30 + v27;
          if (v44 <= *(void *)(v21 + 24))
          {
            uint64_t v48 = *(void *)(v21 + 8);
          }
          else
          {
            BOOL v45 = realloc(*(void **)(v21 + 8), v44 + (v30 >> 1));
            uint64_t v46 = a2[5];
            uint64_t v47 = a2[3];
            *(void *)(*(void *)(v46 + 8 * v47) + 8) = v45;
            uint64_t v48 = *(void *)(*(void *)(v46 + 8 * v47) + 8);
            if (!v48)
            {
              int v62 = (FILE *)*MEMORY[0x263EF8348];
              BOOL v63 = "out of dynamic memory in yy_get_next_buffer()";
              goto LABEL_432;
            }
            size_t v44 = a2[7] + v68;
          }
          a2[7] = v44;
          *(unsigned char *)(v48 + v44) = 0;
          *(unsigned char *)(a2[7] + *(void *)(*(void *)(a2[5] + 8 * a2[3]) + 8) + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
          uint64_t v49 = a2[5];
          uint64_t v50 = a2[3];
          long long v25 = *(char **)(*(void *)(v49 + 8 * v50) + 8);
          a2[17] = v25;
          uint64_t v4 = v67;
          if (v31 != 1)
          {
            if (v31)
            {
              char v24 = *(unsigned char **)(*(void *)(v49 + 8 * v50) + 8);
              uint64_t v22 = a2[7];
LABEL_82:
              a2[9] = &v24[v22];
              int v16 = sub_216975FBC((uint64_t)a2);
              uint64_t v10 = (unsigned char *)a2[9];
              goto LABEL_85;
            }
            a2[9] = &v25[~v66 + (int)v10];
            int v12 = sub_216975FBC((uint64_t)a2);
            uint64_t v10 = (unsigned char *)a2[9];
            uint64_t v13 = (unsigned char *)a2[17];
LABEL_87:
            uint64_t v11 = *v10;
            goto LABEL_13;
          }
        }
        else if (v26 != 1)
        {
          goto LABEL_82;
        }
        *((_DWORD *)a2 + 22) = 0;
        a2[9] = v25;
        int v51 = *((_DWORD *)a2 + 21);
        if (v51 >= 1) {
          --v51;
        }
        int v17 = (v51 >> 1) + 71;
        break;
      case 71:
      case 72:
        return 0;
      default:
        sub_216976034("fatal flex scanner internal error--no action found");
    }
  }
}

void sub_216975AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216975DE0(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    uint64_t v3 = a1[4];
    if (a1[3] >= (unint64_t)(v3 - 1))
    {
      uint64_t v4 = v3 + 8;
      uint64_t v5 = (char *)realloc(v2, 8 * (v3 + 8));
      a1[5] = v5;
      if (v5)
      {
        uint64_t v6 = &v5[8 * a1[4]];
        double result = 0.0;
        *(_OWORD *)uint64_t v6 = 0u;
        *((_OWORD *)v6 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0u;
        *((_OWORD *)v6 + 2) = 0u;
        *((_OWORD *)v6 + 3) = 0u;
        a1[4] = v4;
        return result;
      }
LABEL_8:
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", "out of dynamic memory in textFileFormatYyensure_buffer_stack()");
      exit(2);
    }
  }
  else
  {
    uint64_t v8 = malloc(8uLL);
    a1[5] = v8;
    if (!v8) {
      goto LABEL_8;
    }
    *uint64_t v8 = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 3) = xmmword_217411D30;
  }
  return result;
}

uint64_t textFileFormatYy_create_buffer(__sFILE *a1, int a2, uint64_t a3)
{
  uint64_t v6 = malloc(0x48uLL);
  if (!v6 || (uint64_t v7 = (uint64_t)v6, v6[3] = a2, v8 = malloc(a2 + 2), (*(void *)(v7 + 8) = v8) == 0))
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", "out of dynamic memory in textFileFormatYy_create_buffer()");
    exit(2);
  }
  *(_DWORD *)(v7 + 40) = 1;
  sub_21697611C(v7, a1, a3);
  return v7;
}

BOOL sub_216975F44(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  unint64_t v1 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v2 = *(void *)this;
  unint64_t v3 = atomic_load((unint64_t *)(v1 + 144));
  if (v2 >= v3) {
    return 1;
  }

  return pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(this, (atomic_ullong *)v1);
}

uint64_t sub_216975FBC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 84);
  unint64_t v2 = *(unsigned char **)(a1 + 136);
  unint64_t v3 = *(void *)(a1 + 72);
  if ((unint64_t)v2 < v3)
  {
    unint64_t v4 = v3 - (void)v2;
    do
    {
      if (*v2) {
        int v5 = dword_217467738[*v2];
      }
      else {
        int v5 = 1;
      }
      uint64_t v1 = word_21745B6B0[61 * (int)v1 + v5];
      if (word_217467B38[v1])
      {
        *(_DWORD *)(a1 + 112) = v1;
        *(void *)(a1 + 120) = v2;
      }
      ++v2;
      --v4;
    }
    while (v4);
  }
  return v1;
}

void sub_216976034(const char *a1)
{
}

int *textFileFormatYyrestart(__sFILE *a1, void *a2)
{
  uint64_t v4 = a2[5];
  if (v4 && (uint64_t v5 = a2[3], *(void *)(v4 + 8 * v5))
    || (sub_216975DE0(a2),
        uint64_t buffer = textFileFormatYy_create_buffer((__sFILE *)a2[1], 0x4000, (uint64_t)a2),
        uint64_t v5 = a2[3],
        *(void *)(a2[5] + 8 * v5) = buffer,
        (uint64_t v4 = a2[5]) != 0))
  {
    uint64_t v7 = *(void *)(v4 + 8 * v5);
  }
  else
  {
    uint64_t v7 = 0;
  }
  double result = sub_21697611C(v7, a1, (uint64_t)a2);
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = *(void *)(v9 + 8 * v10);
  a2[7] = *(void *)(v11 + 32);
  int v12 = *(unsigned char **)(v11 + 16);
  a2[9] = v12;
  a2[17] = v12;
  a2[1] = **(void **)(v9 + 8 * v10);
  *((unsigned char *)a2 + 48) = *v12;
  return result;
}

int *sub_21697611C(uint64_t a1, FILE *a2, uint64_t a3)
{
  int v6 = *__error();
  textFileFormatYy_flush_buffer(a1, a3);
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  uint64_t v7 = *(void *)(a3 + 40);
  if (v7) {
    uint64_t v7 = *(void *)(v7 + 8 * *(void *)(a3 + 24));
  }
  if (v7 != a1) {
    *(void *)(a1 + 52) = 1;
  }
  if (a2)
  {
    int v8 = fileno(a2);
    BOOL v9 = isatty(v8) > 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *(_DWORD *)(a1 + 44) = v9;
  double result = __error();
  *double result = v6;
  return result;
}

void textFileFormatYy_switch_to_buffer(uint64_t a1, uint64_t a2)
{
  sub_216975DE0((void *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(v4 + 8 * v5);
    if (v6 != a1)
    {
      if (v6)
      {
        **(unsigned char **)(a2 + 72) = *(unsigned char *)(a2 + 48);
        uint64_t v4 = *(void *)(a2 + 40);
        uint64_t v5 = *(void *)(a2 + 24);
        *(void *)(*(void *)(v4 + 8 * v5) + 16) = *(void *)(a2 + 72);
        *(void *)(*(void *)(v4 + 8 * v5) + 32) = *(void *)(a2 + 56);
      }
      *(void *)(v4 + 8 * v5) = a1;
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(v7 + 8 * v5);
      *(void *)(a2 + 56) = *(void *)(v8 + 32);
      BOOL v9 = *(unsigned char **)(v8 + 16);
      *(void *)(a2 + 72) = v9;
      *(void *)(a2 + 136) = v9;
      *(void *)(a2 + 8) = **(void **)(v7 + 8 * v5);
      *(unsigned char *)(a2 + 48) = *v9;
      *(_DWORD *)(a2 + 88) = 1;
    }
  }
}

void textFileFormatYy_delete_buffer(void **a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    if (v3) {
      uint64_t v4 = *(void ***)(v3 + 8 * *(void *)(a2 + 24));
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4 == a1) {
      *(void *)(v3 + 8 * *(void *)(a2 + 24)) = 0;
    }
    if (*((_DWORD *)a1 + 10)) {
      free(a1[1]);
    }
    free(a1);
  }
}

uint64_t textFileFormatYy_flush_buffer(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)(result + 32) = 0;
    **(unsigned char **)(result + 8) = 0;
    *(unsigned char *)(*(void *)(result + 8) + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
    *(void *)(result + 16) = *(void *)(result + 8);
    *(_DWORD *)(result + 48) = 1;
    *(_DWORD *)(result + 64) = 0;
    uint64_t v2 = *(void *)(a2 + 40);
    if (v2) {
      uint64_t v3 = *(void *)(v2 + 8 * *(void *)(a2 + 24));
    }
    else {
      uint64_t v3 = 0;
    }
    if (v3 == result)
    {
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      *(void *)(a2 + 56) = *(void *)(v5 + 32);
      uint64_t v6 = *(unsigned char **)(v5 + 16);
      *(void *)(a2 + 72) = v6;
      *(void *)(a2 + 136) = v6;
      *(void *)(a2 + 8) = **(void **)(v2 + 8 * v4);
      *(unsigned char *)(a2 + 48) = *v6;
    }
  }
  return result;
}

void textFileFormatYypush_buffer_state(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    sub_216975DE0((void *)a2);
    uint64_t v4 = *(void *)(a2 + 40);
    uint64_t v5 = *(void *)(a2 + 24);
    if (*(void *)(v4 + 8 * v5))
    {
      **(unsigned char **)(a2 + 72) = *(unsigned char *)(a2 + 48);
      uint64_t v4 = *(void *)(a2 + 40);
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(*(void *)(v4 + 8 * v6) + 16) = *(void *)(a2 + 72);
      *(void *)(*(void *)(v4 + 8 * v6) + 32) = *(void *)(a2 + 56);
      uint64_t v5 = v6 + 1;
      *(void *)(a2 + 24) = v6 + 1;
    }
    *(void *)(v4 + 8 * v5) = a1;
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(v7 + 8 * v5);
    *(void *)(a2 + 56) = *(void *)(v8 + 32);
    BOOL v9 = *(unsigned char **)(v8 + 16);
    *(void *)(a2 + 72) = v9;
    *(void *)(a2 + 136) = v9;
    *(void *)(a2 + 8) = **(void **)(v7 + 8 * v5);
    *(unsigned char *)(a2 + 48) = *v9;
    *(_DWORD *)(a2 + 88) = 1;
  }
}

void textFileFormatYypop_buffer_state(void *a1)
{
  uint64_t v1 = a1[5];
  if (v1)
  {
    uint64_t v3 = *(void ***)(v1 + 8 * a1[3]);
    if (v3)
    {
      textFileFormatYy_delete_buffer(v3, (uint64_t)a1);
      uint64_t v4 = a1[3];
      *(void *)(a1[5] + 8 * v4) = 0;
      if (v4) {
        a1[3] = --v4;
      }
      uint64_t v5 = a1[5];
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8 * v4);
        if (v6)
        {
          a1[7] = *(void *)(v6 + 32);
          uint64_t v7 = *(unsigned char **)(v6 + 16);
          a1[9] = v7;
          a1[17] = v7;
          a1[1] = **(void **)(v5 + 8 * v4);
          *((unsigned char *)a1 + 48) = *v7;
          *((_DWORD *)a1 + 22) = 1;
        }
      }
    }
  }
}

void *textFileFormatYy_scan_buffer(char *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 < 2 || a1[v3] || a1[a2 - 1]) {
    return 0;
  }
  uint64_t v8 = malloc(0x48uLL);
  if (!v8)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", "out of dynamic memory in textFileFormatYy_scan_buffer()");
    exit(2);
  }
  uint64_t v5 = v8;
  _OWORD v8[2] = a1;
  uint64_t v8[3] = v3;
  *uint64_t v8 = 0;
  v8[1] = a1;
  void v8[4] = v3;
  unint64_t v8[5] = 0;
  *((_DWORD *)v8 + 12) = 1;
  *(void *)((char *)v8 + 60) = 0;
  textFileFormatYy_switch_to_buffer((uint64_t)v8, a3);
  return v5;
}

void *textFileFormatYy_scan_string(const char *a1, uint64_t a2)
{
  size_t v4 = strlen(a1);

  return textFileFormatYy_scan_bytes(a1, v4, a2);
}

void *textFileFormatYy_scan_bytes(const char *a1, size_t a2, uint64_t a3)
{
  unint64_t v6 = a2 + 2;
  uint64_t v7 = (char *)malloc(a2 + 2);
  if (!v7)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v11 = "out of dynamic memory in textFileFormatYy_scan_bytes()";
    goto LABEL_8;
  }
  uint64_t v8 = v7;
  if (a2) {
    memcpy(v7, a1, a2);
  }
  *(_WORD *)&v8[a2] = 0;
  double result = textFileFormatYy_scan_buffer(v8, v6, a3);
  if (!result)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v11 = "bad buffer in textFileFormatYy_scan_bytes()";
LABEL_8:
    fprintf(v10, "%s\n", v11);
    exit(2);
  }
  *((_DWORD *)result + 10) = 1;
  return result;
}

uint64_t textFileFormatYyget_extra(void *a1)
{
  return *(void *)a1;
}

uint64_t textFileFormatYyget_lineno(void *a1)
{
  uint64_t v1 = a1[5];
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8 * a1[3])) != 0) {
    return *(unsigned int *)(v2 + 52);
  }
  else {
    return 0;
  }
}

uint64_t textFileFormatYyget_column(void *a1)
{
  uint64_t v1 = a1[5];
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8 * a1[3])) != 0) {
    return *(unsigned int *)(v2 + 56);
  }
  else {
    return 0;
  }
}

uint64_t textFileFormatYyget_in(void *a1)
{
  return a1[1];
}

uint64_t textFileFormatYyget_out(void *a1)
{
  return a1[2];
}

uint64_t textFileFormatYyget_leng(void *a1)
{
  return a1[8];
}

uint64_t textFileFormatYyget_text(void *a1)
{
  return a1[17];
}

uint64_t textFileFormatYyset_extra(uint64_t result, void *a2)
{
  *a2 = result;
  return result;
}

uint64_t textFileFormatYyset_lineno(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 8 * a2[3])) == 0)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", "textFileFormatYyset_lineno called with no buffer");
    exit(2);
  }
  *(_DWORD *)(v3 + 52) = result;
  return result;
}

uint64_t textFileFormatYyset_column(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 8 * a2[3])) == 0)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", "textFileFormatYyset_column called with no buffer");
    exit(2);
  }
  *(_DWORD *)(v3 + 56) = result;
  return result;
}

uint64_t textFileFormatYyset_in(uint64_t result, void *a2)
{
  a2[1] = result;
  return result;
}

uint64_t textFileFormatYyset_out(uint64_t result, void *a2)
{
  a2[2] = result;
  return result;
}

uint64_t textFileFormatYyget_debug(unsigned int *a1)
{
  return a1[33];
}

uint64_t textFileFormatYyset_debug(uint64_t result, _DWORD *a2)
{
  a2[33] = result;
  return result;
}

uint64_t textFileFormatYyget_lval(void *a1)
{
  return a1[19];
}

uint64_t textFileFormatYyset_lval(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 152) = result;
  return result;
}

uint64_t textFileFormatYylex_init(void **a1)
{
  if (a1)
  {
    uint64_t v2 = malloc(0xA0uLL);
    *a1 = v2;
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t result = 0;
      v3[8] = 0u;
      v3[9] = 0u;
      v3[6] = 0u;
      v3[7] = 0u;
      void v3[4] = 0u;
      void v3[5] = 0u;
      uint64_t v3[2] = 0u;
      void v3[3] = 0u;
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      return result;
    }
    uint64_t v5 = __error();
    int v6 = 12;
  }
  else
  {
    uint64_t v5 = __error();
    int v6 = 22;
  }
  *uint64_t v5 = v6;
  return 1;
}

uint64_t textFileFormatYylex_init_extra(uint64_t a1, void *a2)
{
  if (a2)
  {
    size_t v4 = malloc(0xA0uLL);
    *a2 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t result = 0;
      *(void *)uint64_t v5 = a1;
      unint64_t v5[5] = 0u;
      v5[6] = 0u;
      unsigned char v5[8] = 0u;
      unsigned char v5[9] = 0u;
      v5[7] = 0u;
      void v5[3] = 0u;
      void v5[4] = 0u;
      *((_DWORD *)v5 + 24) = 0;
      *(_OWORD *)((char *)v5 + 8) = 0u;
      *(_OWORD *)((char *)v5 + 24) = 0u;
      *((void *)v5 + 5) = 0;
      *((void *)v5 + 9) = 0;
      *((void *)v5 + 10) = 0;
      return result;
    }
    uint64_t v7 = __error();
    int v8 = 12;
  }
  else
  {
    uint64_t v7 = __error();
    int v8 = 22;
  }
  *uint64_t v7 = v8;
  return 1;
}

uint64_t textFileFormatYylex_destroy(void *a1)
{
  for (long long i = (void *)a1[5]; i; long long i = (void *)a1[5])
  {
    if (!i[a1[3]]) {
      break;
    }
    textFileFormatYy_delete_buffer((void **)i[a1[3]], (uint64_t)a1);
    *(void *)(a1[5] + 8 * a1[3]) = 0;
    textFileFormatYypop_buffer_state(a1);
  }
  free(i);
  a1[5] = 0;
  free((void *)a1[13]);
  free(a1);
  return 0;
}

uint64_t sub_216976968(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 48);
  uint64_t v4 = *(unsigned int *)(a2 + 48);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C754970[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 48) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26C7549A0[v4])(&v5, result, a2);
}

void sub_216976A04(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_216976A18(uint64_t a1, void *a2)
{
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216976A34(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_216976A8C(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 48)) {
    return sub_216976B0C(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_216976AAC(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 48) != 1) {
    return sub_216976B70(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_216976AD0(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 48) != 2) {
    return sub_216976BD8(result, a3);
  }
  *a2 = *a3;
  return result;
}

void sub_216976AF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_216976AFC(uint64_t *a1, void *a2, void *a3)
{
  return sub_216976D38(*a1, a2, a3);
}

void sub_216976B04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_216976B0C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C754970[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_216976B70(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C754970[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 1;
  return a1;
}

uint64_t sub_216976BD8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C754970[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 48) = 2;
  return a1;
}

void sub_216976C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 48) == 3)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    long long v5 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v5;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    sub_216976CB8(a1, (long long *)a3);
  }
}

uint64_t sub_216976CB8(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C754970[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 48) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 48) = 3;
  return a1;
}

uint64_t sub_216976D38(uint64_t result, void *a2, void *a3)
{
  if (*(_DWORD *)(result + 48) != 4) {
    return sub_216976D7C(result, a3);
  }
  if (a3 != a2)
  {
    if ((*a2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a2 = *a3;
    *a3 = 0;
  }
  return result;
}

uint64_t sub_216976D7C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C754970[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *a2 = 0;
  *(_DWORD *)(a1 + 48) = 4;
  return a1;
}

void sub_216976DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 48) == 5)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    long long v5 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v5;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    char v6 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*v6);
    }
    long long v7 = *(_OWORD *)(a3 + 24);
    *(void *)(a2 + 40) = *(void *)(a3 + 40);
    *(_OWORD *)char v6 = v7;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    sub_216976E98(a1, (long long *)a3);
  }
}

uint64_t sub_216976E98(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C754970[v4])(&v8, a1);
  }
  *(_DWORD *)(a1 + 48) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + sub_216966BB8((void **)&xmmword_267B8EA30 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 48) = 5;
  return a1;
}

uint64_t sub_216976F30(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C754970[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

uint64_t sub_216976F8C(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 48)) {
    sub_216976B0C(a1, a2);
  }
  else {
    *(void *)a1 = *a2;
  }
  return a1;
}

uint64_t sub_216976FD0(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 48) == 1) {
    *(void *)a1 = *a2;
  }
  else {
    sub_216976B70(a1, a2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_CanCreateNewLayerWithIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3)
  {
    if (a2)
    {
      long long v5 = "cannot use empty identifier.";
      goto LABEL_12;
    }
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a1))
  {
    if (a2)
    {
      long long v5 = "cannot use anonymous layer identifier.";
LABEL_12:
      MEMORY[0x21D4477E0](a2, v5);
      return 0;
    }
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IdentifierContainsArguments((char **)a1))
  {
    if (a2)
    {
      long long v5 = "cannot use arguments in the identifier.";
      goto LABEL_12;
    }
    return 0;
  }
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216978168();
  if ((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    char v4 = (const char *)EmptyString;
  }
  else {
    char v4 = (const char *)*EmptyString;
  }
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v6 = *(void *)(a1 + 8);
  }
  size_t v7 = strlen(v4);
  if (v6 < v7) {
    return 0;
  }
  size_t v9 = v7;
  if (v5 >= 0) {
    uint64_t v10 = (const char *)a1;
  }
  else {
    uint64_t v10 = *(const char **)a1;
  }
  return strncmp(v10, v4, v9) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentifierContainsArguments(char **a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216978168();
  if ((*((void *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*((void *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  char v4 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v4 >= 0) {
    int v5 = (char *)a1;
  }
  else {
    int v5 = *a1;
  }
  int v6 = *((char *)EmptyString + 23);
  if (v6 >= 0) {
    size_t v7 = (char *)EmptyString;
  }
  else {
    size_t v7 = (char *)*EmptyString;
  }
  if (v6 >= 0) {
    int64_t v8 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    int64_t v8 = EmptyString[1];
  }
  if (!v8) {
    return 1;
  }
  if ((char)v4 < 0) {
    char v4 = a1[1];
  }
  size_t v9 = &v4[(void)v5];
  if ((uint64_t)v4 >= v8)
  {
    int v13 = *v7;
    int v14 = v5;
    do
    {
      int v15 = &v4[-v8];
      if (v15 == (char *)-1) {
        break;
      }
      int v16 = (char *)memchr(v14, v13, (size_t)(v15 + 1));
      if (!v16) {
        break;
      }
      uint64_t v10 = v16;
      if (!memcmp(v16, v7, v8)) {
        return v10 != v9 && v10 - v5 != -1;
      }
      int v14 = v10 + 1;
      char v4 = (char *)(v9 - (v10 + 1));
    }
    while ((uint64_t)v4 >= v8);
  }
  uint64_t v10 = v9;
  return v10 != v9 && v10 - v5 != -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ResolvePath(pxrInternal__aapl__pxrReserved__ *a1)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);

  return pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_CanWriteLayerToPath(pxrInternal__aapl__pxrReserved__ *a1)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);

  return pxrInternal__aapl__pxrReserved__::ArResolver::CanWriteAssetToPath((uint64_t)Resolver);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ComputeFilePath@<D0>(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X8>)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  char v4 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (!v6)
  {
    size_t v7 = pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
    pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset((uint64_t)v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v8;
    *(_OWORD *)a2 = v8;
    *(void *)(a2 + 16) = v9;
  }
  return result;
}

void sub_216977428(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ComputeLayerModificationTimestamp(pxrInternal__aapl__pxrReserved__ *this@<X0>, void *a2@<X8>)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(this);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(Identifier, (uint64_t)v11, (uint64_t)__p);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v6);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)Resolver);
  a2[1] = (char *)&off_26C7549D0 + 1;
  *a2 = v8;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_2169774F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(const std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216978168();
  if ((*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  char v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v8 >= 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  int v10 = *((char *)EmptyString + 23);
  if (v10 >= 0) {
    uint64_t v11 = (char *)EmptyString;
  }
  else {
    uint64_t v11 = (char *)*EmptyString;
  }
  if (v10 >= 0) {
    int64_t v12 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    int64_t v12 = EmptyString[1];
  }
  if (v12)
  {
    if (v8 >= 0) {
      int64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = a1->__r_.__value_.__l.__size_;
    }
    if (size >= v12)
    {
      int v16 = (char *)v9 + size;
      int v17 = *v11;
      int64_t v18 = size;
      uint64_t v19 = (std::string *)v9;
      do
      {
        int64_t v20 = v18 - v12;
        if (v20 == -1) {
          break;
        }
        uint64_t v21 = (char *)memchr(v19, v17, v20 + 1);
        if (!v21) {
          break;
        }
        uint64_t v22 = v21;
        if (!memcmp(v21, v11, v12))
        {
          if (v22 != v16)
          {
            std::string::size_type v14 = v22 - (char *)v9;
            if (v22 - (char *)v9 != -1) {
              goto LABEL_20;
            }
          }
          break;
        }
        uint64_t v19 = (std::string *)(v22 + 1);
        int64_t v18 = v16 - (v22 + 1);
      }
      while (v18 >= v12);
    }
    std::string::size_type v14 = size;
  }
  else
  {
    std::string::size_type v14 = 0;
  }
LABEL_20:
  std::string::basic_string(&v24, a1, 0, v14, (std::allocator<char> *)&v23);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v24;
  std::string::basic_string(&v24, a1, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = v24;
  return 1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(pxrInternal__aapl__pxrReserved__ *this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  *(void *)a2 = 0;
  ExternalAssetDependencies = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetExternalAssetDependencies((uint64_t *)&v15, this);
  int v5 = v15;
  if (v15 != v16)
  {
    do
    {
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(ExternalAssetDependencies);
      if (*((char *)v5 + 55) < 0)
      {
        sub_216778F24(__p, v5[4], (unint64_t)v5[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v5 + 2);
        int v13 = v5[6];
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)Resolver);
      uint64_t v14 = v7;
      char v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v5 + 2);
      ExternalAssetDependencies = (pxrInternal__aapl__pxrReserved__ *)sub_21697780C(v8, &v14);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = v5[1];
      if (v9)
      {
        do
        {
          int v10 = (char **)v9;
          uint64_t v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (char **)v5[2];
          BOOL v11 = *v10 == (char *)v5;
          int v5 = v10;
        }
        while (!v11);
      }
      int v5 = v10;
    }
    while (v10 != v16);
  }
  sub_21678A498((uint64_t)&v15, v16[0]);
}

void sub_2169777C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  sub_2168EBBB8(v18, 0);
  _Unwind_Resume(a1);
}

void *sub_21697780C(void *a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = (char *)&off_26C7549D0 + 1;
  *a1 = *a2;
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169778A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_ComputeAssetInfoFromIdentifier(uint64_t a1, void **a2, long long *a3, uint64_t *a4)
{
  v39[2] = *MEMORY[0x263EF8340];
  char v8 = (std::string *)operator new(0xA0uLL);
  v8[6].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&v8->__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v8->__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v8[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v8[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v8[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v8[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v8[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v8[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v8[5].__r_.__value_.__r.__words[1] = 0u;
  sub_216979330((char *)&__str, a3);
  if (sub_216977CF0(0))
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = *(void *)a1;
    }
    if (*((char *)a2 + 23) >= 0) {
      int64_t v12 = a2;
    }
    else {
      int64_t v12 = *a2;
    }
    if (*((char *)a4 + 23) >= 0) {
      int v13 = a4;
    }
    else {
      int v13 = (uint64_t *)*a4;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_ComputeAssetInfoFromIdentifier('%s', '%s', '%s')\n", v9, v10, v11, v12, v13);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a1))
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__ *)std::string::operator=(v8, (const std::string *)a1);
    goto LABEL_38;
  }
  std::string::operator=(v8, (const std::string *)a1);
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v31 = 0;
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  int v15 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(v8, (uint64_t)v30, (uint64_t)v28);
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v16 = (unint64_t)a2[1];
    if (v16)
    {
      int v15 = (pxrInternal__aapl__pxrReserved__ *)sub_216778F24(&__dst, *a2, v16);
      goto LABEL_20;
    }
LABEL_19:
    pxrInternal__aapl__pxrReserved__::Sdf_ComputeFilePath((pxrInternal__aapl__pxrReserved__ *)v30, (uint64_t)&__dst);
    goto LABEL_20;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_19;
  }
  std::string __dst = *(std::string *)a2;
LABEL_20:
  p_data = (void **)&v8[1].__r_.__value_.__l.__data_;
  if (SHIBYTE(v8[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(*p_data);
  }
  *(_OWORD *)p_data = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v8[1].__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v15);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetAssetInfo((uint64_t)Resolver);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = __dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  std::string v37 = v33;
  *((unsigned char *)&v33.__r_.__value_.__s + 23) = 0;
  v33.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string v38 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_2168ED33C(v39, v35);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__ *)sub_2168EE084((uint64_t)v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
LABEL_38:
  uint64_t v19 = pxrInternal__aapl__pxrReserved__::ArGetResolver(v14);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext((uint64_t *)&__dst, (pxrInternal__aapl__pxrReserved__::ArResolver *)v19);
  sub_2167ADF8C((uint64_t *)&v8[2]);
  _OWORD v8[2] = __dst;
  memset(&__dst, 0, sizeof(__dst));
  v30[0] = &__dst;
  sub_216787968((void ***)v30);
  std::string::operator=(v8 + 3, &__str);
  std::string::operator=(v8 + 4, &v37);
  std::string::operator=(v8 + 5, &v38);
  sub_2168EC6DC(v8[6].__r_.__value_.__r.__words, v39);
  if (sub_216977CF0(0))
  {
    uint64_t v22 = v8;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v22 = (std::string *)v8->__r_.__value_.__r.__words[0];
    }
    char v23 = (std::string::__raw *)&v8[1];
    if (SHIBYTE(v8[1].__r_.__value_.__r.__words[2]) < 0) {
      char v23 = (std::string::__raw *)v23->__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v24 = &v38;
    }
    else {
      std::string v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v25 = &v37;
    }
    else {
      long long v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_ComputeAssetInfoFromIdentifier:\n  assetInfo->identifier = '%s'\n  assetInfo->resolvedPath = '%s'\n  assetInfo->repoPath = '%s'\n  assetInfo->assetName = '%s'\n  assetInfo->version = '%s'\n", v20, v21, v22, v23, v24, v25, p_str);
  }
  sub_2168EE084((uint64_t)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v8;
}